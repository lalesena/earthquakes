import {
  require_react
} from "./chunk-AFOL7T4F.js";
import {
  __commonJS,
  __export,
  __toESM
} from "./chunk-PR4QN5HX.js";

// node_modules/frame-ticker/dist/FrameTicker.js
var require_FrameTicker = __commonJS({
  "node_modules/frame-ticker/dist/FrameTicker.js"(exports, module) {
    !function(e3, t4) {
      "object" == typeof exports && "object" == typeof module ? module.exports = t4() : "function" == typeof define && define.amd ? define("FrameTicker", [], t4) : "object" == typeof exports ? exports.FrameTicker = t4() : e3.FrameTicker = t4();
    }(exports, function() {
      return function(e3) {
        function t4(n2) {
          if (i2[n2]) return i2[n2].exports;
          var r2 = i2[n2] = { exports: {}, id: n2, loaded: false };
          return e3[n2].call(r2.exports, r2, r2.exports, t4), r2.loaded = true, r2.exports;
        }
        var i2 = {};
        return t4.m = e3, t4.c = i2, t4.p = "", t4(0);
      }([function(e3, t4, i2) {
        "use strict";
        var n2 = i2(1), r2 = function() {
          function e4(e6, t5, i3) {
            void 0 === e6 && (e6 = NaN), void 0 === t5 && (t5 = NaN), void 0 === i3 && (i3 = false), this._minFPS = t5, this._maxFPS = e6, this._timeScale = 1, this._currentTick = 0, this._currentTime = 0, this._tickDeltaTime = 0, this._isRunning = false, this._maxInterval = isNaN(this._minFPS) ? NaN : 1e3 / this._minFPS, this._minInterval = isNaN(this._maxFPS) ? NaN : 1e3 / this._maxFPS, this._onResume = new n2.default(), this._onPause = new n2.default(), this._onTick = new n2.default(), this._onTickOncePerFrame = new n2.default(), i3 || this.resume();
          }
          return e4.prototype.updateOnce = function(e6) {
            e6(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e4.prototype.resume = function() {
            this._isRunning || (this._isRunning = true, this._lastTimeUpdated = this.getTimer(), this._onResume.dispatch(), this.animateOnce());
          }, e4.prototype.pause = function() {
            this._isRunning && (this._isRunning = false, this._onPause.dispatch(), window.cancelAnimationFrame(this._animationFrameHandle));
          }, e4.prototype.dispose = function() {
            this.pause(), this._onResume.removeAll(), this._onPause.removeAll(), this._onTick.removeAll();
          }, Object.defineProperty(e4.prototype, "currentTick", { get: function() {
            return this._currentTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "currentTimeSeconds", { get: function() {
            return this._currentTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "tickDeltaTimeSeconds", { get: function() {
            return this._tickDeltaTime / 1e3;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "timeScale", { get: function() {
            return this._timeScale;
          }, set: function(e6) {
            this._timeScale !== e6 && (this._timeScale = e6);
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "onResume", { get: function() {
            return this._onResume;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "onPause", { get: function() {
            return this._onPause;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "onTick", { get: function() {
            return this._onTick;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "onTickOncePerFrame", { get: function() {
            return this._onTickOncePerFrame;
          }, enumerable: true, configurable: true }), Object.defineProperty(e4.prototype, "isRunning", { get: function() {
            return this._isRunning;
          }, enumerable: true, configurable: true }), e4.prototype.animateOnce = function() {
            var e6 = this;
            this._animationFrameHandle = window.requestAnimationFrame(function() {
              return e6.onFrame();
            });
          }, e4.prototype.onFrame = function() {
            if (this._now = this.getTimer(), this._frameDeltaTime = this._now - this._lastTimeUpdated, isNaN(this._minInterval) || this._frameDeltaTime >= this._minInterval) if (isNaN(this._maxInterval)) this.update(this._frameDeltaTime * this._timeScale, true), this._lastTimeUpdated = this._now;
            else for (this._interval = Math.min(this._frameDeltaTime, this._maxInterval); this._now >= this._lastTimeUpdated + this._interval; ) this.update(this._interval * this._timeScale, this._now <= this._lastTimeUpdated + 2 * this._maxInterval), this._lastTimeUpdated += this._interval;
            this._isRunning && this.animateOnce();
          }, e4.prototype.update = function(e6, t5) {
            void 0 === t5 && (t5 = true), this._currentTick++, this._currentTime += e6, this._tickDeltaTime = e6, this._onTick.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick), t5 && this._onTickOncePerFrame.dispatch(this.currentTimeSeconds, this.tickDeltaTimeSeconds, this.currentTick);
          }, e4.prototype.getTimer = function() {
            return Date.now();
          }, e4;
        }();
        Object.defineProperty(t4, "__esModule", { value: true }), t4.default = r2;
      }, function(e3, t4, i2) {
        !function(t5, i3) {
          e3.exports = i3();
        }(this, function() {
          return function(e4) {
            function t5(n2) {
              if (i3[n2]) return i3[n2].exports;
              var r2 = i3[n2] = { exports: {}, id: n2, loaded: false };
              return e4[n2].call(r2.exports, r2, r2.exports, t5), r2.loaded = true, r2.exports;
            }
            var i3 = {};
            return t5.m = e4, t5.c = i3, t5.p = "", t5(0);
          }([function(e4, t5) {
            "use strict";
            var i3 = function() {
              function e6() {
                this.functions = [];
              }
              return e6.prototype.add = function(e7) {
                return this.functions.indexOf(e7) === -1 && (this.functions.push(e7), true);
              }, e6.prototype.remove = function(e7) {
                var t6 = this.functions.indexOf(e7);
                return t6 > -1 && (this.functions.splice(t6, 1), true);
              }, e6.prototype.removeAll = function() {
                return this.functions.length > 0 && (this.functions.length = 0, true);
              }, e6.prototype.dispatch = function() {
                for (var e7 = [], t6 = 0; t6 < arguments.length; t6++) e7[t6] = arguments[t6];
                var i4 = this.functions.concat();
                i4.forEach(function(t7) {
                  t7.apply(void 0, e7);
                });
              }, Object.defineProperty(e6.prototype, "numItems", { get: function() {
                return this.functions.length;
              }, enumerable: true, configurable: true }), e6;
            }();
            Object.defineProperty(t5, "__esModule", { value: true }), t5.default = i3;
          }]);
        });
      }]);
    });
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object2) {
          if (typeof object2 === "object" && object2 !== null) {
            var $$typeof = object2.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object2.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object2) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object2) || typeOf(object2) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object2) {
          return typeOf(object2) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object2) {
          return typeOf(object2) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object2) {
          return typeOf(object2) === REACT_PROVIDER_TYPE;
        }
        function isElement(object2) {
          return typeof object2 === "object" && object2 !== null && object2.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object2) {
          return typeOf(object2) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object2) {
          return typeOf(object2) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object2) {
          return typeOf(object2) === REACT_LAZY_TYPE;
        }
        function isMemo(object2) {
          return typeOf(object2) === REACT_MEMO_TYPE;
        }
        function isPortal(object2) {
          return typeOf(object2) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object2) {
          return typeOf(object2) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object2) {
          return typeOf(object2) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object2) {
          return typeOf(object2) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty2 = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty2.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack2 = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack2 != null ? stack2 : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker2 = arrayOfTypeCheckers[i2];
          if (typeof checker2 !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker2) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker3 = arrayOfTypeCheckers[i3];
            var checkerResult = checker3(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker2 = shapeTypes[key];
            if (typeof checker2 !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker2));
            }
            var error = checker2(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker2 = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker2 !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker2));
            }
            if (!checker2) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker2(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step2;
              if (iteratorFn !== propValue.entries) {
                while (!(step2 = iterator.next()).done) {
                  if (!isNode(step2.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step2 = iterator.next()).done) {
                  var entry = step2.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol2(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol2(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-kapsule/dist/react-kapsule.mjs
var import_react = __toESM(require_react(), 1);

// node_modules/jerrypick/dist/jerrypick.mjs
function _iterableToArrayLimit(arr, i2) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s, _e, _x3, _r, _arr = [], _n = true, _d = false;
    try {
      if (_x3 = (_i = _i.call(arr)).next, 0 === i2) {
        if (Object(_i) !== _i) return;
        _n = false;
      } else for (; !(_n = (_s = _x3.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i2); _n = true) ;
    } catch (err) {
      _d = true, _e = err;
    } finally {
      try {
        if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2) return;
  if (typeof o2 === "string") return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor) n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set") return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o2, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++) arr2[i2] = arr[i2];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toPrimitive(input, hint) {
  if (typeof input !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== void 0) {
    var res = prim.call(input, hint || "default");
    if (typeof res !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
  var key = _toPrimitive(arg, "string");
  return typeof key === "symbol" ? key : String(key);
}
var omit = function omit2(obj, keys) {
  var keySet = new Set(keys);
  return Object.assign.apply(Object, [{}].concat(_toConsumableArray(Object.entries(obj).filter(function(_ref2) {
    var _ref3 = _slicedToArray(_ref2, 1), key = _ref3[0];
    return !keySet.has(key);
  }).map(function(_ref4) {
    var _ref5 = _slicedToArray(_ref4, 2), key = _ref5[0], val = _ref5[1];
    return _defineProperty({}, key, val);
  }))));
};

// node_modules/react-kapsule/dist/react-kapsule.mjs
function _arrayLikeToArray2(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles2(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles2(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray2(r2);
}
function _iterableToArray2(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit2(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest2() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread2() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray2(r2, e3) {
  return _arrayWithHoles2(r2) || _iterableToArrayLimit2(r2, e3) || _unsupportedIterableToArray2(r2, e3) || _nonIterableRest2();
}
function _toConsumableArray2(r2) {
  return _arrayWithoutHoles2(r2) || _iterableToArray2(r2) || _unsupportedIterableToArray2(r2) || _nonIterableSpread2();
}
function _unsupportedIterableToArray2(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray2(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray2(r2, a2) : void 0;
  }
}
function index(kapsuleComponent) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$wrapperElementTy = _ref.wrapperElementType, wrapperElementType = _ref$wrapperElementTy === void 0 ? "div" : _ref$wrapperElementTy, _ref$nodeMapper = _ref.nodeMapper, nodeMapper = _ref$nodeMapper === void 0 ? function(node) {
    return node;
  } : _ref$nodeMapper, _ref$methodNames = _ref.methodNames, methodNames = _ref$methodNames === void 0 ? [] : _ref$methodNames, _ref$initPropNames = _ref.initPropNames, initPropNames = _ref$initPropNames === void 0 ? [] : _ref$initPropNames;
  return (0, import_react.forwardRef)(function(props, ref) {
    var domEl = (0, import_react.useRef)();
    var comp = (0, import_react.useMemo)(function() {
      var configOptions = Object.fromEntries(initPropNames.filter(function(p2) {
        return props.hasOwnProperty(p2);
      }).map(function(prop) {
        return [prop, props[prop]];
      }));
      return kapsuleComponent(configOptions);
    }, []);
    useEffectOnce(function() {
      comp(nodeMapper(domEl.current));
    }, import_react.useLayoutEffect);
    useEffectOnce(function() {
      return comp._destructor instanceof Function ? comp._destructor : void 0;
    });
    var _call = (0, import_react.useCallback)(
      function(method) {
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        return comp[method] instanceof Function ? comp[method].apply(comp, args) : void 0;
      },
      [comp]
    );
    var prevPropsRef = (0, import_react.useRef)({});
    Object.keys(omit(props, [].concat(_toConsumableArray2(methodNames), _toConsumableArray2(initPropNames)))).filter(function(p2) {
      return prevPropsRef.current[p2] !== props[p2];
    }).forEach(function(p2) {
      return _call(p2, props[p2]);
    });
    prevPropsRef.current = props;
    (0, import_react.useImperativeHandle)(ref, function() {
      return Object.fromEntries(methodNames.map(function(method) {
        return [method, function() {
          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }
          return _call.apply(void 0, [method].concat(args));
        }];
      }));
    }, [_call]);
    return import_react.default.createElement(wrapperElementType, {
      ref: domEl
    });
  });
}
function useEffectOnce(effect) {
  var useEffectFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : import_react.useEffect;
  var destroyFunc = (0, import_react.useRef)();
  var effectCalled = (0, import_react.useRef)(false);
  var renderAfterCalled = (0, import_react.useRef)(false);
  var _useState = (0, import_react.useState)(0), _useState2 = _slicedToArray2(_useState, 2);
  _useState2[0];
  var setVal = _useState2[1];
  if (effectCalled.current) {
    renderAfterCalled.current = true;
  }
  useEffectFn(function() {
    if (!effectCalled.current) {
      destroyFunc.current = effect();
      effectCalled.current = true;
    }
    setVal(function(val) {
      return val + 1;
    });
    return function() {
      if (!renderAfterCalled.current) return;
      if (destroyFunc.current) destroyFunc.current();
    };
  }, []);
}

// node_modules/three/build/three.module.js
var REVISION = "168";
var MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
var TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
var CullFaceNone = 0;
var CullFaceBack = 1;
var CullFaceFront = 2;
var PCFShadowMap = 1;
var PCFSoftShadowMap = 2;
var VSMShadowMap = 3;
var FrontSide = 0;
var BackSide = 1;
var DoubleSide = 2;
var NoBlending = 0;
var NormalBlending = 1;
var AdditiveBlending = 2;
var SubtractiveBlending = 3;
var MultiplyBlending = 4;
var CustomBlending = 5;
var AddEquation = 100;
var SubtractEquation = 101;
var ReverseSubtractEquation = 102;
var MinEquation = 103;
var MaxEquation = 104;
var ZeroFactor = 200;
var OneFactor = 201;
var SrcColorFactor = 202;
var OneMinusSrcColorFactor = 203;
var SrcAlphaFactor = 204;
var OneMinusSrcAlphaFactor = 205;
var DstAlphaFactor = 206;
var OneMinusDstAlphaFactor = 207;
var DstColorFactor = 208;
var OneMinusDstColorFactor = 209;
var SrcAlphaSaturateFactor = 210;
var ConstantColorFactor = 211;
var OneMinusConstantColorFactor = 212;
var ConstantAlphaFactor = 213;
var OneMinusConstantAlphaFactor = 214;
var NeverDepth = 0;
var AlwaysDepth = 1;
var LessDepth = 2;
var LessEqualDepth = 3;
var EqualDepth = 4;
var GreaterEqualDepth = 5;
var GreaterDepth = 6;
var NotEqualDepth = 7;
var MultiplyOperation = 0;
var MixOperation = 1;
var AddOperation = 2;
var NoToneMapping = 0;
var LinearToneMapping = 1;
var ReinhardToneMapping = 2;
var CineonToneMapping = 3;
var ACESFilmicToneMapping = 4;
var CustomToneMapping = 5;
var AgXToneMapping = 6;
var NeutralToneMapping = 7;
var UVMapping = 300;
var CubeReflectionMapping = 301;
var CubeRefractionMapping = 302;
var EquirectangularReflectionMapping = 303;
var EquirectangularRefractionMapping = 304;
var CubeUVReflectionMapping = 306;
var RepeatWrapping = 1e3;
var ClampToEdgeWrapping = 1001;
var MirroredRepeatWrapping = 1002;
var NearestFilter = 1003;
var NearestMipmapNearestFilter = 1004;
var NearestMipmapLinearFilter = 1005;
var LinearFilter = 1006;
var LinearMipmapNearestFilter = 1007;
var LinearMipmapLinearFilter = 1008;
var UnsignedByteType = 1009;
var ByteType = 1010;
var ShortType = 1011;
var UnsignedShortType = 1012;
var IntType = 1013;
var UnsignedIntType = 1014;
var FloatType = 1015;
var HalfFloatType = 1016;
var UnsignedShort4444Type = 1017;
var UnsignedShort5551Type = 1018;
var UnsignedInt248Type = 1020;
var UnsignedInt5999Type = 35902;
var AlphaFormat = 1021;
var RGBFormat = 1022;
var RGBAFormat = 1023;
var LuminanceFormat = 1024;
var LuminanceAlphaFormat = 1025;
var DepthFormat = 1026;
var DepthStencilFormat = 1027;
var RedFormat = 1028;
var RedIntegerFormat = 1029;
var RGFormat = 1030;
var RGIntegerFormat = 1031;
var RGBAIntegerFormat = 1033;
var RGB_S3TC_DXT1_Format = 33776;
var RGBA_S3TC_DXT1_Format = 33777;
var RGBA_S3TC_DXT3_Format = 33778;
var RGBA_S3TC_DXT5_Format = 33779;
var RGB_PVRTC_4BPPV1_Format = 35840;
var RGB_PVRTC_2BPPV1_Format = 35841;
var RGBA_PVRTC_4BPPV1_Format = 35842;
var RGBA_PVRTC_2BPPV1_Format = 35843;
var RGB_ETC1_Format = 36196;
var RGB_ETC2_Format = 37492;
var RGBA_ETC2_EAC_Format = 37496;
var RGBA_ASTC_4x4_Format = 37808;
var RGBA_ASTC_5x4_Format = 37809;
var RGBA_ASTC_5x5_Format = 37810;
var RGBA_ASTC_6x5_Format = 37811;
var RGBA_ASTC_6x6_Format = 37812;
var RGBA_ASTC_8x5_Format = 37813;
var RGBA_ASTC_8x6_Format = 37814;
var RGBA_ASTC_8x8_Format = 37815;
var RGBA_ASTC_10x5_Format = 37816;
var RGBA_ASTC_10x6_Format = 37817;
var RGBA_ASTC_10x8_Format = 37818;
var RGBA_ASTC_10x10_Format = 37819;
var RGBA_ASTC_12x10_Format = 37820;
var RGBA_ASTC_12x12_Format = 37821;
var RGBA_BPTC_Format = 36492;
var RGB_BPTC_SIGNED_Format = 36494;
var RGB_BPTC_UNSIGNED_Format = 36495;
var RED_RGTC1_Format = 36283;
var SIGNED_RED_RGTC1_Format = 36284;
var RED_GREEN_RGTC2_Format = 36285;
var SIGNED_RED_GREEN_RGTC2_Format = 36286;
var InterpolateDiscrete = 2300;
var InterpolateLinear = 2301;
var InterpolateSmooth = 2302;
var ZeroCurvatureEnding = 2400;
var ZeroSlopeEnding = 2401;
var WrapAroundEnding = 2402;
var TrianglesDrawMode = 0;
var TriangleStripDrawMode = 1;
var TriangleFanDrawMode = 2;
var BasicDepthPacking = 3200;
var RGBADepthPacking = 3201;
var TangentSpaceNormalMap = 0;
var ObjectSpaceNormalMap = 1;
var NoColorSpace = "";
var SRGBColorSpace = "srgb";
var LinearSRGBColorSpace = "srgb-linear";
var DisplayP3ColorSpace = "display-p3";
var LinearDisplayP3ColorSpace = "display-p3-linear";
var LinearTransfer = "linear";
var SRGBTransfer = "srgb";
var Rec709Primaries = "rec709";
var P3Primaries = "p3";
var KeepStencilOp = 7680;
var AlwaysStencilFunc = 519;
var NeverCompare = 512;
var LessCompare = 513;
var EqualCompare = 514;
var LessEqualCompare = 515;
var GreaterCompare = 516;
var NotEqualCompare = 517;
var GreaterEqualCompare = 518;
var AlwaysCompare = 519;
var StaticDrawUsage = 35044;
var GLSL3 = "300 es";
var WebGLCoordinateSystem = 2e3;
var WebGPUCoordinateSystem = 2001;
var EventDispatcher = class {
  addEventListener(type, listener) {
    if (this._listeners === void 0) this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  }
  hasEventListener(type, listener) {
    if (this._listeners === void 0) return false;
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  }
  removeEventListener(type, listener) {
    if (this._listeners === void 0) return;
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index7 = listenerArray.indexOf(listener);
      if (index7 !== -1) {
        listenerArray.splice(index7, 1);
      }
    }
  }
  dispatchEvent(event) {
    if (this._listeners === void 0) return;
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array3 = listenerArray.slice(0);
      for (let i2 = 0, l2 = array3.length; i2 < l2; i2++) {
        array3[i2].call(this, event);
      }
      event.target = null;
    }
  }
};
var _lut = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
var _seed = 1234567;
var DEG2RAD = Math.PI / 180;
var RAD2DEG = 180 / Math.PI;
function generateUUID() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d2 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut[d0 & 255] + _lut[d0 >> 8 & 255] + _lut[d0 >> 16 & 255] + _lut[d0 >> 24 & 255] + "-" + _lut[d1 & 255] + _lut[d1 >> 8 & 255] + "-" + _lut[d1 >> 16 & 15 | 64] + _lut[d1 >> 24 & 255] + "-" + _lut[d2 & 63 | 128] + _lut[d2 >> 8 & 255] + "-" + _lut[d2 >> 16 & 255] + _lut[d2 >> 24 & 255] + _lut[d3 & 255] + _lut[d3 >> 8 & 255] + _lut[d3 >> 16 & 255] + _lut[d3 >> 24 & 255];
  return uuid.toLowerCase();
}
function clamp(value, min4, max4) {
  return Math.max(min4, Math.min(max4, value));
}
function euclideanModulo(n2, m2) {
  return (n2 % m2 + m2) % m2;
}
function mapLinear(x2, a1, a2, b1, b2) {
  return b1 + (x2 - a1) * (b2 - b1) / (a2 - a1);
}
function inverseLerp(x2, y2, value) {
  if (x2 !== y2) {
    return (value - x2) / (y2 - x2);
  } else {
    return 0;
  }
}
function lerp(x2, y2, t4) {
  return (1 - t4) * x2 + t4 * y2;
}
function damp(x2, y2, lambda, dt) {
  return lerp(x2, y2, 1 - Math.exp(-lambda * dt));
}
function pingpong(x2, length2 = 1) {
  return length2 - Math.abs(euclideanModulo(x2, length2 * 2) - length2);
}
function smoothstep(x2, min4, max4) {
  if (x2 <= min4) return 0;
  if (x2 >= max4) return 1;
  x2 = (x2 - min4) / (max4 - min4);
  return x2 * x2 * (3 - 2 * x2);
}
function smootherstep(x2, min4, max4) {
  if (x2 <= min4) return 0;
  if (x2 >= max4) return 1;
  x2 = (x2 - min4) / (max4 - min4);
  return x2 * x2 * x2 * (x2 * (x2 * 6 - 15) + 10);
}
function randInt(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1));
}
function randFloat(low, high) {
  return low + Math.random() * (high - low);
}
function randFloatSpread(range4) {
  return range4 * (0.5 - Math.random());
}
function seededRandom(s2) {
  if (s2 !== void 0) _seed = s2;
  let t4 = _seed += 1831565813;
  t4 = Math.imul(t4 ^ t4 >>> 15, t4 | 1);
  t4 ^= t4 + Math.imul(t4 ^ t4 >>> 7, t4 | 61);
  return ((t4 ^ t4 >>> 14) >>> 0) / 4294967296;
}
function degToRad(degrees6) {
  return degrees6 * DEG2RAD;
}
function radToDeg(radians5) {
  return radians5 * RAD2DEG;
}
function isPowerOfTwo(value) {
  return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo(value) {
  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo(value) {
  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler(q2, a2, b, c4, order) {
  const cos4 = Math.cos;
  const sin4 = Math.sin;
  const c22 = cos4(b / 2);
  const s2 = sin4(b / 2);
  const c13 = cos4((a2 + c4) / 2);
  const s13 = sin4((a2 + c4) / 2);
  const c1_3 = cos4((a2 - c4) / 2);
  const s1_3 = sin4((a2 - c4) / 2);
  const c3_1 = cos4((c4 - a2) / 2);
  const s3_1 = sin4((c4 - a2) / 2);
  switch (order) {
    case "XYX":
      q2.set(c22 * s13, s2 * c1_3, s2 * s1_3, c22 * c13);
      break;
    case "YZY":
      q2.set(s2 * s1_3, c22 * s13, s2 * c1_3, c22 * c13);
      break;
    case "ZXZ":
      q2.set(s2 * c1_3, s2 * s1_3, c22 * s13, c22 * c13);
      break;
    case "XZX":
      q2.set(c22 * s13, s2 * s3_1, s2 * c3_1, c22 * c13);
      break;
    case "YXY":
      q2.set(s2 * c3_1, c22 * s13, s2 * s3_1, c22 * c13);
      break;
    case "ZYZ":
      q2.set(s2 * s3_1, s2 * c3_1, c22 * s13, c22 * c13);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
  }
}
function denormalize(value, array3) {
  switch (array3.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return value / 4294967295;
    case Uint16Array:
      return value / 65535;
    case Uint8Array:
      return value / 255;
    case Int32Array:
      return Math.max(value / 2147483647, -1);
    case Int16Array:
      return Math.max(value / 32767, -1);
    case Int8Array:
      return Math.max(value / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function normalize(value, array3) {
  switch (array3.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return Math.round(value * 4294967295);
    case Uint16Array:
      return Math.round(value * 65535);
    case Uint8Array:
      return Math.round(value * 255);
    case Int32Array:
      return Math.round(value * 2147483647);
    case Int16Array:
      return Math.round(value * 32767);
    case Int8Array:
      return Math.round(value * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
var MathUtils = {
  DEG2RAD,
  RAD2DEG,
  generateUUID,
  clamp,
  euclideanModulo,
  mapLinear,
  inverseLerp,
  lerp,
  damp,
  pingpong,
  smoothstep,
  smootherstep,
  randInt,
  randFloat,
  randFloatSpread,
  seededRandom,
  degToRad,
  radToDeg,
  isPowerOfTwo,
  ceilPowerOfTwo,
  floorPowerOfTwo,
  setQuaternionFromProperEuler,
  normalize,
  denormalize
};
var Vector2 = class _Vector2 {
  constructor(x2 = 0, y2 = 0) {
    _Vector2.prototype.isVector2 = true;
    this.x = x2;
    this.y = y2;
  }
  get width() {
    return this.x;
  }
  set width(value) {
    this.x = value;
  }
  get height() {
    return this.y;
  }
  set height(value) {
    this.y = value;
  }
  set(x2, y2) {
    this.x = x2;
    this.y = y2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setComponent(index7, value) {
    switch (index7) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      default:
        throw new Error("index is out of range: " + index7);
    }
    return this;
  }
  getComponent(index7) {
    switch (index7) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + index7);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(v3) {
    this.x = v3.x;
    this.y = v3.y;
    return this;
  }
  add(v3) {
    this.x += v3.x;
    this.y += v3.y;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    return this;
  }
  addVectors(a2, b) {
    this.x = a2.x + b.x;
    this.y = a2.y + b.y;
    return this;
  }
  addScaledVector(v3, s2) {
    this.x += v3.x * s2;
    this.y += v3.y * s2;
    return this;
  }
  sub(v3) {
    this.x -= v3.x;
    this.y -= v3.y;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    return this;
  }
  subVectors(a2, b) {
    this.x = a2.x - b.x;
    this.y = a2.y - b.y;
    return this;
  }
  multiply(v3) {
    this.x *= v3.x;
    this.y *= v3.y;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }
  divide(v3) {
    this.x /= v3.x;
    this.y /= v3.y;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  applyMatrix3(m2) {
    const x2 = this.x, y2 = this.y;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[3] * y2 + e3[6];
    this.y = e3[1] * x2 + e3[4] * y2 + e3[7];
    return this;
  }
  min(v3) {
    this.x = Math.min(this.x, v3.x);
    this.y = Math.min(this.y, v3.y);
    return this;
  }
  max(v3) {
    this.x = Math.max(this.x, v3.x);
    this.y = Math.max(this.y, v3.y);
    return this;
  }
  clamp(min4, max4) {
    this.x = Math.max(min4.x, Math.min(max4.x, this.x));
    this.y = Math.max(min4.y, Math.min(max4.y, this.y));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    return this;
  }
  clampLength(min4, max4) {
    const length2 = this.length();
    return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min4, Math.min(max4, length2)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  dot(v3) {
    return this.x * v3.x + this.y * v3.y;
  }
  cross(v3) {
    return this.x * v3.y - this.y * v3.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    const angle2 = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle2;
  }
  angleTo(v3) {
    const denominator = Math.sqrt(this.lengthSq() * v3.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v3) / denominator;
    return Math.acos(clamp(theta, -1, 1));
  }
  distanceTo(v3) {
    return Math.sqrt(this.distanceToSquared(v3));
  }
  distanceToSquared(v3) {
    const dx = this.x - v3.x, dy = this.y - v3.y;
    return dx * dx + dy * dy;
  }
  manhattanDistanceTo(v3) {
    return Math.abs(this.x - v3.x) + Math.abs(this.y - v3.y);
  }
  setLength(length2) {
    return this.normalize().multiplyScalar(length2);
  }
  lerp(v3, alpha) {
    this.x += (v3.x - this.x) * alpha;
    this.y += (v3.y - this.y) * alpha;
    return this;
  }
  lerpVectors(v1, v22, alpha) {
    this.x = v1.x + (v22.x - v1.x) * alpha;
    this.y = v1.y + (v22.y - v1.y) * alpha;
    return this;
  }
  equals(v3) {
    return v3.x === this.x && v3.y === this.y;
  }
  fromArray(array3, offset = 0) {
    this.x = array3[offset];
    this.y = array3[offset + 1];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.x;
    array3[offset + 1] = this.y;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.x = attribute2.getX(index7);
    this.y = attribute2.getY(index7);
    return this;
  }
  rotateAround(center, angle2) {
    const c4 = Math.cos(angle2), s2 = Math.sin(angle2);
    const x2 = this.x - center.x;
    const y2 = this.y - center.y;
    this.x = x2 * c4 - y2 * s2 + center.x;
    this.y = x2 * s2 + y2 * c4 + center.y;
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
  }
};
var Matrix3 = class _Matrix3 {
  constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    _Matrix3.prototype.isMatrix3 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
    }
  }
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const te = this.elements;
    te[0] = n11;
    te[1] = n21;
    te[2] = n31;
    te[3] = n12;
    te[4] = n22;
    te[5] = n32;
    te[6] = n13;
    te[7] = n23;
    te[8] = n33;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    );
    return this;
  }
  copy(m2) {
    const te = this.elements;
    const me = m2.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrix3Column(this, 0);
    yAxis.setFromMatrix3Column(this, 1);
    zAxis.setFromMatrix3Column(this, 2);
    return this;
  }
  setFromMatrix4(m2) {
    const me = m2.elements;
    this.set(
      me[0],
      me[4],
      me[8],
      me[1],
      me[5],
      me[9],
      me[2],
      me[6],
      me[10]
    );
    return this;
  }
  multiply(m2) {
    return this.multiplyMatrices(this, m2);
  }
  premultiply(m2) {
    return this.multiplyMatrices(m2, this);
  }
  multiplyMatrices(a2, b) {
    const ae = a2.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[3], a13 = ae[6];
    const a21 = ae[1], a22 = ae[4], a23 = ae[7];
    const a31 = ae[2], a32 = ae[5], a33 = ae[8];
    const b11 = be[0], b12 = be[3], b13 = be[6];
    const b21 = be[1], b22 = be[4], b23 = be[7];
    const b31 = be[2], b32 = be[5], b33 = be[8];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  multiplyScalar(s2) {
    const te = this.elements;
    te[0] *= s2;
    te[3] *= s2;
    te[6] *= s2;
    te[1] *= s2;
    te[4] *= s2;
    te[7] *= s2;
    te[2] *= s2;
    te[5] *= s2;
    te[8] *= s2;
    return this;
  }
  determinant() {
    const te = this.elements;
    const a2 = te[0], b = te[1], c4 = te[2], d2 = te[3], e3 = te[4], f2 = te[5], g2 = te[6], h2 = te[7], i2 = te[8];
    return a2 * e3 * i2 - a2 * f2 * h2 - b * d2 * i2 + b * f2 * g2 + c4 * d2 * h2 - c4 * e3 * g2;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t122 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t122 + n31 * t13;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n31 * n23 - n33 * n21) * detInv;
    te[2] = (n32 * n21 - n31 * n22) * detInv;
    te[3] = t122 * detInv;
    te[4] = (n33 * n11 - n31 * n13) * detInv;
    te[5] = (n31 * n12 - n32 * n11) * detInv;
    te[6] = t13 * detInv;
    te[7] = (n21 * n13 - n23 * n11) * detInv;
    te[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  }
  transpose() {
    let tmp3;
    const m2 = this.elements;
    tmp3 = m2[1];
    m2[1] = m2[3];
    m2[3] = tmp3;
    tmp3 = m2[2];
    m2[2] = m2[6];
    m2[6] = tmp3;
    tmp3 = m2[5];
    m2[5] = m2[7];
    m2[7] = tmp3;
    return this;
  }
  getNormalMatrix(matrix4) {
    return this.setFromMatrix4(matrix4).invert().transpose();
  }
  transposeIntoArray(r2) {
    const m2 = this.elements;
    r2[0] = m2[0];
    r2[1] = m2[3];
    r2[2] = m2[6];
    r2[3] = m2[1];
    r2[4] = m2[4];
    r2[5] = m2[7];
    r2[6] = m2[2];
    r2[7] = m2[5];
    r2[8] = m2[8];
    return this;
  }
  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
    const c4 = Math.cos(rotation);
    const s2 = Math.sin(rotation);
    this.set(
      sx * c4,
      sx * s2,
      -sx * (c4 * cx + s2 * cy) + cx + tx,
      -sy * s2,
      sy * c4,
      -sy * (-s2 * cx + c4 * cy) + cy + ty,
      0,
      0,
      1
    );
    return this;
  }
  //
  scale(sx, sy) {
    this.premultiply(_m3.makeScale(sx, sy));
    return this;
  }
  rotate(theta) {
    this.premultiply(_m3.makeRotation(-theta));
    return this;
  }
  translate(tx, ty) {
    this.premultiply(_m3.makeTranslation(tx, ty));
    return this;
  }
  // for 2D Transforms
  makeTranslation(x2, y2) {
    if (x2.isVector2) {
      this.set(
        1,
        0,
        x2.x,
        0,
        1,
        x2.y,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        x2,
        0,
        1,
        y2,
        0,
        0,
        1
      );
    }
    return this;
  }
  makeRotation(theta) {
    const c4 = Math.cos(theta);
    const s2 = Math.sin(theta);
    this.set(
      c4,
      -s2,
      0,
      s2,
      c4,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(x2, y2) {
    this.set(
      x2,
      0,
      0,
      0,
      y2,
      0,
      0,
      0,
      1
    );
    return this;
  }
  //
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i2 = 0; i2 < 9; i2++) {
      if (te[i2] !== me[i2]) return false;
    }
    return true;
  }
  fromArray(array3, offset = 0) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.elements[i2] = array3[i2 + offset];
    }
    return this;
  }
  toArray(array3 = [], offset = 0) {
    const te = this.elements;
    array3[offset] = te[0];
    array3[offset + 1] = te[1];
    array3[offset + 2] = te[2];
    array3[offset + 3] = te[3];
    array3[offset + 4] = te[4];
    array3[offset + 5] = te[5];
    array3[offset + 6] = te[6];
    array3[offset + 7] = te[7];
    array3[offset + 8] = te[8];
    return array3;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
};
var _m3 = new Matrix3();
function arrayNeedsUint32(array3) {
  for (let i2 = array3.length - 1; i2 >= 0; --i2) {
    if (array3[i2] >= 65535) return true;
  }
  return false;
}
function createElementNS(name) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
function createCanvasElement() {
  const canvas = createElementNS("canvas");
  canvas.style.display = "block";
  return canvas;
}
var _cache = {};
function warnOnce(message) {
  if (message in _cache) return;
  _cache[message] = true;
  console.warn(message);
}
function probeAsync(gl, sync, interval) {
  return new Promise(function(resolve, reject) {
    function probe() {
      switch (gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0)) {
        case gl.WAIT_FAILED:
          reject();
          break;
        case gl.TIMEOUT_EXPIRED:
          setTimeout(probe, interval);
          break;
        default:
          resolve();
      }
    }
    setTimeout(probe, interval);
  });
}
var LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = new Matrix3().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
);
var LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = new Matrix3().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
);
var COLOR_SPACES = {
  [LinearSRGBColorSpace]: {
    transfer: LinearTransfer,
    primaries: Rec709Primaries,
    luminanceCoefficients: [0.2126, 0.7152, 0.0722],
    toReference: (color3) => color3,
    fromReference: (color3) => color3
  },
  [SRGBColorSpace]: {
    transfer: SRGBTransfer,
    primaries: Rec709Primaries,
    luminanceCoefficients: [0.2126, 0.7152, 0.0722],
    toReference: (color3) => color3.convertSRGBToLinear(),
    fromReference: (color3) => color3.convertLinearToSRGB()
  },
  [LinearDisplayP3ColorSpace]: {
    transfer: LinearTransfer,
    primaries: P3Primaries,
    luminanceCoefficients: [0.2289, 0.6917, 0.0793],
    toReference: (color3) => color3.applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),
    fromReference: (color3) => color3.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3)
  },
  [DisplayP3ColorSpace]: {
    transfer: SRGBTransfer,
    primaries: P3Primaries,
    luminanceCoefficients: [0.2289, 0.6917, 0.0793],
    toReference: (color3) => color3.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB),
    fromReference: (color3) => color3.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P3).convertLinearToSRGB()
  }
};
var SUPPORTED_WORKING_COLOR_SPACES = /* @__PURE__ */ new Set([LinearSRGBColorSpace, LinearDisplayP3ColorSpace]);
var ColorManagement = {
  enabled: true,
  _workingColorSpace: LinearSRGBColorSpace,
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(colorSpace) {
    if (!SUPPORTED_WORKING_COLOR_SPACES.has(colorSpace)) {
      throw new Error(`Unsupported working color space, "${colorSpace}".`);
    }
    this._workingColorSpace = colorSpace;
  },
  convert: function(color3, sourceColorSpace, targetColorSpace) {
    if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
      return color3;
    }
    const sourceToReference = COLOR_SPACES[sourceColorSpace].toReference;
    const targetFromReference = COLOR_SPACES[targetColorSpace].fromReference;
    return targetFromReference(sourceToReference(color3));
  },
  fromWorkingColorSpace: function(color3, targetColorSpace) {
    return this.convert(color3, this._workingColorSpace, targetColorSpace);
  },
  toWorkingColorSpace: function(color3, sourceColorSpace) {
    return this.convert(color3, sourceColorSpace, this._workingColorSpace);
  },
  getPrimaries: function(colorSpace) {
    return COLOR_SPACES[colorSpace].primaries;
  },
  getTransfer: function(colorSpace) {
    if (colorSpace === NoColorSpace) return LinearTransfer;
    return COLOR_SPACES[colorSpace].transfer;
  },
  getLuminanceCoefficients: function(target, colorSpace = this._workingColorSpace) {
    return target.fromArray(COLOR_SPACES[colorSpace].luminanceCoefficients);
  }
};
function SRGBToLinear(c4) {
  return c4 < 0.04045 ? c4 * 0.0773993808 : Math.pow(c4 * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB(c4) {
  return c4 < 31308e-7 ? c4 * 12.92 : 1.055 * Math.pow(c4, 0.41666) - 0.055;
}
var _canvas;
var ImageUtils = class {
  static getDataURL(image) {
    if (/^data:/i.test(image.src)) {
      return image.src;
    }
    if (typeof HTMLCanvasElement === "undefined") {
      return image.src;
    }
    let canvas;
    if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas === void 0) _canvas = createElementNS("canvas");
      _canvas.width = image.width;
      _canvas.height = image.height;
      const context2 = _canvas.getContext("2d");
      if (image instanceof ImageData) {
        context2.putImageData(image, 0, 0);
      } else {
        context2.drawImage(image, 0, 0, image.width, image.height);
      }
      canvas = _canvas;
    }
    if (canvas.width > 2048 || canvas.height > 2048) {
      console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
      return canvas.toDataURL("image/jpeg", 0.6);
    } else {
      return canvas.toDataURL("image/png");
    }
  }
  static sRGBToLinear(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      const canvas = createElementNS("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const context2 = canvas.getContext("2d");
      context2.drawImage(image, 0, 0, image.width, image.height);
      const imageData = context2.getImageData(0, 0, image.width, image.height);
      const data = imageData.data;
      for (let i2 = 0; i2 < data.length; i2++) {
        data[i2] = SRGBToLinear(data[i2] / 255) * 255;
      }
      context2.putImageData(imageData, 0, 0);
      return canvas;
    } else if (image.data) {
      const data = image.data.slice(0);
      for (let i2 = 0; i2 < data.length; i2++) {
        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
          data[i2] = Math.floor(SRGBToLinear(data[i2] / 255) * 255);
        } else {
          data[i2] = SRGBToLinear(data[i2]);
        }
      }
      return {
        data,
        width: image.width,
        height: image.height
      };
    } else {
      console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
      return image;
    }
  }
};
var _sourceId = 0;
var Source = class {
  constructor(data = null) {
    this.isSource = true;
    Object.defineProperty(this, "id", { value: _sourceId++ });
    this.uuid = generateUUID();
    this.data = data;
    this.dataReady = true;
    this.version = 0;
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.images[this.uuid] !== void 0) {
      return meta.images[this.uuid];
    }
    const output2 = {
      uuid: this.uuid,
      url: ""
    };
    const data = this.data;
    if (data !== null) {
      let url;
      if (Array.isArray(data)) {
        url = [];
        for (let i2 = 0, l2 = data.length; i2 < l2; i2++) {
          if (data[i2].isDataTexture) {
            url.push(serializeImage(data[i2].image));
          } else {
            url.push(serializeImage(data[i2]));
          }
        }
      } else {
        url = serializeImage(data);
      }
      output2.url = url;
    }
    if (!isRootObject) {
      meta.images[this.uuid] = output2;
    }
    return output2;
  }
};
function serializeImage(image) {
  if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return ImageUtils.getDataURL(image);
  } else {
    if (image.data) {
      return {
        data: Array.from(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
var _textureId = 0;
var Texture = class _Texture extends EventDispatcher {
  constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format3 = RGBAFormat, type = UnsignedByteType, anisotropy2 = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace) {
    super();
    this.isTexture = true;
    Object.defineProperty(this, "id", { value: _textureId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.source = new Source(image);
    this.mipmaps = [];
    this.mapping = mapping;
    this.channel = 0;
    this.wrapS = wrapS;
    this.wrapT = wrapT;
    this.magFilter = magFilter;
    this.minFilter = minFilter;
    this.anisotropy = anisotropy2;
    this.format = format3;
    this.internalFormat = null;
    this.type = type;
    this.offset = new Vector2(0, 0);
    this.repeat = new Vector2(1, 1);
    this.center = new Vector2(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Matrix3();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    this.colorSpace = colorSpace;
    this.userData = {};
    this.version = 0;
    this.onUpdate = null;
    this.isRenderTargetTexture = false;
    this.pmremVersion = 0;
  }
  get image() {
    return this.source.data;
  }
  set image(value = null) {
    this.source.data = value;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.name = source.name;
    this.source = source.source;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.channel = source.channel;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.internalFormat = source.internalFormat;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.colorSpace = source.colorSpace;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    this.needsUpdate = true;
    return this;
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.textures[this.uuid] !== void 0) {
      return meta.textures[this.uuid];
    }
    const output2 = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(meta).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (Object.keys(this.userData).length > 0) output2.userData = this.userData;
    if (!isRootObject) {
      meta.textures[this.uuid] = output2;
    }
    return output2;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(uv2) {
    if (this.mapping !== UVMapping) return uv2;
    uv2.applyMatrix3(this.matrix);
    if (uv2.x < 0 || uv2.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping:
          uv2.x = uv2.x - Math.floor(uv2.x);
          break;
        case ClampToEdgeWrapping:
          uv2.x = uv2.x < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv2.x) % 2) === 1) {
            uv2.x = Math.ceil(uv2.x) - uv2.x;
          } else {
            uv2.x = uv2.x - Math.floor(uv2.x);
          }
          break;
      }
    }
    if (uv2.y < 0 || uv2.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping:
          uv2.y = uv2.y - Math.floor(uv2.y);
          break;
        case ClampToEdgeWrapping:
          uv2.y = uv2.y < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping:
          if (Math.abs(Math.floor(uv2.y) % 2) === 1) {
            uv2.y = Math.ceil(uv2.y) - uv2.y;
          } else {
            uv2.y = uv2.y - Math.floor(uv2.y);
          }
          break;
      }
    }
    if (this.flipY) {
      uv2.y = 1 - uv2.y;
    }
    return uv2;
  }
  set needsUpdate(value) {
    if (value === true) {
      this.version++;
      this.source.needsUpdate = true;
    }
  }
  set needsPMREMUpdate(value) {
    if (value === true) {
      this.pmremVersion++;
    }
  }
};
Texture.DEFAULT_IMAGE = null;
Texture.DEFAULT_MAPPING = UVMapping;
Texture.DEFAULT_ANISOTROPY = 1;
var Vector4 = class _Vector4 {
  constructor(x2 = 0, y2 = 0, z2 = 0, w4 = 1) {
    _Vector4.prototype.isVector4 = true;
    this.x = x2;
    this.y = y2;
    this.z = z2;
    this.w = w4;
  }
  get width() {
    return this.z;
  }
  set width(value) {
    this.z = value;
  }
  get height() {
    return this.w;
  }
  set height(value) {
    this.w = value;
  }
  set(x2, y2, z2, w4) {
    this.x = x2;
    this.y = y2;
    this.z = z2;
    this.w = w4;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setW(w4) {
    this.w = w4;
    return this;
  }
  setComponent(index7, value) {
    switch (index7) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      case 3:
        this.w = value;
        break;
      default:
        throw new Error("index is out of range: " + index7);
    }
    return this;
  }
  getComponent(index7) {
    switch (index7) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + index7);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(v3) {
    this.x = v3.x;
    this.y = v3.y;
    this.z = v3.z;
    this.w = v3.w !== void 0 ? v3.w : 1;
    return this;
  }
  add(v3) {
    this.x += v3.x;
    this.y += v3.y;
    this.z += v3.z;
    this.w += v3.w;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    this.z += s2;
    this.w += s2;
    return this;
  }
  addVectors(a2, b) {
    this.x = a2.x + b.x;
    this.y = a2.y + b.y;
    this.z = a2.z + b.z;
    this.w = a2.w + b.w;
    return this;
  }
  addScaledVector(v3, s2) {
    this.x += v3.x * s2;
    this.y += v3.y * s2;
    this.z += v3.z * s2;
    this.w += v3.w * s2;
    return this;
  }
  sub(v3) {
    this.x -= v3.x;
    this.y -= v3.y;
    this.z -= v3.z;
    this.w -= v3.w;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    this.z -= s2;
    this.w -= s2;
    return this;
  }
  subVectors(a2, b) {
    this.x = a2.x - b.x;
    this.y = a2.y - b.y;
    this.z = a2.z - b.z;
    this.w = a2.w - b.w;
    return this;
  }
  multiply(v3) {
    this.x *= v3.x;
    this.y *= v3.y;
    this.z *= v3.z;
    this.w *= v3.w;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }
  applyMatrix4(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z, w4 = this.w;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[4] * y2 + e3[8] * z2 + e3[12] * w4;
    this.y = e3[1] * x2 + e3[5] * y2 + e3[9] * z2 + e3[13] * w4;
    this.z = e3[2] * x2 + e3[6] * y2 + e3[10] * z2 + e3[14] * w4;
    this.w = e3[3] * x2 + e3[7] * y2 + e3[11] * z2 + e3[15] * w4;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  setAxisAngleFromQuaternion(q2) {
    this.w = 2 * Math.acos(q2.w);
    const s2 = Math.sqrt(1 - q2.w * q2.w);
    if (s2 < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q2.x / s2;
      this.y = q2.y / s2;
      this.z = q2.z / s2;
    }
    return this;
  }
  setAxisAngleFromRotationMatrix(m2) {
    let angle2, x2, y2, z2;
    const epsilon5 = 0.01, epsilon23 = 0.1, te = m2.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
    if (Math.abs(m12 - m21) < epsilon5 && Math.abs(m13 - m31) < epsilon5 && Math.abs(m23 - m32) < epsilon5) {
      if (Math.abs(m12 + m21) < epsilon23 && Math.abs(m13 + m31) < epsilon23 && Math.abs(m23 + m32) < epsilon23 && Math.abs(m11 + m22 + m33 - 3) < epsilon23) {
        this.set(1, 0, 0, 0);
        return this;
      }
      angle2 = Math.PI;
      const xx = (m11 + 1) / 2;
      const yy = (m22 + 1) / 2;
      const zz = (m33 + 1) / 2;
      const xy = (m12 + m21) / 4;
      const xz = (m13 + m31) / 4;
      const yz = (m23 + m32) / 4;
      if (xx > yy && xx > zz) {
        if (xx < epsilon5) {
          x2 = 0;
          y2 = 0.707106781;
          z2 = 0.707106781;
        } else {
          x2 = Math.sqrt(xx);
          y2 = xy / x2;
          z2 = xz / x2;
        }
      } else if (yy > zz) {
        if (yy < epsilon5) {
          x2 = 0.707106781;
          y2 = 0;
          z2 = 0.707106781;
        } else {
          y2 = Math.sqrt(yy);
          x2 = xy / y2;
          z2 = yz / y2;
        }
      } else {
        if (zz < epsilon5) {
          x2 = 0.707106781;
          y2 = 0.707106781;
          z2 = 0;
        } else {
          z2 = Math.sqrt(zz);
          x2 = xz / z2;
          y2 = yz / z2;
        }
      }
      this.set(x2, y2, z2, angle2);
      return this;
    }
    let s2 = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
    if (Math.abs(s2) < 1e-3) s2 = 1;
    this.x = (m32 - m23) / s2;
    this.y = (m13 - m31) / s2;
    this.z = (m21 - m12) / s2;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  }
  setFromMatrixPosition(m2) {
    const e3 = m2.elements;
    this.x = e3[12];
    this.y = e3[13];
    this.z = e3[14];
    this.w = e3[15];
    return this;
  }
  min(v3) {
    this.x = Math.min(this.x, v3.x);
    this.y = Math.min(this.y, v3.y);
    this.z = Math.min(this.z, v3.z);
    this.w = Math.min(this.w, v3.w);
    return this;
  }
  max(v3) {
    this.x = Math.max(this.x, v3.x);
    this.y = Math.max(this.y, v3.y);
    this.z = Math.max(this.z, v3.z);
    this.w = Math.max(this.w, v3.w);
    return this;
  }
  clamp(min4, max4) {
    this.x = Math.max(min4.x, Math.min(max4.x, this.x));
    this.y = Math.max(min4.y, Math.min(max4.y, this.y));
    this.z = Math.max(min4.z, Math.min(max4.z, this.z));
    this.w = Math.max(min4.w, Math.min(max4.w, this.w));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    this.w = Math.max(minVal, Math.min(maxVal, this.w));
    return this;
  }
  clampLength(min4, max4) {
    const length2 = this.length();
    return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min4, Math.min(max4, length2)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    this.w = Math.trunc(this.w);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  dot(v3) {
    return this.x * v3.x + this.y * v3.y + this.z * v3.z + this.w * v3.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length2) {
    return this.normalize().multiplyScalar(length2);
  }
  lerp(v3, alpha) {
    this.x += (v3.x - this.x) * alpha;
    this.y += (v3.y - this.y) * alpha;
    this.z += (v3.z - this.z) * alpha;
    this.w += (v3.w - this.w) * alpha;
    return this;
  }
  lerpVectors(v1, v22, alpha) {
    this.x = v1.x + (v22.x - v1.x) * alpha;
    this.y = v1.y + (v22.y - v1.y) * alpha;
    this.z = v1.z + (v22.z - v1.z) * alpha;
    this.w = v1.w + (v22.w - v1.w) * alpha;
    return this;
  }
  equals(v3) {
    return v3.x === this.x && v3.y === this.y && v3.z === this.z && v3.w === this.w;
  }
  fromArray(array3, offset = 0) {
    this.x = array3[offset];
    this.y = array3[offset + 1];
    this.z = array3[offset + 2];
    this.w = array3[offset + 3];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.x;
    array3[offset + 1] = this.y;
    array3[offset + 2] = this.z;
    array3[offset + 3] = this.w;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.x = attribute2.getX(index7);
    this.y = attribute2.getY(index7);
    this.z = attribute2.getZ(index7);
    this.w = attribute2.getW(index7);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
    yield this.w;
  }
};
var RenderTarget = class extends EventDispatcher {
  constructor(width = 1, height = 1, options = {}) {
    super();
    this.isRenderTarget = true;
    this.width = width;
    this.height = height;
    this.depth = 1;
    this.scissor = new Vector4(0, 0, width, height);
    this.scissorTest = false;
    this.viewport = new Vector4(0, 0, width, height);
    const image = { width, height, depth: 1 };
    options = Object.assign({
      generateMipmaps: false,
      internalFormat: null,
      minFilter: LinearFilter,
      depthBuffer: true,
      stencilBuffer: false,
      resolveDepthBuffer: true,
      resolveStencilBuffer: true,
      depthTexture: null,
      samples: 0,
      count: 1
    }, options);
    const texture2 = new Texture(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    texture2.flipY = false;
    texture2.generateMipmaps = options.generateMipmaps;
    texture2.internalFormat = options.internalFormat;
    this.textures = [];
    const count2 = options.count;
    for (let i2 = 0; i2 < count2; i2++) {
      this.textures[i2] = texture2.clone();
      this.textures[i2].isRenderTargetTexture = true;
    }
    this.depthBuffer = options.depthBuffer;
    this.stencilBuffer = options.stencilBuffer;
    this.resolveDepthBuffer = options.resolveDepthBuffer;
    this.resolveStencilBuffer = options.resolveStencilBuffer;
    this.depthTexture = options.depthTexture;
    this.samples = options.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(value) {
    this.textures[0] = value;
  }
  setSize(width, height, depth2 = 1) {
    if (this.width !== width || this.height !== height || this.depth !== depth2) {
      this.width = width;
      this.height = height;
      this.depth = depth2;
      for (let i2 = 0, il = this.textures.length; i2 < il; i2++) {
        this.textures[i2].image.width = width;
        this.textures[i2].image.height = height;
        this.textures[i2].image.depth = depth2;
      }
      this.dispose();
    }
    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.width = source.width;
    this.height = source.height;
    this.depth = source.depth;
    this.scissor.copy(source.scissor);
    this.scissorTest = source.scissorTest;
    this.viewport.copy(source.viewport);
    this.textures.length = 0;
    for (let i2 = 0, il = source.textures.length; i2 < il; i2++) {
      this.textures[i2] = source.textures[i2].clone();
      this.textures[i2].isRenderTargetTexture = true;
    }
    const image = Object.assign({}, source.texture.image);
    this.texture.source = new Source(image);
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.resolveDepthBuffer = source.resolveDepthBuffer;
    this.resolveStencilBuffer = source.resolveStencilBuffer;
    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
    this.samples = source.samples;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var WebGLRenderTarget = class extends RenderTarget {
  constructor(width = 1, height = 1, options = {}) {
    super(width, height, options);
    this.isWebGLRenderTarget = true;
  }
};
var DataArrayTexture = class extends Texture {
  constructor(data = null, width = 1, height = 1, depth2 = 1) {
    super(null);
    this.isDataArrayTexture = true;
    this.image = { data, width, height, depth: depth2 };
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.layerUpdates = /* @__PURE__ */ new Set();
  }
  addLayerUpdate(layerIndex) {
    this.layerUpdates.add(layerIndex);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
};
var Data3DTexture = class extends Texture {
  constructor(data = null, width = 1, height = 1, depth2 = 1) {
    super(null);
    this.isData3DTexture = true;
    this.image = { data, width, height, depth: depth2 };
    this.magFilter = NearestFilter;
    this.minFilter = NearestFilter;
    this.wrapR = ClampToEdgeWrapping;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
};
var Quaternion = class {
  constructor(x2 = 0, y2 = 0, z2 = 0, w4 = 1) {
    this.isQuaternion = true;
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._w = w4;
  }
  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t4) {
    let x03 = src0[srcOffset0 + 0], y03 = src0[srcOffset0 + 1], z02 = src0[srcOffset0 + 2], w02 = src0[srcOffset0 + 3];
    const x12 = src1[srcOffset1 + 0], y12 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w12 = src1[srcOffset1 + 3];
    if (t4 === 0) {
      dst[dstOffset + 0] = x03;
      dst[dstOffset + 1] = y03;
      dst[dstOffset + 2] = z02;
      dst[dstOffset + 3] = w02;
      return;
    }
    if (t4 === 1) {
      dst[dstOffset + 0] = x12;
      dst[dstOffset + 1] = y12;
      dst[dstOffset + 2] = z1;
      dst[dstOffset + 3] = w12;
      return;
    }
    if (w02 !== w12 || x03 !== x12 || y03 !== y12 || z02 !== z1) {
      let s2 = 1 - t4;
      const cos4 = x03 * x12 + y03 * y12 + z02 * z1 + w02 * w12, dir = cos4 >= 0 ? 1 : -1, sqrSin = 1 - cos4 * cos4;
      if (sqrSin > Number.EPSILON) {
        const sin4 = Math.sqrt(sqrSin), len = Math.atan2(sin4, cos4 * dir);
        s2 = Math.sin(s2 * len) / sin4;
        t4 = Math.sin(t4 * len) / sin4;
      }
      const tDir = t4 * dir;
      x03 = x03 * s2 + x12 * tDir;
      y03 = y03 * s2 + y12 * tDir;
      z02 = z02 * s2 + z1 * tDir;
      w02 = w02 * s2 + w12 * tDir;
      if (s2 === 1 - t4) {
        const f2 = 1 / Math.sqrt(x03 * x03 + y03 * y03 + z02 * z02 + w02 * w02);
        x03 *= f2;
        y03 *= f2;
        z02 *= f2;
        w02 *= f2;
      }
    }
    dst[dstOffset] = x03;
    dst[dstOffset + 1] = y03;
    dst[dstOffset + 2] = z02;
    dst[dstOffset + 3] = w02;
  }
  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
    const x03 = src0[srcOffset0];
    const y03 = src0[srcOffset0 + 1];
    const z02 = src0[srcOffset0 + 2];
    const w02 = src0[srcOffset0 + 3];
    const x12 = src1[srcOffset1];
    const y12 = src1[srcOffset1 + 1];
    const z1 = src1[srcOffset1 + 2];
    const w12 = src1[srcOffset1 + 3];
    dst[dstOffset] = x03 * w12 + w02 * x12 + y03 * z1 - z02 * y12;
    dst[dstOffset + 1] = y03 * w12 + w02 * y12 + z02 * x12 - x03 * z1;
    dst[dstOffset + 2] = z02 * w12 + w02 * z1 + x03 * y12 - y03 * x12;
    dst[dstOffset + 3] = w02 * w12 - x03 * x12 - y03 * y12 - z02 * z1;
    return dst;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
    this._onChangeCallback();
  }
  set(x2, y2, z2, w4) {
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._w = w4;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this._onChangeCallback();
    return this;
  }
  setFromEuler(euler, update20 = true) {
    const x2 = euler._x, y2 = euler._y, z2 = euler._z, order = euler._order;
    const cos4 = Math.cos;
    const sin4 = Math.sin;
    const c1 = cos4(x2 / 2);
    const c22 = cos4(y2 / 2);
    const c32 = cos4(z2 / 2);
    const s1 = sin4(x2 / 2);
    const s2 = sin4(y2 / 2);
    const s3 = sin4(z2 / 2);
    switch (order) {
      case "XYZ":
        this._x = s1 * c22 * c32 + c1 * s2 * s3;
        this._y = c1 * s2 * c32 - s1 * c22 * s3;
        this._z = c1 * c22 * s3 + s1 * s2 * c32;
        this._w = c1 * c22 * c32 - s1 * s2 * s3;
        break;
      case "YXZ":
        this._x = s1 * c22 * c32 + c1 * s2 * s3;
        this._y = c1 * s2 * c32 - s1 * c22 * s3;
        this._z = c1 * c22 * s3 - s1 * s2 * c32;
        this._w = c1 * c22 * c32 + s1 * s2 * s3;
        break;
      case "ZXY":
        this._x = s1 * c22 * c32 - c1 * s2 * s3;
        this._y = c1 * s2 * c32 + s1 * c22 * s3;
        this._z = c1 * c22 * s3 + s1 * s2 * c32;
        this._w = c1 * c22 * c32 - s1 * s2 * s3;
        break;
      case "ZYX":
        this._x = s1 * c22 * c32 - c1 * s2 * s3;
        this._y = c1 * s2 * c32 + s1 * c22 * s3;
        this._z = c1 * c22 * s3 - s1 * s2 * c32;
        this._w = c1 * c22 * c32 + s1 * s2 * s3;
        break;
      case "YZX":
        this._x = s1 * c22 * c32 + c1 * s2 * s3;
        this._y = c1 * s2 * c32 + s1 * c22 * s3;
        this._z = c1 * c22 * s3 - s1 * s2 * c32;
        this._w = c1 * c22 * c32 - s1 * s2 * s3;
        break;
      case "XZY":
        this._x = s1 * c22 * c32 - c1 * s2 * s3;
        this._y = c1 * s2 * c32 - s1 * c22 * s3;
        this._z = c1 * c22 * s3 + s1 * s2 * c32;
        this._w = c1 * c22 * c32 + s1 * s2 * s3;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
    }
    if (update20 === true) this._onChangeCallback();
    return this;
  }
  setFromAxisAngle(axis, angle2) {
    const halfAngle = angle2 / 2, s2 = Math.sin(halfAngle);
    this._x = axis.x * s2;
    this._y = axis.y * s2;
    this._z = axis.z * s2;
    this._w = Math.cos(halfAngle);
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m2) {
    const te = m2.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s2 = 0.5 / Math.sqrt(trace + 1);
      this._w = 0.25 / s2;
      this._x = (m32 - m23) * s2;
      this._y = (m13 - m31) * s2;
      this._z = (m21 - m12) * s2;
    } else if (m11 > m22 && m11 > m33) {
      const s2 = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this._w = (m32 - m23) / s2;
      this._x = 0.25 * s2;
      this._y = (m12 + m21) / s2;
      this._z = (m13 + m31) / s2;
    } else if (m22 > m33) {
      const s2 = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this._w = (m13 - m31) / s2;
      this._x = (m12 + m21) / s2;
      this._y = 0.25 * s2;
      this._z = (m23 + m32) / s2;
    } else {
      const s2 = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this._w = (m21 - m12) / s2;
      this._x = (m13 + m31) / s2;
      this._y = (m23 + m32) / s2;
      this._z = 0.25 * s2;
    }
    this._onChangeCallback();
    return this;
  }
  setFromUnitVectors(vFrom, vTo) {
    let r2 = vFrom.dot(vTo) + 1;
    if (r2 < Number.EPSILON) {
      r2 = 0;
      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
        this._x = -vFrom.y;
        this._y = vFrom.x;
        this._z = 0;
        this._w = r2;
      } else {
        this._x = 0;
        this._y = -vFrom.z;
        this._z = vFrom.y;
        this._w = r2;
      }
    } else {
      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
      this._w = r2;
    }
    return this.normalize();
  }
  angleTo(q2) {
    return 2 * Math.acos(Math.abs(clamp(this.dot(q2), -1, 1)));
  }
  rotateTowards(q2, step2) {
    const angle2 = this.angleTo(q2);
    if (angle2 === 0) return this;
    const t4 = Math.min(1, step2 / angle2);
    this.slerp(q2, t4);
    return this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  dot(v3) {
    return this._x * v3._x + this._y * v3._y + this._z * v3._z + this._w * v3._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let l2 = this.length();
    if (l2 === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l2 = 1 / l2;
      this._x = this._x * l2;
      this._y = this._y * l2;
      this._z = this._z * l2;
      this._w = this._w * l2;
    }
    this._onChangeCallback();
    return this;
  }
  multiply(q2) {
    return this.multiplyQuaternions(this, q2);
  }
  premultiply(q2) {
    return this.multiplyQuaternions(q2, this);
  }
  multiplyQuaternions(a2, b) {
    const qax = a2._x, qay = a2._y, qaz = a2._z, qaw = a2._w;
    const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this._onChangeCallback();
    return this;
  }
  slerp(qb, t4) {
    if (t4 === 0) return this;
    if (t4 === 1) return this.copy(qb);
    const x2 = this._x, y2 = this._y, z2 = this._z, w4 = this._w;
    let cosHalfTheta = w4 * qb._w + x2 * qb._x + y2 * qb._y + z2 * qb._z;
    if (cosHalfTheta < 0) {
      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb);
    }
    if (cosHalfTheta >= 1) {
      this._w = w4;
      this._x = x2;
      this._y = y2;
      this._z = z2;
      return this;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s2 = 1 - t4;
      this._w = s2 * w4 + t4 * this._w;
      this._x = s2 * x2 + t4 * this._x;
      this._y = s2 * y2 + t4 * this._y;
      this._z = s2 * z2 + t4 * this._z;
      this.normalize();
      return this;
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t4) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t4 * halfTheta) / sinHalfTheta;
    this._w = w4 * ratioA + this._w * ratioB;
    this._x = x2 * ratioA + this._x * ratioB;
    this._y = y2 * ratioA + this._y * ratioB;
    this._z = z2 * ratioA + this._z * ratioB;
    this._onChangeCallback();
    return this;
  }
  slerpQuaternions(qa, qb, t4) {
    return this.copy(qa).slerp(qb, t4);
  }
  random() {
    const theta1 = 2 * Math.PI * Math.random();
    const theta2 = 2 * Math.PI * Math.random();
    const x03 = Math.random();
    const r1 = Math.sqrt(1 - x03);
    const r2 = Math.sqrt(x03);
    return this.set(
      r1 * Math.sin(theta1),
      r1 * Math.cos(theta1),
      r2 * Math.sin(theta2),
      r2 * Math.cos(theta2)
    );
  }
  equals(quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  }
  fromArray(array3, offset = 0) {
    this._x = array3[offset];
    this._y = array3[offset + 1];
    this._z = array3[offset + 2];
    this._w = array3[offset + 3];
    this._onChangeCallback();
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this._x;
    array3[offset + 1] = this._y;
    array3[offset + 2] = this._z;
    array3[offset + 3] = this._w;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this._x = attribute2.getX(index7);
    this._y = attribute2.getY(index7);
    this._z = attribute2.getZ(index7);
    this._w = attribute2.getW(index7);
    this._onChangeCallback();
    return this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._w;
  }
};
var Vector3 = class _Vector3 {
  constructor(x2 = 0, y2 = 0, z2 = 0) {
    _Vector3.prototype.isVector3 = true;
    this.x = x2;
    this.y = y2;
    this.z = z2;
  }
  set(x2, y2, z2) {
    if (z2 === void 0) z2 = this.z;
    this.x = x2;
    this.y = y2;
    this.z = z2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setComponent(index7, value) {
    switch (index7) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      default:
        throw new Error("index is out of range: " + index7);
    }
    return this;
  }
  getComponent(index7) {
    switch (index7) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + index7);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(v3) {
    this.x = v3.x;
    this.y = v3.y;
    this.z = v3.z;
    return this;
  }
  add(v3) {
    this.x += v3.x;
    this.y += v3.y;
    this.z += v3.z;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    this.z += s2;
    return this;
  }
  addVectors(a2, b) {
    this.x = a2.x + b.x;
    this.y = a2.y + b.y;
    this.z = a2.z + b.z;
    return this;
  }
  addScaledVector(v3, s2) {
    this.x += v3.x * s2;
    this.y += v3.y * s2;
    this.z += v3.z * s2;
    return this;
  }
  sub(v3) {
    this.x -= v3.x;
    this.y -= v3.y;
    this.z -= v3.z;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    this.z -= s2;
    return this;
  }
  subVectors(a2, b) {
    this.x = a2.x - b.x;
    this.y = a2.y - b.y;
    this.z = a2.z - b.z;
    return this;
  }
  multiply(v3) {
    this.x *= v3.x;
    this.y *= v3.y;
    this.z *= v3.z;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  multiplyVectors(a2, b) {
    this.x = a2.x * b.x;
    this.y = a2.y * b.y;
    this.z = a2.z * b.z;
    return this;
  }
  applyEuler(euler) {
    return this.applyQuaternion(_quaternion$4.setFromEuler(euler));
  }
  applyAxisAngle(axis, angle2) {
    return this.applyQuaternion(_quaternion$4.setFromAxisAngle(axis, angle2));
  }
  applyMatrix3(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[3] * y2 + e3[6] * z2;
    this.y = e3[1] * x2 + e3[4] * y2 + e3[7] * z2;
    this.z = e3[2] * x2 + e3[5] * y2 + e3[8] * z2;
    return this;
  }
  applyNormalMatrix(m2) {
    return this.applyMatrix3(m2).normalize();
  }
  applyMatrix4(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e3 = m2.elements;
    const w4 = 1 / (e3[3] * x2 + e3[7] * y2 + e3[11] * z2 + e3[15]);
    this.x = (e3[0] * x2 + e3[4] * y2 + e3[8] * z2 + e3[12]) * w4;
    this.y = (e3[1] * x2 + e3[5] * y2 + e3[9] * z2 + e3[13]) * w4;
    this.z = (e3[2] * x2 + e3[6] * y2 + e3[10] * z2 + e3[14]) * w4;
    return this;
  }
  applyQuaternion(q2) {
    const vx = this.x, vy = this.y, vz = this.z;
    const qx = q2.x, qy = q2.y, qz = q2.z, qw = q2.w;
    const tx = 2 * (qy * vz - qz * vy);
    const ty = 2 * (qz * vx - qx * vz);
    const tz = 2 * (qx * vy - qy * vx);
    this.x = vx + qw * tx + qy * tz - qz * ty;
    this.y = vy + qw * ty + qz * tx - qx * tz;
    this.z = vz + qw * tz + qx * ty - qy * tx;
    return this;
  }
  project(camera3) {
    return this.applyMatrix4(camera3.matrixWorldInverse).applyMatrix4(camera3.projectionMatrix);
  }
  unproject(camera3) {
    return this.applyMatrix4(camera3.projectionMatrixInverse).applyMatrix4(camera3.matrixWorld);
  }
  transformDirection(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[4] * y2 + e3[8] * z2;
    this.y = e3[1] * x2 + e3[5] * y2 + e3[9] * z2;
    this.z = e3[2] * x2 + e3[6] * y2 + e3[10] * z2;
    return this.normalize();
  }
  divide(v3) {
    this.x /= v3.x;
    this.y /= v3.y;
    this.z /= v3.z;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  min(v3) {
    this.x = Math.min(this.x, v3.x);
    this.y = Math.min(this.y, v3.y);
    this.z = Math.min(this.z, v3.z);
    return this;
  }
  max(v3) {
    this.x = Math.max(this.x, v3.x);
    this.y = Math.max(this.y, v3.y);
    this.z = Math.max(this.z, v3.z);
    return this;
  }
  clamp(min4, max4) {
    this.x = Math.max(min4.x, Math.min(max4.x, this.x));
    this.y = Math.max(min4.y, Math.min(max4.y, this.y));
    this.z = Math.max(min4.z, Math.min(max4.z, this.z));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    return this;
  }
  clampLength(min4, max4) {
    const length2 = this.length();
    return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min4, Math.min(max4, length2)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  dot(v3) {
    return this.x * v3.x + this.y * v3.y + this.z * v3.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length2) {
    return this.normalize().multiplyScalar(length2);
  }
  lerp(v3, alpha) {
    this.x += (v3.x - this.x) * alpha;
    this.y += (v3.y - this.y) * alpha;
    this.z += (v3.z - this.z) * alpha;
    return this;
  }
  lerpVectors(v1, v22, alpha) {
    this.x = v1.x + (v22.x - v1.x) * alpha;
    this.y = v1.y + (v22.y - v1.y) * alpha;
    this.z = v1.z + (v22.z - v1.z) * alpha;
    return this;
  }
  cross(v3) {
    return this.crossVectors(this, v3);
  }
  crossVectors(a2, b) {
    const ax = a2.x, ay = a2.y, az = a2.z;
    const bx = b.x, by = b.y, bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  projectOnVector(v3) {
    const denominator = v3.lengthSq();
    if (denominator === 0) return this.set(0, 0, 0);
    const scalar = v3.dot(this) / denominator;
    return this.copy(v3).multiplyScalar(scalar);
  }
  projectOnPlane(planeNormal) {
    _vector$c.copy(this).projectOnVector(planeNormal);
    return this.sub(_vector$c);
  }
  reflect(normal2) {
    return this.sub(_vector$c.copy(normal2).multiplyScalar(2 * this.dot(normal2)));
  }
  angleTo(v3) {
    const denominator = Math.sqrt(this.lengthSq() * v3.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v3) / denominator;
    return Math.acos(clamp(theta, -1, 1));
  }
  distanceTo(v3) {
    return Math.sqrt(this.distanceToSquared(v3));
  }
  distanceToSquared(v3) {
    const dx = this.x - v3.x, dy = this.y - v3.y, dz = this.z - v3.z;
    return dx * dx + dy * dy + dz * dz;
  }
  manhattanDistanceTo(v3) {
    return Math.abs(this.x - v3.x) + Math.abs(this.y - v3.y) + Math.abs(this.z - v3.z);
  }
  setFromSpherical(s2) {
    return this.setFromSphericalCoords(s2.radius, s2.phi, s2.theta);
  }
  setFromSphericalCoords(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  setFromCylindrical(c4) {
    return this.setFromCylindricalCoords(c4.radius, c4.theta, c4.y);
  }
  setFromCylindricalCoords(radius, theta, y2) {
    this.x = radius * Math.sin(theta);
    this.y = y2;
    this.z = radius * Math.cos(theta);
    return this;
  }
  setFromMatrixPosition(m2) {
    const e3 = m2.elements;
    this.x = e3[12];
    this.y = e3[13];
    this.z = e3[14];
    return this;
  }
  setFromMatrixScale(m2) {
    const sx = this.setFromMatrixColumn(m2, 0).length();
    const sy = this.setFromMatrixColumn(m2, 1).length();
    const sz = this.setFromMatrixColumn(m2, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  }
  setFromMatrixColumn(m2, index7) {
    return this.fromArray(m2.elements, index7 * 4);
  }
  setFromMatrix3Column(m2, index7) {
    return this.fromArray(m2.elements, index7 * 3);
  }
  setFromEuler(e3) {
    this.x = e3._x;
    this.y = e3._y;
    this.z = e3._z;
    return this;
  }
  setFromColor(c4) {
    this.x = c4.r;
    this.y = c4.g;
    this.z = c4.b;
    return this;
  }
  equals(v3) {
    return v3.x === this.x && v3.y === this.y && v3.z === this.z;
  }
  fromArray(array3, offset = 0) {
    this.x = array3[offset];
    this.y = array3[offset + 1];
    this.z = array3[offset + 2];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.x;
    array3[offset + 1] = this.y;
    array3[offset + 2] = this.z;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.x = attribute2.getX(index7);
    this.y = attribute2.getY(index7);
    this.z = attribute2.getZ(index7);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
  randomDirection() {
    const theta = Math.random() * Math.PI * 2;
    const u5 = Math.random() * 2 - 1;
    const c4 = Math.sqrt(1 - u5 * u5);
    this.x = c4 * Math.cos(theta);
    this.y = u5;
    this.z = c4 * Math.sin(theta);
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
  }
};
var _vector$c = new Vector3();
var _quaternion$4 = new Quaternion();
var Box3 = class {
  constructor(min4 = new Vector3(Infinity, Infinity, Infinity), max4 = new Vector3(-Infinity, -Infinity, -Infinity)) {
    this.isBox3 = true;
    this.min = min4;
    this.max = max4;
  }
  set(min4, max4) {
    this.min.copy(min4);
    this.max.copy(max4);
    return this;
  }
  setFromArray(array3) {
    this.makeEmpty();
    for (let i2 = 0, il = array3.length; i2 < il; i2 += 3) {
      this.expandByPoint(_vector$b.fromArray(array3, i2));
    }
    return this;
  }
  setFromBufferAttribute(attribute2) {
    this.makeEmpty();
    for (let i2 = 0, il = attribute2.count; i2 < il; i2++) {
      this.expandByPoint(_vector$b.fromBufferAttribute(attribute2, i2));
    }
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      this.expandByPoint(points[i2]);
    }
    return this;
  }
  setFromCenterAndSize(center, size) {
    const halfSize = _vector$b.copy(size).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  setFromObject(object2, precise = false) {
    this.makeEmpty();
    return this.expandByObject(object2, precise);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point2) {
    this.min.min(point2);
    this.max.max(point2);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  expandByObject(object2, precise = false) {
    object2.updateWorldMatrix(false, false);
    const geometry = object2.geometry;
    if (geometry !== void 0) {
      const positionAttribute = geometry.getAttribute("position");
      if (precise === true && positionAttribute !== void 0 && object2.isInstancedMesh !== true) {
        for (let i2 = 0, l2 = positionAttribute.count; i2 < l2; i2++) {
          if (object2.isMesh === true) {
            object2.getVertexPosition(i2, _vector$b);
          } else {
            _vector$b.fromBufferAttribute(positionAttribute, i2);
          }
          _vector$b.applyMatrix4(object2.matrixWorld);
          this.expandByPoint(_vector$b);
        }
      } else {
        if (object2.boundingBox !== void 0) {
          if (object2.boundingBox === null) {
            object2.computeBoundingBox();
          }
          _box$4.copy(object2.boundingBox);
        } else {
          if (geometry.boundingBox === null) {
            geometry.computeBoundingBox();
          }
          _box$4.copy(geometry.boundingBox);
        }
        _box$4.applyMatrix4(object2.matrixWorld);
        this.union(_box$4);
      }
    }
    const children2 = object2.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      this.expandByObject(children2[i2], precise);
    }
    return this;
  }
  containsPoint(point2) {
    return point2.x >= this.min.x && point2.x <= this.max.x && point2.y >= this.min.y && point2.y <= this.max.y && point2.z >= this.min.z && point2.z <= this.max.z;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  }
  getParameter(point2, target) {
    return target.set(
      (point2.x - this.min.x) / (this.max.x - this.min.x),
      (point2.y - this.min.y) / (this.max.y - this.min.y),
      (point2.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(box) {
    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
  }
  intersectsSphere(sphere) {
    this.clampPoint(sphere.center, _vector$b);
    return _vector$b.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
  }
  intersectsPlane(plane) {
    let min4, max4;
    if (plane.normal.x > 0) {
      min4 = plane.normal.x * this.min.x;
      max4 = plane.normal.x * this.max.x;
    } else {
      min4 = plane.normal.x * this.max.x;
      max4 = plane.normal.x * this.min.x;
    }
    if (plane.normal.y > 0) {
      min4 += plane.normal.y * this.min.y;
      max4 += plane.normal.y * this.max.y;
    } else {
      min4 += plane.normal.y * this.max.y;
      max4 += plane.normal.y * this.min.y;
    }
    if (plane.normal.z > 0) {
      min4 += plane.normal.z * this.min.z;
      max4 += plane.normal.z * this.max.z;
    } else {
      min4 += plane.normal.z * this.max.z;
      max4 += plane.normal.z * this.min.z;
    }
    return min4 <= -plane.constant && max4 >= -plane.constant;
  }
  intersectsTriangle(triangle) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(_center);
    _extents.subVectors(this.max, _center);
    _v0$3.subVectors(triangle.a, _center);
    _v1$7.subVectors(triangle.b, _center);
    _v2$4.subVectors(triangle.c, _center);
    _f0.subVectors(_v1$7, _v0$3);
    _f1.subVectors(_v2$4, _v1$7);
    _f2.subVectors(_v0$3, _v2$4);
    let axes = [
      0,
      -_f0.z,
      _f0.y,
      0,
      -_f1.z,
      _f1.y,
      0,
      -_f2.z,
      _f2.y,
      _f0.z,
      0,
      -_f0.x,
      _f1.z,
      0,
      -_f1.x,
      _f2.z,
      0,
      -_f2.x,
      -_f0.y,
      _f0.x,
      0,
      -_f1.y,
      _f1.x,
      0,
      -_f2.y,
      _f2.x,
      0
    ];
    if (!satForAxes(axes, _v0$3, _v1$7, _v2$4, _extents)) {
      return false;
    }
    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!satForAxes(axes, _v0$3, _v1$7, _v2$4, _extents)) {
      return false;
    }
    _triangleNormal.crossVectors(_f0, _f1);
    axes = [_triangleNormal.x, _triangleNormal.y, _triangleNormal.z];
    return satForAxes(axes, _v0$3, _v1$7, _v2$4, _extents);
  }
  clampPoint(point2, target) {
    return target.copy(point2).clamp(this.min, this.max);
  }
  distanceToPoint(point2) {
    return this.clampPoint(point2, _vector$b).distanceTo(point2);
  }
  getBoundingSphere(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
    } else {
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$b).length() * 0.5;
    }
    return target;
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    if (this.isEmpty()) this.makeEmpty();
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  applyMatrix4(matrix) {
    if (this.isEmpty()) return this;
    _points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
    _points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
    this.setFromPoints(_points);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
};
var _points = [
  new Vector3(),
  new Vector3(),
  new Vector3(),
  new Vector3(),
  new Vector3(),
  new Vector3(),
  new Vector3(),
  new Vector3()
];
var _vector$b = new Vector3();
var _box$4 = new Box3();
var _v0$3 = new Vector3();
var _v1$7 = new Vector3();
var _v2$4 = new Vector3();
var _f0 = new Vector3();
var _f1 = new Vector3();
var _f2 = new Vector3();
var _center = new Vector3();
var _extents = new Vector3();
var _triangleNormal = new Vector3();
var _testAxis = new Vector3();
function satForAxes(axes, v0, v1, v22, extents) {
  for (let i2 = 0, j2 = axes.length - 3; i2 <= j2; i2 += 3) {
    _testAxis.fromArray(axes, i2);
    const r2 = extents.x * Math.abs(_testAxis.x) + extents.y * Math.abs(_testAxis.y) + extents.z * Math.abs(_testAxis.z);
    const p02 = v0.dot(_testAxis);
    const p1 = v1.dot(_testAxis);
    const p2 = v22.dot(_testAxis);
    if (Math.max(-Math.max(p02, p1, p2), Math.min(p02, p1, p2)) > r2) {
      return false;
    }
  }
  return true;
}
var _box$3 = new Box3();
var _v1$6 = new Vector3();
var _v2$3 = new Vector3();
var Sphere = class {
  constructor(center = new Vector3(), radius = -1) {
    this.isSphere = true;
    this.center = center;
    this.radius = radius;
  }
  set(center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  }
  setFromPoints(points, optionalCenter) {
    const center = this.center;
    if (optionalCenter !== void 0) {
      center.copy(optionalCenter);
    } else {
      _box$3.setFromPoints(points).getCenter(center);
    }
    let maxRadiusSq = 0;
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
    }
    this.radius = Math.sqrt(maxRadiusSq);
    return this;
  }
  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  containsPoint(point2) {
    return point2.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(point2) {
    return point2.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(sphere) {
    const radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  }
  intersectsBox(box) {
    return box.intersectsSphere(this);
  }
  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(point2, target) {
    const deltaLengthSq = this.center.distanceToSquared(point2);
    target.copy(point2);
    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }
    return target;
  }
  getBoundingBox(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
      return target;
    }
    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  }
  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  }
  translate(offset) {
    this.center.add(offset);
    return this;
  }
  expandByPoint(point2) {
    if (this.isEmpty()) {
      this.center.copy(point2);
      this.radius = 0;
      return this;
    }
    _v1$6.subVectors(point2, this.center);
    const lengthSq2 = _v1$6.lengthSq();
    if (lengthSq2 > this.radius * this.radius) {
      const length2 = Math.sqrt(lengthSq2);
      const delta = (length2 - this.radius) * 0.5;
      this.center.addScaledVector(_v1$6, delta / length2);
      this.radius += delta;
    }
    return this;
  }
  union(sphere) {
    if (sphere.isEmpty()) {
      return this;
    }
    if (this.isEmpty()) {
      this.copy(sphere);
      return this;
    }
    if (this.center.equals(sphere.center) === true) {
      this.radius = Math.max(this.radius, sphere.radius);
    } else {
      _v2$3.subVectors(sphere.center, this.center).setLength(sphere.radius);
      this.expandByPoint(_v1$6.copy(sphere.center).add(_v2$3));
      this.expandByPoint(_v1$6.copy(sphere.center).sub(_v2$3));
    }
    return this;
  }
  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _vector$a = new Vector3();
var _segCenter = new Vector3();
var _segDir = new Vector3();
var _diff = new Vector3();
var _edge1 = new Vector3();
var _edge2 = new Vector3();
var _normal$1 = new Vector3();
var Ray = class {
  constructor(origin = new Vector3(), direction2 = new Vector3(0, 0, -1)) {
    this.origin = origin;
    this.direction = direction2;
  }
  set(origin, direction2) {
    this.origin.copy(origin);
    this.direction.copy(direction2);
    return this;
  }
  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  at(t4, target) {
    return target.copy(this.origin).addScaledVector(this.direction, t4);
  }
  lookAt(v3) {
    this.direction.copy(v3).sub(this.origin).normalize();
    return this;
  }
  recast(t4) {
    this.origin.copy(this.at(t4, _vector$a));
    return this;
  }
  closestPointToPoint(point2, target) {
    target.subVectors(point2, this.origin);
    const directionDistance = target.dot(this.direction);
    if (directionDistance < 0) {
      return target.copy(this.origin);
    }
    return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
  }
  distanceToPoint(point2) {
    return Math.sqrt(this.distanceSqToPoint(point2));
  }
  distanceSqToPoint(point2) {
    const directionDistance = _vector$a.subVectors(point2, this.origin).dot(this.direction);
    if (directionDistance < 0) {
      return this.origin.distanceToSquared(point2);
    }
    _vector$a.copy(this.origin).addScaledVector(this.direction, directionDistance);
    return _vector$a.distanceToSquared(point2);
  }
  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
    _segCenter.copy(v0).add(v1).multiplyScalar(0.5);
    _segDir.copy(v1).sub(v0).normalize();
    _diff.copy(this.origin).sub(_segCenter);
    const segExtent = v0.distanceTo(v1) * 0.5;
    const a01 = -this.direction.dot(_segDir);
    const b0 = _diff.dot(this.direction);
    const b1 = -_diff.dot(_segDir);
    const c4 = _diff.lengthSq();
    const det = Math.abs(1 - a01 * a01);
    let s0, s1, sqrDist, extDet;
    if (det > 0) {
      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;
      if (s0 >= 0) {
        if (s1 >= -extDet) {
          if (s1 <= extDet) {
            const invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c4;
          } else {
            s1 = segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
          }
        } else {
          s1 = -segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
        }
      } else {
        if (s1 <= -extDet) {
          s0 = Math.max(0, -(-a01 * segExtent + b0));
          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
        } else if (s1 <= extDet) {
          s0 = 0;
          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = s1 * (s1 + 2 * b1) + c4;
        } else {
          s0 = Math.max(0, -(a01 * segExtent + b0));
          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
        }
      }
    } else {
      s1 = a01 > 0 ? -segExtent : segExtent;
      s0 = Math.max(0, -(a01 * s1 + b0));
      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
    }
    if (optionalPointOnRay) {
      optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
    }
    if (optionalPointOnSegment) {
      optionalPointOnSegment.copy(_segCenter).addScaledVector(_segDir, s1);
    }
    return sqrDist;
  }
  intersectSphere(sphere, target) {
    _vector$a.subVectors(sphere.center, this.origin);
    const tca = _vector$a.dot(this.direction);
    const d2 = _vector$a.dot(_vector$a) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2) return null;
    const thc = Math.sqrt(radius2 - d2);
    const t03 = tca - thc;
    const t13 = tca + thc;
    if (t13 < 0) return null;
    if (t03 < 0) return this.at(t13, target);
    return this.at(t03, target);
  }
  intersectsSphere(sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  }
  distanceToPlane(plane) {
    const denominator = plane.normal.dot(this.direction);
    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const t4 = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    return t4 >= 0 ? t4 : null;
  }
  intersectPlane(plane, target) {
    const t4 = this.distanceToPlane(plane);
    if (t4 === null) {
      return null;
    }
    return this.at(t4, target);
  }
  intersectsPlane(plane) {
    const distToPoint = plane.distanceToPoint(this.origin);
    if (distToPoint === 0) {
      return true;
    }
    const denominator = plane.normal.dot(this.direction);
    if (denominator * distToPoint < 0) {
      return true;
    }
    return false;
  }
  intersectBox(box, target) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
    const origin = this.origin;
    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }
    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }
    if (tmin > tymax || tymin > tmax) return null;
    if (tymin > tmin || isNaN(tmin)) tmin = tymin;
    if (tymax < tmax || isNaN(tmax)) tmax = tymax;
    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }
    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
    if (tmax < 0) return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  }
  intersectsBox(box) {
    return this.intersectBox(box, _vector$a) !== null;
  }
  intersectTriangle(a2, b, c4, backfaceCulling, target) {
    _edge1.subVectors(b, a2);
    _edge2.subVectors(c4, a2);
    _normal$1.crossVectors(_edge1, _edge2);
    let DdN = this.direction.dot(_normal$1);
    let sign6;
    if (DdN > 0) {
      if (backfaceCulling) return null;
      sign6 = 1;
    } else if (DdN < 0) {
      sign6 = -1;
      DdN = -DdN;
    } else {
      return null;
    }
    _diff.subVectors(this.origin, a2);
    const DdQxE2 = sign6 * this.direction.dot(_edge2.crossVectors(_diff, _edge2));
    if (DdQxE2 < 0) {
      return null;
    }
    const DdE1xQ = sign6 * this.direction.dot(_edge1.cross(_diff));
    if (DdE1xQ < 0) {
      return null;
    }
    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    }
    const QdN = -sign6 * _diff.dot(_normal$1);
    if (QdN < 0) {
      return null;
    }
    return this.at(QdN / DdN, target);
  }
  applyMatrix4(matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  }
  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var Matrix4 = class _Matrix4 {
  constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    _Matrix4.prototype.isMatrix4 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
    }
  }
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te = this.elements;
    te[0] = n11;
    te[4] = n12;
    te[8] = n13;
    te[12] = n14;
    te[1] = n21;
    te[5] = n22;
    te[9] = n23;
    te[13] = n24;
    te[2] = n31;
    te[6] = n32;
    te[10] = n33;
    te[14] = n34;
    te[3] = n41;
    te[7] = n42;
    te[11] = n43;
    te[15] = n44;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  clone() {
    return new _Matrix4().fromArray(this.elements);
  }
  copy(m2) {
    const te = this.elements;
    const me = m2.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];
    return this;
  }
  copyPosition(m2) {
    const te = this.elements, me = m2.elements;
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    return this;
  }
  setFromMatrix3(m2) {
    const me = m2.elements;
    this.set(
      me[0],
      me[3],
      me[6],
      0,
      me[1],
      me[4],
      me[7],
      0,
      me[2],
      me[5],
      me[8],
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  }
  makeBasis(xAxis, yAxis, zAxis) {
    this.set(
      xAxis.x,
      yAxis.x,
      zAxis.x,
      0,
      xAxis.y,
      yAxis.y,
      zAxis.y,
      0,
      xAxis.z,
      yAxis.z,
      zAxis.z,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractRotation(m2) {
    const te = this.elements;
    const me = m2.elements;
    const scaleX = 1 / _v1$5.setFromMatrixColumn(m2, 0).length();
    const scaleY = 1 / _v1$5.setFromMatrixColumn(m2, 1).length();
    const scaleZ = 1 / _v1$5.setFromMatrixColumn(m2, 2).length();
    te[0] = me[0] * scaleX;
    te[1] = me[1] * scaleX;
    te[2] = me[2] * scaleX;
    te[3] = 0;
    te[4] = me[4] * scaleY;
    te[5] = me[5] * scaleY;
    te[6] = me[6] * scaleY;
    te[7] = 0;
    te[8] = me[8] * scaleZ;
    te[9] = me[9] * scaleZ;
    te[10] = me[10] * scaleZ;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromEuler(euler) {
    const te = this.elements;
    const x2 = euler.x, y2 = euler.y, z2 = euler.z;
    const a2 = Math.cos(x2), b = Math.sin(x2);
    const c4 = Math.cos(y2), d2 = Math.sin(y2);
    const e3 = Math.cos(z2), f2 = Math.sin(z2);
    if (euler.order === "XYZ") {
      const ae = a2 * e3, af = a2 * f2, be = b * e3, bf = b * f2;
      te[0] = c4 * e3;
      te[4] = -c4 * f2;
      te[8] = d2;
      te[1] = af + be * d2;
      te[5] = ae - bf * d2;
      te[9] = -b * c4;
      te[2] = bf - ae * d2;
      te[6] = be + af * d2;
      te[10] = a2 * c4;
    } else if (euler.order === "YXZ") {
      const ce2 = c4 * e3, cf = c4 * f2, de2 = d2 * e3, df = d2 * f2;
      te[0] = ce2 + df * b;
      te[4] = de2 * b - cf;
      te[8] = a2 * d2;
      te[1] = a2 * f2;
      te[5] = a2 * e3;
      te[9] = -b;
      te[2] = cf * b - de2;
      te[6] = df + ce2 * b;
      te[10] = a2 * c4;
    } else if (euler.order === "ZXY") {
      const ce2 = c4 * e3, cf = c4 * f2, de2 = d2 * e3, df = d2 * f2;
      te[0] = ce2 - df * b;
      te[4] = -a2 * f2;
      te[8] = de2 + cf * b;
      te[1] = cf + de2 * b;
      te[5] = a2 * e3;
      te[9] = df - ce2 * b;
      te[2] = -a2 * d2;
      te[6] = b;
      te[10] = a2 * c4;
    } else if (euler.order === "ZYX") {
      const ae = a2 * e3, af = a2 * f2, be = b * e3, bf = b * f2;
      te[0] = c4 * e3;
      te[4] = be * d2 - af;
      te[8] = ae * d2 + bf;
      te[1] = c4 * f2;
      te[5] = bf * d2 + ae;
      te[9] = af * d2 - be;
      te[2] = -d2;
      te[6] = b * c4;
      te[10] = a2 * c4;
    } else if (euler.order === "YZX") {
      const ac2 = a2 * c4, ad = a2 * d2, bc4 = b * c4, bd2 = b * d2;
      te[0] = c4 * e3;
      te[4] = bd2 - ac2 * f2;
      te[8] = bc4 * f2 + ad;
      te[1] = f2;
      te[5] = a2 * e3;
      te[9] = -b * e3;
      te[2] = -d2 * e3;
      te[6] = ad * f2 + bc4;
      te[10] = ac2 - bd2 * f2;
    } else if (euler.order === "XZY") {
      const ac2 = a2 * c4, ad = a2 * d2, bc4 = b * c4, bd2 = b * d2;
      te[0] = c4 * e3;
      te[4] = -f2;
      te[8] = d2 * e3;
      te[1] = ac2 * f2 + bd2;
      te[5] = a2 * e3;
      te[9] = ad * f2 - bc4;
      te[2] = bc4 * f2 - ad;
      te[6] = b * e3;
      te[10] = bd2 * f2 + ac2;
    }
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromQuaternion(q2) {
    return this.compose(_zero, q2, _one);
  }
  lookAt(eye, target, up) {
    const te = this.elements;
    _z.subVectors(eye, target);
    if (_z.lengthSq() === 0) {
      _z.z = 1;
    }
    _z.normalize();
    _x.crossVectors(up, _z);
    if (_x.lengthSq() === 0) {
      if (Math.abs(up.z) === 1) {
        _z.x += 1e-4;
      } else {
        _z.z += 1e-4;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
    }
    _x.normalize();
    _y.crossVectors(_z, _x);
    te[0] = _x.x;
    te[4] = _y.x;
    te[8] = _z.x;
    te[1] = _x.y;
    te[5] = _y.y;
    te[9] = _z.y;
    te[2] = _x.z;
    te[6] = _y.z;
    te[10] = _z.z;
    return this;
  }
  multiply(m2) {
    return this.multiplyMatrices(this, m2);
  }
  premultiply(m2) {
    return this.multiplyMatrices(m2, this);
  }
  multiplyMatrices(a2, b) {
    const ae = a2.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  multiplyScalar(s2) {
    const te = this.elements;
    te[0] *= s2;
    te[4] *= s2;
    te[8] *= s2;
    te[12] *= s2;
    te[1] *= s2;
    te[5] *= s2;
    te[9] *= s2;
    te[13] *= s2;
    te[2] *= s2;
    te[6] *= s2;
    te[10] *= s2;
    te[14] *= s2;
    te[3] *= s2;
    te[7] *= s2;
    te[11] *= s2;
    te[15] *= s2;
    return this;
  }
  determinant() {
    const te = this.elements;
    const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
    const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
    const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
    const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  }
  transpose() {
    const te = this.elements;
    let tmp3;
    tmp3 = te[1];
    te[1] = te[4];
    te[4] = tmp3;
    tmp3 = te[2];
    te[2] = te[8];
    te[8] = tmp3;
    tmp3 = te[6];
    te[6] = te[9];
    te[9] = tmp3;
    tmp3 = te[3];
    te[3] = te[12];
    te[12] = tmp3;
    tmp3 = te[7];
    te[7] = te[13];
    te[13] = tmp3;
    tmp3 = te[11];
    te[11] = te[14];
    te[14] = tmp3;
    return this;
  }
  setPosition(x2, y2, z2) {
    const te = this.elements;
    if (x2.isVector3) {
      te[12] = x2.x;
      te[13] = x2.y;
      te[14] = x2.z;
    } else {
      te[12] = x2;
      te[13] = y2;
      te[14] = z2;
    }
    return this;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t122 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t122 + n31 * t13 + n41 * t14;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t122 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  scale(v3) {
    const te = this.elements;
    const x2 = v3.x, y2 = v3.y, z2 = v3.z;
    te[0] *= x2;
    te[4] *= y2;
    te[8] *= z2;
    te[1] *= x2;
    te[5] *= y2;
    te[9] *= z2;
    te[2] *= x2;
    te[6] *= y2;
    te[10] *= z2;
    te[3] *= x2;
    te[7] *= y2;
    te[11] *= z2;
    return this;
  }
  getMaxScaleOnAxis() {
    const te = this.elements;
    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  makeTranslation(x2, y2, z2) {
    if (x2.isVector3) {
      this.set(
        1,
        0,
        0,
        x2.x,
        0,
        1,
        0,
        x2.y,
        0,
        0,
        1,
        x2.z,
        0,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        0,
        x2,
        0,
        1,
        0,
        y2,
        0,
        0,
        1,
        z2,
        0,
        0,
        0,
        1
      );
    }
    return this;
  }
  makeRotationX(theta) {
    const c4 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(
      1,
      0,
      0,
      0,
      0,
      c4,
      -s2,
      0,
      0,
      s2,
      c4,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationY(theta) {
    const c4 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(
      c4,
      0,
      s2,
      0,
      0,
      1,
      0,
      0,
      -s2,
      0,
      c4,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationZ(theta) {
    const c4 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(
      c4,
      -s2,
      0,
      0,
      s2,
      c4,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationAxis(axis, angle2) {
    const c4 = Math.cos(angle2);
    const s2 = Math.sin(angle2);
    const t4 = 1 - c4;
    const x2 = axis.x, y2 = axis.y, z2 = axis.z;
    const tx = t4 * x2, ty = t4 * y2;
    this.set(
      tx * x2 + c4,
      tx * y2 - s2 * z2,
      tx * z2 + s2 * y2,
      0,
      tx * y2 + s2 * z2,
      ty * y2 + c4,
      ty * z2 - s2 * x2,
      0,
      tx * z2 - s2 * y2,
      ty * z2 + s2 * x2,
      t4 * z2 * z2 + c4,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(x2, y2, z2) {
    this.set(
      x2,
      0,
      0,
      0,
      0,
      y2,
      0,
      0,
      0,
      0,
      z2,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeShear(xy, xz, yx, yz, zx, zy) {
    this.set(
      1,
      yx,
      zx,
      0,
      xy,
      1,
      zy,
      0,
      xz,
      yz,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  compose(position, quaternion, scale2) {
    const te = this.elements;
    const x2 = quaternion._x, y2 = quaternion._y, z2 = quaternion._z, w4 = quaternion._w;
    const x22 = x2 + x2, y22 = y2 + y2, z22 = z2 + z2;
    const xx = x2 * x22, xy = x2 * y22, xz = x2 * z22;
    const yy = y2 * y22, yz = y2 * z22, zz = z2 * z22;
    const wx = w4 * x22, wy = w4 * y22, wz = w4 * z22;
    const sx = scale2.x, sy = scale2.y, sz = scale2.z;
    te[0] = (1 - (yy + zz)) * sx;
    te[1] = (xy + wz) * sx;
    te[2] = (xz - wy) * sx;
    te[3] = 0;
    te[4] = (xy - wz) * sy;
    te[5] = (1 - (xx + zz)) * sy;
    te[6] = (yz + wx) * sy;
    te[7] = 0;
    te[8] = (xz + wy) * sz;
    te[9] = (yz - wx) * sz;
    te[10] = (1 - (xx + yy)) * sz;
    te[11] = 0;
    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1;
    return this;
  }
  decompose(position, quaternion, scale2) {
    const te = this.elements;
    let sx = _v1$5.set(te[0], te[1], te[2]).length();
    const sy = _v1$5.set(te[4], te[5], te[6]).length();
    const sz = _v1$5.set(te[8], te[9], te[10]).length();
    const det = this.determinant();
    if (det < 0) sx = -sx;
    position.x = te[12];
    position.y = te[13];
    position.z = te[14];
    _m1$4.copy(this);
    const invSX = 1 / sx;
    const invSY = 1 / sy;
    const invSZ = 1 / sz;
    _m1$4.elements[0] *= invSX;
    _m1$4.elements[1] *= invSX;
    _m1$4.elements[2] *= invSX;
    _m1$4.elements[4] *= invSY;
    _m1$4.elements[5] *= invSY;
    _m1$4.elements[6] *= invSY;
    _m1$4.elements[8] *= invSZ;
    _m1$4.elements[9] *= invSZ;
    _m1$4.elements[10] *= invSZ;
    quaternion.setFromRotationMatrix(_m1$4);
    scale2.x = sx;
    scale2.y = sy;
    scale2.z = sz;
    return this;
  }
  makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
    const te = this.elements;
    const x2 = 2 * near / (right - left);
    const y2 = 2 * near / (top - bottom);
    const a2 = (right + left) / (right - left);
    const b = (top + bottom) / (top - bottom);
    let c4, d2;
    if (coordinateSystem === WebGLCoordinateSystem) {
      c4 = -(far + near) / (far - near);
      d2 = -2 * far * near / (far - near);
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      c4 = -far / (far - near);
      d2 = -far * near / (far - near);
    } else {
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = x2;
    te[4] = 0;
    te[8] = a2;
    te[12] = 0;
    te[1] = 0;
    te[5] = y2;
    te[9] = b;
    te[13] = 0;
    te[2] = 0;
    te[6] = 0;
    te[10] = c4;
    te[14] = d2;
    te[3] = 0;
    te[7] = 0;
    te[11] = -1;
    te[15] = 0;
    return this;
  }
  makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem) {
    const te = this.elements;
    const w4 = 1 / (right - left);
    const h2 = 1 / (top - bottom);
    const p2 = 1 / (far - near);
    const x2 = (right + left) * w4;
    const y2 = (top + bottom) * h2;
    let z2, zInv;
    if (coordinateSystem === WebGLCoordinateSystem) {
      z2 = (far + near) * p2;
      zInv = -2 * p2;
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      z2 = near * p2;
      zInv = -1 * p2;
    } else {
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = 2 * w4;
    te[4] = 0;
    te[8] = 0;
    te[12] = -x2;
    te[1] = 0;
    te[5] = 2 * h2;
    te[9] = 0;
    te[13] = -y2;
    te[2] = 0;
    te[6] = 0;
    te[10] = zInv;
    te[14] = -z2;
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[15] = 1;
    return this;
  }
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i2 = 0; i2 < 16; i2++) {
      if (te[i2] !== me[i2]) return false;
    }
    return true;
  }
  fromArray(array3, offset = 0) {
    for (let i2 = 0; i2 < 16; i2++) {
      this.elements[i2] = array3[i2 + offset];
    }
    return this;
  }
  toArray(array3 = [], offset = 0) {
    const te = this.elements;
    array3[offset] = te[0];
    array3[offset + 1] = te[1];
    array3[offset + 2] = te[2];
    array3[offset + 3] = te[3];
    array3[offset + 4] = te[4];
    array3[offset + 5] = te[5];
    array3[offset + 6] = te[6];
    array3[offset + 7] = te[7];
    array3[offset + 8] = te[8];
    array3[offset + 9] = te[9];
    array3[offset + 10] = te[10];
    array3[offset + 11] = te[11];
    array3[offset + 12] = te[12];
    array3[offset + 13] = te[13];
    array3[offset + 14] = te[14];
    array3[offset + 15] = te[15];
    return array3;
  }
};
var _v1$5 = new Vector3();
var _m1$4 = new Matrix4();
var _zero = new Vector3(0, 0, 0);
var _one = new Vector3(1, 1, 1);
var _x = new Vector3();
var _y = new Vector3();
var _z = new Vector3();
var _matrix$2 = new Matrix4();
var _quaternion$3 = new Quaternion();
var Euler = class _Euler {
  constructor(x2 = 0, y2 = 0, z2 = 0, order = _Euler.DEFAULT_ORDER) {
    this.isEuler = true;
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._order = order;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
    this._onChangeCallback();
  }
  set(x2, y2, z2, order = this._order) {
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._order = order;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m2, order = this._order, update20 = true) {
    const te = m2.elements;
    const m11 = te[0], m12 = te[4], m13 = te[8];
    const m21 = te[1], m22 = te[5], m23 = te[9];
    const m31 = te[2], m32 = te[6], m33 = te[10];
    switch (order) {
      case "XYZ":
        this._y = Math.asin(clamp(m13, -1, 1));
        if (Math.abs(m13) < 0.9999999) {
          this._x = Math.atan2(-m23, m33);
          this._z = Math.atan2(-m12, m11);
        } else {
          this._x = Math.atan2(m32, m22);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-clamp(m23, -1, 1));
        if (Math.abs(m23) < 0.9999999) {
          this._y = Math.atan2(m13, m33);
          this._z = Math.atan2(m21, m22);
        } else {
          this._y = Math.atan2(-m31, m11);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(clamp(m32, -1, 1));
        if (Math.abs(m32) < 0.9999999) {
          this._y = Math.atan2(-m31, m33);
          this._z = Math.atan2(-m12, m22);
        } else {
          this._y = 0;
          this._z = Math.atan2(m21, m11);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-clamp(m31, -1, 1));
        if (Math.abs(m31) < 0.9999999) {
          this._x = Math.atan2(m32, m33);
          this._z = Math.atan2(m21, m11);
        } else {
          this._x = 0;
          this._z = Math.atan2(-m12, m22);
        }
        break;
      case "YZX":
        this._z = Math.asin(clamp(m21, -1, 1));
        if (Math.abs(m21) < 0.9999999) {
          this._x = Math.atan2(-m23, m22);
          this._y = Math.atan2(-m31, m11);
        } else {
          this._x = 0;
          this._y = Math.atan2(m13, m33);
        }
        break;
      case "XZY":
        this._z = Math.asin(-clamp(m12, -1, 1));
        if (Math.abs(m12) < 0.9999999) {
          this._x = Math.atan2(m32, m22);
          this._y = Math.atan2(m13, m11);
        } else {
          this._x = Math.atan2(-m23, m33);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
    }
    this._order = order;
    if (update20 === true) this._onChangeCallback();
    return this;
  }
  setFromQuaternion(q2, order, update20) {
    _matrix$2.makeRotationFromQuaternion(q2);
    return this.setFromRotationMatrix(_matrix$2, order, update20);
  }
  setFromVector3(v3, order = this._order) {
    return this.set(v3.x, v3.y, v3.z, order);
  }
  reorder(newOrder) {
    _quaternion$3.setFromEuler(this);
    return this.setFromQuaternion(_quaternion$3, newOrder);
  }
  equals(euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  }
  fromArray(array3) {
    this._x = array3[0];
    this._y = array3[1];
    this._z = array3[2];
    if (array3[3] !== void 0) this._order = array3[3];
    this._onChangeCallback();
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this._x;
    array3[offset + 1] = this._y;
    array3[offset + 2] = this._z;
    array3[offset + 3] = this._order;
    return array3;
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._order;
  }
};
Euler.DEFAULT_ORDER = "XYZ";
var Layers = class {
  constructor() {
    this.mask = 1 | 0;
  }
  set(channel) {
    this.mask = (1 << channel | 0) >>> 0;
  }
  enable(channel) {
    this.mask |= 1 << channel | 0;
  }
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  toggle(channel) {
    this.mask ^= 1 << channel | 0;
  }
  disable(channel) {
    this.mask &= ~(1 << channel | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(layers2) {
    return (this.mask & layers2.mask) !== 0;
  }
  isEnabled(channel) {
    return (this.mask & (1 << channel | 0)) !== 0;
  }
};
var _object3DId = 0;
var _v1$4 = new Vector3();
var _q1 = new Quaternion();
var _m1$3 = new Matrix4();
var _target = new Vector3();
var _position$3 = new Vector3();
var _scale$2 = new Vector3();
var _quaternion$2 = new Quaternion();
var _xAxis = new Vector3(1, 0, 0);
var _yAxis = new Vector3(0, 1, 0);
var _zAxis = new Vector3(0, 0, 1);
var _addedEvent = { type: "added" };
var _removedEvent = { type: "removed" };
var _childaddedEvent = { type: "childadded", child: null };
var _childremovedEvent = { type: "childremoved", child: null };
var Object3D = class _Object3D extends EventDispatcher {
  constructor() {
    super();
    this.isObject3D = true;
    Object.defineProperty(this, "id", { value: _object3DId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = _Object3D.DEFAULT_UP.clone();
    const position = new Vector3();
    const rotation = new Euler();
    const quaternion = new Quaternion();
    const scale2 = new Vector3(1, 1, 1);
    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }
    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, void 0, false);
    }
    rotation._onChange(onRotationChange);
    quaternion._onChange(onQuaternionChange);
    Object.defineProperties(this, {
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: scale2
      },
      modelViewMatrix: {
        value: new Matrix4()
      },
      normalMatrix: {
        value: new Matrix3()
      }
    });
    this.matrix = new Matrix4();
    this.matrixWorld = new Matrix4();
    this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
    this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
    this.matrixWorldNeedsUpdate = false;
    this.layers = new Layers();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(matrix) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    this.matrix.premultiply(matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(q2) {
    this.quaternion.premultiply(q2);
    return this;
  }
  setRotationFromAxisAngle(axis, angle2) {
    this.quaternion.setFromAxisAngle(axis, angle2);
  }
  setRotationFromEuler(euler) {
    this.quaternion.setFromEuler(euler, true);
  }
  setRotationFromMatrix(m2) {
    this.quaternion.setFromRotationMatrix(m2);
  }
  setRotationFromQuaternion(q2) {
    this.quaternion.copy(q2);
  }
  rotateOnAxis(axis, angle2) {
    _q1.setFromAxisAngle(axis, angle2);
    this.quaternion.multiply(_q1);
    return this;
  }
  rotateOnWorldAxis(axis, angle2) {
    _q1.setFromAxisAngle(axis, angle2);
    this.quaternion.premultiply(_q1);
    return this;
  }
  rotateX(angle2) {
    return this.rotateOnAxis(_xAxis, angle2);
  }
  rotateY(angle2) {
    return this.rotateOnAxis(_yAxis, angle2);
  }
  rotateZ(angle2) {
    return this.rotateOnAxis(_zAxis, angle2);
  }
  translateOnAxis(axis, distance3) {
    _v1$4.copy(axis).applyQuaternion(this.quaternion);
    this.position.add(_v1$4.multiplyScalar(distance3));
    return this;
  }
  translateX(distance3) {
    return this.translateOnAxis(_xAxis, distance3);
  }
  translateY(distance3) {
    return this.translateOnAxis(_yAxis, distance3);
  }
  translateZ(distance3) {
    return this.translateOnAxis(_zAxis, distance3);
  }
  localToWorld(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(_m1$3.copy(this.matrixWorld).invert());
  }
  lookAt(x2, y2, z2) {
    if (x2.isVector3) {
      _target.copy(x2);
    } else {
      _target.set(x2, y2, z2);
    }
    const parent2 = this.parent;
    this.updateWorldMatrix(true, false);
    _position$3.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      _m1$3.lookAt(_position$3, _target, this.up);
    } else {
      _m1$3.lookAt(_target, _position$3, this.up);
    }
    this.quaternion.setFromRotationMatrix(_m1$3);
    if (parent2) {
      _m1$3.extractRotation(parent2.matrixWorld);
      _q1.setFromRotationMatrix(_m1$3);
      this.quaternion.premultiply(_q1.invert());
    }
  }
  add(object2) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.add(arguments[i2]);
      }
      return this;
    }
    if (object2 === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object2);
      return this;
    }
    if (object2 && object2.isObject3D) {
      object2.removeFromParent();
      object2.parent = this;
      this.children.push(object2);
      object2.dispatchEvent(_addedEvent);
      _childaddedEvent.child = object2;
      this.dispatchEvent(_childaddedEvent);
      _childaddedEvent.child = null;
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object2);
    }
    return this;
  }
  remove(object2) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.remove(arguments[i2]);
      }
      return this;
    }
    const index7 = this.children.indexOf(object2);
    if (index7 !== -1) {
      object2.parent = null;
      this.children.splice(index7, 1);
      object2.dispatchEvent(_removedEvent);
      _childremovedEvent.child = object2;
      this.dispatchEvent(_childremovedEvent);
      _childremovedEvent.child = null;
    }
    return this;
  }
  removeFromParent() {
    const parent2 = this.parent;
    if (parent2 !== null) {
      parent2.remove(this);
    }
    return this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(object2) {
    this.updateWorldMatrix(true, false);
    _m1$3.copy(this.matrixWorld).invert();
    if (object2.parent !== null) {
      object2.parent.updateWorldMatrix(true, false);
      _m1$3.multiply(object2.parent.matrixWorld);
    }
    object2.applyMatrix4(_m1$3);
    object2.removeFromParent();
    object2.parent = this;
    this.children.push(object2);
    object2.updateWorldMatrix(false, true);
    object2.dispatchEvent(_addedEvent);
    _childaddedEvent.child = object2;
    this.dispatchEvent(_childaddedEvent);
    _childaddedEvent.child = null;
    return this;
  }
  getObjectById(id2) {
    return this.getObjectByProperty("id", id2);
  }
  getObjectByName(name) {
    return this.getObjectByProperty("name", name);
  }
  getObjectByProperty(name, value) {
    if (this[name] === value) return this;
    for (let i2 = 0, l2 = this.children.length; i2 < l2; i2++) {
      const child = this.children[i2];
      const object2 = child.getObjectByProperty(name, value);
      if (object2 !== void 0) {
        return object2;
      }
    }
    return void 0;
  }
  getObjectsByProperty(name, value, result = []) {
    if (this[name] === value) result.push(this);
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      children2[i2].getObjectsByProperty(name, value, result);
    }
    return result;
  }
  getWorldPosition(target) {
    this.updateWorldMatrix(true, false);
    return target.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$3, target, _scale$2);
    return target;
  }
  getWorldScale(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$3, _quaternion$2, target);
    return target;
  }
  getWorldDirection(target) {
    this.updateWorldMatrix(true, false);
    const e3 = this.matrixWorld.elements;
    return target.set(e3[8], e3[9], e3[10]).normalize();
  }
  raycast() {
  }
  traverse(callback) {
    callback(this);
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      children2[i2].traverse(callback);
    }
  }
  traverseVisible(callback) {
    if (this.visible === false) return;
    callback(this);
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      children2[i2].traverseVisible(callback);
    }
  }
  traverseAncestors(callback) {
    const parent2 = this.parent;
    if (parent2 !== null) {
      callback(parent2);
      parent2.traverseAncestors(callback);
    }
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  }
  updateMatrixWorld(force) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || force) {
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      const child = children2[i2];
      child.updateMatrixWorld(force);
    }
  }
  updateWorldMatrix(updateParents, updateChildren) {
    const parent2 = this.parent;
    if (updateParents === true && parent2 !== null) {
      parent2.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldAutoUpdate === true) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
    }
    if (updateChildren === true) {
      const children2 = this.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        const child = children2[i2];
        child.updateWorldMatrix(false, true);
      }
    }
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    const output2 = {};
    if (isRootObject) {
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {}
      };
      output2.metadata = {
        version: 4.6,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const object2 = {};
    object2.uuid = this.uuid;
    object2.type = this.type;
    if (this.name !== "") object2.name = this.name;
    if (this.castShadow === true) object2.castShadow = true;
    if (this.receiveShadow === true) object2.receiveShadow = true;
    if (this.visible === false) object2.visible = false;
    if (this.frustumCulled === false) object2.frustumCulled = false;
    if (this.renderOrder !== 0) object2.renderOrder = this.renderOrder;
    if (Object.keys(this.userData).length > 0) object2.userData = this.userData;
    object2.layers = this.layers.mask;
    object2.matrix = this.matrix.toArray();
    object2.up = this.up.toArray();
    if (this.matrixAutoUpdate === false) object2.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      object2.type = "InstancedMesh";
      object2.count = this.count;
      object2.instanceMatrix = this.instanceMatrix.toJSON();
      if (this.instanceColor !== null) object2.instanceColor = this.instanceColor.toJSON();
    }
    if (this.isBatchedMesh) {
      object2.type = "BatchedMesh";
      object2.perObjectFrustumCulled = this.perObjectFrustumCulled;
      object2.sortObjects = this.sortObjects;
      object2.drawRanges = this._drawRanges;
      object2.reservedRanges = this._reservedRanges;
      object2.visibility = this._visibility;
      object2.active = this._active;
      object2.bounds = this._bounds.map((bound) => ({
        boxInitialized: bound.boxInitialized,
        boxMin: bound.box.min.toArray(),
        boxMax: bound.box.max.toArray(),
        sphereInitialized: bound.sphereInitialized,
        sphereRadius: bound.sphere.radius,
        sphereCenter: bound.sphere.center.toArray()
      }));
      object2.maxInstanceCount = this._maxInstanceCount;
      object2.maxVertexCount = this._maxVertexCount;
      object2.maxIndexCount = this._maxIndexCount;
      object2.geometryInitialized = this._geometryInitialized;
      object2.geometryCount = this._geometryCount;
      object2.matricesTexture = this._matricesTexture.toJSON(meta);
      if (this._colorsTexture !== null) object2.colorsTexture = this._colorsTexture.toJSON(meta);
      if (this.boundingSphere !== null) {
        object2.boundingSphere = {
          center: object2.boundingSphere.center.toArray(),
          radius: object2.boundingSphere.radius
        };
      }
      if (this.boundingBox !== null) {
        object2.boundingBox = {
          min: object2.boundingBox.min.toArray(),
          max: object2.boundingBox.max.toArray()
        };
      }
    }
    function serialize(library, element2) {
      if (library[element2.uuid] === void 0) {
        library[element2.uuid] = element2.toJSON(meta);
      }
      return element2.uuid;
    }
    if (this.isScene) {
      if (this.background) {
        if (this.background.isColor) {
          object2.background = this.background.toJSON();
        } else if (this.background.isTexture) {
          object2.background = this.background.toJSON(meta).uuid;
        }
      }
      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
        object2.environment = this.environment.toJSON(meta).uuid;
      }
    } else if (this.isMesh || this.isLine || this.isPoints) {
      object2.geometry = serialize(meta.geometries, this.geometry);
      const parameters = this.geometry.parameters;
      if (parameters !== void 0 && parameters.shapes !== void 0) {
        const shapes = parameters.shapes;
        if (Array.isArray(shapes)) {
          for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
            const shape = shapes[i2];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }
    if (this.isSkinnedMesh) {
      object2.bindMode = this.bindMode;
      object2.bindMatrix = this.bindMatrix.toArray();
      if (this.skeleton !== void 0) {
        serialize(meta.skeletons, this.skeleton);
        object2.skeleton = this.skeleton.uuid;
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const uuids = [];
        for (let i2 = 0, l2 = this.material.length; i2 < l2; i2++) {
          uuids.push(serialize(meta.materials, this.material[i2]));
        }
        object2.material = uuids;
      } else {
        object2.material = serialize(meta.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      object2.children = [];
      for (let i2 = 0; i2 < this.children.length; i2++) {
        object2.children.push(this.children[i2].toJSON(meta).object);
      }
    }
    if (this.animations.length > 0) {
      object2.animations = [];
      for (let i2 = 0; i2 < this.animations.length; i2++) {
        const animation = this.animations[i2];
        object2.animations.push(serialize(meta.animations, animation));
      }
    }
    if (isRootObject) {
      const geometries = extractFromCache(meta.geometries);
      const materials = extractFromCache(meta.materials);
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const shapes = extractFromCache(meta.shapes);
      const skeletons = extractFromCache(meta.skeletons);
      const animations = extractFromCache(meta.animations);
      const nodes = extractFromCache(meta.nodes);
      if (geometries.length > 0) output2.geometries = geometries;
      if (materials.length > 0) output2.materials = materials;
      if (textures.length > 0) output2.textures = textures;
      if (images.length > 0) output2.images = images;
      if (shapes.length > 0) output2.shapes = shapes;
      if (skeletons.length > 0) output2.skeletons = skeletons;
      if (animations.length > 0) output2.animations = animations;
      if (nodes.length > 0) output2.nodes = nodes;
    }
    output2.object = object2;
    return output2;
    function extractFromCache(cache2) {
      const values = [];
      for (const key in cache2) {
        const data = cache2[key];
        delete data.metadata;
        values.push(data);
      }
      return values;
    }
  }
  clone(recursive) {
    return new this.constructor().copy(this, recursive);
  }
  copy(source, recursive = true) {
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.rotation.order = source.rotation.order;
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.animations = source.animations.slice();
    this.userData = JSON.parse(JSON.stringify(source.userData));
    if (recursive === true) {
      for (let i2 = 0; i2 < source.children.length; i2++) {
        const child = source.children[i2];
        this.add(child.clone());
      }
    }
    return this;
  }
};
Object3D.DEFAULT_UP = new Vector3(0, 1, 0);
Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
var _v0$2 = new Vector3();
var _v1$3 = new Vector3();
var _v2$2 = new Vector3();
var _v3$2 = new Vector3();
var _vab = new Vector3();
var _vac = new Vector3();
var _vbc = new Vector3();
var _vap = new Vector3();
var _vbp = new Vector3();
var _vcp = new Vector3();
var Triangle = class _Triangle {
  constructor(a2 = new Vector3(), b = new Vector3(), c4 = new Vector3()) {
    this.a = a2;
    this.b = b;
    this.c = c4;
  }
  static getNormal(a2, b, c4, target) {
    target.subVectors(c4, b);
    _v0$2.subVectors(a2, b);
    target.cross(_v0$2);
    const targetLengthSq = target.lengthSq();
    if (targetLengthSq > 0) {
      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
    }
    return target.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(point2, a2, b, c4, target) {
    _v0$2.subVectors(c4, a2);
    _v1$3.subVectors(b, a2);
    _v2$2.subVectors(point2, a2);
    const dot00 = _v0$2.dot(_v0$2);
    const dot01 = _v0$2.dot(_v1$3);
    const dot02 = _v0$2.dot(_v2$2);
    const dot11 = _v1$3.dot(_v1$3);
    const dot12 = _v1$3.dot(_v2$2);
    const denom = dot00 * dot11 - dot01 * dot01;
    if (denom === 0) {
      target.set(0, 0, 0);
      return null;
    }
    const invDenom = 1 / denom;
    const u5 = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v3 = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return target.set(1 - u5 - v3, v3, u5);
  }
  static containsPoint(point2, a2, b, c4) {
    if (this.getBarycoord(point2, a2, b, c4, _v3$2) === null) {
      return false;
    }
    return _v3$2.x >= 0 && _v3$2.y >= 0 && _v3$2.x + _v3$2.y <= 1;
  }
  static getInterpolation(point2, p1, p2, p3, v1, v22, v3, target) {
    if (this.getBarycoord(point2, p1, p2, p3, _v3$2) === null) {
      target.x = 0;
      target.y = 0;
      if ("z" in target) target.z = 0;
      if ("w" in target) target.w = 0;
      return null;
    }
    target.setScalar(0);
    target.addScaledVector(v1, _v3$2.x);
    target.addScaledVector(v22, _v3$2.y);
    target.addScaledVector(v3, _v3$2.z);
    return target;
  }
  static isFrontFacing(a2, b, c4, direction2) {
    _v0$2.subVectors(c4, b);
    _v1$3.subVectors(a2, b);
    return _v0$2.cross(_v1$3).dot(direction2) < 0 ? true : false;
  }
  set(a2, b, c4) {
    this.a.copy(a2);
    this.b.copy(b);
    this.c.copy(c4);
    return this;
  }
  setFromPointsAndIndices(points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  }
  setFromAttributeAndIndices(attribute2, i0, i1, i2) {
    this.a.fromBufferAttribute(attribute2, i0);
    this.b.fromBufferAttribute(attribute2, i1);
    this.c.fromBufferAttribute(attribute2, i2);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  }
  getArea() {
    _v0$2.subVectors(this.c, this.b);
    _v1$3.subVectors(this.a, this.b);
    return _v0$2.cross(_v1$3).length() * 0.5;
  }
  getMidpoint(target) {
    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(target) {
    return _Triangle.getNormal(this.a, this.b, this.c, target);
  }
  getPlane(target) {
    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(point2, target) {
    return _Triangle.getBarycoord(point2, this.a, this.b, this.c, target);
  }
  getInterpolation(point2, v1, v22, v3, target) {
    return _Triangle.getInterpolation(point2, this.a, this.b, this.c, v1, v22, v3, target);
  }
  containsPoint(point2) {
    return _Triangle.containsPoint(point2, this.a, this.b, this.c);
  }
  isFrontFacing(direction2) {
    return _Triangle.isFrontFacing(this.a, this.b, this.c, direction2);
  }
  intersectsBox(box) {
    return box.intersectsTriangle(this);
  }
  closestPointToPoint(p2, target) {
    const a2 = this.a, b = this.b, c4 = this.c;
    let v3, w4;
    _vab.subVectors(b, a2);
    _vac.subVectors(c4, a2);
    _vap.subVectors(p2, a2);
    const d1 = _vab.dot(_vap);
    const d2 = _vac.dot(_vap);
    if (d1 <= 0 && d2 <= 0) {
      return target.copy(a2);
    }
    _vbp.subVectors(p2, b);
    const d3 = _vab.dot(_vbp);
    const d4 = _vac.dot(_vbp);
    if (d3 >= 0 && d4 <= d3) {
      return target.copy(b);
    }
    const vc = d1 * d4 - d3 * d2;
    if (vc <= 0 && d1 >= 0 && d3 <= 0) {
      v3 = d1 / (d1 - d3);
      return target.copy(a2).addScaledVector(_vab, v3);
    }
    _vcp.subVectors(p2, c4);
    const d5 = _vab.dot(_vcp);
    const d6 = _vac.dot(_vcp);
    if (d6 >= 0 && d5 <= d6) {
      return target.copy(c4);
    }
    const vb = d5 * d2 - d1 * d6;
    if (vb <= 0 && d2 >= 0 && d6 <= 0) {
      w4 = d2 / (d2 - d6);
      return target.copy(a2).addScaledVector(_vac, w4);
    }
    const va = d3 * d6 - d5 * d4;
    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
      _vbc.subVectors(c4, b);
      w4 = (d4 - d3) / (d4 - d3 + (d5 - d6));
      return target.copy(b).addScaledVector(_vbc, w4);
    }
    const denom = 1 / (va + vb + vc);
    v3 = vb * denom;
    w4 = vc * denom;
    return target.copy(a2).addScaledVector(_vab, v3).addScaledVector(_vac, w4);
  }
  equals(triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
};
var _colorKeywords = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
var _hslA = { h: 0, s: 0, l: 0 };
var _hslB = { h: 0, s: 0, l: 0 };
function hue2rgb(p2, q2, t4) {
  if (t4 < 0) t4 += 1;
  if (t4 > 1) t4 -= 1;
  if (t4 < 1 / 6) return p2 + (q2 - p2) * 6 * t4;
  if (t4 < 1 / 2) return q2;
  if (t4 < 2 / 3) return p2 + (q2 - p2) * 6 * (2 / 3 - t4);
  return p2;
}
var Color = class {
  constructor(r2, g2, b) {
    this.isColor = true;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    return this.set(r2, g2, b);
  }
  set(r2, g2, b) {
    if (g2 === void 0 && b === void 0) {
      const value = r2;
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
    } else {
      this.setRGB(r2, g2, b);
    }
    return this;
  }
  setScalar(scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  }
  setHex(hex2, colorSpace = SRGBColorSpace) {
    hex2 = Math.floor(hex2);
    this.r = (hex2 >> 16 & 255) / 255;
    this.g = (hex2 >> 8 & 255) / 255;
    this.b = (hex2 & 255) / 255;
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setRGB(r2, g2, b, colorSpace = ColorManagement.workingColorSpace) {
    this.r = r2;
    this.g = g2;
    this.b = b;
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setHSL(h2, s2, l2, colorSpace = ColorManagement.workingColorSpace) {
    h2 = euclideanModulo(h2, 1);
    s2 = clamp(s2, 0, 1);
    l2 = clamp(l2, 0, 1);
    if (s2 === 0) {
      this.r = this.g = this.b = l2;
    } else {
      const p2 = l2 <= 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      const q2 = 2 * l2 - p2;
      this.r = hue2rgb(q2, p2, h2 + 1 / 3);
      this.g = hue2rgb(q2, p2, h2);
      this.b = hue2rgb(q2, p2, h2 - 1 / 3);
    }
    ColorManagement.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setStyle(style, colorSpace = SRGBColorSpace) {
    function handleAlpha(string) {
      if (string === void 0) return;
      if (parseFloat(string) < 1) {
        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
      }
    }
    let m2;
    if (m2 = /^(\w+)\(([^\)]*)\)/.exec(style)) {
      let color3;
      const name = m2[1];
      const components = m2[2];
      switch (name) {
        case "rgb":
        case "rgba":
          if (color3 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color3[4]);
            return this.setRGB(
              Math.min(255, parseInt(color3[1], 10)) / 255,
              Math.min(255, parseInt(color3[2], 10)) / 255,
              Math.min(255, parseInt(color3[3], 10)) / 255,
              colorSpace
            );
          }
          if (color3 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color3[4]);
            return this.setRGB(
              Math.min(100, parseInt(color3[1], 10)) / 100,
              Math.min(100, parseInt(color3[2], 10)) / 100,
              Math.min(100, parseInt(color3[3], 10)) / 100,
              colorSpace
            );
          }
          break;
        case "hsl":
        case "hsla":
          if (color3 = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color3[4]);
            return this.setHSL(
              parseFloat(color3[1]) / 360,
              parseFloat(color3[2]) / 100,
              parseFloat(color3[3]) / 100,
              colorSpace
            );
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + style);
      }
    } else if (m2 = /^\#([A-Fa-f\d]+)$/.exec(style)) {
      const hex2 = m2[1];
      const size = hex2.length;
      if (size === 3) {
        return this.setRGB(
          parseInt(hex2.charAt(0), 16) / 15,
          parseInt(hex2.charAt(1), 16) / 15,
          parseInt(hex2.charAt(2), 16) / 15,
          colorSpace
        );
      } else if (size === 6) {
        return this.setHex(parseInt(hex2, 16), colorSpace);
      } else {
        console.warn("THREE.Color: Invalid hex color " + style);
      }
    } else if (style && style.length > 0) {
      return this.setColorName(style, colorSpace);
    }
    return this;
  }
  setColorName(style, colorSpace = SRGBColorSpace) {
    const hex2 = _colorKeywords[style.toLowerCase()];
    if (hex2 !== void 0) {
      this.setHex(hex2, colorSpace);
    } else {
      console.warn("THREE.Color: Unknown color " + style);
    }
    return this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(color3) {
    this.r = color3.r;
    this.g = color3.g;
    this.b = color3.b;
    return this;
  }
  copySRGBToLinear(color3) {
    this.r = SRGBToLinear(color3.r);
    this.g = SRGBToLinear(color3.g);
    this.b = SRGBToLinear(color3.b);
    return this;
  }
  copyLinearToSRGB(color3) {
    this.r = LinearToSRGB(color3.r);
    this.g = LinearToSRGB(color3.g);
    this.b = LinearToSRGB(color3.b);
    return this;
  }
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  getHex(colorSpace = SRGBColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    return Math.round(clamp(_color.r * 255, 0, 255)) * 65536 + Math.round(clamp(_color.g * 255, 0, 255)) * 256 + Math.round(clamp(_color.b * 255, 0, 255));
  }
  getHexString(colorSpace = SRGBColorSpace) {
    return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
  }
  getHSL(target, colorSpace = ColorManagement.workingColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    const r2 = _color.r, g2 = _color.g, b = _color.b;
    const max4 = Math.max(r2, g2, b);
    const min4 = Math.min(r2, g2, b);
    let hue3, saturation2;
    const lightness = (min4 + max4) / 2;
    if (min4 === max4) {
      hue3 = 0;
      saturation2 = 0;
    } else {
      const delta = max4 - min4;
      saturation2 = lightness <= 0.5 ? delta / (max4 + min4) : delta / (2 - max4 - min4);
      switch (max4) {
        case r2:
          hue3 = (g2 - b) / delta + (g2 < b ? 6 : 0);
          break;
        case g2:
          hue3 = (b - r2) / delta + 2;
          break;
        case b:
          hue3 = (r2 - g2) / delta + 4;
          break;
      }
      hue3 /= 6;
    }
    target.h = hue3;
    target.s = saturation2;
    target.l = lightness;
    return target;
  }
  getRGB(target, colorSpace = ColorManagement.workingColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    target.r = _color.r;
    target.g = _color.g;
    target.b = _color.b;
    return target;
  }
  getStyle(colorSpace = SRGBColorSpace) {
    ColorManagement.fromWorkingColorSpace(_color.copy(this), colorSpace);
    const r2 = _color.r, g2 = _color.g, b = _color.b;
    if (colorSpace !== SRGBColorSpace) {
      return `color(${colorSpace} ${r2.toFixed(3)} ${g2.toFixed(3)} ${b.toFixed(3)})`;
    }
    return `rgb(${Math.round(r2 * 255)},${Math.round(g2 * 255)},${Math.round(b * 255)})`;
  }
  offsetHSL(h2, s2, l2) {
    this.getHSL(_hslA);
    return this.setHSL(_hslA.h + h2, _hslA.s + s2, _hslA.l + l2);
  }
  add(color3) {
    this.r += color3.r;
    this.g += color3.g;
    this.b += color3.b;
    return this;
  }
  addColors(color1, color22) {
    this.r = color1.r + color22.r;
    this.g = color1.g + color22.g;
    this.b = color1.b + color22.b;
    return this;
  }
  addScalar(s2) {
    this.r += s2;
    this.g += s2;
    this.b += s2;
    return this;
  }
  sub(color3) {
    this.r = Math.max(0, this.r - color3.r);
    this.g = Math.max(0, this.g - color3.g);
    this.b = Math.max(0, this.b - color3.b);
    return this;
  }
  multiply(color3) {
    this.r *= color3.r;
    this.g *= color3.g;
    this.b *= color3.b;
    return this;
  }
  multiplyScalar(s2) {
    this.r *= s2;
    this.g *= s2;
    this.b *= s2;
    return this;
  }
  lerp(color3, alpha) {
    this.r += (color3.r - this.r) * alpha;
    this.g += (color3.g - this.g) * alpha;
    this.b += (color3.b - this.b) * alpha;
    return this;
  }
  lerpColors(color1, color22, alpha) {
    this.r = color1.r + (color22.r - color1.r) * alpha;
    this.g = color1.g + (color22.g - color1.g) * alpha;
    this.b = color1.b + (color22.b - color1.b) * alpha;
    return this;
  }
  lerpHSL(color3, alpha) {
    this.getHSL(_hslA);
    color3.getHSL(_hslB);
    const h2 = lerp(_hslA.h, _hslB.h, alpha);
    const s2 = lerp(_hslA.s, _hslB.s, alpha);
    const l2 = lerp(_hslA.l, _hslB.l, alpha);
    this.setHSL(h2, s2, l2);
    return this;
  }
  setFromVector3(v3) {
    this.r = v3.x;
    this.g = v3.y;
    this.b = v3.z;
    return this;
  }
  applyMatrix3(m2) {
    const r2 = this.r, g2 = this.g, b = this.b;
    const e3 = m2.elements;
    this.r = e3[0] * r2 + e3[3] * g2 + e3[6] * b;
    this.g = e3[1] * r2 + e3[4] * g2 + e3[7] * b;
    this.b = e3[2] * r2 + e3[5] * g2 + e3[8] * b;
    return this;
  }
  equals(c4) {
    return c4.r === this.r && c4.g === this.g && c4.b === this.b;
  }
  fromArray(array3, offset = 0) {
    this.r = array3[offset];
    this.g = array3[offset + 1];
    this.b = array3[offset + 2];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.r;
    array3[offset + 1] = this.g;
    array3[offset + 2] = this.b;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.r = attribute2.getX(index7);
    this.g = attribute2.getY(index7);
    this.b = attribute2.getZ(index7);
    return this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r;
    yield this.g;
    yield this.b;
  }
};
var _color = new Color();
Color.NAMES = _colorKeywords;
var _materialId = 0;
var Material = class extends EventDispatcher {
  constructor() {
    super();
    this.isMaterial = true;
    Object.defineProperty(this, "id", { value: _materialId++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "Material";
    this.blending = NormalBlending;
    this.side = FrontSide;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.alphaHash = false;
    this.blendSrc = SrcAlphaFactor;
    this.blendDst = OneMinusSrcAlphaFactor;
    this.blendEquation = AddEquation;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.blendColor = new Color(0, 0, 0);
    this.blendAlpha = 0;
    this.depthFunc = LessEqualDepth;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = AlwaysStencilFunc;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = KeepStencilOp;
    this.stencilZFail = KeepStencilOp;
    this.stencilZPass = KeepStencilOp;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaToCoverage = false;
    this.premultipliedAlpha = false;
    this.forceSinglePass = false;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
    this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(value) {
    if (this._alphaTest > 0 !== value > 0) {
      this.version++;
    }
    this._alphaTest = value;
  }
  // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(values) {
    if (values === void 0) return;
    for (const key in values) {
      const newValue = values[key];
      if (newValue === void 0) {
        console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
        continue;
      }
      const currentValue = this[key];
      if (currentValue === void 0) {
        console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
        continue;
      }
      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (isRootObject) {
      meta = {
        textures: {},
        images: {}
      };
    }
    const data = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (this.color && this.color.isColor) data.color = this.color.getHex();
    if (this.roughness !== void 0) data.roughness = this.roughness;
    if (this.metalness !== void 0) data.metalness = this.metalness;
    if (this.sheen !== void 0) data.sheen = this.sheen;
    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
    if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
    if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
    if (this.shininess !== void 0) data.shininess = this.shininess;
    if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.dispersion !== void 0) data.dispersion = this.dispersion;
    if (this.iridescence !== void 0) data.iridescence = this.iridescence;
    if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
    if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
    if (this.iridescenceMap && this.iridescenceMap.isTexture) {
      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
    }
    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
    }
    if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
    if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
    if (this.anisotropyMap && this.anisotropyMap.isTexture) {
      data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
    }
    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture) {
      data.lightMap = this.lightMap.toJSON(meta).uuid;
      data.lightMapIntensity = this.lightMapIntensity;
    }
    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      if (this.combine !== void 0) data.combine = this.combine;
    }
    if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
    if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
    if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
    if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }
    if (this.transmission !== void 0) data.transmission = this.transmission;
    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
    if (this.thickness !== void 0) data.thickness = this.thickness;
    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
    if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
    if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
    if (this.size !== void 0) data.size = this.size;
    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
    if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending) data.blending = this.blending;
    if (this.side !== FrontSide) data.side = this.side;
    if (this.vertexColors === true) data.vertexColors = true;
    if (this.opacity < 1) data.opacity = this.opacity;
    if (this.transparent === true) data.transparent = true;
    if (this.blendSrc !== SrcAlphaFactor) data.blendSrc = this.blendSrc;
    if (this.blendDst !== OneMinusSrcAlphaFactor) data.blendDst = this.blendDst;
    if (this.blendEquation !== AddEquation) data.blendEquation = this.blendEquation;
    if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
    if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
    if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
    if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
    if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
    if (this.depthFunc !== LessEqualDepth) data.depthFunc = this.depthFunc;
    if (this.depthTest === false) data.depthTest = this.depthTest;
    if (this.depthWrite === false) data.depthWrite = this.depthWrite;
    if (this.colorWrite === false) data.colorWrite = this.colorWrite;
    if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
    if (this.stencilFunc !== AlwaysStencilFunc) data.stencilFunc = this.stencilFunc;
    if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
    if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
    if (this.stencilFail !== KeepStencilOp) data.stencilFail = this.stencilFail;
    if (this.stencilZFail !== KeepStencilOp) data.stencilZFail = this.stencilZFail;
    if (this.stencilZPass !== KeepStencilOp) data.stencilZPass = this.stencilZPass;
    if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
    if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
    if (this.polygonOffset === true) data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
    if (this.dashSize !== void 0) data.dashSize = this.dashSize;
    if (this.gapSize !== void 0) data.gapSize = this.gapSize;
    if (this.scale !== void 0) data.scale = this.scale;
    if (this.dithering === true) data.dithering = true;
    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
    if (this.alphaHash === true) data.alphaHash = true;
    if (this.alphaToCoverage === true) data.alphaToCoverage = true;
    if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
    if (this.forceSinglePass === true) data.forceSinglePass = true;
    if (this.wireframe === true) data.wireframe = true;
    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.flatShading === true) data.flatShading = true;
    if (this.visible === false) data.visible = false;
    if (this.toneMapped === false) data.toneMapped = false;
    if (this.fog === false) data.fog = false;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    function extractFromCache(cache2) {
      const values = [];
      for (const key in cache2) {
        const data2 = cache2[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRootObject) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
    }
    return data;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.name = source.name;
    this.blending = source.blending;
    this.side = source.side;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.blendColor.copy(source.blendColor);
    this.blendAlpha = source.blendAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.stencilWriteMask = source.stencilWriteMask;
    this.stencilFunc = source.stencilFunc;
    this.stencilRef = source.stencilRef;
    this.stencilFuncMask = source.stencilFuncMask;
    this.stencilFail = source.stencilFail;
    this.stencilZFail = source.stencilZFail;
    this.stencilZPass = source.stencilZPass;
    this.stencilWrite = source.stencilWrite;
    const srcPlanes = source.clippingPlanes;
    let dstPlanes = null;
    if (srcPlanes !== null) {
      const n2 = srcPlanes.length;
      dstPlanes = new Array(n2);
      for (let i2 = 0; i2 !== n2; ++i2) {
        dstPlanes[i2] = srcPlanes[i2].clone();
      }
    }
    this.clippingPlanes = dstPlanes;
    this.clipIntersection = source.clipIntersection;
    this.clipShadows = source.clipShadows;
    this.shadowSide = source.shadowSide;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.alphaHash = source.alphaHash;
    this.alphaToCoverage = source.alphaToCoverage;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.forceSinglePass = source.forceSinglePass;
    this.visible = source.visible;
    this.toneMapped = source.toneMapped;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  onBuild() {
    console.warn("Material: onBuild() has been removed.");
  }
};
var MeshBasicMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isMeshBasicMaterial = true;
    this.type = "MeshBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler();
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.fog = source.fog;
    return this;
  }
};
var _tables = _generateTables();
function _generateTables() {
  const buffer2 = new ArrayBuffer(4);
  const floatView = new Float32Array(buffer2);
  const uint32View = new Uint32Array(buffer2);
  const baseTable = new Uint32Array(512);
  const shiftTable = new Uint32Array(512);
  for (let i2 = 0; i2 < 256; ++i2) {
    const e3 = i2 - 127;
    if (e3 < -27) {
      baseTable[i2] = 0;
      baseTable[i2 | 256] = 32768;
      shiftTable[i2] = 24;
      shiftTable[i2 | 256] = 24;
    } else if (e3 < -14) {
      baseTable[i2] = 1024 >> -e3 - 14;
      baseTable[i2 | 256] = 1024 >> -e3 - 14 | 32768;
      shiftTable[i2] = -e3 - 1;
      shiftTable[i2 | 256] = -e3 - 1;
    } else if (e3 <= 15) {
      baseTable[i2] = e3 + 15 << 10;
      baseTable[i2 | 256] = e3 + 15 << 10 | 32768;
      shiftTable[i2] = 13;
      shiftTable[i2 | 256] = 13;
    } else if (e3 < 128) {
      baseTable[i2] = 31744;
      baseTable[i2 | 256] = 64512;
      shiftTable[i2] = 24;
      shiftTable[i2 | 256] = 24;
    } else {
      baseTable[i2] = 31744;
      baseTable[i2 | 256] = 64512;
      shiftTable[i2] = 13;
      shiftTable[i2 | 256] = 13;
    }
  }
  const mantissaTable = new Uint32Array(2048);
  const exponentTable = new Uint32Array(64);
  const offsetTable = new Uint32Array(64);
  for (let i2 = 1; i2 < 1024; ++i2) {
    let m2 = i2 << 13;
    let e3 = 0;
    while ((m2 & 8388608) === 0) {
      m2 <<= 1;
      e3 -= 8388608;
    }
    m2 &= ~8388608;
    e3 += 947912704;
    mantissaTable[i2] = m2 | e3;
  }
  for (let i2 = 1024; i2 < 2048; ++i2) {
    mantissaTable[i2] = 939524096 + (i2 - 1024 << 13);
  }
  for (let i2 = 1; i2 < 31; ++i2) {
    exponentTable[i2] = i2 << 23;
  }
  exponentTable[31] = 1199570944;
  exponentTable[32] = 2147483648;
  for (let i2 = 33; i2 < 63; ++i2) {
    exponentTable[i2] = 2147483648 + (i2 - 32 << 23);
  }
  exponentTable[63] = 3347054592;
  for (let i2 = 1; i2 < 64; ++i2) {
    if (i2 !== 32) {
      offsetTable[i2] = 1024;
    }
  }
  return {
    floatView,
    uint32View,
    baseTable,
    shiftTable,
    mantissaTable,
    exponentTable,
    offsetTable
  };
}
var _vector$9 = new Vector3();
var _vector2$1 = new Vector2();
var BufferAttribute = class {
  constructor(array3, itemSize, normalized = false) {
    if (Array.isArray(array3)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.isBufferAttribute = true;
    this.name = "";
    this.array = array3;
    this.itemSize = itemSize;
    this.count = array3 !== void 0 ? array3.length / itemSize : 0;
    this.normalized = normalized;
    this.usage = StaticDrawUsage;
    this._updateRange = { offset: 0, count: -1 };
    this.updateRanges = [];
    this.gpuType = FloatType;
    this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  get updateRange() {
    warnOnce("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");
    return this._updateRange;
  }
  setUsage(value) {
    this.usage = value;
    return this;
  }
  addUpdateRange(start, count2) {
    this.updateRanges.push({ start, count: count2 });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    this.gpuType = source.gpuType;
    return this;
  }
  copyAt(index1, attribute2, index22) {
    index1 *= this.itemSize;
    index22 *= attribute2.itemSize;
    for (let i2 = 0, l2 = this.itemSize; i2 < l2; i2++) {
      this.array[index1 + i2] = attribute2.array[index22 + i2];
    }
    return this;
  }
  copyArray(array3) {
    this.array.set(array3);
    return this;
  }
  applyMatrix3(m2) {
    if (this.itemSize === 2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector2$1.fromBufferAttribute(this, i2);
        _vector2$1.applyMatrix3(m2);
        this.setXY(i2, _vector2$1.x, _vector2$1.y);
      }
    } else if (this.itemSize === 3) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$9.fromBufferAttribute(this, i2);
        _vector$9.applyMatrix3(m2);
        this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
      }
    }
    return this;
  }
  applyMatrix4(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$9.fromBufferAttribute(this, i2);
      _vector$9.applyMatrix4(m2);
      this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  applyNormalMatrix(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$9.fromBufferAttribute(this, i2);
      _vector$9.applyNormalMatrix(m2);
      this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  transformDirection(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$9.fromBufferAttribute(this, i2);
      _vector$9.transformDirection(m2);
      this.setXYZ(i2, _vector$9.x, _vector$9.y, _vector$9.z);
    }
    return this;
  }
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  getComponent(index7, component) {
    let value = this.array[index7 * this.itemSize + component];
    if (this.normalized) value = denormalize(value, this.array);
    return value;
  }
  setComponent(index7, component, value) {
    if (this.normalized) value = normalize(value, this.array);
    this.array[index7 * this.itemSize + component] = value;
    return this;
  }
  getX(index7) {
    let x2 = this.array[index7 * this.itemSize];
    if (this.normalized) x2 = denormalize(x2, this.array);
    return x2;
  }
  setX(index7, x2) {
    if (this.normalized) x2 = normalize(x2, this.array);
    this.array[index7 * this.itemSize] = x2;
    return this;
  }
  getY(index7) {
    let y2 = this.array[index7 * this.itemSize + 1];
    if (this.normalized) y2 = denormalize(y2, this.array);
    return y2;
  }
  setY(index7, y2) {
    if (this.normalized) y2 = normalize(y2, this.array);
    this.array[index7 * this.itemSize + 1] = y2;
    return this;
  }
  getZ(index7) {
    let z2 = this.array[index7 * this.itemSize + 2];
    if (this.normalized) z2 = denormalize(z2, this.array);
    return z2;
  }
  setZ(index7, z2) {
    if (this.normalized) z2 = normalize(z2, this.array);
    this.array[index7 * this.itemSize + 2] = z2;
    return this;
  }
  getW(index7) {
    let w4 = this.array[index7 * this.itemSize + 3];
    if (this.normalized) w4 = denormalize(w4, this.array);
    return w4;
  }
  setW(index7, w4) {
    if (this.normalized) w4 = normalize(w4, this.array);
    this.array[index7 * this.itemSize + 3] = w4;
    return this;
  }
  setXY(index7, x2, y2) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize(x2, this.array);
      y2 = normalize(y2, this.array);
    }
    this.array[index7 + 0] = x2;
    this.array[index7 + 1] = y2;
    return this;
  }
  setXYZ(index7, x2, y2, z2) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize(x2, this.array);
      y2 = normalize(y2, this.array);
      z2 = normalize(z2, this.array);
    }
    this.array[index7 + 0] = x2;
    this.array[index7 + 1] = y2;
    this.array[index7 + 2] = z2;
    return this;
  }
  setXYZW(index7, x2, y2, z2, w4) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize(x2, this.array);
      y2 = normalize(y2, this.array);
      z2 = normalize(z2, this.array);
      w4 = normalize(w4, this.array);
    }
    this.array[index7 + 0] = x2;
    this.array[index7 + 1] = y2;
    this.array[index7 + 2] = z2;
    this.array[index7 + 3] = w4;
    return this;
  }
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const data = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    if (this.name !== "") data.name = this.name;
    if (this.usage !== StaticDrawUsage) data.usage = this.usage;
    return data;
  }
};
var Uint16BufferAttribute = class extends BufferAttribute {
  constructor(array3, itemSize, normalized) {
    super(new Uint16Array(array3), itemSize, normalized);
  }
};
var Uint32BufferAttribute = class extends BufferAttribute {
  constructor(array3, itemSize, normalized) {
    super(new Uint32Array(array3), itemSize, normalized);
  }
};
var Float32BufferAttribute = class extends BufferAttribute {
  constructor(array3, itemSize, normalized) {
    super(new Float32Array(array3), itemSize, normalized);
  }
};
var _id$2 = 0;
var _m1$2 = new Matrix4();
var _obj = new Object3D();
var _offset = new Vector3();
var _box$2 = new Box3();
var _boxMorphTargets = new Box3();
var _vector$8 = new Vector3();
var BufferGeometry = class _BufferGeometry extends EventDispatcher {
  constructor() {
    super();
    this.isBufferGeometry = true;
    Object.defineProperty(this, "id", { value: _id$2++ });
    this.uuid = generateUUID();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = { start: 0, count: Infinity };
    this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(index7) {
    if (Array.isArray(index7)) {
      this.index = new (arrayNeedsUint32(index7) ? Uint32BufferAttribute : Uint16BufferAttribute)(index7, 1);
    } else {
      this.index = index7;
    }
    return this;
  }
  getAttribute(name) {
    return this.attributes[name];
  }
  setAttribute(name, attribute2) {
    this.attributes[name] = attribute2;
    return this;
  }
  deleteAttribute(name) {
    delete this.attributes[name];
    return this;
  }
  hasAttribute(name) {
    return this.attributes[name] !== void 0;
  }
  addGroup(start, count2, materialIndex = 0) {
    this.groups.push({
      start,
      count: count2,
      materialIndex
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(start, count2) {
    this.drawRange.start = start;
    this.drawRange.count = count2;
  }
  applyMatrix4(matrix) {
    const position = this.attributes.position;
    if (position !== void 0) {
      position.applyMatrix4(matrix);
      position.needsUpdate = true;
    }
    const normal2 = this.attributes.normal;
    if (normal2 !== void 0) {
      const normalMatrix = new Matrix3().getNormalMatrix(matrix);
      normal2.applyNormalMatrix(normalMatrix);
      normal2.needsUpdate = true;
    }
    const tangent = this.attributes.tangent;
    if (tangent !== void 0) {
      tangent.transformDirection(matrix);
      tangent.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  applyQuaternion(q2) {
    _m1$2.makeRotationFromQuaternion(q2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  rotateX(angle2) {
    _m1$2.makeRotationX(angle2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  rotateY(angle2) {
    _m1$2.makeRotationY(angle2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  rotateZ(angle2) {
    _m1$2.makeRotationZ(angle2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  translate(x2, y2, z2) {
    _m1$2.makeTranslation(x2, y2, z2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  scale(x2, y2, z2) {
    _m1$2.makeScale(x2, y2, z2);
    this.applyMatrix4(_m1$2);
    return this;
  }
  lookAt(vector) {
    _obj.lookAt(vector);
    _obj.updateMatrix();
    this.applyMatrix4(_obj.matrix);
    return this;
  }
  center() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset).negate();
    this.translate(_offset.x, _offset.y, _offset.z);
    return this;
  }
  setFromPoints(points) {
    const position = [];
    for (let i2 = 0, l2 = points.length; i2 < l2; i2++) {
      const point2 = points[i2];
      position.push(point2.x, point2.y, point2.z || 0);
    }
    this.setAttribute("position", new Float32BufferAttribute(position, 3));
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
      this.boundingBox.set(
        new Vector3(-Infinity, -Infinity, -Infinity),
        new Vector3(Infinity, Infinity, Infinity)
      );
      return;
    }
    if (position !== void 0) {
      this.boundingBox.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _box$2.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$8.addVectors(this.boundingBox.min, _box$2.min);
            this.boundingBox.expandByPoint(_vector$8);
            _vector$8.addVectors(this.boundingBox.max, _box$2.max);
            this.boundingBox.expandByPoint(_vector$8);
          } else {
            this.boundingBox.expandByPoint(_box$2.min);
            this.boundingBox.expandByPoint(_box$2.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
      this.boundingSphere.set(new Vector3(), Infinity);
      return;
    }
    if (position) {
      const center = this.boundingSphere.center;
      _box$2.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _boxMorphTargets.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$8.addVectors(_box$2.min, _boxMorphTargets.min);
            _box$2.expandByPoint(_vector$8);
            _vector$8.addVectors(_box$2.max, _boxMorphTargets.max);
            _box$2.expandByPoint(_vector$8);
          } else {
            _box$2.expandByPoint(_boxMorphTargets.min);
            _box$2.expandByPoint(_boxMorphTargets.max);
          }
        }
      }
      _box$2.getCenter(center);
      let maxRadiusSq = 0;
      for (let i2 = 0, il = position.count; i2 < il; i2++) {
        _vector$8.fromBufferAttribute(position, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
      }
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          const morphTargetsRelative = this.morphTargetsRelative;
          for (let j2 = 0, jl = morphAttribute.count; j2 < jl; j2++) {
            _vector$8.fromBufferAttribute(morphAttribute, j2);
            if (morphTargetsRelative) {
              _offset.fromBufferAttribute(position, j2);
              _vector$8.add(_offset);
            }
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$8));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  }
  computeTangents() {
    const index7 = this.index;
    const attributes = this.attributes;
    if (index7 === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const positionAttribute = attributes.position;
    const normalAttribute = attributes.normal;
    const uvAttribute = attributes.uv;
    if (this.hasAttribute("tangent") === false) {
      this.setAttribute("tangent", new BufferAttribute(new Float32Array(4 * positionAttribute.count), 4));
    }
    const tangentAttribute = this.getAttribute("tangent");
    const tan1 = [], tan22 = [];
    for (let i2 = 0; i2 < positionAttribute.count; i2++) {
      tan1[i2] = new Vector3();
      tan22[i2] = new Vector3();
    }
    const vA = new Vector3(), vB = new Vector3(), vC = new Vector3(), uvA = new Vector2(), uvB = new Vector2(), uvC = new Vector2(), sdir = new Vector3(), tdir = new Vector3();
    function handleTriangle(a2, b, c4) {
      vA.fromBufferAttribute(positionAttribute, a2);
      vB.fromBufferAttribute(positionAttribute, b);
      vC.fromBufferAttribute(positionAttribute, c4);
      uvA.fromBufferAttribute(uvAttribute, a2);
      uvB.fromBufferAttribute(uvAttribute, b);
      uvC.fromBufferAttribute(uvAttribute, c4);
      vB.sub(vA);
      vC.sub(vA);
      uvB.sub(uvA);
      uvC.sub(uvA);
      const r2 = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
      if (!isFinite(r2)) return;
      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r2);
      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r2);
      tan1[a2].add(sdir);
      tan1[b].add(sdir);
      tan1[c4].add(sdir);
      tan22[a2].add(tdir);
      tan22[b].add(tdir);
      tan22[c4].add(tdir);
    }
    let groups2 = this.groups;
    if (groups2.length === 0) {
      groups2 = [{
        start: 0,
        count: index7.count
      }];
    }
    for (let i2 = 0, il = groups2.length; i2 < il; ++i2) {
      const group2 = groups2[i2];
      const start = group2.start;
      const count2 = group2.count;
      for (let j2 = start, jl = start + count2; j2 < jl; j2 += 3) {
        handleTriangle(
          index7.getX(j2 + 0),
          index7.getX(j2 + 1),
          index7.getX(j2 + 2)
        );
      }
    }
    const tmp3 = new Vector3(), tmp22 = new Vector3();
    const n2 = new Vector3(), n22 = new Vector3();
    function handleVertex(v3) {
      n2.fromBufferAttribute(normalAttribute, v3);
      n22.copy(n2);
      const t4 = tan1[v3];
      tmp3.copy(t4);
      tmp3.sub(n2.multiplyScalar(n2.dot(t4))).normalize();
      tmp22.crossVectors(n22, t4);
      const test = tmp22.dot(tan22[v3]);
      const w4 = test < 0 ? -1 : 1;
      tangentAttribute.setXYZW(v3, tmp3.x, tmp3.y, tmp3.z, w4);
    }
    for (let i2 = 0, il = groups2.length; i2 < il; ++i2) {
      const group2 = groups2[i2];
      const start = group2.start;
      const count2 = group2.count;
      for (let j2 = start, jl = start + count2; j2 < jl; j2 += 3) {
        handleVertex(index7.getX(j2 + 0));
        handleVertex(index7.getX(j2 + 1));
        handleVertex(index7.getX(j2 + 2));
      }
    }
  }
  computeVertexNormals() {
    const index7 = this.index;
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute !== void 0) {
      let normalAttribute = this.getAttribute("normal");
      if (normalAttribute === void 0) {
        normalAttribute = new BufferAttribute(new Float32Array(positionAttribute.count * 3), 3);
        this.setAttribute("normal", normalAttribute);
      } else {
        for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
          normalAttribute.setXYZ(i2, 0, 0, 0);
        }
      }
      const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
      const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
      const cb = new Vector3(), ab4 = new Vector3();
      if (index7) {
        for (let i2 = 0, il = index7.count; i2 < il; i2 += 3) {
          const vA = index7.getX(i2 + 0);
          const vB = index7.getX(i2 + 1);
          const vC = index7.getX(i2 + 2);
          pA.fromBufferAttribute(positionAttribute, vA);
          pB.fromBufferAttribute(positionAttribute, vB);
          pC.fromBufferAttribute(positionAttribute, vC);
          cb.subVectors(pC, pB);
          ab4.subVectors(pA, pB);
          cb.cross(ab4);
          nA.fromBufferAttribute(normalAttribute, vA);
          nB.fromBufferAttribute(normalAttribute, vB);
          nC.fromBufferAttribute(normalAttribute, vC);
          nA.add(cb);
          nB.add(cb);
          nC.add(cb);
          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
        }
      } else {
        for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
          pA.fromBufferAttribute(positionAttribute, i2 + 0);
          pB.fromBufferAttribute(positionAttribute, i2 + 1);
          pC.fromBufferAttribute(positionAttribute, i2 + 2);
          cb.subVectors(pC, pB);
          ab4.subVectors(pA, pB);
          cb.cross(ab4);
          normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
        }
      }
      this.normalizeNormals();
      normalAttribute.needsUpdate = true;
    }
  }
  normalizeNormals() {
    const normals = this.attributes.normal;
    for (let i2 = 0, il = normals.count; i2 < il; i2++) {
      _vector$8.fromBufferAttribute(normals, i2);
      _vector$8.normalize();
      normals.setXYZ(i2, _vector$8.x, _vector$8.y, _vector$8.z);
    }
  }
  toNonIndexed() {
    function convertBufferAttribute(attribute2, indices2) {
      const array3 = attribute2.array;
      const itemSize = attribute2.itemSize;
      const normalized = attribute2.normalized;
      const array22 = new array3.constructor(indices2.length * itemSize);
      let index7 = 0, index22 = 0;
      for (let i2 = 0, l2 = indices2.length; i2 < l2; i2++) {
        if (attribute2.isInterleavedBufferAttribute) {
          index7 = indices2[i2] * attribute2.data.stride + attribute2.offset;
        } else {
          index7 = indices2[i2] * itemSize;
        }
        for (let j2 = 0; j2 < itemSize; j2++) {
          array22[index22++] = array3[index7++];
        }
      }
      return new BufferAttribute(array22, itemSize, normalized);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
      return this;
    }
    const geometry2 = new _BufferGeometry();
    const indices = this.index.array;
    const attributes = this.attributes;
    for (const name in attributes) {
      const attribute2 = attributes[name];
      const newAttribute = convertBufferAttribute(attribute2, indices);
      geometry2.setAttribute(name, newAttribute);
    }
    const morphAttributes = this.morphAttributes;
    for (const name in morphAttributes) {
      const morphArray = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
        const attribute2 = morphAttribute[i2];
        const newAttribute = convertBufferAttribute(attribute2, indices);
        morphArray.push(newAttribute);
      }
      geometry2.morphAttributes[name] = morphArray;
    }
    geometry2.morphTargetsRelative = this.morphTargetsRelative;
    const groups2 = this.groups;
    for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
      const group2 = groups2[i2];
      geometry2.addGroup(group2.start, group2.count, group2.materialIndex);
    }
    return geometry2;
  }
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0) data[key] = parameters[key];
      }
      return data;
    }
    data.data = { attributes: {} };
    const index7 = this.index;
    if (index7 !== null) {
      data.data.index = {
        type: index7.array.constructor.name,
        array: Array.prototype.slice.call(index7.array)
      };
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      const attribute2 = attributes[key];
      data.data.attributes[key] = attribute2.toJSON(data.data);
    }
    const morphAttributes = {};
    let hasMorphAttributes = false;
    for (const key in this.morphAttributes) {
      const attributeArray = this.morphAttributes[key];
      const array3 = [];
      for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
        const attribute2 = attributeArray[i2];
        array3.push(attribute2.toJSON(data.data));
      }
      if (array3.length > 0) {
        morphAttributes[key] = array3;
        hasMorphAttributes = true;
      }
    }
    if (hasMorphAttributes) {
      data.data.morphAttributes = morphAttributes;
      data.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const groups2 = this.groups;
    if (groups2.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups2));
    }
    const boundingSphere = this.boundingSphere;
    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }
    return data;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const data = {};
    this.name = source.name;
    const index7 = source.index;
    if (index7 !== null) {
      this.setIndex(index7.clone(data));
    }
    const attributes = source.attributes;
    for (const name in attributes) {
      const attribute2 = attributes[name];
      this.setAttribute(name, attribute2.clone(data));
    }
    const morphAttributes = source.morphAttributes;
    for (const name in morphAttributes) {
      const array3 = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, l2 = morphAttribute.length; i2 < l2; i2++) {
        array3.push(morphAttribute[i2].clone(data));
      }
      this.morphAttributes[name] = array3;
    }
    this.morphTargetsRelative = source.morphTargetsRelative;
    const groups2 = source.groups;
    for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
      const group2 = groups2[i2];
      this.addGroup(group2.start, group2.count, group2.materialIndex);
    }
    const boundingBox2 = source.boundingBox;
    if (boundingBox2 !== null) {
      this.boundingBox = boundingBox2.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count;
    this.userData = source.userData;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var _inverseMatrix$3 = new Matrix4();
var _ray$3 = new Ray();
var _sphere$6 = new Sphere();
var _sphereHitAt = new Vector3();
var _vA$1 = new Vector3();
var _vB$1 = new Vector3();
var _vC$1 = new Vector3();
var _tempA = new Vector3();
var _morphA = new Vector3();
var _uvA$1 = new Vector2();
var _uvB$1 = new Vector2();
var _uvC$1 = new Vector2();
var _normalA = new Vector3();
var _normalB = new Vector3();
var _normalC = new Vector3();
var _intersectionPoint = new Vector3();
var _intersectionPointWorld = new Vector3();
var Mesh = class extends Object3D {
  constructor(geometry = new BufferGeometry(), material = new MeshBasicMaterial()) {
    super();
    this.isMesh = true;
    this.type = "Mesh";
    this.geometry = geometry;
    this.material = material;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }
    if (source.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  updateMorphTargets() {
    const geometry = this.geometry;
    const morphAttributes = geometry.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
          const name = morphAttribute[m2].name || String(m2);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m2;
        }
      }
    }
  }
  getVertexPosition(index7, target) {
    const geometry = this.geometry;
    const position = geometry.attributes.position;
    const morphPosition = geometry.morphAttributes.position;
    const morphTargetsRelative = geometry.morphTargetsRelative;
    target.fromBufferAttribute(position, index7);
    const morphInfluences = this.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
      _morphA.set(0, 0, 0);
      for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
        const influence = morphInfluences[i2];
        const morphAttribute = morphPosition[i2];
        if (influence === 0) continue;
        _tempA.fromBufferAttribute(morphAttribute, index7);
        if (morphTargetsRelative) {
          _morphA.addScaledVector(_tempA, influence);
        } else {
          _morphA.addScaledVector(_tempA.sub(target), influence);
        }
      }
      target.add(_morphA);
    }
    return target;
  }
  raycast(raycaster, intersects4) {
    const geometry = this.geometry;
    const material = this.material;
    const matrixWorld = this.matrixWorld;
    if (material === void 0) return;
    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
    _sphere$6.copy(geometry.boundingSphere);
    _sphere$6.applyMatrix4(matrixWorld);
    _ray$3.copy(raycaster.ray).recast(raycaster.near);
    if (_sphere$6.containsPoint(_ray$3.origin) === false) {
      if (_ray$3.intersectSphere(_sphere$6, _sphereHitAt) === null) return;
      if (_ray$3.origin.distanceToSquared(_sphereHitAt) > (raycaster.far - raycaster.near) ** 2) return;
    }
    _inverseMatrix$3.copy(matrixWorld).invert();
    _ray$3.copy(raycaster.ray).applyMatrix4(_inverseMatrix$3);
    if (geometry.boundingBox !== null) {
      if (_ray$3.intersectsBox(geometry.boundingBox) === false) return;
    }
    this._computeIntersections(raycaster, intersects4, _ray$3);
  }
  _computeIntersections(raycaster, intersects4, rayLocalSpace) {
    let intersection2;
    const geometry = this.geometry;
    const material = this.material;
    const index7 = geometry.index;
    const position = geometry.attributes.position;
    const uv2 = geometry.attributes.uv;
    const uv1 = geometry.attributes.uv1;
    const normal2 = geometry.attributes.normal;
    const groups2 = geometry.groups;
    const drawRange = geometry.drawRange;
    if (index7 !== null) {
      if (Array.isArray(material)) {
        for (let i2 = 0, il = groups2.length; i2 < il; i2++) {
          const group2 = groups2[i2];
          const groupMaterial = material[group2.materialIndex];
          const start = Math.max(group2.start, drawRange.start);
          const end = Math.min(index7.count, Math.min(group2.start + group2.count, drawRange.start + drawRange.count));
          for (let j2 = start, jl = end; j2 < jl; j2 += 3) {
            const a2 = index7.getX(j2);
            const b = index7.getX(j2 + 1);
            const c4 = index7.getX(j2 + 2);
            intersection2 = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
            if (intersection2) {
              intersection2.faceIndex = Math.floor(j2 / 3);
              intersection2.face.materialIndex = group2.materialIndex;
              intersects4.push(intersection2);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(index7.count, drawRange.start + drawRange.count);
        for (let i2 = start, il = end; i2 < il; i2 += 3) {
          const a2 = index7.getX(i2);
          const b = index7.getX(i2 + 1);
          const c4 = index7.getX(i2 + 2);
          intersection2 = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
          if (intersection2) {
            intersection2.faceIndex = Math.floor(i2 / 3);
            intersects4.push(intersection2);
          }
        }
      }
    } else if (position !== void 0) {
      if (Array.isArray(material)) {
        for (let i2 = 0, il = groups2.length; i2 < il; i2++) {
          const group2 = groups2[i2];
          const groupMaterial = material[group2.materialIndex];
          const start = Math.max(group2.start, drawRange.start);
          const end = Math.min(position.count, Math.min(group2.start + group2.count, drawRange.start + drawRange.count));
          for (let j2 = start, jl = end; j2 < jl; j2 += 3) {
            const a2 = j2;
            const b = j2 + 1;
            const c4 = j2 + 2;
            intersection2 = checkGeometryIntersection(this, groupMaterial, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
            if (intersection2) {
              intersection2.faceIndex = Math.floor(j2 / 3);
              intersection2.face.materialIndex = group2.materialIndex;
              intersects4.push(intersection2);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(position.count, drawRange.start + drawRange.count);
        for (let i2 = start, il = end; i2 < il; i2 += 3) {
          const a2 = i2;
          const b = i2 + 1;
          const c4 = i2 + 2;
          intersection2 = checkGeometryIntersection(this, material, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
          if (intersection2) {
            intersection2.faceIndex = Math.floor(i2 / 3);
            intersects4.push(intersection2);
          }
        }
      }
    }
  }
};
function checkIntersection$1(object2, material, raycaster, ray, pA, pB, pC, point2) {
  let intersect2;
  if (material.side === BackSide) {
    intersect2 = ray.intersectTriangle(pC, pB, pA, true, point2);
  } else {
    intersect2 = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide, point2);
  }
  if (intersect2 === null) return null;
  _intersectionPointWorld.copy(point2);
  _intersectionPointWorld.applyMatrix4(object2.matrixWorld);
  const distance3 = raycaster.ray.origin.distanceTo(_intersectionPointWorld);
  if (distance3 < raycaster.near || distance3 > raycaster.far) return null;
  return {
    distance: distance3,
    point: _intersectionPointWorld.clone(),
    object: object2
  };
}
function checkGeometryIntersection(object2, material, raycaster, ray, uv2, uv1, normal2, a2, b, c4) {
  object2.getVertexPosition(a2, _vA$1);
  object2.getVertexPosition(b, _vB$1);
  object2.getVertexPosition(c4, _vC$1);
  const intersection2 = checkIntersection$1(object2, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint);
  if (intersection2) {
    if (uv2) {
      _uvA$1.fromBufferAttribute(uv2, a2);
      _uvB$1.fromBufferAttribute(uv2, b);
      _uvC$1.fromBufferAttribute(uv2, c4);
      intersection2.uv = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
    }
    if (uv1) {
      _uvA$1.fromBufferAttribute(uv1, a2);
      _uvB$1.fromBufferAttribute(uv1, b);
      _uvC$1.fromBufferAttribute(uv1, c4);
      intersection2.uv1 = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2());
    }
    if (normal2) {
      _normalA.fromBufferAttribute(normal2, a2);
      _normalB.fromBufferAttribute(normal2, b);
      _normalC.fromBufferAttribute(normal2, c4);
      intersection2.normal = Triangle.getInterpolation(_intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3());
      if (intersection2.normal.dot(ray.direction) > 0) {
        intersection2.normal.multiplyScalar(-1);
      }
    }
    const face = {
      a: a2,
      b,
      c: c4,
      normal: new Vector3(),
      materialIndex: 0
    };
    Triangle.getNormal(_vA$1, _vB$1, _vC$1, face.normal);
    intersection2.face = face;
  }
  return intersection2;
}
var BoxGeometry = class _BoxGeometry extends BufferGeometry {
  constructor(width = 1, height = 1, depth2 = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width,
      height,
      depth: depth2,
      widthSegments,
      heightSegments,
      depthSegments
    };
    const scope = this;
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let numberOfVertices = 0;
    let groupStart = 0;
    buildPlane("z", "y", "x", -1, -1, depth2, height, width, depthSegments, heightSegments, 0);
    buildPlane("z", "y", "x", 1, -1, depth2, height, -width, depthSegments, heightSegments, 1);
    buildPlane("x", "z", "y", 1, 1, width, depth2, height, widthSegments, depthSegments, 2);
    buildPlane("x", "z", "y", 1, -1, width, depth2, -height, widthSegments, depthSegments, 3);
    buildPlane("x", "y", "z", 1, -1, width, height, depth2, widthSegments, heightSegments, 4);
    buildPlane("x", "y", "z", -1, -1, width, height, -depth2, widthSegments, heightSegments, 5);
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function buildPlane(u5, v3, w4, udir, vdir, width2, height2, depth3, gridX, gridY, materialIndex) {
      const segmentWidth = width2 / gridX;
      const segmentHeight = height2 / gridY;
      const widthHalf = width2 / 2;
      const heightHalf = height2 / 2;
      const depthHalf = depth3 / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      let groupCount = 0;
      const vector = new Vector3();
      for (let iy = 0; iy < gridY1; iy++) {
        const y2 = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segmentWidth - widthHalf;
          vector[u5] = x2 * udir;
          vector[v3] = y2 * vdir;
          vector[w4] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u5] = 0;
          vector[v3] = 0;
          vector[w4] = depth3 > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a2 = numberOfVertices + ix + gridX1 * iy;
          const b = numberOfVertices + ix + gridX1 * (iy + 1);
          const c4 = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d2 = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a2, b, d2);
          indices.push(b, c4, d2);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, materialIndex);
      groupStart += groupCount;
      numberOfVertices += vertexCounter;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
  }
};
function cloneUniforms(src) {
  const dst = {};
  for (const u5 in src) {
    dst[u5] = {};
    for (const p2 in src[u5]) {
      const property2 = src[u5][p2];
      if (property2 && (property2.isColor || property2.isMatrix3 || property2.isMatrix4 || property2.isVector2 || property2.isVector3 || property2.isVector4 || property2.isTexture || property2.isQuaternion)) {
        if (property2.isRenderTargetTexture) {
          console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
          dst[u5][p2] = null;
        } else {
          dst[u5][p2] = property2.clone();
        }
      } else if (Array.isArray(property2)) {
        dst[u5][p2] = property2.slice();
      } else {
        dst[u5][p2] = property2;
      }
    }
  }
  return dst;
}
function mergeUniforms(uniforms) {
  const merged = {};
  for (let u5 = 0; u5 < uniforms.length; u5++) {
    const tmp3 = cloneUniforms(uniforms[u5]);
    for (const p2 in tmp3) {
      merged[p2] = tmp3[p2];
    }
  }
  return merged;
}
function cloneUniformsGroups(src) {
  const dst = [];
  for (let u5 = 0; u5 < src.length; u5++) {
    dst.push(src[u5].clone());
  }
  return dst;
}
function getUnlitUniformColorSpace(renderer3) {
  const currentRenderTarget = renderer3.getRenderTarget();
  if (currentRenderTarget === null) {
    return renderer3.outputColorSpace;
  }
  if (currentRenderTarget.isXRRenderTarget === true) {
    return currentRenderTarget.texture.colorSpace;
  }
  return ColorManagement.workingColorSpace;
}
var UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };
var default_vertex = "void main() {\n	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";
var default_fragment = "void main() {\n	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";
var ShaderMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isShaderMaterial = true;
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.uniformsGroups = [];
    this.vertexShader = default_vertex;
    this.fragmentShader = default_fragment;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.forceSinglePass = true;
    this.extensions = {
      clipCullDistance: false,
      // set to use vertex shader clipping
      multiDraw: false
      // set to use vertex shader multi_draw / enable gl_DrawID
    };
    this.defaultAttributeValues = {
      "color": [1, 1, 1],
      "uv": [0, 0],
      "uv1": [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (parameters !== void 0) {
      this.setValues(parameters);
    }
  }
  copy(source) {
    super.copy(source);
    this.fragmentShader = source.fragmentShader;
    this.vertexShader = source.vertexShader;
    this.uniforms = cloneUniforms(source.uniforms);
    this.uniformsGroups = cloneUniformsGroups(source.uniformsGroups);
    this.defines = Object.assign({}, source.defines);
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.fog = source.fog;
    this.lights = source.lights;
    this.clipping = source.clipping;
    this.extensions = Object.assign({}, source.extensions);
    this.glslVersion = source.glslVersion;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.glslVersion = this.glslVersion;
    data.uniforms = {};
    for (const name in this.uniforms) {
      const uniform2 = this.uniforms[name];
      const value = uniform2.value;
      if (value && value.isTexture) {
        data.uniforms[name] = {
          type: "t",
          value: value.toJSON(meta).uuid
        };
      } else if (value && value.isColor) {
        data.uniforms[name] = {
          type: "c",
          value: value.getHex()
        };
      } else if (value && value.isVector2) {
        data.uniforms[name] = {
          type: "v2",
          value: value.toArray()
        };
      } else if (value && value.isVector3) {
        data.uniforms[name] = {
          type: "v3",
          value: value.toArray()
        };
      } else if (value && value.isVector4) {
        data.uniforms[name] = {
          type: "v4",
          value: value.toArray()
        };
      } else if (value && value.isMatrix3) {
        data.uniforms[name] = {
          type: "m3",
          value: value.toArray()
        };
      } else if (value && value.isMatrix4) {
        data.uniforms[name] = {
          type: "m4",
          value: value.toArray()
        };
      } else {
        data.uniforms[name] = {
          value
        };
      }
    }
    if (Object.keys(this.defines).length > 0) data.defines = this.defines;
    data.vertexShader = this.vertexShader;
    data.fragmentShader = this.fragmentShader;
    data.lights = this.lights;
    data.clipping = this.clipping;
    const extensions = {};
    for (const key in this.extensions) {
      if (this.extensions[key] === true) extensions[key] = true;
    }
    if (Object.keys(extensions).length > 0) data.extensions = extensions;
    return data;
  }
};
var Camera = class extends Object3D {
  constructor() {
    super();
    this.isCamera = true;
    this.type = "Camera";
    this.matrixWorldInverse = new Matrix4();
    this.projectionMatrix = new Matrix4();
    this.projectionMatrixInverse = new Matrix4();
    this.coordinateSystem = WebGLCoordinateSystem;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    this.coordinateSystem = source.coordinateSystem;
    return this;
  }
  getWorldDirection(target) {
    return super.getWorldDirection(target).negate();
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(updateParents, updateChildren) {
    super.updateWorldMatrix(updateParents, updateChildren);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _v3$1 = new Vector3();
var _minTarget = new Vector2();
var _maxTarget = new Vector2();
var PerspectiveCamera = class extends Camera {
  constructor(fov3 = 50, aspect3 = 1, near = 0.1, far = 2e3) {
    super();
    this.isPerspectiveCamera = true;
    this.type = "PerspectiveCamera";
    this.fov = fov3;
    this.zoom = 1;
    this.near = near;
    this.far = far;
    this.focus = 10;
    this.aspect = aspect3;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(focalLength) {
    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = RAD2DEG * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const vExtentSlope = Math.tan(DEG2RAD * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  }
  getEffectiveFOV() {
    return RAD2DEG * 2 * Math.atan(
      Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
   */
  getViewBounds(distance3, minTarget, maxTarget) {
    _v3$1.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    minTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance3 / _v3$1.z);
    _v3$1.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    maxTarget.set(_v3$1.x, _v3$1.y).multiplyScalar(-distance3 / _v3$1.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   * Copies the result into the target Vector2, where x is width and y is height.
   */
  getViewSize(distance3, target) {
    this.getViewBounds(distance3, _minTarget, _maxTarget);
    return target.subVectors(_maxTarget, _minTarget);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(fullWidth, fullHeight, x2, y2, width, height) {
    this.aspect = fullWidth / fullHeight;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x2;
    this.view.offsetY = y2;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const near = this.near;
    let top = near * Math.tan(DEG2RAD * 0.5 * this.fov) / this.zoom;
    let height = 2 * top;
    let width = this.aspect * height;
    let left = -0.5 * width;
    const view = this.view;
    if (this.view !== null && this.view.enabled) {
      const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }
    const skew = this.filmOffset;
    if (skew !== 0) left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
};
var fov = -90;
var aspect = 1;
var CubeCamera = class extends Object3D {
  constructor(near, far, renderTarget) {
    super();
    this.type = "CubeCamera";
    this.renderTarget = renderTarget;
    this.coordinateSystem = null;
    this.activeMipmapLevel = 0;
    const cameraPX = new PerspectiveCamera(fov, aspect, near, far);
    cameraPX.layers = this.layers;
    this.add(cameraPX);
    const cameraNX = new PerspectiveCamera(fov, aspect, near, far);
    cameraNX.layers = this.layers;
    this.add(cameraNX);
    const cameraPY = new PerspectiveCamera(fov, aspect, near, far);
    cameraPY.layers = this.layers;
    this.add(cameraPY);
    const cameraNY = new PerspectiveCamera(fov, aspect, near, far);
    cameraNY.layers = this.layers;
    this.add(cameraNY);
    const cameraPZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraPZ.layers = this.layers;
    this.add(cameraPZ);
    const cameraNZ = new PerspectiveCamera(fov, aspect, near, far);
    cameraNZ.layers = this.layers;
    this.add(cameraNZ);
  }
  updateCoordinateSystem() {
    const coordinateSystem = this.coordinateSystem;
    const cameras = this.children.concat();
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
    for (const camera3 of cameras) this.remove(camera3);
    if (coordinateSystem === WebGLCoordinateSystem) {
      cameraPX.up.set(0, 1, 0);
      cameraPX.lookAt(1, 0, 0);
      cameraNX.up.set(0, 1, 0);
      cameraNX.lookAt(-1, 0, 0);
      cameraPY.up.set(0, 0, -1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, 1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, 1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, 1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      cameraPX.up.set(0, -1, 0);
      cameraPX.lookAt(-1, 0, 0);
      cameraNX.up.set(0, -1, 0);
      cameraNX.lookAt(1, 0, 0);
      cameraPY.up.set(0, 0, 1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, -1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, -1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, -1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else {
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
    }
    for (const camera3 of cameras) {
      this.add(camera3);
      camera3.updateMatrixWorld();
    }
  }
  update(renderer3, scene3) {
    if (this.parent === null) this.updateMatrixWorld();
    const { renderTarget, activeMipmapLevel } = this;
    if (this.coordinateSystem !== renderer3.coordinateSystem) {
      this.coordinateSystem = renderer3.coordinateSystem;
      this.updateCoordinateSystem();
    }
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentActiveCubeFace = renderer3.getActiveCubeFace();
    const currentActiveMipmapLevel = renderer3.getActiveMipmapLevel();
    const currentXrEnabled = renderer3.xr.enabled;
    renderer3.xr.enabled = false;
    const generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer3.setRenderTarget(renderTarget, 0, activeMipmapLevel);
    renderer3.render(scene3, cameraPX);
    renderer3.setRenderTarget(renderTarget, 1, activeMipmapLevel);
    renderer3.render(scene3, cameraNX);
    renderer3.setRenderTarget(renderTarget, 2, activeMipmapLevel);
    renderer3.render(scene3, cameraPY);
    renderer3.setRenderTarget(renderTarget, 3, activeMipmapLevel);
    renderer3.render(scene3, cameraNY);
    renderer3.setRenderTarget(renderTarget, 4, activeMipmapLevel);
    renderer3.render(scene3, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer3.setRenderTarget(renderTarget, 5, activeMipmapLevel);
    renderer3.render(scene3, cameraNZ);
    renderer3.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
    renderer3.xr.enabled = currentXrEnabled;
    renderTarget.texture.needsPMREMUpdate = true;
  }
};
var CubeTexture = class extends Texture {
  constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2, colorSpace) {
    images = images !== void 0 ? images : [];
    mapping = mapping !== void 0 ? mapping : CubeReflectionMapping;
    super(images, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2, colorSpace);
    this.isCubeTexture = true;
    this.flipY = false;
  }
  get images() {
    return this.image;
  }
  set images(value) {
    this.image = value;
  }
};
var WebGLCubeRenderTarget = class extends WebGLRenderTarget {
  constructor(size = 1, options = {}) {
    super(size, size, options);
    this.isWebGLCubeRenderTarget = true;
    const image = { width: size, height: size, depth: 1 };
    const images = [image, image, image, image, image, image];
    this.texture = new CubeTexture(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    this.texture.isRenderTargetTexture = true;
    this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
    this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter;
  }
  fromEquirectangularTexture(renderer3, texture2) {
    this.texture.type = texture2.type;
    this.texture.colorSpace = texture2.colorSpace;
    this.texture.generateMipmaps = texture2.generateMipmaps;
    this.texture.minFilter = texture2.minFilter;
    this.texture.magFilter = texture2.magFilter;
    const shader = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    };
    const geometry = new BoxGeometry(5, 5, 5);
    const material = new ShaderMaterial({
      name: "CubemapFromEquirect",
      uniforms: cloneUniforms(shader.uniforms),
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: BackSide,
      blending: NoBlending
    });
    material.uniforms.tEquirect.value = texture2;
    const mesh = new Mesh(geometry, material);
    const currentMinFilter = texture2.minFilter;
    if (texture2.minFilter === LinearMipmapLinearFilter) texture2.minFilter = LinearFilter;
    const camera3 = new CubeCamera(1, 10, this);
    camera3.update(renderer3, mesh);
    texture2.minFilter = currentMinFilter;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  }
  clear(renderer3, color3, depth2, stencil) {
    const currentRenderTarget = renderer3.getRenderTarget();
    for (let i2 = 0; i2 < 6; i2++) {
      renderer3.setRenderTarget(this, i2);
      renderer3.clear(color3, depth2, stencil);
    }
    renderer3.setRenderTarget(currentRenderTarget);
  }
};
var _vector1 = new Vector3();
var _vector2 = new Vector3();
var _normalMatrix = new Matrix3();
var Plane = class {
  constructor(normal2 = new Vector3(1, 0, 0), constant2 = 0) {
    this.isPlane = true;
    this.normal = normal2;
    this.constant = constant2;
  }
  set(normal2, constant2) {
    this.normal.copy(normal2);
    this.constant = constant2;
    return this;
  }
  setComponents(x2, y2, z2, w4) {
    this.normal.set(x2, y2, z2);
    this.constant = w4;
    return this;
  }
  setFromNormalAndCoplanarPoint(normal2, point2) {
    this.normal.copy(normal2);
    this.constant = -point2.dot(this.normal);
    return this;
  }
  setFromCoplanarPoints(a2, b, c4) {
    const normal2 = _vector1.subVectors(c4, b).cross(_vector2.subVectors(a2, b)).normalize();
    this.setFromNormalAndCoplanarPoint(normal2, a2);
    return this;
  }
  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  normalize() {
    const inverseNormalLength = 1 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  }
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  distanceToPoint(point2) {
    return this.normal.dot(point2) + this.constant;
  }
  distanceToSphere(sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  }
  projectPoint(point2, target) {
    return target.copy(point2).addScaledVector(this.normal, -this.distanceToPoint(point2));
  }
  intersectLine(line, target) {
    const direction2 = line.delta(_vector1);
    const denominator = this.normal.dot(direction2);
    if (denominator === 0) {
      if (this.distanceToPoint(line.start) === 0) {
        return target.copy(line.start);
      }
      return null;
    }
    const t4 = -(line.start.dot(this.normal) + this.constant) / denominator;
    if (t4 < 0 || t4 > 1) {
      return null;
    }
    return target.copy(line.start).addScaledVector(direction2, t4);
  }
  intersectsLine(line) {
    const startSign = this.distanceToPoint(line.start);
    const endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  }
  intersectsBox(box) {
    return box.intersectsPlane(this);
  }
  intersectsSphere(sphere) {
    return sphere.intersectsPlane(this);
  }
  coplanarPoint(target) {
    return target.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(matrix, optionalNormalMatrix) {
    const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix(matrix);
    const referencePoint = this.coplanarPoint(_vector1).applyMatrix4(matrix);
    const normal2 = this.normal.applyMatrix3(normalMatrix).normalize();
    this.constant = -referencePoint.dot(normal2);
    return this;
  }
  translate(offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  }
  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _sphere$5 = new Sphere();
var _vector$7 = new Vector3();
var Frustum = class {
  constructor(p02 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane()) {
    this.planes = [p02, p1, p2, p3, p4, p5];
  }
  set(p02, p1, p2, p3, p4, p5) {
    const planes = this.planes;
    planes[0].copy(p02);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  }
  copy(frustum) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      planes[i2].copy(frustum.planes[i2]);
    }
    return this;
  }
  setFromProjectionMatrix(m2, coordinateSystem = WebGLCoordinateSystem) {
    const planes = this.planes;
    const me = m2.elements;
    const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
    const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
    const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
    const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
    if (coordinateSystem === WebGLCoordinateSystem) {
      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
    } else if (coordinateSystem === WebGPUCoordinateSystem) {
      planes[5].setComponents(me2, me6, me10, me14).normalize();
    } else {
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
    }
    return this;
  }
  intersectsObject(object2) {
    if (object2.boundingSphere !== void 0) {
      if (object2.boundingSphere === null) object2.computeBoundingSphere();
      _sphere$5.copy(object2.boundingSphere).applyMatrix4(object2.matrixWorld);
    } else {
      const geometry = object2.geometry;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$5.copy(geometry.boundingSphere).applyMatrix4(object2.matrixWorld);
    }
    return this.intersectsSphere(_sphere$5);
  }
  intersectsSprite(sprite) {
    _sphere$5.center.set(0, 0, 0);
    _sphere$5.radius = 0.7071067811865476;
    _sphere$5.applyMatrix4(sprite.matrixWorld);
    return this.intersectsSphere(_sphere$5);
  }
  intersectsSphere(sphere) {
    const planes = this.planes;
    const center = sphere.center;
    const negRadius = -sphere.radius;
    for (let i2 = 0; i2 < 6; i2++) {
      const distance3 = planes[i2].distanceToPoint(center);
      if (distance3 < negRadius) {
        return false;
      }
    }
    return true;
  }
  intersectsBox(box) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      const plane = planes[i2];
      _vector$7.x = plane.normal.x > 0 ? box.max.x : box.min.x;
      _vector$7.y = plane.normal.y > 0 ? box.max.y : box.min.y;
      _vector$7.z = plane.normal.z > 0 ? box.max.z : box.min.z;
      if (plane.distanceToPoint(_vector$7) < 0) {
        return false;
      }
    }
    return true;
  }
  containsPoint(point2) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      if (planes[i2].distanceToPoint(point2) < 0) {
        return false;
      }
    }
    return true;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
function WebGLAnimation() {
  let context2 = null;
  let isAnimating = false;
  let animationLoop = null;
  let requestId = null;
  function onAnimationFrame(time2, frame) {
    animationLoop(time2, frame);
    requestId = context2.requestAnimationFrame(onAnimationFrame);
  }
  return {
    start: function() {
      if (isAnimating === true) return;
      if (animationLoop === null) return;
      requestId = context2.requestAnimationFrame(onAnimationFrame);
      isAnimating = true;
    },
    stop: function() {
      context2.cancelAnimationFrame(requestId);
      isAnimating = false;
    },
    setAnimationLoop: function(callback) {
      animationLoop = callback;
    },
    setContext: function(value) {
      context2 = value;
    }
  };
}
function WebGLAttributes(gl) {
  const buffers = /* @__PURE__ */ new WeakMap();
  function createBuffer(attribute2, bufferType) {
    const array3 = attribute2.array;
    const usage = attribute2.usage;
    const size = array3.byteLength;
    const buffer2 = gl.createBuffer();
    gl.bindBuffer(bufferType, buffer2);
    gl.bufferData(bufferType, array3, usage);
    attribute2.onUploadCallback();
    let type;
    if (array3 instanceof Float32Array) {
      type = gl.FLOAT;
    } else if (array3 instanceof Uint16Array) {
      if (attribute2.isFloat16BufferAttribute) {
        type = gl.HALF_FLOAT;
      } else {
        type = gl.UNSIGNED_SHORT;
      }
    } else if (array3 instanceof Int16Array) {
      type = gl.SHORT;
    } else if (array3 instanceof Uint32Array) {
      type = gl.UNSIGNED_INT;
    } else if (array3 instanceof Int32Array) {
      type = gl.INT;
    } else if (array3 instanceof Int8Array) {
      type = gl.BYTE;
    } else if (array3 instanceof Uint8Array) {
      type = gl.UNSIGNED_BYTE;
    } else if (array3 instanceof Uint8ClampedArray) {
      type = gl.UNSIGNED_BYTE;
    } else {
      throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: " + array3);
    }
    return {
      buffer: buffer2,
      type,
      bytesPerElement: array3.BYTES_PER_ELEMENT,
      version: attribute2.version,
      size
    };
  }
  function updateBuffer(buffer2, attribute2, bufferType) {
    const array3 = attribute2.array;
    const updateRange = attribute2._updateRange;
    const updateRanges = attribute2.updateRanges;
    gl.bindBuffer(bufferType, buffer2);
    if (updateRange.count === -1 && updateRanges.length === 0) {
      gl.bufferSubData(bufferType, 0, array3);
    }
    if (updateRanges.length !== 0) {
      for (let i2 = 0, l2 = updateRanges.length; i2 < l2; i2++) {
        const range4 = updateRanges[i2];
        gl.bufferSubData(
          bufferType,
          range4.start * array3.BYTES_PER_ELEMENT,
          array3,
          range4.start,
          range4.count
        );
      }
      attribute2.clearUpdateRanges();
    }
    if (updateRange.count !== -1) {
      gl.bufferSubData(
        bufferType,
        updateRange.offset * array3.BYTES_PER_ELEMENT,
        array3,
        updateRange.offset,
        updateRange.count
      );
      updateRange.count = -1;
    }
    attribute2.onUploadCallback();
  }
  function get(attribute2) {
    if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
    return buffers.get(attribute2);
  }
  function remove3(attribute2) {
    if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
    const data = buffers.get(attribute2);
    if (data) {
      gl.deleteBuffer(data.buffer);
      buffers.delete(attribute2);
    }
  }
  function update20(attribute2, bufferType) {
    if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
    if (attribute2.isGLBufferAttribute) {
      const cached = buffers.get(attribute2);
      if (!cached || cached.version < attribute2.version) {
        buffers.set(attribute2, {
          buffer: attribute2.buffer,
          type: attribute2.type,
          bytesPerElement: attribute2.elementSize,
          version: attribute2.version
        });
      }
      return;
    }
    const data = buffers.get(attribute2);
    if (data === void 0) {
      buffers.set(attribute2, createBuffer(attribute2, bufferType));
    } else if (data.version < attribute2.version) {
      if (data.size !== attribute2.array.byteLength) {
        throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");
      }
      updateBuffer(data.buffer, attribute2, bufferType);
      data.version = attribute2.version;
    }
  }
  return {
    get,
    remove: remove3,
    update: update20
  };
}
var PlaneGeometry = class _PlaneGeometry extends BufferGeometry {
  constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    const width_half = width / 2;
    const height_half = height / 2;
    const gridX = Math.floor(widthSegments);
    const gridY = Math.floor(heightSegments);
    const gridX1 = gridX + 1;
    const gridY1 = gridY + 1;
    const segment_width = width / gridX;
    const segment_height = height / gridY;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy < gridY1; iy++) {
      const y2 = iy * segment_height - height_half;
      for (let ix = 0; ix < gridX1; ix++) {
        const x2 = ix * segment_width - width_half;
        vertices.push(x2, -y2, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }
    for (let iy = 0; iy < gridY; iy++) {
      for (let ix = 0; ix < gridX; ix++) {
        const a2 = ix + gridX1 * iy;
        const b = ix + gridX1 * (iy + 1);
        const c4 = ix + 1 + gridX1 * (iy + 1);
        const d2 = ix + 1 + gridX1 * iy;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
  }
};
var alphahash_fragment = "#ifdef USE_ALPHAHASH\n	if ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";
var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n	const float ALPHA_HASH_SCALE = 0.05;\n	float hash2D( vec2 value ) {\n		return fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n	}\n	float hash3D( vec3 value ) {\n		return hash2D( vec2( hash2D( value.xy ), value.z ) );\n	}\n	float getAlphaHashThreshold( vec3 position ) {\n		float maxDeriv = max(\n			length( dFdx( position.xyz ) ),\n			length( dFdy( position.xyz ) )\n		);\n		float pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n		vec2 pixScales = vec2(\n			exp2( floor( log2( pixScale ) ) ),\n			exp2( ceil( log2( pixScale ) ) )\n		);\n		vec2 alpha = vec2(\n			hash3D( floor( pixScales.x * position.xyz ) ),\n			hash3D( floor( pixScales.y * position.xyz ) )\n		);\n		float lerpFactor = fract( log2( pixScale ) );\n		float x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n		float a = min( lerpFactor, 1.0 - lerpFactor );\n		vec3 cases = vec3(\n			x * x / ( 2.0 * a * ( 1.0 - a ) ),\n			( x - 0.5 * a ) / ( 1.0 - a ),\n			1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n		);\n		float threshold = ( x < ( 1.0 - a ) )\n			? ( ( x < a ) ? cases.x : cases.y )\n			: cases.z;\n		return clamp( threshold , 1.0e-6, 1.0 );\n	}\n#endif";
var alphamap_fragment = "#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";
var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var alphatest_fragment = "#ifdef USE_ALPHATEST\n	#ifdef ALPHA_TO_COVERAGE\n	diffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n	if ( diffuseColor.a == 0.0 ) discard;\n	#else\n	if ( diffuseColor.a < alphaTest ) discard;\n	#endif\n#endif";
var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n	uniform float alphaTest;\n#endif";
var aomap_fragment = "#ifdef USE_AOMAP\n	float ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n	reflectedLight.indirectDiffuse *= ambientOcclusion;\n	#if defined( USE_CLEARCOAT ) \n		clearcoatSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_SHEEN ) \n		sheenSpecularIndirect *= ambientOcclusion;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD )\n		float dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n		reflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n	#endif\n#endif";
var aomap_pars_fragment = "#ifdef USE_AOMAP\n	uniform sampler2D aoMap;\n	uniform float aoMapIntensity;\n#endif";
var batching_pars_vertex = "#ifdef USE_BATCHING\n	#if ! defined( GL_ANGLE_multi_draw )\n	#define gl_DrawID _gl_DrawID\n	uniform int _gl_DrawID;\n	#endif\n	uniform highp sampler2D batchingTexture;\n	uniform highp usampler2D batchingIdTexture;\n	mat4 getBatchingMatrix( const in float i ) {\n		int size = textureSize( batchingTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n	float getIndirectIndex( const in int i ) {\n		int size = textureSize( batchingIdTexture, 0 ).x;\n		int x = i % size;\n		int y = i / size;\n		return float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n	}\n#endif\n#ifdef USE_BATCHING_COLOR\n	uniform sampler2D batchingColorTexture;\n	vec3 getBatchingColor( const in float i ) {\n		int size = textureSize( batchingColorTexture, 0 ).x;\n		int j = int( i );\n		int x = j % size;\n		int y = j / size;\n		return texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n	}\n#endif";
var batching_vertex = "#ifdef USE_BATCHING\n	mat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif";
var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n	vPosition = vec3( position );\n#endif";
var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n	vec3 objectTangent = vec3( tangent.xyz );\n#endif";
var bsdfs = "float G_BlinnPhong_Implicit( ) {\n	return 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n	return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( specularColor, 1.0, dotVH );\n	float G = G_BlinnPhong_Implicit( );\n	float D = D_BlinnPhong( shininess, dotNH );\n	return F * ( G * D );\n} // validated";
var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n	const mat3 XYZ_TO_REC709 = mat3(\n		 3.2404542, -0.9692660,  0.0556434,\n		-1.5371385,  1.8760108, -0.2040259,\n		-0.4985314,  0.0415560,  1.0572252\n	);\n	vec3 Fresnel0ToIor( vec3 fresnel0 ) {\n		vec3 sqrtF0 = sqrt( fresnel0 );\n		return ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n	}\n	vec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n	}\n	float IorToFresnel0( float transmittedIor, float incidentIor ) {\n		return pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n	}\n	vec3 evalSensitivity( float OPD, vec3 shift ) {\n		float phase = 2.0 * PI * OPD * 1.0e-9;\n		vec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n		vec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n		vec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n		vec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n		xyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n		xyz /= 1.0685e-7;\n		vec3 rgb = XYZ_TO_REC709 * xyz;\n		return rgb;\n	}\n	vec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n		vec3 I;\n		float iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n		float sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n		float cosTheta2Sq = 1.0 - sinTheta2Sq;\n		if ( cosTheta2Sq < 0.0 ) {\n			return vec3( 1.0 );\n		}\n		float cosTheta2 = sqrt( cosTheta2Sq );\n		float R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n		float R12 = F_Schlick( R0, 1.0, cosTheta1 );\n		float T121 = 1.0 - R12;\n		float phi12 = 0.0;\n		if ( iridescenceIOR < outsideIOR ) phi12 = PI;\n		float phi21 = PI - phi12;\n		vec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );		vec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n		vec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n		vec3 phi23 = vec3( 0.0 );\n		if ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n		if ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n		if ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n		float OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n		vec3 phi = vec3( phi21 ) + phi23;\n		vec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n		vec3 r123 = sqrt( R123 );\n		vec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n		vec3 C0 = R12 + Rs;\n		I = C0;\n		vec3 Cm = Rs - T121;\n		for ( int m = 1; m <= 2; ++ m ) {\n			Cm *= r123;\n			vec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n			I += Cm * Sm;\n		}\n		return max( I, vec3( 0.0 ) );\n	}\n#endif";
var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n	uniform sampler2D bumpMap;\n	uniform float bumpScale;\n	vec2 dHdxy_fwd() {\n		vec2 dSTdx = dFdx( vBumpMapUv );\n		vec2 dSTdy = dFdy( vBumpMapUv );\n		float Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n		float dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n		float dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n		return vec2( dBx, dBy );\n	}\n	vec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n		vec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n		vec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n		vec3 vN = surf_norm;\n		vec3 R1 = cross( vSigmaY, vN );\n		vec3 R2 = cross( vN, vSigmaX );\n		float fDet = dot( vSigmaX, R1 ) * faceDirection;\n		vec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n		return normalize( abs( fDet ) * surf_norm - vGrad );\n	}\n#endif";
var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n	vec4 plane;\n	#ifdef ALPHA_TO_COVERAGE\n		float distanceToPlane, distanceGradient;\n		float clipOpacity = 1.0;\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n			distanceGradient = fwidth( distanceToPlane ) / 2.0;\n			clipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			if ( clipOpacity == 0.0 ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			float unionClipOpacity = 1.0;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				distanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n				distanceGradient = fwidth( distanceToPlane ) / 2.0;\n				unionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n			}\n			#pragma unroll_loop_end\n			clipOpacity *= 1.0 - unionClipOpacity;\n		#endif\n		diffuseColor.a *= clipOpacity;\n		if ( diffuseColor.a == 0.0 ) discard;\n	#else\n		#pragma unroll_loop_start\n		for ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n			plane = clippingPlanes[ i ];\n			if ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n		}\n		#pragma unroll_loop_end\n		#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n			bool clipped = true;\n			#pragma unroll_loop_start\n			for ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n				plane = clippingPlanes[ i ];\n				clipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n			}\n			#pragma unroll_loop_end\n			if ( clipped ) discard;\n		#endif\n	#endif\n#endif";
var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n	uniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";
var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n	varying vec3 vClipPosition;\n#endif";
var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n	vClipPosition = - mvPosition.xyz;\n#endif";
var color_fragment = "#if defined( USE_COLOR_ALPHA )\n	diffuseColor *= vColor;\n#elif defined( USE_COLOR )\n	diffuseColor.rgb *= vColor;\n#endif";
var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR )\n	varying vec3 vColor;\n#endif";
var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n	varying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	varying vec3 vColor;\n#endif";
var color_vertex = "#if defined( USE_COLOR_ALPHA )\n	vColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n	vColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n	vColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n	vColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n	vec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n	vColor.xyz *= batchingColor.xyz;\n#endif";
var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n	const highp float a = 12.9898, b = 78.233, c = 43758.5453;\n	highp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n	return fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n	float precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n	float precisionSafeLength( vec3 v ) {\n		float maxComponent = max3( abs( v ) );\n		return length( v / maxComponent ) * maxComponent;\n	}\n#endif\nstruct IncidentLight {\n	vec3 color;\n	vec3 direction;\n	bool visible;\n};\nstruct ReflectedLight {\n	vec3 directDiffuse;\n	vec3 directSpecular;\n	vec3 indirectDiffuse;\n	vec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n	varying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n	return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n	mat3 tmp;\n	tmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n	tmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n	tmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n	return tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n	return m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n	float u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n	float v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n	return vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n	return RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n	float fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n	return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";
var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n	#define cubeUV_minMipLevel 4.0\n	#define cubeUV_minTileSize 16.0\n	float getFace( vec3 direction ) {\n		vec3 absDirection = abs( direction );\n		float face = - 1.0;\n		if ( absDirection.x > absDirection.z ) {\n			if ( absDirection.x > absDirection.y )\n				face = direction.x > 0.0 ? 0.0 : 3.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		} else {\n			if ( absDirection.z > absDirection.y )\n				face = direction.z > 0.0 ? 2.0 : 5.0;\n			else\n				face = direction.y > 0.0 ? 1.0 : 4.0;\n		}\n		return face;\n	}\n	vec2 getUV( vec3 direction, float face ) {\n		vec2 uv;\n		if ( face == 0.0 ) {\n			uv = vec2( direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 1.0 ) {\n			uv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n		} else if ( face == 2.0 ) {\n			uv = vec2( - direction.x, direction.y ) / abs( direction.z );\n		} else if ( face == 3.0 ) {\n			uv = vec2( - direction.z, direction.y ) / abs( direction.x );\n		} else if ( face == 4.0 ) {\n			uv = vec2( - direction.x, direction.z ) / abs( direction.y );\n		} else {\n			uv = vec2( direction.x, direction.y ) / abs( direction.z );\n		}\n		return 0.5 * ( uv + 1.0 );\n	}\n	vec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n		float face = getFace( direction );\n		float filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n		mipInt = max( mipInt, cubeUV_minMipLevel );\n		float faceSize = exp2( mipInt );\n		highp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n		if ( face > 2.0 ) {\n			uv.y += faceSize;\n			face -= 3.0;\n		}\n		uv.x += face * faceSize;\n		uv.x += filterInt * 3.0 * cubeUV_minTileSize;\n		uv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n		uv.x *= CUBEUV_TEXEL_WIDTH;\n		uv.y *= CUBEUV_TEXEL_HEIGHT;\n		#ifdef texture2DGradEXT\n			return texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n		#else\n			return texture2D( envMap, uv ).rgb;\n		#endif\n	}\n	#define cubeUV_r0 1.0\n	#define cubeUV_m0 - 2.0\n	#define cubeUV_r1 0.8\n	#define cubeUV_m1 - 1.0\n	#define cubeUV_r4 0.4\n	#define cubeUV_m4 2.0\n	#define cubeUV_r5 0.305\n	#define cubeUV_m5 3.0\n	#define cubeUV_r6 0.21\n	#define cubeUV_m6 4.0\n	float roughnessToMip( float roughness ) {\n		float mip = 0.0;\n		if ( roughness >= cubeUV_r1 ) {\n			mip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n		} else if ( roughness >= cubeUV_r4 ) {\n			mip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n		} else if ( roughness >= cubeUV_r5 ) {\n			mip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n		} else if ( roughness >= cubeUV_r6 ) {\n			mip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n		} else {\n			mip = - 2.0 * log2( 1.16 * roughness );		}\n		return mip;\n	}\n	vec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n		float mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n		float mipF = fract( mip );\n		float mipInt = floor( mip );\n		vec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n		if ( mipF == 0.0 ) {\n			return vec4( color0, 1.0 );\n		} else {\n			vec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n			return vec4( mix( color0, color1, mipF ), 1.0 );\n		}\n	}\n#endif";
var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n	vec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n	mat3 bm = mat3( batchingMatrix );\n	transformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n	transformedNormal = bm * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = bm * transformedTangent;\n	#endif\n#endif\n#ifdef USE_INSTANCING\n	mat3 im = mat3( instanceMatrix );\n	transformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n	transformedNormal = im * transformedNormal;\n	#ifdef USE_TANGENT\n		transformedTangent = im * transformedTangent;\n	#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n	transformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n	transformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n	#ifdef FLIP_SIDED\n		transformedTangent = - transformedTangent;\n	#endif\n#endif";
var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n	uniform sampler2D displacementMap;\n	uniform float displacementScale;\n	uniform float displacementBias;\n#endif";
var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n	transformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";
var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n	vec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n	totalEmissiveRadiance *= emissiveColor.rgb;\n#endif";
var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n	uniform sampler2D emissiveMap;\n#endif";
var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";
var colorspace_pars_fragment = "\nconst mat3 LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = mat3(\n	vec3( 0.8224621, 0.177538, 0.0 ),\n	vec3( 0.0331941, 0.9668058, 0.0 ),\n	vec3( 0.0170827, 0.0723974, 0.9105199 )\n);\nconst mat3 LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = mat3(\n	vec3( 1.2249401, - 0.2249404, 0.0 ),\n	vec3( - 0.0420569, 1.0420571, 0.0 ),\n	vec3( - 0.0196376, - 0.0786361, 1.0982735 )\n);\nvec4 LinearSRGBToLinearDisplayP3( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_SRGB_TO_LINEAR_DISPLAY_P3, value.a );\n}\nvec4 LinearDisplayP3ToLinearSRGB( in vec4 value ) {\n	return vec4( value.rgb * LINEAR_DISPLAY_P3_TO_LINEAR_SRGB, value.a );\n}\nvec4 LinearTransferOETF( in vec4 value ) {\n	return value;\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n	return vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";
var envmap_fragment = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vec3 cameraToFrag;\n		if ( isOrthographic ) {\n			cameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToFrag = normalize( vWorldPosition - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vec3 reflectVec = reflect( cameraToFrag, worldNormal );\n		#else\n			vec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n		#endif\n	#else\n		vec3 reflectVec = vReflect;\n	#endif\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n	#else\n		vec4 envColor = vec4( 0.0 );\n	#endif\n	#ifdef ENVMAP_BLENDING_MULTIPLY\n		outgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_MIX )\n		outgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n	#elif defined( ENVMAP_BLENDING_ADD )\n		outgoingLight += envColor.xyz * specularStrength * reflectivity;\n	#endif\n#endif";
var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float envMapIntensity;\n	uniform float flipEnvMap;\n	uniform mat3 envMapRotation;\n	#ifdef ENVMAP_TYPE_CUBE\n		uniform samplerCube envMap;\n	#else\n		uniform sampler2D envMap;\n	#endif\n	\n#endif";
var envmap_pars_fragment = "#ifdef USE_ENVMAP\n	uniform float reflectivity;\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		varying vec3 vWorldPosition;\n		uniform float refractionRatio;\n	#else\n		varying vec3 vReflect;\n	#endif\n#endif";
var envmap_pars_vertex = "#ifdef USE_ENVMAP\n	#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n		#define ENV_WORLDPOS\n	#endif\n	#ifdef ENV_WORLDPOS\n		\n		varying vec3 vWorldPosition;\n	#else\n		varying vec3 vReflect;\n		uniform float refractionRatio;\n	#endif\n#endif";
var envmap_vertex = "#ifdef USE_ENVMAP\n	#ifdef ENV_WORLDPOS\n		vWorldPosition = worldPosition.xyz;\n	#else\n		vec3 cameraToVertex;\n		if ( isOrthographic ) {\n			cameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n		} else {\n			cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n		}\n		vec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n		#ifdef ENVMAP_MODE_REFLECTION\n			vReflect = reflect( cameraToVertex, worldNormal );\n		#else\n			vReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n		#endif\n	#endif\n#endif";
var fog_vertex = "#ifdef USE_FOG\n	vFogDepth = - mvPosition.z;\n#endif";
var fog_pars_vertex = "#ifdef USE_FOG\n	varying float vFogDepth;\n#endif";
var fog_fragment = "#ifdef USE_FOG\n	#ifdef FOG_EXP2\n		float fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n	#else\n		float fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n	#endif\n	gl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";
var fog_pars_fragment = "#ifdef USE_FOG\n	uniform vec3 fogColor;\n	varying float vFogDepth;\n	#ifdef FOG_EXP2\n		uniform float fogDensity;\n	#else\n		uniform float fogNear;\n		uniform float fogFar;\n	#endif\n#endif";
var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n	uniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n	float dotNL = dot( normal, lightDirection );\n	vec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n	#ifdef USE_GRADIENTMAP\n		return vec3( texture2D( gradientMap, coord ).r );\n	#else\n		vec2 fw = fwidth( coord ) * 0.5;\n		return mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n	#endif\n}";
var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n	uniform sampler2D lightMap;\n	uniform float lightMapIntensity;\n#endif";
var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";
var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n	vec3 diffuseColor;\n	float specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Lambert\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Lambert";
var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n	uniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n	float x = normal.x, y = normal.y, z = normal.z;\n	vec3 result = shCoefficients[ 0 ] * 0.886227;\n	result += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n	result += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n	result += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n	result += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n	result += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n	result += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n	result += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n	result += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n	return result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n	vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n	vec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n	return irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n	vec3 irradiance = ambientLightColor;\n	return irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n	float distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n	if ( cutoffDistance > 0.0 ) {\n		distanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n	}\n	return distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n	return smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n	struct DirectionalLight {\n		vec3 direction;\n		vec3 color;\n	};\n	uniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n	void getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n		light.color = directionalLight.color;\n		light.direction = directionalLight.direction;\n		light.visible = true;\n	}\n#endif\n#if NUM_POINT_LIGHTS > 0\n	struct PointLight {\n		vec3 position;\n		vec3 color;\n		float distance;\n		float decay;\n	};\n	uniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n	void getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = pointLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float lightDistance = length( lVector );\n		light.color = pointLight.color;\n		light.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n		light.visible = ( light.color != vec3( 0.0 ) );\n	}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n	struct SpotLight {\n		vec3 position;\n		vec3 direction;\n		vec3 color;\n		float distance;\n		float decay;\n		float coneCos;\n		float penumbraCos;\n	};\n	uniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n	void getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n		vec3 lVector = spotLight.position - geometryPosition;\n		light.direction = normalize( lVector );\n		float angleCos = dot( light.direction, spotLight.direction );\n		float spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n		if ( spotAttenuation > 0.0 ) {\n			float lightDistance = length( lVector );\n			light.color = spotLight.color * spotAttenuation;\n			light.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n			light.visible = ( light.color != vec3( 0.0 ) );\n		} else {\n			light.color = vec3( 0.0 );\n			light.visible = false;\n		}\n	}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n	struct RectAreaLight {\n		vec3 color;\n		vec3 position;\n		vec3 halfWidth;\n		vec3 halfHeight;\n	};\n	uniform sampler2D ltc_1;	uniform sampler2D ltc_2;\n	uniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n	struct HemisphereLight {\n		vec3 direction;\n		vec3 skyColor;\n		vec3 groundColor;\n	};\n	uniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n	vec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n		float dotNL = dot( normal, hemiLight.direction );\n		float hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n		vec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n		return irradiance;\n	}\n#endif";
var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n	vec3 getIBLIrradiance( const in vec3 normal ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n			return PI * envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	vec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n		#ifdef ENVMAP_TYPE_CUBE_UV\n			vec3 reflectVec = reflect( - viewDir, normal );\n			reflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n			reflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n			vec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n			return envMapColor.rgb * envMapIntensity;\n		#else\n			return vec3( 0.0 );\n		#endif\n	}\n	#ifdef USE_ANISOTROPY\n		vec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n			#ifdef ENVMAP_TYPE_CUBE_UV\n				vec3 bentNormal = cross( bitangent, viewDir );\n				bentNormal = normalize( cross( bentNormal, bitangent ) );\n				bentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n				return getIBLRadiance( viewDir, bentNormal, roughness );\n			#else\n				return vec3( 0.0 );\n			#endif\n		}\n	#endif\n#endif";
var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";
var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n	vec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	vec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_Toon\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Toon";
var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";
var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n	vec3 diffuseColor;\n	vec3 specularColor;\n	float specularShininess;\n	float specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n	reflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct				RE_Direct_BlinnPhong\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_BlinnPhong";
var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n	material.ior = ior;\n	#ifdef USE_SPECULAR\n		float specularIntensityFactor = specularIntensity;\n		vec3 specularColorFactor = specularColor;\n		#ifdef USE_SPECULAR_COLORMAP\n			specularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n		#endif\n		#ifdef USE_SPECULAR_INTENSITYMAP\n			specularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n		#endif\n		material.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n	#else\n		float specularIntensityFactor = 1.0;\n		vec3 specularColorFactor = vec3( 1.0 );\n		material.specularF90 = 1.0;\n	#endif\n	material.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n	material.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n	material.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n	material.clearcoat = clearcoat;\n	material.clearcoatRoughness = clearcoatRoughness;\n	material.clearcoatF0 = vec3( 0.04 );\n	material.clearcoatF90 = 1.0;\n	#ifdef USE_CLEARCOATMAP\n		material.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n	#endif\n	#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n		material.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n	#endif\n	material.clearcoat = saturate( material.clearcoat );	material.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n	material.clearcoatRoughness += geometryRoughness;\n	material.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n	material.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	material.iridescence = iridescence;\n	material.iridescenceIOR = iridescenceIOR;\n	#ifdef USE_IRIDESCENCEMAP\n		material.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n	#endif\n	#ifdef USE_IRIDESCENCE_THICKNESSMAP\n		material.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n	#else\n		material.iridescenceThickness = iridescenceThicknessMaximum;\n	#endif\n#endif\n#ifdef USE_SHEEN\n	material.sheenColor = sheenColor;\n	#ifdef USE_SHEEN_COLORMAP\n		material.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n	#endif\n	material.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		material.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	#ifdef USE_ANISOTROPYMAP\n		mat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n		vec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n		vec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n	#else\n		vec2 anisotropyV = anisotropyVector;\n	#endif\n	material.anisotropy = length( anisotropyV );\n	if( material.anisotropy == 0.0 ) {\n		anisotropyV = vec2( 1.0, 0.0 );\n	} else {\n		anisotropyV /= material.anisotropy;\n		material.anisotropy = saturate( material.anisotropy );\n	}\n	material.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n	material.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n	material.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif";
var lights_physical_pars_fragment = "struct PhysicalMaterial {\n	vec3 diffuseColor;\n	float roughness;\n	vec3 specularColor;\n	float specularF90;\n	float dispersion;\n	#ifdef USE_CLEARCOAT\n		float clearcoat;\n		float clearcoatRoughness;\n		vec3 clearcoatF0;\n		float clearcoatF90;\n	#endif\n	#ifdef USE_IRIDESCENCE\n		float iridescence;\n		float iridescenceIOR;\n		float iridescenceThickness;\n		vec3 iridescenceFresnel;\n		vec3 iridescenceF0;\n	#endif\n	#ifdef USE_SHEEN\n		vec3 sheenColor;\n		float sheenRoughness;\n	#endif\n	#ifdef IOR\n		float ior;\n	#endif\n	#ifdef USE_TRANSMISSION\n		float transmission;\n		float transmissionAlpha;\n		float thickness;\n		float attenuationDistance;\n		vec3 attenuationColor;\n	#endif\n	#ifdef USE_ANISOTROPY\n		float anisotropy;\n		float alphaT;\n		vec3 anisotropyT;\n		vec3 anisotropyB;\n	#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n	float a2 = pow2( alpha );\n	float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n	float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n	return 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n	float a2 = pow2( alpha );\n	float denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n	return RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n	float V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n		float gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n		float gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n		float v = 0.5 / ( gv + gl );\n		return saturate(v);\n	}\n	float D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n		float a2 = alphaT * alphaB;\n		highp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n		highp float v2 = dot( v, v );\n		float w2 = a2 / v2;\n		return RECIPROCAL_PI * a2 * pow2 ( w2 );\n	}\n#endif\n#ifdef USE_CLEARCOAT\n	vec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n		vec3 f0 = material.clearcoatF0;\n		float f90 = material.clearcoatF90;\n		float roughness = material.clearcoatRoughness;\n		float alpha = pow2( roughness );\n		vec3 halfDir = normalize( lightDir + viewDir );\n		float dotNL = saturate( dot( normal, lightDir ) );\n		float dotNV = saturate( dot( normal, viewDir ) );\n		float dotNH = saturate( dot( normal, halfDir ) );\n		float dotVH = saturate( dot( viewDir, halfDir ) );\n		vec3 F = F_Schlick( f0, f90, dotVH );\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n		return F * ( V * D );\n	}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n	vec3 f0 = material.specularColor;\n	float f90 = material.specularF90;\n	float roughness = material.roughness;\n	float alpha = pow2( roughness );\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float dotVH = saturate( dot( viewDir, halfDir ) );\n	vec3 F = F_Schlick( f0, f90, dotVH );\n	#ifdef USE_IRIDESCENCE\n		F = mix( F, material.iridescenceFresnel, material.iridescence );\n	#endif\n	#ifdef USE_ANISOTROPY\n		float dotTL = dot( material.anisotropyT, lightDir );\n		float dotTV = dot( material.anisotropyT, viewDir );\n		float dotTH = dot( material.anisotropyT, halfDir );\n		float dotBL = dot( material.anisotropyB, lightDir );\n		float dotBV = dot( material.anisotropyB, viewDir );\n		float dotBH = dot( material.anisotropyB, halfDir );\n		float V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n		float D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n	#else\n		float V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n		float D = D_GGX( alpha, dotNH );\n	#endif\n	return F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n	const float LUT_SIZE = 64.0;\n	const float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n	const float LUT_BIAS = 0.5 / LUT_SIZE;\n	float dotNV = saturate( dot( N, V ) );\n	vec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n	uv = uv * LUT_SCALE + LUT_BIAS;\n	return uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n	float l = length( f );\n	return max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n	float x = dot( v1, v2 );\n	float y = abs( x );\n	float a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n	float b = 3.4175940 + ( 4.1616724 + y ) * y;\n	float v = a / b;\n	float theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n	return cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n	vec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n	vec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n	vec3 lightNormal = cross( v1, v2 );\n	if( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n	vec3 T1, T2;\n	T1 = normalize( V - N * dot( V, N ) );\n	T2 = - cross( N, T1 );\n	mat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n	vec3 coords[ 4 ];\n	coords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n	coords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n	coords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n	coords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n	coords[ 0 ] = normalize( coords[ 0 ] );\n	coords[ 1 ] = normalize( coords[ 1 ] );\n	coords[ 2 ] = normalize( coords[ 2 ] );\n	coords[ 3 ] = normalize( coords[ 3 ] );\n	vec3 vectorFormFactor = vec3( 0.0 );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n	vectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n	float result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n	return vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n	float alpha = pow2( roughness );\n	float invAlpha = 1.0 / alpha;\n	float cos2h = dotNH * dotNH;\n	float sin2h = max( 1.0 - cos2h, 0.0078125 );\n	return ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n	return saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n	vec3 halfDir = normalize( lightDir + viewDir );\n	float dotNL = saturate( dot( normal, lightDir ) );\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float dotNH = saturate( dot( normal, halfDir ) );\n	float D = D_Charlie( sheenRoughness, dotNH );\n	float V = V_Neubelt( dotNV, dotNL );\n	return sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	float r2 = roughness * roughness;\n	float a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n	float b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n	float DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n	return saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n	float dotNV = saturate( dot( normal, viewDir ) );\n	const vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n	const vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n	vec4 r = roughness * c0 + c1;\n	float a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n	vec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n	return fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	return specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n	vec2 fab = DFGApprox( normal, viewDir, roughness );\n	#ifdef USE_IRIDESCENCE\n		vec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n	#else\n		vec3 Fr = specularColor;\n	#endif\n	vec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n	float Ess = fab.x + fab.y;\n	float Ems = 1.0 - Ess;\n	vec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;	vec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n	singleScatter += FssEss;\n	multiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n	void RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n		vec3 normal = geometryNormal;\n		vec3 viewDir = geometryViewDir;\n		vec3 position = geometryPosition;\n		vec3 lightPos = rectAreaLight.position;\n		vec3 halfWidth = rectAreaLight.halfWidth;\n		vec3 halfHeight = rectAreaLight.halfHeight;\n		vec3 lightColor = rectAreaLight.color;\n		float roughness = material.roughness;\n		vec3 rectCoords[ 4 ];\n		rectCoords[ 0 ] = lightPos + halfWidth - halfHeight;		rectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n		rectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n		rectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n		vec2 uv = LTC_Uv( normal, viewDir, roughness );\n		vec4 t1 = texture2D( ltc_1, uv );\n		vec4 t2 = texture2D( ltc_2, uv );\n		mat3 mInv = mat3(\n			vec3( t1.x, 0, t1.y ),\n			vec3(    0, 1,    0 ),\n			vec3( t1.z, 0, t1.w )\n		);\n		vec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n		reflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n		reflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n	}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	float dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n	vec3 irradiance = dotNL * directLight.color;\n	#ifdef USE_CLEARCOAT\n		float dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n		vec3 ccIrradiance = dotNLcc * directLight.color;\n		clearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n	#endif\n	reflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n	reflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n	reflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n	#ifdef USE_CLEARCOAT\n		clearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n	#endif\n	#ifdef USE_SHEEN\n		sheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n	#endif\n	vec3 singleScattering = vec3( 0.0 );\n	vec3 multiScattering = vec3( 0.0 );\n	vec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n	#ifdef USE_IRIDESCENCE\n		computeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n	#else\n		computeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n	#endif\n	vec3 totalScattering = singleScattering + multiScattering;\n	vec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n	reflectedLight.indirectSpecular += radiance * singleScattering;\n	reflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n	reflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct				RE_Direct_Physical\n#define RE_Direct_RectArea		RE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse		RE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular		RE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n	return saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";
var lights_fragment_begin = "\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n	geometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n	float dotNVi = saturate( dot( normal, geometryViewDir ) );\n	if ( material.iridescenceThickness == 0.0 ) {\n		material.iridescence = 0.0;\n	} else {\n		material.iridescence = saturate( material.iridescence );\n	}\n	if ( material.iridescence > 0.0 ) {\n		material.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n		material.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n	}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n	PointLight pointLight;\n	#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n		pointLight = pointLights[ i ];\n		getPointLightInfo( pointLight, geometryPosition, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n		pointLightShadow = pointLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n	SpotLight spotLight;\n	vec4 spotColor;\n	vec3 spotLightCoord;\n	bool inSpotLightMap;\n	#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n		spotLight = spotLights[ i ];\n		getSpotLightInfo( spotLight, geometryPosition, directLight );\n		#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n		#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n		#else\n		#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n		#endif\n		#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n			spotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n			inSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n			spotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n			directLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n		#endif\n		#undef SPOT_LIGHT_MAP_INDEX\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n		spotLightShadow = spotLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n	DirectionalLight directionalLight;\n	#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLightShadow;\n	#endif\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n		directionalLight = directionalLights[ i ];\n		getDirectionalLightInfo( directionalLight, directLight );\n		#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n		directionalLightShadow = directionalLightShadows[ i ];\n		directLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n		#endif\n		RE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n	RectAreaLight rectAreaLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n		rectAreaLight = rectAreaLights[ i ];\n		RE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n	}\n	#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n	vec3 iblIrradiance = vec3( 0.0 );\n	vec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n	#if defined( USE_LIGHT_PROBES )\n		irradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n	#endif\n	#if ( NUM_HEMI_LIGHTS > 0 )\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n			irradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if defined( RE_IndirectSpecular )\n	vec3 radiance = vec3( 0.0 );\n	vec3 clearcoatRadiance = vec3( 0.0 );\n#endif";
var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		vec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n		irradiance += lightMapIrradiance;\n	#endif\n	#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n		iblIrradiance += getIBLIrradiance( geometryNormal );\n	#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n	#ifdef USE_ANISOTROPY\n		radiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n	#else\n		radiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n	#endif\n	#ifdef USE_CLEARCOAT\n		clearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n	#endif\n#endif";
var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n	RE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n	RE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif";
var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF )\n	gl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";
var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF )\n	uniform float logDepthBufFC;\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n	varying float vFragDepth;\n	varying float vIsPerspective;\n#endif";
var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n	vFragDepth = 1.0 + gl_Position.w;\n	vIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif";
var map_fragment = "#ifdef USE_MAP\n	vec4 sampledDiffuseColor = texture2D( map, vMapUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		sampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n	\n	#endif\n	diffuseColor *= sampledDiffuseColor;\n#endif";
var map_pars_fragment = "#ifdef USE_MAP\n	uniform sampler2D map;\n#endif";
var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n	#if defined( USE_POINTS_UV )\n		vec2 uv = vUv;\n	#else\n		vec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n	#endif\n#endif\n#ifdef USE_MAP\n	diffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n	diffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";
var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n	varying vec2 vUv;\n#else\n	#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n		uniform mat3 uvTransform;\n	#endif\n#endif\n#ifdef USE_MAP\n	uniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform sampler2D alphaMap;\n#endif";
var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n	vec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n	metalnessFactor *= texelMetalness.b;\n#endif";
var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n	uniform sampler2D metalnessMap;\n#endif";
var morphinstance_vertex = "#ifdef USE_INSTANCING_MORPH\n	float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	float morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		morphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n	}\n#endif";
var morphcolor_vertex = "#if defined( USE_MORPHCOLORS )\n	vColor *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		#if defined( USE_COLOR_ALPHA )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n		#elif defined( USE_COLOR )\n			if ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n		#endif\n	}\n#endif";
var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n	objectNormal *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n	#ifndef USE_INSTANCING_MORPH\n		uniform float morphTargetBaseInfluence;\n		uniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n	#endif\n	uniform sampler2DArray morphTargetsTexture;\n	uniform ivec2 morphTargetsTextureSize;\n	vec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n		int texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n		int y = texelIndex / morphTargetsTextureSize.x;\n		int x = texelIndex - y * morphTargetsTextureSize.x;\n		ivec3 morphUV = ivec3( x, y, morphTargetIndex );\n		return texelFetch( morphTargetsTexture, morphUV, 0 );\n	}\n#endif";
var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n	transformed *= morphTargetBaseInfluence;\n	for ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n		if ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n	}\n#endif";
var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n	vec3 fdx = dFdx( vViewPosition );\n	vec3 fdy = dFdy( vViewPosition );\n	vec3 normal = normalize( cross( fdx, fdy ) );\n#else\n	vec3 normal = normalize( vNormal );\n	#ifdef DOUBLE_SIDED\n		normal *= faceDirection;\n	#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n	#ifdef USE_TANGENT\n		mat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn = getTangentFrame( - vViewPosition, normal,\n		#if defined( USE_NORMALMAP )\n			vNormalMapUv\n		#elif defined( USE_CLEARCOAT_NORMALMAP )\n			vClearcoatNormalMapUv\n		#else\n			vUv\n		#endif\n		);\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn[0] *= faceDirection;\n		tbn[1] *= faceDirection;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	#ifdef USE_TANGENT\n		mat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n	#else\n		mat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n	#endif\n	#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n		tbn2[0] *= faceDirection;\n		tbn2[1] *= faceDirection;\n	#endif\n#endif\nvec3 nonPerturbedNormal = normal;";
var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n	normal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	#ifdef FLIP_SIDED\n		normal = - normal;\n	#endif\n	#ifdef DOUBLE_SIDED\n		normal = normal * faceDirection;\n	#endif\n	normal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n	vec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n	mapN.xy *= normalScale;\n	normal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n	normal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";
var normal_pars_fragment = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_pars_vertex = "#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n	#ifdef USE_TANGENT\n		varying vec3 vTangent;\n		varying vec3 vBitangent;\n	#endif\n#endif";
var normal_vertex = "#ifndef FLAT_SHADED\n	vNormal = normalize( transformedNormal );\n	#ifdef USE_TANGENT\n		vTangent = normalize( transformedTangent );\n		vBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n	#endif\n#endif";
var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n	uniform sampler2D normalMap;\n	uniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n	uniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n	mat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n		vec3 q0 = dFdx( eye_pos.xyz );\n		vec3 q1 = dFdy( eye_pos.xyz );\n		vec2 st0 = dFdx( uv.st );\n		vec2 st1 = dFdy( uv.st );\n		vec3 N = surf_norm;\n		vec3 q1perp = cross( q1, N );\n		vec3 q0perp = cross( N, q0 );\n		vec3 T = q1perp * st0.x + q0perp * st1.x;\n		vec3 B = q1perp * st0.y + q0perp * st1.y;\n		float det = max( dot( T, T ), dot( B, B ) );\n		float scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n		return mat3( T * scale, B * scale, N );\n	}\n#endif";
var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n	vec3 clearcoatNormal = nonPerturbedNormal;\n#endif";
var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n	vec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n	clearcoatMapN.xy *= clearcoatNormalScale;\n	clearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";
var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n	uniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform sampler2D clearcoatNormalMap;\n	uniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform sampler2D clearcoatRoughnessMap;\n#endif";
var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n	uniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform sampler2D iridescenceThicknessMap;\n#endif";
var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";
var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n	return normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n	return 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n	if( v <= 0.0 )\n		return vec4( 0., 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec4( 1., 1., 1., 1. );\n	float vuf;\n	float af = modf( v * PackFactors.a, vuf );\n	float bf = modf( vuf * ShiftRight8, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n	if( v <= 0.0 )\n		return vec3( 0., 0., 0. );\n	if( v >= 1.0 )\n		return vec3( 1., 1., 1. );\n	float vuf;\n	float bf = modf( v * PackFactors.b, vuf );\n	float gf = modf( vuf * ShiftRight8, vuf );\n	return vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n	if( v <= 0.0 )\n		return vec2( 0., 0. );\n	if( v >= 1.0 )\n		return vec2( 1., 1. );\n	float vuf;\n	float gf = modf( v * 256., vuf );\n	return vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n	return dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n	return dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n	return v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n	vec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n	return vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n	return vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n	return ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n	return ( near * far ) / ( ( far - near ) * depth - far );\n}";
var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n	gl_FragColor.rgb *= gl_FragColor.a;\n#endif";
var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n	mvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n	mvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";
var dithering_fragment = "#ifdef DITHERING\n	gl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";
var dithering_pars_fragment = "#ifdef DITHERING\n	vec3 dithering( vec3 color ) {\n		float grid_position = rand( gl_FragCoord.xy );\n		vec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n		dither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n		return color + dither_shift_RGB;\n	}\n#endif";
var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n	vec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n	roughnessFactor *= texelRoughness.g;\n#endif";
var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n	uniform sampler2D roughnessMap;\n#endif";
var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n	uniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		uniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n	float texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n		return step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n	}\n	vec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n		return unpackRGBATo2Half( texture2D( shadow, uv ) );\n	}\n	float VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n		float occlusion = 1.0;\n		vec2 distribution = texture2DDistribution( shadow, uv );\n		float hard_shadow = step( compare , distribution.x );\n		if (hard_shadow != 1.0 ) {\n			float distance = compare - distribution.x ;\n			float variance = max( 0.00000, distribution.y * distribution.y );\n			float softness_probability = variance / (variance + distance * distance );			softness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );			occlusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n		}\n		return occlusion;\n	}\n	float getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n		float shadow = 1.0;\n		shadowCoord.xyz /= shadowCoord.w;\n		shadowCoord.z += shadowBias;\n		bool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n		bool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n		if ( frustumTest ) {\n		#if defined( SHADOWMAP_TYPE_PCF )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx0 = - texelSize.x * shadowRadius;\n			float dy0 = - texelSize.y * shadowRadius;\n			float dx1 = + texelSize.x * shadowRadius;\n			float dy1 = + texelSize.y * shadowRadius;\n			float dx2 = dx0 / 2.0;\n			float dy2 = dy0 / 2.0;\n			float dx3 = dx1 / 2.0;\n			float dy3 = dy1 / 2.0;\n			shadow = (\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n			) * ( 1.0 / 17.0 );\n		#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n			vec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n			float dx = texelSize.x;\n			float dy = texelSize.y;\n			vec2 uv = shadowCoord.xy;\n			vec2 f = fract( uv * shadowMapSize + 0.5 );\n			uv -= f * texelSize;\n			shadow = (\n				texture2DCompare( shadowMap, uv, shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n				texture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n					 f.x ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n					 texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n					 f.y ) +\n				mix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n						  f.x ),\n					 mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n						  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n						  f.x ),\n					 f.y )\n			) * ( 1.0 / 9.0 );\n		#elif defined( SHADOWMAP_TYPE_VSM )\n			shadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#else\n			shadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n		#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n	vec2 cubeToUV( vec3 v, float texelSizeY ) {\n		vec3 absV = abs( v );\n		float scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n		absV *= scaleToCube;\n		v *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n		vec2 planar = v.xy;\n		float almostATexel = 1.5 * texelSizeY;\n		float almostOne = 1.0 - almostATexel;\n		if ( absV.z >= almostOne ) {\n			if ( v.z > 0.0 )\n				planar.x = 4.0 - v.x;\n		} else if ( absV.x >= almostOne ) {\n			float signX = sign( v.x );\n			planar.x = v.z * signX + 2.0 * signX;\n		} else if ( absV.y >= almostOne ) {\n			float signY = sign( v.y );\n			planar.x = v.x + 2.0 * signY + 2.0;\n			planar.y = v.z * signY - 2.0;\n		}\n		return vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n	}\n	float getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n		float shadow = 1.0;\n		vec3 lightToPosition = shadowCoord.xyz;\n		\n		float lightToPositionLength = length( lightToPosition );\n		if ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n			float dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );			dp += shadowBias;\n			vec3 bd3D = normalize( lightToPosition );\n			vec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n			#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n				vec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n				shadow = (\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n					texture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n				) * ( 1.0 / 9.0 );\n			#else\n				shadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n			#endif\n		}\n		return mix( 1.0, shadow, shadowIntensity );\n	}\n#endif";
var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n	uniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n	varying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		uniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n		varying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n		struct DirectionalLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n		struct SpotLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n		};\n		uniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		uniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n		varying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n		struct PointLightShadow {\n			float shadowIntensity;\n			float shadowBias;\n			float shadowNormalBias;\n			float shadowRadius;\n			vec2 shadowMapSize;\n			float shadowCameraNear;\n			float shadowCameraFar;\n		};\n		uniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n	#endif\n#endif";
var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n	vec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n	vec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n			vDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n		#pragma unroll_loop_start\n		for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n			shadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n			vPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n		}\n		#pragma unroll_loop_end\n	#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n		shadowWorldPosition = worldPosition;\n		#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n			shadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n		#endif\n		vSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n	}\n	#pragma unroll_loop_end\n#endif";
var shadowmask_pars_fragment = "float getShadowMask() {\n	float shadow = 1.0;\n	#ifdef USE_SHADOWMAP\n	#if NUM_DIR_LIGHT_SHADOWS > 0\n	DirectionalLightShadow directionalLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n		directionalLight = directionalLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_SPOT_LIGHT_SHADOWS > 0\n	SpotLightShadow spotLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n		spotLight = spotLightShadows[ i ];\n		shadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#if NUM_POINT_LIGHT_SHADOWS > 0\n	PointLightShadow pointLight;\n	#pragma unroll_loop_start\n	for ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n		pointLight = pointLightShadows[ i ];\n		shadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n	}\n	#pragma unroll_loop_end\n	#endif\n	#endif\n	return shadow;\n}";
var skinbase_vertex = "#ifdef USE_SKINNING\n	mat4 boneMatX = getBoneMatrix( skinIndex.x );\n	mat4 boneMatY = getBoneMatrix( skinIndex.y );\n	mat4 boneMatZ = getBoneMatrix( skinIndex.z );\n	mat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";
var skinning_pars_vertex = "#ifdef USE_SKINNING\n	uniform mat4 bindMatrix;\n	uniform mat4 bindMatrixInverse;\n	uniform highp sampler2D boneTexture;\n	mat4 getBoneMatrix( const in float i ) {\n		int size = textureSize( boneTexture, 0 ).x;\n		int j = int( i ) * 4;\n		int x = j % size;\n		int y = j / size;\n		vec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n		vec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n		vec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n		vec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n		return mat4( v1, v2, v3, v4 );\n	}\n#endif";
var skinning_vertex = "#ifdef USE_SKINNING\n	vec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n	vec4 skinned = vec4( 0.0 );\n	skinned += boneMatX * skinVertex * skinWeight.x;\n	skinned += boneMatY * skinVertex * skinWeight.y;\n	skinned += boneMatZ * skinVertex * skinWeight.z;\n	skinned += boneMatW * skinVertex * skinWeight.w;\n	transformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";
var skinnormal_vertex = "#ifdef USE_SKINNING\n	mat4 skinMatrix = mat4( 0.0 );\n	skinMatrix += skinWeight.x * boneMatX;\n	skinMatrix += skinWeight.y * boneMatY;\n	skinMatrix += skinWeight.z * boneMatZ;\n	skinMatrix += skinWeight.w * boneMatW;\n	skinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n	objectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n	#ifdef USE_TANGENT\n		objectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n	#endif\n#endif";
var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n	vec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n	specularStrength = texelSpecular.r;\n#else\n	specularStrength = 1.0;\n#endif";
var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n	uniform sampler2D specularMap;\n#endif";
var tonemapping_fragment = "#if defined( TONE_MAPPING )\n	gl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";
var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n	return saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	return saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n	color *= toneMappingExposure;\n	color = max( vec3( 0.0 ), color - 0.004 );\n	return pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n	vec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n	vec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n	return a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n	const mat3 ACESInputMat = mat3(\n		vec3( 0.59719, 0.07600, 0.02840 ),		vec3( 0.35458, 0.90834, 0.13383 ),\n		vec3( 0.04823, 0.01566, 0.83777 )\n	);\n	const mat3 ACESOutputMat = mat3(\n		vec3(  1.60475, -0.10208, -0.00327 ),		vec3( -0.53108,  1.10813, -0.07276 ),\n		vec3( -0.07367, -0.00605,  1.07602 )\n	);\n	color *= toneMappingExposure / 0.6;\n	color = ACESInputMat * color;\n	color = RRTAndODTFit( color );\n	color = ACESOutputMat * color;\n	return saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n	vec3( 1.6605, - 0.1246, - 0.0182 ),\n	vec3( - 0.5876, 1.1329, - 0.1006 ),\n	vec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n	vec3( 0.6274, 0.0691, 0.0164 ),\n	vec3( 0.3293, 0.9195, 0.0880 ),\n	vec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n	vec3 x2 = x * x;\n	vec3 x4 = x2 * x2;\n	return + 15.5 * x4 * x2\n		- 40.14 * x4 * x\n		+ 31.96 * x4\n		- 6.868 * x2 * x\n		+ 0.4298 * x2\n		+ 0.1191 * x\n		- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n	const mat3 AgXInsetMatrix = mat3(\n		vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n		vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n		vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n	);\n	const mat3 AgXOutsetMatrix = mat3(\n		vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n		vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n		vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n	);\n	const float AgxMinEv = - 12.47393;	const float AgxMaxEv = 4.026069;\n	color *= toneMappingExposure;\n	color = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n	color = AgXInsetMatrix * color;\n	color = max( color, 1e-10 );	color = log2( color );\n	color = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n	color = clamp( color, 0.0, 1.0 );\n	color = agxDefaultContrastApprox( color );\n	color = AgXOutsetMatrix * color;\n	color = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n	color = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n	color = clamp( color, 0.0, 1.0 );\n	return color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n	const float StartCompression = 0.8 - 0.04;\n	const float Desaturation = 0.15;\n	color *= toneMappingExposure;\n	float x = min( color.r, min( color.g, color.b ) );\n	float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n	color -= offset;\n	float peak = max( color.r, max( color.g, color.b ) );\n	if ( peak < StartCompression ) return color;\n	float d = 1. - StartCompression;\n	float newPeak = 1. - d * d / ( peak + d - StartCompression );\n	color *= newPeak / peak;\n	float g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n	return mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";
var transmission_fragment = "#ifdef USE_TRANSMISSION\n	material.transmission = transmission;\n	material.transmissionAlpha = 1.0;\n	material.thickness = thickness;\n	material.attenuationDistance = attenuationDistance;\n	material.attenuationColor = attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		material.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		material.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n	#endif\n	vec3 pos = vWorldPosition;\n	vec3 v = normalize( cameraPosition - pos );\n	vec3 n = inverseTransformDirection( normal, viewMatrix );\n	vec4 transmitted = getIBLVolumeRefraction(\n		n, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n		pos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n		material.attenuationColor, material.attenuationDistance );\n	material.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n	totalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";
var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n	uniform float transmission;\n	uniform float thickness;\n	uniform float attenuationDistance;\n	uniform vec3 attenuationColor;\n	#ifdef USE_TRANSMISSIONMAP\n		uniform sampler2D transmissionMap;\n	#endif\n	#ifdef USE_THICKNESSMAP\n		uniform sampler2D thicknessMap;\n	#endif\n	uniform vec2 transmissionSamplerSize;\n	uniform sampler2D transmissionSamplerMap;\n	uniform mat4 modelMatrix;\n	uniform mat4 projectionMatrix;\n	varying vec3 vWorldPosition;\n	float w0( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n	}\n	float w1( float a ) {\n		return ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n	}\n	float w2( float a ){\n		return ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n	}\n	float w3( float a ) {\n		return ( 1.0 / 6.0 ) * ( a * a * a );\n	}\n	float g0( float a ) {\n		return w0( a ) + w1( a );\n	}\n	float g1( float a ) {\n		return w2( a ) + w3( a );\n	}\n	float h0( float a ) {\n		return - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n	}\n	float h1( float a ) {\n		return 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n	}\n	vec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n		uv = uv * texelSize.zw + 0.5;\n		vec2 iuv = floor( uv );\n		vec2 fuv = fract( uv );\n		float g0x = g0( fuv.x );\n		float g1x = g1( fuv.x );\n		float h0x = h0( fuv.x );\n		float h1x = h1( fuv.x );\n		float h0y = h0( fuv.y );\n		float h1y = h1( fuv.y );\n		vec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n		vec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		vec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n		return g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n			g1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n	}\n	vec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n		vec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n		vec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n		vec2 fLodSizeInv = 1.0 / fLodSize;\n		vec2 cLodSizeInv = 1.0 / cLodSize;\n		vec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n		vec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n		return mix( fSample, cSample, fract( lod ) );\n	}\n	vec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n		vec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n		vec3 modelScale;\n		modelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n		modelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n		modelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n		return normalize( refractionVector ) * thickness * modelScale;\n	}\n	float applyIorToRoughness( const in float roughness, const in float ior ) {\n		return roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n	}\n	vec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n		float lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n		return textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n	}\n	vec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n		if ( isinf( attenuationDistance ) ) {\n			return vec3( 1.0 );\n		} else {\n			vec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n			vec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );			return transmittance;\n		}\n	}\n	vec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n		const in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n		const in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n		const in vec3 attenuationColor, const in float attenuationDistance ) {\n		vec4 transmittedLight;\n		vec3 transmittance;\n		#ifdef USE_DISPERSION\n			float halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n			vec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n			for ( int i = 0; i < 3; i ++ ) {\n				vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n				vec3 refractedRayExit = position + transmissionRay;\n		\n				vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n				vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n				refractionCoords += 1.0;\n				refractionCoords /= 2.0;\n		\n				vec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n				transmittedLight[ i ] = transmissionSample[ i ];\n				transmittedLight.a += transmissionSample.a;\n				transmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n			}\n			transmittedLight.a /= 3.0;\n		\n		#else\n		\n			vec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n			vec3 refractedRayExit = position + transmissionRay;\n			vec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n			vec2 refractionCoords = ndcPos.xy / ndcPos.w;\n			refractionCoords += 1.0;\n			refractionCoords /= 2.0;\n			transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n			transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n		\n		#endif\n		vec3 attenuatedColor = transmittance * transmittedLight.rgb;\n		vec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n		float transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n		return vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n	}\n#endif";
var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	varying vec2 vUv;\n#endif\n#ifdef USE_MAP\n	uniform mat3 mapTransform;\n	varying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n	uniform mat3 alphaMapTransform;\n	varying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n	uniform mat3 lightMapTransform;\n	varying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n	uniform mat3 aoMapTransform;\n	varying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n	uniform mat3 bumpMapTransform;\n	varying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n	uniform mat3 normalMapTransform;\n	varying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	uniform mat3 displacementMapTransform;\n	varying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n	uniform mat3 emissiveMapTransform;\n	varying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n	uniform mat3 metalnessMapTransform;\n	varying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	uniform mat3 roughnessMapTransform;\n	varying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	uniform mat3 anisotropyMapTransform;\n	varying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n	uniform mat3 clearcoatMapTransform;\n	varying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	uniform mat3 clearcoatNormalMapTransform;\n	varying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	uniform mat3 clearcoatRoughnessMapTransform;\n	varying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	uniform mat3 sheenColorMapTransform;\n	varying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	uniform mat3 sheenRoughnessMapTransform;\n	varying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	uniform mat3 iridescenceMapTransform;\n	varying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	uniform mat3 iridescenceThicknessMapTransform;\n	varying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n	uniform mat3 specularMapTransform;\n	varying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	uniform mat3 specularColorMapTransform;\n	varying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	uniform mat3 specularIntensityMapTransform;\n	varying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	uniform mat3 transmissionMapTransform;\n	varying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n	uniform mat3 thicknessMapTransform;\n	varying vec2 vThicknessMapUv;\n#endif";
var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n	vUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n	vMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n	vAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n	vLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n	vAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n	vBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n	vNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n	vDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n	vEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n	vMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n	vRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n	vAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n	vClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n	vClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n	vClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n	vIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n	vIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n	vSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n	vSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n	vSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n	vSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n	vSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n	vTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n	vThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";
var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n	vec4 worldPosition = vec4( transformed, 1.0 );\n	#ifdef USE_BATCHING\n		worldPosition = batchingMatrix * worldPosition;\n	#endif\n	#ifdef USE_INSTANCING\n		worldPosition = instanceMatrix * worldPosition;\n	#endif\n	worldPosition = modelMatrix * worldPosition;\n#endif";
var vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n	vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	gl_Position = vec4( position.xy, 1.0, 1.0 );\n}";
var fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n	vec4 texColor = texture2D( t2D, vUv );\n	#ifdef DECODE_VIDEO_TEXTURE\n		texColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
var vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n	uniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n	uniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n	#ifdef ENVMAP_TYPE_CUBE\n		vec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n	#elif defined( ENVMAP_TYPE_CUBE_UV )\n		vec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n	#else\n		vec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n	#endif\n	texColor.rgb *= backgroundIntensity;\n	gl_FragColor = texColor;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
var vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n	gl_Position.z = gl_Position.w;\n}";
var fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n	vec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n	gl_FragColor = texColor;\n	gl_FragColor.a *= opacity;\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
var vertex$e = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vHighPrecisionZW = gl_Position.zw;\n}";
var fragment$e = "#if DEPTH_PACKING == 3200\n	uniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#if DEPTH_PACKING == 3200\n		diffuseColor.a = opacity;\n	#endif\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <logdepthbuf_fragment>\n	float fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n	#if DEPTH_PACKING == 3200\n		gl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n	#elif DEPTH_PACKING == 3201\n		gl_FragColor = packDepthToRGBA( fragCoordZ );\n	#elif DEPTH_PACKING == 3202\n		gl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n	#elif DEPTH_PACKING == 3203\n		gl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n	#endif\n}";
var vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <skinbase_vertex>\n	#include <morphinstance_vertex>\n	#ifdef USE_DISPLACEMENTMAP\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <worldpos_vertex>\n	#include <clipping_planes_vertex>\n	vWorldPosition = worldPosition.xyz;\n}";
var fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n	vec4 diffuseColor = vec4( 1.0 );\n	#include <clipping_planes_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	float dist = length( vWorldPosition - referencePosition );\n	dist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n	dist = saturate( dist );\n	gl_FragColor = packDepthToRGBA( dist );\n}";
var vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vWorldDirection = transformDirection( position, modelMatrix );\n	#include <begin_vertex>\n	#include <project_vertex>\n}";
var fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n	vec3 direction = normalize( vWorldDirection );\n	vec2 sampleUV = equirectUv( direction );\n	gl_FragColor = texture2D( tEquirect, sampleUV );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n}";
var vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	vLineDistance = scale * lineDistance;\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	if ( mod( vLineDistance, totalSize ) > dashSize ) {\n		discard;\n	}\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var vertex$a = "#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n		#include <beginnormal_vertex>\n		#include <morphnormal_vertex>\n		#include <skinbase_vertex>\n		#include <skinnormal_vertex>\n		#include <defaultnormal_vertex>\n	#endif\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <fog_vertex>\n}";
var fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n	varying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	#ifdef USE_LIGHTMAP\n		vec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n		reflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n	#else\n		reflectedLight.indirectDiffuse += vec3( 1.0 );\n	#endif\n	#include <aomap_fragment>\n	reflectedLight.indirectDiffuse *= diffuseColor.rgb;\n	vec3 outgoingLight = reflectedLight.indirectDiffuse;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_lambert_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n	vViewPosition = - mvPosition.xyz;\n}";
var fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	vec3 viewDir = normalize( vViewPosition );\n	vec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n	vec3 y = cross( viewDir, x );\n	vec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n	#ifdef USE_MATCAP\n		vec4 matcapColor = texture2D( matcap, uv );\n	#else\n		vec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n	#endif\n	vec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	vViewPosition = - mvPosition.xyz;\n#endif\n}";
var fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n	varying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n	#include <clipping_planes_fragment>\n	#include <logdepthbuf_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	gl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n	#ifdef OPAQUE\n		gl_FragColor.a = 1.0;\n	#endif\n}";
var vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <envmap_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <specularmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_phong_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n	#include <envmap_fragment>\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n	varying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n	vWorldPosition = worldPosition.xyz;\n#endif\n}";
var fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n	#define IOR\n	#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n	uniform float ior;\n#endif\n#ifdef USE_SPECULAR\n	uniform float specularIntensity;\n	uniform vec3 specularColor;\n	#ifdef USE_SPECULAR_COLORMAP\n		uniform sampler2D specularColorMap;\n	#endif\n	#ifdef USE_SPECULAR_INTENSITYMAP\n		uniform sampler2D specularIntensityMap;\n	#endif\n#endif\n#ifdef USE_CLEARCOAT\n	uniform float clearcoat;\n	uniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n	uniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n	uniform float iridescence;\n	uniform float iridescenceIOR;\n	uniform float iridescenceThicknessMinimum;\n	uniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n	uniform vec3 sheenColor;\n	uniform float sheenRoughness;\n	#ifdef USE_SHEEN_COLORMAP\n		uniform sampler2D sheenColorMap;\n	#endif\n	#ifdef USE_SHEEN_ROUGHNESSMAP\n		uniform sampler2D sheenRoughnessMap;\n	#endif\n#endif\n#ifdef USE_ANISOTROPY\n	uniform vec2 anisotropyVector;\n	#ifdef USE_ANISOTROPYMAP\n		uniform sampler2D anisotropyMap;\n	#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <roughnessmap_fragment>\n	#include <metalnessmap_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <clearcoat_normal_fragment_begin>\n	#include <clearcoat_normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_physical_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n	#include <transmission_fragment>\n	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n	#ifdef USE_SHEEN\n		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n	#endif\n	#ifdef USE_CLEARCOAT\n		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n	#endif\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <normal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <displacementmap_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	vViewPosition = - mvPosition.xyz;\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n	vec3 totalEmissiveRadiance = emissive;\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <color_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	#include <normal_fragment_begin>\n	#include <normal_fragment_maps>\n	#include <emissivemap_fragment>\n	#include <lights_toon_fragment>\n	#include <lights_fragment_begin>\n	#include <lights_fragment_maps>\n	#include <lights_fragment_end>\n	#include <aomap_fragment>\n	vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n	#include <dithering_fragment>\n}";
var vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n	varying vec2 vUv;\n	uniform mat3 uvTransform;\n#endif\nvoid main() {\n	#ifdef USE_POINTS_UV\n		vUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n	#endif\n	#include <color_vertex>\n	#include <morphinstance_vertex>\n	#include <morphcolor_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <project_vertex>\n	gl_PointSize = size;\n	#ifdef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n	#endif\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <worldpos_vertex>\n	#include <fog_vertex>\n}";
var fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_particle_fragment>\n	#include <color_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n	#include <premultiplied_alpha_fragment>\n}";
var vertex$2 = "#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n	#include <batching_vertex>\n	#include <beginnormal_vertex>\n	#include <morphinstance_vertex>\n	#include <morphnormal_vertex>\n	#include <skinbase_vertex>\n	#include <skinnormal_vertex>\n	#include <defaultnormal_vertex>\n	#include <begin_vertex>\n	#include <morphtarget_vertex>\n	#include <skinning_vertex>\n	#include <project_vertex>\n	#include <logdepthbuf_vertex>\n	#include <worldpos_vertex>\n	#include <shadowmap_vertex>\n	#include <fog_vertex>\n}";
var fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n	#include <logdepthbuf_fragment>\n	gl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
var vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n	#include <uv_vertex>\n	vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n	vec2 scale;\n	scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n	scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n	#ifndef USE_SIZEATTENUATION\n		bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n		if ( isPerspective ) scale *= - mvPosition.z;\n	#endif\n	vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n	vec2 rotatedPosition;\n	rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n	rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n	mvPosition.xy += rotatedPosition;\n	gl_Position = projectionMatrix * mvPosition;\n	#include <logdepthbuf_vertex>\n	#include <clipping_planes_vertex>\n	#include <fog_vertex>\n}";
var fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n	vec4 diffuseColor = vec4( diffuse, opacity );\n	#include <clipping_planes_fragment>\n	vec3 outgoingLight = vec3( 0.0 );\n	#include <logdepthbuf_fragment>\n	#include <map_fragment>\n	#include <alphamap_fragment>\n	#include <alphatest_fragment>\n	#include <alphahash_fragment>\n	outgoingLight = diffuseColor.rgb;\n	#include <opaque_fragment>\n	#include <tonemapping_fragment>\n	#include <colorspace_fragment>\n	#include <fog_fragment>\n}";
var ShaderChunk = {
  alphahash_fragment,
  alphahash_pars_fragment,
  alphamap_fragment,
  alphamap_pars_fragment,
  alphatest_fragment,
  alphatest_pars_fragment,
  aomap_fragment,
  aomap_pars_fragment,
  batching_pars_vertex,
  batching_vertex,
  begin_vertex,
  beginnormal_vertex,
  bsdfs,
  iridescence_fragment,
  bumpmap_pars_fragment,
  clipping_planes_fragment,
  clipping_planes_pars_fragment,
  clipping_planes_pars_vertex,
  clipping_planes_vertex,
  color_fragment,
  color_pars_fragment,
  color_pars_vertex,
  color_vertex,
  common,
  cube_uv_reflection_fragment,
  defaultnormal_vertex,
  displacementmap_pars_vertex,
  displacementmap_vertex,
  emissivemap_fragment,
  emissivemap_pars_fragment,
  colorspace_fragment,
  colorspace_pars_fragment,
  envmap_fragment,
  envmap_common_pars_fragment,
  envmap_pars_fragment,
  envmap_pars_vertex,
  envmap_physical_pars_fragment,
  envmap_vertex,
  fog_vertex,
  fog_pars_vertex,
  fog_fragment,
  fog_pars_fragment,
  gradientmap_pars_fragment,
  lightmap_pars_fragment,
  lights_lambert_fragment,
  lights_lambert_pars_fragment,
  lights_pars_begin,
  lights_toon_fragment,
  lights_toon_pars_fragment,
  lights_phong_fragment,
  lights_phong_pars_fragment,
  lights_physical_fragment,
  lights_physical_pars_fragment,
  lights_fragment_begin,
  lights_fragment_maps,
  lights_fragment_end,
  logdepthbuf_fragment,
  logdepthbuf_pars_fragment,
  logdepthbuf_pars_vertex,
  logdepthbuf_vertex,
  map_fragment,
  map_pars_fragment,
  map_particle_fragment,
  map_particle_pars_fragment,
  metalnessmap_fragment,
  metalnessmap_pars_fragment,
  morphinstance_vertex,
  morphcolor_vertex,
  morphnormal_vertex,
  morphtarget_pars_vertex,
  morphtarget_vertex,
  normal_fragment_begin,
  normal_fragment_maps,
  normal_pars_fragment,
  normal_pars_vertex,
  normal_vertex,
  normalmap_pars_fragment,
  clearcoat_normal_fragment_begin,
  clearcoat_normal_fragment_maps,
  clearcoat_pars_fragment,
  iridescence_pars_fragment,
  opaque_fragment,
  packing,
  premultiplied_alpha_fragment,
  project_vertex,
  dithering_fragment,
  dithering_pars_fragment,
  roughnessmap_fragment,
  roughnessmap_pars_fragment,
  shadowmap_pars_fragment,
  shadowmap_pars_vertex,
  shadowmap_vertex,
  shadowmask_pars_fragment,
  skinbase_vertex,
  skinning_pars_vertex,
  skinning_vertex,
  skinnormal_vertex,
  specularmap_fragment,
  specularmap_pars_fragment,
  tonemapping_fragment,
  tonemapping_pars_fragment,
  transmission_fragment,
  transmission_pars_fragment,
  uv_pars_fragment,
  uv_pars_vertex,
  uv_vertex,
  worldpos_vertex,
  background_vert: vertex$h,
  background_frag: fragment$h,
  backgroundCube_vert: vertex$g,
  backgroundCube_frag: fragment$g,
  cube_vert: vertex$f,
  cube_frag: fragment$f,
  depth_vert: vertex$e,
  depth_frag: fragment$e,
  distanceRGBA_vert: vertex$d,
  distanceRGBA_frag: fragment$d,
  equirect_vert: vertex$c,
  equirect_frag: fragment$c,
  linedashed_vert: vertex$b,
  linedashed_frag: fragment$b,
  meshbasic_vert: vertex$a,
  meshbasic_frag: fragment$a,
  meshlambert_vert: vertex$9,
  meshlambert_frag: fragment$9,
  meshmatcap_vert: vertex$8,
  meshmatcap_frag: fragment$8,
  meshnormal_vert: vertex$7,
  meshnormal_frag: fragment$7,
  meshphong_vert: vertex$6,
  meshphong_frag: fragment$6,
  meshphysical_vert: vertex$5,
  meshphysical_frag: fragment$5,
  meshtoon_vert: vertex$4,
  meshtoon_frag: fragment$4,
  points_vert: vertex$3,
  points_frag: fragment$3,
  shadow_vert: vertex$2,
  shadow_frag: fragment$2,
  sprite_vert: vertex$1,
  sprite_frag: fragment$1
};
var UniformsLib = {
  common: {
    diffuse: { value: new Color(16777215) },
    opacity: { value: 1 },
    map: { value: null },
    mapTransform: { value: new Matrix3() },
    alphaMap: { value: null },
    alphaMapTransform: { value: new Matrix3() },
    alphaTest: { value: 0 }
  },
  specularmap: {
    specularMap: { value: null },
    specularMapTransform: { value: new Matrix3() }
  },
  envmap: {
    envMap: { value: null },
    envMapRotation: { value: new Matrix3() },
    flipEnvMap: { value: -1 },
    reflectivity: { value: 1 },
    // basic, lambert, phong
    ior: { value: 1.5 },
    // physical
    refractionRatio: { value: 0.98 }
    // basic, lambert, phong
  },
  aomap: {
    aoMap: { value: null },
    aoMapIntensity: { value: 1 },
    aoMapTransform: { value: new Matrix3() }
  },
  lightmap: {
    lightMap: { value: null },
    lightMapIntensity: { value: 1 },
    lightMapTransform: { value: new Matrix3() }
  },
  bumpmap: {
    bumpMap: { value: null },
    bumpMapTransform: { value: new Matrix3() },
    bumpScale: { value: 1 }
  },
  normalmap: {
    normalMap: { value: null },
    normalMapTransform: { value: new Matrix3() },
    normalScale: { value: new Vector2(1, 1) }
  },
  displacementmap: {
    displacementMap: { value: null },
    displacementMapTransform: { value: new Matrix3() },
    displacementScale: { value: 1 },
    displacementBias: { value: 0 }
  },
  emissivemap: {
    emissiveMap: { value: null },
    emissiveMapTransform: { value: new Matrix3() }
  },
  metalnessmap: {
    metalnessMap: { value: null },
    metalnessMapTransform: { value: new Matrix3() }
  },
  roughnessmap: {
    roughnessMap: { value: null },
    roughnessMapTransform: { value: new Matrix3() }
  },
  gradientmap: {
    gradientMap: { value: null }
  },
  fog: {
    fogDensity: { value: 25e-5 },
    fogNear: { value: 1 },
    fogFar: { value: 2e3 },
    fogColor: { value: new Color(16777215) }
  },
  lights: {
    ambientLightColor: { value: [] },
    lightProbe: { value: [] },
    directionalLights: { value: [], properties: {
      direction: {},
      color: {}
    } },
    directionalLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    directionalShadowMap: { value: [] },
    directionalShadowMatrix: { value: [] },
    spotLights: { value: [], properties: {
      color: {},
      position: {},
      direction: {},
      distance: {},
      coneCos: {},
      penumbraCos: {},
      decay: {}
    } },
    spotLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {}
    } },
    spotLightMap: { value: [] },
    spotShadowMap: { value: [] },
    spotLightMatrix: { value: [] },
    pointLights: { value: [], properties: {
      color: {},
      position: {},
      decay: {},
      distance: {}
    } },
    pointLightShadows: { value: [], properties: {
      shadowIntensity: 1,
      shadowBias: {},
      shadowNormalBias: {},
      shadowRadius: {},
      shadowMapSize: {},
      shadowCameraNear: {},
      shadowCameraFar: {}
    } },
    pointShadowMap: { value: [] },
    pointShadowMatrix: { value: [] },
    hemisphereLights: { value: [], properties: {
      direction: {},
      skyColor: {},
      groundColor: {}
    } },
    // TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
    rectAreaLights: { value: [], properties: {
      color: {},
      position: {},
      width: {},
      height: {}
    } },
    ltc_1: { value: null },
    ltc_2: { value: null }
  },
  points: {
    diffuse: { value: new Color(16777215) },
    opacity: { value: 1 },
    size: { value: 1 },
    scale: { value: 1 },
    map: { value: null },
    alphaMap: { value: null },
    alphaMapTransform: { value: new Matrix3() },
    alphaTest: { value: 0 },
    uvTransform: { value: new Matrix3() }
  },
  sprite: {
    diffuse: { value: new Color(16777215) },
    opacity: { value: 1 },
    center: { value: new Vector2(0.5, 0.5) },
    rotation: { value: 0 },
    map: { value: null },
    mapTransform: { value: new Matrix3() },
    alphaMap: { value: null },
    alphaMapTransform: { value: new Matrix3() },
    alphaTest: { value: 0 }
  }
};
var ShaderLib = {
  basic: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.meshbasic_vert,
    fragmentShader: ShaderChunk.meshbasic_frag
  },
  lambert: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshlambert_vert,
    fragmentShader: ShaderChunk.meshlambert_frag
  },
  phong: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.specularmap,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) },
        specular: { value: new Color(1118481) },
        shininess: { value: 30 }
      }
    ]),
    vertexShader: ShaderChunk.meshphong_vert,
    fragmentShader: ShaderChunk.meshphong_frag
  },
  standard: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.envmap,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.roughnessmap,
      UniformsLib.metalnessmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) },
        roughness: { value: 1 },
        metalness: { value: 0 },
        envMapIntensity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshphysical_vert,
    fragmentShader: ShaderChunk.meshphysical_frag
  },
  toon: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.aomap,
      UniformsLib.lightmap,
      UniformsLib.emissivemap,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.gradientmap,
      UniformsLib.fog,
      UniformsLib.lights,
      {
        emissive: { value: new Color(0) }
      }
    ]),
    vertexShader: ShaderChunk.meshtoon_vert,
    fragmentShader: ShaderChunk.meshtoon_frag
  },
  matcap: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      UniformsLib.fog,
      {
        matcap: { value: null }
      }
    ]),
    vertexShader: ShaderChunk.meshmatcap_vert,
    fragmentShader: ShaderChunk.meshmatcap_frag
  },
  points: {
    uniforms: mergeUniforms([
      UniformsLib.points,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.points_vert,
    fragmentShader: ShaderChunk.points_frag
  },
  dashed: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.fog,
      {
        scale: { value: 1 },
        dashSize: { value: 1 },
        totalSize: { value: 2 }
      }
    ]),
    vertexShader: ShaderChunk.linedashed_vert,
    fragmentShader: ShaderChunk.linedashed_frag
  },
  depth: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap
    ]),
    vertexShader: ShaderChunk.depth_vert,
    fragmentShader: ShaderChunk.depth_frag
  },
  normal: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.bumpmap,
      UniformsLib.normalmap,
      UniformsLib.displacementmap,
      {
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.meshnormal_vert,
    fragmentShader: ShaderChunk.meshnormal_frag
  },
  sprite: {
    uniforms: mergeUniforms([
      UniformsLib.sprite,
      UniformsLib.fog
    ]),
    vertexShader: ShaderChunk.sprite_vert,
    fragmentShader: ShaderChunk.sprite_frag
  },
  background: {
    uniforms: {
      uvTransform: { value: new Matrix3() },
      t2D: { value: null },
      backgroundIntensity: { value: 1 }
    },
    vertexShader: ShaderChunk.background_vert,
    fragmentShader: ShaderChunk.background_frag
  },
  backgroundCube: {
    uniforms: {
      envMap: { value: null },
      flipEnvMap: { value: -1 },
      backgroundBlurriness: { value: 0 },
      backgroundIntensity: { value: 1 },
      backgroundRotation: { value: new Matrix3() }
    },
    vertexShader: ShaderChunk.backgroundCube_vert,
    fragmentShader: ShaderChunk.backgroundCube_frag
  },
  cube: {
    uniforms: {
      tCube: { value: null },
      tFlip: { value: -1 },
      opacity: { value: 1 }
    },
    vertexShader: ShaderChunk.cube_vert,
    fragmentShader: ShaderChunk.cube_frag
  },
  equirect: {
    uniforms: {
      tEquirect: { value: null }
    },
    vertexShader: ShaderChunk.equirect_vert,
    fragmentShader: ShaderChunk.equirect_frag
  },
  distanceRGBA: {
    uniforms: mergeUniforms([
      UniformsLib.common,
      UniformsLib.displacementmap,
      {
        referencePosition: { value: new Vector3() },
        nearDistance: { value: 1 },
        farDistance: { value: 1e3 }
      }
    ]),
    vertexShader: ShaderChunk.distanceRGBA_vert,
    fragmentShader: ShaderChunk.distanceRGBA_frag
  },
  shadow: {
    uniforms: mergeUniforms([
      UniformsLib.lights,
      UniformsLib.fog,
      {
        color: { value: new Color(0) },
        opacity: { value: 1 }
      }
    ]),
    vertexShader: ShaderChunk.shadow_vert,
    fragmentShader: ShaderChunk.shadow_frag
  }
};
ShaderLib.physical = {
  uniforms: mergeUniforms([
    ShaderLib.standard.uniforms,
    {
      clearcoat: { value: 0 },
      clearcoatMap: { value: null },
      clearcoatMapTransform: { value: new Matrix3() },
      clearcoatNormalMap: { value: null },
      clearcoatNormalMapTransform: { value: new Matrix3() },
      clearcoatNormalScale: { value: new Vector2(1, 1) },
      clearcoatRoughness: { value: 0 },
      clearcoatRoughnessMap: { value: null },
      clearcoatRoughnessMapTransform: { value: new Matrix3() },
      dispersion: { value: 0 },
      iridescence: { value: 0 },
      iridescenceMap: { value: null },
      iridescenceMapTransform: { value: new Matrix3() },
      iridescenceIOR: { value: 1.3 },
      iridescenceThicknessMinimum: { value: 100 },
      iridescenceThicknessMaximum: { value: 400 },
      iridescenceThicknessMap: { value: null },
      iridescenceThicknessMapTransform: { value: new Matrix3() },
      sheen: { value: 0 },
      sheenColor: { value: new Color(0) },
      sheenColorMap: { value: null },
      sheenColorMapTransform: { value: new Matrix3() },
      sheenRoughness: { value: 1 },
      sheenRoughnessMap: { value: null },
      sheenRoughnessMapTransform: { value: new Matrix3() },
      transmission: { value: 0 },
      transmissionMap: { value: null },
      transmissionMapTransform: { value: new Matrix3() },
      transmissionSamplerSize: { value: new Vector2() },
      transmissionSamplerMap: { value: null },
      thickness: { value: 0 },
      thicknessMap: { value: null },
      thicknessMapTransform: { value: new Matrix3() },
      attenuationDistance: { value: 0 },
      attenuationColor: { value: new Color(0) },
      specularColor: { value: new Color(1, 1, 1) },
      specularColorMap: { value: null },
      specularColorMapTransform: { value: new Matrix3() },
      specularIntensity: { value: 1 },
      specularIntensityMap: { value: null },
      specularIntensityMapTransform: { value: new Matrix3() },
      anisotropyVector: { value: new Vector2() },
      anisotropyMap: { value: null },
      anisotropyMapTransform: { value: new Matrix3() }
    }
  ]),
  vertexShader: ShaderChunk.meshphysical_vert,
  fragmentShader: ShaderChunk.meshphysical_frag
};
var _rgb = { r: 0, b: 0, g: 0 };
var _e1$1 = new Euler();
var _m1$1 = new Matrix4();
function WebGLBackground(renderer3, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha) {
  const clearColor = new Color(0);
  let clearAlpha = alpha === true ? 0 : 1;
  let planeMesh;
  let boxMesh;
  let currentBackground = null;
  let currentBackgroundVersion = 0;
  let currentTonemapping = null;
  function getBackground(scene3) {
    let background = scene3.isScene === true ? scene3.background : null;
    if (background && background.isTexture) {
      const usePMREM = scene3.backgroundBlurriness > 0;
      background = (usePMREM ? cubeuvmaps : cubemaps).get(background);
    }
    return background;
  }
  function render3(scene3) {
    let forceClear = false;
    const background = getBackground(scene3);
    if (background === null) {
      setClear(clearColor, clearAlpha);
    } else if (background && background.isColor) {
      setClear(background, 1);
      forceClear = true;
    }
    const environmentBlendMode = renderer3.xr.getEnvironmentBlendMode();
    if (environmentBlendMode === "additive") {
      state.buffers.color.setClear(0, 0, 0, 1, premultipliedAlpha);
    } else if (environmentBlendMode === "alpha-blend") {
      state.buffers.color.setClear(0, 0, 0, 0, premultipliedAlpha);
    }
    if (renderer3.autoClear || forceClear) {
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
    }
  }
  function addToRenderList(renderList, scene3) {
    const background = getBackground(scene3);
    if (background && (background.isCubeTexture || background.mapping === CubeUVReflectionMapping)) {
      if (boxMesh === void 0) {
        boxMesh = new Mesh(
          new BoxGeometry(1, 1, 1),
          new ShaderMaterial({
            name: "BackgroundCubeMaterial",
            uniforms: cloneUniforms(ShaderLib.backgroundCube.uniforms),
            vertexShader: ShaderLib.backgroundCube.vertexShader,
            fragmentShader: ShaderLib.backgroundCube.fragmentShader,
            side: BackSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          })
        );
        boxMesh.geometry.deleteAttribute("normal");
        boxMesh.geometry.deleteAttribute("uv");
        boxMesh.onBeforeRender = function(renderer4, scene4, camera3) {
          this.matrixWorld.copyPosition(camera3.matrixWorld);
        };
        Object.defineProperty(boxMesh.material, "envMap", {
          get: function() {
            return this.uniforms.envMap.value;
          }
        });
        objects.update(boxMesh);
      }
      _e1$1.copy(scene3.backgroundRotation);
      _e1$1.x *= -1;
      _e1$1.y *= -1;
      _e1$1.z *= -1;
      if (background.isCubeTexture && background.isRenderTargetTexture === false) {
        _e1$1.y *= -1;
        _e1$1.z *= -1;
      }
      boxMesh.material.uniforms.envMap.value = background;
      boxMesh.material.uniforms.flipEnvMap.value = background.isCubeTexture && background.isRenderTargetTexture === false ? -1 : 1;
      boxMesh.material.uniforms.backgroundBlurriness.value = scene3.backgroundBlurriness;
      boxMesh.material.uniforms.backgroundIntensity.value = scene3.backgroundIntensity;
      boxMesh.material.uniforms.backgroundRotation.value.setFromMatrix4(_m1$1.makeRotationFromEuler(_e1$1));
      boxMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer3.toneMapping) {
        boxMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer3.toneMapping;
      }
      boxMesh.layers.enableAll();
      renderList.unshift(boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null);
    } else if (background && background.isTexture) {
      if (planeMesh === void 0) {
        planeMesh = new Mesh(
          new PlaneGeometry(2, 2),
          new ShaderMaterial({
            name: "BackgroundMaterial",
            uniforms: cloneUniforms(ShaderLib.background.uniforms),
            vertexShader: ShaderLib.background.vertexShader,
            fragmentShader: ShaderLib.background.fragmentShader,
            side: FrontSide,
            depthTest: false,
            depthWrite: false,
            fog: false
          })
        );
        planeMesh.geometry.deleteAttribute("normal");
        Object.defineProperty(planeMesh.material, "map", {
          get: function() {
            return this.uniforms.t2D.value;
          }
        });
        objects.update(planeMesh);
      }
      planeMesh.material.uniforms.t2D.value = background;
      planeMesh.material.uniforms.backgroundIntensity.value = scene3.backgroundIntensity;
      planeMesh.material.toneMapped = ColorManagement.getTransfer(background.colorSpace) !== SRGBTransfer;
      if (background.matrixAutoUpdate === true) {
        background.updateMatrix();
      }
      planeMesh.material.uniforms.uvTransform.value.copy(background.matrix);
      if (currentBackground !== background || currentBackgroundVersion !== background.version || currentTonemapping !== renderer3.toneMapping) {
        planeMesh.material.needsUpdate = true;
        currentBackground = background;
        currentBackgroundVersion = background.version;
        currentTonemapping = renderer3.toneMapping;
      }
      planeMesh.layers.enableAll();
      renderList.unshift(planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null);
    }
  }
  function setClear(color3, alpha2) {
    color3.getRGB(_rgb, getUnlitUniformColorSpace(renderer3));
    state.buffers.color.setClear(_rgb.r, _rgb.g, _rgb.b, alpha2, premultipliedAlpha);
  }
  return {
    getClearColor: function() {
      return clearColor;
    },
    setClearColor: function(color3, alpha2 = 1) {
      clearColor.set(color3);
      clearAlpha = alpha2;
      setClear(clearColor, clearAlpha);
    },
    getClearAlpha: function() {
      return clearAlpha;
    },
    setClearAlpha: function(alpha2) {
      clearAlpha = alpha2;
      setClear(clearColor, clearAlpha);
    },
    render: render3,
    addToRenderList
  };
}
function WebGLBindingStates(gl, attributes) {
  const maxVertexAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
  const bindingStates = {};
  const defaultState = createBindingState(null);
  let currentState = defaultState;
  let forceUpdate = false;
  function setup(object2, material, program, geometry, index7) {
    let updateBuffers = false;
    const state = getBindingState(geometry, program, material);
    if (currentState !== state) {
      currentState = state;
      bindVertexArrayObject(currentState.object);
    }
    updateBuffers = needsUpdate(object2, geometry, program, index7);
    if (updateBuffers) saveCache(object2, geometry, program, index7);
    if (index7 !== null) {
      attributes.update(index7, gl.ELEMENT_ARRAY_BUFFER);
    }
    if (updateBuffers || forceUpdate) {
      forceUpdate = false;
      setupVertexAttributes(object2, material, program, geometry);
      if (index7 !== null) {
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, attributes.get(index7).buffer);
      }
    }
  }
  function createVertexArrayObject() {
    return gl.createVertexArray();
  }
  function bindVertexArrayObject(vao) {
    return gl.bindVertexArray(vao);
  }
  function deleteVertexArrayObject(vao) {
    return gl.deleteVertexArray(vao);
  }
  function getBindingState(geometry, program, material) {
    const wireframe = material.wireframe === true;
    let programMap = bindingStates[geometry.id];
    if (programMap === void 0) {
      programMap = {};
      bindingStates[geometry.id] = programMap;
    }
    let stateMap = programMap[program.id];
    if (stateMap === void 0) {
      stateMap = {};
      programMap[program.id] = stateMap;
    }
    let state = stateMap[wireframe];
    if (state === void 0) {
      state = createBindingState(createVertexArrayObject());
      stateMap[wireframe] = state;
    }
    return state;
  }
  function createBindingState(vao) {
    const newAttributes = [];
    const enabledAttributes = [];
    const attributeDivisors = [];
    for (let i2 = 0; i2 < maxVertexAttributes; i2++) {
      newAttributes[i2] = 0;
      enabledAttributes[i2] = 0;
      attributeDivisors[i2] = 0;
    }
    return {
      // for backward compatibility on non-VAO support browser
      geometry: null,
      program: null,
      wireframe: false,
      newAttributes,
      enabledAttributes,
      attributeDivisors,
      object: vao,
      attributes: {},
      index: null
    };
  }
  function needsUpdate(object2, geometry, program, index7) {
    const cachedAttributes = currentState.attributes;
    const geometryAttributes = geometry.attributes;
    let attributesNum = 0;
    const programAttributes = program.getAttributes();
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute.location >= 0) {
        const cachedAttribute = cachedAttributes[name];
        let geometryAttribute = geometryAttributes[name];
        if (geometryAttribute === void 0) {
          if (name === "instanceMatrix" && object2.instanceMatrix) geometryAttribute = object2.instanceMatrix;
          if (name === "instanceColor" && object2.instanceColor) geometryAttribute = object2.instanceColor;
        }
        if (cachedAttribute === void 0) return true;
        if (cachedAttribute.attribute !== geometryAttribute) return true;
        if (geometryAttribute && cachedAttribute.data !== geometryAttribute.data) return true;
        attributesNum++;
      }
    }
    if (currentState.attributesNum !== attributesNum) return true;
    if (currentState.index !== index7) return true;
    return false;
  }
  function saveCache(object2, geometry, program, index7) {
    const cache2 = {};
    const attributes2 = geometry.attributes;
    let attributesNum = 0;
    const programAttributes = program.getAttributes();
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute.location >= 0) {
        let attribute2 = attributes2[name];
        if (attribute2 === void 0) {
          if (name === "instanceMatrix" && object2.instanceMatrix) attribute2 = object2.instanceMatrix;
          if (name === "instanceColor" && object2.instanceColor) attribute2 = object2.instanceColor;
        }
        const data = {};
        data.attribute = attribute2;
        if (attribute2 && attribute2.data) {
          data.data = attribute2.data;
        }
        cache2[name] = data;
        attributesNum++;
      }
    }
    currentState.attributes = cache2;
    currentState.attributesNum = attributesNum;
    currentState.index = index7;
  }
  function initAttributes() {
    const newAttributes = currentState.newAttributes;
    for (let i2 = 0, il = newAttributes.length; i2 < il; i2++) {
      newAttributes[i2] = 0;
    }
  }
  function enableAttribute(attribute2) {
    enableAttributeAndDivisor(attribute2, 0);
  }
  function enableAttributeAndDivisor(attribute2, meshPerAttribute) {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    const attributeDivisors = currentState.attributeDivisors;
    newAttributes[attribute2] = 1;
    if (enabledAttributes[attribute2] === 0) {
      gl.enableVertexAttribArray(attribute2);
      enabledAttributes[attribute2] = 1;
    }
    if (attributeDivisors[attribute2] !== meshPerAttribute) {
      gl.vertexAttribDivisor(attribute2, meshPerAttribute);
      attributeDivisors[attribute2] = meshPerAttribute;
    }
  }
  function disableUnusedAttributes() {
    const newAttributes = currentState.newAttributes;
    const enabledAttributes = currentState.enabledAttributes;
    for (let i2 = 0, il = enabledAttributes.length; i2 < il; i2++) {
      if (enabledAttributes[i2] !== newAttributes[i2]) {
        gl.disableVertexAttribArray(i2);
        enabledAttributes[i2] = 0;
      }
    }
  }
  function vertexAttribPointer(index7, size, type, normalized, stride, offset, integer) {
    if (integer === true) {
      gl.vertexAttribIPointer(index7, size, type, stride, offset);
    } else {
      gl.vertexAttribPointer(index7, size, type, normalized, stride, offset);
    }
  }
  function setupVertexAttributes(object2, material, program, geometry) {
    initAttributes();
    const geometryAttributes = geometry.attributes;
    const programAttributes = program.getAttributes();
    const materialDefaultAttributeValues = material.defaultAttributeValues;
    for (const name in programAttributes) {
      const programAttribute = programAttributes[name];
      if (programAttribute.location >= 0) {
        let geometryAttribute = geometryAttributes[name];
        if (geometryAttribute === void 0) {
          if (name === "instanceMatrix" && object2.instanceMatrix) geometryAttribute = object2.instanceMatrix;
          if (name === "instanceColor" && object2.instanceColor) geometryAttribute = object2.instanceColor;
        }
        if (geometryAttribute !== void 0) {
          const normalized = geometryAttribute.normalized;
          const size = geometryAttribute.itemSize;
          const attribute2 = attributes.get(geometryAttribute);
          if (attribute2 === void 0) continue;
          const buffer2 = attribute2.buffer;
          const type = attribute2.type;
          const bytesPerElement = attribute2.bytesPerElement;
          const integer = type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType;
          if (geometryAttribute.isInterleavedBufferAttribute) {
            const data = geometryAttribute.data;
            const stride = data.stride;
            const offset = geometryAttribute.offset;
            if (data.isInstancedInterleavedBuffer) {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttributeAndDivisor(programAttribute.location + i2, data.meshPerAttribute);
              }
              if (object2.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = data.meshPerAttribute * data.count;
              }
            } else {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttribute(programAttribute.location + i2);
              }
            }
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer2);
            for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
              vertexAttribPointer(
                programAttribute.location + i2,
                size / programAttribute.locationSize,
                type,
                normalized,
                stride * bytesPerElement,
                (offset + size / programAttribute.locationSize * i2) * bytesPerElement,
                integer
              );
            }
          } else {
            if (geometryAttribute.isInstancedBufferAttribute) {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttributeAndDivisor(programAttribute.location + i2, geometryAttribute.meshPerAttribute);
              }
              if (object2.isInstancedMesh !== true && geometry._maxInstanceCount === void 0) {
                geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;
              }
            } else {
              for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
                enableAttribute(programAttribute.location + i2);
              }
            }
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer2);
            for (let i2 = 0; i2 < programAttribute.locationSize; i2++) {
              vertexAttribPointer(
                programAttribute.location + i2,
                size / programAttribute.locationSize,
                type,
                normalized,
                size * bytesPerElement,
                size / programAttribute.locationSize * i2 * bytesPerElement,
                integer
              );
            }
          }
        } else if (materialDefaultAttributeValues !== void 0) {
          const value = materialDefaultAttributeValues[name];
          if (value !== void 0) {
            switch (value.length) {
              case 2:
                gl.vertexAttrib2fv(programAttribute.location, value);
                break;
              case 3:
                gl.vertexAttrib3fv(programAttribute.location, value);
                break;
              case 4:
                gl.vertexAttrib4fv(programAttribute.location, value);
                break;
              default:
                gl.vertexAttrib1fv(programAttribute.location, value);
            }
          }
        }
      }
    }
    disableUnusedAttributes();
  }
  function dispose() {
    reset();
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      for (const programId in programMap) {
        const stateMap = programMap[programId];
        for (const wireframe in stateMap) {
          deleteVertexArrayObject(stateMap[wireframe].object);
          delete stateMap[wireframe];
        }
        delete programMap[programId];
      }
      delete bindingStates[geometryId];
    }
  }
  function releaseStatesOfGeometry(geometry) {
    if (bindingStates[geometry.id] === void 0) return;
    const programMap = bindingStates[geometry.id];
    for (const programId in programMap) {
      const stateMap = programMap[programId];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[programId];
    }
    delete bindingStates[geometry.id];
  }
  function releaseStatesOfProgram(program) {
    for (const geometryId in bindingStates) {
      const programMap = bindingStates[geometryId];
      if (programMap[program.id] === void 0) continue;
      const stateMap = programMap[program.id];
      for (const wireframe in stateMap) {
        deleteVertexArrayObject(stateMap[wireframe].object);
        delete stateMap[wireframe];
      }
      delete programMap[program.id];
    }
  }
  function reset() {
    resetDefaultState();
    forceUpdate = true;
    if (currentState === defaultState) return;
    currentState = defaultState;
    bindVertexArrayObject(currentState.object);
  }
  function resetDefaultState() {
    defaultState.geometry = null;
    defaultState.program = null;
    defaultState.wireframe = false;
  }
  return {
    setup,
    reset,
    resetDefaultState,
    dispose,
    releaseStatesOfGeometry,
    releaseStatesOfProgram,
    initAttributes,
    enableAttribute,
    disableUnusedAttributes
  };
}
function WebGLBufferRenderer(gl, extensions, info) {
  let mode2;
  function setMode(value) {
    mode2 = value;
  }
  function render3(start, count2) {
    gl.drawArrays(mode2, start, count2);
    info.update(count2, mode2, 1);
  }
  function renderInstances(start, count2, primcount) {
    if (primcount === 0) return;
    gl.drawArraysInstanced(mode2, start, count2, primcount);
    info.update(count2, mode2, primcount);
  }
  function renderMultiDraw(starts, counts, drawCount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    extension.multiDrawArraysWEBGL(mode2, starts, 0, counts, 0, drawCount);
    let elementCount = 0;
    for (let i2 = 0; i2 < drawCount; i2++) {
      elementCount += counts[i2];
    }
    info.update(elementCount, mode2, 1);
  }
  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < starts.length; i2++) {
        renderInstances(starts[i2], counts[i2], primcount[i2]);
      }
    } else {
      extension.multiDrawArraysInstancedWEBGL(mode2, starts, 0, counts, 0, primcount, 0, drawCount);
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2];
      }
      for (let i2 = 0; i2 < primcount.length; i2++) {
        info.update(elementCount, mode2, primcount[i2]);
      }
    }
  }
  this.setMode = setMode;
  this.render = render3;
  this.renderInstances = renderInstances;
  this.renderMultiDraw = renderMultiDraw;
  this.renderMultiDrawInstances = renderMultiDrawInstances;
}
function WebGLCapabilities(gl, extensions, parameters, utils) {
  let maxAnisotropy;
  function getMaxAnisotropy() {
    if (maxAnisotropy !== void 0) return maxAnisotropy;
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      maxAnisotropy = 0;
    }
    return maxAnisotropy;
  }
  function textureFormatReadable(textureFormat) {
    if (textureFormat !== RGBAFormat && utils.convert(textureFormat) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_FORMAT)) {
      return false;
    }
    return true;
  }
  function textureTypeReadable(textureType) {
    const halfFloatSupportedByExt = textureType === HalfFloatType && (extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float"));
    if (textureType !== UnsignedByteType && utils.convert(textureType) !== gl.getParameter(gl.IMPLEMENTATION_COLOR_READ_TYPE) && // Edge and Chrome Mac < 52 (#9513)
    textureType !== FloatType && !halfFloatSupportedByExt) {
      return false;
    }
    return true;
  }
  function getMaxPrecision(precision2) {
    if (precision2 === "highp") {
      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.HIGH_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {
        return "highp";
      }
      precision2 = "mediump";
    }
    if (precision2 === "mediump") {
      if (gl.getShaderPrecisionFormat(gl.VERTEX_SHADER, gl.MEDIUM_FLOAT).precision > 0 && gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {
        return "mediump";
      }
    }
    return "lowp";
  }
  let precision = parameters.precision !== void 0 ? parameters.precision : "highp";
  const maxPrecision = getMaxPrecision(precision);
  if (maxPrecision !== precision) {
    console.warn("THREE.WebGLRenderer:", precision, "not supported, using", maxPrecision, "instead.");
    precision = maxPrecision;
  }
  const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;
  const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);
  const maxVertexTextures = gl.getParameter(gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
  const maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);
  const maxCubemapSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);
  const maxAttributes = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);
  const maxVertexUniforms = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);
  const maxVaryings = gl.getParameter(gl.MAX_VARYING_VECTORS);
  const maxFragmentUniforms = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);
  const vertexTextures = maxVertexTextures > 0;
  const maxSamples = gl.getParameter(gl.MAX_SAMPLES);
  return {
    isWebGL2: true,
    // keeping this for backwards compatibility
    getMaxAnisotropy,
    getMaxPrecision,
    textureFormatReadable,
    textureTypeReadable,
    precision,
    logarithmicDepthBuffer,
    maxTextures,
    maxVertexTextures,
    maxTextureSize,
    maxCubemapSize,
    maxAttributes,
    maxVertexUniforms,
    maxVaryings,
    maxFragmentUniforms,
    vertexTextures,
    maxSamples
  };
}
function WebGLClipping(properties) {
  const scope = this;
  let globalState = null, numGlobalPlanes = 0, localClippingEnabled = false, renderingShadows = false;
  const plane = new Plane(), viewNormalMatrix = new Matrix3(), uniform2 = { value: null, needsUpdate: false };
  this.uniform = uniform2;
  this.numPlanes = 0;
  this.numIntersection = 0;
  this.init = function(planes, enableLocalClipping) {
    const enabled = planes.length !== 0 || enableLocalClipping || // enable state of previous frame - the clipping code has to
    // run another frame in order to reset the state:
    numGlobalPlanes !== 0 || localClippingEnabled;
    localClippingEnabled = enableLocalClipping;
    numGlobalPlanes = planes.length;
    return enabled;
  };
  this.beginShadows = function() {
    renderingShadows = true;
    projectPlanes(null);
  };
  this.endShadows = function() {
    renderingShadows = false;
  };
  this.setGlobalState = function(planes, camera3) {
    globalState = projectPlanes(planes, camera3, 0);
  };
  this.setState = function(material, camera3, useCache) {
    const planes = material.clippingPlanes, clipIntersection = material.clipIntersection, clipShadows = material.clipShadows;
    const materialProperties = properties.get(material);
    if (!localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && !clipShadows) {
      if (renderingShadows) {
        projectPlanes(null);
      } else {
        resetGlobalState();
      }
    } else {
      const nGlobal = renderingShadows ? 0 : numGlobalPlanes, lGlobal = nGlobal * 4;
      let dstArray = materialProperties.clippingState || null;
      uniform2.value = dstArray;
      dstArray = projectPlanes(planes, camera3, lGlobal, useCache);
      for (let i2 = 0; i2 !== lGlobal; ++i2) {
        dstArray[i2] = globalState[i2];
      }
      materialProperties.clippingState = dstArray;
      this.numIntersection = clipIntersection ? this.numPlanes : 0;
      this.numPlanes += nGlobal;
    }
  };
  function resetGlobalState() {
    if (uniform2.value !== globalState) {
      uniform2.value = globalState;
      uniform2.needsUpdate = numGlobalPlanes > 0;
    }
    scope.numPlanes = numGlobalPlanes;
    scope.numIntersection = 0;
  }
  function projectPlanes(planes, camera3, dstOffset, skipTransform) {
    const nPlanes = planes !== null ? planes.length : 0;
    let dstArray = null;
    if (nPlanes !== 0) {
      dstArray = uniform2.value;
      if (skipTransform !== true || dstArray === null) {
        const flatSize = dstOffset + nPlanes * 4, viewMatrix = camera3.matrixWorldInverse;
        viewNormalMatrix.getNormalMatrix(viewMatrix);
        if (dstArray === null || dstArray.length < flatSize) {
          dstArray = new Float32Array(flatSize);
        }
        for (let i2 = 0, i4 = dstOffset; i2 !== nPlanes; ++i2, i4 += 4) {
          plane.copy(planes[i2]).applyMatrix4(viewMatrix, viewNormalMatrix);
          plane.normal.toArray(dstArray, i4);
          dstArray[i4 + 3] = plane.constant;
        }
      }
      uniform2.value = dstArray;
      uniform2.needsUpdate = true;
    }
    scope.numPlanes = nPlanes;
    scope.numIntersection = 0;
    return dstArray;
  }
}
function WebGLCubeMaps(renderer3) {
  let cubemaps = /* @__PURE__ */ new WeakMap();
  function mapTextureMapping2(texture2, mapping) {
    if (mapping === EquirectangularReflectionMapping) {
      texture2.mapping = CubeReflectionMapping;
    } else if (mapping === EquirectangularRefractionMapping) {
      texture2.mapping = CubeRefractionMapping;
    }
    return texture2;
  }
  function get(texture2) {
    if (texture2 && texture2.isTexture) {
      const mapping = texture2.mapping;
      if (mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping) {
        if (cubemaps.has(texture2)) {
          const cubemap = cubemaps.get(texture2).texture;
          return mapTextureMapping2(cubemap, texture2.mapping);
        } else {
          const image = texture2.image;
          if (image && image.height > 0) {
            const renderTarget = new WebGLCubeRenderTarget(image.height);
            renderTarget.fromEquirectangularTexture(renderer3, texture2);
            cubemaps.set(texture2, renderTarget);
            texture2.addEventListener("dispose", onTextureDispose2);
            return mapTextureMapping2(renderTarget.texture, texture2.mapping);
          } else {
            return null;
          }
        }
      }
    }
    return texture2;
  }
  function onTextureDispose2(event) {
    const texture2 = event.target;
    texture2.removeEventListener("dispose", onTextureDispose2);
    const cubemap = cubemaps.get(texture2);
    if (cubemap !== void 0) {
      cubemaps.delete(texture2);
      cubemap.dispose();
    }
  }
  function dispose() {
    cubemaps = /* @__PURE__ */ new WeakMap();
  }
  return {
    get,
    dispose
  };
}
var OrthographicCamera = class extends Camera {
  constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
    super();
    this.isOrthographicCamera = true;
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;
    this.near = near;
    this.far = far;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  }
  setViewOffset(fullWidth, fullHeight, x2, y2, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x2;
    this.view.offsetY = y2;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const dx = (this.right - this.left) / (2 * this.zoom);
    const dy = (this.top - this.bottom) / (2 * this.zoom);
    const cx = (this.right + this.left) / 2;
    const cy = (this.top + this.bottom) / 2;
    let left = cx - dx;
    let right = cx + dx;
    let top = cy + dy;
    let bottom = cy - dy;
    if (this.view !== null && this.view.enabled) {
      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    return data;
  }
};
var LOD_MIN = 4;
var EXTRA_LOD_SIGMA = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
var MAX_SAMPLES = 20;
var _flatCamera = new OrthographicCamera();
var _clearColor = new Color();
var _oldTarget = null;
var _oldActiveCubeFace = 0;
var _oldActiveMipmapLevel = 0;
var _oldXrEnabled = false;
var PHI = (1 + Math.sqrt(5)) / 2;
var INV_PHI = 1 / PHI;
var _axisDirections = [
  new Vector3(-PHI, INV_PHI, 0),
  new Vector3(PHI, INV_PHI, 0),
  new Vector3(-INV_PHI, 0, PHI),
  new Vector3(INV_PHI, 0, PHI),
  new Vector3(0, PHI, -INV_PHI),
  new Vector3(0, PHI, INV_PHI),
  new Vector3(-1, 1, -1),
  new Vector3(1, 1, -1),
  new Vector3(-1, 1, 1),
  new Vector3(1, 1, 1)
];
var PMREMGenerator = class {
  constructor(renderer3) {
    this._renderer = renderer3;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;
    this._compileMaterial(this._blurMaterial);
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(scene3, sigma = 0, near = 0.1, far = 100) {
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    _oldXrEnabled = this._renderer.xr.enabled;
    this._renderer.xr.enabled = false;
    this._setSize(256);
    const cubeUVRenderTarget = this._allocateTargets();
    cubeUVRenderTarget.depthBuffer = true;
    this._sceneToCubeUV(scene3, near, far, cubeUVRenderTarget);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported equirectangular image size is 64 x 32.
   */
  fromEquirectangular(equirectangular, renderTarget = null) {
    return this._fromTexture(equirectangular, renderTarget);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   * The smallest supported cube size is 16 x 16.
   */
  fromCubemap(cubemap, renderTarget = null) {
    return this._fromTexture(cubemap, renderTarget);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    if (this._cubemapMaterial === null) {
      this._cubemapMaterial = _getCubemapMaterial();
      this._compileMaterial(this._cubemapMaterial);
    }
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    if (this._equirectMaterial === null) {
      this._equirectMaterial = _getEquirectMaterial();
      this._compileMaterial(this._equirectMaterial);
    }
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose();
    if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
    if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
  }
  // private interface
  _setSize(cubeSize) {
    this._lodMax = Math.floor(Math.log2(cubeSize));
    this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    if (this._blurMaterial !== null) this._blurMaterial.dispose();
    if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
    for (let i2 = 0; i2 < this._lodPlanes.length; i2++) {
      this._lodPlanes[i2].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._renderer.setRenderTarget(_oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel);
    this._renderer.xr.enabled = _oldXrEnabled;
    outputTarget.scissorTest = false;
    _setViewport(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture2, renderTarget) {
    if (texture2.mapping === CubeReflectionMapping || texture2.mapping === CubeRefractionMapping) {
      this._setSize(texture2.image.length === 0 ? 16 : texture2.image[0].width || texture2.image[0].image.width);
    } else {
      this._setSize(texture2.image.width / 4);
    }
    _oldTarget = this._renderer.getRenderTarget();
    _oldActiveCubeFace = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();
    _oldXrEnabled = this._renderer.xr.enabled;
    this._renderer.xr.enabled = false;
    const cubeUVRenderTarget = renderTarget || this._allocateTargets();
    this._textureToCubeUV(texture2, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTargets() {
    const width = 3 * Math.max(this._cubeSize, 16 * 7);
    const height = 4 * this._cubeSize;
    const params = {
      magFilter: LinearFilter,
      minFilter: LinearFilter,
      generateMipmaps: false,
      type: HalfFloatType,
      format: RGBAFormat,
      colorSpace: LinearSRGBColorSpace,
      depthBuffer: false
    };
    const cubeUVRenderTarget = _createRenderTarget(width, height, params);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
      if (this._pingPongRenderTarget !== null) {
        this._dispose();
      }
      this._pingPongRenderTarget = _createRenderTarget(width, height, params);
      const { _lodMax } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes(_lodMax));
      this._blurMaterial = _getBlurShader(_lodMax, width, height);
    }
    return cubeUVRenderTarget;
  }
  _compileMaterial(material) {
    const tmpMesh = new Mesh(this._lodPlanes[0], material);
    this._renderer.compile(tmpMesh, _flatCamera);
  }
  _sceneToCubeUV(scene3, near, far, cubeUVRenderTarget) {
    const fov3 = 90;
    const aspect3 = 1;
    const cubeCamera = new PerspectiveCamera(fov3, aspect3, near, far);
    const upSign = [1, -1, 1, 1, 1, 1];
    const forwardSign = [1, 1, 1, -1, -1, -1];
    const renderer3 = this._renderer;
    const originalAutoClear = renderer3.autoClear;
    const toneMapping2 = renderer3.toneMapping;
    renderer3.getClearColor(_clearColor);
    renderer3.toneMapping = NoToneMapping;
    renderer3.autoClear = false;
    const backgroundMaterial = new MeshBasicMaterial({
      name: "PMREM.Background",
      side: BackSide,
      depthWrite: false,
      depthTest: false
    });
    const backgroundBox = new Mesh(new BoxGeometry(), backgroundMaterial);
    let useSolidColor = false;
    const background = scene3.background;
    if (background) {
      if (background.isColor) {
        backgroundMaterial.color.copy(background);
        scene3.background = null;
        useSolidColor = true;
      }
    } else {
      backgroundMaterial.color.copy(_clearColor);
      useSolidColor = true;
    }
    for (let i2 = 0; i2 < 6; i2++) {
      const col = i2 % 3;
      if (col === 0) {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.lookAt(forwardSign[i2], 0, 0);
      } else if (col === 1) {
        cubeCamera.up.set(0, 0, upSign[i2]);
        cubeCamera.lookAt(0, forwardSign[i2], 0);
      } else {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.lookAt(0, 0, forwardSign[i2]);
      }
      const size = this._cubeSize;
      _setViewport(cubeUVRenderTarget, col * size, i2 > 2 ? size : 0, size, size);
      renderer3.setRenderTarget(cubeUVRenderTarget);
      if (useSolidColor) {
        renderer3.render(backgroundBox, cubeCamera);
      }
      renderer3.render(scene3, cubeCamera);
    }
    backgroundBox.geometry.dispose();
    backgroundBox.material.dispose();
    renderer3.toneMapping = toneMapping2;
    renderer3.autoClear = originalAutoClear;
    scene3.background = background;
  }
  _textureToCubeUV(texture2, cubeUVRenderTarget) {
    const renderer3 = this._renderer;
    const isCubeTexture = texture2.mapping === CubeReflectionMapping || texture2.mapping === CubeRefractionMapping;
    if (isCubeTexture) {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial();
      }
      this._cubemapMaterial.uniforms.flipEnvMap.value = texture2.isRenderTargetTexture === false ? -1 : 1;
    } else {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial();
      }
    }
    const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    const mesh = new Mesh(this._lodPlanes[0], material);
    const uniforms = material.uniforms;
    uniforms["envMap"].value = texture2;
    const size = this._cubeSize;
    _setViewport(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
    renderer3.setRenderTarget(cubeUVRenderTarget);
    renderer3.render(mesh, _flatCamera);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer3 = this._renderer;
    const autoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    const n2 = this._lodPlanes.length;
    for (let i2 = 1; i2 < n2; i2++) {
      const sigma = Math.sqrt(this._sigmas[i2] * this._sigmas[i2] - this._sigmas[i2 - 1] * this._sigmas[i2 - 1]);
      const poleAxis = _axisDirections[(n2 - i2 - 1) % _axisDirections.length];
      this._blur(cubeUVRenderTarget, i2 - 1, i2, sigma, poleAxis);
    }
    renderer3.autoClear = autoClear;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(
      cubeUVRenderTarget,
      pingPongRenderTarget,
      lodIn,
      lodOut,
      sigma,
      "latitudinal",
      poleAxis
    );
    this._halfBlur(
      pingPongRenderTarget,
      cubeUVRenderTarget,
      lodOut,
      lodOut,
      sigma,
      "longitudinal",
      poleAxis
    );
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction2, poleAxis) {
    const renderer3 = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction2 !== "latitudinal" && direction2 !== "longitudinal") {
      console.error(
        "blur direction must be either latitudinal or longitudinal!"
      );
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = new Mesh(this._lodPlanes[lodOut], blurMaterial);
    const blurUniforms = blurMaterial.uniforms;
    const pixels = this._sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES;
    if (samples > MAX_SAMPLES) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES}`);
    }
    const weights = [];
    let sum3 = 0;
    for (let i2 = 0; i2 < MAX_SAMPLES; ++i2) {
      const x3 = i2 / sigmaPixels;
      const weight = Math.exp(-x3 * x3 / 2);
      weights.push(weight);
      if (i2 === 0) {
        sum3 += weight;
      } else if (i2 < samples) {
        sum3 += 2 * weight;
      }
    }
    for (let i2 = 0; i2 < weights.length; i2++) {
      weights[i2] = weights[i2] / sum3;
    }
    blurUniforms["envMap"].value = targetIn.texture;
    blurUniforms["samples"].value = samples;
    blurUniforms["weights"].value = weights;
    blurUniforms["latitudinal"].value = direction2 === "latitudinal";
    if (poleAxis) {
      blurUniforms["poleAxis"].value = poleAxis;
    }
    const { _lodMax } = this;
    blurUniforms["dTheta"].value = radiansPerPixel;
    blurUniforms["mipInt"].value = _lodMax - lodIn;
    const outputSize = this._sizeLods[lodOut];
    const x2 = 3 * outputSize * (lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0);
    const y2 = 4 * (this._cubeSize - outputSize);
    _setViewport(targetOut, x2, y2, 3 * outputSize, 2 * outputSize);
    renderer3.setRenderTarget(targetOut);
    renderer3.render(blurMesh, _flatCamera);
  }
};
function _createPlanes(lodMax) {
  const lodPlanes = [];
  const sizeLods = [];
  const sigmas = [];
  let lod = lodMax;
  const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;
  for (let i2 = 0; i2 < totalLods; i2++) {
    const sizeLod = Math.pow(2, lod);
    sizeLods.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i2 > lodMax - LOD_MIN) {
      sigma = EXTRA_LOD_SIGMA[i2 - lodMax + LOD_MIN - 1];
    } else if (i2 === 0) {
      sigma = 0;
    }
    sigmas.push(sigma);
    const texelSize = 1 / (sizeLod - 2);
    const min4 = -texelSize;
    const max4 = 1 + texelSize;
    const uv1 = [min4, min4, max4, min4, max4, max4, min4, min4, max4, max4, min4, max4];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv2 = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x2 = face % 3 * 2 / 3 - 1;
      const y2 = face > 2 ? 0 : -1;
      const coordinates2 = [
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2 + 1,
        0
      ];
      position.set(coordinates2, positionSize * vertices * face);
      uv2.set(uv1, uvSize * vertices * face);
      const fill = [face, face, face, face, face, face];
      faceIndex.set(fill, faceIndexSize * vertices * face);
    }
    const planes = new BufferGeometry();
    planes.setAttribute("position", new BufferAttribute(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute(uv2, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute(faceIndex, faceIndexSize));
    lodPlanes.push(planes);
    if (lod > LOD_MIN) {
      lod--;
    }
  }
  return { lodPlanes, sizeLods, sigmas };
}
function _createRenderTarget(width, height, params) {
  const cubeUVRenderTarget = new WebGLRenderTarget(width, height, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport(target, x2, y2, width, height) {
  target.viewport.set(x2, y2, width, height);
  target.scissor.set(x2, y2, width, height);
}
function _getBlurShader(lodMax, width, height) {
  const weights = new Float32Array(MAX_SAMPLES);
  const poleAxis = new Vector3(0, 1, 0);
  const shaderMaterial = new ShaderMaterial({
    name: "SphericalGaussianBlur",
    defines: {
      "n": MAX_SAMPLES,
      "CUBEUV_TEXEL_WIDTH": 1 / width,
      "CUBEUV_TEXEL_HEIGHT": 1 / height,
      "CUBEUV_MAX_MIP": `${lodMax}.0`
    },
    uniforms: {
      "envMap": { value: null },
      "samples": { value: 1 },
      "weights": { value: weights },
      "latitudinal": { value: false },
      "dTheta": { value: 0 },
      "mipInt": { value: 0 },
      "poleAxis": { value: poleAxis }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
  return shaderMaterial;
}
function _getEquirectMaterial() {
  return new ShaderMaterial({
    name: "EquirectangularToCubeUV",
    uniforms: {
      "envMap": { value: null }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}
function _getCubemapMaterial() {
  return new ShaderMaterial({
    name: "CubemapToCubeUV",
    uniforms: {
      "envMap": { value: null },
      "flipEnvMap": { value: -1 }
    },
    vertexShader: _getCommonVertexShader(),
    fragmentShader: (
      /* glsl */
      `

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`
    ),
    blending: NoBlending,
    depthTest: false,
    depthWrite: false
  });
}
function _getCommonVertexShader() {
  return (
    /* glsl */
    `

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`
  );
}
function WebGLCubeUVMaps(renderer3) {
  let cubeUVmaps = /* @__PURE__ */ new WeakMap();
  let pmremGenerator = null;
  function get(texture2) {
    if (texture2 && texture2.isTexture) {
      const mapping = texture2.mapping;
      const isEquirectMap = mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping;
      const isCubeMap = mapping === CubeReflectionMapping || mapping === CubeRefractionMapping;
      if (isEquirectMap || isCubeMap) {
        let renderTarget = cubeUVmaps.get(texture2);
        const currentPMREMVersion = renderTarget !== void 0 ? renderTarget.texture.pmremVersion : 0;
        if (texture2.isRenderTargetTexture && texture2.pmremVersion !== currentPMREMVersion) {
          if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer3);
          renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture2, renderTarget) : pmremGenerator.fromCubemap(texture2, renderTarget);
          renderTarget.texture.pmremVersion = texture2.pmremVersion;
          cubeUVmaps.set(texture2, renderTarget);
          return renderTarget.texture;
        } else {
          if (renderTarget !== void 0) {
            return renderTarget.texture;
          } else {
            const image = texture2.image;
            if (isEquirectMap && image && image.height > 0 || isCubeMap && image && isCubeTextureComplete(image)) {
              if (pmremGenerator === null) pmremGenerator = new PMREMGenerator(renderer3);
              renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular(texture2) : pmremGenerator.fromCubemap(texture2);
              renderTarget.texture.pmremVersion = texture2.pmremVersion;
              cubeUVmaps.set(texture2, renderTarget);
              texture2.addEventListener("dispose", onTextureDispose2);
              return renderTarget.texture;
            } else {
              return null;
            }
          }
        }
      }
    }
    return texture2;
  }
  function isCubeTextureComplete(image) {
    let count2 = 0;
    const length2 = 6;
    for (let i2 = 0; i2 < length2; i2++) {
      if (image[i2] !== void 0) count2++;
    }
    return count2 === length2;
  }
  function onTextureDispose2(event) {
    const texture2 = event.target;
    texture2.removeEventListener("dispose", onTextureDispose2);
    const cubemapUV = cubeUVmaps.get(texture2);
    if (cubemapUV !== void 0) {
      cubeUVmaps.delete(texture2);
      cubemapUV.dispose();
    }
  }
  function dispose() {
    cubeUVmaps = /* @__PURE__ */ new WeakMap();
    if (pmremGenerator !== null) {
      pmremGenerator.dispose();
      pmremGenerator = null;
    }
  }
  return {
    get,
    dispose
  };
}
function WebGLExtensions(gl) {
  const extensions = {};
  function getExtension(name) {
    if (extensions[name] !== void 0) {
      return extensions[name];
    }
    let extension;
    switch (name) {
      case "WEBGL_depth_texture":
        extension = gl.getExtension("WEBGL_depth_texture") || gl.getExtension("MOZ_WEBGL_depth_texture") || gl.getExtension("WEBKIT_WEBGL_depth_texture");
        break;
      case "EXT_texture_filter_anisotropic":
        extension = gl.getExtension("EXT_texture_filter_anisotropic") || gl.getExtension("MOZ_EXT_texture_filter_anisotropic") || gl.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
        break;
      case "WEBGL_compressed_texture_s3tc":
        extension = gl.getExtension("WEBGL_compressed_texture_s3tc") || gl.getExtension("MOZ_WEBGL_compressed_texture_s3tc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");
        break;
      case "WEBGL_compressed_texture_pvrtc":
        extension = gl.getExtension("WEBGL_compressed_texture_pvrtc") || gl.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");
        break;
      default:
        extension = gl.getExtension(name);
    }
    extensions[name] = extension;
    return extension;
  }
  return {
    has: function(name) {
      return getExtension(name) !== null;
    },
    init: function() {
      getExtension("EXT_color_buffer_float");
      getExtension("WEBGL_clip_cull_distance");
      getExtension("OES_texture_float_linear");
      getExtension("EXT_color_buffer_half_float");
      getExtension("WEBGL_multisampled_render_to_texture");
      getExtension("WEBGL_render_shared_exponent");
    },
    get: function(name) {
      const extension = getExtension(name);
      if (extension === null) {
        warnOnce("THREE.WebGLRenderer: " + name + " extension not supported.");
      }
      return extension;
    }
  };
}
function WebGLGeometries(gl, attributes, info, bindingStates) {
  const geometries = {};
  const wireframeAttributes = /* @__PURE__ */ new WeakMap();
  function onGeometryDispose(event) {
    const geometry = event.target;
    if (geometry.index !== null) {
      attributes.remove(geometry.index);
    }
    for (const name in geometry.attributes) {
      attributes.remove(geometry.attributes[name]);
    }
    for (const name in geometry.morphAttributes) {
      const array3 = geometry.morphAttributes[name];
      for (let i2 = 0, l2 = array3.length; i2 < l2; i2++) {
        attributes.remove(array3[i2]);
      }
    }
    geometry.removeEventListener("dispose", onGeometryDispose);
    delete geometries[geometry.id];
    const attribute2 = wireframeAttributes.get(geometry);
    if (attribute2) {
      attributes.remove(attribute2);
      wireframeAttributes.delete(geometry);
    }
    bindingStates.releaseStatesOfGeometry(geometry);
    if (geometry.isInstancedBufferGeometry === true) {
      delete geometry._maxInstanceCount;
    }
    info.memory.geometries--;
  }
  function get(object2, geometry) {
    if (geometries[geometry.id] === true) return geometry;
    geometry.addEventListener("dispose", onGeometryDispose);
    geometries[geometry.id] = true;
    info.memory.geometries++;
    return geometry;
  }
  function update20(geometry) {
    const geometryAttributes = geometry.attributes;
    for (const name in geometryAttributes) {
      attributes.update(geometryAttributes[name], gl.ARRAY_BUFFER);
    }
    const morphAttributes = geometry.morphAttributes;
    for (const name in morphAttributes) {
      const array3 = morphAttributes[name];
      for (let i2 = 0, l2 = array3.length; i2 < l2; i2++) {
        attributes.update(array3[i2], gl.ARRAY_BUFFER);
      }
    }
  }
  function updateWireframeAttribute(geometry) {
    const indices = [];
    const geometryIndex = geometry.index;
    const geometryPosition = geometry.attributes.position;
    let version = 0;
    if (geometryIndex !== null) {
      const array3 = geometryIndex.array;
      version = geometryIndex.version;
      for (let i2 = 0, l2 = array3.length; i2 < l2; i2 += 3) {
        const a2 = array3[i2 + 0];
        const b = array3[i2 + 1];
        const c4 = array3[i2 + 2];
        indices.push(a2, b, b, c4, c4, a2);
      }
    } else if (geometryPosition !== void 0) {
      const array3 = geometryPosition.array;
      version = geometryPosition.version;
      for (let i2 = 0, l2 = array3.length / 3 - 1; i2 < l2; i2 += 3) {
        const a2 = i2 + 0;
        const b = i2 + 1;
        const c4 = i2 + 2;
        indices.push(a2, b, b, c4, c4, a2);
      }
    } else {
      return;
    }
    const attribute2 = new (arrayNeedsUint32(indices) ? Uint32BufferAttribute : Uint16BufferAttribute)(indices, 1);
    attribute2.version = version;
    const previousAttribute = wireframeAttributes.get(geometry);
    if (previousAttribute) attributes.remove(previousAttribute);
    wireframeAttributes.set(geometry, attribute2);
  }
  function getWireframeAttribute(geometry) {
    const currentAttribute = wireframeAttributes.get(geometry);
    if (currentAttribute) {
      const geometryIndex = geometry.index;
      if (geometryIndex !== null) {
        if (currentAttribute.version < geometryIndex.version) {
          updateWireframeAttribute(geometry);
        }
      }
    } else {
      updateWireframeAttribute(geometry);
    }
    return wireframeAttributes.get(geometry);
  }
  return {
    get,
    update: update20,
    getWireframeAttribute
  };
}
function WebGLIndexedBufferRenderer(gl, extensions, info) {
  let mode2;
  function setMode(value) {
    mode2 = value;
  }
  let type, bytesPerElement;
  function setIndex(value) {
    type = value.type;
    bytesPerElement = value.bytesPerElement;
  }
  function render3(start, count2) {
    gl.drawElements(mode2, count2, type, start * bytesPerElement);
    info.update(count2, mode2, 1);
  }
  function renderInstances(start, count2, primcount) {
    if (primcount === 0) return;
    gl.drawElementsInstanced(mode2, count2, type, start * bytesPerElement, primcount);
    info.update(count2, mode2, primcount);
  }
  function renderMultiDraw(starts, counts, drawCount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    extension.multiDrawElementsWEBGL(mode2, counts, 0, type, starts, 0, drawCount);
    let elementCount = 0;
    for (let i2 = 0; i2 < drawCount; i2++) {
      elementCount += counts[i2];
    }
    info.update(elementCount, mode2, 1);
  }
  function renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < starts.length; i2++) {
        renderInstances(starts[i2] / bytesPerElement, counts[i2], primcount[i2]);
      }
    } else {
      extension.multiDrawElementsInstancedWEBGL(mode2, counts, 0, type, starts, 0, primcount, 0, drawCount);
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2];
      }
      for (let i2 = 0; i2 < primcount.length; i2++) {
        info.update(elementCount, mode2, primcount[i2]);
      }
    }
  }
  this.setMode = setMode;
  this.setIndex = setIndex;
  this.render = render3;
  this.renderInstances = renderInstances;
  this.renderMultiDraw = renderMultiDraw;
  this.renderMultiDrawInstances = renderMultiDrawInstances;
}
function WebGLInfo(gl) {
  const memory = {
    geometries: 0,
    textures: 0
  };
  const render3 = {
    frame: 0,
    calls: 0,
    triangles: 0,
    points: 0,
    lines: 0
  };
  function update20(count2, mode2, instanceCount) {
    render3.calls++;
    switch (mode2) {
      case gl.TRIANGLES:
        render3.triangles += instanceCount * (count2 / 3);
        break;
      case gl.LINES:
        render3.lines += instanceCount * (count2 / 2);
        break;
      case gl.LINE_STRIP:
        render3.lines += instanceCount * (count2 - 1);
        break;
      case gl.LINE_LOOP:
        render3.lines += instanceCount * count2;
        break;
      case gl.POINTS:
        render3.points += instanceCount * count2;
        break;
      default:
        console.error("THREE.WebGLInfo: Unknown draw mode:", mode2);
        break;
    }
  }
  function reset() {
    render3.calls = 0;
    render3.triangles = 0;
    render3.points = 0;
    render3.lines = 0;
  }
  return {
    memory,
    render: render3,
    programs: null,
    autoReset: true,
    reset,
    update: update20
  };
}
function WebGLMorphtargets(gl, capabilities, textures) {
  const morphTextures = /* @__PURE__ */ new WeakMap();
  const morph = new Vector4();
  function update20(object2, geometry, program) {
    const objectInfluences = object2.morphTargetInfluences;
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let entry = morphTextures.get(geometry);
    if (entry === void 0 || entry.count !== morphTargetsCount) {
      let disposeTexture = function() {
        texture2.dispose();
        morphTextures.delete(geometry);
        geometry.removeEventListener("dispose", disposeTexture);
      };
      if (entry !== void 0) entry.texture.dispose();
      const hasMorphPosition = geometry.morphAttributes.position !== void 0;
      const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
      const hasMorphColors = geometry.morphAttributes.color !== void 0;
      const morphTargets = geometry.morphAttributes.position || [];
      const morphNormals = geometry.morphAttributes.normal || [];
      const morphColors = geometry.morphAttributes.color || [];
      let vertexDataCount = 0;
      if (hasMorphPosition === true) vertexDataCount = 1;
      if (hasMorphNormals === true) vertexDataCount = 2;
      if (hasMorphColors === true) vertexDataCount = 3;
      let width = geometry.attributes.position.count * vertexDataCount;
      let height = 1;
      if (width > capabilities.maxTextureSize) {
        height = Math.ceil(width / capabilities.maxTextureSize);
        width = capabilities.maxTextureSize;
      }
      const buffer2 = new Float32Array(width * height * 4 * morphTargetsCount);
      const texture2 = new DataArrayTexture(buffer2, width, height, morphTargetsCount);
      texture2.type = FloatType;
      texture2.needsUpdate = true;
      const vertexDataStride = vertexDataCount * 4;
      for (let i2 = 0; i2 < morphTargetsCount; i2++) {
        const morphTarget = morphTargets[i2];
        const morphNormal = morphNormals[i2];
        const morphColor = morphColors[i2];
        const offset = width * height * 4 * i2;
        for (let j2 = 0; j2 < morphTarget.count; j2++) {
          const stride = j2 * vertexDataStride;
          if (hasMorphPosition === true) {
            morph.fromBufferAttribute(morphTarget, j2);
            buffer2[offset + stride + 0] = morph.x;
            buffer2[offset + stride + 1] = morph.y;
            buffer2[offset + stride + 2] = morph.z;
            buffer2[offset + stride + 3] = 0;
          }
          if (hasMorphNormals === true) {
            morph.fromBufferAttribute(morphNormal, j2);
            buffer2[offset + stride + 4] = morph.x;
            buffer2[offset + stride + 5] = morph.y;
            buffer2[offset + stride + 6] = morph.z;
            buffer2[offset + stride + 7] = 0;
          }
          if (hasMorphColors === true) {
            morph.fromBufferAttribute(morphColor, j2);
            buffer2[offset + stride + 8] = morph.x;
            buffer2[offset + stride + 9] = morph.y;
            buffer2[offset + stride + 10] = morph.z;
            buffer2[offset + stride + 11] = morphColor.itemSize === 4 ? morph.w : 1;
          }
        }
      }
      entry = {
        count: morphTargetsCount,
        texture: texture2,
        size: new Vector2(width, height)
      };
      morphTextures.set(geometry, entry);
      geometry.addEventListener("dispose", disposeTexture);
    }
    if (object2.isInstancedMesh === true && object2.morphTexture !== null) {
      program.getUniforms().setValue(gl, "morphTexture", object2.morphTexture, textures);
    } else {
      let morphInfluencesSum = 0;
      for (let i2 = 0; i2 < objectInfluences.length; i2++) {
        morphInfluencesSum += objectInfluences[i2];
      }
      const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;
      program.getUniforms().setValue(gl, "morphTargetBaseInfluence", morphBaseInfluence);
      program.getUniforms().setValue(gl, "morphTargetInfluences", objectInfluences);
    }
    program.getUniforms().setValue(gl, "morphTargetsTexture", entry.texture, textures);
    program.getUniforms().setValue(gl, "morphTargetsTextureSize", entry.size);
  }
  return {
    update: update20
  };
}
function WebGLObjects(gl, geometries, attributes, info) {
  let updateMap = /* @__PURE__ */ new WeakMap();
  function update20(object2) {
    const frame = info.render.frame;
    const geometry = object2.geometry;
    const buffergeometry = geometries.get(object2, geometry);
    if (updateMap.get(buffergeometry) !== frame) {
      geometries.update(buffergeometry);
      updateMap.set(buffergeometry, frame);
    }
    if (object2.isInstancedMesh) {
      if (object2.hasEventListener("dispose", onInstancedMeshDispose) === false) {
        object2.addEventListener("dispose", onInstancedMeshDispose);
      }
      if (updateMap.get(object2) !== frame) {
        attributes.update(object2.instanceMatrix, gl.ARRAY_BUFFER);
        if (object2.instanceColor !== null) {
          attributes.update(object2.instanceColor, gl.ARRAY_BUFFER);
        }
        updateMap.set(object2, frame);
      }
    }
    if (object2.isSkinnedMesh) {
      const skeleton = object2.skeleton;
      if (updateMap.get(skeleton) !== frame) {
        skeleton.update();
        updateMap.set(skeleton, frame);
      }
    }
    return buffergeometry;
  }
  function dispose() {
    updateMap = /* @__PURE__ */ new WeakMap();
  }
  function onInstancedMeshDispose(event) {
    const instancedMesh = event.target;
    instancedMesh.removeEventListener("dispose", onInstancedMeshDispose);
    attributes.remove(instancedMesh.instanceMatrix);
    if (instancedMesh.instanceColor !== null) attributes.remove(instancedMesh.instanceColor);
  }
  return {
    update: update20,
    dispose
  };
}
var DepthTexture = class extends Texture {
  constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy2, format3 = DepthFormat) {
    if (format3 !== DepthFormat && format3 !== DepthStencilFormat) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    if (type === void 0 && format3 === DepthFormat) type = UnsignedIntType;
    if (type === void 0 && format3 === DepthStencilFormat) type = UnsignedInt248Type;
    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2);
    this.isDepthTexture = true;
    this.image = { width, height };
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter;
    this.flipY = false;
    this.generateMipmaps = false;
    this.compareFunction = null;
  }
  copy(source) {
    super.copy(source);
    this.compareFunction = source.compareFunction;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
    return data;
  }
};
var emptyTexture = new Texture();
var emptyShadowTexture = new DepthTexture(1, 1);
var emptyArrayTexture = new DataArrayTexture();
var empty3dTexture = new Data3DTexture();
var emptyCubeTexture = new CubeTexture();
var arrayCacheF32 = [];
var arrayCacheI32 = [];
var mat4array = new Float32Array(16);
var mat3array = new Float32Array(9);
var mat2array = new Float32Array(4);
function flatten(array3, nBlocks, blockSize) {
  const firstElem = array3[0];
  if (firstElem <= 0 || firstElem > 0) return array3;
  const n2 = nBlocks * blockSize;
  let r2 = arrayCacheF32[n2];
  if (r2 === void 0) {
    r2 = new Float32Array(n2);
    arrayCacheF32[n2] = r2;
  }
  if (nBlocks !== 0) {
    firstElem.toArray(r2, 0);
    for (let i2 = 1, offset = 0; i2 !== nBlocks; ++i2) {
      offset += blockSize;
      array3[i2].toArray(r2, offset);
    }
  }
  return r2;
}
function arraysEqual(a2, b) {
  if (a2.length !== b.length) return false;
  for (let i2 = 0, l2 = a2.length; i2 < l2; i2++) {
    if (a2[i2] !== b[i2]) return false;
  }
  return true;
}
function copyArray(a2, b) {
  for (let i2 = 0, l2 = b.length; i2 < l2; i2++) {
    a2[i2] = b[i2];
  }
}
function allocTexUnits(textures, n2) {
  let r2 = arrayCacheI32[n2];
  if (r2 === void 0) {
    r2 = new Int32Array(n2);
    arrayCacheI32[n2] = r2;
  }
  for (let i2 = 0; i2 !== n2; ++i2) {
    r2[i2] = textures.allocateTextureUnit();
  }
  return r2;
}
function setValueV1f(gl, v3) {
  const cache2 = this.cache;
  if (cache2[0] === v3) return;
  gl.uniform1f(this.addr, v3);
  cache2[0] = v3;
}
function setValueV2f(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y) {
      gl.uniform2f(this.addr, v3.x, v3.y);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform2fv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV3f(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y || cache2[2] !== v3.z) {
      gl.uniform3f(this.addr, v3.x, v3.y, v3.z);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
      cache2[2] = v3.z;
    }
  } else if (v3.r !== void 0) {
    if (cache2[0] !== v3.r || cache2[1] !== v3.g || cache2[2] !== v3.b) {
      gl.uniform3f(this.addr, v3.r, v3.g, v3.b);
      cache2[0] = v3.r;
      cache2[1] = v3.g;
      cache2[2] = v3.b;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform3fv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV4f(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y || cache2[2] !== v3.z || cache2[3] !== v3.w) {
      gl.uniform4f(this.addr, v3.x, v3.y, v3.z, v3.w);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
      cache2[2] = v3.z;
      cache2[3] = v3.w;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform4fv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueM2(gl, v3) {
  const cache2 = this.cache;
  const elements = v3.elements;
  if (elements === void 0) {
    if (arraysEqual(cache2, v3)) return;
    gl.uniformMatrix2fv(this.addr, false, v3);
    copyArray(cache2, v3);
  } else {
    if (arraysEqual(cache2, elements)) return;
    mat2array.set(elements);
    gl.uniformMatrix2fv(this.addr, false, mat2array);
    copyArray(cache2, elements);
  }
}
function setValueM3(gl, v3) {
  const cache2 = this.cache;
  const elements = v3.elements;
  if (elements === void 0) {
    if (arraysEqual(cache2, v3)) return;
    gl.uniformMatrix3fv(this.addr, false, v3);
    copyArray(cache2, v3);
  } else {
    if (arraysEqual(cache2, elements)) return;
    mat3array.set(elements);
    gl.uniformMatrix3fv(this.addr, false, mat3array);
    copyArray(cache2, elements);
  }
}
function setValueM4(gl, v3) {
  const cache2 = this.cache;
  const elements = v3.elements;
  if (elements === void 0) {
    if (arraysEqual(cache2, v3)) return;
    gl.uniformMatrix4fv(this.addr, false, v3);
    copyArray(cache2, v3);
  } else {
    if (arraysEqual(cache2, elements)) return;
    mat4array.set(elements);
    gl.uniformMatrix4fv(this.addr, false, mat4array);
    copyArray(cache2, elements);
  }
}
function setValueV1i(gl, v3) {
  const cache2 = this.cache;
  if (cache2[0] === v3) return;
  gl.uniform1i(this.addr, v3);
  cache2[0] = v3;
}
function setValueV2i(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y) {
      gl.uniform2i(this.addr, v3.x, v3.y);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform2iv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV3i(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y || cache2[2] !== v3.z) {
      gl.uniform3i(this.addr, v3.x, v3.y, v3.z);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
      cache2[2] = v3.z;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform3iv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV4i(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y || cache2[2] !== v3.z || cache2[3] !== v3.w) {
      gl.uniform4i(this.addr, v3.x, v3.y, v3.z, v3.w);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
      cache2[2] = v3.z;
      cache2[3] = v3.w;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform4iv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV1ui(gl, v3) {
  const cache2 = this.cache;
  if (cache2[0] === v3) return;
  gl.uniform1ui(this.addr, v3);
  cache2[0] = v3;
}
function setValueV2ui(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y) {
      gl.uniform2ui(this.addr, v3.x, v3.y);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform2uiv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV3ui(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y || cache2[2] !== v3.z) {
      gl.uniform3ui(this.addr, v3.x, v3.y, v3.z);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
      cache2[2] = v3.z;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform3uiv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueV4ui(gl, v3) {
  const cache2 = this.cache;
  if (v3.x !== void 0) {
    if (cache2[0] !== v3.x || cache2[1] !== v3.y || cache2[2] !== v3.z || cache2[3] !== v3.w) {
      gl.uniform4ui(this.addr, v3.x, v3.y, v3.z, v3.w);
      cache2[0] = v3.x;
      cache2[1] = v3.y;
      cache2[2] = v3.z;
      cache2[3] = v3.w;
    }
  } else {
    if (arraysEqual(cache2, v3)) return;
    gl.uniform4uiv(this.addr, v3);
    copyArray(cache2, v3);
  }
}
function setValueT1(gl, v3, textures) {
  const cache2 = this.cache;
  const unit2 = textures.allocateTextureUnit();
  if (cache2[0] !== unit2) {
    gl.uniform1i(this.addr, unit2);
    cache2[0] = unit2;
  }
  let emptyTexture2D;
  if (this.type === gl.SAMPLER_2D_SHADOW) {
    emptyShadowTexture.compareFunction = LessEqualCompare;
    emptyTexture2D = emptyShadowTexture;
  } else {
    emptyTexture2D = emptyTexture;
  }
  textures.setTexture2D(v3 || emptyTexture2D, unit2);
}
function setValueT3D1(gl, v3, textures) {
  const cache2 = this.cache;
  const unit2 = textures.allocateTextureUnit();
  if (cache2[0] !== unit2) {
    gl.uniform1i(this.addr, unit2);
    cache2[0] = unit2;
  }
  textures.setTexture3D(v3 || empty3dTexture, unit2);
}
function setValueT6(gl, v3, textures) {
  const cache2 = this.cache;
  const unit2 = textures.allocateTextureUnit();
  if (cache2[0] !== unit2) {
    gl.uniform1i(this.addr, unit2);
    cache2[0] = unit2;
  }
  textures.setTextureCube(v3 || emptyCubeTexture, unit2);
}
function setValueT2DArray1(gl, v3, textures) {
  const cache2 = this.cache;
  const unit2 = textures.allocateTextureUnit();
  if (cache2[0] !== unit2) {
    gl.uniform1i(this.addr, unit2);
    cache2[0] = unit2;
  }
  textures.setTexture2DArray(v3 || emptyArrayTexture, unit2);
}
function getSingularSetter(type) {
  switch (type) {
    case 5126:
      return setValueV1f;
    // FLOAT
    case 35664:
      return setValueV2f;
    // _VEC2
    case 35665:
      return setValueV3f;
    // _VEC3
    case 35666:
      return setValueV4f;
    // _VEC4
    case 35674:
      return setValueM2;
    // _MAT2
    case 35675:
      return setValueM3;
    // _MAT3
    case 35676:
      return setValueM4;
    // _MAT4
    case 5124:
    case 35670:
      return setValueV1i;
    // INT, BOOL
    case 35667:
    case 35671:
      return setValueV2i;
    // _VEC2
    case 35668:
    case 35672:
      return setValueV3i;
    // _VEC3
    case 35669:
    case 35673:
      return setValueV4i;
    // _VEC4
    case 5125:
      return setValueV1ui;
    // UINT
    case 36294:
      return setValueV2ui;
    // _VEC2
    case 36295:
      return setValueV3ui;
    // _VEC3
    case 36296:
      return setValueV4ui;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return setValueT1;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return setValueT3D1;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return setValueT6;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return setValueT2DArray1;
  }
}
function setValueV1fArray(gl, v3) {
  gl.uniform1fv(this.addr, v3);
}
function setValueV2fArray(gl, v3) {
  const data = flatten(v3, this.size, 2);
  gl.uniform2fv(this.addr, data);
}
function setValueV3fArray(gl, v3) {
  const data = flatten(v3, this.size, 3);
  gl.uniform3fv(this.addr, data);
}
function setValueV4fArray(gl, v3) {
  const data = flatten(v3, this.size, 4);
  gl.uniform4fv(this.addr, data);
}
function setValueM2Array(gl, v3) {
  const data = flatten(v3, this.size, 4);
  gl.uniformMatrix2fv(this.addr, false, data);
}
function setValueM3Array(gl, v3) {
  const data = flatten(v3, this.size, 9);
  gl.uniformMatrix3fv(this.addr, false, data);
}
function setValueM4Array(gl, v3) {
  const data = flatten(v3, this.size, 16);
  gl.uniformMatrix4fv(this.addr, false, data);
}
function setValueV1iArray(gl, v3) {
  gl.uniform1iv(this.addr, v3);
}
function setValueV2iArray(gl, v3) {
  gl.uniform2iv(this.addr, v3);
}
function setValueV3iArray(gl, v3) {
  gl.uniform3iv(this.addr, v3);
}
function setValueV4iArray(gl, v3) {
  gl.uniform4iv(this.addr, v3);
}
function setValueV1uiArray(gl, v3) {
  gl.uniform1uiv(this.addr, v3);
}
function setValueV2uiArray(gl, v3) {
  gl.uniform2uiv(this.addr, v3);
}
function setValueV3uiArray(gl, v3) {
  gl.uniform3uiv(this.addr, v3);
}
function setValueV4uiArray(gl, v3) {
  gl.uniform4uiv(this.addr, v3);
}
function setValueT1Array(gl, v3, textures) {
  const cache2 = this.cache;
  const n2 = v3.length;
  const units = allocTexUnits(textures, n2);
  if (!arraysEqual(cache2, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache2, units);
  }
  for (let i2 = 0; i2 !== n2; ++i2) {
    textures.setTexture2D(v3[i2] || emptyTexture, units[i2]);
  }
}
function setValueT3DArray(gl, v3, textures) {
  const cache2 = this.cache;
  const n2 = v3.length;
  const units = allocTexUnits(textures, n2);
  if (!arraysEqual(cache2, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache2, units);
  }
  for (let i2 = 0; i2 !== n2; ++i2) {
    textures.setTexture3D(v3[i2] || empty3dTexture, units[i2]);
  }
}
function setValueT6Array(gl, v3, textures) {
  const cache2 = this.cache;
  const n2 = v3.length;
  const units = allocTexUnits(textures, n2);
  if (!arraysEqual(cache2, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache2, units);
  }
  for (let i2 = 0; i2 !== n2; ++i2) {
    textures.setTextureCube(v3[i2] || emptyCubeTexture, units[i2]);
  }
}
function setValueT2DArrayArray(gl, v3, textures) {
  const cache2 = this.cache;
  const n2 = v3.length;
  const units = allocTexUnits(textures, n2);
  if (!arraysEqual(cache2, units)) {
    gl.uniform1iv(this.addr, units);
    copyArray(cache2, units);
  }
  for (let i2 = 0; i2 !== n2; ++i2) {
    textures.setTexture2DArray(v3[i2] || emptyArrayTexture, units[i2]);
  }
}
function getPureArraySetter(type) {
  switch (type) {
    case 5126:
      return setValueV1fArray;
    // FLOAT
    case 35664:
      return setValueV2fArray;
    // _VEC2
    case 35665:
      return setValueV3fArray;
    // _VEC3
    case 35666:
      return setValueV4fArray;
    // _VEC4
    case 35674:
      return setValueM2Array;
    // _MAT2
    case 35675:
      return setValueM3Array;
    // _MAT3
    case 35676:
      return setValueM4Array;
    // _MAT4
    case 5124:
    case 35670:
      return setValueV1iArray;
    // INT, BOOL
    case 35667:
    case 35671:
      return setValueV2iArray;
    // _VEC2
    case 35668:
    case 35672:
      return setValueV3iArray;
    // _VEC3
    case 35669:
    case 35673:
      return setValueV4iArray;
    // _VEC4
    case 5125:
      return setValueV1uiArray;
    // UINT
    case 36294:
      return setValueV2uiArray;
    // _VEC2
    case 36295:
      return setValueV3uiArray;
    // _VEC3
    case 36296:
      return setValueV4uiArray;
    // _VEC4
    case 35678:
    // SAMPLER_2D
    case 36198:
    // SAMPLER_EXTERNAL_OES
    case 36298:
    // INT_SAMPLER_2D
    case 36306:
    // UNSIGNED_INT_SAMPLER_2D
    case 35682:
      return setValueT1Array;
    case 35679:
    // SAMPLER_3D
    case 36299:
    // INT_SAMPLER_3D
    case 36307:
      return setValueT3DArray;
    case 35680:
    // SAMPLER_CUBE
    case 36300:
    // INT_SAMPLER_CUBE
    case 36308:
    // UNSIGNED_INT_SAMPLER_CUBE
    case 36293:
      return setValueT6Array;
    case 36289:
    // SAMPLER_2D_ARRAY
    case 36303:
    // INT_SAMPLER_2D_ARRAY
    case 36311:
    // UNSIGNED_INT_SAMPLER_2D_ARRAY
    case 36292:
      return setValueT2DArrayArray;
  }
}
var SingleUniform = class {
  constructor(id2, activeInfo, addr) {
    this.id = id2;
    this.addr = addr;
    this.cache = [];
    this.type = activeInfo.type;
    this.setValue = getSingularSetter(activeInfo.type);
  }
};
var PureArrayUniform = class {
  constructor(id2, activeInfo, addr) {
    this.id = id2;
    this.addr = addr;
    this.cache = [];
    this.type = activeInfo.type;
    this.size = activeInfo.size;
    this.setValue = getPureArraySetter(activeInfo.type);
  }
};
var StructuredUniform = class {
  constructor(id2) {
    this.id = id2;
    this.seq = [];
    this.map = {};
  }
  setValue(gl, value, textures) {
    const seq = this.seq;
    for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
      const u5 = seq[i2];
      u5.setValue(gl, value[u5.id], textures);
    }
  }
};
var RePathPart = /(\w+)(\])?(\[|\.)?/g;
function addUniform(container, uniformObject) {
  container.seq.push(uniformObject);
  container.map[uniformObject.id] = uniformObject;
}
function parseUniform(activeInfo, addr, container) {
  const path = activeInfo.name, pathLength = path.length;
  RePathPart.lastIndex = 0;
  while (true) {
    const match = RePathPart.exec(path), matchEnd = RePathPart.lastIndex;
    let id2 = match[1];
    const idIsIndex = match[2] === "]", subscript = match[3];
    if (idIsIndex) id2 = id2 | 0;
    if (subscript === void 0 || subscript === "[" && matchEnd + 2 === pathLength) {
      addUniform(container, subscript === void 0 ? new SingleUniform(id2, activeInfo, addr) : new PureArrayUniform(id2, activeInfo, addr));
      break;
    } else {
      const map4 = container.map;
      let next = map4[id2];
      if (next === void 0) {
        next = new StructuredUniform(id2);
        addUniform(container, next);
      }
      container = next;
    }
  }
}
var WebGLUniforms = class {
  constructor(gl, program) {
    this.seq = [];
    this.map = {};
    const n2 = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
    for (let i2 = 0; i2 < n2; ++i2) {
      const info = gl.getActiveUniform(program, i2), addr = gl.getUniformLocation(program, info.name);
      parseUniform(info, addr, this);
    }
  }
  setValue(gl, name, value, textures) {
    const u5 = this.map[name];
    if (u5 !== void 0) u5.setValue(gl, value, textures);
  }
  setOptional(gl, object2, name) {
    const v3 = object2[name];
    if (v3 !== void 0) this.setValue(gl, name, v3);
  }
  static upload(gl, seq, values, textures) {
    for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
      const u5 = seq[i2], v3 = values[u5.id];
      if (v3.needsUpdate !== false) {
        u5.setValue(gl, v3.value, textures);
      }
    }
  }
  static seqWithValue(seq, values) {
    const r2 = [];
    for (let i2 = 0, n2 = seq.length; i2 !== n2; ++i2) {
      const u5 = seq[i2];
      if (u5.id in values) r2.push(u5);
    }
    return r2;
  }
};
function WebGLShader(gl, type, string) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, string);
  gl.compileShader(shader);
  return shader;
}
var COMPLETION_STATUS_KHR = 37297;
var programIdCount = 0;
function handleSource(string, errorLine) {
  const lines = string.split("\n");
  const lines2 = [];
  const from = Math.max(errorLine - 6, 0);
  const to = Math.min(errorLine + 6, lines.length);
  for (let i2 = from; i2 < to; i2++) {
    const line = i2 + 1;
    lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i2]}`);
  }
  return lines2.join("\n");
}
function getEncodingComponents(colorSpace) {
  const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
  const encodingPrimaries = ColorManagement.getPrimaries(colorSpace);
  let gamutMapping;
  if (workingPrimaries === encodingPrimaries) {
    gamutMapping = "";
  } else if (workingPrimaries === P3Primaries && encodingPrimaries === Rec709Primaries) {
    gamutMapping = "LinearDisplayP3ToLinearSRGB";
  } else if (workingPrimaries === Rec709Primaries && encodingPrimaries === P3Primaries) {
    gamutMapping = "LinearSRGBToLinearDisplayP3";
  }
  switch (colorSpace) {
    case LinearSRGBColorSpace:
    case LinearDisplayP3ColorSpace:
      return [gamutMapping, "LinearTransferOETF"];
    case SRGBColorSpace:
    case DisplayP3ColorSpace:
      return [gamutMapping, "sRGBTransferOETF"];
    default:
      console.warn("THREE.WebGLProgram: Unsupported color space:", colorSpace);
      return [gamutMapping, "LinearTransferOETF"];
  }
}
function getShaderErrors(gl, shader, type) {
  const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
  const errors = gl.getShaderInfoLog(shader).trim();
  if (status && errors === "") return "";
  const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
  if (errorMatches) {
    const errorLine = parseInt(errorMatches[1]);
    return type.toUpperCase() + "\n\n" + errors + "\n\n" + handleSource(gl.getShaderSource(shader), errorLine);
  } else {
    return errors;
  }
}
function getTexelEncodingFunction(functionName, colorSpace) {
  const components = getEncodingComponents(colorSpace);
  return `vec4 ${functionName}( vec4 value ) { return ${components[0]}( ${components[1]}( value ) ); }`;
}
function getToneMappingFunction(functionName, toneMapping2) {
  let toneMappingName;
  switch (toneMapping2) {
    case LinearToneMapping:
      toneMappingName = "Linear";
      break;
    case ReinhardToneMapping:
      toneMappingName = "Reinhard";
      break;
    case CineonToneMapping:
      toneMappingName = "Cineon";
      break;
    case ACESFilmicToneMapping:
      toneMappingName = "ACESFilmic";
      break;
    case AgXToneMapping:
      toneMappingName = "AgX";
      break;
    case NeutralToneMapping:
      toneMappingName = "Neutral";
      break;
    case CustomToneMapping:
      toneMappingName = "Custom";
      break;
    default:
      console.warn("THREE.WebGLProgram: Unsupported toneMapping:", toneMapping2);
      toneMappingName = "Linear";
  }
  return "vec3 " + functionName + "( vec3 color ) { return " + toneMappingName + "ToneMapping( color ); }";
}
var _v0$1 = new Vector3();
function getLuminanceFunction() {
  ColorManagement.getLuminanceCoefficients(_v0$1);
  const r2 = _v0$1.x.toFixed(4);
  const g2 = _v0$1.y.toFixed(4);
  const b = _v0$1.z.toFixed(4);
  return [
    "float luminance( const in vec3 rgb ) {",
    `	const vec3 weights = vec3( ${r2}, ${g2}, ${b} );`,
    "	return dot( weights, rgb );",
    "}"
  ].join("\n");
}
function generateVertexExtensions(parameters) {
  const chunks = [
    parameters.extensionClipCullDistance ? "#extension GL_ANGLE_clip_cull_distance : require" : "",
    parameters.extensionMultiDraw ? "#extension GL_ANGLE_multi_draw : require" : ""
  ];
  return chunks.filter(filterEmptyLine).join("\n");
}
function generateDefines(defines) {
  const chunks = [];
  for (const name in defines) {
    const value = defines[name];
    if (value === false) continue;
    chunks.push("#define " + name + " " + value);
  }
  return chunks.join("\n");
}
function fetchAttributeLocations(gl, program) {
  const attributes = {};
  const n2 = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
  for (let i2 = 0; i2 < n2; i2++) {
    const info = gl.getActiveAttrib(program, i2);
    const name = info.name;
    let locationSize = 1;
    if (info.type === gl.FLOAT_MAT2) locationSize = 2;
    if (info.type === gl.FLOAT_MAT3) locationSize = 3;
    if (info.type === gl.FLOAT_MAT4) locationSize = 4;
    attributes[name] = {
      type: info.type,
      location: gl.getAttribLocation(program, name),
      locationSize
    };
  }
  return attributes;
}
function filterEmptyLine(string) {
  return string !== "";
}
function replaceLightNums(string, parameters) {
  const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;
  return string.replace(/NUM_DIR_LIGHTS/g, parameters.numDirLights).replace(/NUM_SPOT_LIGHTS/g, parameters.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords).replace(/NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g, parameters.numPointLights).replace(/NUM_HEMI_LIGHTS/g, parameters.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows);
}
function replaceClippingPlaneNums(string, parameters) {
  return string.replace(/NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g, parameters.numClippingPlanes - parameters.numClipIntersection);
}
var includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;
function resolveIncludes(string) {
  return string.replace(includePattern, includeReplacer);
}
var shaderChunkMap = /* @__PURE__ */ new Map();
function includeReplacer(match, include) {
  let string = ShaderChunk[include];
  if (string === void 0) {
    const newInclude = shaderChunkMap.get(include);
    if (newInclude !== void 0) {
      string = ShaderChunk[newInclude];
      console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude);
    } else {
      throw new Error("Can not resolve #include <" + include + ">");
    }
  }
  return resolveIncludes(string);
}
var unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;
function unrollLoops(string) {
  return string.replace(unrollLoopPattern, loopReplacer);
}
function loopReplacer(match, start, end, snippet) {
  let string = "";
  for (let i2 = parseInt(start); i2 < parseInt(end); i2++) {
    string += snippet.replace(/\[\s*i\s*\]/g, "[ " + i2 + " ]").replace(/UNROLLED_LOOP_INDEX/g, i2);
  }
  return string;
}
function generatePrecision(parameters) {
  let precisionstring = `precision ${parameters.precision} float;
	precision ${parameters.precision} int;
	precision ${parameters.precision} sampler2D;
	precision ${parameters.precision} samplerCube;
	precision ${parameters.precision} sampler3D;
	precision ${parameters.precision} sampler2DArray;
	precision ${parameters.precision} sampler2DShadow;
	precision ${parameters.precision} samplerCubeShadow;
	precision ${parameters.precision} sampler2DArrayShadow;
	precision ${parameters.precision} isampler2D;
	precision ${parameters.precision} isampler3D;
	precision ${parameters.precision} isamplerCube;
	precision ${parameters.precision} isampler2DArray;
	precision ${parameters.precision} usampler2D;
	precision ${parameters.precision} usampler3D;
	precision ${parameters.precision} usamplerCube;
	precision ${parameters.precision} usampler2DArray;
	`;
  if (parameters.precision === "highp") {
    precisionstring += "\n#define HIGH_PRECISION";
  } else if (parameters.precision === "mediump") {
    precisionstring += "\n#define MEDIUM_PRECISION";
  } else if (parameters.precision === "lowp") {
    precisionstring += "\n#define LOW_PRECISION";
  }
  return precisionstring;
}
function generateShadowMapTypeDefine(parameters) {
  let shadowMapTypeDefine = "SHADOWMAP_TYPE_BASIC";
  if (parameters.shadowMapType === PCFShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF";
  } else if (parameters.shadowMapType === PCFSoftShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_PCF_SOFT";
  } else if (parameters.shadowMapType === VSMShadowMap) {
    shadowMapTypeDefine = "SHADOWMAP_TYPE_VSM";
  }
  return shadowMapTypeDefine;
}
function generateEnvMapTypeDefine(parameters) {
  let envMapTypeDefine = "ENVMAP_TYPE_CUBE";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeReflectionMapping:
      case CubeRefractionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE";
        break;
      case CubeUVReflectionMapping:
        envMapTypeDefine = "ENVMAP_TYPE_CUBE_UV";
        break;
    }
  }
  return envMapTypeDefine;
}
function generateEnvMapModeDefine(parameters) {
  let envMapModeDefine = "ENVMAP_MODE_REFLECTION";
  if (parameters.envMap) {
    switch (parameters.envMapMode) {
      case CubeRefractionMapping:
        envMapModeDefine = "ENVMAP_MODE_REFRACTION";
        break;
    }
  }
  return envMapModeDefine;
}
function generateEnvMapBlendingDefine(parameters) {
  let envMapBlendingDefine = "ENVMAP_BLENDING_NONE";
  if (parameters.envMap) {
    switch (parameters.combine) {
      case MultiplyOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MULTIPLY";
        break;
      case MixOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_MIX";
        break;
      case AddOperation:
        envMapBlendingDefine = "ENVMAP_BLENDING_ADD";
        break;
    }
  }
  return envMapBlendingDefine;
}
function generateCubeUVSize(parameters) {
  const imageHeight = parameters.envMapCubeUVHeight;
  if (imageHeight === null) return null;
  const maxMip = Math.log2(imageHeight) - 2;
  const texelHeight = 1 / imageHeight;
  const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
  return { texelWidth, texelHeight, maxMip };
}
function WebGLProgram(renderer3, cacheKey, parameters, bindingStates) {
  const gl = renderer3.getContext();
  const defines = parameters.defines;
  let vertexShader2 = parameters.vertexShader;
  let fragmentShader2 = parameters.fragmentShader;
  const shadowMapTypeDefine = generateShadowMapTypeDefine(parameters);
  const envMapTypeDefine = generateEnvMapTypeDefine(parameters);
  const envMapModeDefine = generateEnvMapModeDefine(parameters);
  const envMapBlendingDefine = generateEnvMapBlendingDefine(parameters);
  const envMapCubeUVSize = generateCubeUVSize(parameters);
  const customVertexExtensions = generateVertexExtensions(parameters);
  const customDefines = generateDefines(defines);
  const program = gl.createProgram();
  let prefixVertex, prefixFragment;
  let versionString = parameters.glslVersion ? "#version " + parameters.glslVersion + "\n" : "";
  if (parameters.isRawShaderMaterial) {
    prefixVertex = [
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixVertex.length > 0) {
      prefixVertex += "\n";
    }
    prefixFragment = [
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines
    ].filter(filterEmptyLine).join("\n");
    if (prefixFragment.length > 0) {
      prefixFragment += "\n";
    }
  } else {
    prefixVertex = [
      generatePrecision(parameters),
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.extensionClipCullDistance ? "#define USE_CLIP_DISTANCE" : "",
      parameters.batching ? "#define USE_BATCHING" : "",
      parameters.batchingColor ? "#define USE_BATCHING_COLOR" : "",
      parameters.instancing ? "#define USE_INSTANCING" : "",
      parameters.instancingColor ? "#define USE_INSTANCING_COLOR" : "",
      parameters.instancingMorph ? "#define USE_INSTANCING_MORPH" : "",
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      parameters.displacementMap ? "#define USE_DISPLACEMENTMAP" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
      parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
      parameters.transmission ? "#define USE_TRANSMISSION" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      //
      parameters.mapUv ? "#define MAP_UV " + parameters.mapUv : "",
      parameters.alphaMapUv ? "#define ALPHAMAP_UV " + parameters.alphaMapUv : "",
      parameters.lightMapUv ? "#define LIGHTMAP_UV " + parameters.lightMapUv : "",
      parameters.aoMapUv ? "#define AOMAP_UV " + parameters.aoMapUv : "",
      parameters.emissiveMapUv ? "#define EMISSIVEMAP_UV " + parameters.emissiveMapUv : "",
      parameters.bumpMapUv ? "#define BUMPMAP_UV " + parameters.bumpMapUv : "",
      parameters.normalMapUv ? "#define NORMALMAP_UV " + parameters.normalMapUv : "",
      parameters.displacementMapUv ? "#define DISPLACEMENTMAP_UV " + parameters.displacementMapUv : "",
      parameters.metalnessMapUv ? "#define METALNESSMAP_UV " + parameters.metalnessMapUv : "",
      parameters.roughnessMapUv ? "#define ROUGHNESSMAP_UV " + parameters.roughnessMapUv : "",
      parameters.anisotropyMapUv ? "#define ANISOTROPYMAP_UV " + parameters.anisotropyMapUv : "",
      parameters.clearcoatMapUv ? "#define CLEARCOATMAP_UV " + parameters.clearcoatMapUv : "",
      parameters.clearcoatNormalMapUv ? "#define CLEARCOAT_NORMALMAP_UV " + parameters.clearcoatNormalMapUv : "",
      parameters.clearcoatRoughnessMapUv ? "#define CLEARCOAT_ROUGHNESSMAP_UV " + parameters.clearcoatRoughnessMapUv : "",
      parameters.iridescenceMapUv ? "#define IRIDESCENCEMAP_UV " + parameters.iridescenceMapUv : "",
      parameters.iridescenceThicknessMapUv ? "#define IRIDESCENCE_THICKNESSMAP_UV " + parameters.iridescenceThicknessMapUv : "",
      parameters.sheenColorMapUv ? "#define SHEEN_COLORMAP_UV " + parameters.sheenColorMapUv : "",
      parameters.sheenRoughnessMapUv ? "#define SHEEN_ROUGHNESSMAP_UV " + parameters.sheenRoughnessMapUv : "",
      parameters.specularMapUv ? "#define SPECULARMAP_UV " + parameters.specularMapUv : "",
      parameters.specularColorMapUv ? "#define SPECULAR_COLORMAP_UV " + parameters.specularColorMapUv : "",
      parameters.specularIntensityMapUv ? "#define SPECULAR_INTENSITYMAP_UV " + parameters.specularIntensityMapUv : "",
      parameters.transmissionMapUv ? "#define TRANSMISSIONMAP_UV " + parameters.transmissionMapUv : "",
      parameters.thicknessMapUv ? "#define THICKNESSMAP_UV " + parameters.thicknessMapUv : "",
      //
      parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
      parameters.vertexColors ? "#define USE_COLOR" : "",
      parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      parameters.vertexUv1s ? "#define USE_UV1" : "",
      parameters.vertexUv2s ? "#define USE_UV2" : "",
      parameters.vertexUv3s ? "#define USE_UV3" : "",
      parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.skinning ? "#define USE_SKINNING" : "",
      parameters.morphTargets ? "#define USE_MORPHTARGETS" : "",
      parameters.morphNormals && parameters.flatShading === false ? "#define USE_MORPHNORMALS" : "",
      parameters.morphColors ? "#define USE_MORPHCOLORS" : "",
      parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_TEXTURE_STRIDE " + parameters.morphTextureStride : "",
      parameters.morphTargetsCount > 0 ? "#define MORPHTARGETS_COUNT " + parameters.morphTargetsCount : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.sizeAttenuation ? "#define USE_SIZEATTENUATION" : "",
      parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      "uniform mat4 modelMatrix;",
      "uniform mat4 modelViewMatrix;",
      "uniform mat4 projectionMatrix;",
      "uniform mat4 viewMatrix;",
      "uniform mat3 normalMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      "#ifdef USE_INSTANCING",
      "	attribute mat4 instanceMatrix;",
      "#endif",
      "#ifdef USE_INSTANCING_COLOR",
      "	attribute vec3 instanceColor;",
      "#endif",
      "#ifdef USE_INSTANCING_MORPH",
      "	uniform sampler2D morphTexture;",
      "#endif",
      "attribute vec3 position;",
      "attribute vec3 normal;",
      "attribute vec2 uv;",
      "#ifdef USE_UV1",
      "	attribute vec2 uv1;",
      "#endif",
      "#ifdef USE_UV2",
      "	attribute vec2 uv2;",
      "#endif",
      "#ifdef USE_UV3",
      "	attribute vec2 uv3;",
      "#endif",
      "#ifdef USE_TANGENT",
      "	attribute vec4 tangent;",
      "#endif",
      "#if defined( USE_COLOR_ALPHA )",
      "	attribute vec4 color;",
      "#elif defined( USE_COLOR )",
      "	attribute vec3 color;",
      "#endif",
      "#ifdef USE_SKINNING",
      "	attribute vec4 skinIndex;",
      "	attribute vec4 skinWeight;",
      "#endif",
      "\n"
    ].filter(filterEmptyLine).join("\n");
    prefixFragment = [
      generatePrecision(parameters),
      "#define SHADER_TYPE " + parameters.shaderType,
      "#define SHADER_NAME " + parameters.shaderName,
      customDefines,
      parameters.useFog && parameters.fog ? "#define USE_FOG" : "",
      parameters.useFog && parameters.fogExp2 ? "#define FOG_EXP2" : "",
      parameters.alphaToCoverage ? "#define ALPHA_TO_COVERAGE" : "",
      parameters.map ? "#define USE_MAP" : "",
      parameters.matcap ? "#define USE_MATCAP" : "",
      parameters.envMap ? "#define USE_ENVMAP" : "",
      parameters.envMap ? "#define " + envMapTypeDefine : "",
      parameters.envMap ? "#define " + envMapModeDefine : "",
      parameters.envMap ? "#define " + envMapBlendingDefine : "",
      envMapCubeUVSize ? "#define CUBEUV_TEXEL_WIDTH " + envMapCubeUVSize.texelWidth : "",
      envMapCubeUVSize ? "#define CUBEUV_TEXEL_HEIGHT " + envMapCubeUVSize.texelHeight : "",
      envMapCubeUVSize ? "#define CUBEUV_MAX_MIP " + envMapCubeUVSize.maxMip + ".0" : "",
      parameters.lightMap ? "#define USE_LIGHTMAP" : "",
      parameters.aoMap ? "#define USE_AOMAP" : "",
      parameters.bumpMap ? "#define USE_BUMPMAP" : "",
      parameters.normalMap ? "#define USE_NORMALMAP" : "",
      parameters.normalMapObjectSpace ? "#define USE_NORMALMAP_OBJECTSPACE" : "",
      parameters.normalMapTangentSpace ? "#define USE_NORMALMAP_TANGENTSPACE" : "",
      parameters.emissiveMap ? "#define USE_EMISSIVEMAP" : "",
      parameters.anisotropy ? "#define USE_ANISOTROPY" : "",
      parameters.anisotropyMap ? "#define USE_ANISOTROPYMAP" : "",
      parameters.clearcoat ? "#define USE_CLEARCOAT" : "",
      parameters.clearcoatMap ? "#define USE_CLEARCOATMAP" : "",
      parameters.clearcoatRoughnessMap ? "#define USE_CLEARCOAT_ROUGHNESSMAP" : "",
      parameters.clearcoatNormalMap ? "#define USE_CLEARCOAT_NORMALMAP" : "",
      parameters.dispersion ? "#define USE_DISPERSION" : "",
      parameters.iridescence ? "#define USE_IRIDESCENCE" : "",
      parameters.iridescenceMap ? "#define USE_IRIDESCENCEMAP" : "",
      parameters.iridescenceThicknessMap ? "#define USE_IRIDESCENCE_THICKNESSMAP" : "",
      parameters.specularMap ? "#define USE_SPECULARMAP" : "",
      parameters.specularColorMap ? "#define USE_SPECULAR_COLORMAP" : "",
      parameters.specularIntensityMap ? "#define USE_SPECULAR_INTENSITYMAP" : "",
      parameters.roughnessMap ? "#define USE_ROUGHNESSMAP" : "",
      parameters.metalnessMap ? "#define USE_METALNESSMAP" : "",
      parameters.alphaMap ? "#define USE_ALPHAMAP" : "",
      parameters.alphaTest ? "#define USE_ALPHATEST" : "",
      parameters.alphaHash ? "#define USE_ALPHAHASH" : "",
      parameters.sheen ? "#define USE_SHEEN" : "",
      parameters.sheenColorMap ? "#define USE_SHEEN_COLORMAP" : "",
      parameters.sheenRoughnessMap ? "#define USE_SHEEN_ROUGHNESSMAP" : "",
      parameters.transmission ? "#define USE_TRANSMISSION" : "",
      parameters.transmissionMap ? "#define USE_TRANSMISSIONMAP" : "",
      parameters.thicknessMap ? "#define USE_THICKNESSMAP" : "",
      parameters.vertexTangents && parameters.flatShading === false ? "#define USE_TANGENT" : "",
      parameters.vertexColors || parameters.instancingColor || parameters.batchingColor ? "#define USE_COLOR" : "",
      parameters.vertexAlphas ? "#define USE_COLOR_ALPHA" : "",
      parameters.vertexUv1s ? "#define USE_UV1" : "",
      parameters.vertexUv2s ? "#define USE_UV2" : "",
      parameters.vertexUv3s ? "#define USE_UV3" : "",
      parameters.pointsUvs ? "#define USE_POINTS_UV" : "",
      parameters.gradientMap ? "#define USE_GRADIENTMAP" : "",
      parameters.flatShading ? "#define FLAT_SHADED" : "",
      parameters.doubleSided ? "#define DOUBLE_SIDED" : "",
      parameters.flipSided ? "#define FLIP_SIDED" : "",
      parameters.shadowMapEnabled ? "#define USE_SHADOWMAP" : "",
      parameters.shadowMapEnabled ? "#define " + shadowMapTypeDefine : "",
      parameters.premultipliedAlpha ? "#define PREMULTIPLIED_ALPHA" : "",
      parameters.numLightProbes > 0 ? "#define USE_LIGHT_PROBES" : "",
      parameters.decodeVideoTexture ? "#define DECODE_VIDEO_TEXTURE" : "",
      parameters.logarithmicDepthBuffer ? "#define USE_LOGDEPTHBUF" : "",
      "uniform mat4 viewMatrix;",
      "uniform vec3 cameraPosition;",
      "uniform bool isOrthographic;",
      parameters.toneMapping !== NoToneMapping ? "#define TONE_MAPPING" : "",
      parameters.toneMapping !== NoToneMapping ? ShaderChunk["tonemapping_pars_fragment"] : "",
      // this code is required here because it is used by the toneMapping() function defined below
      parameters.toneMapping !== NoToneMapping ? getToneMappingFunction("toneMapping", parameters.toneMapping) : "",
      parameters.dithering ? "#define DITHERING" : "",
      parameters.opaque ? "#define OPAQUE" : "",
      ShaderChunk["colorspace_pars_fragment"],
      // this code is required here because it is used by the various encoding/decoding function defined below
      getTexelEncodingFunction("linearToOutputTexel", parameters.outputColorSpace),
      getLuminanceFunction(),
      parameters.useDepthPacking ? "#define DEPTH_PACKING " + parameters.depthPacking : "",
      "\n"
    ].filter(filterEmptyLine).join("\n");
  }
  vertexShader2 = resolveIncludes(vertexShader2);
  vertexShader2 = replaceLightNums(vertexShader2, parameters);
  vertexShader2 = replaceClippingPlaneNums(vertexShader2, parameters);
  fragmentShader2 = resolveIncludes(fragmentShader2);
  fragmentShader2 = replaceLightNums(fragmentShader2, parameters);
  fragmentShader2 = replaceClippingPlaneNums(fragmentShader2, parameters);
  vertexShader2 = unrollLoops(vertexShader2);
  fragmentShader2 = unrollLoops(fragmentShader2);
  if (parameters.isRawShaderMaterial !== true) {
    versionString = "#version 300 es\n";
    prefixVertex = [
      customVertexExtensions,
      "#define attribute in",
      "#define varying out",
      "#define texture2D texture"
    ].join("\n") + "\n" + prefixVertex;
    prefixFragment = [
      "#define varying in",
      parameters.glslVersion === GLSL3 ? "" : "layout(location = 0) out highp vec4 pc_fragColor;",
      parameters.glslVersion === GLSL3 ? "" : "#define gl_FragColor pc_fragColor",
      "#define gl_FragDepthEXT gl_FragDepth",
      "#define texture2D texture",
      "#define textureCube texture",
      "#define texture2DProj textureProj",
      "#define texture2DLodEXT textureLod",
      "#define texture2DProjLodEXT textureProjLod",
      "#define textureCubeLodEXT textureLod",
      "#define texture2DGradEXT textureGrad",
      "#define texture2DProjGradEXT textureProjGrad",
      "#define textureCubeGradEXT textureGrad"
    ].join("\n") + "\n" + prefixFragment;
  }
  const vertexGlsl = versionString + prefixVertex + vertexShader2;
  const fragmentGlsl = versionString + prefixFragment + fragmentShader2;
  const glVertexShader = WebGLShader(gl, gl.VERTEX_SHADER, vertexGlsl);
  const glFragmentShader = WebGLShader(gl, gl.FRAGMENT_SHADER, fragmentGlsl);
  gl.attachShader(program, glVertexShader);
  gl.attachShader(program, glFragmentShader);
  if (parameters.index0AttributeName !== void 0) {
    gl.bindAttribLocation(program, 0, parameters.index0AttributeName);
  } else if (parameters.morphTargets === true) {
    gl.bindAttribLocation(program, 0, "position");
  }
  gl.linkProgram(program);
  function onFirstUse(self2) {
    if (renderer3.debug.checkShaderErrors) {
      const programLog = gl.getProgramInfoLog(program).trim();
      const vertexLog = gl.getShaderInfoLog(glVertexShader).trim();
      const fragmentLog = gl.getShaderInfoLog(glFragmentShader).trim();
      let runnable = true;
      let haveDiagnostics = true;
      if (gl.getProgramParameter(program, gl.LINK_STATUS) === false) {
        runnable = false;
        if (typeof renderer3.debug.onShaderError === "function") {
          renderer3.debug.onShaderError(gl, program, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = getShaderErrors(gl, glVertexShader, "vertex");
          const fragmentErrors = getShaderErrors(gl, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(program, gl.VALIDATE_STATUS) + "\n\nMaterial Name: " + self2.name + "\nMaterial Type: " + self2.type + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      } else if (vertexLog === "" || fragmentLog === "") {
        haveDiagnostics = false;
      }
      if (haveDiagnostics) {
        self2.diagnostics = {
          runnable,
          programLog,
          vertexShader: {
            log: vertexLog,
            prefix: prefixVertex
          },
          fragmentShader: {
            log: fragmentLog,
            prefix: prefixFragment
          }
        };
      }
    }
    gl.deleteShader(glVertexShader);
    gl.deleteShader(glFragmentShader);
    cachedUniforms = new WebGLUniforms(gl, program);
    cachedAttributes = fetchAttributeLocations(gl, program);
  }
  let cachedUniforms;
  this.getUniforms = function() {
    if (cachedUniforms === void 0) {
      onFirstUse(this);
    }
    return cachedUniforms;
  };
  let cachedAttributes;
  this.getAttributes = function() {
    if (cachedAttributes === void 0) {
      onFirstUse(this);
    }
    return cachedAttributes;
  };
  let programReady = parameters.rendererExtensionParallelShaderCompile === false;
  this.isReady = function() {
    if (programReady === false) {
      programReady = gl.getProgramParameter(program, COMPLETION_STATUS_KHR);
    }
    return programReady;
  };
  this.destroy = function() {
    bindingStates.releaseStatesOfProgram(this);
    gl.deleteProgram(program);
    this.program = void 0;
  };
  this.type = parameters.shaderType;
  this.name = parameters.shaderName;
  this.id = programIdCount++;
  this.cacheKey = cacheKey;
  this.usedTimes = 1;
  this.program = program;
  this.vertexShader = glVertexShader;
  this.fragmentShader = glFragmentShader;
  return this;
}
var _id$1 = 0;
var WebGLShaderCache = class {
  constructor() {
    this.shaderCache = /* @__PURE__ */ new Map();
    this.materialCache = /* @__PURE__ */ new Map();
  }
  update(material) {
    const vertexShader2 = material.vertexShader;
    const fragmentShader2 = material.fragmentShader;
    const vertexShaderStage = this._getShaderStage(vertexShader2);
    const fragmentShaderStage = this._getShaderStage(fragmentShader2);
    const materialShaders = this._getShaderCacheForMaterial(material);
    if (materialShaders.has(vertexShaderStage) === false) {
      materialShaders.add(vertexShaderStage);
      vertexShaderStage.usedTimes++;
    }
    if (materialShaders.has(fragmentShaderStage) === false) {
      materialShaders.add(fragmentShaderStage);
      fragmentShaderStage.usedTimes++;
    }
    return this;
  }
  remove(material) {
    const materialShaders = this.materialCache.get(material);
    for (const shaderStage of materialShaders) {
      shaderStage.usedTimes--;
      if (shaderStage.usedTimes === 0) this.shaderCache.delete(shaderStage.code);
    }
    this.materialCache.delete(material);
    return this;
  }
  getVertexShaderID(material) {
    return this._getShaderStage(material.vertexShader).id;
  }
  getFragmentShaderID(material) {
    return this._getShaderStage(material.fragmentShader).id;
  }
  dispose() {
    this.shaderCache.clear();
    this.materialCache.clear();
  }
  _getShaderCacheForMaterial(material) {
    const cache2 = this.materialCache;
    let set = cache2.get(material);
    if (set === void 0) {
      set = /* @__PURE__ */ new Set();
      cache2.set(material, set);
    }
    return set;
  }
  _getShaderStage(code2) {
    const cache2 = this.shaderCache;
    let stage = cache2.get(code2);
    if (stage === void 0) {
      stage = new WebGLShaderStage(code2);
      cache2.set(code2, stage);
    }
    return stage;
  }
};
var WebGLShaderStage = class {
  constructor(code2) {
    this.id = _id$1++;
    this.code = code2;
    this.usedTimes = 0;
  }
};
function WebGLPrograms(renderer3, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping2) {
  const _programLayers = new Layers();
  const _customShaders = new WebGLShaderCache();
  const _activeChannels = /* @__PURE__ */ new Set();
  const programs = [];
  const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
  const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;
  let precision = capabilities.precision;
  const shaderIDs = {
    MeshDepthMaterial: "depth",
    MeshDistanceMaterial: "distanceRGBA",
    MeshNormalMaterial: "normal",
    MeshBasicMaterial: "basic",
    MeshLambertMaterial: "lambert",
    MeshPhongMaterial: "phong",
    MeshToonMaterial: "toon",
    MeshStandardMaterial: "physical",
    MeshPhysicalMaterial: "physical",
    MeshMatcapMaterial: "matcap",
    LineBasicMaterial: "basic",
    LineDashedMaterial: "dashed",
    PointsMaterial: "points",
    ShadowMaterial: "shadow",
    SpriteMaterial: "sprite"
  };
  function getChannel(value) {
    _activeChannels.add(value);
    if (value === 0) return "uv";
    return `uv${value}`;
  }
  function getParameters(material, lights2, shadows, scene3, object2) {
    const fog2 = scene3.fog;
    const geometry = object2.geometry;
    const environment = material.isMeshStandardMaterial ? scene3.environment : null;
    const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
    const envMapCubeUVHeight = !!envMap && envMap.mapping === CubeUVReflectionMapping ? envMap.image.height : null;
    const shaderID = shaderIDs[material.type];
    if (material.precision !== null) {
      precision = capabilities.getMaxPrecision(material.precision);
      if (precision !== material.precision) {
        console.warn("THREE.WebGLProgram.getParameters:", material.precision, "not supported, using", precision, "instead.");
      }
    }
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    let morphTextureStride = 0;
    if (geometry.morphAttributes.position !== void 0) morphTextureStride = 1;
    if (geometry.morphAttributes.normal !== void 0) morphTextureStride = 2;
    if (geometry.morphAttributes.color !== void 0) morphTextureStride = 3;
    let vertexShader2, fragmentShader2;
    let customVertexShaderID, customFragmentShaderID;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      vertexShader2 = shader.vertexShader;
      fragmentShader2 = shader.fragmentShader;
    } else {
      vertexShader2 = material.vertexShader;
      fragmentShader2 = material.fragmentShader;
      _customShaders.update(material);
      customVertexShaderID = _customShaders.getVertexShaderID(material);
      customFragmentShaderID = _customShaders.getFragmentShaderID(material);
    }
    const currentRenderTarget = renderer3.getRenderTarget();
    const IS_INSTANCEDMESH = object2.isInstancedMesh === true;
    const IS_BATCHEDMESH = object2.isBatchedMesh === true;
    const HAS_MAP = !!material.map;
    const HAS_MATCAP = !!material.matcap;
    const HAS_ENVMAP = !!envMap;
    const HAS_AOMAP = !!material.aoMap;
    const HAS_LIGHTMAP = !!material.lightMap;
    const HAS_BUMPMAP = !!material.bumpMap;
    const HAS_NORMALMAP = !!material.normalMap;
    const HAS_DISPLACEMENTMAP = !!material.displacementMap;
    const HAS_EMISSIVEMAP = !!material.emissiveMap;
    const HAS_METALNESSMAP = !!material.metalnessMap;
    const HAS_ROUGHNESSMAP = !!material.roughnessMap;
    const HAS_ANISOTROPY = material.anisotropy > 0;
    const HAS_CLEARCOAT = material.clearcoat > 0;
    const HAS_DISPERSION = material.dispersion > 0;
    const HAS_IRIDESCENCE = material.iridescence > 0;
    const HAS_SHEEN = material.sheen > 0;
    const HAS_TRANSMISSION = material.transmission > 0;
    const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !!material.anisotropyMap;
    const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !!material.clearcoatMap;
    const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !!material.clearcoatNormalMap;
    const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !!material.clearcoatRoughnessMap;
    const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !!material.iridescenceMap;
    const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !!material.iridescenceThicknessMap;
    const HAS_SHEEN_COLORMAP = HAS_SHEEN && !!material.sheenColorMap;
    const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !!material.sheenRoughnessMap;
    const HAS_SPECULARMAP = !!material.specularMap;
    const HAS_SPECULAR_COLORMAP = !!material.specularColorMap;
    const HAS_SPECULAR_INTENSITYMAP = !!material.specularIntensityMap;
    const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !!material.transmissionMap;
    const HAS_THICKNESSMAP = HAS_TRANSMISSION && !!material.thicknessMap;
    const HAS_GRADIENTMAP = !!material.gradientMap;
    const HAS_ALPHAMAP = !!material.alphaMap;
    const HAS_ALPHATEST = material.alphaTest > 0;
    const HAS_ALPHAHASH = !!material.alphaHash;
    const HAS_EXTENSIONS = !!material.extensions;
    let toneMapping2 = NoToneMapping;
    if (material.toneMapped) {
      if (currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true) {
        toneMapping2 = renderer3.toneMapping;
      }
    }
    const parameters = {
      shaderID,
      shaderType: material.type,
      shaderName: material.name,
      vertexShader: vertexShader2,
      fragmentShader: fragmentShader2,
      defines: material.defines,
      customVertexShaderID,
      customFragmentShaderID,
      isRawShaderMaterial: material.isRawShaderMaterial === true,
      glslVersion: material.glslVersion,
      precision,
      batching: IS_BATCHEDMESH,
      batchingColor: IS_BATCHEDMESH && object2._colorsTexture !== null,
      instancing: IS_INSTANCEDMESH,
      instancingColor: IS_INSTANCEDMESH && object2.instanceColor !== null,
      instancingMorph: IS_INSTANCEDMESH && object2.morphTexture !== null,
      supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
      outputColorSpace: currentRenderTarget === null ? renderer3.outputColorSpace : currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace,
      alphaToCoverage: !!material.alphaToCoverage,
      map: HAS_MAP,
      matcap: HAS_MATCAP,
      envMap: HAS_ENVMAP,
      envMapMode: HAS_ENVMAP && envMap.mapping,
      envMapCubeUVHeight,
      aoMap: HAS_AOMAP,
      lightMap: HAS_LIGHTMAP,
      bumpMap: HAS_BUMPMAP,
      normalMap: HAS_NORMALMAP,
      displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
      emissiveMap: HAS_EMISSIVEMAP,
      normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
      normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,
      metalnessMap: HAS_METALNESSMAP,
      roughnessMap: HAS_ROUGHNESSMAP,
      anisotropy: HAS_ANISOTROPY,
      anisotropyMap: HAS_ANISOTROPYMAP,
      clearcoat: HAS_CLEARCOAT,
      clearcoatMap: HAS_CLEARCOATMAP,
      clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
      clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,
      dispersion: HAS_DISPERSION,
      iridescence: HAS_IRIDESCENCE,
      iridescenceMap: HAS_IRIDESCENCEMAP,
      iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,
      sheen: HAS_SHEEN,
      sheenColorMap: HAS_SHEEN_COLORMAP,
      sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,
      specularMap: HAS_SPECULARMAP,
      specularColorMap: HAS_SPECULAR_COLORMAP,
      specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,
      transmission: HAS_TRANSMISSION,
      transmissionMap: HAS_TRANSMISSIONMAP,
      thicknessMap: HAS_THICKNESSMAP,
      gradientMap: HAS_GRADIENTMAP,
      opaque: material.transparent === false && material.blending === NormalBlending && material.alphaToCoverage === false,
      alphaMap: HAS_ALPHAMAP,
      alphaTest: HAS_ALPHATEST,
      alphaHash: HAS_ALPHAHASH,
      combine: material.combine,
      //
      mapUv: HAS_MAP && getChannel(material.map.channel),
      aoMapUv: HAS_AOMAP && getChannel(material.aoMap.channel),
      lightMapUv: HAS_LIGHTMAP && getChannel(material.lightMap.channel),
      bumpMapUv: HAS_BUMPMAP && getChannel(material.bumpMap.channel),
      normalMapUv: HAS_NORMALMAP && getChannel(material.normalMap.channel),
      displacementMapUv: HAS_DISPLACEMENTMAP && getChannel(material.displacementMap.channel),
      emissiveMapUv: HAS_EMISSIVEMAP && getChannel(material.emissiveMap.channel),
      metalnessMapUv: HAS_METALNESSMAP && getChannel(material.metalnessMap.channel),
      roughnessMapUv: HAS_ROUGHNESSMAP && getChannel(material.roughnessMap.channel),
      anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel(material.anisotropyMap.channel),
      clearcoatMapUv: HAS_CLEARCOATMAP && getChannel(material.clearcoatMap.channel),
      clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel(material.clearcoatNormalMap.channel),
      clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel(material.clearcoatRoughnessMap.channel),
      iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel(material.iridescenceMap.channel),
      iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel(material.iridescenceThicknessMap.channel),
      sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel(material.sheenColorMap.channel),
      sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel(material.sheenRoughnessMap.channel),
      specularMapUv: HAS_SPECULARMAP && getChannel(material.specularMap.channel),
      specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel(material.specularColorMap.channel),
      specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel(material.specularIntensityMap.channel),
      transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel(material.transmissionMap.channel),
      thicknessMapUv: HAS_THICKNESSMAP && getChannel(material.thicknessMap.channel),
      alphaMapUv: HAS_ALPHAMAP && getChannel(material.alphaMap.channel),
      //
      vertexTangents: !!geometry.attributes.tangent && (HAS_NORMALMAP || HAS_ANISOTROPY),
      vertexColors: material.vertexColors,
      vertexAlphas: material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4,
      pointsUvs: object2.isPoints === true && !!geometry.attributes.uv && (HAS_MAP || HAS_ALPHAMAP),
      fog: !!fog2,
      useFog: material.fog === true,
      fogExp2: !!fog2 && fog2.isFogExp2,
      flatShading: material.flatShading === true,
      sizeAttenuation: material.sizeAttenuation === true,
      logarithmicDepthBuffer,
      skinning: object2.isSkinnedMesh === true,
      morphTargets: geometry.morphAttributes.position !== void 0,
      morphNormals: geometry.morphAttributes.normal !== void 0,
      morphColors: geometry.morphAttributes.color !== void 0,
      morphTargetsCount,
      morphTextureStride,
      numDirLights: lights2.directional.length,
      numPointLights: lights2.point.length,
      numSpotLights: lights2.spot.length,
      numSpotLightMaps: lights2.spotLightMap.length,
      numRectAreaLights: lights2.rectArea.length,
      numHemiLights: lights2.hemi.length,
      numDirLightShadows: lights2.directionalShadowMap.length,
      numPointLightShadows: lights2.pointShadowMap.length,
      numSpotLightShadows: lights2.spotShadowMap.length,
      numSpotLightShadowsWithMaps: lights2.numSpotLightShadowsWithMaps,
      numLightProbes: lights2.numLightProbes,
      numClippingPlanes: clipping2.numPlanes,
      numClipIntersection: clipping2.numIntersection,
      dithering: material.dithering,
      shadowMapEnabled: renderer3.shadowMap.enabled && shadows.length > 0,
      shadowMapType: renderer3.shadowMap.type,
      toneMapping: toneMapping2,
      decodeVideoTexture: HAS_MAP && material.map.isVideoTexture === true && ColorManagement.getTransfer(material.map.colorSpace) === SRGBTransfer,
      premultipliedAlpha: material.premultipliedAlpha,
      doubleSided: material.side === DoubleSide,
      flipSided: material.side === BackSide,
      useDepthPacking: material.depthPacking >= 0,
      depthPacking: material.depthPacking || 0,
      index0AttributeName: material.index0AttributeName,
      extensionClipCullDistance: HAS_EXTENSIONS && material.extensions.clipCullDistance === true && extensions.has("WEBGL_clip_cull_distance"),
      extensionMultiDraw: (HAS_EXTENSIONS && material.extensions.multiDraw === true || IS_BATCHEDMESH) && extensions.has("WEBGL_multi_draw"),
      rendererExtensionParallelShaderCompile: extensions.has("KHR_parallel_shader_compile"),
      customProgramCacheKey: material.customProgramCacheKey()
    };
    parameters.vertexUv1s = _activeChannels.has(1);
    parameters.vertexUv2s = _activeChannels.has(2);
    parameters.vertexUv3s = _activeChannels.has(3);
    _activeChannels.clear();
    return parameters;
  }
  function getProgramCacheKey(parameters) {
    const array3 = [];
    if (parameters.shaderID) {
      array3.push(parameters.shaderID);
    } else {
      array3.push(parameters.customVertexShaderID);
      array3.push(parameters.customFragmentShaderID);
    }
    if (parameters.defines !== void 0) {
      for (const name in parameters.defines) {
        array3.push(name);
        array3.push(parameters.defines[name]);
      }
    }
    if (parameters.isRawShaderMaterial === false) {
      getProgramCacheKeyParameters(array3, parameters);
      getProgramCacheKeyBooleans(array3, parameters);
      array3.push(renderer3.outputColorSpace);
    }
    array3.push(parameters.customProgramCacheKey);
    return array3.join();
  }
  function getProgramCacheKeyParameters(array3, parameters) {
    array3.push(parameters.precision);
    array3.push(parameters.outputColorSpace);
    array3.push(parameters.envMapMode);
    array3.push(parameters.envMapCubeUVHeight);
    array3.push(parameters.mapUv);
    array3.push(parameters.alphaMapUv);
    array3.push(parameters.lightMapUv);
    array3.push(parameters.aoMapUv);
    array3.push(parameters.bumpMapUv);
    array3.push(parameters.normalMapUv);
    array3.push(parameters.displacementMapUv);
    array3.push(parameters.emissiveMapUv);
    array3.push(parameters.metalnessMapUv);
    array3.push(parameters.roughnessMapUv);
    array3.push(parameters.anisotropyMapUv);
    array3.push(parameters.clearcoatMapUv);
    array3.push(parameters.clearcoatNormalMapUv);
    array3.push(parameters.clearcoatRoughnessMapUv);
    array3.push(parameters.iridescenceMapUv);
    array3.push(parameters.iridescenceThicknessMapUv);
    array3.push(parameters.sheenColorMapUv);
    array3.push(parameters.sheenRoughnessMapUv);
    array3.push(parameters.specularMapUv);
    array3.push(parameters.specularColorMapUv);
    array3.push(parameters.specularIntensityMapUv);
    array3.push(parameters.transmissionMapUv);
    array3.push(parameters.thicknessMapUv);
    array3.push(parameters.combine);
    array3.push(parameters.fogExp2);
    array3.push(parameters.sizeAttenuation);
    array3.push(parameters.morphTargetsCount);
    array3.push(parameters.morphAttributeCount);
    array3.push(parameters.numDirLights);
    array3.push(parameters.numPointLights);
    array3.push(parameters.numSpotLights);
    array3.push(parameters.numSpotLightMaps);
    array3.push(parameters.numHemiLights);
    array3.push(parameters.numRectAreaLights);
    array3.push(parameters.numDirLightShadows);
    array3.push(parameters.numPointLightShadows);
    array3.push(parameters.numSpotLightShadows);
    array3.push(parameters.numSpotLightShadowsWithMaps);
    array3.push(parameters.numLightProbes);
    array3.push(parameters.shadowMapType);
    array3.push(parameters.toneMapping);
    array3.push(parameters.numClippingPlanes);
    array3.push(parameters.numClipIntersection);
    array3.push(parameters.depthPacking);
  }
  function getProgramCacheKeyBooleans(array3, parameters) {
    _programLayers.disableAll();
    if (parameters.supportsVertexTextures)
      _programLayers.enable(0);
    if (parameters.instancing)
      _programLayers.enable(1);
    if (parameters.instancingColor)
      _programLayers.enable(2);
    if (parameters.instancingMorph)
      _programLayers.enable(3);
    if (parameters.matcap)
      _programLayers.enable(4);
    if (parameters.envMap)
      _programLayers.enable(5);
    if (parameters.normalMapObjectSpace)
      _programLayers.enable(6);
    if (parameters.normalMapTangentSpace)
      _programLayers.enable(7);
    if (parameters.clearcoat)
      _programLayers.enable(8);
    if (parameters.iridescence)
      _programLayers.enable(9);
    if (parameters.alphaTest)
      _programLayers.enable(10);
    if (parameters.vertexColors)
      _programLayers.enable(11);
    if (parameters.vertexAlphas)
      _programLayers.enable(12);
    if (parameters.vertexUv1s)
      _programLayers.enable(13);
    if (parameters.vertexUv2s)
      _programLayers.enable(14);
    if (parameters.vertexUv3s)
      _programLayers.enable(15);
    if (parameters.vertexTangents)
      _programLayers.enable(16);
    if (parameters.anisotropy)
      _programLayers.enable(17);
    if (parameters.alphaHash)
      _programLayers.enable(18);
    if (parameters.batching)
      _programLayers.enable(19);
    if (parameters.dispersion)
      _programLayers.enable(20);
    if (parameters.batchingColor)
      _programLayers.enable(21);
    array3.push(_programLayers.mask);
    _programLayers.disableAll();
    if (parameters.fog)
      _programLayers.enable(0);
    if (parameters.useFog)
      _programLayers.enable(1);
    if (parameters.flatShading)
      _programLayers.enable(2);
    if (parameters.logarithmicDepthBuffer)
      _programLayers.enable(3);
    if (parameters.skinning)
      _programLayers.enable(4);
    if (parameters.morphTargets)
      _programLayers.enable(5);
    if (parameters.morphNormals)
      _programLayers.enable(6);
    if (parameters.morphColors)
      _programLayers.enable(7);
    if (parameters.premultipliedAlpha)
      _programLayers.enable(8);
    if (parameters.shadowMapEnabled)
      _programLayers.enable(9);
    if (parameters.doubleSided)
      _programLayers.enable(10);
    if (parameters.flipSided)
      _programLayers.enable(11);
    if (parameters.useDepthPacking)
      _programLayers.enable(12);
    if (parameters.dithering)
      _programLayers.enable(13);
    if (parameters.transmission)
      _programLayers.enable(14);
    if (parameters.sheen)
      _programLayers.enable(15);
    if (parameters.opaque)
      _programLayers.enable(16);
    if (parameters.pointsUvs)
      _programLayers.enable(17);
    if (parameters.decodeVideoTexture)
      _programLayers.enable(18);
    if (parameters.alphaToCoverage)
      _programLayers.enable(19);
    array3.push(_programLayers.mask);
  }
  function getUniforms(material) {
    const shaderID = shaderIDs[material.type];
    let uniforms;
    if (shaderID) {
      const shader = ShaderLib[shaderID];
      uniforms = UniformsUtils.clone(shader.uniforms);
    } else {
      uniforms = material.uniforms;
    }
    return uniforms;
  }
  function acquireProgram(parameters, cacheKey) {
    let program;
    for (let p2 = 0, pl = programs.length; p2 < pl; p2++) {
      const preexistingProgram = programs[p2];
      if (preexistingProgram.cacheKey === cacheKey) {
        program = preexistingProgram;
        ++program.usedTimes;
        break;
      }
    }
    if (program === void 0) {
      program = new WebGLProgram(renderer3, cacheKey, parameters, bindingStates);
      programs.push(program);
    }
    return program;
  }
  function releaseProgram(program) {
    if (--program.usedTimes === 0) {
      const i2 = programs.indexOf(program);
      programs[i2] = programs[programs.length - 1];
      programs.pop();
      program.destroy();
    }
  }
  function releaseShaderCache(material) {
    _customShaders.remove(material);
  }
  function dispose() {
    _customShaders.dispose();
  }
  return {
    getParameters,
    getProgramCacheKey,
    getUniforms,
    acquireProgram,
    releaseProgram,
    releaseShaderCache,
    // Exposed for resource monitoring & error feedback via renderer.info:
    programs,
    dispose
  };
}
function WebGLProperties() {
  let properties = /* @__PURE__ */ new WeakMap();
  function has(object2) {
    return properties.has(object2);
  }
  function get(object2) {
    let map4 = properties.get(object2);
    if (map4 === void 0) {
      map4 = {};
      properties.set(object2, map4);
    }
    return map4;
  }
  function remove3(object2) {
    properties.delete(object2);
  }
  function update20(object2, key, value) {
    properties.get(object2)[key] = value;
  }
  function dispose() {
    properties = /* @__PURE__ */ new WeakMap();
  }
  return {
    has,
    get,
    remove: remove3,
    update: update20,
    dispose
  };
}
function painterSortStable(a2, b) {
  if (a2.groupOrder !== b.groupOrder) {
    return a2.groupOrder - b.groupOrder;
  } else if (a2.renderOrder !== b.renderOrder) {
    return a2.renderOrder - b.renderOrder;
  } else if (a2.material.id !== b.material.id) {
    return a2.material.id - b.material.id;
  } else if (a2.z !== b.z) {
    return a2.z - b.z;
  } else {
    return a2.id - b.id;
  }
}
function reversePainterSortStable(a2, b) {
  if (a2.groupOrder !== b.groupOrder) {
    return a2.groupOrder - b.groupOrder;
  } else if (a2.renderOrder !== b.renderOrder) {
    return a2.renderOrder - b.renderOrder;
  } else if (a2.z !== b.z) {
    return b.z - a2.z;
  } else {
    return a2.id - b.id;
  }
}
function WebGLRenderList() {
  const renderItems = [];
  let renderItemsIndex = 0;
  const opaque = [];
  const transmissive = [];
  const transparent = [];
  function init20() {
    renderItemsIndex = 0;
    opaque.length = 0;
    transmissive.length = 0;
    transparent.length = 0;
  }
  function getNextRenderItem(object2, geometry, material, groupOrder, z2, group2) {
    let renderItem = renderItems[renderItemsIndex];
    if (renderItem === void 0) {
      renderItem = {
        id: object2.id,
        object: object2,
        geometry,
        material,
        groupOrder,
        renderOrder: object2.renderOrder,
        z: z2,
        group: group2
      };
      renderItems[renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object2.id;
      renderItem.object = object2;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object2.renderOrder;
      renderItem.z = z2;
      renderItem.group = group2;
    }
    renderItemsIndex++;
    return renderItem;
  }
  function push(object2, geometry, material, groupOrder, z2, group2) {
    const renderItem = getNextRenderItem(object2, geometry, material, groupOrder, z2, group2);
    if (material.transmission > 0) {
      transmissive.push(renderItem);
    } else if (material.transparent === true) {
      transparent.push(renderItem);
    } else {
      opaque.push(renderItem);
    }
  }
  function unshift(object2, geometry, material, groupOrder, z2, group2) {
    const renderItem = getNextRenderItem(object2, geometry, material, groupOrder, z2, group2);
    if (material.transmission > 0) {
      transmissive.unshift(renderItem);
    } else if (material.transparent === true) {
      transparent.unshift(renderItem);
    } else {
      opaque.unshift(renderItem);
    }
  }
  function sort2(customOpaqueSort, customTransparentSort) {
    if (opaque.length > 1) opaque.sort(customOpaqueSort || painterSortStable);
    if (transmissive.length > 1) transmissive.sort(customTransparentSort || reversePainterSortStable);
    if (transparent.length > 1) transparent.sort(customTransparentSort || reversePainterSortStable);
  }
  function finish() {
    for (let i2 = renderItemsIndex, il = renderItems.length; i2 < il; i2++) {
      const renderItem = renderItems[i2];
      if (renderItem.id === null) break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.group = null;
    }
  }
  return {
    opaque,
    transmissive,
    transparent,
    init: init20,
    push,
    unshift,
    finish,
    sort: sort2
  };
}
function WebGLRenderLists() {
  let lists = /* @__PURE__ */ new WeakMap();
  function get(scene3, renderCallDepth) {
    const listArray = lists.get(scene3);
    let list;
    if (listArray === void 0) {
      list = new WebGLRenderList();
      lists.set(scene3, [list]);
    } else {
      if (renderCallDepth >= listArray.length) {
        list = new WebGLRenderList();
        listArray.push(list);
      } else {
        list = listArray[renderCallDepth];
      }
    }
    return list;
  }
  function dispose() {
    lists = /* @__PURE__ */ new WeakMap();
  }
  return {
    get,
    dispose
  };
}
function UniformsCache() {
  const lights2 = {};
  return {
    get: function(light) {
      if (lights2[light.id] !== void 0) {
        return lights2[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            direction: new Vector3(),
            color: new Color()
          };
          break;
        case "SpotLight":
          uniforms = {
            position: new Vector3(),
            direction: new Vector3(),
            color: new Color(),
            distance: 0,
            coneCos: 0,
            penumbraCos: 0,
            decay: 0
          };
          break;
        case "PointLight":
          uniforms = {
            position: new Vector3(),
            color: new Color(),
            distance: 0,
            decay: 0
          };
          break;
        case "HemisphereLight":
          uniforms = {
            direction: new Vector3(),
            skyColor: new Color(),
            groundColor: new Color()
          };
          break;
        case "RectAreaLight":
          uniforms = {
            color: new Color(),
            position: new Vector3(),
            halfWidth: new Vector3(),
            halfHeight: new Vector3()
          };
          break;
      }
      lights2[light.id] = uniforms;
      return uniforms;
    }
  };
}
function ShadowUniformsCache() {
  const lights2 = {};
  return {
    get: function(light) {
      if (lights2[light.id] !== void 0) {
        return lights2[light.id];
      }
      let uniforms;
      switch (light.type) {
        case "DirectionalLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "SpotLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2()
          };
          break;
        case "PointLight":
          uniforms = {
            shadowIntensity: 1,
            shadowBias: 0,
            shadowNormalBias: 0,
            shadowRadius: 1,
            shadowMapSize: new Vector2(),
            shadowCameraNear: 1,
            shadowCameraFar: 1e3
          };
          break;
      }
      lights2[light.id] = uniforms;
      return uniforms;
    }
  };
}
var nextVersion = 0;
function shadowCastingAndTexturingLightsFirst(lightA, lightB) {
  return (lightB.castShadow ? 2 : 0) - (lightA.castShadow ? 2 : 0) + (lightB.map ? 1 : 0) - (lightA.map ? 1 : 0);
}
function WebGLLights(extensions) {
  const cache2 = new UniformsCache();
  const shadowCache = ShadowUniformsCache();
  const state = {
    version: 0,
    hash: {
      directionalLength: -1,
      pointLength: -1,
      spotLength: -1,
      rectAreaLength: -1,
      hemiLength: -1,
      numDirectionalShadows: -1,
      numPointShadows: -1,
      numSpotShadows: -1,
      numSpotMaps: -1,
      numLightProbes: -1
    },
    ambient: [0, 0, 0],
    probe: [],
    directional: [],
    directionalShadow: [],
    directionalShadowMap: [],
    directionalShadowMatrix: [],
    spot: [],
    spotLightMap: [],
    spotShadow: [],
    spotShadowMap: [],
    spotLightMatrix: [],
    rectArea: [],
    rectAreaLTC1: null,
    rectAreaLTC2: null,
    point: [],
    pointShadow: [],
    pointShadowMap: [],
    pointShadowMatrix: [],
    hemi: [],
    numSpotLightShadowsWithMaps: 0,
    numLightProbes: 0
  };
  for (let i2 = 0; i2 < 9; i2++) state.probe.push(new Vector3());
  const vector3 = new Vector3();
  const matrix4 = new Matrix4();
  const matrix42 = new Matrix4();
  function setup(lights2) {
    let r2 = 0, g2 = 0, b = 0;
    for (let i2 = 0; i2 < 9; i2++) state.probe[i2].set(0, 0, 0);
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    let numDirectionalShadows = 0;
    let numPointShadows = 0;
    let numSpotShadows = 0;
    let numSpotMaps = 0;
    let numSpotShadowsWithMaps = 0;
    let numLightProbes = 0;
    lights2.sort(shadowCastingAndTexturingLightsFirst);
    for (let i2 = 0, l2 = lights2.length; i2 < l2; i2++) {
      const light = lights2[i2];
      const color3 = light.color;
      const intensity = light.intensity;
      const distance3 = light.distance;
      const shadowMap = light.shadow && light.shadow.map ? light.shadow.map.texture : null;
      if (light.isAmbientLight) {
        r2 += color3.r * intensity;
        g2 += color3.g * intensity;
        b += color3.b * intensity;
      } else if (light.isLightProbe) {
        for (let j2 = 0; j2 < 9; j2++) {
          state.probe[j2].addScaledVector(light.sh.coefficients[j2], intensity);
        }
        numLightProbes++;
      } else if (light.isDirectionalLight) {
        const uniforms = cache2.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.directionalShadow[directionalLength] = shadowUniforms;
          state.directionalShadowMap[directionalLength] = shadowMap;
          state.directionalShadowMatrix[directionalLength] = light.shadow.matrix;
          numDirectionalShadows++;
        }
        state.directional[directionalLength] = uniforms;
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = cache2.get(light);
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.color.copy(color3).multiplyScalar(intensity);
        uniforms.distance = distance3;
        uniforms.coneCos = Math.cos(light.angle);
        uniforms.penumbraCos = Math.cos(light.angle * (1 - light.penumbra));
        uniforms.decay = light.decay;
        state.spot[spotLength] = uniforms;
        const shadow = light.shadow;
        if (light.map) {
          state.spotLightMap[numSpotMaps] = light.map;
          numSpotMaps++;
          shadow.updateMatrices(light);
          if (light.castShadow) numSpotShadowsWithMaps++;
        }
        state.spotLightMatrix[spotLength] = shadow.matrix;
        if (light.castShadow) {
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          state.spotShadow[spotLength] = shadowUniforms;
          state.spotShadowMap[spotLength] = shadowMap;
          numSpotShadows++;
        }
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = cache2.get(light);
        uniforms.color.copy(color3).multiplyScalar(intensity);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        state.rectArea[rectAreaLength] = uniforms;
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = cache2.get(light);
        uniforms.color.copy(light.color).multiplyScalar(light.intensity);
        uniforms.distance = light.distance;
        uniforms.decay = light.decay;
        if (light.castShadow) {
          const shadow = light.shadow;
          const shadowUniforms = shadowCache.get(light);
          shadowUniforms.shadowIntensity = shadow.intensity;
          shadowUniforms.shadowBias = shadow.bias;
          shadowUniforms.shadowNormalBias = shadow.normalBias;
          shadowUniforms.shadowRadius = shadow.radius;
          shadowUniforms.shadowMapSize = shadow.mapSize;
          shadowUniforms.shadowCameraNear = shadow.camera.near;
          shadowUniforms.shadowCameraFar = shadow.camera.far;
          state.pointShadow[pointLength] = shadowUniforms;
          state.pointShadowMap[pointLength] = shadowMap;
          state.pointShadowMatrix[pointLength] = light.shadow.matrix;
          numPointShadows++;
        }
        state.point[pointLength] = uniforms;
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = cache2.get(light);
        uniforms.skyColor.copy(light.color).multiplyScalar(intensity);
        uniforms.groundColor.copy(light.groundColor).multiplyScalar(intensity);
        state.hemi[hemiLength] = uniforms;
        hemiLength++;
      }
    }
    if (rectAreaLength > 0) {
      if (extensions.has("OES_texture_float_linear") === true) {
        state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
        state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;
      } else {
        state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
        state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;
      }
    }
    state.ambient[0] = r2;
    state.ambient[1] = g2;
    state.ambient[2] = b;
    const hash2 = state.hash;
    if (hash2.directionalLength !== directionalLength || hash2.pointLength !== pointLength || hash2.spotLength !== spotLength || hash2.rectAreaLength !== rectAreaLength || hash2.hemiLength !== hemiLength || hash2.numDirectionalShadows !== numDirectionalShadows || hash2.numPointShadows !== numPointShadows || hash2.numSpotShadows !== numSpotShadows || hash2.numSpotMaps !== numSpotMaps || hash2.numLightProbes !== numLightProbes) {
      state.directional.length = directionalLength;
      state.spot.length = spotLength;
      state.rectArea.length = rectAreaLength;
      state.point.length = pointLength;
      state.hemi.length = hemiLength;
      state.directionalShadow.length = numDirectionalShadows;
      state.directionalShadowMap.length = numDirectionalShadows;
      state.pointShadow.length = numPointShadows;
      state.pointShadowMap.length = numPointShadows;
      state.spotShadow.length = numSpotShadows;
      state.spotShadowMap.length = numSpotShadows;
      state.directionalShadowMatrix.length = numDirectionalShadows;
      state.pointShadowMatrix.length = numPointShadows;
      state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
      state.spotLightMap.length = numSpotMaps;
      state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;
      state.numLightProbes = numLightProbes;
      hash2.directionalLength = directionalLength;
      hash2.pointLength = pointLength;
      hash2.spotLength = spotLength;
      hash2.rectAreaLength = rectAreaLength;
      hash2.hemiLength = hemiLength;
      hash2.numDirectionalShadows = numDirectionalShadows;
      hash2.numPointShadows = numPointShadows;
      hash2.numSpotShadows = numSpotShadows;
      hash2.numSpotMaps = numSpotMaps;
      hash2.numLightProbes = numLightProbes;
      state.version = nextVersion++;
    }
  }
  function setupView(lights2, camera3) {
    let directionalLength = 0;
    let pointLength = 0;
    let spotLength = 0;
    let rectAreaLength = 0;
    let hemiLength = 0;
    const viewMatrix = camera3.matrixWorldInverse;
    for (let i2 = 0, l2 = lights2.length; i2 < l2; i2++) {
      const light = lights2[i2];
      if (light.isDirectionalLight) {
        const uniforms = state.directional[directionalLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        directionalLength++;
      } else if (light.isSpotLight) {
        const uniforms = state.spot[spotLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        vector3.setFromMatrixPosition(light.target.matrixWorld);
        uniforms.direction.sub(vector3);
        uniforms.direction.transformDirection(viewMatrix);
        spotLength++;
      } else if (light.isRectAreaLight) {
        const uniforms = state.rectArea[rectAreaLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        matrix42.identity();
        matrix4.copy(light.matrixWorld);
        matrix4.premultiply(viewMatrix);
        matrix42.extractRotation(matrix4);
        uniforms.halfWidth.set(light.width * 0.5, 0, 0);
        uniforms.halfHeight.set(0, light.height * 0.5, 0);
        uniforms.halfWidth.applyMatrix4(matrix42);
        uniforms.halfHeight.applyMatrix4(matrix42);
        rectAreaLength++;
      } else if (light.isPointLight) {
        const uniforms = state.point[pointLength];
        uniforms.position.setFromMatrixPosition(light.matrixWorld);
        uniforms.position.applyMatrix4(viewMatrix);
        pointLength++;
      } else if (light.isHemisphereLight) {
        const uniforms = state.hemi[hemiLength];
        uniforms.direction.setFromMatrixPosition(light.matrixWorld);
        uniforms.direction.transformDirection(viewMatrix);
        hemiLength++;
      }
    }
  }
  return {
    setup,
    setupView,
    state
  };
}
function WebGLRenderState(extensions) {
  const lights2 = new WebGLLights(extensions);
  const lightsArray = [];
  const shadowsArray = [];
  function init20(camera3) {
    state.camera = camera3;
    lightsArray.length = 0;
    shadowsArray.length = 0;
  }
  function pushLight(light) {
    lightsArray.push(light);
  }
  function pushShadow(shadowLight) {
    shadowsArray.push(shadowLight);
  }
  function setupLights() {
    lights2.setup(lightsArray);
  }
  function setupLightsView(camera3) {
    lights2.setupView(lightsArray, camera3);
  }
  const state = {
    lightsArray,
    shadowsArray,
    camera: null,
    lights: lights2,
    transmissionRenderTarget: {}
  };
  return {
    init: init20,
    state,
    setupLights,
    setupLightsView,
    pushLight,
    pushShadow
  };
}
function WebGLRenderStates(extensions) {
  let renderStates = /* @__PURE__ */ new WeakMap();
  function get(scene3, renderCallDepth = 0) {
    const renderStateArray = renderStates.get(scene3);
    let renderState;
    if (renderStateArray === void 0) {
      renderState = new WebGLRenderState(extensions);
      renderStates.set(scene3, [renderState]);
    } else {
      if (renderCallDepth >= renderStateArray.length) {
        renderState = new WebGLRenderState(extensions);
        renderStateArray.push(renderState);
      } else {
        renderState = renderStateArray[renderCallDepth];
      }
    }
    return renderState;
  }
  function dispose() {
    renderStates = /* @__PURE__ */ new WeakMap();
  }
  return {
    get,
    dispose
  };
}
var MeshDepthMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isMeshDepthMaterial = true;
    this.type = "MeshDepthMaterial";
    this.depthPacking = BasicDepthPacking;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.depthPacking = source.depthPacking;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    return this;
  }
};
var MeshDistanceMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isMeshDistanceMaterial = true;
    this.type = "MeshDistanceMaterial";
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    return this;
  }
};
var vertex = "void main() {\n	gl_Position = vec4( position, 1.0 );\n}";
var fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n	const float samples = float( VSM_SAMPLES );\n	float mean = 0.0;\n	float squared_mean = 0.0;\n	float uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n	float uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n	for ( float i = 0.0; i < samples; i ++ ) {\n		float uvOffset = uvStart + i * uvStride;\n		#ifdef HORIZONTAL_PASS\n			vec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n			mean += distribution.x;\n			squared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n		#else\n			float depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n			mean += depth;\n			squared_mean += depth * depth;\n		#endif\n	}\n	mean = mean / samples;\n	squared_mean = squared_mean / samples;\n	float std_dev = sqrt( squared_mean - mean * mean );\n	gl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";
function WebGLShadowMap(renderer3, objects, capabilities) {
  let _frustum3 = new Frustum();
  const _shadowMapSize = new Vector2(), _viewportSize = new Vector2(), _viewport2 = new Vector4(), _depthMaterial = new MeshDepthMaterial({ depthPacking: RGBADepthPacking }), _distanceMaterial = new MeshDistanceMaterial(), _materialCache = {}, _maxTextureSize = capabilities.maxTextureSize;
  const shadowSide = { [FrontSide]: BackSide, [BackSide]: FrontSide, [DoubleSide]: DoubleSide };
  const shadowMaterialVertical = new ShaderMaterial({
    defines: {
      VSM_SAMPLES: 8
    },
    uniforms: {
      shadow_pass: { value: null },
      resolution: { value: new Vector2() },
      radius: { value: 4 }
    },
    vertexShader: vertex,
    fragmentShader: fragment
  });
  const shadowMaterialHorizontal = shadowMaterialVertical.clone();
  shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;
  const fullScreenTri = new BufferGeometry();
  fullScreenTri.setAttribute(
    "position",
    new BufferAttribute(
      new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]),
      3
    )
  );
  const fullScreenMesh = new Mesh(fullScreenTri, shadowMaterialVertical);
  const scope = this;
  this.enabled = false;
  this.autoUpdate = true;
  this.needsUpdate = false;
  this.type = PCFShadowMap;
  let _previousType = this.type;
  this.render = function(lights2, scene3, camera3) {
    if (scope.enabled === false) return;
    if (scope.autoUpdate === false && scope.needsUpdate === false) return;
    if (lights2.length === 0) return;
    const currentRenderTarget = renderer3.getRenderTarget();
    const activeCubeFace = renderer3.getActiveCubeFace();
    const activeMipmapLevel = renderer3.getActiveMipmapLevel();
    const _state = renderer3.state;
    _state.setBlending(NoBlending);
    _state.buffers.color.setClear(1, 1, 1, 1);
    _state.buffers.depth.setTest(true);
    _state.setScissorTest(false);
    const toVSM = _previousType !== VSMShadowMap && this.type === VSMShadowMap;
    const fromVSM = _previousType === VSMShadowMap && this.type !== VSMShadowMap;
    for (let i2 = 0, il = lights2.length; i2 < il; i2++) {
      const light = lights2[i2];
      const shadow = light.shadow;
      if (shadow === void 0) {
        console.warn("THREE.WebGLShadowMap:", light, "has no shadow.");
        continue;
      }
      if (shadow.autoUpdate === false && shadow.needsUpdate === false) continue;
      _shadowMapSize.copy(shadow.mapSize);
      const shadowFrameExtents = shadow.getFrameExtents();
      _shadowMapSize.multiply(shadowFrameExtents);
      _viewportSize.copy(shadow.mapSize);
      if (_shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize) {
        if (_shadowMapSize.x > _maxTextureSize) {
          _viewportSize.x = Math.floor(_maxTextureSize / shadowFrameExtents.x);
          _shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
          shadow.mapSize.x = _viewportSize.x;
        }
        if (_shadowMapSize.y > _maxTextureSize) {
          _viewportSize.y = Math.floor(_maxTextureSize / shadowFrameExtents.y);
          _shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
          shadow.mapSize.y = _viewportSize.y;
        }
      }
      if (shadow.map === null || toVSM === true || fromVSM === true) {
        const pars = this.type !== VSMShadowMap ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};
        if (shadow.map !== null) {
          shadow.map.dispose();
        }
        shadow.map = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y, pars);
        shadow.map.texture.name = light.name + ".shadowMap";
        shadow.camera.updateProjectionMatrix();
      }
      renderer3.setRenderTarget(shadow.map);
      renderer3.clear();
      const viewportCount = shadow.getViewportCount();
      for (let vp = 0; vp < viewportCount; vp++) {
        const viewport2 = shadow.getViewport(vp);
        _viewport2.set(
          _viewportSize.x * viewport2.x,
          _viewportSize.y * viewport2.y,
          _viewportSize.x * viewport2.z,
          _viewportSize.y * viewport2.w
        );
        _state.viewport(_viewport2);
        shadow.updateMatrices(light, vp);
        _frustum3 = shadow.getFrustum();
        renderObject(scene3, camera3, shadow.camera, light, this.type);
      }
      if (shadow.isPointLightShadow !== true && this.type === VSMShadowMap) {
        VSMPass(shadow, camera3);
      }
      shadow.needsUpdate = false;
    }
    _previousType = this.type;
    scope.needsUpdate = false;
    renderer3.setRenderTarget(currentRenderTarget, activeCubeFace, activeMipmapLevel);
  };
  function VSMPass(shadow, camera3) {
    const geometry = objects.update(fullScreenMesh);
    if (shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples) {
      shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;
      shadowMaterialVertical.needsUpdate = true;
      shadowMaterialHorizontal.needsUpdate = true;
    }
    if (shadow.mapPass === null) {
      shadow.mapPass = new WebGLRenderTarget(_shadowMapSize.x, _shadowMapSize.y);
    }
    shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
    shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialVertical.uniforms.radius.value = shadow.radius;
    renderer3.setRenderTarget(shadow.mapPass);
    renderer3.clear();
    renderer3.renderBufferDirect(camera3, null, geometry, shadowMaterialVertical, fullScreenMesh, null);
    shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
    shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
    shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
    renderer3.setRenderTarget(shadow.map);
    renderer3.clear();
    renderer3.renderBufferDirect(camera3, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null);
  }
  function getDepthMaterial(object2, material, light, type) {
    let result = null;
    const customMaterial = light.isPointLight === true ? object2.customDistanceMaterial : object2.customDepthMaterial;
    if (customMaterial !== void 0) {
      result = customMaterial;
    } else {
      result = light.isPointLight === true ? _distanceMaterial : _depthMaterial;
      if (renderer3.localClippingEnabled && material.clipShadows === true && Array.isArray(material.clippingPlanes) && material.clippingPlanes.length !== 0 || material.displacementMap && material.displacementScale !== 0 || material.alphaMap && material.alphaTest > 0 || material.map && material.alphaTest > 0) {
        const keyA = result.uuid, keyB = material.uuid;
        let materialsForVariant = _materialCache[keyA];
        if (materialsForVariant === void 0) {
          materialsForVariant = {};
          _materialCache[keyA] = materialsForVariant;
        }
        let cachedMaterial = materialsForVariant[keyB];
        if (cachedMaterial === void 0) {
          cachedMaterial = result.clone();
          materialsForVariant[keyB] = cachedMaterial;
          material.addEventListener("dispose", onMaterialDispose);
        }
        result = cachedMaterial;
      }
    }
    result.visible = material.visible;
    result.wireframe = material.wireframe;
    if (type === VSMShadowMap) {
      result.side = material.shadowSide !== null ? material.shadowSide : material.side;
    } else {
      result.side = material.shadowSide !== null ? material.shadowSide : shadowSide[material.side];
    }
    result.alphaMap = material.alphaMap;
    result.alphaTest = material.alphaTest;
    result.map = material.map;
    result.clipShadows = material.clipShadows;
    result.clippingPlanes = material.clippingPlanes;
    result.clipIntersection = material.clipIntersection;
    result.displacementMap = material.displacementMap;
    result.displacementScale = material.displacementScale;
    result.displacementBias = material.displacementBias;
    result.wireframeLinewidth = material.wireframeLinewidth;
    result.linewidth = material.linewidth;
    if (light.isPointLight === true && result.isMeshDistanceMaterial === true) {
      const materialProperties = renderer3.properties.get(result);
      materialProperties.light = light;
    }
    return result;
  }
  function renderObject(object2, camera3, shadowCamera, light, type) {
    if (object2.visible === false) return;
    const visible = object2.layers.test(camera3.layers);
    if (visible && (object2.isMesh || object2.isLine || object2.isPoints)) {
      if ((object2.castShadow || object2.receiveShadow && type === VSMShadowMap) && (!object2.frustumCulled || _frustum3.intersectsObject(object2))) {
        object2.modelViewMatrix.multiplyMatrices(shadowCamera.matrixWorldInverse, object2.matrixWorld);
        const geometry = objects.update(object2);
        const material = object2.material;
        if (Array.isArray(material)) {
          const groups2 = geometry.groups;
          for (let k2 = 0, kl = groups2.length; k2 < kl; k2++) {
            const group2 = groups2[k2];
            const groupMaterial = material[group2.materialIndex];
            if (groupMaterial && groupMaterial.visible) {
              const depthMaterial = getDepthMaterial(object2, groupMaterial, light, type);
              object2.onBeforeShadow(renderer3, object2, camera3, shadowCamera, geometry, depthMaterial, group2);
              renderer3.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object2, group2);
              object2.onAfterShadow(renderer3, object2, camera3, shadowCamera, geometry, depthMaterial, group2);
            }
          }
        } else if (material.visible) {
          const depthMaterial = getDepthMaterial(object2, material, light, type);
          object2.onBeforeShadow(renderer3, object2, camera3, shadowCamera, geometry, depthMaterial, null);
          renderer3.renderBufferDirect(shadowCamera, null, geometry, depthMaterial, object2, null);
          object2.onAfterShadow(renderer3, object2, camera3, shadowCamera, geometry, depthMaterial, null);
        }
      }
    }
    const children2 = object2.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      renderObject(children2[i2], camera3, shadowCamera, light, type);
    }
  }
  function onMaterialDispose(event) {
    const material = event.target;
    material.removeEventListener("dispose", onMaterialDispose);
    for (const id2 in _materialCache) {
      const cache2 = _materialCache[id2];
      const uuid = event.target.uuid;
      if (uuid in cache2) {
        const shadowMaterial = cache2[uuid];
        shadowMaterial.dispose();
        delete cache2[uuid];
      }
    }
  }
}
function WebGLState(gl) {
  function ColorBuffer() {
    let locked = false;
    const color3 = new Vector4();
    let currentColorMask = null;
    const currentColorClear = new Vector4(0, 0, 0, 0);
    return {
      setMask: function(colorMask) {
        if (currentColorMask !== colorMask && !locked) {
          gl.colorMask(colorMask, colorMask, colorMask, colorMask);
          currentColorMask = colorMask;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(r2, g2, b, a2, premultipliedAlpha) {
        if (premultipliedAlpha === true) {
          r2 *= a2;
          g2 *= a2;
          b *= a2;
        }
        color3.set(r2, g2, b, a2);
        if (currentColorClear.equals(color3) === false) {
          gl.clearColor(r2, g2, b, a2);
          currentColorClear.copy(color3);
        }
      },
      reset: function() {
        locked = false;
        currentColorMask = null;
        currentColorClear.set(-1, 0, 0, 0);
      }
    };
  }
  function DepthBuffer() {
    let locked = false;
    let currentDepthMask = null;
    let currentDepthFunc = null;
    let currentDepthClear = null;
    return {
      setTest: function(depthTest) {
        if (depthTest) {
          enable(gl.DEPTH_TEST);
        } else {
          disable(gl.DEPTH_TEST);
        }
      },
      setMask: function(depthMask) {
        if (currentDepthMask !== depthMask && !locked) {
          gl.depthMask(depthMask);
          currentDepthMask = depthMask;
        }
      },
      setFunc: function(depthFunc) {
        if (currentDepthFunc !== depthFunc) {
          switch (depthFunc) {
            case NeverDepth:
              gl.depthFunc(gl.NEVER);
              break;
            case AlwaysDepth:
              gl.depthFunc(gl.ALWAYS);
              break;
            case LessDepth:
              gl.depthFunc(gl.LESS);
              break;
            case LessEqualDepth:
              gl.depthFunc(gl.LEQUAL);
              break;
            case EqualDepth:
              gl.depthFunc(gl.EQUAL);
              break;
            case GreaterEqualDepth:
              gl.depthFunc(gl.GEQUAL);
              break;
            case GreaterDepth:
              gl.depthFunc(gl.GREATER);
              break;
            case NotEqualDepth:
              gl.depthFunc(gl.NOTEQUAL);
              break;
            default:
              gl.depthFunc(gl.LEQUAL);
          }
          currentDepthFunc = depthFunc;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(depth2) {
        if (currentDepthClear !== depth2) {
          gl.clearDepth(depth2);
          currentDepthClear = depth2;
        }
      },
      reset: function() {
        locked = false;
        currentDepthMask = null;
        currentDepthFunc = null;
        currentDepthClear = null;
      }
    };
  }
  function StencilBuffer() {
    let locked = false;
    let currentStencilMask = null;
    let currentStencilFunc = null;
    let currentStencilRef = null;
    let currentStencilFuncMask = null;
    let currentStencilFail = null;
    let currentStencilZFail = null;
    let currentStencilZPass = null;
    let currentStencilClear = null;
    return {
      setTest: function(stencilTest) {
        if (!locked) {
          if (stencilTest) {
            enable(gl.STENCIL_TEST);
          } else {
            disable(gl.STENCIL_TEST);
          }
        }
      },
      setMask: function(stencilMask) {
        if (currentStencilMask !== stencilMask && !locked) {
          gl.stencilMask(stencilMask);
          currentStencilMask = stencilMask;
        }
      },
      setFunc: function(stencilFunc, stencilRef, stencilMask) {
        if (currentStencilFunc !== stencilFunc || currentStencilRef !== stencilRef || currentStencilFuncMask !== stencilMask) {
          gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
          currentStencilFunc = stencilFunc;
          currentStencilRef = stencilRef;
          currentStencilFuncMask = stencilMask;
        }
      },
      setOp: function(stencilFail, stencilZFail, stencilZPass) {
        if (currentStencilFail !== stencilFail || currentStencilZFail !== stencilZFail || currentStencilZPass !== stencilZPass) {
          gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
          currentStencilFail = stencilFail;
          currentStencilZFail = stencilZFail;
          currentStencilZPass = stencilZPass;
        }
      },
      setLocked: function(lock) {
        locked = lock;
      },
      setClear: function(stencil) {
        if (currentStencilClear !== stencil) {
          gl.clearStencil(stencil);
          currentStencilClear = stencil;
        }
      },
      reset: function() {
        locked = false;
        currentStencilMask = null;
        currentStencilFunc = null;
        currentStencilRef = null;
        currentStencilFuncMask = null;
        currentStencilFail = null;
        currentStencilZFail = null;
        currentStencilZPass = null;
        currentStencilClear = null;
      }
    };
  }
  const colorBuffer = new ColorBuffer();
  const depthBuffer = new DepthBuffer();
  const stencilBuffer = new StencilBuffer();
  const uboBindings = /* @__PURE__ */ new WeakMap();
  const uboProgramMap = /* @__PURE__ */ new WeakMap();
  let enabledCapabilities = {};
  let currentBoundFramebuffers = {};
  let currentDrawbuffers = /* @__PURE__ */ new WeakMap();
  let defaultDrawbuffers = [];
  let currentProgram = null;
  let currentBlendingEnabled = false;
  let currentBlending = null;
  let currentBlendEquation = null;
  let currentBlendSrc = null;
  let currentBlendDst = null;
  let currentBlendEquationAlpha = null;
  let currentBlendSrcAlpha = null;
  let currentBlendDstAlpha = null;
  let currentBlendColor = new Color(0, 0, 0);
  let currentBlendAlpha = 0;
  let currentPremultipledAlpha = false;
  let currentFlipSided = null;
  let currentCullFace = null;
  let currentLineWidth = null;
  let currentPolygonOffsetFactor = null;
  let currentPolygonOffsetUnits = null;
  const maxTextures = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);
  let lineWidthAvailable = false;
  let version = 0;
  const glVersion = gl.getParameter(gl.VERSION);
  if (glVersion.indexOf("WebGL") !== -1) {
    version = parseFloat(/^WebGL (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 1;
  } else if (glVersion.indexOf("OpenGL ES") !== -1) {
    version = parseFloat(/^OpenGL ES (\d)/.exec(glVersion)[1]);
    lineWidthAvailable = version >= 2;
  }
  let currentTextureSlot = null;
  let currentBoundTextures = {};
  const scissorParam = gl.getParameter(gl.SCISSOR_BOX);
  const viewportParam = gl.getParameter(gl.VIEWPORT);
  const currentScissor = new Vector4().fromArray(scissorParam);
  const currentViewport = new Vector4().fromArray(viewportParam);
  function createTexture(type, target, count2, dimensions) {
    const data = new Uint8Array(4);
    const texture2 = gl.createTexture();
    gl.bindTexture(type, texture2);
    gl.texParameteri(type, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
    gl.texParameteri(type, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
    for (let i2 = 0; i2 < count2; i2++) {
      if (type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY) {
        gl.texImage3D(target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
      } else {
        gl.texImage2D(target + i2, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data);
      }
    }
    return texture2;
  }
  const emptyTextures = {};
  emptyTextures[gl.TEXTURE_2D] = createTexture(gl.TEXTURE_2D, gl.TEXTURE_2D, 1);
  emptyTextures[gl.TEXTURE_CUBE_MAP] = createTexture(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6);
  emptyTextures[gl.TEXTURE_2D_ARRAY] = createTexture(gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1);
  emptyTextures[gl.TEXTURE_3D] = createTexture(gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1);
  colorBuffer.setClear(0, 0, 0, 1);
  depthBuffer.setClear(1);
  stencilBuffer.setClear(0);
  enable(gl.DEPTH_TEST);
  depthBuffer.setFunc(LessEqualDepth);
  setFlipSided(false);
  setCullFace(CullFaceBack);
  enable(gl.CULL_FACE);
  setBlending(NoBlending);
  function enable(id2) {
    if (enabledCapabilities[id2] !== true) {
      gl.enable(id2);
      enabledCapabilities[id2] = true;
    }
  }
  function disable(id2) {
    if (enabledCapabilities[id2] !== false) {
      gl.disable(id2);
      enabledCapabilities[id2] = false;
    }
  }
  function bindFramebuffer(target, framebuffer) {
    if (currentBoundFramebuffers[target] !== framebuffer) {
      gl.bindFramebuffer(target, framebuffer);
      currentBoundFramebuffers[target] = framebuffer;
      if (target === gl.DRAW_FRAMEBUFFER) {
        currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
      }
      if (target === gl.FRAMEBUFFER) {
        currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
      }
      return true;
    }
    return false;
  }
  function drawBuffers(renderTarget, framebuffer) {
    let drawBuffers2 = defaultDrawbuffers;
    let needsUpdate = false;
    if (renderTarget) {
      drawBuffers2 = currentDrawbuffers.get(framebuffer);
      if (drawBuffers2 === void 0) {
        drawBuffers2 = [];
        currentDrawbuffers.set(framebuffer, drawBuffers2);
      }
      const textures = renderTarget.textures;
      if (drawBuffers2.length !== textures.length || drawBuffers2[0] !== gl.COLOR_ATTACHMENT0) {
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          drawBuffers2[i2] = gl.COLOR_ATTACHMENT0 + i2;
        }
        drawBuffers2.length = textures.length;
        needsUpdate = true;
      }
    } else {
      if (drawBuffers2[0] !== gl.BACK) {
        drawBuffers2[0] = gl.BACK;
        needsUpdate = true;
      }
    }
    if (needsUpdate) {
      gl.drawBuffers(drawBuffers2);
    }
  }
  function useProgram(program) {
    if (currentProgram !== program) {
      gl.useProgram(program);
      currentProgram = program;
      return true;
    }
    return false;
  }
  const equationToGL2 = {
    [AddEquation]: gl.FUNC_ADD,
    [SubtractEquation]: gl.FUNC_SUBTRACT,
    [ReverseSubtractEquation]: gl.FUNC_REVERSE_SUBTRACT
  };
  equationToGL2[MinEquation] = gl.MIN;
  equationToGL2[MaxEquation] = gl.MAX;
  const factorToGL2 = {
    [ZeroFactor]: gl.ZERO,
    [OneFactor]: gl.ONE,
    [SrcColorFactor]: gl.SRC_COLOR,
    [SrcAlphaFactor]: gl.SRC_ALPHA,
    [SrcAlphaSaturateFactor]: gl.SRC_ALPHA_SATURATE,
    [DstColorFactor]: gl.DST_COLOR,
    [DstAlphaFactor]: gl.DST_ALPHA,
    [OneMinusSrcColorFactor]: gl.ONE_MINUS_SRC_COLOR,
    [OneMinusSrcAlphaFactor]: gl.ONE_MINUS_SRC_ALPHA,
    [OneMinusDstColorFactor]: gl.ONE_MINUS_DST_COLOR,
    [OneMinusDstAlphaFactor]: gl.ONE_MINUS_DST_ALPHA,
    [ConstantColorFactor]: gl.CONSTANT_COLOR,
    [OneMinusConstantColorFactor]: gl.ONE_MINUS_CONSTANT_COLOR,
    [ConstantAlphaFactor]: gl.CONSTANT_ALPHA,
    [OneMinusConstantAlphaFactor]: gl.ONE_MINUS_CONSTANT_ALPHA
  };
  function setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, blendColor, blendAlpha, premultipliedAlpha) {
    if (blending === NoBlending) {
      if (currentBlendingEnabled === true) {
        disable(gl.BLEND);
        currentBlendingEnabled = false;
      }
      return;
    }
    if (currentBlendingEnabled === false) {
      enable(gl.BLEND);
      currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending) {
      if (blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha) {
        if (currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation) {
          gl.blendEquation(gl.FUNC_ADD);
          currentBlendEquation = AddEquation;
          currentBlendEquationAlpha = AddEquation;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl.blendFunc(gl.ONE, gl.ONE);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending:
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending:
              gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
              break;
            case SubtractiveBlending:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending:
              gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        currentBlendSrc = null;
        currentBlendDst = null;
        currentBlendSrcAlpha = null;
        currentBlendDstAlpha = null;
        currentBlendColor.set(0, 0, 0);
        currentBlendAlpha = 0;
        currentBlending = blending;
        currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL2[blendEquation], equationToGL2[blendEquationAlpha]);
      currentBlendEquation = blendEquation;
      currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL2[blendSrc], factorToGL2[blendDst], factorToGL2[blendSrcAlpha], factorToGL2[blendDstAlpha]);
      currentBlendSrc = blendSrc;
      currentBlendDst = blendDst;
      currentBlendSrcAlpha = blendSrcAlpha;
      currentBlendDstAlpha = blendDstAlpha;
    }
    if (blendColor.equals(currentBlendColor) === false || blendAlpha !== currentBlendAlpha) {
      gl.blendColor(blendColor.r, blendColor.g, blendColor.b, blendAlpha);
      currentBlendColor.copy(blendColor);
      currentBlendAlpha = blendAlpha;
    }
    currentBlending = blending;
    currentPremultipledAlpha = false;
  }
  function setMaterial(material, frontFaceCW) {
    material.side === DoubleSide ? disable(gl.CULL_FACE) : enable(gl.CULL_FACE);
    let flipSided = material.side === BackSide;
    if (frontFaceCW) flipSided = !flipSided;
    setFlipSided(flipSided);
    material.blending === NormalBlending && material.transparent === false ? setBlending(NoBlending) : setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.blendColor, material.blendAlpha, material.premultipliedAlpha);
    depthBuffer.setFunc(material.depthFunc);
    depthBuffer.setTest(material.depthTest);
    depthBuffer.setMask(material.depthWrite);
    colorBuffer.setMask(material.colorWrite);
    const stencilWrite = material.stencilWrite;
    stencilBuffer.setTest(stencilWrite);
    if (stencilWrite) {
      stencilBuffer.setMask(material.stencilWriteMask);
      stencilBuffer.setFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      stencilBuffer.setOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }
    setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    material.alphaToCoverage === true ? enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
  }
  function setFlipSided(flipSided) {
    if (currentFlipSided !== flipSided) {
      if (flipSided) {
        gl.frontFace(gl.CW);
      } else {
        gl.frontFace(gl.CCW);
      }
      currentFlipSided = flipSided;
    }
  }
  function setCullFace(cullFace) {
    if (cullFace !== CullFaceNone) {
      enable(gl.CULL_FACE);
      if (cullFace !== currentCullFace) {
        if (cullFace === CullFaceBack) {
          gl.cullFace(gl.BACK);
        } else if (cullFace === CullFaceFront) {
          gl.cullFace(gl.FRONT);
        } else {
          gl.cullFace(gl.FRONT_AND_BACK);
        }
      }
    } else {
      disable(gl.CULL_FACE);
    }
    currentCullFace = cullFace;
  }
  function setLineWidth(width) {
    if (width !== currentLineWidth) {
      if (lineWidthAvailable) gl.lineWidth(width);
      currentLineWidth = width;
    }
  }
  function setPolygonOffset(polygonOffset, factor, units) {
    if (polygonOffset) {
      enable(gl.POLYGON_OFFSET_FILL);
      if (currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        currentPolygonOffsetFactor = factor;
        currentPolygonOffsetUnits = units;
      }
    } else {
      disable(gl.POLYGON_OFFSET_FILL);
    }
  }
  function setScissorTest(scissorTest) {
    if (scissorTest) {
      enable(gl.SCISSOR_TEST);
    } else {
      disable(gl.SCISSOR_TEST);
    }
  }
  function activeTexture(webglSlot) {
    if (webglSlot === void 0) webglSlot = gl.TEXTURE0 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      currentTextureSlot = webglSlot;
    }
  }
  function bindTexture(webglType, webglTexture, webglSlot) {
    if (webglSlot === void 0) {
      if (currentTextureSlot === null) {
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      } else {
        webglSlot = currentTextureSlot;
      }
    }
    let boundTexture = currentBoundTextures[webglSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[webglSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        currentTextureSlot = webglSlot;
      }
      gl.bindTexture(webglType, webglTexture || emptyTextures[webglType]);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  function unbindTexture() {
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
  function compressedTexImage2D() {
    try {
      gl.compressedTexImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexImage3D() {
    try {
      gl.compressedTexImage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texSubImage2D() {
    try {
      gl.texSubImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texSubImage3D() {
    try {
      gl.texSubImage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexSubImage2D() {
    try {
      gl.compressedTexSubImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function compressedTexSubImage3D() {
    try {
      gl.compressedTexSubImage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texStorage2D() {
    try {
      gl.texStorage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texStorage3D() {
    try {
      gl.texStorage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage2D() {
    try {
      gl.texImage2D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function texImage3D() {
    try {
      gl.texImage3D.apply(gl, arguments);
    } catch (error) {
      console.error("THREE.WebGLState:", error);
    }
  }
  function scissor(scissor2) {
    if (currentScissor.equals(scissor2) === false) {
      gl.scissor(scissor2.x, scissor2.y, scissor2.z, scissor2.w);
      currentScissor.copy(scissor2);
    }
  }
  function viewport2(viewport3) {
    if (currentViewport.equals(viewport3) === false) {
      gl.viewport(viewport3.x, viewport3.y, viewport3.z, viewport3.w);
      currentViewport.copy(viewport3);
    }
  }
  function updateUBOMapping(uniformsGroup, program) {
    let mapping = uboProgramMap.get(program);
    if (mapping === void 0) {
      mapping = /* @__PURE__ */ new WeakMap();
      uboProgramMap.set(program, mapping);
    }
    let blockIndex = mapping.get(uniformsGroup);
    if (blockIndex === void 0) {
      blockIndex = gl.getUniformBlockIndex(program, uniformsGroup.name);
      mapping.set(uniformsGroup, blockIndex);
    }
  }
  function uniformBlockBinding(uniformsGroup, program) {
    const mapping = uboProgramMap.get(program);
    const blockIndex = mapping.get(uniformsGroup);
    if (uboBindings.get(program) !== blockIndex) {
      gl.uniformBlockBinding(program, blockIndex, uniformsGroup.__bindingPointIndex);
      uboBindings.set(program, blockIndex);
    }
  }
  function reset() {
    gl.disable(gl.BLEND);
    gl.disable(gl.CULL_FACE);
    gl.disable(gl.DEPTH_TEST);
    gl.disable(gl.POLYGON_OFFSET_FILL);
    gl.disable(gl.SCISSOR_TEST);
    gl.disable(gl.STENCIL_TEST);
    gl.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
    gl.blendEquation(gl.FUNC_ADD);
    gl.blendFunc(gl.ONE, gl.ZERO);
    gl.blendFuncSeparate(gl.ONE, gl.ZERO, gl.ONE, gl.ZERO);
    gl.blendColor(0, 0, 0, 0);
    gl.colorMask(true, true, true, true);
    gl.clearColor(0, 0, 0, 0);
    gl.depthMask(true);
    gl.depthFunc(gl.LESS);
    gl.clearDepth(1);
    gl.stencilMask(4294967295);
    gl.stencilFunc(gl.ALWAYS, 0, 4294967295);
    gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);
    gl.clearStencil(0);
    gl.cullFace(gl.BACK);
    gl.frontFace(gl.CCW);
    gl.polygonOffset(0, 0);
    gl.activeTexture(gl.TEXTURE0);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.bindFramebuffer(gl.DRAW_FRAMEBUFFER, null);
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);
    gl.useProgram(null);
    gl.lineWidth(1);
    gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);
    gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
    enabledCapabilities = {};
    currentTextureSlot = null;
    currentBoundTextures = {};
    currentBoundFramebuffers = {};
    currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    defaultDrawbuffers = [];
    currentProgram = null;
    currentBlendingEnabled = false;
    currentBlending = null;
    currentBlendEquation = null;
    currentBlendSrc = null;
    currentBlendDst = null;
    currentBlendEquationAlpha = null;
    currentBlendSrcAlpha = null;
    currentBlendDstAlpha = null;
    currentBlendColor = new Color(0, 0, 0);
    currentBlendAlpha = 0;
    currentPremultipledAlpha = false;
    currentFlipSided = null;
    currentCullFace = null;
    currentLineWidth = null;
    currentPolygonOffsetFactor = null;
    currentPolygonOffsetUnits = null;
    currentScissor.set(0, 0, gl.canvas.width, gl.canvas.height);
    currentViewport.set(0, 0, gl.canvas.width, gl.canvas.height);
    colorBuffer.reset();
    depthBuffer.reset();
    stencilBuffer.reset();
  }
  return {
    buffers: {
      color: colorBuffer,
      depth: depthBuffer,
      stencil: stencilBuffer
    },
    enable,
    disable,
    bindFramebuffer,
    drawBuffers,
    useProgram,
    setBlending,
    setMaterial,
    setFlipSided,
    setCullFace,
    setLineWidth,
    setPolygonOffset,
    setScissorTest,
    activeTexture,
    bindTexture,
    unbindTexture,
    compressedTexImage2D,
    compressedTexImage3D,
    texImage2D,
    texImage3D,
    updateUBOMapping,
    uniformBlockBinding,
    texStorage2D,
    texStorage3D,
    texSubImage2D,
    texSubImage3D,
    compressedTexSubImage2D,
    compressedTexSubImage3D,
    scissor,
    viewport: viewport2,
    reset
  };
}
function getByteLength(width, height, format3, type) {
  const typeByteLength = getTextureTypeByteLength(type);
  switch (format3) {
    // https://registry.khronos.org/OpenGL-Refpages/es3.0/html/glTexImage2D.xhtml
    case AlphaFormat:
      return width * height;
    case LuminanceFormat:
      return width * height;
    case LuminanceAlphaFormat:
      return width * height * 2;
    case RedFormat:
      return width * height / typeByteLength.components * typeByteLength.byteLength;
    case RedIntegerFormat:
      return width * height / typeByteLength.components * typeByteLength.byteLength;
    case RGFormat:
      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
    case RGIntegerFormat:
      return width * height * 2 / typeByteLength.components * typeByteLength.byteLength;
    case RGBFormat:
      return width * height * 3 / typeByteLength.components * typeByteLength.byteLength;
    case RGBAFormat:
      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
    case RGBAIntegerFormat:
      return width * height * 4 / typeByteLength.components * typeByteLength.byteLength;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_s3tc_srgb/
    case RGB_S3TC_DXT1_Format:
    case RGBA_S3TC_DXT1_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
    case RGBA_S3TC_DXT3_Format:
    case RGBA_S3TC_DXT5_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_pvrtc/
    case RGB_PVRTC_2BPPV1_Format:
    case RGBA_PVRTC_2BPPV1_Format:
      return Math.max(width, 16) * Math.max(height, 8) / 4;
    case RGB_PVRTC_4BPPV1_Format:
    case RGBA_PVRTC_4BPPV1_Format:
      return Math.max(width, 8) * Math.max(height, 8) / 2;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_etc/
    case RGB_ETC1_Format:
    case RGB_ETC2_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 8;
    case RGBA_ETC2_EAC_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/WEBGL_compressed_texture_astc/
    case RGBA_ASTC_4x4_Format:
      return Math.floor((width + 3) / 4) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_5x4_Format:
      return Math.floor((width + 4) / 5) * Math.floor((height + 3) / 4) * 16;
    case RGBA_ASTC_5x5_Format:
      return Math.floor((width + 4) / 5) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_6x5_Format:
      return Math.floor((width + 5) / 6) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_6x6_Format:
      return Math.floor((width + 5) / 6) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_8x5_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_8x6_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_8x8_Format:
      return Math.floor((width + 7) / 8) * Math.floor((height + 7) / 8) * 16;
    case RGBA_ASTC_10x5_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 4) / 5) * 16;
    case RGBA_ASTC_10x6_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 5) / 6) * 16;
    case RGBA_ASTC_10x8_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 7) / 8) * 16;
    case RGBA_ASTC_10x10_Format:
      return Math.floor((width + 9) / 10) * Math.floor((height + 9) / 10) * 16;
    case RGBA_ASTC_12x10_Format:
      return Math.floor((width + 11) / 12) * Math.floor((height + 9) / 10) * 16;
    case RGBA_ASTC_12x12_Format:
      return Math.floor((width + 11) / 12) * Math.floor((height + 11) / 12) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_bptc/
    case RGBA_BPTC_Format:
    case RGB_BPTC_SIGNED_Format:
    case RGB_BPTC_UNSIGNED_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
    // https://registry.khronos.org/webgl/extensions/EXT_texture_compression_rgtc/
    case RED_RGTC1_Format:
    case SIGNED_RED_RGTC1_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 8;
    case RED_GREEN_RGTC2_Format:
    case SIGNED_RED_GREEN_RGTC2_Format:
      return Math.ceil(width / 4) * Math.ceil(height / 4) * 16;
  }
  throw new Error(
    `Unable to determine texture byte length for ${format3} format.`
  );
}
function getTextureTypeByteLength(type) {
  switch (type) {
    case UnsignedByteType:
    case ByteType:
      return { byteLength: 1, components: 1 };
    case UnsignedShortType:
    case ShortType:
    case HalfFloatType:
      return { byteLength: 2, components: 1 };
    case UnsignedShort4444Type:
    case UnsignedShort5551Type:
      return { byteLength: 2, components: 4 };
    case UnsignedIntType:
    case IntType:
    case FloatType:
      return { byteLength: 4, components: 1 };
    case UnsignedInt5999Type:
      return { byteLength: 4, components: 3 };
  }
  throw new Error(`Unknown texture type ${type}.`);
}
function WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info) {
  const multisampledRTTExt = extensions.has("WEBGL_multisampled_render_to_texture") ? extensions.get("WEBGL_multisampled_render_to_texture") : null;
  const supportsInvalidateFramebuffer = typeof navigator === "undefined" ? false : /OculusBrowser/g.test(navigator.userAgent);
  const _imageDimensions = new Vector2();
  const _videoTextures = /* @__PURE__ */ new WeakMap();
  let _canvas3;
  const _sources = /* @__PURE__ */ new WeakMap();
  let useOffscreenCanvas = false;
  try {
    useOffscreenCanvas = typeof OffscreenCanvas !== "undefined" && new OffscreenCanvas(1, 1).getContext("2d") !== null;
  } catch (err) {
  }
  function createCanvas(width, height) {
    return useOffscreenCanvas ? (
      // eslint-disable-next-line compat/compat
      new OffscreenCanvas(width, height)
    ) : createElementNS("canvas");
  }
  function resizeImage(image, needsNewCanvas, maxSize) {
    let scale2 = 1;
    const dimensions = getDimensions(image);
    if (dimensions.width > maxSize || dimensions.height > maxSize) {
      scale2 = maxSize / Math.max(dimensions.width, dimensions.height);
    }
    if (scale2 < 1) {
      if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap || typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
        const width = Math.floor(scale2 * dimensions.width);
        const height = Math.floor(scale2 * dimensions.height);
        if (_canvas3 === void 0) _canvas3 = createCanvas(width, height);
        const canvas = needsNewCanvas ? createCanvas(width, height) : _canvas3;
        canvas.width = width;
        canvas.height = height;
        const context2 = canvas.getContext("2d");
        context2.drawImage(image, 0, 0, width, height);
        console.warn("THREE.WebGLRenderer: Texture has been resized from (" + dimensions.width + "x" + dimensions.height + ") to (" + width + "x" + height + ").");
        return canvas;
      } else {
        if ("data" in image) {
          console.warn("THREE.WebGLRenderer: Image in DataTexture is too big (" + dimensions.width + "x" + dimensions.height + ").");
        }
        return image;
      }
    }
    return image;
  }
  function textureNeedsGenerateMipmaps(texture2) {
    return texture2.generateMipmaps && texture2.minFilter !== NearestFilter && texture2.minFilter !== LinearFilter;
  }
  function generateMipmap(target) {
    _gl.generateMipmap(target);
  }
  function getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
    if (internalFormatName !== null) {
      if (_gl[internalFormatName] !== void 0) return _gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === _gl.RED) {
      if (glType === _gl.FLOAT) internalFormat = _gl.R32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.R16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8;
    }
    if (glFormat === _gl.RED_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.R8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.R16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.R32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.R8I;
      if (glType === _gl.SHORT) internalFormat = _gl.R16I;
      if (glType === _gl.INT) internalFormat = _gl.R32I;
    }
    if (glFormat === _gl.RG) {
      if (glType === _gl.FLOAT) internalFormat = _gl.RG32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RG16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8;
    }
    if (glFormat === _gl.RG_INTEGER) {
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = _gl.RG8UI;
      if (glType === _gl.UNSIGNED_SHORT) internalFormat = _gl.RG16UI;
      if (glType === _gl.UNSIGNED_INT) internalFormat = _gl.RG32UI;
      if (glType === _gl.BYTE) internalFormat = _gl.RG8I;
      if (glType === _gl.SHORT) internalFormat = _gl.RG16I;
      if (glType === _gl.INT) internalFormat = _gl.RG32I;
    }
    if (glFormat === _gl.RGB) {
      if (glType === _gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = _gl.RGB9_E5;
    }
    if (glFormat === _gl.RGBA) {
      const transfer = forceLinearTransfer ? LinearTransfer : ColorManagement.getTransfer(colorSpace);
      if (glType === _gl.FLOAT) internalFormat = _gl.RGBA32F;
      if (glType === _gl.HALF_FLOAT) internalFormat = _gl.RGBA16F;
      if (glType === _gl.UNSIGNED_BYTE) internalFormat = transfer === SRGBTransfer ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
      if (glType === _gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = _gl.RGBA4;
      if (glType === _gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = _gl.RGB5_A1;
    }
    if (internalFormat === _gl.R16F || internalFormat === _gl.R32F || internalFormat === _gl.RG16F || internalFormat === _gl.RG32F || internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  function getInternalDepthFormat(useStencil, depthType) {
    let glInternalFormat;
    if (useStencil) {
      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
        glInternalFormat = _gl.DEPTH24_STENCIL8;
      } else if (depthType === FloatType) {
        glInternalFormat = _gl.DEPTH32F_STENCIL8;
      } else if (depthType === UnsignedShortType) {
        glInternalFormat = _gl.DEPTH24_STENCIL8;
        console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.");
      }
    } else {
      if (depthType === null || depthType === UnsignedIntType || depthType === UnsignedInt248Type) {
        glInternalFormat = _gl.DEPTH_COMPONENT24;
      } else if (depthType === FloatType) {
        glInternalFormat = _gl.DEPTH_COMPONENT32F;
      } else if (depthType === UnsignedShortType) {
        glInternalFormat = _gl.DEPTH_COMPONENT16;
      }
    }
    return glInternalFormat;
  }
  function getMipLevels(texture2, image) {
    if (textureNeedsGenerateMipmaps(texture2) === true || texture2.isFramebufferTexture && texture2.minFilter !== NearestFilter && texture2.minFilter !== LinearFilter) {
      return Math.log2(Math.max(image.width, image.height)) + 1;
    } else if (texture2.mipmaps !== void 0 && texture2.mipmaps.length > 0) {
      return texture2.mipmaps.length;
    } else if (texture2.isCompressedTexture && Array.isArray(texture2.image)) {
      return image.mipmaps.length;
    } else {
      return 1;
    }
  }
  function onTextureDispose2(event) {
    const texture2 = event.target;
    texture2.removeEventListener("dispose", onTextureDispose2);
    deallocateTexture(texture2);
    if (texture2.isVideoTexture) {
      _videoTextures.delete(texture2);
    }
  }
  function onRenderTargetDispose(event) {
    const renderTarget = event.target;
    renderTarget.removeEventListener("dispose", onRenderTargetDispose);
    deallocateRenderTarget(renderTarget);
  }
  function deallocateTexture(texture2) {
    const textureProperties = properties.get(texture2);
    if (textureProperties.__webglInit === void 0) return;
    const source = texture2.source;
    const webglTextures = _sources.get(source);
    if (webglTextures) {
      const webglTexture = webglTextures[textureProperties.__cacheKey];
      webglTexture.usedTimes--;
      if (webglTexture.usedTimes === 0) {
        deleteTexture(texture2);
      }
      if (Object.keys(webglTextures).length === 0) {
        _sources.delete(source);
      }
    }
    properties.remove(texture2);
  }
  function deleteTexture(texture2) {
    const textureProperties = properties.get(texture2);
    _gl.deleteTexture(textureProperties.__webglTexture);
    const source = texture2.source;
    const webglTextures = _sources.get(source);
    delete webglTextures[textureProperties.__cacheKey];
    info.memory.textures--;
  }
  function deallocateRenderTarget(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    if (renderTarget.depthTexture) {
      renderTarget.depthTexture.dispose();
    }
    if (renderTarget.isWebGLCubeRenderTarget) {
      for (let i2 = 0; i2 < 6; i2++) {
        if (Array.isArray(renderTargetProperties.__webglFramebuffer[i2])) {
          for (let level = 0; level < renderTargetProperties.__webglFramebuffer[i2].length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i2][level]);
        } else {
          _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[i2]);
        }
        if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer[i2]);
      }
    } else {
      if (Array.isArray(renderTargetProperties.__webglFramebuffer)) {
        for (let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level++) _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer[level]);
      } else {
        _gl.deleteFramebuffer(renderTargetProperties.__webglFramebuffer);
      }
      if (renderTargetProperties.__webglDepthbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthbuffer);
      if (renderTargetProperties.__webglMultisampledFramebuffer) _gl.deleteFramebuffer(renderTargetProperties.__webglMultisampledFramebuffer);
      if (renderTargetProperties.__webglColorRenderbuffer) {
        for (let i2 = 0; i2 < renderTargetProperties.__webglColorRenderbuffer.length; i2++) {
          if (renderTargetProperties.__webglColorRenderbuffer[i2]) _gl.deleteRenderbuffer(renderTargetProperties.__webglColorRenderbuffer[i2]);
        }
      }
      if (renderTargetProperties.__webglDepthRenderbuffer) _gl.deleteRenderbuffer(renderTargetProperties.__webglDepthRenderbuffer);
    }
    const textures = renderTarget.textures;
    for (let i2 = 0, il = textures.length; i2 < il; i2++) {
      const attachmentProperties = properties.get(textures[i2]);
      if (attachmentProperties.__webglTexture) {
        _gl.deleteTexture(attachmentProperties.__webglTexture);
        info.memory.textures--;
      }
      properties.remove(textures[i2]);
    }
    properties.remove(renderTarget);
  }
  let textureUnits = 0;
  function resetTextureUnits() {
    textureUnits = 0;
  }
  function allocateTextureUnit() {
    const textureUnit = textureUnits;
    if (textureUnit >= capabilities.maxTextures) {
      console.warn("THREE.WebGLTextures: Trying to use " + textureUnit + " texture units while this GPU supports only " + capabilities.maxTextures);
    }
    textureUnits += 1;
    return textureUnit;
  }
  function getTextureCacheKey(texture2) {
    const array3 = [];
    array3.push(texture2.wrapS);
    array3.push(texture2.wrapT);
    array3.push(texture2.wrapR || 0);
    array3.push(texture2.magFilter);
    array3.push(texture2.minFilter);
    array3.push(texture2.anisotropy);
    array3.push(texture2.internalFormat);
    array3.push(texture2.format);
    array3.push(texture2.type);
    array3.push(texture2.generateMipmaps);
    array3.push(texture2.premultiplyAlpha);
    array3.push(texture2.flipY);
    array3.push(texture2.unpackAlignment);
    array3.push(texture2.colorSpace);
    return array3.join();
  }
  function setTexture2D(texture2, slot) {
    const textureProperties = properties.get(texture2);
    if (texture2.isVideoTexture) updateVideoTexture(texture2);
    if (texture2.isRenderTargetTexture === false && texture2.version > 0 && textureProperties.__version !== texture2.version) {
      const image = texture2.image;
      if (image === null) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");
      } else if (image.complete === false) {
        console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete");
      } else {
        uploadTexture(textureProperties, texture2, slot);
        return;
      }
    }
    state.bindTexture(_gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTexture2DArray(texture2, slot) {
    const textureProperties = properties.get(texture2);
    if (texture2.version > 0 && textureProperties.__version !== texture2.version) {
      uploadTexture(textureProperties, texture2, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTexture3D(texture2, slot) {
    const textureProperties = properties.get(texture2);
    if (texture2.version > 0 && textureProperties.__version !== texture2.version) {
      uploadTexture(textureProperties, texture2, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  function setTextureCube(texture2, slot) {
    const textureProperties = properties.get(texture2);
    if (texture2.version > 0 && textureProperties.__version !== texture2.version) {
      uploadCubeTexture(textureProperties, texture2, slot);
      return;
    }
    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
  }
  const wrappingToGL2 = {
    [RepeatWrapping]: _gl.REPEAT,
    [ClampToEdgeWrapping]: _gl.CLAMP_TO_EDGE,
    [MirroredRepeatWrapping]: _gl.MIRRORED_REPEAT
  };
  const filterToGL2 = {
    [NearestFilter]: _gl.NEAREST,
    [NearestMipmapNearestFilter]: _gl.NEAREST_MIPMAP_NEAREST,
    [NearestMipmapLinearFilter]: _gl.NEAREST_MIPMAP_LINEAR,
    [LinearFilter]: _gl.LINEAR,
    [LinearMipmapNearestFilter]: _gl.LINEAR_MIPMAP_NEAREST,
    [LinearMipmapLinearFilter]: _gl.LINEAR_MIPMAP_LINEAR
  };
  const compareToGL2 = {
    [NeverCompare]: _gl.NEVER,
    [AlwaysCompare]: _gl.ALWAYS,
    [LessCompare]: _gl.LESS,
    [LessEqualCompare]: _gl.LEQUAL,
    [EqualCompare]: _gl.EQUAL,
    [GreaterEqualCompare]: _gl.GEQUAL,
    [GreaterCompare]: _gl.GREATER,
    [NotEqualCompare]: _gl.NOTEQUAL
  };
  function setTextureParameters(textureType, texture2) {
    if (texture2.type === FloatType && extensions.has("OES_texture_float_linear") === false && (texture2.magFilter === LinearFilter || texture2.magFilter === LinearMipmapNearestFilter || texture2.magFilter === NearestMipmapLinearFilter || texture2.magFilter === LinearMipmapLinearFilter || texture2.minFilter === LinearFilter || texture2.minFilter === LinearMipmapNearestFilter || texture2.minFilter === NearestMipmapLinearFilter || texture2.minFilter === LinearMipmapLinearFilter)) {
      console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device.");
    }
    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_S, wrappingToGL2[texture2.wrapS]);
    _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_T, wrappingToGL2[texture2.wrapT]);
    if (textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY) {
      _gl.texParameteri(textureType, _gl.TEXTURE_WRAP_R, wrappingToGL2[texture2.wrapR]);
    }
    _gl.texParameteri(textureType, _gl.TEXTURE_MAG_FILTER, filterToGL2[texture2.magFilter]);
    _gl.texParameteri(textureType, _gl.TEXTURE_MIN_FILTER, filterToGL2[texture2.minFilter]);
    if (texture2.compareFunction) {
      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE);
      _gl.texParameteri(textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL2[texture2.compareFunction]);
    }
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      if (texture2.magFilter === NearestFilter) return;
      if (texture2.minFilter !== NearestMipmapLinearFilter && texture2.minFilter !== LinearMipmapLinearFilter) return;
      if (texture2.type === FloatType && extensions.has("OES_texture_float_linear") === false) return;
      if (texture2.anisotropy > 1 || properties.get(texture2).__currentAnisotropy) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        _gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture2.anisotropy, capabilities.getMaxAnisotropy()));
        properties.get(texture2).__currentAnisotropy = texture2.anisotropy;
      }
    }
  }
  function initTexture(textureProperties, texture2) {
    let forceUpload = false;
    if (textureProperties.__webglInit === void 0) {
      textureProperties.__webglInit = true;
      texture2.addEventListener("dispose", onTextureDispose2);
    }
    const source = texture2.source;
    let webglTextures = _sources.get(source);
    if (webglTextures === void 0) {
      webglTextures = {};
      _sources.set(source, webglTextures);
    }
    const textureCacheKey = getTextureCacheKey(texture2);
    if (textureCacheKey !== textureProperties.__cacheKey) {
      if (webglTextures[textureCacheKey] === void 0) {
        webglTextures[textureCacheKey] = {
          texture: _gl.createTexture(),
          usedTimes: 0
        };
        info.memory.textures++;
        forceUpload = true;
      }
      webglTextures[textureCacheKey].usedTimes++;
      const webglTexture = webglTextures[textureProperties.__cacheKey];
      if (webglTexture !== void 0) {
        webglTextures[textureProperties.__cacheKey].usedTimes--;
        if (webglTexture.usedTimes === 0) {
          deleteTexture(texture2);
        }
      }
      textureProperties.__cacheKey = textureCacheKey;
      textureProperties.__webglTexture = webglTextures[textureCacheKey].texture;
    }
    return forceUpload;
  }
  function uploadTexture(textureProperties, texture2, slot) {
    let textureType = _gl.TEXTURE_2D;
    if (texture2.isDataArrayTexture || texture2.isCompressedArrayTexture) textureType = _gl.TEXTURE_2D_ARRAY;
    if (texture2.isData3DTexture) textureType = _gl.TEXTURE_3D;
    const forceUpload = initTexture(textureProperties, texture2);
    const source = texture2.source;
    state.bindTexture(textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    const sourceProperties = properties.get(source);
    if (source.version !== sourceProperties.__version || forceUpload === true) {
      state.activeTexture(_gl.TEXTURE0 + slot);
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture2.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture2.colorSpace);
      const unpackConversion = texture2.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture2.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture2.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture2.unpackAlignment);
      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      let image = resizeImage(texture2.image, false, capabilities.maxTextureSize);
      image = verifyColorSpace(texture2, image);
      const glFormat = utils.convert(texture2.format, texture2.colorSpace);
      const glType = utils.convert(texture2.type);
      let glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, texture2.isVideoTexture);
      setTextureParameters(textureType, texture2);
      let mipmap;
      const mipmaps = texture2.mipmaps;
      const useTexStorage = texture2.isVideoTexture !== true;
      const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
      const dataReady = source.dataReady;
      const levels = getMipLevels(texture2, image);
      if (texture2.isDepthTexture) {
        glInternalFormat = getInternalDepthFormat(texture2.format === DepthStencilFormat, texture2.type);
        if (allocateMemory) {
          if (useTexStorage) {
            state.texStorage2D(_gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height);
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null);
          }
        }
      } else if (texture2.isDataTexture) {
        if (mipmaps.length > 0) {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
            }
          }
          texture2.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
            }
            if (dataReady) {
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data);
            }
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data);
          }
        }
      } else if (texture2.isCompressedTexture) {
        if (texture2.isCompressedArrayTexture) {
          if (useTexStorage && allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height, image.depth);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (texture2.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    if (texture2.layerUpdates.size > 0) {
                      const layerByteLength = getByteLength(mipmap.width, mipmap.height, texture2.format, texture2.type);
                      for (const layerIndex of texture2.layerUpdates) {
                        const layerData = mipmap.data.subarray(
                          layerIndex * layerByteLength / mipmap.data.BYTES_PER_ELEMENT,
                          (layerIndex + 1) * layerByteLength / mipmap.data.BYTES_PER_ELEMENT
                        );
                        state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i2, 0, 0, layerIndex, mipmap.width, mipmap.height, 1, glFormat, layerData, 0, 0);
                      }
                      texture2.clearLayerUpdates();
                    } else {
                      state.compressedTexSubImage3D(_gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
                    }
                  }
                } else {
                  state.compressedTexImage3D(_gl.TEXTURE_2D_ARRAY, i2, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage3D(_gl.TEXTURE_2D_ARRAY, i2, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        } else {
          if (useTexStorage && allocateMemory) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[0].width, mipmaps[0].height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (texture2.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  }
                } else {
                  state.compressedTexImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else if (texture2.isDataArrayTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          if (dataReady) {
            if (texture2.layerUpdates.size > 0) {
              const layerByteLength = getByteLength(image.width, image.height, texture2.format, texture2.type);
              for (const layerIndex of texture2.layerUpdates) {
                const layerData = image.data.subarray(
                  layerIndex * layerByteLength / image.data.BYTES_PER_ELEMENT,
                  (layerIndex + 1) * layerByteLength / image.data.BYTES_PER_ELEMENT
                );
                state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, layerIndex, image.width, image.height, 1, glFormat, glType, layerData);
              }
              texture2.clearLayerUpdates();
            } else {
              state.texSubImage3D(_gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
            }
          }
        } else {
          state.texImage3D(_gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture2.isData3DTexture) {
        if (useTexStorage) {
          if (allocateMemory) {
            state.texStorage3D(_gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth);
          }
          if (dataReady) {
            state.texSubImage3D(_gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
          }
        } else {
          state.texImage3D(_gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data);
        }
      } else if (texture2.isFramebufferTexture) {
        if (allocateMemory) {
          if (useTexStorage) {
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height);
          } else {
            let width = image.width, height = image.height;
            for (let i2 = 0; i2 < levels; i2++) {
              state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, width, height, 0, glFormat, glType, null);
              width >>= 1;
              height >>= 1;
            }
          }
        }
      } else {
        if (mipmaps.length > 0) {
          if (useTexStorage && allocateMemory) {
            const dimensions = getDimensions(mipmaps[0]);
            state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
          }
          for (let i2 = 0, il = mipmaps.length; i2 < il; i2++) {
            mipmap = mipmaps[i2];
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_2D, i2, 0, 0, glFormat, glType, mipmap);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_2D, i2, glInternalFormat, glFormat, glType, mipmap);
            }
          }
          texture2.generateMipmaps = false;
        } else {
          if (useTexStorage) {
            if (allocateMemory) {
              const dimensions = getDimensions(image);
              state.texStorage2D(_gl.TEXTURE_2D, levels, glInternalFormat, dimensions.width, dimensions.height);
            }
            if (dataReady) {
              state.texSubImage2D(_gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image);
            }
          } else {
            state.texImage2D(_gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image);
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture2)) {
        generateMipmap(textureType);
      }
      sourceProperties.__version = source.version;
      if (texture2.onUpdate) texture2.onUpdate(texture2);
    }
    textureProperties.__version = texture2.version;
  }
  function uploadCubeTexture(textureProperties, texture2, slot) {
    if (texture2.image.length !== 6) return;
    const forceUpload = initTexture(textureProperties, texture2);
    const source = texture2.source;
    state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot);
    const sourceProperties = properties.get(source);
    if (source.version !== sourceProperties.__version || forceUpload === true) {
      state.activeTexture(_gl.TEXTURE0 + slot);
      const workingPrimaries = ColorManagement.getPrimaries(ColorManagement.workingColorSpace);
      const texturePrimaries = texture2.colorSpace === NoColorSpace ? null : ColorManagement.getPrimaries(texture2.colorSpace);
      const unpackConversion = texture2.colorSpace === NoColorSpace || workingPrimaries === texturePrimaries ? _gl.NONE : _gl.BROWSER_DEFAULT_WEBGL;
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, texture2.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture2.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, texture2.unpackAlignment);
      _gl.pixelStorei(_gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, unpackConversion);
      const isCompressed = texture2.isCompressedTexture || texture2.image[0].isCompressedTexture;
      const isDataTexture = texture2.image[0] && texture2.image[0].isDataTexture;
      const cubeImage = [];
      for (let i2 = 0; i2 < 6; i2++) {
        if (!isCompressed && !isDataTexture) {
          cubeImage[i2] = resizeImage(texture2.image[i2], true, capabilities.maxCubemapSize);
        } else {
          cubeImage[i2] = isDataTexture ? texture2.image[i2].image : texture2.image[i2];
        }
        cubeImage[i2] = verifyColorSpace(texture2, cubeImage[i2]);
      }
      const image = cubeImage[0], glFormat = utils.convert(texture2.format, texture2.colorSpace), glType = utils.convert(texture2.type), glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace);
      const useTexStorage = texture2.isVideoTexture !== true;
      const allocateMemory = sourceProperties.__version === void 0 || forceUpload === true;
      const dataReady = source.dataReady;
      let levels = getMipLevels(texture2, image);
      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture2);
      let mipmaps;
      if (isCompressed) {
        if (useTexStorage && allocateMemory) {
          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height);
        }
        for (let i2 = 0; i2 < 6; i2++) {
          mipmaps = cubeImage[i2].mipmaps;
          for (let j2 = 0; j2 < mipmaps.length; j2++) {
            const mipmap = mipmaps[j2];
            if (texture2.format !== RGBAFormat) {
              if (glFormat !== null) {
                if (useTexStorage) {
                  if (dataReady) {
                    state.compressedTexSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
                  }
                } else {
                  state.compressedTexImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data);
                }
              } else {
                console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()");
              }
            } else {
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data);
              }
            }
          }
        }
      } else {
        mipmaps = texture2.mipmaps;
        if (useTexStorage && allocateMemory) {
          if (mipmaps.length > 0) levels++;
          const dimensions = getDimensions(cubeImage[0]);
          state.texStorage2D(_gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, dimensions.width, dimensions.height);
        }
        for (let i2 = 0; i2 < 6; i2++) {
          if (isDataTexture) {
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, 0, 0, cubeImage[i2].width, cubeImage[i2].height, glFormat, glType, cubeImage[i2].data);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, glInternalFormat, cubeImage[i2].width, cubeImage[i2].height, 0, glFormat, glType, cubeImage[i2].data);
            }
            for (let j2 = 0; j2 < mipmaps.length; j2++) {
              const mipmap = mipmaps[j2];
              const mipmapImage = mipmap.image[i2].image;
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2 + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2 + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data);
              }
            }
          } else {
            if (useTexStorage) {
              if (dataReady) {
                state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, 0, 0, glFormat, glType, cubeImage[i2]);
              }
            } else {
              state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, glInternalFormat, glFormat, glType, cubeImage[i2]);
            }
            for (let j2 = 0; j2 < mipmaps.length; j2++) {
              const mipmap = mipmaps[j2];
              if (useTexStorage) {
                if (dataReady) {
                  state.texSubImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2 + 1, 0, 0, glFormat, glType, mipmap.image[i2]);
                }
              } else {
                state.texImage2D(_gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, j2 + 1, glInternalFormat, glFormat, glType, mipmap.image[i2]);
              }
            }
          }
        }
      }
      if (textureNeedsGenerateMipmaps(texture2)) {
        generateMipmap(_gl.TEXTURE_CUBE_MAP);
      }
      sourceProperties.__version = source.version;
      if (texture2.onUpdate) texture2.onUpdate(texture2);
    }
    textureProperties.__version = texture2.version;
  }
  function setupFrameBufferTexture(framebuffer, renderTarget, texture2, attachment, textureTarget, level) {
    const glFormat = utils.convert(texture2.format, texture2.colorSpace);
    const glType = utils.convert(texture2.type);
    const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace);
    const renderTargetProperties = properties.get(renderTarget);
    if (!renderTargetProperties.__hasExternalTextures) {
      const width = Math.max(1, renderTarget.width >> level);
      const height = Math.max(1, renderTarget.height >> level);
      if (textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY) {
        state.texImage3D(textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null);
      } else {
        state.texImage2D(textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null);
      }
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    if (useMultisampledRTT(renderTarget)) {
      multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture2).__webglTexture, 0, getRenderTargetSamples(renderTarget));
    } else if (textureTarget === _gl.TEXTURE_2D || textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z) {
      _gl.framebufferTexture2D(_gl.FRAMEBUFFER, attachment, textureTarget, properties.get(texture2).__webglTexture, level);
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
  }
  function setupRenderBufferStorage(renderbuffer, renderTarget, isMultisample) {
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
    if (renderTarget.depthBuffer) {
      const depthTexture = renderTarget.depthTexture;
      const depthType = depthTexture && depthTexture.isDepthTexture ? depthTexture.type : null;
      const glInternalFormat = getInternalDepthFormat(renderTarget.stencilBuffer, depthType);
      const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
      const samples = getRenderTargetSamples(renderTarget);
      const isUseMultisampledRTT = useMultisampledRTT(renderTarget);
      if (isUseMultisampledRTT) {
        multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else if (isMultisample) {
        _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
      } else {
        _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
      }
      _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
    } else {
      const textures = renderTarget.textures;
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture2 = textures[i2];
        const glFormat = utils.convert(texture2.format, texture2.colorSpace);
        const glType = utils.convert(texture2.type);
        const glInternalFormat = getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace);
        const samples = getRenderTargetSamples(renderTarget);
        if (isMultisample && useMultisampledRTT(renderTarget) === false) {
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else if (useMultisampledRTT(renderTarget)) {
          multisampledRTTExt.renderbufferStorageMultisampleEXT(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
        } else {
          _gl.renderbufferStorage(_gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height);
        }
      }
    }
    _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
  }
  function setupDepthTexture(framebuffer, renderTarget) {
    const isCube = renderTarget && renderTarget.isWebGLCubeRenderTarget;
    if (isCube) throw new Error("Depth Texture with cube render targets is not supported");
    state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
    if (!(renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture)) {
      throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");
    }
    if (!properties.get(renderTarget.depthTexture).__webglTexture || renderTarget.depthTexture.image.width !== renderTarget.width || renderTarget.depthTexture.image.height !== renderTarget.height) {
      renderTarget.depthTexture.image.width = renderTarget.width;
      renderTarget.depthTexture.image.height = renderTarget.height;
      renderTarget.depthTexture.needsUpdate = true;
    }
    setTexture2D(renderTarget.depthTexture, 0);
    const webglDepthTexture = properties.get(renderTarget.depthTexture).__webglTexture;
    const samples = getRenderTargetSamples(renderTarget);
    if (renderTarget.depthTexture.format === DepthFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
      }
    } else if (renderTarget.depthTexture.format === DepthStencilFormat) {
      if (useMultisampledRTT(renderTarget)) {
        multisampledRTTExt.framebufferTexture2DMultisampleEXT(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples);
      } else {
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0);
      }
    } else {
      throw new Error("Unknown depthTexture format");
    }
  }
  function setupDepthRenderbuffer(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    if (renderTargetProperties.__boundDepthTexture !== renderTarget.depthTexture) {
      const depthTexture = renderTarget.depthTexture;
      if (renderTargetProperties.__depthDisposeCallback) {
        renderTargetProperties.__depthDisposeCallback();
      }
      if (depthTexture) {
        const disposeEvent = () => {
          delete renderTargetProperties.__boundDepthTexture;
          delete renderTargetProperties.__depthDisposeCallback;
          depthTexture.removeEventListener("dispose", disposeEvent);
        };
        depthTexture.addEventListener("dispose", disposeEvent);
        renderTargetProperties.__depthDisposeCallback = disposeEvent;
      }
      renderTargetProperties.__boundDepthTexture = depthTexture;
    }
    if (renderTarget.depthTexture && !renderTargetProperties.__autoAllocateDepthBuffer) {
      if (isCube) throw new Error("target.depthTexture not supported in Cube render targets");
      setupDepthTexture(renderTargetProperties.__webglFramebuffer, renderTarget);
    } else {
      if (isCube) {
        renderTargetProperties.__webglDepthbuffer = [];
        for (let i2 = 0; i2 < 6; i2++) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[i2]);
          if (renderTargetProperties.__webglDepthbuffer[i2] === void 0) {
            renderTargetProperties.__webglDepthbuffer[i2] = _gl.createRenderbuffer();
            setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer[i2], renderTarget, false);
          } else {
            const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
            const renderbuffer = renderTargetProperties.__webglDepthbuffer[i2];
            _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
          }
        }
      } else {
        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        if (renderTargetProperties.__webglDepthbuffer === void 0) {
          renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthbuffer, renderTarget, false);
        } else {
          const glAttachmentType = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          const renderbuffer = renderTargetProperties.__webglDepthbuffer;
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderbuffer);
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, glAttachmentType, _gl.RENDERBUFFER, renderbuffer);
        }
      }
    }
    state.bindFramebuffer(_gl.FRAMEBUFFER, null);
  }
  function rebindTextures(renderTarget, colorTexture, depthTexture) {
    const renderTargetProperties = properties.get(renderTarget);
    if (colorTexture !== void 0) {
      setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0);
    }
    if (depthTexture !== void 0) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function setupRenderTarget(renderTarget) {
    const texture2 = renderTarget.texture;
    const renderTargetProperties = properties.get(renderTarget);
    const textureProperties = properties.get(texture2);
    renderTarget.addEventListener("dispose", onRenderTargetDispose);
    const textures = renderTarget.textures;
    const isCube = renderTarget.isWebGLCubeRenderTarget === true;
    const isMultipleRenderTargets = textures.length > 1;
    if (!isMultipleRenderTargets) {
      if (textureProperties.__webglTexture === void 0) {
        textureProperties.__webglTexture = _gl.createTexture();
      }
      textureProperties.__version = texture2.version;
      info.memory.textures++;
    }
    if (isCube) {
      renderTargetProperties.__webglFramebuffer = [];
      for (let i2 = 0; i2 < 6; i2++) {
        if (texture2.mipmaps && texture2.mipmaps.length > 0) {
          renderTargetProperties.__webglFramebuffer[i2] = [];
          for (let level = 0; level < texture2.mipmaps.length; level++) {
            renderTargetProperties.__webglFramebuffer[i2][level] = _gl.createFramebuffer();
          }
        } else {
          renderTargetProperties.__webglFramebuffer[i2] = _gl.createFramebuffer();
        }
      }
    } else {
      if (texture2.mipmaps && texture2.mipmaps.length > 0) {
        renderTargetProperties.__webglFramebuffer = [];
        for (let level = 0; level < texture2.mipmaps.length; level++) {
          renderTargetProperties.__webglFramebuffer[level] = _gl.createFramebuffer();
        }
      } else {
        renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();
      }
      if (isMultipleRenderTargets) {
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          const attachmentProperties = properties.get(textures[i2]);
          if (attachmentProperties.__webglTexture === void 0) {
            attachmentProperties.__webglTexture = _gl.createTexture();
            info.memory.textures++;
          }
        }
      }
      if (renderTarget.samples > 0 && useMultisampledRTT(renderTarget) === false) {
        renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
        renderTargetProperties.__webglColorRenderbuffer = [];
        state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        for (let i2 = 0; i2 < textures.length; i2++) {
          const texture3 = textures[i2];
          renderTargetProperties.__webglColorRenderbuffer[i2] = _gl.createRenderbuffer();
          _gl.bindRenderbuffer(_gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
          const glFormat = utils.convert(texture3.format, texture3.colorSpace);
          const glType = utils.convert(texture3.type);
          const glInternalFormat = getInternalFormat(texture3.internalFormat, glFormat, glType, texture3.colorSpace, renderTarget.isXRRenderTarget === true);
          const samples = getRenderTargetSamples(renderTarget);
          _gl.renderbufferStorageMultisample(_gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height);
          _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
        }
        _gl.bindRenderbuffer(_gl.RENDERBUFFER, null);
        if (renderTarget.depthBuffer) {
          renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
          setupRenderBufferStorage(renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true);
        }
        state.bindFramebuffer(_gl.FRAMEBUFFER, null);
      }
    }
    if (isCube) {
      state.bindTexture(_gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture);
      setTextureParameters(_gl.TEXTURE_CUBE_MAP, texture2);
      for (let i2 = 0; i2 < 6; i2++) {
        if (texture2.mipmaps && texture2.mipmaps.length > 0) {
          for (let level = 0; level < texture2.mipmaps.length; level++) {
            setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2][level], renderTarget, texture2, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, level);
          }
        } else {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[i2], renderTarget, texture2, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0);
        }
      }
      if (textureNeedsGenerateMipmaps(texture2)) {
        generateMipmap(_gl.TEXTURE_CUBE_MAP);
      }
      state.unbindTexture();
    } else if (isMultipleRenderTargets) {
      for (let i2 = 0, il = textures.length; i2 < il; i2++) {
        const attachment = textures[i2];
        const attachmentProperties = properties.get(attachment);
        state.bindTexture(_gl.TEXTURE_2D, attachmentProperties.__webglTexture);
        setTextureParameters(_gl.TEXTURE_2D, attachment);
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i2, _gl.TEXTURE_2D, 0);
        if (textureNeedsGenerateMipmaps(attachment)) {
          generateMipmap(_gl.TEXTURE_2D);
        }
      }
      state.unbindTexture();
    } else {
      let glTextureType = _gl.TEXTURE_2D;
      if (renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget) {
        glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;
      }
      state.bindTexture(glTextureType, textureProperties.__webglTexture);
      setTextureParameters(glTextureType, texture2);
      if (texture2.mipmaps && texture2.mipmaps.length > 0) {
        for (let level = 0; level < texture2.mipmaps.length; level++) {
          setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer[level], renderTarget, texture2, _gl.COLOR_ATTACHMENT0, glTextureType, level);
        }
      } else {
        setupFrameBufferTexture(renderTargetProperties.__webglFramebuffer, renderTarget, texture2, _gl.COLOR_ATTACHMENT0, glTextureType, 0);
      }
      if (textureNeedsGenerateMipmaps(texture2)) {
        generateMipmap(glTextureType);
      }
      state.unbindTexture();
    }
    if (renderTarget.depthBuffer) {
      setupDepthRenderbuffer(renderTarget);
    }
  }
  function updateRenderTargetMipmap(renderTarget) {
    const textures = renderTarget.textures;
    for (let i2 = 0, il = textures.length; i2 < il; i2++) {
      const texture2 = textures[i2];
      if (textureNeedsGenerateMipmaps(texture2)) {
        const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
        const webglTexture = properties.get(texture2).__webglTexture;
        state.bindTexture(target, webglTexture);
        generateMipmap(target);
        state.unbindTexture();
      }
    }
  }
  const invalidationArrayRead = [];
  const invalidationArrayDraw = [];
  function updateMultisampleRenderTarget(renderTarget) {
    if (renderTarget.samples > 0) {
      if (useMultisampledRTT(renderTarget) === false) {
        const textures = renderTarget.textures;
        const width = renderTarget.width;
        const height = renderTarget.height;
        let mask = _gl.COLOR_BUFFER_BIT;
        const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
        const renderTargetProperties = properties.get(renderTarget);
        const isMultipleRenderTargets = textures.length > 1;
        if (isMultipleRenderTargets) {
          for (let i2 = 0; i2 < textures.length; i2++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.RENDERBUFFER, null);
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.TEXTURE_2D, null, 0);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
        for (let i2 = 0; i2 < textures.length; i2++) {
          if (renderTarget.resolveDepthBuffer) {
            if (renderTarget.depthBuffer) mask |= _gl.DEPTH_BUFFER_BIT;
            if (renderTarget.stencilBuffer && renderTarget.resolveStencilBuffer) mask |= _gl.STENCIL_BUFFER_BIT;
          }
          if (isMultipleRenderTargets) {
            _gl.framebufferRenderbuffer(_gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
            const webglTexture = properties.get(textures[i2]).__webglTexture;
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0);
          }
          _gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST);
          if (supportsInvalidateFramebuffer === true) {
            invalidationArrayRead.length = 0;
            invalidationArrayDraw.length = 0;
            invalidationArrayRead.push(_gl.COLOR_ATTACHMENT0 + i2);
            if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false) {
              invalidationArrayRead.push(depthStyle);
              invalidationArrayDraw.push(depthStyle);
              _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, invalidationArrayDraw);
            }
            _gl.invalidateFramebuffer(_gl.READ_FRAMEBUFFER, invalidationArrayRead);
          }
        }
        state.bindFramebuffer(_gl.READ_FRAMEBUFFER, null);
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, null);
        if (isMultipleRenderTargets) {
          for (let i2 = 0; i2 < textures.length; i2++) {
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
            _gl.framebufferRenderbuffer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[i2]);
            const webglTexture = properties.get(textures[i2]).__webglTexture;
            state.bindFramebuffer(_gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer);
            _gl.framebufferTexture2D(_gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i2, _gl.TEXTURE_2D, webglTexture, 0);
          }
        }
        state.bindFramebuffer(_gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer);
      } else {
        if (renderTarget.depthBuffer && renderTarget.resolveDepthBuffer === false && supportsInvalidateFramebuffer) {
          const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
          _gl.invalidateFramebuffer(_gl.DRAW_FRAMEBUFFER, [depthStyle]);
        }
      }
    }
  }
  function getRenderTargetSamples(renderTarget) {
    return Math.min(capabilities.maxSamples, renderTarget.samples);
  }
  function useMultisampledRTT(renderTarget) {
    const renderTargetProperties = properties.get(renderTarget);
    return renderTarget.samples > 0 && extensions.has("WEBGL_multisampled_render_to_texture") === true && renderTargetProperties.__useRenderToTexture !== false;
  }
  function updateVideoTexture(texture2) {
    const frame = info.render.frame;
    if (_videoTextures.get(texture2) !== frame) {
      _videoTextures.set(texture2, frame);
      texture2.update();
    }
  }
  function verifyColorSpace(texture2, image) {
    const colorSpace = texture2.colorSpace;
    const format3 = texture2.format;
    const type = texture2.type;
    if (texture2.isCompressedTexture === true || texture2.isVideoTexture === true) return image;
    if (colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace) {
      if (ColorManagement.getTransfer(colorSpace) === SRGBTransfer) {
        if (format3 !== RGBAFormat || type !== UnsignedByteType) {
          console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.");
        }
      } else {
        console.error("THREE.WebGLTextures: Unsupported texture color space:", colorSpace);
      }
    }
    return image;
  }
  function getDimensions(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement) {
      _imageDimensions.width = image.naturalWidth || image.width;
      _imageDimensions.height = image.naturalHeight || image.height;
    } else if (typeof VideoFrame !== "undefined" && image instanceof VideoFrame) {
      _imageDimensions.width = image.displayWidth;
      _imageDimensions.height = image.displayHeight;
    } else {
      _imageDimensions.width = image.width;
      _imageDimensions.height = image.height;
    }
    return _imageDimensions;
  }
  this.allocateTextureUnit = allocateTextureUnit;
  this.resetTextureUnits = resetTextureUnits;
  this.setTexture2D = setTexture2D;
  this.setTexture2DArray = setTexture2DArray;
  this.setTexture3D = setTexture3D;
  this.setTextureCube = setTextureCube;
  this.rebindTextures = rebindTextures;
  this.setupRenderTarget = setupRenderTarget;
  this.updateRenderTargetMipmap = updateRenderTargetMipmap;
  this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
  this.setupDepthRenderbuffer = setupDepthRenderbuffer;
  this.setupFrameBufferTexture = setupFrameBufferTexture;
  this.useMultisampledRTT = useMultisampledRTT;
}
function WebGLUtils(gl, extensions) {
  function convert2(p2, colorSpace = NoColorSpace) {
    let extension;
    const transfer = ColorManagement.getTransfer(colorSpace);
    if (p2 === UnsignedByteType) return gl.UNSIGNED_BYTE;
    if (p2 === UnsignedShort4444Type) return gl.UNSIGNED_SHORT_4_4_4_4;
    if (p2 === UnsignedShort5551Type) return gl.UNSIGNED_SHORT_5_5_5_1;
    if (p2 === UnsignedInt5999Type) return gl.UNSIGNED_INT_5_9_9_9_REV;
    if (p2 === ByteType) return gl.BYTE;
    if (p2 === ShortType) return gl.SHORT;
    if (p2 === UnsignedShortType) return gl.UNSIGNED_SHORT;
    if (p2 === IntType) return gl.INT;
    if (p2 === UnsignedIntType) return gl.UNSIGNED_INT;
    if (p2 === FloatType) return gl.FLOAT;
    if (p2 === HalfFloatType) return gl.HALF_FLOAT;
    if (p2 === AlphaFormat) return gl.ALPHA;
    if (p2 === RGBFormat) return gl.RGB;
    if (p2 === RGBAFormat) return gl.RGBA;
    if (p2 === LuminanceFormat) return gl.LUMINANCE;
    if (p2 === LuminanceAlphaFormat) return gl.LUMINANCE_ALPHA;
    if (p2 === DepthFormat) return gl.DEPTH_COMPONENT;
    if (p2 === DepthStencilFormat) return gl.DEPTH_STENCIL;
    if (p2 === RedFormat) return gl.RED;
    if (p2 === RedIntegerFormat) return gl.RED_INTEGER;
    if (p2 === RGFormat) return gl.RG;
    if (p2 === RGIntegerFormat) return gl.RG_INTEGER;
    if (p2 === RGBAIntegerFormat) return gl.RGBA_INTEGER;
    if (p2 === RGB_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT1_Format || p2 === RGBA_S3TC_DXT3_Format || p2 === RGBA_S3TC_DXT5_Format) {
      if (transfer === SRGBTransfer) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    }
    if (p2 === RGB_PVRTC_4BPPV1_Format || p2 === RGB_PVRTC_2BPPV1_Format || p2 === RGBA_PVRTC_4BPPV1_Format || p2 === RGBA_PVRTC_2BPPV1_Format) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p2 === RGB_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p2 === RGB_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p2 === RGBA_PVRTC_4BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p2 === RGBA_PVRTC_2BPPV1_Format) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p2 === RGB_ETC1_Format || p2 === RGB_ETC2_Format || p2 === RGBA_ETC2_EAC_Format) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p2 === RGB_ETC1_Format || p2 === RGB_ETC2_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
        if (p2 === RGBA_ETC2_EAC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_ASTC_4x4_Format || p2 === RGBA_ASTC_5x4_Format || p2 === RGBA_ASTC_5x5_Format || p2 === RGBA_ASTC_6x5_Format || p2 === RGBA_ASTC_6x6_Format || p2 === RGBA_ASTC_8x5_Format || p2 === RGBA_ASTC_8x6_Format || p2 === RGBA_ASTC_8x8_Format || p2 === RGBA_ASTC_10x5_Format || p2 === RGBA_ASTC_10x6_Format || p2 === RGBA_ASTC_10x8_Format || p2 === RGBA_ASTC_10x10_Format || p2 === RGBA_ASTC_12x10_Format || p2 === RGBA_ASTC_12x12_Format) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        if (p2 === RGBA_ASTC_4x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (p2 === RGBA_ASTC_5x4_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (p2 === RGBA_ASTC_5x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (p2 === RGBA_ASTC_6x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (p2 === RGBA_ASTC_6x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (p2 === RGBA_ASTC_8x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (p2 === RGBA_ASTC_8x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (p2 === RGBA_ASTC_8x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (p2 === RGBA_ASTC_10x5_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (p2 === RGBA_ASTC_10x6_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (p2 === RGBA_ASTC_10x8_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (p2 === RGBA_ASTC_10x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (p2 === RGBA_ASTC_12x10_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (p2 === RGBA_ASTC_12x12_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_BPTC_Format || p2 === RGB_BPTC_SIGNED_Format || p2 === RGB_BPTC_UNSIGNED_Format) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format) return transfer === SRGBTransfer ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
        if (p2 === RGB_BPTC_SIGNED_Format) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
        if (p2 === RGB_BPTC_UNSIGNED_Format) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;
      } else {
        return null;
      }
    }
    if (p2 === RED_RGTC1_Format || p2 === SIGNED_RED_RGTC1_Format || p2 === RED_GREEN_RGTC2_Format || p2 === SIGNED_RED_GREEN_RGTC2_Format) {
      extension = extensions.get("EXT_texture_compression_rgtc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format) return extension.COMPRESSED_RED_RGTC1_EXT;
        if (p2 === SIGNED_RED_RGTC1_Format) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (p2 === RED_GREEN_RGTC2_Format) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (p2 === SIGNED_RED_GREEN_RGTC2_Format) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else {
        return null;
      }
    }
    if (p2 === UnsignedInt248Type) return gl.UNSIGNED_INT_24_8;
    return gl[p2] !== void 0 ? gl[p2] : null;
  }
  return { convert: convert2 };
}
var ArrayCamera = class extends PerspectiveCamera {
  constructor(array3 = []) {
    super();
    this.isArrayCamera = true;
    this.cameras = array3;
  }
};
var Group = class extends Object3D {
  constructor() {
    super();
    this.isGroup = true;
    this.type = "Group";
  }
};
var _moveEvent = { type: "move" };
var WebXRController = class {
  constructor() {
    this._targetRay = null;
    this._grip = null;
    this._hand = null;
  }
  getHandSpace() {
    if (this._hand === null) {
      this._hand = new Group();
      this._hand.matrixAutoUpdate = false;
      this._hand.visible = false;
      this._hand.joints = {};
      this._hand.inputState = { pinching: false };
    }
    return this._hand;
  }
  getTargetRaySpace() {
    if (this._targetRay === null) {
      this._targetRay = new Group();
      this._targetRay.matrixAutoUpdate = false;
      this._targetRay.visible = false;
      this._targetRay.hasLinearVelocity = false;
      this._targetRay.linearVelocity = new Vector3();
      this._targetRay.hasAngularVelocity = false;
      this._targetRay.angularVelocity = new Vector3();
    }
    return this._targetRay;
  }
  getGripSpace() {
    if (this._grip === null) {
      this._grip = new Group();
      this._grip.matrixAutoUpdate = false;
      this._grip.visible = false;
      this._grip.hasLinearVelocity = false;
      this._grip.linearVelocity = new Vector3();
      this._grip.hasAngularVelocity = false;
      this._grip.angularVelocity = new Vector3();
    }
    return this._grip;
  }
  dispatchEvent(event) {
    if (this._targetRay !== null) {
      this._targetRay.dispatchEvent(event);
    }
    if (this._grip !== null) {
      this._grip.dispatchEvent(event);
    }
    if (this._hand !== null) {
      this._hand.dispatchEvent(event);
    }
    return this;
  }
  connect(inputSource) {
    if (inputSource && inputSource.hand) {
      const hand = this._hand;
      if (hand) {
        for (const inputjoint of inputSource.hand.values()) {
          this._getHandJoint(hand, inputjoint);
        }
      }
    }
    this.dispatchEvent({ type: "connected", data: inputSource });
    return this;
  }
  disconnect(inputSource) {
    this.dispatchEvent({ type: "disconnected", data: inputSource });
    if (this._targetRay !== null) {
      this._targetRay.visible = false;
    }
    if (this._grip !== null) {
      this._grip.visible = false;
    }
    if (this._hand !== null) {
      this._hand.visible = false;
    }
    return this;
  }
  update(inputSource, frame, referenceSpace) {
    let inputPose = null;
    let gripPose = null;
    let handPose = null;
    const targetRay = this._targetRay;
    const grip = this._grip;
    const hand = this._hand;
    if (inputSource && frame.session.visibilityState !== "visible-blurred") {
      if (hand && inputSource.hand) {
        handPose = true;
        for (const inputjoint of inputSource.hand.values()) {
          const jointPose = frame.getJointPose(inputjoint, referenceSpace);
          const joint = this._getHandJoint(hand, inputjoint);
          if (jointPose !== null) {
            joint.matrix.fromArray(jointPose.transform.matrix);
            joint.matrix.decompose(joint.position, joint.rotation, joint.scale);
            joint.matrixWorldNeedsUpdate = true;
            joint.jointRadius = jointPose.radius;
          }
          joint.visible = jointPose !== null;
        }
        const indexTip = hand.joints["index-finger-tip"];
        const thumbTip = hand.joints["thumb-tip"];
        const distance3 = indexTip.position.distanceTo(thumbTip.position);
        const distanceToPinch = 0.02;
        const threshold2 = 5e-3;
        if (hand.inputState.pinching && distance3 > distanceToPinch + threshold2) {
          hand.inputState.pinching = false;
          this.dispatchEvent({
            type: "pinchend",
            handedness: inputSource.handedness,
            target: this
          });
        } else if (!hand.inputState.pinching && distance3 <= distanceToPinch - threshold2) {
          hand.inputState.pinching = true;
          this.dispatchEvent({
            type: "pinchstart",
            handedness: inputSource.handedness,
            target: this
          });
        }
      } else {
        if (grip !== null && inputSource.gripSpace) {
          gripPose = frame.getPose(inputSource.gripSpace, referenceSpace);
          if (gripPose !== null) {
            grip.matrix.fromArray(gripPose.transform.matrix);
            grip.matrix.decompose(grip.position, grip.rotation, grip.scale);
            grip.matrixWorldNeedsUpdate = true;
            if (gripPose.linearVelocity) {
              grip.hasLinearVelocity = true;
              grip.linearVelocity.copy(gripPose.linearVelocity);
            } else {
              grip.hasLinearVelocity = false;
            }
            if (gripPose.angularVelocity) {
              grip.hasAngularVelocity = true;
              grip.angularVelocity.copy(gripPose.angularVelocity);
            } else {
              grip.hasAngularVelocity = false;
            }
          }
        }
      }
      if (targetRay !== null) {
        inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);
        if (inputPose === null && gripPose !== null) {
          inputPose = gripPose;
        }
        if (inputPose !== null) {
          targetRay.matrix.fromArray(inputPose.transform.matrix);
          targetRay.matrix.decompose(targetRay.position, targetRay.rotation, targetRay.scale);
          targetRay.matrixWorldNeedsUpdate = true;
          if (inputPose.linearVelocity) {
            targetRay.hasLinearVelocity = true;
            targetRay.linearVelocity.copy(inputPose.linearVelocity);
          } else {
            targetRay.hasLinearVelocity = false;
          }
          if (inputPose.angularVelocity) {
            targetRay.hasAngularVelocity = true;
            targetRay.angularVelocity.copy(inputPose.angularVelocity);
          } else {
            targetRay.hasAngularVelocity = false;
          }
          this.dispatchEvent(_moveEvent);
        }
      }
    }
    if (targetRay !== null) {
      targetRay.visible = inputPose !== null;
    }
    if (grip !== null) {
      grip.visible = gripPose !== null;
    }
    if (hand !== null) {
      hand.visible = handPose !== null;
    }
    return this;
  }
  // private method
  _getHandJoint(hand, inputjoint) {
    if (hand.joints[inputjoint.jointName] === void 0) {
      const joint = new Group();
      joint.matrixAutoUpdate = false;
      joint.visible = false;
      hand.joints[inputjoint.jointName] = joint;
      hand.add(joint);
    }
    return hand.joints[inputjoint.jointName];
  }
};
var _occlusion_vertex = `
void main() {

	gl_Position = vec4( position, 1.0 );

}`;
var _occlusion_fragment = `
uniform sampler2DArray depthColor;
uniform float depthWidth;
uniform float depthHeight;

void main() {

	vec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );

	if ( coord.x >= 1.0 ) {

		gl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;

	} else {

		gl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;

	}

}`;
var WebXRDepthSensing = class {
  constructor() {
    this.texture = null;
    this.mesh = null;
    this.depthNear = 0;
    this.depthFar = 0;
  }
  init(renderer3, depthData, renderState) {
    if (this.texture === null) {
      const texture2 = new Texture();
      const texProps = renderer3.properties.get(texture2);
      texProps.__webglTexture = depthData.texture;
      if (depthData.depthNear != renderState.depthNear || depthData.depthFar != renderState.depthFar) {
        this.depthNear = depthData.depthNear;
        this.depthFar = depthData.depthFar;
      }
      this.texture = texture2;
    }
  }
  getMesh(cameraXR) {
    if (this.texture !== null) {
      if (this.mesh === null) {
        const viewport2 = cameraXR.cameras[0].viewport;
        const material = new ShaderMaterial({
          vertexShader: _occlusion_vertex,
          fragmentShader: _occlusion_fragment,
          uniforms: {
            depthColor: { value: this.texture },
            depthWidth: { value: viewport2.z },
            depthHeight: { value: viewport2.w }
          }
        });
        this.mesh = new Mesh(new PlaneGeometry(20, 20), material);
      }
    }
    return this.mesh;
  }
  reset() {
    this.texture = null;
    this.mesh = null;
  }
  getDepthTexture() {
    return this.texture;
  }
};
var WebXRManager = class extends EventDispatcher {
  constructor(renderer3, gl) {
    super();
    const scope = this;
    let session = null;
    let framebufferScaleFactor = 1;
    let referenceSpace = null;
    let referenceSpaceType = "local-floor";
    let foveation = 1;
    let customReferenceSpace = null;
    let pose = null;
    let glBinding = null;
    let glProjLayer = null;
    let glBaseLayer = null;
    let xrFrame = null;
    const depthSensing = new WebXRDepthSensing();
    const attributes = gl.getContextAttributes();
    let initialRenderTarget = null;
    let newRenderTarget = null;
    const controllers = [];
    const controllerInputSources = [];
    const currentSize = new Vector2();
    let currentPixelRatio = null;
    const cameraL = new PerspectiveCamera();
    cameraL.layers.enable(1);
    cameraL.viewport = new Vector4();
    const cameraR = new PerspectiveCamera();
    cameraR.layers.enable(2);
    cameraR.viewport = new Vector4();
    const cameras = [cameraL, cameraR];
    const cameraXR = new ArrayCamera();
    cameraXR.layers.enable(1);
    cameraXR.layers.enable(2);
    let _currentDepthNear = null;
    let _currentDepthFar = null;
    this.cameraAutoUpdate = true;
    this.enabled = false;
    this.isPresenting = false;
    this.getController = function(index7) {
      let controller = controllers[index7];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index7] = controller;
      }
      return controller.getTargetRaySpace();
    };
    this.getControllerGrip = function(index7) {
      let controller = controllers[index7];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index7] = controller;
      }
      return controller.getGripSpace();
    };
    this.getHand = function(index7) {
      let controller = controllers[index7];
      if (controller === void 0) {
        controller = new WebXRController();
        controllers[index7] = controller;
      }
      return controller.getHandSpace();
    };
    function onSessionEvent(event) {
      const controllerIndex = controllerInputSources.indexOf(event.inputSource);
      if (controllerIndex === -1) {
        return;
      }
      const controller = controllers[controllerIndex];
      if (controller !== void 0) {
        controller.update(event.inputSource, event.frame, customReferenceSpace || referenceSpace);
        controller.dispatchEvent({ type: event.type, data: event.inputSource });
      }
    }
    function onSessionEnd() {
      session.removeEventListener("select", onSessionEvent);
      session.removeEventListener("selectstart", onSessionEvent);
      session.removeEventListener("selectend", onSessionEvent);
      session.removeEventListener("squeeze", onSessionEvent);
      session.removeEventListener("squeezestart", onSessionEvent);
      session.removeEventListener("squeezeend", onSessionEvent);
      session.removeEventListener("end", onSessionEnd);
      session.removeEventListener("inputsourceschange", onInputSourcesChange);
      for (let i2 = 0; i2 < controllers.length; i2++) {
        const inputSource = controllerInputSources[i2];
        if (inputSource === null) continue;
        controllerInputSources[i2] = null;
        controllers[i2].disconnect(inputSource);
      }
      _currentDepthNear = null;
      _currentDepthFar = null;
      depthSensing.reset();
      renderer3.setRenderTarget(initialRenderTarget);
      glBaseLayer = null;
      glProjLayer = null;
      glBinding = null;
      session = null;
      newRenderTarget = null;
      animation.stop();
      scope.isPresenting = false;
      renderer3.setPixelRatio(currentPixelRatio);
      renderer3.setSize(currentSize.width, currentSize.height, false);
      scope.dispatchEvent({ type: "sessionend" });
    }
    this.setFramebufferScaleFactor = function(value) {
      framebufferScaleFactor = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.");
      }
    };
    this.setReferenceSpaceType = function(value) {
      referenceSpaceType = value;
      if (scope.isPresenting === true) {
        console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.");
      }
    };
    this.getReferenceSpace = function() {
      return customReferenceSpace || referenceSpace;
    };
    this.setReferenceSpace = function(space) {
      customReferenceSpace = space;
    };
    this.getBaseLayer = function() {
      return glProjLayer !== null ? glProjLayer : glBaseLayer;
    };
    this.getBinding = function() {
      return glBinding;
    };
    this.getFrame = function() {
      return xrFrame;
    };
    this.getSession = function() {
      return session;
    };
    this.setSession = async function(value) {
      session = value;
      if (session !== null) {
        initialRenderTarget = renderer3.getRenderTarget();
        session.addEventListener("select", onSessionEvent);
        session.addEventListener("selectstart", onSessionEvent);
        session.addEventListener("selectend", onSessionEvent);
        session.addEventListener("squeeze", onSessionEvent);
        session.addEventListener("squeezestart", onSessionEvent);
        session.addEventListener("squeezeend", onSessionEvent);
        session.addEventListener("end", onSessionEnd);
        session.addEventListener("inputsourceschange", onInputSourcesChange);
        if (attributes.xrCompatible !== true) {
          await gl.makeXRCompatible();
        }
        currentPixelRatio = renderer3.getPixelRatio();
        renderer3.getSize(currentSize);
        if (session.renderState.layers === void 0) {
          const layerInit = {
            antialias: attributes.antialias,
            alpha: true,
            depth: attributes.depth,
            stencil: attributes.stencil,
            framebufferScaleFactor
          };
          glBaseLayer = new XRWebGLLayer(session, gl, layerInit);
          session.updateRenderState({ baseLayer: glBaseLayer });
          renderer3.setPixelRatio(1);
          renderer3.setSize(glBaseLayer.framebufferWidth, glBaseLayer.framebufferHeight, false);
          newRenderTarget = new WebGLRenderTarget(
            glBaseLayer.framebufferWidth,
            glBaseLayer.framebufferHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              colorSpace: renderer3.outputColorSpace,
              stencilBuffer: attributes.stencil
            }
          );
        } else {
          let depthFormat = null;
          let depthType = null;
          let glDepthFormat = null;
          if (attributes.depth) {
            glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
            depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
            depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;
          }
          const projectionlayerInit = {
            colorFormat: gl.RGBA8,
            depthFormat: glDepthFormat,
            scaleFactor: framebufferScaleFactor
          };
          glBinding = new XRWebGLBinding(session, gl);
          glProjLayer = glBinding.createProjectionLayer(projectionlayerInit);
          session.updateRenderState({ layers: [glProjLayer] });
          renderer3.setPixelRatio(1);
          renderer3.setSize(glProjLayer.textureWidth, glProjLayer.textureHeight, false);
          newRenderTarget = new WebGLRenderTarget(
            glProjLayer.textureWidth,
            glProjLayer.textureHeight,
            {
              format: RGBAFormat,
              type: UnsignedByteType,
              depthTexture: new DepthTexture(glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, void 0, void 0, void 0, void 0, void 0, void 0, depthFormat),
              stencilBuffer: attributes.stencil,
              colorSpace: renderer3.outputColorSpace,
              samples: attributes.antialias ? 4 : 0,
              resolveDepthBuffer: glProjLayer.ignoreDepthValues === false
            }
          );
        }
        newRenderTarget.isXRRenderTarget = true;
        this.setFoveation(foveation);
        customReferenceSpace = null;
        referenceSpace = await session.requestReferenceSpace(referenceSpaceType);
        animation.setContext(session);
        animation.start();
        scope.isPresenting = true;
        scope.dispatchEvent({ type: "sessionstart" });
      }
    };
    this.getEnvironmentBlendMode = function() {
      if (session !== null) {
        return session.environmentBlendMode;
      }
    };
    this.getDepthTexture = function() {
      return depthSensing.getDepthTexture();
    };
    function onInputSourcesChange(event) {
      for (let i2 = 0; i2 < event.removed.length; i2++) {
        const inputSource = event.removed[i2];
        const index7 = controllerInputSources.indexOf(inputSource);
        if (index7 >= 0) {
          controllerInputSources[index7] = null;
          controllers[index7].disconnect(inputSource);
        }
      }
      for (let i2 = 0; i2 < event.added.length; i2++) {
        const inputSource = event.added[i2];
        let controllerIndex = controllerInputSources.indexOf(inputSource);
        if (controllerIndex === -1) {
          for (let i3 = 0; i3 < controllers.length; i3++) {
            if (i3 >= controllerInputSources.length) {
              controllerInputSources.push(inputSource);
              controllerIndex = i3;
              break;
            } else if (controllerInputSources[i3] === null) {
              controllerInputSources[i3] = inputSource;
              controllerIndex = i3;
              break;
            }
          }
          if (controllerIndex === -1) break;
        }
        const controller = controllers[controllerIndex];
        if (controller) {
          controller.connect(inputSource);
        }
      }
    }
    const cameraLPos = new Vector3();
    const cameraRPos = new Vector3();
    function setProjectionFromUnion(camera3, cameraL2, cameraR2) {
      cameraLPos.setFromMatrixPosition(cameraL2.matrixWorld);
      cameraRPos.setFromMatrixPosition(cameraR2.matrixWorld);
      const ipd = cameraLPos.distanceTo(cameraRPos);
      const projL = cameraL2.projectionMatrix.elements;
      const projR = cameraR2.projectionMatrix.elements;
      const near = projL[14] / (projL[10] - 1);
      const far = projL[14] / (projL[10] + 1);
      const topFov = (projL[9] + 1) / projL[5];
      const bottomFov = (projL[9] - 1) / projL[5];
      const leftFov = (projL[8] - 1) / projL[0];
      const rightFov = (projR[8] + 1) / projR[0];
      const left = near * leftFov;
      const right = near * rightFov;
      const zOffset = ipd / (-leftFov + rightFov);
      const xOffset = zOffset * -leftFov;
      cameraL2.matrixWorld.decompose(camera3.position, camera3.quaternion, camera3.scale);
      camera3.translateX(xOffset);
      camera3.translateZ(zOffset);
      camera3.matrixWorld.compose(camera3.position, camera3.quaternion, camera3.scale);
      camera3.matrixWorldInverse.copy(camera3.matrixWorld).invert();
      if (projL[10] === -1) {
        camera3.projectionMatrix.copy(cameraL2.projectionMatrix);
        camera3.projectionMatrixInverse.copy(cameraL2.projectionMatrixInverse);
      } else {
        const near2 = near + zOffset;
        const far2 = far + zOffset;
        const left2 = left - xOffset;
        const right2 = right + (ipd - xOffset);
        const top2 = topFov * far / far2 * near2;
        const bottom2 = bottomFov * far / far2 * near2;
        camera3.projectionMatrix.makePerspective(left2, right2, top2, bottom2, near2, far2);
        camera3.projectionMatrixInverse.copy(camera3.projectionMatrix).invert();
      }
    }
    function updateCamera(camera3, parent2) {
      if (parent2 === null) {
        camera3.matrixWorld.copy(camera3.matrix);
      } else {
        camera3.matrixWorld.multiplyMatrices(parent2.matrixWorld, camera3.matrix);
      }
      camera3.matrixWorldInverse.copy(camera3.matrixWorld).invert();
    }
    this.updateCamera = function(camera3) {
      if (session === null) return;
      let depthNear = camera3.near;
      let depthFar = camera3.far;
      if (depthSensing.texture !== null) {
        if (depthSensing.depthNear > 0) depthNear = depthSensing.depthNear;
        if (depthSensing.depthFar > 0) depthFar = depthSensing.depthFar;
      }
      cameraXR.near = cameraR.near = cameraL.near = depthNear;
      cameraXR.far = cameraR.far = cameraL.far = depthFar;
      if (_currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far) {
        session.updateRenderState({
          depthNear: cameraXR.near,
          depthFar: cameraXR.far
        });
        _currentDepthNear = cameraXR.near;
        _currentDepthFar = cameraXR.far;
      }
      const parent2 = camera3.parent;
      const cameras2 = cameraXR.cameras;
      updateCamera(cameraXR, parent2);
      for (let i2 = 0; i2 < cameras2.length; i2++) {
        updateCamera(cameras2[i2], parent2);
      }
      if (cameras2.length === 2) {
        setProjectionFromUnion(cameraXR, cameraL, cameraR);
      } else {
        cameraXR.projectionMatrix.copy(cameraL.projectionMatrix);
      }
      updateUserCamera(camera3, cameraXR, parent2);
    };
    function updateUserCamera(camera3, cameraXR2, parent2) {
      if (parent2 === null) {
        camera3.matrix.copy(cameraXR2.matrixWorld);
      } else {
        camera3.matrix.copy(parent2.matrixWorld);
        camera3.matrix.invert();
        camera3.matrix.multiply(cameraXR2.matrixWorld);
      }
      camera3.matrix.decompose(camera3.position, camera3.quaternion, camera3.scale);
      camera3.updateMatrixWorld(true);
      camera3.projectionMatrix.copy(cameraXR2.projectionMatrix);
      camera3.projectionMatrixInverse.copy(cameraXR2.projectionMatrixInverse);
      if (camera3.isPerspectiveCamera) {
        camera3.fov = RAD2DEG * 2 * Math.atan(1 / camera3.projectionMatrix.elements[5]);
        camera3.zoom = 1;
      }
    }
    this.getCamera = function() {
      return cameraXR;
    };
    this.getFoveation = function() {
      if (glProjLayer === null && glBaseLayer === null) {
        return void 0;
      }
      return foveation;
    };
    this.setFoveation = function(value) {
      foveation = value;
      if (glProjLayer !== null) {
        glProjLayer.fixedFoveation = value;
      }
      if (glBaseLayer !== null && glBaseLayer.fixedFoveation !== void 0) {
        glBaseLayer.fixedFoveation = value;
      }
    };
    this.hasDepthSensing = function() {
      return depthSensing.texture !== null;
    };
    this.getDepthSensingMesh = function() {
      return depthSensing.getMesh(cameraXR);
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time2, frame) {
      pose = frame.getViewerPose(customReferenceSpace || referenceSpace);
      xrFrame = frame;
      if (pose !== null) {
        const views = pose.views;
        if (glBaseLayer !== null) {
          renderer3.setRenderTargetFramebuffer(newRenderTarget, glBaseLayer.framebuffer);
          renderer3.setRenderTarget(newRenderTarget);
        }
        let cameraXRNeedsUpdate = false;
        if (views.length !== cameraXR.cameras.length) {
          cameraXR.cameras.length = 0;
          cameraXRNeedsUpdate = true;
        }
        for (let i2 = 0; i2 < views.length; i2++) {
          const view = views[i2];
          let viewport2 = null;
          if (glBaseLayer !== null) {
            viewport2 = glBaseLayer.getViewport(view);
          } else {
            const glSubImage = glBinding.getViewSubImage(glProjLayer, view);
            viewport2 = glSubImage.viewport;
            if (i2 === 0) {
              renderer3.setRenderTargetTextures(
                newRenderTarget,
                glSubImage.colorTexture,
                glProjLayer.ignoreDepthValues ? void 0 : glSubImage.depthStencilTexture
              );
              renderer3.setRenderTarget(newRenderTarget);
            }
          }
          let camera3 = cameras[i2];
          if (camera3 === void 0) {
            camera3 = new PerspectiveCamera();
            camera3.layers.enable(i2);
            camera3.viewport = new Vector4();
            cameras[i2] = camera3;
          }
          camera3.matrix.fromArray(view.transform.matrix);
          camera3.matrix.decompose(camera3.position, camera3.quaternion, camera3.scale);
          camera3.projectionMatrix.fromArray(view.projectionMatrix);
          camera3.projectionMatrixInverse.copy(camera3.projectionMatrix).invert();
          camera3.viewport.set(viewport2.x, viewport2.y, viewport2.width, viewport2.height);
          if (i2 === 0) {
            cameraXR.matrix.copy(camera3.matrix);
            cameraXR.matrix.decompose(cameraXR.position, cameraXR.quaternion, cameraXR.scale);
          }
          if (cameraXRNeedsUpdate === true) {
            cameraXR.cameras.push(camera3);
          }
        }
        const enabledFeatures = session.enabledFeatures;
        if (enabledFeatures && enabledFeatures.includes("depth-sensing")) {
          const depthData = glBinding.getDepthInformation(views[0]);
          if (depthData && depthData.isValid && depthData.texture) {
            depthSensing.init(renderer3, depthData, session.renderState);
          }
        }
      }
      for (let i2 = 0; i2 < controllers.length; i2++) {
        const inputSource = controllerInputSources[i2];
        const controller = controllers[i2];
        if (inputSource !== null && controller !== void 0) {
          controller.update(inputSource, frame, customReferenceSpace || referenceSpace);
        }
      }
      if (onAnimationFrameCallback) onAnimationFrameCallback(time2, frame);
      if (frame.detectedPlanes) {
        scope.dispatchEvent({ type: "planesdetected", data: frame });
      }
      xrFrame = null;
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
    };
    this.dispose = function() {
    };
  }
};
var _e1 = new Euler();
var _m1 = new Matrix4();
function WebGLMaterials(renderer3, properties) {
  function refreshTransformUniform(map4, uniform2) {
    if (map4.matrixAutoUpdate === true) {
      map4.updateMatrix();
    }
    uniform2.value.copy(map4.matrix);
  }
  function refreshFogUniforms(uniforms, fog2) {
    fog2.color.getRGB(uniforms.fogColor.value, getUnlitUniformColorSpace(renderer3));
    if (fog2.isFog) {
      uniforms.fogNear.value = fog2.near;
      uniforms.fogFar.value = fog2.far;
    } else if (fog2.isFogExp2) {
      uniforms.fogDensity.value = fog2.density;
    }
  }
  function refreshMaterialUniforms(uniforms, material, pixelRatio, height, transmissionRenderTarget) {
    if (material.isMeshBasicMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshLambertMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshToonMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsToon(uniforms, material);
    } else if (material.isMeshPhongMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsPhong(uniforms, material);
    } else if (material.isMeshStandardMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsStandard(uniforms, material);
      if (material.isMeshPhysicalMaterial) {
        refreshUniformsPhysical(uniforms, material, transmissionRenderTarget);
      }
    } else if (material.isMeshMatcapMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsMatcap(uniforms, material);
    } else if (material.isMeshDepthMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isMeshDistanceMaterial) {
      refreshUniformsCommon(uniforms, material);
      refreshUniformsDistance(uniforms, material);
    } else if (material.isMeshNormalMaterial) {
      refreshUniformsCommon(uniforms, material);
    } else if (material.isLineBasicMaterial) {
      refreshUniformsLine(uniforms, material);
      if (material.isLineDashedMaterial) {
        refreshUniformsDash(uniforms, material);
      }
    } else if (material.isPointsMaterial) {
      refreshUniformsPoints(uniforms, material, pixelRatio, height);
    } else if (material.isSpriteMaterial) {
      refreshUniformsSprites(uniforms, material);
    } else if (material.isShadowMaterial) {
      uniforms.color.value.copy(material.color);
      uniforms.opacity.value = material.opacity;
    } else if (material.isShaderMaterial) {
      material.uniformsNeedUpdate = false;
    }
  }
  function refreshUniformsCommon(uniforms, material) {
    uniforms.opacity.value = material.opacity;
    if (material.color) {
      uniforms.diffuse.value.copy(material.color);
    }
    if (material.emissive) {
      uniforms.emissive.value.copy(material.emissive).multiplyScalar(material.emissiveIntensity);
    }
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.mapTransform);
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
    }
    if (material.bumpMap) {
      uniforms.bumpMap.value = material.bumpMap;
      refreshTransformUniform(material.bumpMap, uniforms.bumpMapTransform);
      uniforms.bumpScale.value = material.bumpScale;
      if (material.side === BackSide) {
        uniforms.bumpScale.value *= -1;
      }
    }
    if (material.normalMap) {
      uniforms.normalMap.value = material.normalMap;
      refreshTransformUniform(material.normalMap, uniforms.normalMapTransform);
      uniforms.normalScale.value.copy(material.normalScale);
      if (material.side === BackSide) {
        uniforms.normalScale.value.negate();
      }
    }
    if (material.displacementMap) {
      uniforms.displacementMap.value = material.displacementMap;
      refreshTransformUniform(material.displacementMap, uniforms.displacementMapTransform);
      uniforms.displacementScale.value = material.displacementScale;
      uniforms.displacementBias.value = material.displacementBias;
    }
    if (material.emissiveMap) {
      uniforms.emissiveMap.value = material.emissiveMap;
      refreshTransformUniform(material.emissiveMap, uniforms.emissiveMapTransform);
    }
    if (material.specularMap) {
      uniforms.specularMap.value = material.specularMap;
      refreshTransformUniform(material.specularMap, uniforms.specularMapTransform);
    }
    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }
    const materialProperties = properties.get(material);
    const envMap = materialProperties.envMap;
    const envMapRotation = materialProperties.envMapRotation;
    if (envMap) {
      uniforms.envMap.value = envMap;
      _e1.copy(envMapRotation);
      _e1.x *= -1;
      _e1.y *= -1;
      _e1.z *= -1;
      if (envMap.isCubeTexture && envMap.isRenderTargetTexture === false) {
        _e1.y *= -1;
        _e1.z *= -1;
      }
      uniforms.envMapRotation.value.setFromMatrix4(_m1.makeRotationFromEuler(_e1));
      uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      uniforms.reflectivity.value = material.reflectivity;
      uniforms.ior.value = material.ior;
      uniforms.refractionRatio.value = material.refractionRatio;
    }
    if (material.lightMap) {
      uniforms.lightMap.value = material.lightMap;
      uniforms.lightMapIntensity.value = material.lightMapIntensity;
      refreshTransformUniform(material.lightMap, uniforms.lightMapTransform);
    }
    if (material.aoMap) {
      uniforms.aoMap.value = material.aoMap;
      uniforms.aoMapIntensity.value = material.aoMapIntensity;
      refreshTransformUniform(material.aoMap, uniforms.aoMapTransform);
    }
  }
  function refreshUniformsLine(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.mapTransform);
    }
  }
  function refreshUniformsDash(uniforms, material) {
    uniforms.dashSize.value = material.dashSize;
    uniforms.totalSize.value = material.dashSize + material.gapSize;
    uniforms.scale.value = material.scale;
  }
  function refreshUniformsPoints(uniforms, material, pixelRatio, height) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.size.value = material.size * pixelRatio;
    uniforms.scale.value = height * 0.5;
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.uvTransform);
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
    }
    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }
  }
  function refreshUniformsSprites(uniforms, material) {
    uniforms.diffuse.value.copy(material.color);
    uniforms.opacity.value = material.opacity;
    uniforms.rotation.value = material.rotation;
    if (material.map) {
      uniforms.map.value = material.map;
      refreshTransformUniform(material.map, uniforms.mapTransform);
    }
    if (material.alphaMap) {
      uniforms.alphaMap.value = material.alphaMap;
      refreshTransformUniform(material.alphaMap, uniforms.alphaMapTransform);
    }
    if (material.alphaTest > 0) {
      uniforms.alphaTest.value = material.alphaTest;
    }
  }
  function refreshUniformsPhong(uniforms, material) {
    uniforms.specular.value.copy(material.specular);
    uniforms.shininess.value = Math.max(material.shininess, 1e-4);
  }
  function refreshUniformsToon(uniforms, material) {
    if (material.gradientMap) {
      uniforms.gradientMap.value = material.gradientMap;
    }
  }
  function refreshUniformsStandard(uniforms, material) {
    uniforms.metalness.value = material.metalness;
    if (material.metalnessMap) {
      uniforms.metalnessMap.value = material.metalnessMap;
      refreshTransformUniform(material.metalnessMap, uniforms.metalnessMapTransform);
    }
    uniforms.roughness.value = material.roughness;
    if (material.roughnessMap) {
      uniforms.roughnessMap.value = material.roughnessMap;
      refreshTransformUniform(material.roughnessMap, uniforms.roughnessMapTransform);
    }
    if (material.envMap) {
      uniforms.envMapIntensity.value = material.envMapIntensity;
    }
  }
  function refreshUniformsPhysical(uniforms, material, transmissionRenderTarget) {
    uniforms.ior.value = material.ior;
    if (material.sheen > 0) {
      uniforms.sheenColor.value.copy(material.sheenColor).multiplyScalar(material.sheen);
      uniforms.sheenRoughness.value = material.sheenRoughness;
      if (material.sheenColorMap) {
        uniforms.sheenColorMap.value = material.sheenColorMap;
        refreshTransformUniform(material.sheenColorMap, uniforms.sheenColorMapTransform);
      }
      if (material.sheenRoughnessMap) {
        uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;
        refreshTransformUniform(material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform);
      }
    }
    if (material.clearcoat > 0) {
      uniforms.clearcoat.value = material.clearcoat;
      uniforms.clearcoatRoughness.value = material.clearcoatRoughness;
      if (material.clearcoatMap) {
        uniforms.clearcoatMap.value = material.clearcoatMap;
        refreshTransformUniform(material.clearcoatMap, uniforms.clearcoatMapTransform);
      }
      if (material.clearcoatRoughnessMap) {
        uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;
        refreshTransformUniform(material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform);
      }
      if (material.clearcoatNormalMap) {
        uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;
        refreshTransformUniform(material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform);
        uniforms.clearcoatNormalScale.value.copy(material.clearcoatNormalScale);
        if (material.side === BackSide) {
          uniforms.clearcoatNormalScale.value.negate();
        }
      }
    }
    if (material.dispersion > 0) {
      uniforms.dispersion.value = material.dispersion;
    }
    if (material.iridescence > 0) {
      uniforms.iridescence.value = material.iridescence;
      uniforms.iridescenceIOR.value = material.iridescenceIOR;
      uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[0];
      uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[1];
      if (material.iridescenceMap) {
        uniforms.iridescenceMap.value = material.iridescenceMap;
        refreshTransformUniform(material.iridescenceMap, uniforms.iridescenceMapTransform);
      }
      if (material.iridescenceThicknessMap) {
        uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;
        refreshTransformUniform(material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform);
      }
    }
    if (material.transmission > 0) {
      uniforms.transmission.value = material.transmission;
      uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
      uniforms.transmissionSamplerSize.value.set(transmissionRenderTarget.width, transmissionRenderTarget.height);
      if (material.transmissionMap) {
        uniforms.transmissionMap.value = material.transmissionMap;
        refreshTransformUniform(material.transmissionMap, uniforms.transmissionMapTransform);
      }
      uniforms.thickness.value = material.thickness;
      if (material.thicknessMap) {
        uniforms.thicknessMap.value = material.thicknessMap;
        refreshTransformUniform(material.thicknessMap, uniforms.thicknessMapTransform);
      }
      uniforms.attenuationDistance.value = material.attenuationDistance;
      uniforms.attenuationColor.value.copy(material.attenuationColor);
    }
    if (material.anisotropy > 0) {
      uniforms.anisotropyVector.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
      if (material.anisotropyMap) {
        uniforms.anisotropyMap.value = material.anisotropyMap;
        refreshTransformUniform(material.anisotropyMap, uniforms.anisotropyMapTransform);
      }
    }
    uniforms.specularIntensity.value = material.specularIntensity;
    uniforms.specularColor.value.copy(material.specularColor);
    if (material.specularColorMap) {
      uniforms.specularColorMap.value = material.specularColorMap;
      refreshTransformUniform(material.specularColorMap, uniforms.specularColorMapTransform);
    }
    if (material.specularIntensityMap) {
      uniforms.specularIntensityMap.value = material.specularIntensityMap;
      refreshTransformUniform(material.specularIntensityMap, uniforms.specularIntensityMapTransform);
    }
  }
  function refreshUniformsMatcap(uniforms, material) {
    if (material.matcap) {
      uniforms.matcap.value = material.matcap;
    }
  }
  function refreshUniformsDistance(uniforms, material) {
    const light = properties.get(material).light;
    uniforms.referencePosition.value.setFromMatrixPosition(light.matrixWorld);
    uniforms.nearDistance.value = light.shadow.camera.near;
    uniforms.farDistance.value = light.shadow.camera.far;
  }
  return {
    refreshFogUniforms,
    refreshMaterialUniforms
  };
}
function WebGLUniformsGroups(gl, info, capabilities, state) {
  let buffers = {};
  let updateList = {};
  let allocatedBindingPoints = [];
  const maxBindingPoints = gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS);
  function bind2(uniformsGroup, program) {
    const webglProgram = program.program;
    state.uniformBlockBinding(uniformsGroup, webglProgram);
  }
  function update20(uniformsGroup, program) {
    let buffer2 = buffers[uniformsGroup.id];
    if (buffer2 === void 0) {
      prepareUniformsGroup(uniformsGroup);
      buffer2 = createBuffer(uniformsGroup);
      buffers[uniformsGroup.id] = buffer2;
      uniformsGroup.addEventListener("dispose", onUniformsGroupsDispose);
    }
    const webglProgram = program.program;
    state.updateUBOMapping(uniformsGroup, webglProgram);
    const frame = info.render.frame;
    if (updateList[uniformsGroup.id] !== frame) {
      updateBufferData(uniformsGroup);
      updateList[uniformsGroup.id] = frame;
    }
  }
  function createBuffer(uniformsGroup) {
    const bindingPointIndex = allocateBindingPointIndex();
    uniformsGroup.__bindingPointIndex = bindingPointIndex;
    const buffer2 = gl.createBuffer();
    const size = uniformsGroup.__size;
    const usage = uniformsGroup.usage;
    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer2);
    gl.bufferData(gl.UNIFORM_BUFFER, size, usage);
    gl.bindBuffer(gl.UNIFORM_BUFFER, null);
    gl.bindBufferBase(gl.UNIFORM_BUFFER, bindingPointIndex, buffer2);
    return buffer2;
  }
  function allocateBindingPointIndex() {
    for (let i2 = 0; i2 < maxBindingPoints; i2++) {
      if (allocatedBindingPoints.indexOf(i2) === -1) {
        allocatedBindingPoints.push(i2);
        return i2;
      }
    }
    console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.");
    return 0;
  }
  function updateBufferData(uniformsGroup) {
    const buffer2 = buffers[uniformsGroup.id];
    const uniforms = uniformsGroup.uniforms;
    const cache2 = uniformsGroup.__cache;
    gl.bindBuffer(gl.UNIFORM_BUFFER, buffer2);
    for (let i2 = 0, il = uniforms.length; i2 < il; i2++) {
      const uniformArray2 = Array.isArray(uniforms[i2]) ? uniforms[i2] : [uniforms[i2]];
      for (let j2 = 0, jl = uniformArray2.length; j2 < jl; j2++) {
        const uniform2 = uniformArray2[j2];
        if (hasUniformChanged(uniform2, i2, j2, cache2) === true) {
          const offset = uniform2.__offset;
          const values = Array.isArray(uniform2.value) ? uniform2.value : [uniform2.value];
          let arrayOffset = 0;
          for (let k2 = 0; k2 < values.length; k2++) {
            const value = values[k2];
            const info2 = getUniformSize(value);
            if (typeof value === "number" || typeof value === "boolean") {
              uniform2.__data[0] = value;
              gl.bufferSubData(gl.UNIFORM_BUFFER, offset + arrayOffset, uniform2.__data);
            } else if (value.isMatrix3) {
              uniform2.__data[0] = value.elements[0];
              uniform2.__data[1] = value.elements[1];
              uniform2.__data[2] = value.elements[2];
              uniform2.__data[3] = 0;
              uniform2.__data[4] = value.elements[3];
              uniform2.__data[5] = value.elements[4];
              uniform2.__data[6] = value.elements[5];
              uniform2.__data[7] = 0;
              uniform2.__data[8] = value.elements[6];
              uniform2.__data[9] = value.elements[7];
              uniform2.__data[10] = value.elements[8];
              uniform2.__data[11] = 0;
            } else {
              value.toArray(uniform2.__data, arrayOffset);
              arrayOffset += info2.storage / Float32Array.BYTES_PER_ELEMENT;
            }
          }
          gl.bufferSubData(gl.UNIFORM_BUFFER, offset, uniform2.__data);
        }
      }
    }
    gl.bindBuffer(gl.UNIFORM_BUFFER, null);
  }
  function hasUniformChanged(uniform2, index7, indexArray, cache2) {
    const value = uniform2.value;
    const indexString = index7 + "_" + indexArray;
    if (cache2[indexString] === void 0) {
      if (typeof value === "number" || typeof value === "boolean") {
        cache2[indexString] = value;
      } else {
        cache2[indexString] = value.clone();
      }
      return true;
    } else {
      const cachedObject = cache2[indexString];
      if (typeof value === "number" || typeof value === "boolean") {
        if (cachedObject !== value) {
          cache2[indexString] = value;
          return true;
        }
      } else {
        if (cachedObject.equals(value) === false) {
          cachedObject.copy(value);
          return true;
        }
      }
    }
    return false;
  }
  function prepareUniformsGroup(uniformsGroup) {
    const uniforms = uniformsGroup.uniforms;
    let offset = 0;
    const chunkSize = 16;
    for (let i2 = 0, l2 = uniforms.length; i2 < l2; i2++) {
      const uniformArray2 = Array.isArray(uniforms[i2]) ? uniforms[i2] : [uniforms[i2]];
      for (let j2 = 0, jl = uniformArray2.length; j2 < jl; j2++) {
        const uniform2 = uniformArray2[j2];
        const values = Array.isArray(uniform2.value) ? uniform2.value : [uniform2.value];
        for (let k2 = 0, kl = values.length; k2 < kl; k2++) {
          const value = values[k2];
          const info2 = getUniformSize(value);
          const chunkOffset2 = offset % chunkSize;
          const chunkPadding = chunkOffset2 % info2.boundary;
          const chunkStart = chunkOffset2 + chunkPadding;
          offset += chunkPadding;
          if (chunkStart !== 0 && chunkSize - chunkStart < info2.storage) {
            offset += chunkSize - chunkStart;
          }
          uniform2.__data = new Float32Array(info2.storage / Float32Array.BYTES_PER_ELEMENT);
          uniform2.__offset = offset;
          offset += info2.storage;
        }
      }
    }
    const chunkOffset = offset % chunkSize;
    if (chunkOffset > 0) offset += chunkSize - chunkOffset;
    uniformsGroup.__size = offset;
    uniformsGroup.__cache = {};
    return this;
  }
  function getUniformSize(value) {
    const info2 = {
      boundary: 0,
      // bytes
      storage: 0
      // bytes
    };
    if (typeof value === "number" || typeof value === "boolean") {
      info2.boundary = 4;
      info2.storage = 4;
    } else if (value.isVector2) {
      info2.boundary = 8;
      info2.storage = 8;
    } else if (value.isVector3 || value.isColor) {
      info2.boundary = 16;
      info2.storage = 12;
    } else if (value.isVector4) {
      info2.boundary = 16;
      info2.storage = 16;
    } else if (value.isMatrix3) {
      info2.boundary = 48;
      info2.storage = 48;
    } else if (value.isMatrix4) {
      info2.boundary = 64;
      info2.storage = 64;
    } else if (value.isTexture) {
      console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.");
    } else {
      console.warn("THREE.WebGLRenderer: Unsupported uniform value type.", value);
    }
    return info2;
  }
  function onUniformsGroupsDispose(event) {
    const uniformsGroup = event.target;
    uniformsGroup.removeEventListener("dispose", onUniformsGroupsDispose);
    const index7 = allocatedBindingPoints.indexOf(uniformsGroup.__bindingPointIndex);
    allocatedBindingPoints.splice(index7, 1);
    gl.deleteBuffer(buffers[uniformsGroup.id]);
    delete buffers[uniformsGroup.id];
    delete updateList[uniformsGroup.id];
  }
  function dispose() {
    for (const id2 in buffers) {
      gl.deleteBuffer(buffers[id2]);
    }
    allocatedBindingPoints = [];
    buffers = {};
    updateList = {};
  }
  return {
    bind: bind2,
    update: update20,
    dispose
  };
}
var WebGLRenderer = class {
  constructor(parameters = {}) {
    const {
      canvas = createCanvasElement(),
      context: context2 = null,
      depth: depth2 = true,
      stencil = false,
      alpha = false,
      antialias = false,
      premultipliedAlpha = true,
      preserveDrawingBuffer = false,
      powerPreference = "default",
      failIfMajorPerformanceCaveat = false
    } = parameters;
    this.isWebGLRenderer = true;
    let _alpha;
    if (context2 !== null) {
      if (typeof WebGLRenderingContext !== "undefined" && context2 instanceof WebGLRenderingContext) {
        throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");
      }
      _alpha = context2.getContextAttributes().alpha;
    } else {
      _alpha = alpha;
    }
    const uintClearColor = new Uint32Array(4);
    const intClearColor = new Int32Array(4);
    let currentRenderList = null;
    let currentRenderState = null;
    const renderListStack = [];
    const renderStateStack = [];
    this.domElement = canvas;
    this.debug = {
      /**
       * Enables error checking and reporting when shader programs are being compiled
       * @type {boolean}
       */
      checkShaderErrors: true,
      /**
       * Callback for custom error reporting.
       * @type {?Function}
       */
      onShaderError: null
    };
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.sortObjects = true;
    this.clippingPlanes = [];
    this.localClippingEnabled = false;
    this._outputColorSpace = SRGBColorSpace;
    this.toneMapping = NoToneMapping;
    this.toneMappingExposure = 1;
    const _this = this;
    let _isContextLost = false;
    let _currentActiveCubeFace = 0;
    let _currentActiveMipmapLevel = 0;
    let _currentRenderTarget = null;
    let _currentMaterialId = -1;
    let _currentCamera = null;
    const _currentViewport = new Vector4();
    const _currentScissor = new Vector4();
    let _currentScissorTest = null;
    const _currentClearColor2 = new Color(0);
    let _currentClearAlpha = 0;
    let _width = canvas.width;
    let _height = canvas.height;
    let _pixelRatio = 1;
    let _opaqueSort = null;
    let _transparentSort = null;
    const _viewport2 = new Vector4(0, 0, _width, _height);
    const _scissor = new Vector4(0, 0, _width, _height);
    let _scissorTest = false;
    const _frustum3 = new Frustum();
    let _clippingEnabled = false;
    let _localClippingEnabled = false;
    const _projScreenMatrix3 = new Matrix4();
    const _vector33 = new Vector3();
    const _vector42 = new Vector4();
    const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };
    let _renderBackground = false;
    function getTargetPixelRatio() {
      return _currentRenderTarget === null ? _pixelRatio : 1;
    }
    let _gl = context2;
    function getContext(contextName, contextAttributes) {
      return canvas.getContext(contextName, contextAttributes);
    }
    try {
      const contextAttributes = {
        alpha: true,
        depth: depth2,
        stencil,
        antialias,
        premultipliedAlpha,
        preserveDrawingBuffer,
        powerPreference,
        failIfMajorPerformanceCaveat
      };
      if ("setAttribute" in canvas) canvas.setAttribute("data-engine", `three.js r${REVISION}`);
      canvas.addEventListener("webglcontextlost", onContextLost, false);
      canvas.addEventListener("webglcontextrestored", onContextRestore, false);
      canvas.addEventListener("webglcontextcreationerror", onContextCreationError, false);
      if (_gl === null) {
        const contextName = "webgl2";
        _gl = getContext(contextName, contextAttributes);
        if (_gl === null) {
          if (getContext(contextName)) {
            throw new Error("Error creating WebGL context with your selected attributes.");
          } else {
            throw new Error("Error creating WebGL context.");
          }
        }
      }
    } catch (error) {
      console.error("THREE.WebGLRenderer: " + error.message);
      throw error;
    }
    let extensions, capabilities, state, info;
    let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
    let programCache, materials, renderLists, renderStates, clipping2, shadowMap;
    let background, morphtargets, bufferRenderer, indexedBufferRenderer;
    let utils, bindingStates, uniformsGroups;
    function initGLContext() {
      extensions = new WebGLExtensions(_gl);
      extensions.init();
      utils = new WebGLUtils(_gl, extensions);
      capabilities = new WebGLCapabilities(_gl, extensions, parameters, utils);
      state = new WebGLState(_gl);
      info = new WebGLInfo(_gl);
      properties = new WebGLProperties();
      textures = new WebGLTextures(_gl, extensions, state, properties, capabilities, utils, info);
      cubemaps = new WebGLCubeMaps(_this);
      cubeuvmaps = new WebGLCubeUVMaps(_this);
      attributes = new WebGLAttributes(_gl);
      bindingStates = new WebGLBindingStates(_gl, attributes);
      geometries = new WebGLGeometries(_gl, attributes, info, bindingStates);
      objects = new WebGLObjects(_gl, geometries, attributes, info);
      morphtargets = new WebGLMorphtargets(_gl, capabilities, textures);
      clipping2 = new WebGLClipping(properties);
      programCache = new WebGLPrograms(_this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping2);
      materials = new WebGLMaterials(_this, properties);
      renderLists = new WebGLRenderLists();
      renderStates = new WebGLRenderStates(extensions);
      background = new WebGLBackground(_this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha);
      shadowMap = new WebGLShadowMap(_this, objects, capabilities);
      uniformsGroups = new WebGLUniformsGroups(_gl, info, capabilities, state);
      bufferRenderer = new WebGLBufferRenderer(_gl, extensions, info);
      indexedBufferRenderer = new WebGLIndexedBufferRenderer(_gl, extensions, info);
      info.programs = programCache.programs;
      _this.capabilities = capabilities;
      _this.extensions = extensions;
      _this.properties = properties;
      _this.renderLists = renderLists;
      _this.shadowMap = shadowMap;
      _this.state = state;
      _this.info = info;
    }
    initGLContext();
    const xr = new WebXRManager(_this, _gl);
    this.xr = xr;
    this.getContext = function() {
      return _gl;
    };
    this.getContextAttributes = function() {
      return _gl.getContextAttributes();
    };
    this.forceContextLoss = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension) extension.loseContext();
    };
    this.forceContextRestore = function() {
      const extension = extensions.get("WEBGL_lose_context");
      if (extension) extension.restoreContext();
    };
    this.getPixelRatio = function() {
      return _pixelRatio;
    };
    this.setPixelRatio = function(value) {
      if (value === void 0) return;
      _pixelRatio = value;
      this.setSize(_width, _height, false);
    };
    this.getSize = function(target) {
      return target.set(_width, _height);
    };
    this.setSize = function(width, height, updateStyle = true) {
      if (xr.isPresenting) {
        console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");
        return;
      }
      _width = width;
      _height = height;
      canvas.width = Math.floor(width * _pixelRatio);
      canvas.height = Math.floor(height * _pixelRatio);
      if (updateStyle === true) {
        canvas.style.width = width + "px";
        canvas.style.height = height + "px";
      }
      this.setViewport(0, 0, width, height);
    };
    this.getDrawingBufferSize = function(target) {
      return target.set(_width * _pixelRatio, _height * _pixelRatio).floor();
    };
    this.setDrawingBufferSize = function(width, height, pixelRatio) {
      _width = width;
      _height = height;
      _pixelRatio = pixelRatio;
      canvas.width = Math.floor(width * pixelRatio);
      canvas.height = Math.floor(height * pixelRatio);
      this.setViewport(0, 0, width, height);
    };
    this.getCurrentViewport = function(target) {
      return target.copy(_currentViewport);
    };
    this.getViewport = function(target) {
      return target.copy(_viewport2);
    };
    this.setViewport = function(x2, y2, width, height) {
      if (x2.isVector4) {
        _viewport2.set(x2.x, x2.y, x2.z, x2.w);
      } else {
        _viewport2.set(x2, y2, width, height);
      }
      state.viewport(_currentViewport.copy(_viewport2).multiplyScalar(_pixelRatio).round());
    };
    this.getScissor = function(target) {
      return target.copy(_scissor);
    };
    this.setScissor = function(x2, y2, width, height) {
      if (x2.isVector4) {
        _scissor.set(x2.x, x2.y, x2.z, x2.w);
      } else {
        _scissor.set(x2, y2, width, height);
      }
      state.scissor(_currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).round());
    };
    this.getScissorTest = function() {
      return _scissorTest;
    };
    this.setScissorTest = function(boolean) {
      state.setScissorTest(_scissorTest = boolean);
    };
    this.setOpaqueSort = function(method) {
      _opaqueSort = method;
    };
    this.setTransparentSort = function(method) {
      _transparentSort = method;
    };
    this.getClearColor = function(target) {
      return target.copy(background.getClearColor());
    };
    this.setClearColor = function() {
      background.setClearColor.apply(background, arguments);
    };
    this.getClearAlpha = function() {
      return background.getClearAlpha();
    };
    this.setClearAlpha = function() {
      background.setClearAlpha.apply(background, arguments);
    };
    this.clear = function(color3 = true, depth3 = true, stencil2 = true) {
      let bits = 0;
      if (color3) {
        let isIntegerFormat = false;
        if (_currentRenderTarget !== null) {
          const targetFormat = _currentRenderTarget.texture.format;
          isIntegerFormat = targetFormat === RGBAIntegerFormat || targetFormat === RGIntegerFormat || targetFormat === RedIntegerFormat;
        }
        if (isIntegerFormat) {
          const targetType = _currentRenderTarget.texture.type;
          const isUnsignedType = targetType === UnsignedByteType || targetType === UnsignedIntType || targetType === UnsignedShortType || targetType === UnsignedInt248Type || targetType === UnsignedShort4444Type || targetType === UnsignedShort5551Type;
          const clearColor = background.getClearColor();
          const a2 = background.getClearAlpha();
          const r2 = clearColor.r;
          const g2 = clearColor.g;
          const b = clearColor.b;
          if (isUnsignedType) {
            uintClearColor[0] = r2;
            uintClearColor[1] = g2;
            uintClearColor[2] = b;
            uintClearColor[3] = a2;
            _gl.clearBufferuiv(_gl.COLOR, 0, uintClearColor);
          } else {
            intClearColor[0] = r2;
            intClearColor[1] = g2;
            intClearColor[2] = b;
            intClearColor[3] = a2;
            _gl.clearBufferiv(_gl.COLOR, 0, intClearColor);
          }
        } else {
          bits |= _gl.COLOR_BUFFER_BIT;
        }
      }
      if (depth3) bits |= _gl.DEPTH_BUFFER_BIT;
      if (stencil2) {
        bits |= _gl.STENCIL_BUFFER_BIT;
        this.state.buffers.stencil.setMask(4294967295);
      }
      _gl.clear(bits);
    };
    this.clearColor = function() {
      this.clear(true, false, false);
    };
    this.clearDepth = function() {
      this.clear(false, true, false);
    };
    this.clearStencil = function() {
      this.clear(false, false, true);
    };
    this.dispose = function() {
      canvas.removeEventListener("webglcontextlost", onContextLost, false);
      canvas.removeEventListener("webglcontextrestored", onContextRestore, false);
      canvas.removeEventListener("webglcontextcreationerror", onContextCreationError, false);
      renderLists.dispose();
      renderStates.dispose();
      properties.dispose();
      cubemaps.dispose();
      cubeuvmaps.dispose();
      objects.dispose();
      bindingStates.dispose();
      uniformsGroups.dispose();
      programCache.dispose();
      xr.dispose();
      xr.removeEventListener("sessionstart", onXRSessionStart);
      xr.removeEventListener("sessionend", onXRSessionEnd);
      animation.stop();
    };
    function onContextLost(event) {
      event.preventDefault();
      console.log("THREE.WebGLRenderer: Context Lost.");
      _isContextLost = true;
    }
    function onContextRestore() {
      console.log("THREE.WebGLRenderer: Context Restored.");
      _isContextLost = false;
      const infoAutoReset = info.autoReset;
      const shadowMapEnabled = shadowMap.enabled;
      const shadowMapAutoUpdate = shadowMap.autoUpdate;
      const shadowMapNeedsUpdate = shadowMap.needsUpdate;
      const shadowMapType = shadowMap.type;
      initGLContext();
      info.autoReset = infoAutoReset;
      shadowMap.enabled = shadowMapEnabled;
      shadowMap.autoUpdate = shadowMapAutoUpdate;
      shadowMap.needsUpdate = shadowMapNeedsUpdate;
      shadowMap.type = shadowMapType;
    }
    function onContextCreationError(event) {
      console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ", event.statusMessage);
    }
    function onMaterialDispose(event) {
      const material = event.target;
      material.removeEventListener("dispose", onMaterialDispose);
      deallocateMaterial(material);
    }
    function deallocateMaterial(material) {
      releaseMaterialProgramReferences(material);
      properties.remove(material);
    }
    function releaseMaterialProgramReferences(material) {
      const programs = properties.get(material).programs;
      if (programs !== void 0) {
        programs.forEach(function(program) {
          programCache.releaseProgram(program);
        });
        if (material.isShaderMaterial) {
          programCache.releaseShaderCache(material);
        }
      }
    }
    this.renderBufferDirect = function(camera3, scene3, geometry, material, object2, group2) {
      if (scene3 === null) scene3 = _emptyScene;
      const frontFaceCW = object2.isMesh && object2.matrixWorld.determinant() < 0;
      const program = setProgram(camera3, scene3, geometry, material, object2);
      state.setMaterial(material, frontFaceCW);
      let index7 = geometry.index;
      let rangeFactor = 1;
      if (material.wireframe === true) {
        index7 = geometries.getWireframeAttribute(geometry);
        if (index7 === void 0) return;
        rangeFactor = 2;
      }
      const drawRange = geometry.drawRange;
      const position = geometry.attributes.position;
      let drawStart = drawRange.start * rangeFactor;
      let drawEnd = (drawRange.start + drawRange.count) * rangeFactor;
      if (group2 !== null) {
        drawStart = Math.max(drawStart, group2.start * rangeFactor);
        drawEnd = Math.min(drawEnd, (group2.start + group2.count) * rangeFactor);
      }
      if (index7 !== null) {
        drawStart = Math.max(drawStart, 0);
        drawEnd = Math.min(drawEnd, index7.count);
      } else if (position !== void 0 && position !== null) {
        drawStart = Math.max(drawStart, 0);
        drawEnd = Math.min(drawEnd, position.count);
      }
      const drawCount = drawEnd - drawStart;
      if (drawCount < 0 || drawCount === Infinity) return;
      bindingStates.setup(object2, material, program, geometry, index7);
      let attribute2;
      let renderer3 = bufferRenderer;
      if (index7 !== null) {
        attribute2 = attributes.get(index7);
        renderer3 = indexedBufferRenderer;
        renderer3.setIndex(attribute2);
      }
      if (object2.isMesh) {
        if (material.wireframe === true) {
          state.setLineWidth(material.wireframeLinewidth * getTargetPixelRatio());
          renderer3.setMode(_gl.LINES);
        } else {
          renderer3.setMode(_gl.TRIANGLES);
        }
      } else if (object2.isLine) {
        let lineWidth = material.linewidth;
        if (lineWidth === void 0) lineWidth = 1;
        state.setLineWidth(lineWidth * getTargetPixelRatio());
        if (object2.isLineSegments) {
          renderer3.setMode(_gl.LINES);
        } else if (object2.isLineLoop) {
          renderer3.setMode(_gl.LINE_LOOP);
        } else {
          renderer3.setMode(_gl.LINE_STRIP);
        }
      } else if (object2.isPoints) {
        renderer3.setMode(_gl.POINTS);
      } else if (object2.isSprite) {
        renderer3.setMode(_gl.TRIANGLES);
      }
      if (object2.isBatchedMesh) {
        if (object2._multiDrawInstances !== null) {
          renderer3.renderMultiDrawInstances(object2._multiDrawStarts, object2._multiDrawCounts, object2._multiDrawCount, object2._multiDrawInstances);
        } else {
          if (!extensions.get("WEBGL_multi_draw")) {
            const starts = object2._multiDrawStarts;
            const counts = object2._multiDrawCounts;
            const drawCount2 = object2._multiDrawCount;
            const bytesPerElement = index7 ? attributes.get(index7).bytesPerElement : 1;
            const uniforms = properties.get(material).currentProgram.getUniforms();
            for (let i2 = 0; i2 < drawCount2; i2++) {
              uniforms.setValue(_gl, "_gl_DrawID", i2);
              renderer3.render(starts[i2] / bytesPerElement, counts[i2]);
            }
          } else {
            renderer3.renderMultiDraw(object2._multiDrawStarts, object2._multiDrawCounts, object2._multiDrawCount);
          }
        }
      } else if (object2.isInstancedMesh) {
        renderer3.renderInstances(drawStart, drawCount, object2.count);
      } else if (geometry.isInstancedBufferGeometry) {
        const maxInstanceCount = geometry._maxInstanceCount !== void 0 ? geometry._maxInstanceCount : Infinity;
        const instanceCount = Math.min(geometry.instanceCount, maxInstanceCount);
        renderer3.renderInstances(drawStart, drawCount, instanceCount);
      } else {
        renderer3.render(drawStart, drawCount);
      }
    };
    function prepareMaterial(material, scene3, object2) {
      if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
        material.side = BackSide;
        material.needsUpdate = true;
        getProgram(material, scene3, object2);
        material.side = FrontSide;
        material.needsUpdate = true;
        getProgram(material, scene3, object2);
        material.side = DoubleSide;
      } else {
        getProgram(material, scene3, object2);
      }
    }
    this.compile = function(scene3, camera3, targetScene = null) {
      if (targetScene === null) targetScene = scene3;
      currentRenderState = renderStates.get(targetScene);
      currentRenderState.init(camera3);
      renderStateStack.push(currentRenderState);
      targetScene.traverseVisible(function(object2) {
        if (object2.isLight && object2.layers.test(camera3.layers)) {
          currentRenderState.pushLight(object2);
          if (object2.castShadow) {
            currentRenderState.pushShadow(object2);
          }
        }
      });
      if (scene3 !== targetScene) {
        scene3.traverseVisible(function(object2) {
          if (object2.isLight && object2.layers.test(camera3.layers)) {
            currentRenderState.pushLight(object2);
            if (object2.castShadow) {
              currentRenderState.pushShadow(object2);
            }
          }
        });
      }
      currentRenderState.setupLights();
      const materials2 = /* @__PURE__ */ new Set();
      scene3.traverse(function(object2) {
        const material = object2.material;
        if (material) {
          if (Array.isArray(material)) {
            for (let i2 = 0; i2 < material.length; i2++) {
              const material2 = material[i2];
              prepareMaterial(material2, targetScene, object2);
              materials2.add(material2);
            }
          } else {
            prepareMaterial(material, targetScene, object2);
            materials2.add(material);
          }
        }
      });
      renderStateStack.pop();
      currentRenderState = null;
      return materials2;
    };
    this.compileAsync = function(scene3, camera3, targetScene = null) {
      const materials2 = this.compile(scene3, camera3, targetScene);
      return new Promise((resolve) => {
        function checkMaterialsReady() {
          materials2.forEach(function(material) {
            const materialProperties = properties.get(material);
            const program = materialProperties.currentProgram;
            if (program.isReady()) {
              materials2.delete(material);
            }
          });
          if (materials2.size === 0) {
            resolve(scene3);
            return;
          }
          setTimeout(checkMaterialsReady, 10);
        }
        if (extensions.get("KHR_parallel_shader_compile") !== null) {
          checkMaterialsReady();
        } else {
          setTimeout(checkMaterialsReady, 10);
        }
      });
    };
    let onAnimationFrameCallback = null;
    function onAnimationFrame(time2) {
      if (onAnimationFrameCallback) onAnimationFrameCallback(time2);
    }
    function onXRSessionStart() {
      animation.stop();
    }
    function onXRSessionEnd() {
      animation.start();
    }
    const animation = new WebGLAnimation();
    animation.setAnimationLoop(onAnimationFrame);
    if (typeof self !== "undefined") animation.setContext(self);
    this.setAnimationLoop = function(callback) {
      onAnimationFrameCallback = callback;
      xr.setAnimationLoop(callback);
      callback === null ? animation.stop() : animation.start();
    };
    xr.addEventListener("sessionstart", onXRSessionStart);
    xr.addEventListener("sessionend", onXRSessionEnd);
    this.render = function(scene3, camera3) {
      if (camera3 !== void 0 && camera3.isCamera !== true) {
        console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");
        return;
      }
      if (_isContextLost === true) return;
      if (scene3.matrixWorldAutoUpdate === true) scene3.updateMatrixWorld();
      if (camera3.parent === null && camera3.matrixWorldAutoUpdate === true) camera3.updateMatrixWorld();
      if (xr.enabled === true && xr.isPresenting === true) {
        if (xr.cameraAutoUpdate === true) xr.updateCamera(camera3);
        camera3 = xr.getCamera();
      }
      if (scene3.isScene === true) scene3.onBeforeRender(_this, scene3, camera3, _currentRenderTarget);
      currentRenderState = renderStates.get(scene3, renderStateStack.length);
      currentRenderState.init(camera3);
      renderStateStack.push(currentRenderState);
      _projScreenMatrix3.multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse);
      _frustum3.setFromProjectionMatrix(_projScreenMatrix3);
      _localClippingEnabled = this.localClippingEnabled;
      _clippingEnabled = clipping2.init(this.clippingPlanes, _localClippingEnabled);
      currentRenderList = renderLists.get(scene3, renderListStack.length);
      currentRenderList.init();
      renderListStack.push(currentRenderList);
      if (xr.enabled === true && xr.isPresenting === true) {
        const depthSensingMesh = _this.xr.getDepthSensingMesh();
        if (depthSensingMesh !== null) {
          projectObject(depthSensingMesh, camera3, -Infinity, _this.sortObjects);
        }
      }
      projectObject(scene3, camera3, 0, _this.sortObjects);
      currentRenderList.finish();
      if (_this.sortObjects === true) {
        currentRenderList.sort(_opaqueSort, _transparentSort);
      }
      _renderBackground = xr.enabled === false || xr.isPresenting === false || xr.hasDepthSensing() === false;
      if (_renderBackground) {
        background.addToRenderList(currentRenderList, scene3);
      }
      this.info.render.frame++;
      if (_clippingEnabled === true) clipping2.beginShadows();
      const shadowsArray = currentRenderState.state.shadowsArray;
      shadowMap.render(shadowsArray, scene3, camera3);
      if (_clippingEnabled === true) clipping2.endShadows();
      if (this.info.autoReset === true) this.info.reset();
      const opaqueObjects = currentRenderList.opaque;
      const transmissiveObjects = currentRenderList.transmissive;
      currentRenderState.setupLights();
      if (camera3.isArrayCamera) {
        const cameras = camera3.cameras;
        if (transmissiveObjects.length > 0) {
          for (let i2 = 0, l2 = cameras.length; i2 < l2; i2++) {
            const camera22 = cameras[i2];
            renderTransmissionPass(opaqueObjects, transmissiveObjects, scene3, camera22);
          }
        }
        if (_renderBackground) background.render(scene3);
        for (let i2 = 0, l2 = cameras.length; i2 < l2; i2++) {
          const camera22 = cameras[i2];
          renderScene(currentRenderList, scene3, camera22, camera22.viewport);
        }
      } else {
        if (transmissiveObjects.length > 0) renderTransmissionPass(opaqueObjects, transmissiveObjects, scene3, camera3);
        if (_renderBackground) background.render(scene3);
        renderScene(currentRenderList, scene3, camera3);
      }
      if (_currentRenderTarget !== null) {
        textures.updateMultisampleRenderTarget(_currentRenderTarget);
        textures.updateRenderTargetMipmap(_currentRenderTarget);
      }
      if (scene3.isScene === true) scene3.onAfterRender(_this, scene3, camera3);
      bindingStates.resetDefaultState();
      _currentMaterialId = -1;
      _currentCamera = null;
      renderStateStack.pop();
      if (renderStateStack.length > 0) {
        currentRenderState = renderStateStack[renderStateStack.length - 1];
        if (_clippingEnabled === true) clipping2.setGlobalState(_this.clippingPlanes, currentRenderState.state.camera);
      } else {
        currentRenderState = null;
      }
      renderListStack.pop();
      if (renderListStack.length > 0) {
        currentRenderList = renderListStack[renderListStack.length - 1];
      } else {
        currentRenderList = null;
      }
    };
    function projectObject(object2, camera3, groupOrder, sortObjects) {
      if (object2.visible === false) return;
      const visible = object2.layers.test(camera3.layers);
      if (visible) {
        if (object2.isGroup) {
          groupOrder = object2.renderOrder;
        } else if (object2.isLOD) {
          if (object2.autoUpdate === true) object2.update(camera3);
        } else if (object2.isLight) {
          currentRenderState.pushLight(object2);
          if (object2.castShadow) {
            currentRenderState.pushShadow(object2);
          }
        } else if (object2.isSprite) {
          if (!object2.frustumCulled || _frustum3.intersectsSprite(object2)) {
            if (sortObjects) {
              _vector42.setFromMatrixPosition(object2.matrixWorld).applyMatrix4(_projScreenMatrix3);
            }
            const geometry = objects.update(object2);
            const material = object2.material;
            if (material.visible) {
              currentRenderList.push(object2, geometry, material, groupOrder, _vector42.z, null);
            }
          }
        } else if (object2.isMesh || object2.isLine || object2.isPoints) {
          if (!object2.frustumCulled || _frustum3.intersectsObject(object2)) {
            const geometry = objects.update(object2);
            const material = object2.material;
            if (sortObjects) {
              if (object2.boundingSphere !== void 0) {
                if (object2.boundingSphere === null) object2.computeBoundingSphere();
                _vector42.copy(object2.boundingSphere.center);
              } else {
                if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
                _vector42.copy(geometry.boundingSphere.center);
              }
              _vector42.applyMatrix4(object2.matrixWorld).applyMatrix4(_projScreenMatrix3);
            }
            if (Array.isArray(material)) {
              const groups2 = geometry.groups;
              for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
                const group2 = groups2[i2];
                const groupMaterial = material[group2.materialIndex];
                if (groupMaterial && groupMaterial.visible) {
                  currentRenderList.push(object2, geometry, groupMaterial, groupOrder, _vector42.z, group2);
                }
              }
            } else if (material.visible) {
              currentRenderList.push(object2, geometry, material, groupOrder, _vector42.z, null);
            }
          }
        }
      }
      const children2 = object2.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        projectObject(children2[i2], camera3, groupOrder, sortObjects);
      }
    }
    function renderScene(currentRenderList2, scene3, camera3, viewport2) {
      const opaqueObjects = currentRenderList2.opaque;
      const transmissiveObjects = currentRenderList2.transmissive;
      const transparentObjects = currentRenderList2.transparent;
      currentRenderState.setupLightsView(camera3);
      if (_clippingEnabled === true) clipping2.setGlobalState(_this.clippingPlanes, camera3);
      if (viewport2) state.viewport(_currentViewport.copy(viewport2));
      if (opaqueObjects.length > 0) renderObjects(opaqueObjects, scene3, camera3);
      if (transmissiveObjects.length > 0) renderObjects(transmissiveObjects, scene3, camera3);
      if (transparentObjects.length > 0) renderObjects(transparentObjects, scene3, camera3);
      state.buffers.depth.setTest(true);
      state.buffers.depth.setMask(true);
      state.buffers.color.setMask(true);
      state.setPolygonOffset(false);
    }
    function renderTransmissionPass(opaqueObjects, transmissiveObjects, scene3, camera3) {
      const overrideMaterial2 = scene3.isScene === true ? scene3.overrideMaterial : null;
      if (overrideMaterial2 !== null) {
        return;
      }
      if (currentRenderState.state.transmissionRenderTarget[camera3.id] === void 0) {
        currentRenderState.state.transmissionRenderTarget[camera3.id] = new WebGLRenderTarget(1, 1, {
          generateMipmaps: true,
          type: extensions.has("EXT_color_buffer_half_float") || extensions.has("EXT_color_buffer_float") ? HalfFloatType : UnsignedByteType,
          minFilter: LinearMipmapLinearFilter,
          samples: 4,
          stencilBuffer: stencil,
          resolveDepthBuffer: false,
          resolveStencilBuffer: false,
          colorSpace: ColorManagement.workingColorSpace
        });
      }
      const transmissionRenderTarget = currentRenderState.state.transmissionRenderTarget[camera3.id];
      const activeViewport = camera3.viewport || _currentViewport;
      transmissionRenderTarget.setSize(activeViewport.z, activeViewport.w);
      const currentRenderTarget = _this.getRenderTarget();
      _this.setRenderTarget(transmissionRenderTarget);
      _this.getClearColor(_currentClearColor2);
      _currentClearAlpha = _this.getClearAlpha();
      if (_currentClearAlpha < 1) _this.setClearColor(16777215, 0.5);
      _this.clear();
      if (_renderBackground) background.render(scene3);
      const currentToneMapping = _this.toneMapping;
      _this.toneMapping = NoToneMapping;
      const currentCameraViewport = camera3.viewport;
      if (camera3.viewport !== void 0) camera3.viewport = void 0;
      currentRenderState.setupLightsView(camera3);
      if (_clippingEnabled === true) clipping2.setGlobalState(_this.clippingPlanes, camera3);
      renderObjects(opaqueObjects, scene3, camera3);
      textures.updateMultisampleRenderTarget(transmissionRenderTarget);
      textures.updateRenderTargetMipmap(transmissionRenderTarget);
      if (extensions.has("WEBGL_multisampled_render_to_texture") === false) {
        let renderTargetNeedsUpdate = false;
        for (let i2 = 0, l2 = transmissiveObjects.length; i2 < l2; i2++) {
          const renderItem = transmissiveObjects[i2];
          const object2 = renderItem.object;
          const geometry = renderItem.geometry;
          const material = renderItem.material;
          const group2 = renderItem.group;
          if (material.side === DoubleSide && object2.layers.test(camera3.layers)) {
            const currentSide = material.side;
            material.side = BackSide;
            material.needsUpdate = true;
            renderObject(object2, scene3, camera3, geometry, material, group2);
            material.side = currentSide;
            material.needsUpdate = true;
            renderTargetNeedsUpdate = true;
          }
        }
        if (renderTargetNeedsUpdate === true) {
          textures.updateMultisampleRenderTarget(transmissionRenderTarget);
          textures.updateRenderTargetMipmap(transmissionRenderTarget);
        }
      }
      _this.setRenderTarget(currentRenderTarget);
      _this.setClearColor(_currentClearColor2, _currentClearAlpha);
      if (currentCameraViewport !== void 0) camera3.viewport = currentCameraViewport;
      _this.toneMapping = currentToneMapping;
    }
    function renderObjects(renderList, scene3, camera3) {
      const overrideMaterial2 = scene3.isScene === true ? scene3.overrideMaterial : null;
      for (let i2 = 0, l2 = renderList.length; i2 < l2; i2++) {
        const renderItem = renderList[i2];
        const object2 = renderItem.object;
        const geometry = renderItem.geometry;
        const material = overrideMaterial2 === null ? renderItem.material : overrideMaterial2;
        const group2 = renderItem.group;
        if (object2.layers.test(camera3.layers)) {
          renderObject(object2, scene3, camera3, geometry, material, group2);
        }
      }
    }
    function renderObject(object2, scene3, camera3, geometry, material, group2) {
      object2.onBeforeRender(_this, scene3, camera3, geometry, material, group2);
      object2.modelViewMatrix.multiplyMatrices(camera3.matrixWorldInverse, object2.matrixWorld);
      object2.normalMatrix.getNormalMatrix(object2.modelViewMatrix);
      material.onBeforeRender(_this, scene3, camera3, geometry, object2, group2);
      if (material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false) {
        material.side = BackSide;
        material.needsUpdate = true;
        _this.renderBufferDirect(camera3, scene3, geometry, material, object2, group2);
        material.side = FrontSide;
        material.needsUpdate = true;
        _this.renderBufferDirect(camera3, scene3, geometry, material, object2, group2);
        material.side = DoubleSide;
      } else {
        _this.renderBufferDirect(camera3, scene3, geometry, material, object2, group2);
      }
      object2.onAfterRender(_this, scene3, camera3, geometry, material, group2);
    }
    function getProgram(material, scene3, object2) {
      if (scene3.isScene !== true) scene3 = _emptyScene;
      const materialProperties = properties.get(material);
      const lights2 = currentRenderState.state.lights;
      const shadowsArray = currentRenderState.state.shadowsArray;
      const lightsStateVersion = lights2.state.version;
      const parameters2 = programCache.getParameters(material, lights2.state, shadowsArray, scene3, object2);
      const programCacheKey = programCache.getProgramCacheKey(parameters2);
      let programs = materialProperties.programs;
      materialProperties.environment = material.isMeshStandardMaterial ? scene3.environment : null;
      materialProperties.fog = scene3.fog;
      materialProperties.envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || materialProperties.environment);
      materialProperties.envMapRotation = materialProperties.environment !== null && material.envMap === null ? scene3.environmentRotation : material.envMapRotation;
      if (programs === void 0) {
        material.addEventListener("dispose", onMaterialDispose);
        programs = /* @__PURE__ */ new Map();
        materialProperties.programs = programs;
      }
      let program = programs.get(programCacheKey);
      if (program !== void 0) {
        if (materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion) {
          updateCommonMaterialProperties(material, parameters2);
          return program;
        }
      } else {
        parameters2.uniforms = programCache.getUniforms(material);
        material.onBeforeCompile(parameters2, _this);
        program = programCache.acquireProgram(parameters2, programCacheKey);
        programs.set(programCacheKey, program);
        materialProperties.uniforms = parameters2.uniforms;
      }
      const uniforms = materialProperties.uniforms;
      if (!material.isShaderMaterial && !material.isRawShaderMaterial || material.clipping === true) {
        uniforms.clippingPlanes = clipping2.uniform;
      }
      updateCommonMaterialProperties(material, parameters2);
      materialProperties.needsLights = materialNeedsLights(material);
      materialProperties.lightsStateVersion = lightsStateVersion;
      if (materialProperties.needsLights) {
        uniforms.ambientLightColor.value = lights2.state.ambient;
        uniforms.lightProbe.value = lights2.state.probe;
        uniforms.directionalLights.value = lights2.state.directional;
        uniforms.directionalLightShadows.value = lights2.state.directionalShadow;
        uniforms.spotLights.value = lights2.state.spot;
        uniforms.spotLightShadows.value = lights2.state.spotShadow;
        uniforms.rectAreaLights.value = lights2.state.rectArea;
        uniforms.ltc_1.value = lights2.state.rectAreaLTC1;
        uniforms.ltc_2.value = lights2.state.rectAreaLTC2;
        uniforms.pointLights.value = lights2.state.point;
        uniforms.pointLightShadows.value = lights2.state.pointShadow;
        uniforms.hemisphereLights.value = lights2.state.hemi;
        uniforms.directionalShadowMap.value = lights2.state.directionalShadowMap;
        uniforms.directionalShadowMatrix.value = lights2.state.directionalShadowMatrix;
        uniforms.spotShadowMap.value = lights2.state.spotShadowMap;
        uniforms.spotLightMatrix.value = lights2.state.spotLightMatrix;
        uniforms.spotLightMap.value = lights2.state.spotLightMap;
        uniforms.pointShadowMap.value = lights2.state.pointShadowMap;
        uniforms.pointShadowMatrix.value = lights2.state.pointShadowMatrix;
      }
      materialProperties.currentProgram = program;
      materialProperties.uniformsList = null;
      return program;
    }
    function getUniformList(materialProperties) {
      if (materialProperties.uniformsList === null) {
        const progUniforms = materialProperties.currentProgram.getUniforms();
        materialProperties.uniformsList = WebGLUniforms.seqWithValue(progUniforms.seq, materialProperties.uniforms);
      }
      return materialProperties.uniformsList;
    }
    function updateCommonMaterialProperties(material, parameters2) {
      const materialProperties = properties.get(material);
      materialProperties.outputColorSpace = parameters2.outputColorSpace;
      materialProperties.batching = parameters2.batching;
      materialProperties.batchingColor = parameters2.batchingColor;
      materialProperties.instancing = parameters2.instancing;
      materialProperties.instancingColor = parameters2.instancingColor;
      materialProperties.instancingMorph = parameters2.instancingMorph;
      materialProperties.skinning = parameters2.skinning;
      materialProperties.morphTargets = parameters2.morphTargets;
      materialProperties.morphNormals = parameters2.morphNormals;
      materialProperties.morphColors = parameters2.morphColors;
      materialProperties.morphTargetsCount = parameters2.morphTargetsCount;
      materialProperties.numClippingPlanes = parameters2.numClippingPlanes;
      materialProperties.numIntersection = parameters2.numClipIntersection;
      materialProperties.vertexAlphas = parameters2.vertexAlphas;
      materialProperties.vertexTangents = parameters2.vertexTangents;
      materialProperties.toneMapping = parameters2.toneMapping;
    }
    function setProgram(camera3, scene3, geometry, material, object2) {
      if (scene3.isScene !== true) scene3 = _emptyScene;
      textures.resetTextureUnits();
      const fog2 = scene3.fog;
      const environment = material.isMeshStandardMaterial ? scene3.environment : null;
      const colorSpace = _currentRenderTarget === null ? _this.outputColorSpace : _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace;
      const envMap = (material.isMeshStandardMaterial ? cubeuvmaps : cubemaps).get(material.envMap || environment);
      const vertexAlphas = material.vertexColors === true && !!geometry.attributes.color && geometry.attributes.color.itemSize === 4;
      const vertexTangents = !!geometry.attributes.tangent && (!!material.normalMap || material.anisotropy > 0);
      const morphTargets = !!geometry.morphAttributes.position;
      const morphNormals = !!geometry.morphAttributes.normal;
      const morphColors = !!geometry.morphAttributes.color;
      let toneMapping2 = NoToneMapping;
      if (material.toneMapped) {
        if (_currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true) {
          toneMapping2 = _this.toneMapping;
        }
      }
      const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
      const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
      const materialProperties = properties.get(material);
      const lights2 = currentRenderState.state.lights;
      if (_clippingEnabled === true) {
        if (_localClippingEnabled === true || camera3 !== _currentCamera) {
          const useCache = camera3 === _currentCamera && material.id === _currentMaterialId;
          clipping2.setState(material, camera3, useCache);
        }
      }
      let needsProgramChange = false;
      if (material.version === materialProperties.__version) {
        if (materialProperties.needsLights && materialProperties.lightsStateVersion !== lights2.state.version) {
          needsProgramChange = true;
        } else if (materialProperties.outputColorSpace !== colorSpace) {
          needsProgramChange = true;
        } else if (object2.isBatchedMesh && materialProperties.batching === false) {
          needsProgramChange = true;
        } else if (!object2.isBatchedMesh && materialProperties.batching === true) {
          needsProgramChange = true;
        } else if (object2.isBatchedMesh && materialProperties.batchingColor === true && object2.colorTexture === null) {
          needsProgramChange = true;
        } else if (object2.isBatchedMesh && materialProperties.batchingColor === false && object2.colorTexture !== null) {
          needsProgramChange = true;
        } else if (object2.isInstancedMesh && materialProperties.instancing === false) {
          needsProgramChange = true;
        } else if (!object2.isInstancedMesh && materialProperties.instancing === true) {
          needsProgramChange = true;
        } else if (object2.isSkinnedMesh && materialProperties.skinning === false) {
          needsProgramChange = true;
        } else if (!object2.isSkinnedMesh && materialProperties.skinning === true) {
          needsProgramChange = true;
        } else if (object2.isInstancedMesh && materialProperties.instancingColor === true && object2.instanceColor === null) {
          needsProgramChange = true;
        } else if (object2.isInstancedMesh && materialProperties.instancingColor === false && object2.instanceColor !== null) {
          needsProgramChange = true;
        } else if (object2.isInstancedMesh && materialProperties.instancingMorph === true && object2.morphTexture === null) {
          needsProgramChange = true;
        } else if (object2.isInstancedMesh && materialProperties.instancingMorph === false && object2.morphTexture !== null) {
          needsProgramChange = true;
        } else if (materialProperties.envMap !== envMap) {
          needsProgramChange = true;
        } else if (material.fog === true && materialProperties.fog !== fog2) {
          needsProgramChange = true;
        } else if (materialProperties.numClippingPlanes !== void 0 && (materialProperties.numClippingPlanes !== clipping2.numPlanes || materialProperties.numIntersection !== clipping2.numIntersection)) {
          needsProgramChange = true;
        } else if (materialProperties.vertexAlphas !== vertexAlphas) {
          needsProgramChange = true;
        } else if (materialProperties.vertexTangents !== vertexTangents) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargets !== morphTargets) {
          needsProgramChange = true;
        } else if (materialProperties.morphNormals !== morphNormals) {
          needsProgramChange = true;
        } else if (materialProperties.morphColors !== morphColors) {
          needsProgramChange = true;
        } else if (materialProperties.toneMapping !== toneMapping2) {
          needsProgramChange = true;
        } else if (materialProperties.morphTargetsCount !== morphTargetsCount) {
          needsProgramChange = true;
        }
      } else {
        needsProgramChange = true;
        materialProperties.__version = material.version;
      }
      let program = materialProperties.currentProgram;
      if (needsProgramChange === true) {
        program = getProgram(material, scene3, object2);
      }
      let refreshProgram = false;
      let refreshMaterial = false;
      let refreshLights = false;
      const p_uniforms = program.getUniforms(), m_uniforms = materialProperties.uniforms;
      if (state.useProgram(program.program)) {
        refreshProgram = true;
        refreshMaterial = true;
        refreshLights = true;
      }
      if (material.id !== _currentMaterialId) {
        _currentMaterialId = material.id;
        refreshMaterial = true;
      }
      if (refreshProgram || _currentCamera !== camera3) {
        p_uniforms.setValue(_gl, "projectionMatrix", camera3.projectionMatrix);
        p_uniforms.setValue(_gl, "viewMatrix", camera3.matrixWorldInverse);
        const uCamPos = p_uniforms.map.cameraPosition;
        if (uCamPos !== void 0) {
          uCamPos.setValue(_gl, _vector33.setFromMatrixPosition(camera3.matrixWorld));
        }
        if (capabilities.logarithmicDepthBuffer) {
          p_uniforms.setValue(
            _gl,
            "logDepthBufFC",
            2 / (Math.log(camera3.far + 1) / Math.LN2)
          );
        }
        if (material.isMeshPhongMaterial || material.isMeshToonMaterial || material.isMeshLambertMaterial || material.isMeshBasicMaterial || material.isMeshStandardMaterial || material.isShaderMaterial) {
          p_uniforms.setValue(_gl, "isOrthographic", camera3.isOrthographicCamera === true);
        }
        if (_currentCamera !== camera3) {
          _currentCamera = camera3;
          refreshMaterial = true;
          refreshLights = true;
        }
      }
      if (object2.isSkinnedMesh) {
        p_uniforms.setOptional(_gl, object2, "bindMatrix");
        p_uniforms.setOptional(_gl, object2, "bindMatrixInverse");
        const skeleton = object2.skeleton;
        if (skeleton) {
          if (skeleton.boneTexture === null) skeleton.computeBoneTexture();
          p_uniforms.setValue(_gl, "boneTexture", skeleton.boneTexture, textures);
        }
      }
      if (object2.isBatchedMesh) {
        p_uniforms.setOptional(_gl, object2, "batchingTexture");
        p_uniforms.setValue(_gl, "batchingTexture", object2._matricesTexture, textures);
        p_uniforms.setOptional(_gl, object2, "batchingIdTexture");
        p_uniforms.setValue(_gl, "batchingIdTexture", object2._indirectTexture, textures);
        p_uniforms.setOptional(_gl, object2, "batchingColorTexture");
        if (object2._colorsTexture !== null) {
          p_uniforms.setValue(_gl, "batchingColorTexture", object2._colorsTexture, textures);
        }
      }
      const morphAttributes = geometry.morphAttributes;
      if (morphAttributes.position !== void 0 || morphAttributes.normal !== void 0 || morphAttributes.color !== void 0) {
        morphtargets.update(object2, geometry, program);
      }
      if (refreshMaterial || materialProperties.receiveShadow !== object2.receiveShadow) {
        materialProperties.receiveShadow = object2.receiveShadow;
        p_uniforms.setValue(_gl, "receiveShadow", object2.receiveShadow);
      }
      if (material.isMeshGouraudMaterial && material.envMap !== null) {
        m_uniforms.envMap.value = envMap;
        m_uniforms.flipEnvMap.value = envMap.isCubeTexture && envMap.isRenderTargetTexture === false ? -1 : 1;
      }
      if (material.isMeshStandardMaterial && material.envMap === null && scene3.environment !== null) {
        m_uniforms.envMapIntensity.value = scene3.environmentIntensity;
      }
      if (refreshMaterial) {
        p_uniforms.setValue(_gl, "toneMappingExposure", _this.toneMappingExposure);
        if (materialProperties.needsLights) {
          markUniformsLightsNeedsUpdate(m_uniforms, refreshLights);
        }
        if (fog2 && material.fog === true) {
          materials.refreshFogUniforms(m_uniforms, fog2);
        }
        materials.refreshMaterialUniforms(m_uniforms, material, _pixelRatio, _height, currentRenderState.state.transmissionRenderTarget[camera3.id]);
        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
      }
      if (material.isShaderMaterial && material.uniformsNeedUpdate === true) {
        WebGLUniforms.upload(_gl, getUniformList(materialProperties), m_uniforms, textures);
        material.uniformsNeedUpdate = false;
      }
      if (material.isSpriteMaterial) {
        p_uniforms.setValue(_gl, "center", object2.center);
      }
      p_uniforms.setValue(_gl, "modelViewMatrix", object2.modelViewMatrix);
      p_uniforms.setValue(_gl, "normalMatrix", object2.normalMatrix);
      p_uniforms.setValue(_gl, "modelMatrix", object2.matrixWorld);
      if (material.isShaderMaterial || material.isRawShaderMaterial) {
        const groups2 = material.uniformsGroups;
        for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
          const group2 = groups2[i2];
          uniformsGroups.update(group2, program);
          uniformsGroups.bind(group2, program);
        }
      }
      return program;
    }
    function markUniformsLightsNeedsUpdate(uniforms, value) {
      uniforms.ambientLightColor.needsUpdate = value;
      uniforms.lightProbe.needsUpdate = value;
      uniforms.directionalLights.needsUpdate = value;
      uniforms.directionalLightShadows.needsUpdate = value;
      uniforms.pointLights.needsUpdate = value;
      uniforms.pointLightShadows.needsUpdate = value;
      uniforms.spotLights.needsUpdate = value;
      uniforms.spotLightShadows.needsUpdate = value;
      uniforms.rectAreaLights.needsUpdate = value;
      uniforms.hemisphereLights.needsUpdate = value;
    }
    function materialNeedsLights(material) {
      return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial || material.isMeshStandardMaterial || material.isShadowMaterial || material.isShaderMaterial && material.lights === true;
    }
    this.getActiveCubeFace = function() {
      return _currentActiveCubeFace;
    };
    this.getActiveMipmapLevel = function() {
      return _currentActiveMipmapLevel;
    };
    this.getRenderTarget = function() {
      return _currentRenderTarget;
    };
    this.setRenderTargetTextures = function(renderTarget, colorTexture, depthTexture) {
      properties.get(renderTarget.texture).__webglTexture = colorTexture;
      properties.get(renderTarget.depthTexture).__webglTexture = depthTexture;
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__hasExternalTextures = true;
      renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === void 0;
      if (!renderTargetProperties.__autoAllocateDepthBuffer) {
        if (extensions.has("WEBGL_multisampled_render_to_texture") === true) {
          console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");
          renderTargetProperties.__useRenderToTexture = false;
        }
      }
    };
    this.setRenderTargetFramebuffer = function(renderTarget, defaultFramebuffer) {
      const renderTargetProperties = properties.get(renderTarget);
      renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
      renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === void 0;
    };
    this.setRenderTarget = function(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
      _currentRenderTarget = renderTarget;
      _currentActiveCubeFace = activeCubeFace;
      _currentActiveMipmapLevel = activeMipmapLevel;
      let useDefaultFramebuffer = true;
      let framebuffer = null;
      let isCube = false;
      let isRenderTarget3D = false;
      if (renderTarget) {
        const renderTargetProperties = properties.get(renderTarget);
        if (renderTargetProperties.__useDefaultFramebuffer !== void 0) {
          state.bindFramebuffer(_gl.FRAMEBUFFER, null);
          useDefaultFramebuffer = false;
        } else if (renderTargetProperties.__webglFramebuffer === void 0) {
          textures.setupRenderTarget(renderTarget);
        } else if (renderTargetProperties.__hasExternalTextures) {
          textures.rebindTextures(renderTarget, properties.get(renderTarget.texture).__webglTexture, properties.get(renderTarget.depthTexture).__webglTexture);
        } else if (renderTarget.depthBuffer) {
          const depthTexture = renderTarget.depthTexture;
          if (renderTargetProperties.__boundDepthTexture !== depthTexture) {
            if (depthTexture !== null && properties.has(depthTexture) && (renderTarget.width !== depthTexture.image.width || renderTarget.height !== depthTexture.image.height)) {
              throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");
            }
            textures.setupDepthRenderbuffer(renderTarget);
          }
        }
        const texture2 = renderTarget.texture;
        if (texture2.isData3DTexture || texture2.isDataArrayTexture || texture2.isCompressedArrayTexture) {
          isRenderTarget3D = true;
        }
        const __webglFramebuffer = properties.get(renderTarget).__webglFramebuffer;
        if (renderTarget.isWebGLCubeRenderTarget) {
          if (Array.isArray(__webglFramebuffer[activeCubeFace])) {
            framebuffer = __webglFramebuffer[activeCubeFace][activeMipmapLevel];
          } else {
            framebuffer = __webglFramebuffer[activeCubeFace];
          }
          isCube = true;
        } else if (renderTarget.samples > 0 && textures.useMultisampledRTT(renderTarget) === false) {
          framebuffer = properties.get(renderTarget).__webglMultisampledFramebuffer;
        } else {
          if (Array.isArray(__webglFramebuffer)) {
            framebuffer = __webglFramebuffer[activeMipmapLevel];
          } else {
            framebuffer = __webglFramebuffer;
          }
        }
        _currentViewport.copy(renderTarget.viewport);
        _currentScissor.copy(renderTarget.scissor);
        _currentScissorTest = renderTarget.scissorTest;
      } else {
        _currentViewport.copy(_viewport2).multiplyScalar(_pixelRatio).floor();
        _currentScissor.copy(_scissor).multiplyScalar(_pixelRatio).floor();
        _currentScissorTest = _scissorTest;
      }
      const framebufferBound = state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
      if (framebufferBound && useDefaultFramebuffer) {
        state.drawBuffers(renderTarget, framebuffer);
      }
      state.viewport(_currentViewport);
      state.scissor(_currentScissor);
      state.setScissorTest(_currentScissorTest);
      if (isCube) {
        const textureProperties = properties.get(renderTarget.texture);
        _gl.framebufferTexture2D(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel);
      } else if (isRenderTarget3D) {
        const textureProperties = properties.get(renderTarget.texture);
        const layer = activeCubeFace || 0;
        _gl.framebufferTextureLayer(_gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer);
      }
      _currentMaterialId = -1;
    };
    this.readRenderTargetPixels = function(renderTarget, x2, y2, width, height, buffer2, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
        return;
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        try {
          const texture2 = renderTarget.texture;
          const textureFormat = texture2.format;
          const textureType = texture2.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");
            return;
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");
            return;
          }
          if (x2 >= 0 && x2 <= renderTarget.width - width && (y2 >= 0 && y2 <= renderTarget.height - height)) {
            _gl.readPixels(x2, y2, width, height, utils.convert(textureFormat), utils.convert(textureType), buffer2);
          }
        } finally {
          const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
        }
      }
    };
    this.readRenderTargetPixelsAsync = async function(renderTarget, x2, y2, width, height, buffer2, activeCubeFaceIndex) {
      if (!(renderTarget && renderTarget.isWebGLRenderTarget)) {
        throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");
      }
      let framebuffer = properties.get(renderTarget).__webglFramebuffer;
      if (renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== void 0) {
        framebuffer = framebuffer[activeCubeFaceIndex];
      }
      if (framebuffer) {
        state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer);
        try {
          const texture2 = renderTarget.texture;
          const textureFormat = texture2.format;
          const textureType = texture2.type;
          if (!capabilities.textureFormatReadable(textureFormat)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");
          }
          if (!capabilities.textureTypeReadable(textureType)) {
            throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");
          }
          if (x2 >= 0 && x2 <= renderTarget.width - width && (y2 >= 0 && y2 <= renderTarget.height - height)) {
            const glBuffer = _gl.createBuffer();
            _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
            _gl.bufferData(_gl.PIXEL_PACK_BUFFER, buffer2.byteLength, _gl.STREAM_READ);
            _gl.readPixels(x2, y2, width, height, utils.convert(textureFormat), utils.convert(textureType), 0);
            _gl.flush();
            const sync = _gl.fenceSync(_gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
            await probeAsync(_gl, sync, 4);
            try {
              _gl.bindBuffer(_gl.PIXEL_PACK_BUFFER, glBuffer);
              _gl.getBufferSubData(_gl.PIXEL_PACK_BUFFER, 0, buffer2);
            } finally {
              _gl.deleteBuffer(glBuffer);
              _gl.deleteSync(sync);
            }
            return buffer2;
          }
        } finally {
          const framebuffer2 = _currentRenderTarget !== null ? properties.get(_currentRenderTarget).__webglFramebuffer : null;
          state.bindFramebuffer(_gl.FRAMEBUFFER, framebuffer2);
        }
      }
    };
    this.copyFramebufferToTexture = function(texture2, position = null, level = 0) {
      if (texture2.isTexture !== true) {
        warnOnce("WebGLRenderer: copyFramebufferToTexture function signature has changed.");
        position = arguments[0] || null;
        texture2 = arguments[1];
      }
      const levelScale = Math.pow(2, -level);
      const width = Math.floor(texture2.image.width * levelScale);
      const height = Math.floor(texture2.image.height * levelScale);
      const x2 = position !== null ? position.x : 0;
      const y2 = position !== null ? position.y : 0;
      textures.setTexture2D(texture2, 0);
      _gl.copyTexSubImage2D(_gl.TEXTURE_2D, level, 0, 0, x2, y2, width, height);
      state.unbindTexture();
    };
    this.copyTextureToTexture = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
      if (srcTexture.isTexture !== true) {
        warnOnce("WebGLRenderer: copyTextureToTexture function signature has changed.");
        dstPosition = arguments[0] || null;
        srcTexture = arguments[1];
        dstTexture = arguments[2];
        level = arguments[3] || 0;
        srcRegion = null;
      }
      let width, height, minX, minY;
      let dstX, dstY;
      if (srcRegion !== null) {
        width = srcRegion.max.x - srcRegion.min.x;
        height = srcRegion.max.y - srcRegion.min.y;
        minX = srcRegion.min.x;
        minY = srcRegion.min.y;
      } else {
        width = srcTexture.image.width;
        height = srcTexture.image.height;
        minX = 0;
        minY = 0;
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
      } else {
        dstX = 0;
        dstY = 0;
      }
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      textures.setTexture2D(dstTexture, 0);
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
      const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
      const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
      const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
      const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
      const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[level] : srcTexture.image;
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
      if (srcTexture.isDataTexture) {
        _gl.texSubImage2D(_gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data);
      } else {
        if (srcTexture.isCompressedTexture) {
          _gl.compressedTexSubImage2D(_gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data);
        } else {
          _gl.texSubImage2D(_gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image);
        }
      }
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(_gl.TEXTURE_2D);
      state.unbindTexture();
    };
    this.copyTextureToTexture3D = function(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
      if (srcTexture.isTexture !== true) {
        warnOnce("WebGLRenderer: copyTextureToTexture3D function signature has changed.");
        srcRegion = arguments[0] || null;
        dstPosition = arguments[1] || null;
        srcTexture = arguments[2];
        dstTexture = arguments[3];
        level = arguments[4] || 0;
      }
      let width, height, depth3, minX, minY, minZ;
      let dstX, dstY, dstZ;
      const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[level] : srcTexture.image;
      if (srcRegion !== null) {
        width = srcRegion.max.x - srcRegion.min.x;
        height = srcRegion.max.y - srcRegion.min.y;
        depth3 = srcRegion.max.z - srcRegion.min.z;
        minX = srcRegion.min.x;
        minY = srcRegion.min.y;
        minZ = srcRegion.min.z;
      } else {
        width = image.width;
        height = image.height;
        depth3 = image.depth;
        minX = 0;
        minY = 0;
        minZ = 0;
      }
      if (dstPosition !== null) {
        dstX = dstPosition.x;
        dstY = dstPosition.y;
        dstZ = dstPosition.z;
      } else {
        dstX = 0;
        dstY = 0;
        dstZ = 0;
      }
      const glFormat = utils.convert(dstTexture.format);
      const glType = utils.convert(dstTexture.type);
      let glTarget;
      if (dstTexture.isData3DTexture) {
        textures.setTexture3D(dstTexture, 0);
        glTarget = _gl.TEXTURE_3D;
      } else if (dstTexture.isDataArrayTexture || dstTexture.isCompressedArrayTexture) {
        textures.setTexture2DArray(dstTexture, 0);
        glTarget = _gl.TEXTURE_2D_ARRAY;
      } else {
        console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");
        return;
      }
      _gl.pixelStorei(_gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
      _gl.pixelStorei(_gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
      _gl.pixelStorei(_gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
      const currentUnpackRowLen = _gl.getParameter(_gl.UNPACK_ROW_LENGTH);
      const currentUnpackImageHeight = _gl.getParameter(_gl.UNPACK_IMAGE_HEIGHT);
      const currentUnpackSkipPixels = _gl.getParameter(_gl.UNPACK_SKIP_PIXELS);
      const currentUnpackSkipRows = _gl.getParameter(_gl.UNPACK_SKIP_ROWS);
      const currentUnpackSkipImages = _gl.getParameter(_gl.UNPACK_SKIP_IMAGES);
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, image.width);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, image.height);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, minX);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, minY);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, minZ);
      if (srcTexture.isDataTexture || srcTexture.isData3DTexture) {
        _gl.texSubImage3D(glTarget, level, dstX, dstY, dstZ, width, height, depth3, glFormat, glType, image.data);
      } else {
        if (dstTexture.isCompressedArrayTexture) {
          _gl.compressedTexSubImage3D(glTarget, level, dstX, dstY, dstZ, width, height, depth3, glFormat, image.data);
        } else {
          _gl.texSubImage3D(glTarget, level, dstX, dstY, dstZ, width, height, depth3, glFormat, glType, image);
        }
      }
      _gl.pixelStorei(_gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
      _gl.pixelStorei(_gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
      _gl.pixelStorei(_gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
      _gl.pixelStorei(_gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
      _gl.pixelStorei(_gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
      if (level === 0 && dstTexture.generateMipmaps) _gl.generateMipmap(glTarget);
      state.unbindTexture();
    };
    this.initRenderTarget = function(target) {
      if (properties.get(target).__webglFramebuffer === void 0) {
        textures.setupRenderTarget(target);
      }
    };
    this.initTexture = function(texture2) {
      if (texture2.isCubeTexture) {
        textures.setTextureCube(texture2, 0);
      } else if (texture2.isData3DTexture) {
        textures.setTexture3D(texture2, 0);
      } else if (texture2.isDataArrayTexture || texture2.isCompressedArrayTexture) {
        textures.setTexture2DArray(texture2, 0);
      } else {
        textures.setTexture2D(texture2, 0);
      }
      state.unbindTexture();
    };
    this.resetState = function() {
      _currentActiveCubeFace = 0;
      _currentActiveMipmapLevel = 0;
      _currentRenderTarget = null;
      state.reset();
      bindingStates.reset();
    };
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  get coordinateSystem() {
    return WebGLCoordinateSystem;
  }
  get outputColorSpace() {
    return this._outputColorSpace;
  }
  set outputColorSpace(colorSpace) {
    this._outputColorSpace = colorSpace;
    const gl = this.getContext();
    gl.drawingBufferColorSpace = colorSpace === DisplayP3ColorSpace ? "display-p3" : "srgb";
    gl.unpackColorSpace = ColorManagement.workingColorSpace === LinearDisplayP3ColorSpace ? "display-p3" : "srgb";
  }
};
var Scene = class extends Object3D {
  constructor() {
    super();
    this.isScene = true;
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.backgroundBlurriness = 0;
    this.backgroundIntensity = 1;
    this.backgroundRotation = new Euler();
    this.environmentIntensity = 1;
    this.environmentRotation = new Euler();
    this.overrideMaterial = null;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.background !== null) this.background = source.background.clone();
    if (source.environment !== null) this.environment = source.environment.clone();
    if (source.fog !== null) this.fog = source.fog.clone();
    this.backgroundBlurriness = source.backgroundBlurriness;
    this.backgroundIntensity = source.backgroundIntensity;
    this.backgroundRotation.copy(source.backgroundRotation);
    this.environmentIntensity = source.environmentIntensity;
    this.environmentRotation.copy(source.environmentRotation);
    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.fog !== null) data.object.fog = this.fog.toJSON();
    if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
    if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
    data.object.backgroundRotation = this.backgroundRotation.toArray();
    if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
    data.object.environmentRotation = this.environmentRotation.toArray();
    return data;
  }
};
var InterleavedBuffer = class {
  constructor(array3, stride) {
    this.isInterleavedBuffer = true;
    this.array = array3;
    this.stride = stride;
    this.count = array3 !== void 0 ? array3.length / stride : 0;
    this.usage = StaticDrawUsage;
    this._updateRange = { offset: 0, count: -1 };
    this.updateRanges = [];
    this.version = 0;
    this.uuid = generateUUID();
  }
  onUploadCallback() {
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  get updateRange() {
    warnOnce("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");
    return this._updateRange;
  }
  setUsage(value) {
    this.usage = value;
    return this;
  }
  addUpdateRange(start, count2) {
    this.updateRanges.push({ start, count: count2 });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.usage = source.usage;
    return this;
  }
  copyAt(index1, attribute2, index22) {
    index1 *= this.stride;
    index22 *= attribute2.stride;
    for (let i2 = 0, l2 = this.stride; i2 < l2; i2++) {
      this.array[index1 + i2] = attribute2.array[index22 + i2];
    }
    return this;
  }
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  clone(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const array3 = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
    const ib = new this.constructor(array3, this.stride);
    ib.setUsage(this.usage);
    return ib;
  }
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  toJSON(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
};
var _vector$6 = new Vector3();
var InterleavedBufferAttribute = class _InterleavedBufferAttribute {
  constructor(interleavedBuffer, itemSize, offset, normalized = false) {
    this.isInterleavedBufferAttribute = true;
    this.name = "";
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(value) {
    this.data.needsUpdate = value;
  }
  applyMatrix4(m2) {
    for (let i2 = 0, l2 = this.data.count; i2 < l2; i2++) {
      _vector$6.fromBufferAttribute(this, i2);
      _vector$6.applyMatrix4(m2);
      this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  }
  applyNormalMatrix(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$6.fromBufferAttribute(this, i2);
      _vector$6.applyNormalMatrix(m2);
      this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  }
  transformDirection(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$6.fromBufferAttribute(this, i2);
      _vector$6.transformDirection(m2);
      this.setXYZ(i2, _vector$6.x, _vector$6.y, _vector$6.z);
    }
    return this;
  }
  getComponent(index7, component) {
    let value = this.array[index7 * this.data.stride + this.offset + component];
    if (this.normalized) value = denormalize(value, this.array);
    return value;
  }
  setComponent(index7, component, value) {
    if (this.normalized) value = normalize(value, this.array);
    this.data.array[index7 * this.data.stride + this.offset + component] = value;
    return this;
  }
  setX(index7, x2) {
    if (this.normalized) x2 = normalize(x2, this.array);
    this.data.array[index7 * this.data.stride + this.offset] = x2;
    return this;
  }
  setY(index7, y2) {
    if (this.normalized) y2 = normalize(y2, this.array);
    this.data.array[index7 * this.data.stride + this.offset + 1] = y2;
    return this;
  }
  setZ(index7, z2) {
    if (this.normalized) z2 = normalize(z2, this.array);
    this.data.array[index7 * this.data.stride + this.offset + 2] = z2;
    return this;
  }
  setW(index7, w4) {
    if (this.normalized) w4 = normalize(w4, this.array);
    this.data.array[index7 * this.data.stride + this.offset + 3] = w4;
    return this;
  }
  getX(index7) {
    let x2 = this.data.array[index7 * this.data.stride + this.offset];
    if (this.normalized) x2 = denormalize(x2, this.array);
    return x2;
  }
  getY(index7) {
    let y2 = this.data.array[index7 * this.data.stride + this.offset + 1];
    if (this.normalized) y2 = denormalize(y2, this.array);
    return y2;
  }
  getZ(index7) {
    let z2 = this.data.array[index7 * this.data.stride + this.offset + 2];
    if (this.normalized) z2 = denormalize(z2, this.array);
    return z2;
  }
  getW(index7) {
    let w4 = this.data.array[index7 * this.data.stride + this.offset + 3];
    if (this.normalized) w4 = denormalize(w4, this.array);
    return w4;
  }
  setXY(index7, x2, y2) {
    index7 = index7 * this.data.stride + this.offset;
    if (this.normalized) {
      x2 = normalize(x2, this.array);
      y2 = normalize(y2, this.array);
    }
    this.data.array[index7 + 0] = x2;
    this.data.array[index7 + 1] = y2;
    return this;
  }
  setXYZ(index7, x2, y2, z2) {
    index7 = index7 * this.data.stride + this.offset;
    if (this.normalized) {
      x2 = normalize(x2, this.array);
      y2 = normalize(y2, this.array);
      z2 = normalize(z2, this.array);
    }
    this.data.array[index7 + 0] = x2;
    this.data.array[index7 + 1] = y2;
    this.data.array[index7 + 2] = z2;
    return this;
  }
  setXYZW(index7, x2, y2, z2, w4) {
    index7 = index7 * this.data.stride + this.offset;
    if (this.normalized) {
      x2 = normalize(x2, this.array);
      y2 = normalize(y2, this.array);
      z2 = normalize(z2, this.array);
      w4 = normalize(w4, this.array);
    }
    this.data.array[index7 + 0] = x2;
    this.data.array[index7 + 1] = y2;
    this.data.array[index7 + 2] = z2;
    this.data.array[index7 + 3] = w4;
    return this;
  }
  clone(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const array3 = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index7 = i2 * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array3.push(this.data.array[index7 + j2]);
        }
      }
      return new BufferAttribute(new this.array.constructor(array3), this.itemSize, this.normalized);
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
      }
      return new _InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  }
  toJSON(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const array3 = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index7 = i2 * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array3.push(this.data.array[index7 + j2]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: array3,
        normalized: this.normalized
      };
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
};
var _intersectPoint = new Vector3();
var _worldScale = new Vector3();
var _mvPosition = new Vector3();
var _alignedPosition = new Vector2();
var _rotatedPosition = new Vector2();
var _viewWorldMatrix = new Matrix4();
var _vA = new Vector3();
var _vB = new Vector3();
var _vC = new Vector3();
var _uvA = new Vector2();
var _uvB = new Vector2();
var _uvC = new Vector2();
var _v1$2 = new Vector3();
var _v2$1 = new Vector3();
var _basePosition = new Vector3();
var _skinIndex = new Vector4();
var _skinWeight = new Vector4();
var _vector3 = new Vector3();
var _matrix4 = new Matrix4();
var _vertex = new Vector3();
var _sphere$4 = new Sphere();
var _inverseMatrix$2 = new Matrix4();
var _ray$2 = new Ray();
var _offsetMatrix = new Matrix4();
var _identityMatrix$1 = new Matrix4();
var InstancedBufferAttribute = class extends BufferAttribute {
  constructor(array3, itemSize, normalized, meshPerAttribute = 1) {
    super(array3, itemSize, normalized);
    this.isInstancedBufferAttribute = true;
    this.meshPerAttribute = meshPerAttribute;
  }
  copy(source) {
    super.copy(source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.meshPerAttribute = this.meshPerAttribute;
    data.isInstancedBufferAttribute = true;
    return data;
  }
};
var _instanceLocalMatrix = new Matrix4();
var _instanceWorldMatrix = new Matrix4();
var _box3 = new Box3();
var _identity = new Matrix4();
var _mesh$1 = new Mesh();
var _sphere$3 = new Sphere();
var MultiDrawRenderList = class {
  constructor() {
    this.index = 0;
    this.pool = [];
    this.list = [];
  }
  push(drawRange, z2, index7) {
    const pool = this.pool;
    const list = this.list;
    if (this.index >= pool.length) {
      pool.push({
        start: -1,
        count: -1,
        z: -1,
        index: -1
      });
    }
    const item = pool[this.index];
    list.push(item);
    this.index++;
    item.start = drawRange.start;
    item.count = drawRange.count;
    item.z = z2;
    item.index = index7;
  }
  reset() {
    this.list.length = 0;
    this.index = 0;
  }
};
var _matrix$1 = new Matrix4();
var _invMatrixWorld = new Matrix4();
var _identityMatrix = new Matrix4();
var _whiteColor = new Color(1, 1, 1);
var _projScreenMatrix$2 = new Matrix4();
var _frustum = new Frustum();
var _box$1 = new Box3();
var _sphere$2 = new Sphere();
var _vector$5 = new Vector3();
var _forward = new Vector3();
var _temp = new Vector3();
var _renderList = new MultiDrawRenderList();
var _mesh = new Mesh();
var LineBasicMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isLineBasicMaterial = true;
    this.type = "LineBasicMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.linewidth = source.linewidth;
    this.linecap = source.linecap;
    this.linejoin = source.linejoin;
    this.fog = source.fog;
    return this;
  }
};
var _vStart = new Vector3();
var _vEnd = new Vector3();
var _inverseMatrix$1 = new Matrix4();
var _ray$1 = new Ray();
var _sphere$1 = new Sphere();
var _intersectPointOnRay = new Vector3();
var _intersectPointOnSegment = new Vector3();
var Line = class extends Object3D {
  constructor(geometry = new BufferGeometry(), material = new LineBasicMaterial()) {
    super();
    this.isLine = true;
    this.type = "Line";
    this.geometry = geometry;
    this.material = material;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  computeLineDistances() {
    const geometry = this.geometry;
    if (geometry.index === null) {
      const positionAttribute = geometry.attributes.position;
      const lineDistances = [0];
      for (let i2 = 1, l2 = positionAttribute.count; i2 < l2; i2++) {
        _vStart.fromBufferAttribute(positionAttribute, i2 - 1);
        _vEnd.fromBufferAttribute(positionAttribute, i2);
        lineDistances[i2] = lineDistances[i2 - 1];
        lineDistances[i2] += _vStart.distanceTo(_vEnd);
      }
      geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
    } else {
      console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
  raycast(raycaster, intersects4) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold2 = raycaster.params.Line.threshold;
    const drawRange = geometry.drawRange;
    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
    _sphere$1.copy(geometry.boundingSphere);
    _sphere$1.applyMatrix4(matrixWorld);
    _sphere$1.radius += threshold2;
    if (raycaster.ray.intersectsSphere(_sphere$1) === false) return;
    _inverseMatrix$1.copy(matrixWorld).invert();
    _ray$1.copy(raycaster.ray).applyMatrix4(_inverseMatrix$1);
    const localThreshold = threshold2 / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const step2 = this.isLineSegments ? 2 : 1;
    const index7 = geometry.index;
    const attributes = geometry.attributes;
    const positionAttribute = attributes.position;
    if (index7 !== null) {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(index7.count, drawRange.start + drawRange.count);
      for (let i2 = start, l2 = end - 1; i2 < l2; i2 += step2) {
        const a2 = index7.getX(i2);
        const b = index7.getX(i2 + 1);
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a2, b);
        if (intersect2) {
          intersects4.push(intersect2);
        }
      }
      if (this.isLineLoop) {
        const a2 = index7.getX(end - 1);
        const b = index7.getX(start);
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, a2, b);
        if (intersect2) {
          intersects4.push(intersect2);
        }
      }
    } else {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (let i2 = start, l2 = end - 1; i2 < l2; i2 += step2) {
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, i2, i2 + 1);
        if (intersect2) {
          intersects4.push(intersect2);
        }
      }
      if (this.isLineLoop) {
        const intersect2 = checkIntersection(this, raycaster, _ray$1, localThresholdSq, end - 1, start);
        if (intersect2) {
          intersects4.push(intersect2);
        }
      }
    }
  }
  updateMorphTargets() {
    const geometry = this.geometry;
    const morphAttributes = geometry.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
          const name = morphAttribute[m2].name || String(m2);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m2;
        }
      }
    }
  }
};
function checkIntersection(object2, raycaster, ray, thresholdSq, a2, b) {
  const positionAttribute = object2.geometry.attributes.position;
  _vStart.fromBufferAttribute(positionAttribute, a2);
  _vEnd.fromBufferAttribute(positionAttribute, b);
  const distSq = ray.distanceSqToSegment(_vStart, _vEnd, _intersectPointOnRay, _intersectPointOnSegment);
  if (distSq > thresholdSq) return;
  _intersectPointOnRay.applyMatrix4(object2.matrixWorld);
  const distance3 = raycaster.ray.origin.distanceTo(_intersectPointOnRay);
  if (distance3 < raycaster.near || distance3 > raycaster.far) return;
  return {
    distance: distance3,
    // What do we want? intersection point on the ray or on the segment??
    // point: raycaster.ray.at( distance ),
    point: _intersectPointOnSegment.clone().applyMatrix4(object2.matrixWorld),
    index: a2,
    face: null,
    faceIndex: null,
    object: object2
  };
}
var _start = new Vector3();
var _end = new Vector3();
var LineSegments = class extends Line {
  constructor(geometry, material) {
    super(geometry, material);
    this.isLineSegments = true;
    this.type = "LineSegments";
  }
  computeLineDistances() {
    const geometry = this.geometry;
    if (geometry.index === null) {
      const positionAttribute = geometry.attributes.position;
      const lineDistances = [];
      for (let i2 = 0, l2 = positionAttribute.count; i2 < l2; i2 += 2) {
        _start.fromBufferAttribute(positionAttribute, i2);
        _end.fromBufferAttribute(positionAttribute, i2 + 1);
        lineDistances[i2] = i2 === 0 ? 0 : lineDistances[i2 - 1];
        lineDistances[i2 + 1] = lineDistances[i2] + _start.distanceTo(_end);
      }
      geometry.setAttribute("lineDistance", new Float32BufferAttribute(lineDistances, 1));
    } else {
      console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");
    }
    return this;
  }
};
var PointsMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isPointsMaterial = true;
    this.type = "PointsMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.alphaMap = null;
    this.size = 1;
    this.sizeAttenuation = true;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.size = source.size;
    this.sizeAttenuation = source.sizeAttenuation;
    this.fog = source.fog;
    return this;
  }
};
var _inverseMatrix = new Matrix4();
var _ray = new Ray();
var _sphere = new Sphere();
var _position$2 = new Vector3();
var Points = class extends Object3D {
  constructor(geometry = new BufferGeometry(), material = new PointsMaterial()) {
    super();
    this.isPoints = true;
    this.type = "Points";
    this.geometry = geometry;
    this.material = material;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  raycast(raycaster, intersects4) {
    const geometry = this.geometry;
    const matrixWorld = this.matrixWorld;
    const threshold2 = raycaster.params.Points.threshold;
    const drawRange = geometry.drawRange;
    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
    _sphere.copy(geometry.boundingSphere);
    _sphere.applyMatrix4(matrixWorld);
    _sphere.radius += threshold2;
    if (raycaster.ray.intersectsSphere(_sphere) === false) return;
    _inverseMatrix.copy(matrixWorld).invert();
    _ray.copy(raycaster.ray).applyMatrix4(_inverseMatrix);
    const localThreshold = threshold2 / ((this.scale.x + this.scale.y + this.scale.z) / 3);
    const localThresholdSq = localThreshold * localThreshold;
    const index7 = geometry.index;
    const attributes = geometry.attributes;
    const positionAttribute = attributes.position;
    if (index7 !== null) {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(index7.count, drawRange.start + drawRange.count);
      for (let i2 = start, il = end; i2 < il; i2++) {
        const a2 = index7.getX(i2);
        _position$2.fromBufferAttribute(positionAttribute, a2);
        testPoint(_position$2, a2, localThresholdSq, matrixWorld, raycaster, intersects4, this);
      }
    } else {
      const start = Math.max(0, drawRange.start);
      const end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (let i2 = start, l2 = end; i2 < l2; i2++) {
        _position$2.fromBufferAttribute(positionAttribute, i2);
        testPoint(_position$2, i2, localThresholdSq, matrixWorld, raycaster, intersects4, this);
      }
    }
  }
  updateMorphTargets() {
    const geometry = this.geometry;
    const morphAttributes = geometry.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
          const name = morphAttribute[m2].name || String(m2);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m2;
        }
      }
    }
  }
};
function testPoint(point2, index7, localThresholdSq, matrixWorld, raycaster, intersects4, object2) {
  const rayPointDistanceSq = _ray.distanceSqToPoint(point2);
  if (rayPointDistanceSq < localThresholdSq) {
    const intersectPoint = new Vector3();
    _ray.closestPointToPoint(point2, intersectPoint);
    intersectPoint.applyMatrix4(matrixWorld);
    const distance3 = raycaster.ray.origin.distanceTo(intersectPoint);
    if (distance3 < raycaster.near || distance3 > raycaster.far) return;
    intersects4.push({
      distance: distance3,
      distanceToRay: Math.sqrt(rayPointDistanceSq),
      point: intersectPoint,
      index: index7,
      face: null,
      object: object2
    });
  }
}
var Curve = class {
  constructor() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(u5, optionalTarget) {
    const t4 = this.getUtoTmapping(u5);
    return this.getPoint(t4, optionalTarget);
  }
  // Get sequence of points using getPoint( t )
  getPoints(divisions = 5) {
    const points = [];
    for (let d2 = 0; d2 <= divisions; d2++) {
      points.push(this.getPoint(d2 / divisions));
    }
    return points;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(divisions = 5) {
    const points = [];
    for (let d2 = 0; d2 <= divisions; d2++) {
      points.push(this.getPointAt(d2 / divisions));
    }
    return points;
  }
  // Get total curve arc length
  getLength() {
    const lengths = this.getLengths();
    return lengths[lengths.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(divisions = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = false;
    const cache2 = [];
    let current, last = this.getPoint(0);
    let sum3 = 0;
    cache2.push(0);
    for (let p2 = 1; p2 <= divisions; p2++) {
      current = this.getPoint(p2 / divisions);
      sum3 += current.distanceTo(last);
      cache2.push(sum3);
      last = current;
    }
    this.cacheArcLengths = cache2;
    return cache2;
  }
  updateArcLengths() {
    this.needsUpdate = true;
    this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(u5, distance3) {
    const arcLengths = this.getLengths();
    let i2 = 0;
    const il = arcLengths.length;
    let targetArcLength;
    if (distance3) {
      targetArcLength = distance3;
    } else {
      targetArcLength = u5 * arcLengths[il - 1];
    }
    let low = 0, high = il - 1, comparison;
    while (low <= high) {
      i2 = Math.floor(low + (high - low) / 2);
      comparison = arcLengths[i2] - targetArcLength;
      if (comparison < 0) {
        low = i2 + 1;
      } else if (comparison > 0) {
        high = i2 - 1;
      } else {
        high = i2;
        break;
      }
    }
    i2 = high;
    if (arcLengths[i2] === targetArcLength) {
      return i2 / (il - 1);
    }
    const lengthBefore = arcLengths[i2];
    const lengthAfter = arcLengths[i2 + 1];
    const segmentLength = lengthAfter - lengthBefore;
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    const t4 = (i2 + segmentFraction) / (il - 1);
    return t4;
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(t4, optionalTarget) {
    const delta = 1e-4;
    let t13 = t4 - delta;
    let t22 = t4 + delta;
    if (t13 < 0) t13 = 0;
    if (t22 > 1) t22 = 1;
    const pt1 = this.getPoint(t13);
    const pt2 = this.getPoint(t22);
    const tangent = optionalTarget || (pt1.isVector2 ? new Vector2() : new Vector3());
    tangent.copy(pt2).sub(pt1).normalize();
    return tangent;
  }
  getTangentAt(u5, optionalTarget) {
    const t4 = this.getUtoTmapping(u5);
    return this.getTangent(t4, optionalTarget);
  }
  computeFrenetFrames(segments, closed) {
    const normal2 = new Vector3();
    const tangents = [];
    const normals = [];
    const binormals = [];
    const vec5 = new Vector3();
    const mat = new Matrix4();
    for (let i2 = 0; i2 <= segments; i2++) {
      const u5 = i2 / segments;
      tangents[i2] = this.getTangentAt(u5, new Vector3());
    }
    normals[0] = new Vector3();
    binormals[0] = new Vector3();
    let min4 = Number.MAX_VALUE;
    const tx = Math.abs(tangents[0].x);
    const ty = Math.abs(tangents[0].y);
    const tz = Math.abs(tangents[0].z);
    if (tx <= min4) {
      min4 = tx;
      normal2.set(1, 0, 0);
    }
    if (ty <= min4) {
      min4 = ty;
      normal2.set(0, 1, 0);
    }
    if (tz <= min4) {
      normal2.set(0, 0, 1);
    }
    vec5.crossVectors(tangents[0], normal2).normalize();
    normals[0].crossVectors(tangents[0], vec5);
    binormals[0].crossVectors(tangents[0], normals[0]);
    for (let i2 = 1; i2 <= segments; i2++) {
      normals[i2] = normals[i2 - 1].clone();
      binormals[i2] = binormals[i2 - 1].clone();
      vec5.crossVectors(tangents[i2 - 1], tangents[i2]);
      if (vec5.length() > Number.EPSILON) {
        vec5.normalize();
        const theta = Math.acos(clamp(tangents[i2 - 1].dot(tangents[i2]), -1, 1));
        normals[i2].applyMatrix4(mat.makeRotationAxis(vec5, theta));
      }
      binormals[i2].crossVectors(tangents[i2], normals[i2]);
    }
    if (closed === true) {
      let theta = Math.acos(clamp(normals[0].dot(normals[segments]), -1, 1));
      theta /= segments;
      if (tangents[0].dot(vec5.crossVectors(normals[0], normals[segments])) > 0) {
        theta = -theta;
      }
      for (let i2 = 1; i2 <= segments; i2++) {
        normals[i2].applyMatrix4(mat.makeRotationAxis(tangents[i2], theta * i2));
        binormals[i2].crossVectors(tangents[i2], normals[i2]);
      }
    }
    return {
      tangents,
      normals,
      binormals
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.arcLengthDivisions = source.arcLengthDivisions;
    return this;
  }
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    data.arcLengthDivisions = this.arcLengthDivisions;
    data.type = this.type;
    return data;
  }
  fromJSON(json) {
    this.arcLengthDivisions = json.arcLengthDivisions;
    return this;
  }
};
var EllipseCurve = class extends Curve {
  constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
    super();
    this.isEllipseCurve = true;
    this.type = "EllipseCurve";
    this.aX = aX;
    this.aY = aY;
    this.xRadius = xRadius;
    this.yRadius = yRadius;
    this.aStartAngle = aStartAngle;
    this.aEndAngle = aEndAngle;
    this.aClockwise = aClockwise;
    this.aRotation = aRotation;
  }
  getPoint(t4, optionalTarget = new Vector2()) {
    const point2 = optionalTarget;
    const twoPi = Math.PI * 2;
    let deltaAngle = this.aEndAngle - this.aStartAngle;
    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
    while (deltaAngle < 0) deltaAngle += twoPi;
    while (deltaAngle > twoPi) deltaAngle -= twoPi;
    if (deltaAngle < Number.EPSILON) {
      if (samePoints) {
        deltaAngle = 0;
      } else {
        deltaAngle = twoPi;
      }
    }
    if (this.aClockwise === true && !samePoints) {
      if (deltaAngle === twoPi) {
        deltaAngle = -twoPi;
      } else {
        deltaAngle = deltaAngle - twoPi;
      }
    }
    const angle2 = this.aStartAngle + t4 * deltaAngle;
    let x2 = this.aX + this.xRadius * Math.cos(angle2);
    let y2 = this.aY + this.yRadius * Math.sin(angle2);
    if (this.aRotation !== 0) {
      const cos4 = Math.cos(this.aRotation);
      const sin4 = Math.sin(this.aRotation);
      const tx = x2 - this.aX;
      const ty = y2 - this.aY;
      x2 = tx * cos4 - ty * sin4 + this.aX;
      y2 = tx * sin4 + ty * cos4 + this.aY;
    }
    return point2.set(x2, y2);
  }
  copy(source) {
    super.copy(source);
    this.aX = source.aX;
    this.aY = source.aY;
    this.xRadius = source.xRadius;
    this.yRadius = source.yRadius;
    this.aStartAngle = source.aStartAngle;
    this.aEndAngle = source.aEndAngle;
    this.aClockwise = source.aClockwise;
    this.aRotation = source.aRotation;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.aX = this.aX;
    data.aY = this.aY;
    data.xRadius = this.xRadius;
    data.yRadius = this.yRadius;
    data.aStartAngle = this.aStartAngle;
    data.aEndAngle = this.aEndAngle;
    data.aClockwise = this.aClockwise;
    data.aRotation = this.aRotation;
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.aX = json.aX;
    this.aY = json.aY;
    this.xRadius = json.xRadius;
    this.yRadius = json.yRadius;
    this.aStartAngle = json.aStartAngle;
    this.aEndAngle = json.aEndAngle;
    this.aClockwise = json.aClockwise;
    this.aRotation = json.aRotation;
    return this;
  }
};
var ArcCurve = class extends EllipseCurve {
  constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    this.isArcCurve = true;
    this.type = "ArcCurve";
  }
};
function CubicPoly() {
  let c0 = 0, c1 = 0, c22 = 0, c32 = 0;
  function init20(x03, x12, t03, t13) {
    c0 = x03;
    c1 = t03;
    c22 = -3 * x03 + 3 * x12 - 2 * t03 - t13;
    c32 = 2 * x03 - 2 * x12 + t03 + t13;
  }
  return {
    initCatmullRom: function(x03, x12, x2, x3, tension) {
      init20(x12, x2, tension * (x2 - x03), tension * (x3 - x12));
    },
    initNonuniformCatmullRom: function(x03, x12, x2, x3, dt0, dt1, dt2) {
      let t13 = (x12 - x03) / dt0 - (x2 - x03) / (dt0 + dt1) + (x2 - x12) / dt1;
      let t22 = (x2 - x12) / dt1 - (x3 - x12) / (dt1 + dt2) + (x3 - x2) / dt2;
      t13 *= dt1;
      t22 *= dt1;
      init20(x12, x2, t13, t22);
    },
    calc: function(t4) {
      const t22 = t4 * t4;
      const t32 = t22 * t4;
      return c0 + c1 * t4 + c22 * t22 + c32 * t32;
    }
  };
}
var tmp = new Vector3();
var px = new CubicPoly();
var py = new CubicPoly();
var pz = new CubicPoly();
var CatmullRomCurve3 = class extends Curve {
  constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
    super();
    this.isCatmullRomCurve3 = true;
    this.type = "CatmullRomCurve3";
    this.points = points;
    this.closed = closed;
    this.curveType = curveType;
    this.tension = tension;
  }
  getPoint(t4, optionalTarget = new Vector3()) {
    const point2 = optionalTarget;
    const points = this.points;
    const l2 = points.length;
    const p2 = (l2 - (this.closed ? 0 : 1)) * t4;
    let intPoint = Math.floor(p2);
    let weight = p2 - intPoint;
    if (this.closed) {
      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l2) + 1) * l2;
    } else if (weight === 0 && intPoint === l2 - 1) {
      intPoint = l2 - 2;
      weight = 1;
    }
    let p02, p3;
    if (this.closed || intPoint > 0) {
      p02 = points[(intPoint - 1) % l2];
    } else {
      tmp.subVectors(points[0], points[1]).add(points[0]);
      p02 = tmp;
    }
    const p1 = points[intPoint % l2];
    const p22 = points[(intPoint + 1) % l2];
    if (this.closed || intPoint + 2 < l2) {
      p3 = points[(intPoint + 2) % l2];
    } else {
      tmp.subVectors(points[l2 - 1], points[l2 - 2]).add(points[l2 - 1]);
      p3 = tmp;
    }
    if (this.curveType === "centripetal" || this.curveType === "chordal") {
      const pow5 = this.curveType === "chordal" ? 0.5 : 0.25;
      let dt0 = Math.pow(p02.distanceToSquared(p1), pow5);
      let dt1 = Math.pow(p1.distanceToSquared(p22), pow5);
      let dt2 = Math.pow(p22.distanceToSquared(p3), pow5);
      if (dt1 < 1e-4) dt1 = 1;
      if (dt0 < 1e-4) dt0 = dt1;
      if (dt2 < 1e-4) dt2 = dt1;
      px.initNonuniformCatmullRom(p02.x, p1.x, p22.x, p3.x, dt0, dt1, dt2);
      py.initNonuniformCatmullRom(p02.y, p1.y, p22.y, p3.y, dt0, dt1, dt2);
      pz.initNonuniformCatmullRom(p02.z, p1.z, p22.z, p3.z, dt0, dt1, dt2);
    } else if (this.curveType === "catmullrom") {
      px.initCatmullRom(p02.x, p1.x, p22.x, p3.x, this.tension);
      py.initCatmullRom(p02.y, p1.y, p22.y, p3.y, this.tension);
      pz.initCatmullRom(p02.z, p1.z, p22.z, p3.z, this.tension);
    }
    point2.set(
      px.calc(weight),
      py.calc(weight),
      pz.calc(weight)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.points = [];
    for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
      const point2 = source.points[i2];
      this.points.push(point2.clone());
    }
    this.closed = source.closed;
    this.curveType = source.curveType;
    this.tension = source.tension;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.points = [];
    for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
      const point2 = this.points[i2];
      data.points.push(point2.toArray());
    }
    data.closed = this.closed;
    data.curveType = this.curveType;
    data.tension = this.tension;
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.points = [];
    for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
      const point2 = json.points[i2];
      this.points.push(new Vector3().fromArray(point2));
    }
    this.closed = json.closed;
    this.curveType = json.curveType;
    this.tension = json.tension;
    return this;
  }
};
function CatmullRom(t4, p02, p1, p2, p3) {
  const v0 = (p2 - p02) * 0.5;
  const v1 = (p3 - p1) * 0.5;
  const t22 = t4 * t4;
  const t32 = t4 * t22;
  return (2 * p1 - 2 * p2 + v0 + v1) * t32 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t4 + p1;
}
function QuadraticBezierP0(t4, p2) {
  const k2 = 1 - t4;
  return k2 * k2 * p2;
}
function QuadraticBezierP1(t4, p2) {
  return 2 * (1 - t4) * t4 * p2;
}
function QuadraticBezierP2(t4, p2) {
  return t4 * t4 * p2;
}
function QuadraticBezier(t4, p02, p1, p2) {
  return QuadraticBezierP0(t4, p02) + QuadraticBezierP1(t4, p1) + QuadraticBezierP2(t4, p2);
}
function CubicBezierP0(t4, p2) {
  const k2 = 1 - t4;
  return k2 * k2 * k2 * p2;
}
function CubicBezierP1(t4, p2) {
  const k2 = 1 - t4;
  return 3 * k2 * k2 * t4 * p2;
}
function CubicBezierP2(t4, p2) {
  return 3 * (1 - t4) * t4 * t4 * p2;
}
function CubicBezierP3(t4, p2) {
  return t4 * t4 * t4 * p2;
}
function CubicBezier(t4, p02, p1, p2, p3) {
  return CubicBezierP0(t4, p02) + CubicBezierP1(t4, p1) + CubicBezierP2(t4, p2) + CubicBezierP3(t4, p3);
}
var CubicBezierCurve = class extends Curve {
  constructor(v0 = new Vector2(), v1 = new Vector2(), v22 = new Vector2(), v3 = new Vector2()) {
    super();
    this.isCubicBezierCurve = true;
    this.type = "CubicBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
    this.v3 = v3;
  }
  getPoint(t4, optionalTarget = new Vector2()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2, v3 = this.v3;
    point2.set(
      CubicBezier(t4, v0.x, v1.x, v22.x, v3.x),
      CubicBezier(t4, v0.y, v1.y, v22.y, v3.y)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  }
};
var CubicBezierCurve3 = class extends Curve {
  constructor(v0 = new Vector3(), v1 = new Vector3(), v22 = new Vector3(), v3 = new Vector3()) {
    super();
    this.isCubicBezierCurve3 = true;
    this.type = "CubicBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
    this.v3 = v3;
  }
  getPoint(t4, optionalTarget = new Vector3()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2, v3 = this.v3;
    point2.set(
      CubicBezier(t4, v0.x, v1.x, v22.x, v3.x),
      CubicBezier(t4, v0.y, v1.y, v22.y, v3.y),
      CubicBezier(t4, v0.z, v1.z, v22.z, v3.z)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  }
};
var LineCurve = class extends Curve {
  constructor(v1 = new Vector2(), v22 = new Vector2()) {
    super();
    this.isLineCurve = true;
    this.type = "LineCurve";
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector2()) {
    const point2 = optionalTarget;
    if (t4 === 1) {
      point2.copy(this.v2);
    } else {
      point2.copy(this.v2).sub(this.v1);
      point2.multiplyScalar(t4).add(this.v1);
    }
    return point2;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(u5, optionalTarget) {
    return this.getPoint(u5, optionalTarget);
  }
  getTangent(t4, optionalTarget = new Vector2()) {
    return optionalTarget.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(u5, optionalTarget) {
    return this.getTangent(u5, optionalTarget);
  }
  copy(source) {
    super.copy(source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var LineCurve3 = class extends Curve {
  constructor(v1 = new Vector3(), v22 = new Vector3()) {
    super();
    this.isLineCurve3 = true;
    this.type = "LineCurve3";
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector3()) {
    const point2 = optionalTarget;
    if (t4 === 1) {
      point2.copy(this.v2);
    } else {
      point2.copy(this.v2).sub(this.v1);
      point2.multiplyScalar(t4).add(this.v1);
    }
    return point2;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(u5, optionalTarget) {
    return this.getPoint(u5, optionalTarget);
  }
  getTangent(t4, optionalTarget = new Vector3()) {
    return optionalTarget.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(u5, optionalTarget) {
    return this.getTangent(u5, optionalTarget);
  }
  copy(source) {
    super.copy(source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var QuadraticBezierCurve = class extends Curve {
  constructor(v0 = new Vector2(), v1 = new Vector2(), v22 = new Vector2()) {
    super();
    this.isQuadraticBezierCurve = true;
    this.type = "QuadraticBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector2()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2;
    point2.set(
      QuadraticBezier(t4, v0.x, v1.x, v22.x),
      QuadraticBezier(t4, v0.y, v1.y, v22.y)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var QuadraticBezierCurve3 = class extends Curve {
  constructor(v0 = new Vector3(), v1 = new Vector3(), v22 = new Vector3()) {
    super();
    this.isQuadraticBezierCurve3 = true;
    this.type = "QuadraticBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector3()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2;
    point2.set(
      QuadraticBezier(t4, v0.x, v1.x, v22.x),
      QuadraticBezier(t4, v0.y, v1.y, v22.y),
      QuadraticBezier(t4, v0.z, v1.z, v22.z)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var SplineCurve = class extends Curve {
  constructor(points = []) {
    super();
    this.isSplineCurve = true;
    this.type = "SplineCurve";
    this.points = points;
  }
  getPoint(t4, optionalTarget = new Vector2()) {
    const point2 = optionalTarget;
    const points = this.points;
    const p2 = (points.length - 1) * t4;
    const intPoint = Math.floor(p2);
    const weight = p2 - intPoint;
    const p02 = points[intPoint === 0 ? intPoint : intPoint - 1];
    const p1 = points[intPoint];
    const p22 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
    point2.set(
      CatmullRom(weight, p02.x, p1.x, p22.x, p3.x),
      CatmullRom(weight, p02.y, p1.y, p22.y, p3.y)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.points = [];
    for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
      const point2 = source.points[i2];
      this.points.push(point2.clone());
    }
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.points = [];
    for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
      const point2 = this.points[i2];
      data.points.push(point2.toArray());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.points = [];
    for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
      const point2 = json.points[i2];
      this.points.push(new Vector2().fromArray(point2));
    }
    return this;
  }
};
var Curves = Object.freeze({
  __proto__: null,
  ArcCurve,
  CatmullRomCurve3,
  CubicBezierCurve,
  CubicBezierCurve3,
  EllipseCurve,
  LineCurve,
  LineCurve3,
  QuadraticBezierCurve,
  QuadraticBezierCurve3,
  SplineCurve
});
var CurvePath = class extends Curve {
  constructor() {
    super();
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = false;
  }
  add(curve) {
    this.curves.push(curve);
  }
  closePath() {
    const startPoint = this.curves[0].getPoint(0);
    const endPoint = this.curves[this.curves.length - 1].getPoint(1);
    if (!startPoint.equals(endPoint)) {
      const lineType = startPoint.isVector2 === true ? "LineCurve" : "LineCurve3";
      this.curves.push(new Curves[lineType](endPoint, startPoint));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(t4, optionalTarget) {
    const d2 = t4 * this.getLength();
    const curveLengths = this.getCurveLengths();
    let i2 = 0;
    while (i2 < curveLengths.length) {
      if (curveLengths[i2] >= d2) {
        const diff = curveLengths[i2] - d2;
        const curve = this.curves[i2];
        const segmentLength = curve.getLength();
        const u5 = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
        return curve.getPointAt(u5, optionalTarget);
      }
      i2++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const lens = this.getCurveLengths();
    return lens[lens.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    const lengths = [];
    let sums = 0;
    for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
      sums += this.curves[i2].getLength();
      lengths.push(sums);
    }
    this.cacheLengths = lengths;
    return lengths;
  }
  getSpacedPoints(divisions = 40) {
    const points = [];
    for (let i2 = 0; i2 <= divisions; i2++) {
      points.push(this.getPoint(i2 / divisions));
    }
    if (this.autoClose) {
      points.push(points[0]);
    }
    return points;
  }
  getPoints(divisions = 12) {
    const points = [];
    let last;
    for (let i2 = 0, curves = this.curves; i2 < curves.length; i2++) {
      const curve = curves[i2];
      const resolution3 = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
      const pts = curve.getPoints(resolution3);
      for (let j2 = 0; j2 < pts.length; j2++) {
        const point2 = pts[j2];
        if (last && last.equals(point2)) continue;
        points.push(point2);
        last = point2;
      }
    }
    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
      points.push(points[0]);
    }
    return points;
  }
  copy(source) {
    super.copy(source);
    this.curves = [];
    for (let i2 = 0, l2 = source.curves.length; i2 < l2; i2++) {
      const curve = source.curves[i2];
      this.curves.push(curve.clone());
    }
    this.autoClose = source.autoClose;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.autoClose = this.autoClose;
    data.curves = [];
    for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
      const curve = this.curves[i2];
      data.curves.push(curve.toJSON());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.autoClose = json.autoClose;
    this.curves = [];
    for (let i2 = 0, l2 = json.curves.length; i2 < l2; i2++) {
      const curve = json.curves[i2];
      this.curves.push(new Curves[curve.type]().fromJSON(curve));
    }
    return this;
  }
};
var Path = class extends CurvePath {
  constructor(points) {
    super();
    this.type = "Path";
    this.currentPoint = new Vector2();
    if (points) {
      this.setFromPoints(points);
    }
  }
  setFromPoints(points) {
    this.moveTo(points[0].x, points[0].y);
    for (let i2 = 1, l2 = points.length; i2 < l2; i2++) {
      this.lineTo(points[i2].x, points[i2].y);
    }
    return this;
  }
  moveTo(x2, y2) {
    this.currentPoint.set(x2, y2);
    return this;
  }
  lineTo(x2, y2) {
    const curve = new LineCurve(this.currentPoint.clone(), new Vector2(x2, y2));
    this.curves.push(curve);
    this.currentPoint.set(x2, y2);
    return this;
  }
  quadraticCurveTo(aCPx, aCPy, aX, aY) {
    const curve = new QuadraticBezierCurve(
      this.currentPoint.clone(),
      new Vector2(aCPx, aCPy),
      new Vector2(aX, aY)
    );
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  }
  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    const curve = new CubicBezierCurve(
      this.currentPoint.clone(),
      new Vector2(aCP1x, aCP1y),
      new Vector2(aCP2x, aCP2y),
      new Vector2(aX, aY)
    );
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  }
  splineThru(pts) {
    const npts = [this.currentPoint.clone()].concat(pts);
    const curve = new SplineCurve(npts);
    this.curves.push(curve);
    this.currentPoint.copy(pts[pts.length - 1]);
    return this;
  }
  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    const x03 = this.currentPoint.x;
    const y03 = this.currentPoint.y;
    this.absarc(
      aX + x03,
      aY + y03,
      aRadius,
      aStartAngle,
      aEndAngle,
      aClockwise
    );
    return this;
  }
  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  }
  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const x03 = this.currentPoint.x;
    const y03 = this.currentPoint.y;
    this.absellipse(aX + x03, aY + y03, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    return this;
  }
  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const curve = new EllipseCurve(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    if (this.curves.length > 0) {
      const firstPoint = curve.getPoint(0);
      if (!firstPoint.equals(this.currentPoint)) {
        this.lineTo(firstPoint.x, firstPoint.y);
      }
    }
    this.curves.push(curve);
    const lastPoint = curve.getPoint(1);
    this.currentPoint.copy(lastPoint);
    return this;
  }
  copy(source) {
    super.copy(source);
    this.currentPoint.copy(source.currentPoint);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.currentPoint = this.currentPoint.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.currentPoint.fromArray(json.currentPoint);
    return this;
  }
};
var LatheGeometry = class _LatheGeometry extends BufferGeometry {
  constructor(points = [new Vector2(0, -0.5), new Vector2(0.5, 0), new Vector2(0, 0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
    super();
    this.type = "LatheGeometry";
    this.parameters = {
      points,
      segments,
      phiStart,
      phiLength
    };
    segments = Math.floor(segments);
    phiLength = clamp(phiLength, 0, Math.PI * 2);
    const indices = [];
    const vertices = [];
    const uvs = [];
    const initNormals = [];
    const normals = [];
    const inverseSegments = 1 / segments;
    const vertex2 = new Vector3();
    const uv2 = new Vector2();
    const normal2 = new Vector3();
    const curNormal = new Vector3();
    const prevNormal = new Vector3();
    let dx = 0;
    let dy = 0;
    for (let j2 = 0; j2 <= points.length - 1; j2++) {
      switch (j2) {
        case 0:
          dx = points[j2 + 1].x - points[j2].x;
          dy = points[j2 + 1].y - points[j2].y;
          normal2.x = dy * 1;
          normal2.y = -dx;
          normal2.z = dy * 0;
          prevNormal.copy(normal2);
          normal2.normalize();
          initNormals.push(normal2.x, normal2.y, normal2.z);
          break;
        case points.length - 1:
          initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
          break;
        default:
          dx = points[j2 + 1].x - points[j2].x;
          dy = points[j2 + 1].y - points[j2].y;
          normal2.x = dy * 1;
          normal2.y = -dx;
          normal2.z = dy * 0;
          curNormal.copy(normal2);
          normal2.x += prevNormal.x;
          normal2.y += prevNormal.y;
          normal2.z += prevNormal.z;
          normal2.normalize();
          initNormals.push(normal2.x, normal2.y, normal2.z);
          prevNormal.copy(curNormal);
      }
    }
    for (let i2 = 0; i2 <= segments; i2++) {
      const phi = phiStart + i2 * inverseSegments * phiLength;
      const sin4 = Math.sin(phi);
      const cos4 = Math.cos(phi);
      for (let j2 = 0; j2 <= points.length - 1; j2++) {
        vertex2.x = points[j2].x * sin4;
        vertex2.y = points[j2].y;
        vertex2.z = points[j2].x * cos4;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        uv2.x = i2 / segments;
        uv2.y = j2 / (points.length - 1);
        uvs.push(uv2.x, uv2.y);
        const x2 = initNormals[3 * j2 + 0] * sin4;
        const y2 = initNormals[3 * j2 + 1];
        const z2 = initNormals[3 * j2 + 0] * cos4;
        normals.push(x2, y2, z2);
      }
    }
    for (let i2 = 0; i2 < segments; i2++) {
      for (let j2 = 0; j2 < points.length - 1; j2++) {
        const base = j2 + i2 * points.length;
        const a2 = base;
        const b = base + points.length;
        const c4 = base + points.length + 1;
        const d2 = base + 1;
        indices.push(a2, b, d2);
        indices.push(c4, d2, b);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
  }
};
var CapsuleGeometry = class _CapsuleGeometry extends LatheGeometry {
  constructor(radius = 1, length2 = 1, capSegments = 4, radialSegments = 8) {
    const path = new Path();
    path.absarc(0, -length2 / 2, radius, Math.PI * 1.5, 0);
    path.absarc(0, length2 / 2, radius, 0, Math.PI * 0.5);
    super(path.getPoints(capSegments), radialSegments);
    this.type = "CapsuleGeometry";
    this.parameters = {
      radius,
      length: length2,
      capSegments,
      radialSegments
    };
  }
  static fromJSON(data) {
    return new _CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
  }
};
var CircleGeometry = class _CircleGeometry extends BufferGeometry {
  constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CircleGeometry";
    this.parameters = {
      radius,
      segments,
      thetaStart,
      thetaLength
    };
    segments = Math.max(3, segments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex2 = new Vector3();
    const uv2 = new Vector2();
    vertices.push(0, 0, 0);
    normals.push(0, 0, 1);
    uvs.push(0.5, 0.5);
    for (let s2 = 0, i2 = 3; s2 <= segments; s2++, i2 += 3) {
      const segment = thetaStart + s2 / segments * thetaLength;
      vertex2.x = radius * Math.cos(segment);
      vertex2.y = radius * Math.sin(segment);
      vertices.push(vertex2.x, vertex2.y, vertex2.z);
      normals.push(0, 0, 1);
      uv2.x = (vertices[i2] / radius + 1) / 2;
      uv2.y = (vertices[i2 + 1] / radius + 1) / 2;
      uvs.push(uv2.x, uv2.y);
    }
    for (let i2 = 1; i2 <= segments; i2++) {
      indices.push(i2, i2 + 1, 0);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
  }
};
var CylinderGeometry = class _CylinderGeometry extends BufferGeometry {
  constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    const scope = this;
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let index7 = 0;
    const indexArray = [];
    const halfHeight = height / 2;
    let groupStart = 0;
    generateTorso();
    if (openEnded === false) {
      if (radiusTop > 0) generateCap(true);
      if (radiusBottom > 0) generateCap(false);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateTorso() {
      const normal2 = new Vector3();
      const vertex2 = new Vector3();
      let groupCount = 0;
      const slope = (radiusBottom - radiusTop) / height;
      for (let y2 = 0; y2 <= heightSegments; y2++) {
        const indexRow = [];
        const v3 = y2 / heightSegments;
        const radius = v3 * (radiusBottom - radiusTop) + radiusTop;
        for (let x2 = 0; x2 <= radialSegments; x2++) {
          const u5 = x2 / radialSegments;
          const theta = u5 * thetaLength + thetaStart;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          vertex2.x = radius * sinTheta;
          vertex2.y = -v3 * height + halfHeight;
          vertex2.z = radius * cosTheta;
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normal2.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal2.x, normal2.y, normal2.z);
          uvs.push(u5, 1 - v3);
          indexRow.push(index7++);
        }
        indexArray.push(indexRow);
      }
      for (let x2 = 0; x2 < radialSegments; x2++) {
        for (let y2 = 0; y2 < heightSegments; y2++) {
          const a2 = indexArray[y2][x2];
          const b = indexArray[y2 + 1][x2];
          const c4 = indexArray[y2 + 1][x2 + 1];
          const d2 = indexArray[y2][x2 + 1];
          indices.push(a2, b, d2);
          indices.push(b, c4, d2);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, 0);
      groupStart += groupCount;
    }
    function generateCap(top) {
      const centerIndexStart = index7;
      const uv2 = new Vector2();
      const vertex2 = new Vector3();
      let groupCount = 0;
      const radius = top === true ? radiusTop : radiusBottom;
      const sign6 = top === true ? 1 : -1;
      for (let x2 = 1; x2 <= radialSegments; x2++) {
        vertices.push(0, halfHeight * sign6, 0);
        normals.push(0, sign6, 0);
        uvs.push(0.5, 0.5);
        index7++;
      }
      const centerIndexEnd = index7;
      for (let x2 = 0; x2 <= radialSegments; x2++) {
        const u5 = x2 / radialSegments;
        const theta = u5 * thetaLength + thetaStart;
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);
        vertex2.x = radius * sinTheta;
        vertex2.y = halfHeight * sign6;
        vertex2.z = radius * cosTheta;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, sign6, 0);
        uv2.x = cosTheta * 0.5 + 0.5;
        uv2.y = sinTheta * 0.5 * sign6 + 0.5;
        uvs.push(uv2.x, uv2.y);
        index7++;
      }
      for (let x2 = 0; x2 < radialSegments; x2++) {
        const c4 = centerIndexStart + x2;
        const i2 = centerIndexEnd + x2;
        if (top === true) {
          indices.push(i2, i2 + 1, c4);
        } else {
          indices.push(i2 + 1, i2, c4);
        }
        groupCount += 3;
      }
      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
      groupStart += groupCount;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
};
var ConeGeometry = class _ConeGeometry extends CylinderGeometry {
  constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
  static fromJSON(data) {
    return new _ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
};
var PolyhedronGeometry = class _PolyhedronGeometry extends BufferGeometry {
  constructor(vertices = [], indices = [], radius = 1, detail = 0) {
    super();
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    const vertexBuffer = [];
    const uvBuffer = [];
    subdivide(detail);
    applyRadius(radius);
    generateUVs();
    this.setAttribute("position", new Float32BufferAttribute(vertexBuffer, 3));
    this.setAttribute("normal", new Float32BufferAttribute(vertexBuffer.slice(), 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvBuffer, 2));
    if (detail === 0) {
      this.computeVertexNormals();
    } else {
      this.normalizeNormals();
    }
    function subdivide(detail2) {
      const a2 = new Vector3();
      const b = new Vector3();
      const c4 = new Vector3();
      for (let i2 = 0; i2 < indices.length; i2 += 3) {
        getVertexByIndex(indices[i2 + 0], a2);
        getVertexByIndex(indices[i2 + 1], b);
        getVertexByIndex(indices[i2 + 2], c4);
        subdivideFace(a2, b, c4, detail2);
      }
    }
    function subdivideFace(a2, b, c4, detail2) {
      const cols = detail2 + 1;
      const v3 = [];
      for (let i2 = 0; i2 <= cols; i2++) {
        v3[i2] = [];
        const aj = a2.clone().lerp(c4, i2 / cols);
        const bj = b.clone().lerp(c4, i2 / cols);
        const rows = cols - i2;
        for (let j2 = 0; j2 <= rows; j2++) {
          if (j2 === 0 && i2 === cols) {
            v3[i2][j2] = aj;
          } else {
            v3[i2][j2] = aj.clone().lerp(bj, j2 / rows);
          }
        }
      }
      for (let i2 = 0; i2 < cols; i2++) {
        for (let j2 = 0; j2 < 2 * (cols - i2) - 1; j2++) {
          const k2 = Math.floor(j2 / 2);
          if (j2 % 2 === 0) {
            pushVertex(v3[i2][k2 + 1]);
            pushVertex(v3[i2 + 1][k2]);
            pushVertex(v3[i2][k2]);
          } else {
            pushVertex(v3[i2][k2 + 1]);
            pushVertex(v3[i2 + 1][k2 + 1]);
            pushVertex(v3[i2 + 1][k2]);
          }
        }
      }
    }
    function applyRadius(radius2) {
      const vertex2 = new Vector3();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex2.x = vertexBuffer[i2 + 0];
        vertex2.y = vertexBuffer[i2 + 1];
        vertex2.z = vertexBuffer[i2 + 2];
        vertex2.normalize().multiplyScalar(radius2);
        vertexBuffer[i2 + 0] = vertex2.x;
        vertexBuffer[i2 + 1] = vertex2.y;
        vertexBuffer[i2 + 2] = vertex2.z;
      }
    }
    function generateUVs() {
      const vertex2 = new Vector3();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex2.x = vertexBuffer[i2 + 0];
        vertex2.y = vertexBuffer[i2 + 1];
        vertex2.z = vertexBuffer[i2 + 2];
        const u5 = azimuth(vertex2) / 2 / Math.PI + 0.5;
        const v3 = inclination(vertex2) / Math.PI + 0.5;
        uvBuffer.push(u5, 1 - v3);
      }
      correctUVs();
      correctSeam();
    }
    function correctSeam() {
      for (let i2 = 0; i2 < uvBuffer.length; i2 += 6) {
        const x03 = uvBuffer[i2 + 0];
        const x12 = uvBuffer[i2 + 2];
        const x2 = uvBuffer[i2 + 4];
        const max4 = Math.max(x03, x12, x2);
        const min4 = Math.min(x03, x12, x2);
        if (max4 > 0.9 && min4 < 0.1) {
          if (x03 < 0.2) uvBuffer[i2 + 0] += 1;
          if (x12 < 0.2) uvBuffer[i2 + 2] += 1;
          if (x2 < 0.2) uvBuffer[i2 + 4] += 1;
        }
      }
    }
    function pushVertex(vertex2) {
      vertexBuffer.push(vertex2.x, vertex2.y, vertex2.z);
    }
    function getVertexByIndex(index7, vertex2) {
      const stride = index7 * 3;
      vertex2.x = vertices[stride + 0];
      vertex2.y = vertices[stride + 1];
      vertex2.z = vertices[stride + 2];
    }
    function correctUVs() {
      const a2 = new Vector3();
      const b = new Vector3();
      const c4 = new Vector3();
      const centroid = new Vector3();
      const uvA = new Vector2();
      const uvB = new Vector2();
      const uvC = new Vector2();
      for (let i2 = 0, j2 = 0; i2 < vertexBuffer.length; i2 += 9, j2 += 6) {
        a2.set(vertexBuffer[i2 + 0], vertexBuffer[i2 + 1], vertexBuffer[i2 + 2]);
        b.set(vertexBuffer[i2 + 3], vertexBuffer[i2 + 4], vertexBuffer[i2 + 5]);
        c4.set(vertexBuffer[i2 + 6], vertexBuffer[i2 + 7], vertexBuffer[i2 + 8]);
        uvA.set(uvBuffer[j2 + 0], uvBuffer[j2 + 1]);
        uvB.set(uvBuffer[j2 + 2], uvBuffer[j2 + 3]);
        uvC.set(uvBuffer[j2 + 4], uvBuffer[j2 + 5]);
        centroid.copy(a2).add(b).add(c4).divideScalar(3);
        const azi = azimuth(centroid);
        correctUV(uvA, j2 + 0, a2, azi);
        correctUV(uvB, j2 + 2, b, azi);
        correctUV(uvC, j2 + 4, c4, azi);
      }
    }
    function correctUV(uv2, stride, vector, azimuth2) {
      if (azimuth2 < 0 && uv2.x === 1) {
        uvBuffer[stride] = uv2.x - 1;
      }
      if (vector.x === 0 && vector.z === 0) {
        uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
      }
    }
    function azimuth(vector) {
      return Math.atan2(vector.z, -vector.x);
    }
    function inclination(vector) {
      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
  }
};
var DodecahedronGeometry = class _DodecahedronGeometry extends PolyhedronGeometry {
  constructor(radius = 1, detail = 0) {
    const t4 = (1 + Math.sqrt(5)) / 2;
    const r2 = 1 / t4;
    const vertices = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -r2,
      -t4,
      0,
      -r2,
      t4,
      0,
      r2,
      -t4,
      0,
      r2,
      t4,
      // (±1/φ, ±φ, 0)
      -r2,
      -t4,
      0,
      -r2,
      t4,
      0,
      r2,
      -t4,
      0,
      r2,
      t4,
      0,
      // (±φ, 0, ±1/φ)
      -t4,
      0,
      -r2,
      t4,
      0,
      -r2,
      -t4,
      0,
      r2,
      t4,
      0,
      r2
    ];
    const indices = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(vertices, indices, radius, detail);
    this.type = "DodecahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _DodecahedronGeometry(data.radius, data.detail);
  }
};
var _v0 = new Vector3();
var _v1$1 = new Vector3();
var _normal = new Vector3();
var _triangle = new Triangle();
var EdgesGeometry = class extends BufferGeometry {
  constructor(geometry = null, thresholdAngle = 1) {
    super();
    this.type = "EdgesGeometry";
    this.parameters = {
      geometry,
      thresholdAngle
    };
    if (geometry !== null) {
      const precisionPoints = 4;
      const precision = Math.pow(10, precisionPoints);
      const thresholdDot = Math.cos(DEG2RAD * thresholdAngle);
      const indexAttr = geometry.getIndex();
      const positionAttr = geometry.getAttribute("position");
      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
      const indexArr = [0, 0, 0];
      const vertKeys = ["a", "b", "c"];
      const hashes = new Array(3);
      const edgeData = {};
      const vertices = [];
      for (let i2 = 0; i2 < indexCount; i2 += 3) {
        if (indexAttr) {
          indexArr[0] = indexAttr.getX(i2);
          indexArr[1] = indexAttr.getX(i2 + 1);
          indexArr[2] = indexAttr.getX(i2 + 2);
        } else {
          indexArr[0] = i2;
          indexArr[1] = i2 + 1;
          indexArr[2] = i2 + 2;
        }
        const { a: a2, b, c: c4 } = _triangle;
        a2.fromBufferAttribute(positionAttr, indexArr[0]);
        b.fromBufferAttribute(positionAttr, indexArr[1]);
        c4.fromBufferAttribute(positionAttr, indexArr[2]);
        _triangle.getNormal(_normal);
        hashes[0] = `${Math.round(a2.x * precision)},${Math.round(a2.y * precision)},${Math.round(a2.z * precision)}`;
        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
        hashes[2] = `${Math.round(c4.x * precision)},${Math.round(c4.y * precision)},${Math.round(c4.z * precision)}`;
        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
          continue;
        }
        for (let j2 = 0; j2 < 3; j2++) {
          const jNext = (j2 + 1) % 3;
          const vecHash0 = hashes[j2];
          const vecHash1 = hashes[jNext];
          const v0 = _triangle[vertKeys[j2]];
          const v1 = _triangle[vertKeys[jNext]];
          const hash2 = `${vecHash0}_${vecHash1}`;
          const reverseHash = `${vecHash1}_${vecHash0}`;
          if (reverseHash in edgeData && edgeData[reverseHash]) {
            if (_normal.dot(edgeData[reverseHash].normal) <= thresholdDot) {
              vertices.push(v0.x, v0.y, v0.z);
              vertices.push(v1.x, v1.y, v1.z);
            }
            edgeData[reverseHash] = null;
          } else if (!(hash2 in edgeData)) {
            edgeData[hash2] = {
              index0: indexArr[j2],
              index1: indexArr[jNext],
              normal: _normal.clone()
            };
          }
        }
      }
      for (const key in edgeData) {
        if (edgeData[key]) {
          const { index0, index1 } = edgeData[key];
          _v0.fromBufferAttribute(positionAttr, index0);
          _v1$1.fromBufferAttribute(positionAttr, index1);
          vertices.push(_v0.x, _v0.y, _v0.z);
          vertices.push(_v1$1.x, _v1$1.y, _v1$1.z);
        }
      }
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
};
var Shape = class extends Path {
  constructor(points) {
    super(points);
    this.uuid = generateUUID();
    this.type = "Shape";
    this.holes = [];
  }
  getPointsHoles(divisions) {
    const holesPts = [];
    for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
      holesPts[i2] = this.holes[i2].getPoints(divisions);
    }
    return holesPts;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(divisions) {
    return {
      shape: this.getPoints(divisions),
      holes: this.getPointsHoles(divisions)
    };
  }
  copy(source) {
    super.copy(source);
    this.holes = [];
    for (let i2 = 0, l2 = source.holes.length; i2 < l2; i2++) {
      const hole = source.holes[i2];
      this.holes.push(hole.clone());
    }
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.uuid = this.uuid;
    data.holes = [];
    for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
      const hole = this.holes[i2];
      data.holes.push(hole.toJSON());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.uuid = json.uuid;
    this.holes = [];
    for (let i2 = 0, l2 = json.holes.length; i2 < l2; i2++) {
      const hole = json.holes[i2];
      this.holes.push(new Path().fromJSON(hole));
    }
    return this;
  }
};
var Earcut = {
  triangulate: function(data, holeIndices, dim = 2) {
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    let outerNode = linkedList(data, 0, outerLen, dim, true);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    let minX, minY, maxX, maxY, x2, y2, invSize;
    if (hasHoles) outerNode = eliminateHoles(data, holeIndices, outerNode, dim);
    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];
      for (let i2 = dim; i2 < outerLen; i2 += dim) {
        x2 = data[i2];
        y2 = data[i2 + 1];
        if (x2 < minX) minX = x2;
        if (y2 < minY) minY = y2;
        if (x2 > maxX) maxX = x2;
        if (y2 > maxY) maxY = y2;
      }
      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
  }
};
function linkedList(data, start, end, dim, clockwise) {
  let i2, last;
  if (clockwise === signedArea(data, start, end, dim) > 0) {
    for (i2 = start; i2 < end; i2 += dim) last = insertNode(i2, data[i2], data[i2 + 1], last);
  } else {
    for (i2 = end - dim; i2 >= start; i2 -= dim) last = insertNode(i2, data[i2], data[i2 + 1], last);
  }
  if (last && equals(last, last.next)) {
    removeNode(last);
    last = last.next;
  }
  return last;
}
function filterPoints(start, end) {
  if (!start) return start;
  if (!end) end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals(p2, p2.next) || area(p2.prev, p2, p2.next) === 0)) {
      removeNode(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next) break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return;
  if (!pass && invSize) indexCurve(ear, minX, minY, invSize);
  let stop = ear, prev, next;
  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;
    if (invSize ? isEarHashed(ear, minX, minY, invSize) : isEar(ear)) {
      triangles.push(prev.i / dim | 0);
      triangles.push(ear.i / dim | 0);
      triangles.push(next.i / dim | 0);
      removeNode(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked(filterPoints(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections(filterPoints(ear), triangles, dim);
        earcutLinked(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar(ear) {
  const a2 = ear.prev, b = ear, c4 = ear.next;
  if (area(a2, b, c4) >= 0) return false;
  const ax = a2.x, bx = b.x, cx = c4.x, ay = a2.y, by = b.y, cy = c4.y;
  const x03 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y03 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x12 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y12 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  let p2 = c4.next;
  while (p2 !== a2) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed(ear, minX, minY, invSize) {
  const a2 = ear.prev, b = ear, c4 = ear.next;
  if (area(a2, b, c4) >= 0) return false;
  const ax = a2.x, bx = b.x, cx = c4.x, ay = a2.y, by = b.y, cy = c4.y;
  const x03 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y03 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x12 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y12 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  const minZ = zOrder(x03, y03, minX, minY, invSize), maxZ = zOrder(x12, y12, minX, minY, invSize);
  let p2 = ear.prevZ, n2 = ear.nextZ;
  while (p2 && p2.z >= minZ && n2 && n2.z <= maxZ) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && p2 !== a2 && p2 !== c4 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
    if (n2.x >= x03 && n2.x <= x12 && n2.y >= y03 && n2.y <= y12 && n2 !== a2 && n2 !== c4 && pointInTriangle(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0) return false;
    n2 = n2.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && p2 !== a2 && p2 !== c4 && pointInTriangle(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
  }
  while (n2 && n2.z <= maxZ) {
    if (n2.x >= x03 && n2.x <= x12 && n2.y >= y03 && n2.y <= y12 && n2 !== a2 && n2 !== c4 && pointInTriangle(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area(n2.prev, n2, n2.next) >= 0) return false;
    n2 = n2.nextZ;
  }
  return true;
}
function cureLocalIntersections(start, triangles, dim) {
  let p2 = start;
  do {
    const a2 = p2.prev, b = p2.next.next;
    if (!equals(a2, b) && intersects(a2, p2, p2.next, b) && locallyInside(a2, b) && locallyInside(b, a2)) {
      triangles.push(a2.i / dim | 0);
      triangles.push(p2.i / dim | 0);
      triangles.push(b.i / dim | 0);
      removeNode(p2);
      removeNode(p2.next);
      p2 = start = b;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints(p2);
}
function splitEarcut(start, triangles, dim, minX, minY, invSize) {
  let a2 = start;
  do {
    let b = a2.next.next;
    while (b !== a2.prev) {
      if (a2.i !== b.i && isValidDiagonal(a2, b)) {
        let c4 = splitPolygon(a2, b);
        a2 = filterPoints(a2, a2.next);
        c4 = filterPoints(c4, c4.next);
        earcutLinked(a2, triangles, dim, minX, minY, invSize, 0);
        earcutLinked(c4, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a2 = a2.next;
  } while (a2 !== start);
}
function eliminateHoles(data, holeIndices, outerNode, dim) {
  const queue = [];
  let i2, len, start, end, list;
  for (i2 = 0, len = holeIndices.length; i2 < len; i2++) {
    start = holeIndices[i2] * dim;
    end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
    list = linkedList(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost(list));
  }
  queue.sort(compareX);
  for (i2 = 0; i2 < queue.length; i2++) {
    outerNode = eliminateHole(queue[i2], outerNode);
  }
  return outerNode;
}
function compareX(a2, b) {
  return a2.x - b.x;
}
function eliminateHole(hole, outerNode) {
  const bridge = findHoleBridge(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon(bridge, hole);
  filterPoints(bridgeReverse, bridgeReverse.next);
  return filterPoints(bridge, bridge.next);
}
function findHoleBridge(hole, outerNode) {
  let p2 = outerNode, qx = -Infinity, m2;
  const hx = hole.x, hy = hole.y;
  do {
    if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x2 = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x2 <= hx && x2 > qx) {
        qx = x2;
        m2 = p2.x < p2.next.x ? p2 : p2.next;
        if (x2 === hx) return m2;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m2) return null;
  const stop = m2, mx = m2.x, my = m2.y;
  let tanMin = Infinity, tan3;
  p2 = m2;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      tan3 = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside(p2, hole) && (tan3 < tanMin || tan3 === tanMin && (p2.x > m2.x || p2.x === m2.x && sectorContainsSector(m2, p2)))) {
        m2 = p2;
        tanMin = tan3;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m2;
}
function sectorContainsSector(m2, p2) {
  return area(m2.prev, m2, p2.prev) < 0 && area(p2.next, m2, m2.next) < 0;
}
function indexCurve(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === 0) p2.z = zOrder(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked(p2);
}
function sortLinked(list) {
  let i2, p2, q2, e3, tail, numMerges, pSize, qSize, inSize = 1;
  do {
    p2 = list;
    list = null;
    tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      q2 = p2;
      pSize = 0;
      for (i2 = 0; i2 < inSize; i2++) {
        pSize++;
        q2 = q2.nextZ;
        if (!q2) break;
      }
      qSize = inSize;
      while (pSize > 0 || qSize > 0 && q2) {
        if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
          e3 = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e3 = q2;
          q2 = q2.nextZ;
          qSize--;
        }
        if (tail) tail.nextZ = e3;
        else list = e3;
        e3.prevZ = tail;
        tail = e3;
      }
      p2 = q2;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder(x2, y2, minX, minY, invSize) {
  x2 = (x2 - minX) * invSize | 0;
  y2 = (y2 - minY) * invSize | 0;
  x2 = (x2 | x2 << 8) & 16711935;
  x2 = (x2 | x2 << 4) & 252645135;
  x2 = (x2 | x2 << 2) & 858993459;
  x2 = (x2 | x2 << 1) & 1431655765;
  y2 = (y2 | y2 << 8) & 16711935;
  y2 = (y2 | y2 << 4) & 252645135;
  y2 = (y2 | y2 << 2) & 858993459;
  y2 = (y2 | y2 << 1) & 1431655765;
  return x2 | y2 << 1;
}
function getLeftmost(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y) leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle(ax, ay, bx, by, cx, cy, px3, py3) {
  return (cx - px3) * (ay - py3) >= (ax - px3) * (cy - py3) && (ax - px3) * (by - py3) >= (bx - px3) * (ay - py3) && (bx - px3) * (cy - py3) >= (cx - px3) * (by - py3);
}
function isValidDiagonal(a2, b) {
  return a2.next.i !== b.i && a2.prev.i !== b.i && !intersectsPolygon(a2, b) && // dones't intersect other edges
  (locallyInside(a2, b) && locallyInside(b, a2) && middleInside(a2, b) && // locally visible
  (area(a2.prev, a2, b.prev) || area(a2, b.prev, b)) || // does not create opposite-facing sectors
  equals(a2, b) && area(a2.prev, a2, a2.next) > 0 && area(b.prev, b, b.next) > 0);
}
function area(p2, q2, r2) {
  return (q2.y - p2.y) * (r2.x - q2.x) - (q2.x - p2.x) * (r2.y - q2.y);
}
function equals(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects(p1, q1, p2, q2) {
  const o1 = sign(area(p1, q1, p2));
  const o2 = sign(area(p1, q1, q2));
  const o3 = sign(area(p2, q2, p1));
  const o4 = sign(area(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true;
  if (o1 === 0 && onSegment(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment(p2, q1, q2)) return true;
  return false;
}
function onSegment(p2, q2, r2) {
  return q2.x <= Math.max(p2.x, r2.x) && q2.x >= Math.min(p2.x, r2.x) && q2.y <= Math.max(p2.y, r2.y) && q2.y >= Math.min(p2.y, r2.y);
}
function sign(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon(a2, b) {
  let p2 = a2;
  do {
    if (p2.i !== a2.i && p2.next.i !== a2.i && p2.i !== b.i && p2.next.i !== b.i && intersects(p2, p2.next, a2, b)) return true;
    p2 = p2.next;
  } while (p2 !== a2);
  return false;
}
function locallyInside(a2, b) {
  return area(a2.prev, a2, a2.next) < 0 ? area(a2, b, a2.next) >= 0 && area(a2, a2.prev, b) >= 0 : area(a2, b, a2.prev) < 0 || area(a2, a2.next, b) < 0;
}
function middleInside(a2, b) {
  let p2 = a2, inside = false;
  const px3 = (a2.x + b.x) / 2, py3 = (a2.y + b.y) / 2;
  do {
    if (p2.y > py3 !== p2.next.y > py3 && p2.next.y !== p2.y && px3 < (p2.next.x - p2.x) * (py3 - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a2);
  return inside;
}
function splitPolygon(a2, b) {
  const a22 = new Node(a2.i, a2.x, a2.y), b2 = new Node(b.i, b.x, b.y), an = a2.next, bp = b.prev;
  a2.next = b;
  b.prev = a2;
  a22.next = an;
  an.prev = a22;
  b2.next = a22;
  a22.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
}
function insertNode(i2, x2, y2, last) {
  const p2 = new Node(i2, x2, y2);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ) p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ) p2.nextZ.prevZ = p2.prevZ;
}
function Node(i2, x2, y2) {
  this.i = i2;
  this.x = x2;
  this.y = y2;
  this.prev = null;
  this.next = null;
  this.z = 0;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function signedArea(data, start, end, dim) {
  let sum3 = 0;
  for (let i2 = start, j2 = end - dim; i2 < end; i2 += dim) {
    sum3 += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
    j2 = i2;
  }
  return sum3;
}
var ShapeUtils = class _ShapeUtils {
  // calculate area of the contour polygon
  static area(contour) {
    const n2 = contour.length;
    let a2 = 0;
    for (let p2 = n2 - 1, q2 = 0; q2 < n2; p2 = q2++) {
      a2 += contour[p2].x * contour[q2].y - contour[q2].x * contour[p2].y;
    }
    return a2 * 0.5;
  }
  static isClockWise(pts) {
    return _ShapeUtils.area(pts) < 0;
  }
  static triangulateShape(contour, holes) {
    const vertices = [];
    const holeIndices = [];
    const faces = [];
    removeDupEndPts(contour);
    addContour(vertices, contour);
    let holeIndex = contour.length;
    holes.forEach(removeDupEndPts);
    for (let i2 = 0; i2 < holes.length; i2++) {
      holeIndices.push(holeIndex);
      holeIndex += holes[i2].length;
      addContour(vertices, holes[i2]);
    }
    const triangles = Earcut.triangulate(vertices, holeIndices);
    for (let i2 = 0; i2 < triangles.length; i2 += 3) {
      faces.push(triangles.slice(i2, i2 + 3));
    }
    return faces;
  }
};
function removeDupEndPts(points) {
  const l2 = points.length;
  if (l2 > 2 && points[l2 - 1].equals(points[0])) {
    points.pop();
  }
}
function addContour(vertices, contour) {
  for (let i2 = 0; i2 < contour.length; i2++) {
    vertices.push(contour[i2].x);
    vertices.push(contour[i2].y);
  }
}
var ExtrudeGeometry = class _ExtrudeGeometry extends BufferGeometry {
  constructor(shapes = new Shape([new Vector2(0.5, 0.5), new Vector2(-0.5, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), options = {}) {
    super();
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes,
      options
    };
    shapes = Array.isArray(shapes) ? shapes : [shapes];
    const scope = this;
    const verticesArray = [];
    const uvArray = [];
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      addShape(shape);
    }
    this.setAttribute("position", new Float32BufferAttribute(verticesArray, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvArray, 2));
    this.computeVertexNormals();
    function addShape(shape) {
      const placeholder = [];
      const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
      const steps = options.steps !== void 0 ? options.steps : 1;
      const depth2 = options.depth !== void 0 ? options.depth : 1;
      let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
      let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
      let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
      let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
      let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
      const extrudePath = options.extrudePath;
      const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator;
      let extrudePts, extrudeByPath = false;
      let splineTube, binormal, normal2, position2;
      if (extrudePath) {
        extrudePts = extrudePath.getSpacedPoints(steps);
        extrudeByPath = true;
        bevelEnabled = false;
        splineTube = extrudePath.computeFrenetFrames(steps, false);
        binormal = new Vector3();
        normal2 = new Vector3();
        position2 = new Vector3();
      }
      if (!bevelEnabled) {
        bevelSegments = 0;
        bevelThickness = 0;
        bevelSize = 0;
        bevelOffset = 0;
      }
      const shapePoints = shape.extractPoints(curveSegments);
      let vertices = shapePoints.shape;
      const holes = shapePoints.holes;
      const reverse2 = !ShapeUtils.isClockWise(vertices);
      if (reverse2) {
        vertices = vertices.reverse();
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          if (ShapeUtils.isClockWise(ahole)) {
            holes[h2] = ahole.reverse();
          }
        }
      }
      const faces = ShapeUtils.triangulateShape(vertices, holes);
      const contour = vertices;
      for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
        const ahole = holes[h2];
        vertices = vertices.concat(ahole);
      }
      function scalePt2(pt, vec5, size) {
        if (!vec5) console.error("THREE.ExtrudeGeometry: vec does not exist");
        return pt.clone().addScaledVector(vec5, size);
      }
      const vlen = vertices.length, flen = faces.length;
      function getBevelVec(inPt, inPrev, inNext) {
        let v_trans_x, v_trans_y, shrink_by;
        const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
        const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
        if (Math.abs(collinear0) > Number.EPSILON) {
          const v_prev_len = Math.sqrt(v_prev_lensq);
          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
          const ptNextShift_x = inNext.x - v_next_y / v_next_len;
          const ptNextShift_y = inNext.y + v_next_x / v_next_len;
          const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
          if (v_trans_lensq <= 2) {
            return new Vector2(v_trans_x, v_trans_y);
          } else {
            shrink_by = Math.sqrt(v_trans_lensq / 2);
          }
        } else {
          let direction_eq = false;
          if (v_prev_x > Number.EPSILON) {
            if (v_next_x > Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (v_prev_x < -Number.EPSILON) {
              if (v_next_x < -Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                direction_eq = true;
              }
            }
          }
          if (direction_eq) {
            v_trans_x = -v_prev_y;
            v_trans_y = v_prev_x;
            shrink_by = Math.sqrt(v_prev_lensq);
          } else {
            v_trans_x = v_prev_x;
            v_trans_y = v_prev_y;
            shrink_by = Math.sqrt(v_prev_lensq / 2);
          }
        }
        return new Vector2(v_trans_x / shrink_by, v_trans_y / shrink_by);
      }
      const contourMovements = [];
      for (let i2 = 0, il = contour.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
        if (j2 === il) j2 = 0;
        if (k2 === il) k2 = 0;
        contourMovements[i2] = getBevelVec(contour[i2], contour[j2], contour[k2]);
      }
      const holesMovements = [];
      let oneHoleMovements, verticesMovements = contourMovements.concat();
      for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
        const ahole = holes[h2];
        oneHoleMovements = [];
        for (let i2 = 0, il = ahole.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
          if (j2 === il) j2 = 0;
          if (k2 === il) k2 = 0;
          oneHoleMovements[i2] = getBevelVec(ahole[i2], ahole[j2], ahole[k2]);
        }
        holesMovements.push(oneHoleMovements);
        verticesMovements = verticesMovements.concat(oneHoleMovements);
      }
      for (let b = 0; b < bevelSegments; b++) {
        const t4 = b / bevelSegments;
        const z2 = bevelThickness * Math.cos(t4 * Math.PI / 2);
        const bs2 = bevelSize * Math.sin(t4 * Math.PI / 2) + bevelOffset;
        for (let i2 = 0, il = contour.length; i2 < il; i2++) {
          const vert = scalePt2(contour[i2], contourMovements[i2], bs2);
          v3(vert.x, vert.y, -z2);
        }
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = holesMovements[h2];
          for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
            const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs2);
            v3(vert.x, vert.y, -z2);
          }
        }
      }
      const bs = bevelSize + bevelOffset;
      for (let i2 = 0; i2 < vlen; i2++) {
        const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs) : vertices[i2];
        if (!extrudeByPath) {
          v3(vert.x, vert.y, 0);
        } else {
          normal2.copy(splineTube.normals[0]).multiplyScalar(vert.x);
          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
          position2.copy(extrudePts[0]).add(normal2).add(binormal);
          v3(position2.x, position2.y, position2.z);
        }
      }
      for (let s2 = 1; s2 <= steps; s2++) {
        for (let i2 = 0; i2 < vlen; i2++) {
          const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs) : vertices[i2];
          if (!extrudeByPath) {
            v3(vert.x, vert.y, depth2 / steps * s2);
          } else {
            normal2.copy(splineTube.normals[s2]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[s2]).multiplyScalar(vert.y);
            position2.copy(extrudePts[s2]).add(normal2).add(binormal);
            v3(position2.x, position2.y, position2.z);
          }
        }
      }
      for (let b = bevelSegments - 1; b >= 0; b--) {
        const t4 = b / bevelSegments;
        const z2 = bevelThickness * Math.cos(t4 * Math.PI / 2);
        const bs2 = bevelSize * Math.sin(t4 * Math.PI / 2) + bevelOffset;
        for (let i2 = 0, il = contour.length; i2 < il; i2++) {
          const vert = scalePt2(contour[i2], contourMovements[i2], bs2);
          v3(vert.x, vert.y, depth2 + z2);
        }
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = holesMovements[h2];
          for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
            const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs2);
            if (!extrudeByPath) {
              v3(vert.x, vert.y, depth2 + z2);
            } else {
              v3(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z2);
            }
          }
        }
      }
      buildLidFaces();
      buildSideFaces();
      function buildLidFaces() {
        const start = verticesArray.length / 3;
        if (bevelEnabled) {
          let layer = 0;
          let offset = vlen * layer;
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[2] + offset, face[1] + offset, face[0] + offset);
          }
          layer = steps + bevelSegments * 2;
          offset = vlen * layer;
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[0] + offset, face[1] + offset, face[2] + offset);
          }
        } else {
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[2], face[1], face[0]);
          }
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
          }
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 0);
      }
      function buildSideFaces() {
        const start = verticesArray.length / 3;
        let layeroffset = 0;
        sidewalls(contour, layeroffset);
        layeroffset += contour.length;
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          sidewalls(ahole, layeroffset);
          layeroffset += ahole.length;
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 1);
      }
      function sidewalls(contour2, layeroffset) {
        let i2 = contour2.length;
        while (--i2 >= 0) {
          const j2 = i2;
          let k2 = i2 - 1;
          if (k2 < 0) k2 = contour2.length - 1;
          for (let s2 = 0, sl = steps + bevelSegments * 2; s2 < sl; s2++) {
            const slen1 = vlen * s2;
            const slen2 = vlen * (s2 + 1);
            const a2 = layeroffset + j2 + slen1, b = layeroffset + k2 + slen1, c4 = layeroffset + k2 + slen2, d2 = layeroffset + j2 + slen2;
            f4(a2, b, c4, d2);
          }
        }
      }
      function v3(x2, y2, z2) {
        placeholder.push(x2);
        placeholder.push(y2);
        placeholder.push(z2);
      }
      function f3(a2, b, c4) {
        addVertex(a2);
        addVertex(b);
        addVertex(c4);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[2]);
      }
      function f4(a2, b, c4, d2) {
        addVertex(a2);
        addVertex(b);
        addVertex(d2);
        addVertex(b);
        addVertex(c4);
        addVertex(d2);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[3]);
        addUV(uvs[1]);
        addUV(uvs[2]);
        addUV(uvs[3]);
      }
      function addVertex(index7) {
        verticesArray.push(placeholder[index7 * 3 + 0]);
        verticesArray.push(placeholder[index7 * 3 + 1]);
        verticesArray.push(placeholder[index7 * 3 + 2]);
      }
      function addUV(vector22) {
        uvArray.push(vector22.x);
        uvArray.push(vector22.y);
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON$1(shapes, options, data);
  }
  static fromJSON(data, shapes) {
    const geometryShapes = [];
    for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
      const shape = shapes[data.shapes[j2]];
      geometryShapes.push(shape);
    }
    const extrudePath = data.options.extrudePath;
    if (extrudePath !== void 0) {
      data.options.extrudePath = new Curves[extrudePath.type]().fromJSON(extrudePath);
    }
    return new _ExtrudeGeometry(geometryShapes, data.options);
  }
};
var WorldUVGenerator = {
  generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    return [
      new Vector2(a_x, a_y),
      new Vector2(b_x, b_y),
      new Vector2(c_x, c_y)
    ];
  },
  generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const a_z = vertices[indexA * 3 + 2];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const b_z = vertices[indexB * 3 + 2];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    const c_z = vertices[indexC * 3 + 2];
    const d_x = vertices[indexD * 3];
    const d_y = vertices[indexD * 3 + 1];
    const d_z = vertices[indexD * 3 + 2];
    if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
      return [
        new Vector2(a_x, 1 - a_z),
        new Vector2(b_x, 1 - b_z),
        new Vector2(c_x, 1 - c_z),
        new Vector2(d_x, 1 - d_z)
      ];
    } else {
      return [
        new Vector2(a_y, 1 - a_z),
        new Vector2(b_y, 1 - b_z),
        new Vector2(c_y, 1 - c_z),
        new Vector2(d_y, 1 - d_z)
      ];
    }
  }
};
function toJSON$1(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  data.options = Object.assign({}, options);
  if (options.extrudePath !== void 0) data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
var IcosahedronGeometry = class _IcosahedronGeometry extends PolyhedronGeometry {
  constructor(radius = 1, detail = 0) {
    const t4 = (1 + Math.sqrt(5)) / 2;
    const vertices = [
      -1,
      t4,
      0,
      1,
      t4,
      0,
      -1,
      -t4,
      0,
      1,
      -t4,
      0,
      0,
      -1,
      t4,
      0,
      1,
      t4,
      0,
      -1,
      -t4,
      0,
      1,
      -t4,
      t4,
      0,
      -1,
      t4,
      0,
      1,
      -t4,
      0,
      -1,
      -t4,
      0,
      1
    ];
    const indices = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "IcosahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _IcosahedronGeometry(data.radius, data.detail);
  }
};
var OctahedronGeometry = class _OctahedronGeometry extends PolyhedronGeometry {
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ];
    const indices = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(vertices, indices, radius, detail);
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _OctahedronGeometry(data.radius, data.detail);
  }
};
var RingGeometry = class _RingGeometry extends BufferGeometry {
  constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "RingGeometry";
    this.parameters = {
      innerRadius,
      outerRadius,
      thetaSegments,
      phiSegments,
      thetaStart,
      thetaLength
    };
    thetaSegments = Math.max(3, thetaSegments);
    phiSegments = Math.max(1, phiSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let radius = innerRadius;
    const radiusStep = (outerRadius - innerRadius) / phiSegments;
    const vertex2 = new Vector3();
    const uv2 = new Vector2();
    for (let j2 = 0; j2 <= phiSegments; j2++) {
      for (let i2 = 0; i2 <= thetaSegments; i2++) {
        const segment = thetaStart + i2 / thetaSegments * thetaLength;
        vertex2.x = radius * Math.cos(segment);
        vertex2.y = radius * Math.sin(segment);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, 0, 1);
        uv2.x = (vertex2.x / outerRadius + 1) / 2;
        uv2.y = (vertex2.y / outerRadius + 1) / 2;
        uvs.push(uv2.x, uv2.y);
      }
      radius += radiusStep;
    }
    for (let j2 = 0; j2 < phiSegments; j2++) {
      const thetaSegmentLevel = j2 * (thetaSegments + 1);
      for (let i2 = 0; i2 < thetaSegments; i2++) {
        const segment = i2 + thetaSegmentLevel;
        const a2 = segment;
        const b = segment + thetaSegments + 1;
        const c4 = segment + thetaSegments + 2;
        const d2 = segment + 1;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
  }
};
var ShapeGeometry = class _ShapeGeometry extends BufferGeometry {
  constructor(shapes = new Shape([new Vector2(0, 0.5), new Vector2(-0.5, -0.5), new Vector2(0.5, -0.5)]), curveSegments = 12) {
    super();
    this.type = "ShapeGeometry";
    this.parameters = {
      shapes,
      curveSegments
    };
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let groupStart = 0;
    let groupCount = 0;
    if (Array.isArray(shapes) === false) {
      addShape(shapes);
    } else {
      for (let i2 = 0; i2 < shapes.length; i2++) {
        addShape(shapes[i2]);
        this.addGroup(groupStart, groupCount, i2);
        groupStart += groupCount;
        groupCount = 0;
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function addShape(shape) {
      const indexOffset = vertices.length / 3;
      const points = shape.extractPoints(curveSegments);
      let shapeVertices = points.shape;
      const shapeHoles = points.holes;
      if (ShapeUtils.isClockWise(shapeVertices) === false) {
        shapeVertices = shapeVertices.reverse();
      }
      for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
        const shapeHole = shapeHoles[i2];
        if (ShapeUtils.isClockWise(shapeHole) === true) {
          shapeHoles[i2] = shapeHole.reverse();
        }
      }
      const faces = ShapeUtils.triangulateShape(shapeVertices, shapeHoles);
      for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
        const shapeHole = shapeHoles[i2];
        shapeVertices = shapeVertices.concat(shapeHole);
      }
      for (let i2 = 0, l2 = shapeVertices.length; i2 < l2; i2++) {
        const vertex2 = shapeVertices[i2];
        vertices.push(vertex2.x, vertex2.y, 0);
        normals.push(0, 0, 1);
        uvs.push(vertex2.x, vertex2.y);
      }
      for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {
        const face = faces[i2];
        const a2 = face[0] + indexOffset;
        const b = face[1] + indexOffset;
        const c4 = face[2] + indexOffset;
        indices.push(a2, b, c4);
        groupCount += 3;
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    return toJSON(shapes, data);
  }
  static fromJSON(data, shapes) {
    const geometryShapes = [];
    for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
      const shape = shapes[data.shapes[j2]];
      geometryShapes.push(shape);
    }
    return new _ShapeGeometry(geometryShapes, data.curveSegments);
  }
};
function toJSON(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
var SphereGeometry = class _SphereGeometry extends BufferGeometry {
  constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
    super();
    this.type = "SphereGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    widthSegments = Math.max(3, Math.floor(widthSegments));
    heightSegments = Math.max(2, Math.floor(heightSegments));
    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    let index7 = 0;
    const grid = [];
    const vertex2 = new Vector3();
    const normal2 = new Vector3();
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy <= heightSegments; iy++) {
      const verticesRow = [];
      const v3 = iy / heightSegments;
      let uOffset = 0;
      if (iy === 0 && thetaStart === 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy === heightSegments && thetaEnd === Math.PI) {
        uOffset = -0.5 / widthSegments;
      }
      for (let ix = 0; ix <= widthSegments; ix++) {
        const u5 = ix / widthSegments;
        vertex2.x = -radius * Math.cos(phiStart + u5 * phiLength) * Math.sin(thetaStart + v3 * thetaLength);
        vertex2.y = radius * Math.cos(thetaStart + v3 * thetaLength);
        vertex2.z = radius * Math.sin(phiStart + u5 * phiLength) * Math.sin(thetaStart + v3 * thetaLength);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normal2.copy(vertex2).normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        uvs.push(u5 + uOffset, 1 - v3);
        verticesRow.push(index7++);
      }
      grid.push(verticesRow);
    }
    for (let iy = 0; iy < heightSegments; iy++) {
      for (let ix = 0; ix < widthSegments; ix++) {
        const a2 = grid[iy][ix + 1];
        const b = grid[iy][ix];
        const c4 = grid[iy + 1][ix];
        const d2 = grid[iy + 1][ix + 1];
        if (iy !== 0 || thetaStart > 0) indices.push(a2, b, d2);
        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
  }
};
var TetrahedronGeometry = class _TetrahedronGeometry extends PolyhedronGeometry {
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ];
    const indices = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "TetrahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _TetrahedronGeometry(data.radius, data.detail);
  }
};
var TorusGeometry = class _TorusGeometry extends BufferGeometry {
  constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2) {
    super();
    this.type = "TorusGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    radialSegments = Math.floor(radialSegments);
    tubularSegments = Math.floor(tubularSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const center = new Vector3();
    const vertex2 = new Vector3();
    const normal2 = new Vector3();
    for (let j2 = 0; j2 <= radialSegments; j2++) {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        const u5 = i2 / tubularSegments * arc;
        const v3 = j2 / radialSegments * Math.PI * 2;
        vertex2.x = (radius + tube * Math.cos(v3)) * Math.cos(u5);
        vertex2.y = (radius + tube * Math.cos(v3)) * Math.sin(u5);
        vertex2.z = tube * Math.sin(v3);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        center.x = radius * Math.cos(u5);
        center.y = radius * Math.sin(u5);
        normal2.subVectors(vertex2, center).normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j2 / radialSegments);
      }
    }
    for (let j2 = 1; j2 <= radialSegments; j2++) {
      for (let i2 = 1; i2 <= tubularSegments; i2++) {
        const a2 = (tubularSegments + 1) * j2 + i2 - 1;
        const b = (tubularSegments + 1) * (j2 - 1) + i2 - 1;
        const c4 = (tubularSegments + 1) * (j2 - 1) + i2;
        const d2 = (tubularSegments + 1) * j2 + i2;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
  }
};
var TorusKnotGeometry = class _TorusKnotGeometry extends BufferGeometry {
  constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p2 = 2, q2 = 3) {
    super();
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p: p2,
      q: q2
    };
    tubularSegments = Math.floor(tubularSegments);
    radialSegments = Math.floor(radialSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex2 = new Vector3();
    const normal2 = new Vector3();
    const P1 = new Vector3();
    const P2 = new Vector3();
    const B4 = new Vector3();
    const T2 = new Vector3();
    const N2 = new Vector3();
    for (let i2 = 0; i2 <= tubularSegments; ++i2) {
      const u5 = i2 / tubularSegments * p2 * Math.PI * 2;
      calculatePositionOnCurve(u5, p2, q2, radius, P1);
      calculatePositionOnCurve(u5 + 0.01, p2, q2, radius, P2);
      T2.subVectors(P2, P1);
      N2.addVectors(P2, P1);
      B4.crossVectors(T2, N2);
      N2.crossVectors(B4, T2);
      B4.normalize();
      N2.normalize();
      for (let j2 = 0; j2 <= radialSegments; ++j2) {
        const v3 = j2 / radialSegments * Math.PI * 2;
        const cx = -tube * Math.cos(v3);
        const cy = tube * Math.sin(v3);
        vertex2.x = P1.x + (cx * N2.x + cy * B4.x);
        vertex2.y = P1.y + (cx * N2.y + cy * B4.y);
        vertex2.z = P1.z + (cx * N2.z + cy * B4.z);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normal2.subVectors(vertex2, P1).normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j2 / radialSegments);
      }
    }
    for (let j2 = 1; j2 <= tubularSegments; j2++) {
      for (let i2 = 1; i2 <= radialSegments; i2++) {
        const a2 = (radialSegments + 1) * (j2 - 1) + (i2 - 1);
        const b = (radialSegments + 1) * j2 + (i2 - 1);
        const c4 = (radialSegments + 1) * j2 + i2;
        const d2 = (radialSegments + 1) * (j2 - 1) + i2;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function calculatePositionOnCurve(u5, p3, q3, radius2, position) {
      const cu = Math.cos(u5);
      const su = Math.sin(u5);
      const quOverP = q3 / p3 * u5;
      const cs = Math.cos(quOverP);
      position.x = radius2 * (2 + cs) * 0.5 * cu;
      position.y = radius2 * (2 + cs) * su * 0.5;
      position.z = radius2 * Math.sin(quOverP) * 0.5;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
  }
};
var TubeGeometry = class _TubeGeometry extends BufferGeometry {
  constructor(path = new QuadraticBezierCurve3(new Vector3(-1, -1, 0), new Vector3(-1, 1, 0), new Vector3(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
    super();
    this.type = "TubeGeometry";
    this.parameters = {
      path,
      tubularSegments,
      radius,
      radialSegments,
      closed
    };
    const frames = path.computeFrenetFrames(tubularSegments, closed);
    this.tangents = frames.tangents;
    this.normals = frames.normals;
    this.binormals = frames.binormals;
    const vertex2 = new Vector3();
    const normal2 = new Vector3();
    const uv2 = new Vector2();
    let P2 = new Vector3();
    const vertices = [];
    const normals = [];
    const uvs = [];
    const indices = [];
    generateBufferData();
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
    function generateBufferData() {
      for (let i2 = 0; i2 < tubularSegments; i2++) {
        generateSegment(i2);
      }
      generateSegment(closed === false ? tubularSegments : 0);
      generateUVs();
      generateIndices();
    }
    function generateSegment(i2) {
      P2 = path.getPointAt(i2 / tubularSegments, P2);
      const N2 = frames.normals[i2];
      const B4 = frames.binormals[i2];
      for (let j2 = 0; j2 <= radialSegments; j2++) {
        const v3 = j2 / radialSegments * Math.PI * 2;
        const sin4 = Math.sin(v3);
        const cos4 = -Math.cos(v3);
        normal2.x = cos4 * N2.x + sin4 * B4.x;
        normal2.y = cos4 * N2.y + sin4 * B4.y;
        normal2.z = cos4 * N2.z + sin4 * B4.z;
        normal2.normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        vertex2.x = P2.x + radius * normal2.x;
        vertex2.y = P2.y + radius * normal2.y;
        vertex2.z = P2.z + radius * normal2.z;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
      }
    }
    function generateIndices() {
      for (let j2 = 1; j2 <= tubularSegments; j2++) {
        for (let i2 = 1; i2 <= radialSegments; i2++) {
          const a2 = (radialSegments + 1) * (j2 - 1) + (i2 - 1);
          const b = (radialSegments + 1) * j2 + (i2 - 1);
          const c4 = (radialSegments + 1) * j2 + i2;
          const d2 = (radialSegments + 1) * (j2 - 1) + i2;
          indices.push(a2, b, d2);
          indices.push(b, c4, d2);
        }
      }
    }
    function generateUVs() {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        for (let j2 = 0; j2 <= radialSegments; j2++) {
          uv2.x = i2 / tubularSegments;
          uv2.y = j2 / radialSegments;
          uvs.push(uv2.x, uv2.y);
        }
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.path = this.parameters.path.toJSON();
    return data;
  }
  static fromJSON(data) {
    return new _TubeGeometry(
      new Curves[data.path.type]().fromJSON(data.path),
      data.tubularSegments,
      data.radius,
      data.radialSegments,
      data.closed
    );
  }
};
var WireframeGeometry = class extends BufferGeometry {
  constructor(geometry = null) {
    super();
    this.type = "WireframeGeometry";
    this.parameters = {
      geometry
    };
    if (geometry !== null) {
      const vertices = [];
      const edges = /* @__PURE__ */ new Set();
      const start = new Vector3();
      const end = new Vector3();
      if (geometry.index !== null) {
        const position = geometry.attributes.position;
        const indices = geometry.index;
        let groups2 = geometry.groups;
        if (groups2.length === 0) {
          groups2 = [{ start: 0, count: indices.count, materialIndex: 0 }];
        }
        for (let o2 = 0, ol = groups2.length; o2 < ol; ++o2) {
          const group2 = groups2[o2];
          const groupStart = group2.start;
          const groupCount = group2.count;
          for (let i2 = groupStart, l2 = groupStart + groupCount; i2 < l2; i2 += 3) {
            for (let j2 = 0; j2 < 3; j2++) {
              const index1 = indices.getX(i2 + j2);
              const index22 = indices.getX(i2 + (j2 + 1) % 3);
              start.fromBufferAttribute(position, index1);
              end.fromBufferAttribute(position, index22);
              if (isUniqueEdge(start, end, edges) === true) {
                vertices.push(start.x, start.y, start.z);
                vertices.push(end.x, end.y, end.z);
              }
            }
          }
        }
      } else {
        const position = geometry.attributes.position;
        for (let i2 = 0, l2 = position.count / 3; i2 < l2; i2++) {
          for (let j2 = 0; j2 < 3; j2++) {
            const index1 = 3 * i2 + j2;
            const index22 = 3 * i2 + (j2 + 1) % 3;
            start.fromBufferAttribute(position, index1);
            end.fromBufferAttribute(position, index22);
            if (isUniqueEdge(start, end, edges) === true) {
              vertices.push(start.x, start.y, start.z);
              vertices.push(end.x, end.y, end.z);
            }
          }
        }
      }
      this.setAttribute("position", new Float32BufferAttribute(vertices, 3));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
};
function isUniqueEdge(start, end, edges) {
  const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
  const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;
  if (edges.has(hash1) === true || edges.has(hash2) === true) {
    return false;
  } else {
    edges.add(hash1);
    edges.add(hash2);
    return true;
  }
}
var Geometries = Object.freeze({
  __proto__: null,
  BoxGeometry,
  CapsuleGeometry,
  CircleGeometry,
  ConeGeometry,
  CylinderGeometry,
  DodecahedronGeometry,
  EdgesGeometry,
  ExtrudeGeometry,
  IcosahedronGeometry,
  LatheGeometry,
  OctahedronGeometry,
  PlaneGeometry,
  PolyhedronGeometry,
  RingGeometry,
  ShapeGeometry,
  SphereGeometry,
  TetrahedronGeometry,
  TorusGeometry,
  TorusKnotGeometry,
  TubeGeometry,
  WireframeGeometry
});
var MeshPhongMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isMeshPhongMaterial = true;
    this.type = "MeshPhongMaterial";
    this.color = new Color(16777215);
    this.specular = new Color(1118481);
    this.shininess = 30;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler();
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.specular.copy(source.specular);
    this.shininess = source.shininess;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
};
var MeshLambertMaterial = class extends Material {
  constructor(parameters) {
    super();
    this.isMeshLambertMaterial = true;
    this.type = "MeshLambertMaterial";
    this.color = new Color(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap;
    this.normalScale = new Vector2(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler();
    this.combine = MultiplyOperation;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
};
function convertArray(array3, type, forceClone) {
  if (!array3 || // let 'undefined' and 'null' pass
  !forceClone && array3.constructor === type) return array3;
  if (typeof type.BYTES_PER_ELEMENT === "number") {
    return new type(array3);
  }
  return Array.prototype.slice.call(array3);
}
function isTypedArray(object2) {
  return ArrayBuffer.isView(object2) && !(object2 instanceof DataView);
}
var Interpolant = class {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    this.parameterPositions = parameterPositions;
    this._cachedIndex = 0;
    this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
    this.sampleValues = sampleValues;
    this.valueSize = sampleSize;
    this.settings = null;
    this.DefaultSettings_ = {};
  }
  evaluate(t4) {
    const pp = this.parameterPositions;
    let i1 = this._cachedIndex, t13 = pp[i1], t03 = pp[i1 - 1];
    validate_interval: {
      seek: {
        let right;
        linear_scan: {
          forward_scan: if (!(t4 < t13)) {
            for (let giveUpAt = i1 + 2; ; ) {
              if (t13 === void 0) {
                if (t4 < t03) break forward_scan;
                i1 = pp.length;
                this._cachedIndex = i1;
                return this.copySampleValue_(i1 - 1);
              }
              if (i1 === giveUpAt) break;
              t03 = t13;
              t13 = pp[++i1];
              if (t4 < t13) {
                break seek;
              }
            }
            right = pp.length;
            break linear_scan;
          }
          if (!(t4 >= t03)) {
            const t1global = pp[1];
            if (t4 < t1global) {
              i1 = 2;
              t03 = t1global;
            }
            for (let giveUpAt = i1 - 2; ; ) {
              if (t03 === void 0) {
                this._cachedIndex = 0;
                return this.copySampleValue_(0);
              }
              if (i1 === giveUpAt) break;
              t13 = t03;
              t03 = pp[--i1 - 1];
              if (t4 >= t03) {
                break seek;
              }
            }
            right = i1;
            i1 = 0;
            break linear_scan;
          }
          break validate_interval;
        }
        while (i1 < right) {
          const mid = i1 + right >>> 1;
          if (t4 < pp[mid]) {
            right = mid;
          } else {
            i1 = mid + 1;
          }
        }
        t13 = pp[i1];
        t03 = pp[i1 - 1];
        if (t03 === void 0) {
          this._cachedIndex = 0;
          return this.copySampleValue_(0);
        }
        if (t13 === void 0) {
          i1 = pp.length;
          this._cachedIndex = i1;
          return this.copySampleValue_(i1 - 1);
        }
      }
      this._cachedIndex = i1;
      this.intervalChanged_(i1, t03, t13);
    }
    return this.interpolate_(i1, t03, t4, t13);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(index7) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index7 * stride;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset + i2];
    }
    return result;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
};
var CubicInterpolant = class extends Interpolant {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    this._weightPrev = -0;
    this._offsetPrev = -0;
    this._weightNext = -0;
    this._offsetNext = -0;
    this.DefaultSettings_ = {
      endingStart: ZeroCurvatureEnding,
      endingEnd: ZeroCurvatureEnding
    };
  }
  intervalChanged_(i1, t03, t13) {
    const pp = this.parameterPositions;
    let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
    if (tPrev === void 0) {
      switch (this.getSettings_().endingStart) {
        case ZeroSlopeEnding:
          iPrev = i1;
          tPrev = 2 * t03 - t13;
          break;
        case WrapAroundEnding:
          iPrev = pp.length - 2;
          tPrev = t03 + pp[iPrev] - pp[iPrev + 1];
          break;
        default:
          iPrev = i1;
          tPrev = t13;
      }
    }
    if (tNext === void 0) {
      switch (this.getSettings_().endingEnd) {
        case ZeroSlopeEnding:
          iNext = i1;
          tNext = 2 * t13 - t03;
          break;
        case WrapAroundEnding:
          iNext = 1;
          tNext = t13 + pp[1] - pp[0];
          break;
        default:
          iNext = i1 - 1;
          tNext = t03;
      }
    }
    const halfDt = (t13 - t03) * 0.5, stride = this.valueSize;
    this._weightPrev = halfDt / (t03 - tPrev);
    this._weightNext = halfDt / (tNext - t13);
    this._offsetPrev = iPrev * stride;
    this._offsetNext = iNext * stride;
  }
  interpolate_(i1, t03, t4, t13) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p2 = (t4 - t03) / (t13 - t03), pp = p2 * p2, ppp = pp * p2;
    const sP = -wP * ppp + 2 * wP * pp - wP * p2;
    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p2 + 1;
    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p2;
    const sN = wN * ppp - wN * pp;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = sP * values[oP + i2] + s0 * values[o0 + i2] + s1 * values[o1 + i2] + sN * values[oN + i2];
    }
    return result;
  }
};
var LinearInterpolant = class extends Interpolant {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1, t03, t4, t13) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t4 - t03) / (t13 - t03), weight0 = 1 - weight1;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset0 + i2] * weight0 + values[offset1 + i2] * weight1;
    }
    return result;
  }
};
var DiscreteInterpolant = class extends Interpolant {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1) {
    return this.copySampleValue_(i1 - 1);
  }
};
var KeyframeTrack = class {
  constructor(name, times, values, interpolation) {
    if (name === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (times === void 0 || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
    this.name = name;
    this.times = convertArray(times, this.TimeBufferType);
    this.values = convertArray(values, this.ValueBufferType);
    this.setInterpolation(interpolation || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(track) {
    const trackType = track.constructor;
    let json;
    if (trackType.toJSON !== this.toJSON) {
      json = trackType.toJSON(track);
    } else {
      json = {
        "name": track.name,
        "times": convertArray(track.times, Array),
        "values": convertArray(track.values, Array)
      };
      const interpolation = track.getInterpolation();
      if (interpolation !== track.DefaultInterpolation) {
        json.interpolation = interpolation;
      }
    }
    json.type = track.ValueTypeName;
    return json;
  }
  InterpolantFactoryMethodDiscrete(result) {
    return new DiscreteInterpolant(this.times, this.values, this.getValueSize(), result);
  }
  InterpolantFactoryMethodLinear(result) {
    return new LinearInterpolant(this.times, this.values, this.getValueSize(), result);
  }
  InterpolantFactoryMethodSmooth(result) {
    return new CubicInterpolant(this.times, this.values, this.getValueSize(), result);
  }
  setInterpolation(interpolation) {
    let factoryMethod;
    switch (interpolation) {
      case InterpolateDiscrete:
        factoryMethod = this.InterpolantFactoryMethodDiscrete;
        break;
      case InterpolateLinear:
        factoryMethod = this.InterpolantFactoryMethodLinear;
        break;
      case InterpolateSmooth:
        factoryMethod = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (factoryMethod === void 0) {
      const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) {
        if (interpolation !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(message);
        }
      }
      console.warn("THREE.KeyframeTrack:", message);
      return this;
    }
    this.createInterpolant = factoryMethod;
    return this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return InterpolateDiscrete;
      case this.InterpolantFactoryMethodLinear:
        return InterpolateLinear;
      case this.InterpolantFactoryMethodSmooth:
        return InterpolateSmooth;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(timeOffset) {
    if (timeOffset !== 0) {
      const times = this.times;
      for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
        times[i2] += timeOffset;
      }
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(timeScale) {
    if (timeScale !== 1) {
      const times = this.times;
      for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
        times[i2] *= timeScale;
      }
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(startTime, endTime) {
    const times = this.times, nKeys = times.length;
    let from = 0, to = nKeys - 1;
    while (from !== nKeys && times[from] < startTime) {
      ++from;
    }
    while (to !== -1 && times[to] > endTime) {
      --to;
    }
    ++to;
    if (from !== 0 || to !== nKeys) {
      if (from >= to) {
        to = Math.max(to, 1);
        from = to - 1;
      }
      const stride = this.getValueSize();
      this.times = times.slice(from, to);
      this.values = this.values.slice(from * stride, to * stride);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let valid = true;
    const valueSize = this.getValueSize();
    if (valueSize - Math.floor(valueSize) !== 0) {
      console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
      valid = false;
    }
    const times = this.times, values = this.values, nKeys = times.length;
    if (nKeys === 0) {
      console.error("THREE.KeyframeTrack: Track is empty.", this);
      valid = false;
    }
    let prevTime = null;
    for (let i2 = 0; i2 !== nKeys; i2++) {
      const currTime = times[i2];
      if (typeof currTime === "number" && isNaN(currTime)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i2, currTime);
        valid = false;
        break;
      }
      if (prevTime !== null && prevTime > currTime) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, i2, currTime, prevTime);
        valid = false;
        break;
      }
      prevTime = currTime;
    }
    if (values !== void 0) {
      if (isTypedArray(values)) {
        for (let i2 = 0, n2 = values.length; i2 !== n2; ++i2) {
          const value = values[i2];
          if (isNaN(value)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i2, value);
            valid = false;
            break;
          }
        }
      }
    }
    return valid;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth, lastIndex = times.length - 1;
    let writeIndex = 1;
    for (let i2 = 1; i2 < lastIndex; ++i2) {
      let keep = false;
      const time2 = times[i2];
      const timeNext = times[i2 + 1];
      if (time2 !== timeNext && (i2 !== 1 || time2 !== times[0])) {
        if (!smoothInterpolation) {
          const offset = i2 * stride, offsetP = offset - stride, offsetN = offset + stride;
          for (let j2 = 0; j2 !== stride; ++j2) {
            const value = values[offset + j2];
            if (value !== values[offsetP + j2] || value !== values[offsetN + j2]) {
              keep = true;
              break;
            }
          }
        } else {
          keep = true;
        }
      }
      if (keep) {
        if (i2 !== writeIndex) {
          times[writeIndex] = times[i2];
          const readOffset = i2 * stride, writeOffset = writeIndex * stride;
          for (let j2 = 0; j2 !== stride; ++j2) {
            values[writeOffset + j2] = values[readOffset + j2];
          }
        }
        ++writeIndex;
      }
    }
    if (lastIndex > 0) {
      times[writeIndex] = times[lastIndex];
      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j2 = 0; j2 !== stride; ++j2) {
        values[writeOffset + j2] = values[readOffset + j2];
      }
      ++writeIndex;
    }
    if (writeIndex !== times.length) {
      this.times = times.slice(0, writeIndex);
      this.values = values.slice(0, writeIndex * stride);
    } else {
      this.times = times;
      this.values = values;
    }
    return this;
  }
  clone() {
    const times = this.times.slice();
    const values = this.values.slice();
    const TypedKeyframeTrack = this.constructor;
    const track = new TypedKeyframeTrack(this.name, times, values);
    track.createInterpolant = this.createInterpolant;
    return track;
  }
};
KeyframeTrack.prototype.TimeBufferType = Float32Array;
KeyframeTrack.prototype.ValueBufferType = Float32Array;
KeyframeTrack.prototype.DefaultInterpolation = InterpolateLinear;
var BooleanKeyframeTrack = class extends KeyframeTrack {
  // No interpolation parameter because only InterpolateDiscrete is valid.
  constructor(name, times, values) {
    super(name, times, values);
  }
};
BooleanKeyframeTrack.prototype.ValueTypeName = "bool";
BooleanKeyframeTrack.prototype.ValueBufferType = Array;
BooleanKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
var ColorKeyframeTrack = class extends KeyframeTrack {
};
ColorKeyframeTrack.prototype.ValueTypeName = "color";
var NumberKeyframeTrack = class extends KeyframeTrack {
};
NumberKeyframeTrack.prototype.ValueTypeName = "number";
var QuaternionLinearInterpolant = class extends Interpolant {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1, t03, t4, t13) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t4 - t03) / (t13 - t03);
    let offset = i1 * stride;
    for (let end = offset + stride; offset !== end; offset += 4) {
      Quaternion.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
    }
    return result;
  }
};
var QuaternionKeyframeTrack = class extends KeyframeTrack {
  InterpolantFactoryMethodLinear(result) {
    return new QuaternionLinearInterpolant(this.times, this.values, this.getValueSize(), result);
  }
};
QuaternionKeyframeTrack.prototype.ValueTypeName = "quaternion";
QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
var StringKeyframeTrack = class extends KeyframeTrack {
  // No interpolation parameter because only InterpolateDiscrete is valid.
  constructor(name, times, values) {
    super(name, times, values);
  }
};
StringKeyframeTrack.prototype.ValueTypeName = "string";
StringKeyframeTrack.prototype.ValueBufferType = Array;
StringKeyframeTrack.prototype.DefaultInterpolation = InterpolateDiscrete;
StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear = void 0;
StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth = void 0;
var VectorKeyframeTrack = class extends KeyframeTrack {
};
VectorKeyframeTrack.prototype.ValueTypeName = "vector";
var Cache = {
  enabled: false,
  files: {},
  add: function(key, file) {
    if (this.enabled === false) return;
    this.files[key] = file;
  },
  get: function(key) {
    if (this.enabled === false) return;
    return this.files[key];
  },
  remove: function(key) {
    delete this.files[key];
  },
  clear: function() {
    this.files = {};
  }
};
var LoadingManager = class {
  constructor(onLoad, onProgress, onError) {
    const scope = this;
    let isLoading = false;
    let itemsLoaded = 0;
    let itemsTotal = 0;
    let urlModifier = void 0;
    const handlers = [];
    this.onStart = void 0;
    this.onLoad = onLoad;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
      itemsTotal++;
      if (isLoading === false) {
        if (scope.onStart !== void 0) {
          scope.onStart(url, itemsLoaded, itemsTotal);
        }
      }
      isLoading = true;
    };
    this.itemEnd = function(url) {
      itemsLoaded++;
      if (scope.onProgress !== void 0) {
        scope.onProgress(url, itemsLoaded, itemsTotal);
      }
      if (itemsLoaded === itemsTotal) {
        isLoading = false;
        if (scope.onLoad !== void 0) {
          scope.onLoad();
        }
      }
    };
    this.itemError = function(url) {
      if (scope.onError !== void 0) {
        scope.onError(url);
      }
    };
    this.resolveURL = function(url) {
      if (urlModifier) {
        return urlModifier(url);
      }
      return url;
    };
    this.setURLModifier = function(transform) {
      urlModifier = transform;
      return this;
    };
    this.addHandler = function(regex, loader) {
      handlers.push(regex, loader);
      return this;
    };
    this.removeHandler = function(regex) {
      const index7 = handlers.indexOf(regex);
      if (index7 !== -1) {
        handlers.splice(index7, 2);
      }
      return this;
    };
    this.getHandler = function(file) {
      for (let i2 = 0, l2 = handlers.length; i2 < l2; i2 += 2) {
        const regex = handlers[i2];
        const loader = handlers[i2 + 1];
        if (regex.global) regex.lastIndex = 0;
        if (regex.test(file)) {
          return loader;
        }
      }
      return null;
    };
  }
};
var DefaultLoadingManager = new LoadingManager();
var Loader = class {
  constructor(manager) {
    this.manager = manager !== void 0 ? manager : DefaultLoadingManager;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  load() {
  }
  loadAsync(url, onProgress) {
    const scope = this;
    return new Promise(function(resolve, reject) {
      scope.load(url, resolve, onProgress, reject);
    });
  }
  parse() {
  }
  setCrossOrigin(crossOrigin) {
    this.crossOrigin = crossOrigin;
    return this;
  }
  setWithCredentials(value) {
    this.withCredentials = value;
    return this;
  }
  setPath(path) {
    this.path = path;
    return this;
  }
  setResourcePath(resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }
  setRequestHeader(requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }
};
Loader.DEFAULT_MATERIAL_NAME = "__DEFAULT";
var ImageLoader = class extends Loader {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    if (this.path !== void 0) url = this.path + url;
    url = this.manager.resolveURL(url);
    const scope = this;
    const cached = Cache.get(url);
    if (cached !== void 0) {
      scope.manager.itemStart(url);
      setTimeout(function() {
        if (onLoad) onLoad(cached);
        scope.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    const image = createElementNS("img");
    function onImageLoad() {
      removeEventListeners();
      Cache.add(url, this);
      if (onLoad) onLoad(this);
      scope.manager.itemEnd(url);
    }
    function onImageError(event) {
      removeEventListeners();
      if (onError) onError(event);
      scope.manager.itemError(url);
      scope.manager.itemEnd(url);
    }
    function removeEventListeners() {
      image.removeEventListener("load", onImageLoad, false);
      image.removeEventListener("error", onImageError, false);
    }
    image.addEventListener("load", onImageLoad, false);
    image.addEventListener("error", onImageError, false);
    if (url.slice(0, 5) !== "data:") {
      if (this.crossOrigin !== void 0) image.crossOrigin = this.crossOrigin;
    }
    scope.manager.itemStart(url);
    image.src = url;
    return image;
  }
};
var TextureLoader = class extends Loader {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    const texture2 = new Texture();
    const loader = new ImageLoader(this.manager);
    loader.setCrossOrigin(this.crossOrigin);
    loader.setPath(this.path);
    loader.load(url, function(image) {
      texture2.image = image;
      texture2.needsUpdate = true;
      if (onLoad !== void 0) {
        onLoad(texture2);
      }
    }, onProgress, onError);
    return texture2;
  }
};
var Light = class extends Object3D {
  constructor(color3, intensity = 1) {
    super();
    this.isLight = true;
    this.type = "Light";
    this.color = new Color(color3);
    this.intensity = intensity;
  }
  dispose() {
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.color.copy(source.color);
    this.intensity = source.intensity;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.color = this.color.getHex();
    data.object.intensity = this.intensity;
    if (this.groundColor !== void 0) data.object.groundColor = this.groundColor.getHex();
    if (this.distance !== void 0) data.object.distance = this.distance;
    if (this.angle !== void 0) data.object.angle = this.angle;
    if (this.decay !== void 0) data.object.decay = this.decay;
    if (this.penumbra !== void 0) data.object.penumbra = this.penumbra;
    if (this.shadow !== void 0) data.object.shadow = this.shadow.toJSON();
    if (this.target !== void 0) data.object.target = this.target.uuid;
    return data;
  }
};
var _projScreenMatrix$1 = new Matrix4();
var _lightPositionWorld$1 = new Vector3();
var _lookTarget$1 = new Vector3();
var LightShadow = class {
  constructor(camera3) {
    this.camera = camera3;
    this.intensity = 1;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.blurSamples = 8;
    this.mapSize = new Vector2(512, 512);
    this.map = null;
    this.mapPass = null;
    this.matrix = new Matrix4();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new Frustum();
    this._frameExtents = new Vector2(1, 1);
    this._viewportCount = 1;
    this._viewports = [
      new Vector4(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(light) {
    const shadowCamera = this.camera;
    const shadowMatrix = this.matrix;
    _lightPositionWorld$1.setFromMatrixPosition(light.matrixWorld);
    shadowCamera.position.copy(_lightPositionWorld$1);
    _lookTarget$1.setFromMatrixPosition(light.target.matrixWorld);
    shadowCamera.lookAt(_lookTarget$1);
    shadowCamera.updateMatrixWorld();
    _projScreenMatrix$1.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);
    shadowMatrix.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    );
    shadowMatrix.multiply(_projScreenMatrix$1);
  }
  getViewport(viewportIndex) {
    return this._viewports[viewportIndex];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    if (this.map) {
      this.map.dispose();
    }
    if (this.mapPass) {
      this.mapPass.dispose();
    }
  }
  copy(source) {
    this.camera = source.camera.clone();
    this.intensity = source.intensity;
    this.bias = source.bias;
    this.radius = source.radius;
    this.mapSize.copy(source.mapSize);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const object2 = {};
    if (this.intensity !== 1) object2.intensity = this.intensity;
    if (this.bias !== 0) object2.bias = this.bias;
    if (this.normalBias !== 0) object2.normalBias = this.normalBias;
    if (this.radius !== 1) object2.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object2.mapSize = this.mapSize.toArray();
    object2.camera = this.camera.toJSON(false).object;
    delete object2.camera.matrix;
    return object2;
  }
};
var _projScreenMatrix = new Matrix4();
var _lightPositionWorld = new Vector3();
var _lookTarget = new Vector3();
var DirectionalLightShadow = class extends LightShadow {
  constructor() {
    super(new OrthographicCamera(-5, 5, 5, -5, 0.5, 500));
    this.isDirectionalLightShadow = true;
  }
};
var DirectionalLight = class extends Light {
  constructor(color3, intensity) {
    super(color3, intensity);
    this.isDirectionalLight = true;
    this.type = "DirectionalLight";
    this.position.copy(Object3D.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Object3D();
    this.shadow = new DirectionalLightShadow();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source) {
    super.copy(source);
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
};
var AmbientLight = class extends Light {
  constructor(color3, intensity) {
    super(color3, intensity);
    this.isAmbientLight = true;
    this.type = "AmbientLight";
  }
};
var InstancedBufferGeometry = class extends BufferGeometry {
  constructor() {
    super();
    this.isInstancedBufferGeometry = true;
    this.type = "InstancedBufferGeometry";
    this.instanceCount = Infinity;
  }
  copy(source) {
    super.copy(source);
    this.instanceCount = source.instanceCount;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.instanceCount = this.instanceCount;
    data.isInstancedBufferGeometry = true;
    return data;
  }
};
var _eyeRight = new Matrix4();
var _eyeLeft = new Matrix4();
var _projectionMatrix = new Matrix4();
var Clock = class {
  constructor(autoStart = true) {
    this.autoStart = autoStart;
    this.startTime = 0;
    this.oldTime = 0;
    this.elapsedTime = 0;
    this.running = false;
  }
  start() {
    this.startTime = now();
    this.oldTime = this.startTime;
    this.elapsedTime = 0;
    this.running = true;
  }
  stop() {
    this.getElapsedTime();
    this.running = false;
    this.autoStart = false;
  }
  getElapsedTime() {
    this.getDelta();
    return this.elapsedTime;
  }
  getDelta() {
    let diff = 0;
    if (this.autoStart && !this.running) {
      this.start();
      return 0;
    }
    if (this.running) {
      const newTime = now();
      diff = (newTime - this.oldTime) / 1e3;
      this.oldTime = newTime;
      this.elapsedTime += diff;
    }
    return diff;
  }
};
function now() {
  return (typeof performance === "undefined" ? Date : performance).now();
}
var _position$1 = new Vector3();
var _quaternion$1 = new Quaternion();
var _scale$1 = new Vector3();
var _orientation$1 = new Vector3();
var _position = new Vector3();
var _quaternion = new Quaternion();
var _scale = new Vector3();
var _orientation = new Vector3();
var _RESERVED_CHARS_RE = "\\[\\]\\.:\\/";
var _reservedRe = new RegExp("[" + _RESERVED_CHARS_RE + "]", "g");
var _wordChar = "[^" + _RESERVED_CHARS_RE + "]";
var _wordCharOrDot = "[^" + _RESERVED_CHARS_RE.replace("\\.", "") + "]";
var _directoryRe = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar);
var _nodeRe = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot);
var _objectRe = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar);
var _propertyRe = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar);
var _trackRe = new RegExp(
  "^" + _directoryRe + _nodeRe + _objectRe + _propertyRe + "$"
);
var _supportedObjectNames = ["material", "materials", "bones", "map"];
var Composite = class {
  constructor(targetGroup, path, optionalParsedPath) {
    const parsedPath = optionalParsedPath || PropertyBinding.parseTrackName(path);
    this._targetGroup = targetGroup;
    this._bindings = targetGroup.subscribe_(path, parsedPath);
  }
  getValue(array3, offset) {
    this.bind();
    const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
    if (binding !== void 0) binding.getValue(array3, offset);
  }
  setValue(array3, offset) {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].setValue(array3, offset);
    }
  }
  bind() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].bind();
    }
  }
  unbind() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].unbind();
    }
  }
};
var PropertyBinding = class _PropertyBinding {
  constructor(rootNode, path, parsedPath) {
    this.path = path;
    this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
    this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
    this.rootNode = rootNode;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
  static create(root3, path, parsedPath) {
    if (!(root3 && root3.isAnimationObjectGroup)) {
      return new _PropertyBinding(root3, path, parsedPath);
    } else {
      return new _PropertyBinding.Composite(root3, path, parsedPath);
    }
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(name) {
    return name.replace(/\s/g, "_").replace(_reservedRe, "");
  }
  static parseTrackName(trackName) {
    const matches = _trackRe.exec(trackName);
    if (matches === null) {
      throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
    }
    const results = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: matches[2],
      objectName: matches[3],
      objectIndex: matches[4],
      propertyName: matches[5],
      // required
      propertyIndex: matches[6]
    };
    const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
    if (lastDot !== void 0 && lastDot !== -1) {
      const objectName = results.nodeName.substring(lastDot + 1);
      if (_supportedObjectNames.indexOf(objectName) !== -1) {
        results.nodeName = results.nodeName.substring(0, lastDot);
        results.objectName = objectName;
      }
    }
    if (results.propertyName === null || results.propertyName.length === 0) {
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
    }
    return results;
  }
  static findNode(root3, nodeName) {
    if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root3.name || nodeName === root3.uuid) {
      return root3;
    }
    if (root3.skeleton) {
      const bone = root3.skeleton.getBoneByName(nodeName);
      if (bone !== void 0) {
        return bone;
      }
    }
    if (root3.children) {
      const searchNodeSubtree = function(children2) {
        for (let i2 = 0; i2 < children2.length; i2++) {
          const childNode = children2[i2];
          if (childNode.name === nodeName || childNode.uuid === nodeName) {
            return childNode;
          }
          const result = searchNodeSubtree(childNode.children);
          if (result) return result;
        }
        return null;
      };
      const subTreeNode = searchNodeSubtree(root3.children);
      if (subTreeNode) {
        return subTreeNode;
      }
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(buffer2, offset) {
    buffer2[offset] = this.targetObject[this.propertyName];
  }
  _getValue_array(buffer2, offset) {
    const source = this.resolvedProperty;
    for (let i2 = 0, n2 = source.length; i2 !== n2; ++i2) {
      buffer2[offset++] = source[i2];
    }
  }
  _getValue_arrayElement(buffer2, offset) {
    buffer2[offset] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(buffer2, offset) {
    this.resolvedProperty.toArray(buffer2, offset);
  }
  // Direct
  _setValue_direct(buffer2, offset) {
    this.targetObject[this.propertyName] = buffer2[offset];
  }
  _setValue_direct_setNeedsUpdate(buffer2, offset) {
    this.targetObject[this.propertyName] = buffer2[offset];
    this.targetObject.needsUpdate = true;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(buffer2, offset) {
    this.targetObject[this.propertyName] = buffer2[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // EntireArray
  _setValue_array(buffer2, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
      dest[i2] = buffer2[offset++];
    }
  }
  _setValue_array_setNeedsUpdate(buffer2, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
      dest[i2] = buffer2[offset++];
    }
    this.targetObject.needsUpdate = true;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(buffer2, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
      dest[i2] = buffer2[offset++];
    }
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // ArrayElement
  _setValue_arrayElement(buffer2, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer2[offset];
  }
  _setValue_arrayElement_setNeedsUpdate(buffer2, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer2[offset];
    this.targetObject.needsUpdate = true;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer2, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer2[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // HasToFromArray
  _setValue_fromArray(buffer2, offset) {
    this.resolvedProperty.fromArray(buffer2, offset);
  }
  _setValue_fromArray_setNeedsUpdate(buffer2, offset) {
    this.resolvedProperty.fromArray(buffer2, offset);
    this.targetObject.needsUpdate = true;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer2, offset) {
    this.resolvedProperty.fromArray(buffer2, offset);
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _getValue_unbound(targetArray, offset) {
    this.bind();
    this.getValue(targetArray, offset);
  }
  _setValue_unbound(sourceArray, offset) {
    this.bind();
    this.setValue(sourceArray, offset);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let targetObject = this.node;
    const parsedPath = this.parsedPath;
    const objectName = parsedPath.objectName;
    const propertyName = parsedPath.propertyName;
    let propertyIndex = parsedPath.propertyIndex;
    if (!targetObject) {
      targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
      this.node = targetObject;
    }
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (!targetObject) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (objectName) {
      let objectIndex = parsedPath.objectIndex;
      switch (objectName) {
        case "materials":
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          targetObject = targetObject.material.materials;
          break;
        case "bones":
          if (!targetObject.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          targetObject = targetObject.skeleton.bones;
          for (let i2 = 0; i2 < targetObject.length; i2++) {
            if (targetObject[i2].name === objectIndex) {
              objectIndex = i2;
              break;
            }
          }
          break;
        case "map":
          if ("map" in targetObject) {
            targetObject = targetObject.map;
            break;
          }
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          targetObject = targetObject.material.map;
          break;
        default:
          if (targetObject[objectName] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          targetObject = targetObject[objectName];
      }
      if (objectIndex !== void 0) {
        if (targetObject[objectIndex] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
          return;
        }
        targetObject = targetObject[objectIndex];
      }
    }
    const nodeProperty = targetObject[propertyName];
    if (nodeProperty === void 0) {
      const nodeName = parsedPath.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
      return;
    }
    let versioning = this.Versioning.None;
    this.targetObject = targetObject;
    if (targetObject.needsUpdate !== void 0) {
      versioning = this.Versioning.NeedsUpdate;
    } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
      versioning = this.Versioning.MatrixWorldNeedsUpdate;
    }
    let bindingType = this.BindingType.Direct;
    if (propertyIndex !== void 0) {
      if (propertyName === "morphTargetInfluences") {
        if (!targetObject.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!targetObject.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
          propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
        }
      }
      bindingType = this.BindingType.ArrayElement;
      this.resolvedProperty = nodeProperty;
      this.propertyIndex = propertyIndex;
    } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
      bindingType = this.BindingType.HasFromToArray;
      this.resolvedProperty = nodeProperty;
    } else if (Array.isArray(nodeProperty)) {
      bindingType = this.BindingType.EntireArray;
      this.resolvedProperty = nodeProperty;
    } else {
      this.propertyName = propertyName;
    }
    this.getValue = this.GetterByBindingType[bindingType];
    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
  }
  unbind() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
};
PropertyBinding.Composite = Composite;
PropertyBinding.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
PropertyBinding.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
PropertyBinding.prototype.GetterByBindingType = [
  PropertyBinding.prototype._getValue_direct,
  PropertyBinding.prototype._getValue_array,
  PropertyBinding.prototype._getValue_arrayElement,
  PropertyBinding.prototype._getValue_toArray
];
PropertyBinding.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    PropertyBinding.prototype._setValue_direct,
    PropertyBinding.prototype._setValue_direct_setNeedsUpdate,
    PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    PropertyBinding.prototype._setValue_array,
    PropertyBinding.prototype._setValue_array_setNeedsUpdate,
    PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    PropertyBinding.prototype._setValue_arrayElement,
    PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,
    PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    PropertyBinding.prototype._setValue_fromArray,
    PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,
    PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
var _controlInterpolantsResultBuffer = new Float32Array(1);
var InstancedInterleavedBuffer = class extends InterleavedBuffer {
  constructor(array3, stride, meshPerAttribute = 1) {
    super(array3, stride);
    this.isInstancedInterleavedBuffer = true;
    this.meshPerAttribute = meshPerAttribute;
  }
  copy(source) {
    super.copy(source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
  clone(data) {
    const ib = super.clone(data);
    ib.meshPerAttribute = this.meshPerAttribute;
    return ib;
  }
  toJSON(data) {
    const json = super.toJSON(data);
    json.isInstancedInterleavedBuffer = true;
    json.meshPerAttribute = this.meshPerAttribute;
    return json;
  }
};
var _matrix = new Matrix4();
var Raycaster = class {
  constructor(origin, direction2, near = 0, far = Infinity) {
    this.ray = new Ray(origin, direction2);
    this.near = near;
    this.far = far;
    this.camera = null;
    this.layers = new Layers();
    this.params = {
      Mesh: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {}
    };
  }
  set(origin, direction2) {
    this.ray.set(origin, direction2);
  }
  setFromCamera(coords, camera3) {
    if (camera3.isPerspectiveCamera) {
      this.ray.origin.setFromMatrixPosition(camera3.matrixWorld);
      this.ray.direction.set(coords.x, coords.y, 0.5).unproject(camera3).sub(this.ray.origin).normalize();
      this.camera = camera3;
    } else if (camera3.isOrthographicCamera) {
      this.ray.origin.set(coords.x, coords.y, (camera3.near + camera3.far) / (camera3.near - camera3.far)).unproject(camera3);
      this.ray.direction.set(0, 0, -1).transformDirection(camera3.matrixWorld);
      this.camera = camera3;
    } else {
      console.error("THREE.Raycaster: Unsupported camera type: " + camera3.type);
    }
  }
  setFromXRController(controller) {
    _matrix.identity().extractRotation(controller.matrixWorld);
    this.ray.origin.setFromMatrixPosition(controller.matrixWorld);
    this.ray.direction.set(0, 0, -1).applyMatrix4(_matrix);
    return this;
  }
  intersectObject(object2, recursive = true, intersects4 = []) {
    intersect(object2, this, intersects4, recursive);
    intersects4.sort(ascSort);
    return intersects4;
  }
  intersectObjects(objects, recursive = true, intersects4 = []) {
    for (let i2 = 0, l2 = objects.length; i2 < l2; i2++) {
      intersect(objects[i2], this, intersects4, recursive);
    }
    intersects4.sort(ascSort);
    return intersects4;
  }
};
function ascSort(a2, b) {
  return a2.distance - b.distance;
}
function intersect(object2, raycaster, intersects4, recursive) {
  let propagate = true;
  if (object2.layers.test(raycaster.layers)) {
    const result = object2.raycast(raycaster, intersects4);
    if (result === false) propagate = false;
  }
  if (propagate === true && recursive === true) {
    const children2 = object2.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      intersect(children2[i2], raycaster, intersects4, true);
    }
  }
}
var Spherical = class {
  constructor(radius = 1, phi = 0, theta = 0) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  }
  set(radius, phi, theta) {
    this.radius = radius;
    this.phi = phi;
    this.theta = theta;
    return this;
  }
  copy(other) {
    this.radius = other.radius;
    this.phi = other.phi;
    this.theta = other.theta;
    return this;
  }
  // restrict phi to be between EPS and PI-EPS
  makeSafe() {
    const EPS = 1e-6;
    this.phi = Math.max(EPS, Math.min(Math.PI - EPS, this.phi));
    return this;
  }
  setFromVector3(v3) {
    return this.setFromCartesianCoords(v3.x, v3.y, v3.z);
  }
  setFromCartesianCoords(x2, y2, z2) {
    this.radius = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
    if (this.radius === 0) {
      this.theta = 0;
      this.phi = 0;
    } else {
      this.theta = Math.atan2(x2, z2);
      this.phi = Math.acos(clamp(y2 / this.radius, -1, 1));
    }
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _vector$4 = new Vector2();
var _startP = new Vector3();
var _startEnd = new Vector3();
var Line3 = class {
  constructor(start = new Vector3(), end = new Vector3()) {
    this.start = start;
    this.end = end;
  }
  set(start, end) {
    this.start.copy(start);
    this.end.copy(end);
    return this;
  }
  copy(line) {
    this.start.copy(line.start);
    this.end.copy(line.end);
    return this;
  }
  getCenter(target) {
    return target.addVectors(this.start, this.end).multiplyScalar(0.5);
  }
  delta(target) {
    return target.subVectors(this.end, this.start);
  }
  distanceSq() {
    return this.start.distanceToSquared(this.end);
  }
  distance() {
    return this.start.distanceTo(this.end);
  }
  at(t4, target) {
    return this.delta(target).multiplyScalar(t4).add(this.start);
  }
  closestPointToPointParameter(point2, clampToLine) {
    _startP.subVectors(point2, this.start);
    _startEnd.subVectors(this.end, this.start);
    const startEnd2 = _startEnd.dot(_startEnd);
    const startEnd_startP = _startEnd.dot(_startP);
    let t4 = startEnd_startP / startEnd2;
    if (clampToLine) {
      t4 = clamp(t4, 0, 1);
    }
    return t4;
  }
  closestPointToPoint(point2, clampToLine, target) {
    const t4 = this.closestPointToPointParameter(point2, clampToLine);
    return this.delta(target).multiplyScalar(t4).add(this.start);
  }
  applyMatrix4(matrix) {
    this.start.applyMatrix4(matrix);
    this.end.applyMatrix4(matrix);
    return this;
  }
  equals(line) {
    return line.start.equals(this.start) && line.end.equals(this.end);
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _vector$3 = new Vector3();
var _vector$2 = new Vector3();
var _boneMatrix = new Matrix4();
var _matrixWorldInv = new Matrix4();
var _vector$1 = new Vector3();
var _color1 = new Color();
var _color2 = new Color();
var _v1 = new Vector3();
var _v2 = new Vector3();
var _v3 = new Vector3();
var _vector = new Vector3();
var _camera = new Camera();
var _box = new Box3();
var _axis = new Vector3();
var ShapePath = class {
  constructor() {
    this.type = "ShapePath";
    this.color = new Color();
    this.subPaths = [];
    this.currentPath = null;
  }
  moveTo(x2, y2) {
    this.currentPath = new Path();
    this.subPaths.push(this.currentPath);
    this.currentPath.moveTo(x2, y2);
    return this;
  }
  lineTo(x2, y2) {
    this.currentPath.lineTo(x2, y2);
    return this;
  }
  quadraticCurveTo(aCPx, aCPy, aX, aY) {
    this.currentPath.quadraticCurveTo(aCPx, aCPy, aX, aY);
    return this;
  }
  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    this.currentPath.bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY);
    return this;
  }
  splineThru(pts) {
    this.currentPath.splineThru(pts);
    return this;
  }
  toShapes(isCCW) {
    function toShapesNoHoles(inSubpaths) {
      const shapes2 = [];
      for (let i2 = 0, l2 = inSubpaths.length; i2 < l2; i2++) {
        const tmpPath2 = inSubpaths[i2];
        const tmpShape2 = new Shape();
        tmpShape2.curves = tmpPath2.curves;
        shapes2.push(tmpShape2);
      }
      return shapes2;
    }
    function isPointInsidePolygon(inPt, inPolygon) {
      const polyLen = inPolygon.length;
      let inside = false;
      for (let p2 = polyLen - 1, q2 = 0; q2 < polyLen; p2 = q2++) {
        let edgeLowPt = inPolygon[p2];
        let edgeHighPt = inPolygon[q2];
        let edgeDx = edgeHighPt.x - edgeLowPt.x;
        let edgeDy = edgeHighPt.y - edgeLowPt.y;
        if (Math.abs(edgeDy) > Number.EPSILON) {
          if (edgeDy < 0) {
            edgeLowPt = inPolygon[q2];
            edgeDx = -edgeDx;
            edgeHighPt = inPolygon[p2];
            edgeDy = -edgeDy;
          }
          if (inPt.y < edgeLowPt.y || inPt.y > edgeHighPt.y) continue;
          if (inPt.y === edgeLowPt.y) {
            if (inPt.x === edgeLowPt.x) return true;
          } else {
            const perpEdge = edgeDy * (inPt.x - edgeLowPt.x) - edgeDx * (inPt.y - edgeLowPt.y);
            if (perpEdge === 0) return true;
            if (perpEdge < 0) continue;
            inside = !inside;
          }
        } else {
          if (inPt.y !== edgeLowPt.y) continue;
          if (edgeHighPt.x <= inPt.x && inPt.x <= edgeLowPt.x || edgeLowPt.x <= inPt.x && inPt.x <= edgeHighPt.x) return true;
        }
      }
      return inside;
    }
    const isClockWise = ShapeUtils.isClockWise;
    const subPaths = this.subPaths;
    if (subPaths.length === 0) return [];
    let solid, tmpPath, tmpShape;
    const shapes = [];
    if (subPaths.length === 1) {
      tmpPath = subPaths[0];
      tmpShape = new Shape();
      tmpShape.curves = tmpPath.curves;
      shapes.push(tmpShape);
      return shapes;
    }
    let holesFirst = !isClockWise(subPaths[0].getPoints());
    holesFirst = isCCW ? !holesFirst : holesFirst;
    const betterShapeHoles = [];
    const newShapes = [];
    let newShapeHoles = [];
    let mainIdx = 0;
    let tmpPoints;
    newShapes[mainIdx] = void 0;
    newShapeHoles[mainIdx] = [];
    for (let i2 = 0, l2 = subPaths.length; i2 < l2; i2++) {
      tmpPath = subPaths[i2];
      tmpPoints = tmpPath.getPoints();
      solid = isClockWise(tmpPoints);
      solid = isCCW ? !solid : solid;
      if (solid) {
        if (!holesFirst && newShapes[mainIdx]) mainIdx++;
        newShapes[mainIdx] = { s: new Shape(), p: tmpPoints };
        newShapes[mainIdx].s.curves = tmpPath.curves;
        if (holesFirst) mainIdx++;
        newShapeHoles[mainIdx] = [];
      } else {
        newShapeHoles[mainIdx].push({ h: tmpPath, p: tmpPoints[0] });
      }
    }
    if (!newShapes[0]) return toShapesNoHoles(subPaths);
    if (newShapes.length > 1) {
      let ambiguous = false;
      let toChange = 0;
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        betterShapeHoles[sIdx] = [];
      }
      for (let sIdx = 0, sLen = newShapes.length; sIdx < sLen; sIdx++) {
        const sho = newShapeHoles[sIdx];
        for (let hIdx = 0; hIdx < sho.length; hIdx++) {
          const ho = sho[hIdx];
          let hole_unassigned = true;
          for (let s2Idx = 0; s2Idx < newShapes.length; s2Idx++) {
            if (isPointInsidePolygon(ho.p, newShapes[s2Idx].p)) {
              if (sIdx !== s2Idx) toChange++;
              if (hole_unassigned) {
                hole_unassigned = false;
                betterShapeHoles[s2Idx].push(ho);
              } else {
                ambiguous = true;
              }
            }
          }
          if (hole_unassigned) {
            betterShapeHoles[sIdx].push(ho);
          }
        }
      }
      if (toChange > 0 && ambiguous === false) {
        newShapeHoles = betterShapeHoles;
      }
    }
    let tmpHoles;
    for (let i2 = 0, il = newShapes.length; i2 < il; i2++) {
      tmpShape = newShapes[i2].s;
      shapes.push(tmpShape);
      tmpHoles = newShapeHoles[i2];
      for (let j2 = 0, jl = tmpHoles.length; j2 < jl; j2++) {
        tmpShape.holes.push(tmpHoles[j2].h);
      }
    }
    return shapes;
  }
};
var Controls = class extends EventDispatcher {
  constructor(object2, domElement) {
    super();
    this.object = object2;
    this.domElement = domElement;
    this.enabled = true;
    this.state = -1;
    this.keys = {};
    this.mouseButtons = { LEFT: null, MIDDLE: null, RIGHT: null };
    this.touches = { ONE: null, TWO: null };
  }
  connect() {
  }
  disconnect() {
  }
  dispose() {
  }
  update() {
  }
};
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: REVISION
  } }));
}
if (typeof window !== "undefined") {
  if (window.__THREE__) {
    console.warn("WARNING: Multiple instances of Three.js being imported.");
  } else {
    window.__THREE__ = REVISION;
  }
}

// node_modules/three/examples/jsm/renderers/CSS2DRenderer.js
var CSS2DObject = class extends Object3D {
  constructor(element2 = document.createElement("div")) {
    super();
    this.isCSS2DObject = true;
    this.element = element2;
    this.element.style.position = "absolute";
    this.element.style.userSelect = "none";
    this.element.setAttribute("draggable", false);
    this.center = new Vector2(0.5, 0.5);
    this.addEventListener("removed", function() {
      this.traverse(function(object2) {
        if (object2.element instanceof Element && object2.element.parentNode !== null) {
          object2.element.parentNode.removeChild(object2.element);
        }
      });
    });
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.element = source.element.cloneNode(true);
    this.center = source.center;
    return this;
  }
};
var _vector4 = new Vector3();
var _viewMatrix = new Matrix4();
var _viewProjectionMatrix = new Matrix4();
var _a = new Vector3();
var _b = new Vector3();
var CSS2DRenderer = class {
  constructor(parameters = {}) {
    const _this = this;
    let _width, _height;
    let _widthHalf, _heightHalf;
    const cache2 = {
      objects: /* @__PURE__ */ new WeakMap()
    };
    const domElement = parameters.element !== void 0 ? parameters.element : document.createElement("div");
    domElement.style.overflow = "hidden";
    this.domElement = domElement;
    this.getSize = function() {
      return {
        width: _width,
        height: _height
      };
    };
    this.render = function(scene3, camera3) {
      if (scene3.matrixWorldAutoUpdate === true) scene3.updateMatrixWorld();
      if (camera3.parent === null && camera3.matrixWorldAutoUpdate === true) camera3.updateMatrixWorld();
      _viewMatrix.copy(camera3.matrixWorldInverse);
      _viewProjectionMatrix.multiplyMatrices(camera3.projectionMatrix, _viewMatrix);
      renderObject(scene3, scene3, camera3);
      zOrder4(scene3);
    };
    this.setSize = function(width, height) {
      _width = width;
      _height = height;
      _widthHalf = _width / 2;
      _heightHalf = _height / 2;
      domElement.style.width = width + "px";
      domElement.style.height = height + "px";
    };
    function hideObject(object2) {
      if (object2.isCSS2DObject) object2.element.style.display = "none";
      for (let i2 = 0, l2 = object2.children.length; i2 < l2; i2++) {
        hideObject(object2.children[i2]);
      }
    }
    function renderObject(object2, scene3, camera3) {
      if (object2.visible === false) {
        hideObject(object2);
        return;
      }
      if (object2.isCSS2DObject) {
        _vector4.setFromMatrixPosition(object2.matrixWorld);
        _vector4.applyMatrix4(_viewProjectionMatrix);
        const visible = _vector4.z >= -1 && _vector4.z <= 1 && object2.layers.test(camera3.layers) === true;
        const element2 = object2.element;
        element2.style.display = visible === true ? "" : "none";
        if (visible === true) {
          object2.onBeforeRender(_this, scene3, camera3);
          element2.style.transform = "translate(" + -100 * object2.center.x + "%," + -100 * object2.center.y + "%)translate(" + (_vector4.x * _widthHalf + _widthHalf) + "px," + (-_vector4.y * _heightHalf + _heightHalf) + "px)";
          if (element2.parentNode !== domElement) {
            domElement.appendChild(element2);
          }
          object2.onAfterRender(_this, scene3, camera3);
        }
        const objectData = {
          distanceToCameraSquared: getDistanceToSquared(camera3, object2)
        };
        cache2.objects.set(object2, objectData);
      }
      for (let i2 = 0, l2 = object2.children.length; i2 < l2; i2++) {
        renderObject(object2.children[i2], scene3, camera3);
      }
    }
    function getDistanceToSquared(object1, object2) {
      _a.setFromMatrixPosition(object1.matrixWorld);
      _b.setFromMatrixPosition(object2.matrixWorld);
      return _a.distanceToSquared(_b);
    }
    function filterAndFlatten(scene3) {
      const result = [];
      scene3.traverseVisible(function(object2) {
        if (object2.isCSS2DObject) result.push(object2);
      });
      return result;
    }
    function zOrder4(scene3) {
      const sorted = filterAndFlatten(scene3).sort(function(a2, b) {
        if (a2.renderOrder !== b.renderOrder) {
          return b.renderOrder - a2.renderOrder;
        }
        const distanceA = cache2.objects.get(a2).distanceToCameraSquared;
        const distanceB = cache2.objects.get(b).distanceToCameraSquared;
        return distanceA - distanceB;
      });
      const zMax = sorted.length;
      for (let i2 = 0, l2 = sorted.length; i2 < l2; i2++) {
        sorted[i2].element.style.zIndex = zMax - i2;
      }
    }
  }
};

// node_modules/lodash-es/isObject.js
function isObject(value) {
  var type = typeof value;
  return value != null && (type == "object" || type == "function");
}
var isObject_default = isObject;

// node_modules/lodash-es/_freeGlobal.js
var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
var freeGlobal_default = freeGlobal;

// node_modules/lodash-es/_root.js
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root = freeGlobal_default || freeSelf || Function("return this")();
var root_default = root;

// node_modules/lodash-es/now.js
var now2 = function() {
  return root_default.Date.now();
};
var now_default = now2;

// node_modules/lodash-es/_trimmedEndIndex.js
var reWhitespace = /\s/;
function trimmedEndIndex(string) {
  var index7 = string.length;
  while (index7-- && reWhitespace.test(string.charAt(index7))) {
  }
  return index7;
}
var trimmedEndIndex_default = trimmedEndIndex;

// node_modules/lodash-es/_baseTrim.js
var reTrimStart = /^\s+/;
function baseTrim(string) {
  return string ? string.slice(0, trimmedEndIndex_default(string) + 1).replace(reTrimStart, "") : string;
}
var baseTrim_default = baseTrim;

// node_modules/lodash-es/_Symbol.js
var Symbol2 = root_default.Symbol;
var Symbol_default = Symbol2;

// node_modules/lodash-es/_getRawTag.js
var objectProto = Object.prototype;
var hasOwnProperty = objectProto.hasOwnProperty;
var nativeObjectToString = objectProto.toString;
var symToStringTag = Symbol_default ? Symbol_default.toStringTag : void 0;
function getRawTag(value) {
  var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
  try {
    value[symToStringTag] = void 0;
    var unmasked = true;
  } catch (e3) {
  }
  var result = nativeObjectToString.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag] = tag;
    } else {
      delete value[symToStringTag];
    }
  }
  return result;
}
var getRawTag_default = getRawTag;

// node_modules/lodash-es/_objectToString.js
var objectProto2 = Object.prototype;
var nativeObjectToString2 = objectProto2.toString;
function objectToString(value) {
  return nativeObjectToString2.call(value);
}
var objectToString_default = objectToString;

// node_modules/lodash-es/_baseGetTag.js
var nullTag = "[object Null]";
var undefinedTag = "[object Undefined]";
var symToStringTag2 = Symbol_default ? Symbol_default.toStringTag : void 0;
function baseGetTag(value) {
  if (value == null) {
    return value === void 0 ? undefinedTag : nullTag;
  }
  return symToStringTag2 && symToStringTag2 in Object(value) ? getRawTag_default(value) : objectToString_default(value);
}
var baseGetTag_default = baseGetTag;

// node_modules/lodash-es/isObjectLike.js
function isObjectLike(value) {
  return value != null && typeof value == "object";
}
var isObjectLike_default = isObjectLike;

// node_modules/lodash-es/isSymbol.js
var symbolTag = "[object Symbol]";
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike_default(value) && baseGetTag_default(value) == symbolTag;
}
var isSymbol_default = isSymbol;

// node_modules/lodash-es/toNumber.js
var NAN = 0 / 0;
var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
var reIsBinary = /^0b[01]+$/i;
var reIsOctal = /^0o[0-7]+$/i;
var freeParseInt = parseInt;
function toNumber(value) {
  if (typeof value == "number") {
    return value;
  }
  if (isSymbol_default(value)) {
    return NAN;
  }
  if (isObject_default(value)) {
    var other = typeof value.valueOf == "function" ? value.valueOf() : value;
    value = isObject_default(other) ? other + "" : other;
  }
  if (typeof value != "string") {
    return value === 0 ? value : +value;
  }
  value = baseTrim_default(value);
  var isBinary = reIsBinary.test(value);
  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
}
var toNumber_default = toNumber;

// node_modules/lodash-es/debounce.js
var FUNC_ERROR_TEXT = "Expected a function";
var nativeMax = Math.max;
var nativeMin = Math.min;
function debounce(func, wait, options) {
  var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
  if (typeof func != "function") {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  wait = toNumber_default(wait) || 0;
  if (isObject_default(options)) {
    leading = !!options.leading;
    maxing = "maxWait" in options;
    maxWait = maxing ? nativeMax(toNumber_default(options.maxWait) || 0, wait) : maxWait;
    trailing = "trailing" in options ? !!options.trailing : trailing;
  }
  function invokeFunc(time2) {
    var args = lastArgs, thisArg = lastThis;
    lastArgs = lastThis = void 0;
    lastInvokeTime = time2;
    result = func.apply(thisArg, args);
    return result;
  }
  function leadingEdge(time2) {
    lastInvokeTime = time2;
    timerId = setTimeout(timerExpired, wait);
    return leading ? invokeFunc(time2) : result;
  }
  function remainingWait(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
  }
  function shouldInvoke(time2) {
    var timeSinceLastCall = time2 - lastCallTime, timeSinceLastInvoke = time2 - lastInvokeTime;
    return lastCallTime === void 0 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
  }
  function timerExpired() {
    var time2 = now_default();
    if (shouldInvoke(time2)) {
      return trailingEdge(time2);
    }
    timerId = setTimeout(timerExpired, remainingWait(time2));
  }
  function trailingEdge(time2) {
    timerId = void 0;
    if (trailing && lastArgs) {
      return invokeFunc(time2);
    }
    lastArgs = lastThis = void 0;
    return result;
  }
  function cancel() {
    if (timerId !== void 0) {
      clearTimeout(timerId);
    }
    lastInvokeTime = 0;
    lastArgs = lastCallTime = lastThis = timerId = void 0;
  }
  function flush() {
    return timerId === void 0 ? result : trailingEdge(now_default());
  }
  function debounced() {
    var time2 = now_default(), isInvoking = shouldInvoke(time2);
    lastArgs = arguments;
    lastThis = this;
    lastCallTime = time2;
    if (isInvoking) {
      if (timerId === void 0) {
        return leadingEdge(lastCallTime);
      }
      if (maxing) {
        clearTimeout(timerId);
        timerId = setTimeout(timerExpired, wait);
        return invokeFunc(lastCallTime);
      }
    }
    if (timerId === void 0) {
      timerId = setTimeout(timerExpired, wait);
    }
    return result;
  }
  debounced.cancel = cancel;
  debounced.flush = flush;
  return debounced;
}
var debounce_default = debounce;

// node_modules/kapsule/dist/kapsule.mjs
function _arrayLikeToArray3(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles3(r2) {
  if (Array.isArray(r2)) return r2;
}
function _classCallCheck(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _createClass(e3, r2, t4) {
  return Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}
function _iterableToArrayLimit3(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest3() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray3(r2, e3) {
  return _arrayWithHoles3(r2) || _iterableToArrayLimit3(r2, e3) || _unsupportedIterableToArray3(r2, e3) || _nonIterableRest3();
}
function _unsupportedIterableToArray3(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray3(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray3(r2, a2) : void 0;
  }
}
var Prop = _createClass(function Prop2(name, _ref) {
  var _ref$default = _ref["default"], defaultVal = _ref$default === void 0 ? null : _ref$default, _ref$triggerUpdate = _ref.triggerUpdate, triggerUpdate = _ref$triggerUpdate === void 0 ? true : _ref$triggerUpdate, _ref$onChange = _ref.onChange, onChange15 = _ref$onChange === void 0 ? function(newVal, state) {
  } : _ref$onChange;
  _classCallCheck(this, Prop2);
  this.name = name;
  this.defaultVal = defaultVal;
  this.triggerUpdate = triggerUpdate;
  this.onChange = onChange15;
});
function index2(_ref2) {
  var _ref2$stateInit = _ref2.stateInit, stateInit7 = _ref2$stateInit === void 0 ? function() {
    return {};
  } : _ref2$stateInit, _ref2$props = _ref2.props, rawProps = _ref2$props === void 0 ? {} : _ref2$props, _ref2$methods = _ref2.methods, methods = _ref2$methods === void 0 ? {} : _ref2$methods, _ref2$aliases = _ref2.aliases, aliases = _ref2$aliases === void 0 ? {} : _ref2$aliases, _ref2$init = _ref2.init, initFn = _ref2$init === void 0 ? function() {
  } : _ref2$init, _ref2$update = _ref2.update, updateFn = _ref2$update === void 0 ? function() {
  } : _ref2$update;
  var props = Object.keys(rawProps).map(function(propName) {
    return new Prop(propName, rawProps[propName]);
  });
  return function KapsuleComp() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    var classMode = !!(this instanceof KapsuleComp ? this.constructor : void 0);
    var nodeElement = classMode ? args.shift() : void 0;
    var _args$ = args[0], options = _args$ === void 0 ? {} : _args$;
    var state = Object.assign(
      {},
      stateInit7 instanceof Function ? stateInit7(options) : stateInit7,
      // Support plain objects for backwards compatibility
      {
        initialised: false
      }
    );
    var changedProps = {};
    function comp(nodeElement2) {
      initStatic(nodeElement2, options);
      digest();
      return comp;
    }
    var initStatic = function initStatic2(nodeElement2, options2) {
      initFn.call(comp, nodeElement2, state, options2);
      state.initialised = true;
    };
    var digest = debounce_default(function() {
      if (!state.initialised) {
        return;
      }
      updateFn.call(comp, state, changedProps);
      changedProps = {};
    }, 1);
    props.forEach(function(prop) {
      comp[prop.name] = getSetProp(prop);
      function getSetProp(_ref3) {
        var prop2 = _ref3.name, _ref3$triggerUpdate = _ref3.triggerUpdate, redigest = _ref3$triggerUpdate === void 0 ? false : _ref3$triggerUpdate, _ref3$onChange = _ref3.onChange, onChange15 = _ref3$onChange === void 0 ? function(newVal, state2) {
        } : _ref3$onChange, _ref3$defaultVal = _ref3.defaultVal, defaultVal = _ref3$defaultVal === void 0 ? null : _ref3$defaultVal;
        return function(_2) {
          var curVal = state[prop2];
          if (!arguments.length) {
            return curVal;
          }
          var val = _2 === void 0 ? defaultVal : _2;
          state[prop2] = val;
          onChange15.call(comp, val, state, curVal);
          !changedProps.hasOwnProperty(prop2) && (changedProps[prop2] = curVal);
          if (redigest) {
            digest();
          }
          return comp;
        };
      }
    });
    Object.keys(methods).forEach(function(methodName) {
      comp[methodName] = function() {
        var _methods$methodName;
        for (var _len2 = arguments.length, args2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args2[_key2] = arguments[_key2];
        }
        return (_methods$methodName = methods[methodName]).call.apply(_methods$methodName, [comp, state].concat(args2));
      };
    });
    Object.entries(aliases).forEach(function(_ref4) {
      var _ref5 = _slicedToArray3(_ref4, 2), alias = _ref5[0], target = _ref5[1];
      return comp[alias] = comp[target];
    });
    comp.resetProps = function() {
      props.forEach(function(prop) {
        comp[prop.name](prop.defaultVal);
      });
      return comp;
    };
    comp.resetProps();
    state._rerender = digest;
    classMode && nodeElement && comp(nodeElement);
    return comp;
  };
}

// node_modules/@tweenjs/tween.js/dist/tween.esm.js
var Easing = Object.freeze({
  Linear: Object.freeze({
    None: function(amount) {
      return amount;
    },
    In: function(amount) {
      return amount;
    },
    Out: function(amount) {
      return amount;
    },
    InOut: function(amount) {
      return amount;
    }
  }),
  Quadratic: Object.freeze({
    In: function(amount) {
      return amount * amount;
    },
    Out: function(amount) {
      return amount * (2 - amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount;
      }
      return -0.5 * (--amount * (amount - 2) - 1);
    }
  }),
  Cubic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount + 2);
    }
  }),
  Quartic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount;
    },
    Out: function(amount) {
      return 1 - --amount * amount * amount * amount;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount;
      }
      return -0.5 * ((amount -= 2) * amount * amount * amount - 2);
    }
  }),
  Quintic: Object.freeze({
    In: function(amount) {
      return amount * amount * amount * amount * amount;
    },
    Out: function(amount) {
      return --amount * amount * amount * amount * amount + 1;
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return 0.5 * amount * amount * amount * amount * amount;
      }
      return 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);
    }
  }),
  Sinusoidal: Object.freeze({
    In: function(amount) {
      return 1 - Math.sin((1 - amount) * Math.PI / 2);
    },
    Out: function(amount) {
      return Math.sin(amount * Math.PI / 2);
    },
    InOut: function(amount) {
      return 0.5 * (1 - Math.sin(Math.PI * (0.5 - amount)));
    }
  }),
  Exponential: Object.freeze({
    In: function(amount) {
      return amount === 0 ? 0 : Math.pow(1024, amount - 1);
    },
    Out: function(amount) {
      return amount === 1 ? 1 : 1 - Math.pow(2, -10 * amount);
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      if ((amount *= 2) < 1) {
        return 0.5 * Math.pow(1024, amount - 1);
      }
      return 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);
    }
  }),
  Circular: Object.freeze({
    In: function(amount) {
      return 1 - Math.sqrt(1 - amount * amount);
    },
    Out: function(amount) {
      return Math.sqrt(1 - --amount * amount);
    },
    InOut: function(amount) {
      if ((amount *= 2) < 1) {
        return -0.5 * (Math.sqrt(1 - amount * amount) - 1);
      }
      return 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);
    }
  }),
  Elastic: Object.freeze({
    In: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
    },
    Out: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      return Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;
    },
    InOut: function(amount) {
      if (amount === 0) {
        return 0;
      }
      if (amount === 1) {
        return 1;
      }
      amount *= 2;
      if (amount < 1) {
        return -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);
      }
      return 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;
    }
  }),
  Back: Object.freeze({
    In: function(amount) {
      var s2 = 1.70158;
      return amount === 1 ? 1 : amount * amount * ((s2 + 1) * amount - s2);
    },
    Out: function(amount) {
      var s2 = 1.70158;
      return amount === 0 ? 0 : --amount * amount * ((s2 + 1) * amount + s2) + 1;
    },
    InOut: function(amount) {
      var s2 = 1.70158 * 1.525;
      if ((amount *= 2) < 1) {
        return 0.5 * (amount * amount * ((s2 + 1) * amount - s2));
      }
      return 0.5 * ((amount -= 2) * amount * ((s2 + 1) * amount + s2) + 2);
    }
  }),
  Bounce: Object.freeze({
    In: function(amount) {
      return 1 - Easing.Bounce.Out(1 - amount);
    },
    Out: function(amount) {
      if (amount < 1 / 2.75) {
        return 7.5625 * amount * amount;
      } else if (amount < 2 / 2.75) {
        return 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;
      } else if (amount < 2.5 / 2.75) {
        return 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;
      } else {
        return 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;
      }
    },
    InOut: function(amount) {
      if (amount < 0.5) {
        return Easing.Bounce.In(amount * 2) * 0.5;
      }
      return Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;
    }
  }),
  generatePow: function(power) {
    if (power === void 0) {
      power = 4;
    }
    power = power < Number.EPSILON ? Number.EPSILON : power;
    power = power > 1e4 ? 1e4 : power;
    return {
      In: function(amount) {
        return Math.pow(amount, power);
      },
      Out: function(amount) {
        return 1 - Math.pow(1 - amount, power);
      },
      InOut: function(amount) {
        if (amount < 0.5) {
          return Math.pow(amount * 2, power) / 2;
        }
        return (1 - Math.pow(2 - amount * 2, power)) / 2 + 0.5;
      }
    };
  }
});
var now3 = function() {
  return performance.now();
};
var Group2 = (
  /** @class */
  function() {
    function Group3() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      this._tweens = {};
      this._tweensAddedDuringUpdate = {};
      this.add.apply(this, tweens);
    }
    Group3.prototype.getAll = function() {
      var _this = this;
      return Object.keys(this._tweens).map(function(tweenId) {
        return _this._tweens[tweenId];
      });
    };
    Group3.prototype.removeAll = function() {
      this._tweens = {};
    };
    Group3.prototype.add = function() {
      var _a2;
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      for (var _b2 = 0, tweens_1 = tweens; _b2 < tweens_1.length; _b2++) {
        var tween = tweens_1[_b2];
        (_a2 = tween._group) === null || _a2 === void 0 ? void 0 : _a2.remove(tween);
        tween._group = this;
        this._tweens[tween.getId()] = tween;
        this._tweensAddedDuringUpdate[tween.getId()] = tween;
      }
    };
    Group3.prototype.remove = function() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      for (var _a2 = 0, tweens_2 = tweens; _a2 < tweens_2.length; _a2++) {
        var tween = tweens_2[_a2];
        tween._group = void 0;
        delete this._tweens[tween.getId()];
        delete this._tweensAddedDuringUpdate[tween.getId()];
      }
    };
    Group3.prototype.allStopped = function() {
      return this.getAll().every(function(tween) {
        return !tween.isPlaying();
      });
    };
    Group3.prototype.update = function(time2, preserve) {
      if (time2 === void 0) {
        time2 = now3();
      }
      if (preserve === void 0) {
        preserve = true;
      }
      var tweenIds = Object.keys(this._tweens);
      if (tweenIds.length === 0)
        return;
      while (tweenIds.length > 0) {
        this._tweensAddedDuringUpdate = {};
        for (var i2 = 0; i2 < tweenIds.length; i2++) {
          var tween = this._tweens[tweenIds[i2]];
          var autoStart = !preserve;
          if (tween && tween.update(time2, autoStart) === false && !preserve)
            this.remove(tween);
        }
        tweenIds = Object.keys(this._tweensAddedDuringUpdate);
      }
    };
    return Group3;
  }()
);
var Interpolation = {
  Linear: function(v3, k2) {
    var m2 = v3.length - 1;
    var f2 = m2 * k2;
    var i2 = Math.floor(f2);
    var fn = Interpolation.Utils.Linear;
    if (k2 < 0) {
      return fn(v3[0], v3[1], f2);
    }
    if (k2 > 1) {
      return fn(v3[m2], v3[m2 - 1], m2 - f2);
    }
    return fn(v3[i2], v3[i2 + 1 > m2 ? m2 : i2 + 1], f2 - i2);
  },
  Bezier: function(v3, k2) {
    var b = 0;
    var n2 = v3.length - 1;
    var pw = Math.pow;
    var bn = Interpolation.Utils.Bernstein;
    for (var i2 = 0; i2 <= n2; i2++) {
      b += pw(1 - k2, n2 - i2) * pw(k2, i2) * v3[i2] * bn(n2, i2);
    }
    return b;
  },
  CatmullRom: function(v3, k2) {
    var m2 = v3.length - 1;
    var f2 = m2 * k2;
    var i2 = Math.floor(f2);
    var fn = Interpolation.Utils.CatmullRom;
    if (v3[0] === v3[m2]) {
      if (k2 < 0) {
        i2 = Math.floor(f2 = m2 * (1 + k2));
      }
      return fn(v3[(i2 - 1 + m2) % m2], v3[i2], v3[(i2 + 1) % m2], v3[(i2 + 2) % m2], f2 - i2);
    } else {
      if (k2 < 0) {
        return v3[0] - (fn(v3[0], v3[0], v3[1], v3[1], -f2) - v3[0]);
      }
      if (k2 > 1) {
        return v3[m2] - (fn(v3[m2], v3[m2], v3[m2 - 1], v3[m2 - 1], f2 - m2) - v3[m2]);
      }
      return fn(v3[i2 ? i2 - 1 : 0], v3[i2], v3[m2 < i2 + 1 ? m2 : i2 + 1], v3[m2 < i2 + 2 ? m2 : i2 + 2], f2 - i2);
    }
  },
  Utils: {
    Linear: function(p02, p1, t4) {
      return (p1 - p02) * t4 + p02;
    },
    Bernstein: function(n2, i2) {
      var fc = Interpolation.Utils.Factorial;
      return fc(n2) / fc(i2) / fc(n2 - i2);
    },
    Factorial: /* @__PURE__ */ function() {
      var a2 = [1];
      return function(n2) {
        var s2 = 1;
        if (a2[n2]) {
          return a2[n2];
        }
        for (var i2 = n2; i2 > 1; i2--) {
          s2 *= i2;
        }
        a2[n2] = s2;
        return s2;
      };
    }(),
    CatmullRom: function(p02, p1, p2, p3, t4) {
      var v0 = (p2 - p02) * 0.5;
      var v1 = (p3 - p1) * 0.5;
      var t22 = t4 * t4;
      var t32 = t4 * t22;
      return (2 * p1 - 2 * p2 + v0 + v1) * t32 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t4 + p1;
    }
  }
};
var Sequence = (
  /** @class */
  function() {
    function Sequence2() {
    }
    Sequence2.nextId = function() {
      return Sequence2._nextId++;
    };
    Sequence2._nextId = 0;
    return Sequence2;
  }()
);
var mainGroup = new Group2();
var Tween = (
  /** @class */
  function() {
    function Tween2(object2, group2) {
      this._isPaused = false;
      this._pauseStart = 0;
      this._valuesStart = {};
      this._valuesEnd = {};
      this._valuesStartRepeat = {};
      this._duration = 1e3;
      this._isDynamic = false;
      this._initialRepeat = 0;
      this._repeat = 0;
      this._yoyo = false;
      this._isPlaying = false;
      this._reversed = false;
      this._delayTime = 0;
      this._startTime = 0;
      this._easingFunction = Easing.Linear.None;
      this._interpolationFunction = Interpolation.Linear;
      this._chainedTweens = [];
      this._onStartCallbackFired = false;
      this._onEveryStartCallbackFired = false;
      this._id = Sequence.nextId();
      this._isChainStopped = false;
      this._propertiesAreSetUp = false;
      this._goToEnd = false;
      this._object = object2;
      if (typeof group2 === "object") {
        this._group = group2;
        group2.add(this);
      } else if (group2 === true) {
        this._group = mainGroup;
        mainGroup.add(this);
      }
    }
    Tween2.prototype.getId = function() {
      return this._id;
    };
    Tween2.prototype.isPlaying = function() {
      return this._isPlaying;
    };
    Tween2.prototype.isPaused = function() {
      return this._isPaused;
    };
    Tween2.prototype.getDuration = function() {
      return this._duration;
    };
    Tween2.prototype.to = function(target, duration) {
      if (duration === void 0) {
        duration = 1e3;
      }
      if (this._isPlaying)
        throw new Error("Can not call Tween.to() while Tween is already started or paused. Stop the Tween first.");
      this._valuesEnd = target;
      this._propertiesAreSetUp = false;
      this._duration = duration < 0 ? 0 : duration;
      return this;
    };
    Tween2.prototype.duration = function(duration) {
      if (duration === void 0) {
        duration = 1e3;
      }
      this._duration = duration < 0 ? 0 : duration;
      return this;
    };
    Tween2.prototype.dynamic = function(dynamic) {
      if (dynamic === void 0) {
        dynamic = false;
      }
      this._isDynamic = dynamic;
      return this;
    };
    Tween2.prototype.start = function(time2, overrideStartingValues) {
      if (time2 === void 0) {
        time2 = now3();
      }
      if (overrideStartingValues === void 0) {
        overrideStartingValues = false;
      }
      if (this._isPlaying) {
        return this;
      }
      this._repeat = this._initialRepeat;
      if (this._reversed) {
        this._reversed = false;
        for (var property2 in this._valuesStartRepeat) {
          this._swapEndStartRepeatValues(property2);
          this._valuesStart[property2] = this._valuesStartRepeat[property2];
        }
      }
      this._isPlaying = true;
      this._isPaused = false;
      this._onStartCallbackFired = false;
      this._onEveryStartCallbackFired = false;
      this._isChainStopped = false;
      this._startTime = time2;
      this._startTime += this._delayTime;
      if (!this._propertiesAreSetUp || overrideStartingValues) {
        this._propertiesAreSetUp = true;
        if (!this._isDynamic) {
          var tmp3 = {};
          for (var prop in this._valuesEnd)
            tmp3[prop] = this._valuesEnd[prop];
          this._valuesEnd = tmp3;
        }
        this._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, overrideStartingValues);
      }
      return this;
    };
    Tween2.prototype.startFromCurrentValues = function(time2) {
      return this.start(time2, true);
    };
    Tween2.prototype._setupProperties = function(_object, _valuesStart, _valuesEnd, _valuesStartRepeat, overrideStartingValues) {
      for (var property2 in _valuesEnd) {
        var startValue = _object[property2];
        var startValueIsArray = Array.isArray(startValue);
        var propType = startValueIsArray ? "array" : typeof startValue;
        var isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property2]);
        if (propType === "undefined" || propType === "function") {
          continue;
        }
        if (isInterpolationList) {
          var endValues = _valuesEnd[property2];
          if (endValues.length === 0) {
            continue;
          }
          var temp2 = [startValue];
          for (var i2 = 0, l2 = endValues.length; i2 < l2; i2 += 1) {
            var value = this._handleRelativeValue(startValue, endValues[i2]);
            if (isNaN(value)) {
              isInterpolationList = false;
              console.warn("Found invalid interpolation list. Skipping.");
              break;
            }
            temp2.push(value);
          }
          if (isInterpolationList) {
            _valuesEnd[property2] = temp2;
          }
        }
        if ((propType === "object" || startValueIsArray) && startValue && !isInterpolationList) {
          _valuesStart[property2] = startValueIsArray ? [] : {};
          var nestedObject = startValue;
          for (var prop in nestedObject) {
            _valuesStart[property2][prop] = nestedObject[prop];
          }
          _valuesStartRepeat[property2] = startValueIsArray ? [] : {};
          var endValues = _valuesEnd[property2];
          if (!this._isDynamic) {
            var tmp3 = {};
            for (var prop in endValues)
              tmp3[prop] = endValues[prop];
            _valuesEnd[property2] = endValues = tmp3;
          }
          this._setupProperties(nestedObject, _valuesStart[property2], endValues, _valuesStartRepeat[property2], overrideStartingValues);
        } else {
          if (typeof _valuesStart[property2] === "undefined" || overrideStartingValues) {
            _valuesStart[property2] = startValue;
          }
          if (!startValueIsArray) {
            _valuesStart[property2] *= 1;
          }
          if (isInterpolationList) {
            _valuesStartRepeat[property2] = _valuesEnd[property2].slice().reverse();
          } else {
            _valuesStartRepeat[property2] = _valuesStart[property2] || 0;
          }
        }
      }
    };
    Tween2.prototype.stop = function() {
      if (!this._isChainStopped) {
        this._isChainStopped = true;
        this.stopChainedTweens();
      }
      if (!this._isPlaying) {
        return this;
      }
      this._isPlaying = false;
      this._isPaused = false;
      if (this._onStopCallback) {
        this._onStopCallback(this._object);
      }
      return this;
    };
    Tween2.prototype.end = function() {
      this._goToEnd = true;
      this.update(this._startTime + this._duration);
      return this;
    };
    Tween2.prototype.pause = function(time2) {
      if (time2 === void 0) {
        time2 = now3();
      }
      if (this._isPaused || !this._isPlaying) {
        return this;
      }
      this._isPaused = true;
      this._pauseStart = time2;
      return this;
    };
    Tween2.prototype.resume = function(time2) {
      if (time2 === void 0) {
        time2 = now3();
      }
      if (!this._isPaused || !this._isPlaying) {
        return this;
      }
      this._isPaused = false;
      this._startTime += time2 - this._pauseStart;
      this._pauseStart = 0;
      return this;
    };
    Tween2.prototype.stopChainedTweens = function() {
      for (var i2 = 0, numChainedTweens = this._chainedTweens.length; i2 < numChainedTweens; i2++) {
        this._chainedTweens[i2].stop();
      }
      return this;
    };
    Tween2.prototype.group = function(group2) {
      if (!group2) {
        console.warn("tween.group() without args has been removed, use group.add(tween) instead.");
        return this;
      }
      group2.add(this);
      return this;
    };
    Tween2.prototype.remove = function() {
      var _a2;
      (_a2 = this._group) === null || _a2 === void 0 ? void 0 : _a2.remove(this);
      return this;
    };
    Tween2.prototype.delay = function(amount) {
      if (amount === void 0) {
        amount = 0;
      }
      this._delayTime = amount;
      return this;
    };
    Tween2.prototype.repeat = function(times) {
      if (times === void 0) {
        times = 0;
      }
      this._initialRepeat = times;
      this._repeat = times;
      return this;
    };
    Tween2.prototype.repeatDelay = function(amount) {
      this._repeatDelayTime = amount;
      return this;
    };
    Tween2.prototype.yoyo = function(yoyo) {
      if (yoyo === void 0) {
        yoyo = false;
      }
      this._yoyo = yoyo;
      return this;
    };
    Tween2.prototype.easing = function(easingFunction) {
      if (easingFunction === void 0) {
        easingFunction = Easing.Linear.None;
      }
      this._easingFunction = easingFunction;
      return this;
    };
    Tween2.prototype.interpolation = function(interpolationFunction) {
      if (interpolationFunction === void 0) {
        interpolationFunction = Interpolation.Linear;
      }
      this._interpolationFunction = interpolationFunction;
      return this;
    };
    Tween2.prototype.chain = function() {
      var tweens = [];
      for (var _i = 0; _i < arguments.length; _i++) {
        tweens[_i] = arguments[_i];
      }
      this._chainedTweens = tweens;
      return this;
    };
    Tween2.prototype.onStart = function(callback) {
      this._onStartCallback = callback;
      return this;
    };
    Tween2.prototype.onEveryStart = function(callback) {
      this._onEveryStartCallback = callback;
      return this;
    };
    Tween2.prototype.onUpdate = function(callback) {
      this._onUpdateCallback = callback;
      return this;
    };
    Tween2.prototype.onRepeat = function(callback) {
      this._onRepeatCallback = callback;
      return this;
    };
    Tween2.prototype.onComplete = function(callback) {
      this._onCompleteCallback = callback;
      return this;
    };
    Tween2.prototype.onStop = function(callback) {
      this._onStopCallback = callback;
      return this;
    };
    Tween2.prototype.update = function(time2, autoStart) {
      var _this = this;
      var _a2;
      if (time2 === void 0) {
        time2 = now3();
      }
      if (autoStart === void 0) {
        autoStart = Tween2.autoStartOnUpdate;
      }
      if (this._isPaused)
        return true;
      var property2;
      if (!this._goToEnd && !this._isPlaying) {
        if (autoStart)
          this.start(time2, true);
        else
          return false;
      }
      this._goToEnd = false;
      if (time2 < this._startTime) {
        return true;
      }
      if (this._onStartCallbackFired === false) {
        if (this._onStartCallback) {
          this._onStartCallback(this._object);
        }
        this._onStartCallbackFired = true;
      }
      if (this._onEveryStartCallbackFired === false) {
        if (this._onEveryStartCallback) {
          this._onEveryStartCallback(this._object);
        }
        this._onEveryStartCallbackFired = true;
      }
      var elapsedTime = time2 - this._startTime;
      var durationAndDelay = this._duration + ((_a2 = this._repeatDelayTime) !== null && _a2 !== void 0 ? _a2 : this._delayTime);
      var totalTime = this._duration + this._repeat * durationAndDelay;
      var calculateElapsedPortion = function() {
        if (_this._duration === 0)
          return 1;
        if (elapsedTime > totalTime) {
          return 1;
        }
        var timesRepeated = Math.trunc(elapsedTime / durationAndDelay);
        var timeIntoCurrentRepeat = elapsedTime - timesRepeated * durationAndDelay;
        var portion = Math.min(timeIntoCurrentRepeat / _this._duration, 1);
        if (portion === 0 && elapsedTime === _this._duration) {
          return 1;
        }
        return portion;
      };
      var elapsed = calculateElapsedPortion();
      var value = this._easingFunction(elapsed);
      this._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);
      if (this._onUpdateCallback) {
        this._onUpdateCallback(this._object, elapsed);
      }
      if (this._duration === 0 || elapsedTime >= this._duration) {
        if (this._repeat > 0) {
          var completeCount = Math.min(Math.trunc((elapsedTime - this._duration) / durationAndDelay) + 1, this._repeat);
          if (isFinite(this._repeat)) {
            this._repeat -= completeCount;
          }
          for (property2 in this._valuesStartRepeat) {
            if (!this._yoyo && typeof this._valuesEnd[property2] === "string") {
              this._valuesStartRepeat[property2] = // eslint-disable-next-line
              // @ts-ignore FIXME?
              this._valuesStartRepeat[property2] + parseFloat(this._valuesEnd[property2]);
            }
            if (this._yoyo) {
              this._swapEndStartRepeatValues(property2);
            }
            this._valuesStart[property2] = this._valuesStartRepeat[property2];
          }
          if (this._yoyo) {
            this._reversed = !this._reversed;
          }
          this._startTime += durationAndDelay * completeCount;
          if (this._onRepeatCallback) {
            this._onRepeatCallback(this._object);
          }
          this._onEveryStartCallbackFired = false;
          return true;
        } else {
          if (this._onCompleteCallback) {
            this._onCompleteCallback(this._object);
          }
          for (var i2 = 0, numChainedTweens = this._chainedTweens.length; i2 < numChainedTweens; i2++) {
            this._chainedTweens[i2].start(this._startTime + this._duration, false);
          }
          this._isPlaying = false;
          return false;
        }
      }
      return true;
    };
    Tween2.prototype._updateProperties = function(_object, _valuesStart, _valuesEnd, value) {
      for (var property2 in _valuesEnd) {
        if (_valuesStart[property2] === void 0) {
          continue;
        }
        var start = _valuesStart[property2] || 0;
        var end = _valuesEnd[property2];
        var startIsArray = Array.isArray(_object[property2]);
        var endIsArray = Array.isArray(end);
        var isInterpolationList = !startIsArray && endIsArray;
        if (isInterpolationList) {
          _object[property2] = this._interpolationFunction(end, value);
        } else if (typeof end === "object" && end) {
          this._updateProperties(_object[property2], start, end, value);
        } else {
          end = this._handleRelativeValue(start, end);
          if (typeof end === "number") {
            _object[property2] = start + (end - start) * value;
          }
        }
      }
    };
    Tween2.prototype._handleRelativeValue = function(start, end) {
      if (typeof end !== "string") {
        return end;
      }
      if (end.charAt(0) === "+" || end.charAt(0) === "-") {
        return start + parseFloat(end);
      }
      return parseFloat(end);
    };
    Tween2.prototype._swapEndStartRepeatValues = function(property2) {
      var tmp3 = this._valuesStartRepeat[property2];
      var endValue = this._valuesEnd[property2];
      if (typeof endValue === "string") {
        this._valuesStartRepeat[property2] = this._valuesStartRepeat[property2] + parseFloat(endValue);
      } else {
        this._valuesStartRepeat[property2] = this._valuesEnd[property2];
      }
      this._valuesEnd[property2] = tmp3;
    };
    Tween2.autoStartOnUpdate = false;
    return Tween2;
  }()
);
var nextId = Sequence.nextId;
var TWEEN = mainGroup;
var getAll = TWEEN.getAll.bind(TWEEN);
var removeAll = TWEEN.removeAll.bind(TWEEN);
var add = TWEEN.add.bind(TWEEN);
var remove = TWEEN.remove.bind(TWEEN);
var update = TWEEN.update.bind(TWEEN);

// node_modules/d3-octree/src/add.js
function add_default(d2) {
  const x2 = +this._x.call(null, d2), y2 = +this._y.call(null, d2), z2 = +this._z.call(null, d2);
  return add2(this.cover(x2, y2, z2), x2, y2, z2, d2);
}
function add2(tree, x2, y2, z2, d2) {
  if (isNaN(x2) || isNaN(y2) || isNaN(z2)) return tree;
  var parent2, node = tree._root, leaf = { data: d2 }, x03 = tree._x0, y03 = tree._y0, z02 = tree._z0, x12 = tree._x1, y12 = tree._y1, z1 = tree._z1, xm, ym, zm, xp, yp, zp, right, bottom, deep, i2, j2;
  if (!node) return tree._root = leaf, tree;
  while (node.length) {
    if (right = x2 >= (xm = (x03 + x12) / 2)) x03 = xm;
    else x12 = xm;
    if (bottom = y2 >= (ym = (y03 + y12) / 2)) y03 = ym;
    else y12 = ym;
    if (deep = z2 >= (zm = (z02 + z1) / 2)) z02 = zm;
    else z1 = zm;
    if (parent2 = node, !(node = node[i2 = deep << 2 | bottom << 1 | right])) return parent2[i2] = leaf, tree;
  }
  xp = +tree._x.call(null, node.data);
  yp = +tree._y.call(null, node.data);
  zp = +tree._z.call(null, node.data);
  if (x2 === xp && y2 === yp && z2 === zp) return leaf.next = node, parent2 ? parent2[i2] = leaf : tree._root = leaf, tree;
  do {
    parent2 = parent2 ? parent2[i2] = new Array(8) : tree._root = new Array(8);
    if (right = x2 >= (xm = (x03 + x12) / 2)) x03 = xm;
    else x12 = xm;
    if (bottom = y2 >= (ym = (y03 + y12) / 2)) y03 = ym;
    else y12 = ym;
    if (deep = z2 >= (zm = (z02 + z1) / 2)) z02 = zm;
    else z1 = zm;
  } while ((i2 = deep << 2 | bottom << 1 | right) === (j2 = (zp >= zm) << 2 | (yp >= ym) << 1 | xp >= xm));
  return parent2[j2] = node, parent2[i2] = leaf, tree;
}
function addAll(data) {
  if (!Array.isArray(data)) data = Array.from(data);
  const n2 = data.length;
  const xz = new Float64Array(n2);
  const yz = new Float64Array(n2);
  const zz = new Float64Array(n2);
  let x03 = Infinity, y03 = Infinity, z02 = Infinity, x12 = -Infinity, y12 = -Infinity, z1 = -Infinity;
  for (let i2 = 0, d2, x2, y2, z2; i2 < n2; ++i2) {
    if (isNaN(x2 = +this._x.call(null, d2 = data[i2])) || isNaN(y2 = +this._y.call(null, d2)) || isNaN(z2 = +this._z.call(null, d2))) continue;
    xz[i2] = x2;
    yz[i2] = y2;
    zz[i2] = z2;
    if (x2 < x03) x03 = x2;
    if (x2 > x12) x12 = x2;
    if (y2 < y03) y03 = y2;
    if (y2 > y12) y12 = y2;
    if (z2 < z02) z02 = z2;
    if (z2 > z1) z1 = z2;
  }
  if (x03 > x12 || y03 > y12 || z02 > z1) return this;
  this.cover(x03, y03, z02).cover(x12, y12, z1);
  for (let i2 = 0; i2 < n2; ++i2) {
    add2(this, xz[i2], yz[i2], zz[i2], data[i2]);
  }
  return this;
}

// node_modules/d3-octree/src/cover.js
function cover_default(x2, y2, z2) {
  if (isNaN(x2 = +x2) || isNaN(y2 = +y2) || isNaN(z2 = +z2)) return this;
  var x03 = this._x0, y03 = this._y0, z02 = this._z0, x12 = this._x1, y12 = this._y1, z1 = this._z1;
  if (isNaN(x03)) {
    x12 = (x03 = Math.floor(x2)) + 1;
    y12 = (y03 = Math.floor(y2)) + 1;
    z1 = (z02 = Math.floor(z2)) + 1;
  } else {
    var t4 = x12 - x03 || 1, node = this._root, parent2, i2;
    while (x03 > x2 || x2 >= x12 || y03 > y2 || y2 >= y12 || z02 > z2 || z2 >= z1) {
      i2 = (z2 < z02) << 2 | (y2 < y03) << 1 | x2 < x03;
      parent2 = new Array(8), parent2[i2] = node, node = parent2, t4 *= 2;
      switch (i2) {
        case 0:
          x12 = x03 + t4, y12 = y03 + t4, z1 = z02 + t4;
          break;
        case 1:
          x03 = x12 - t4, y12 = y03 + t4, z1 = z02 + t4;
          break;
        case 2:
          x12 = x03 + t4, y03 = y12 - t4, z1 = z02 + t4;
          break;
        case 3:
          x03 = x12 - t4, y03 = y12 - t4, z1 = z02 + t4;
          break;
        case 4:
          x12 = x03 + t4, y12 = y03 + t4, z02 = z1 - t4;
          break;
        case 5:
          x03 = x12 - t4, y12 = y03 + t4, z02 = z1 - t4;
          break;
        case 6:
          x12 = x03 + t4, y03 = y12 - t4, z02 = z1 - t4;
          break;
        case 7:
          x03 = x12 - t4, y03 = y12 - t4, z02 = z1 - t4;
          break;
      }
    }
    if (this._root && this._root.length) this._root = node;
  }
  this._x0 = x03;
  this._y0 = y03;
  this._z0 = z02;
  this._x1 = x12;
  this._y1 = y12;
  this._z1 = z1;
  return this;
}

// node_modules/d3-octree/src/data.js
function data_default() {
  var data = [];
  this.visit(function(node) {
    if (!node.length) do
      data.push(node.data);
    while (node = node.next);
  });
  return data;
}

// node_modules/d3-octree/src/extent.js
function extent_default(_2) {
  return arguments.length ? this.cover(+_2[0][0], +_2[0][1], +_2[0][2]).cover(+_2[1][0], +_2[1][1], +_2[1][2]) : isNaN(this._x0) ? void 0 : [[this._x0, this._y0, this._z0], [this._x1, this._y1, this._z1]];
}

// node_modules/d3-octree/src/octant.js
function octant_default(node, x03, y03, z02, x12, y12, z1) {
  this.node = node;
  this.x0 = x03;
  this.y0 = y03;
  this.z0 = z02;
  this.x1 = x12;
  this.y1 = y12;
  this.z1 = z1;
}

// node_modules/d3-octree/src/find.js
function find_default(x2, y2, z2, radius) {
  var data, x03 = this._x0, y03 = this._y0, z02 = this._z0, x12, y12, z1, x22, y22, z22, x3 = this._x1, y3 = this._y1, z3 = this._z1, octs = [], node = this._root, q2, i2;
  if (node) octs.push(new octant_default(node, x03, y03, z02, x3, y3, z3));
  if (radius == null) radius = Infinity;
  else {
    x03 = x2 - radius, y03 = y2 - radius, z02 = z2 - radius;
    x3 = x2 + radius, y3 = y2 + radius, z3 = z2 + radius;
    radius *= radius;
  }
  while (q2 = octs.pop()) {
    if (!(node = q2.node) || (x12 = q2.x0) > x3 || (y12 = q2.y0) > y3 || (z1 = q2.z0) > z3 || (x22 = q2.x1) < x03 || (y22 = q2.y1) < y03 || (z22 = q2.z1) < z02) continue;
    if (node.length) {
      var xm = (x12 + x22) / 2, ym = (y12 + y22) / 2, zm = (z1 + z22) / 2;
      octs.push(
        new octant_default(node[7], xm, ym, zm, x22, y22, z22),
        new octant_default(node[6], x12, ym, zm, xm, y22, z22),
        new octant_default(node[5], xm, y12, zm, x22, ym, z22),
        new octant_default(node[4], x12, y12, zm, xm, ym, z22),
        new octant_default(node[3], xm, ym, z1, x22, y22, zm),
        new octant_default(node[2], x12, ym, z1, xm, y22, zm),
        new octant_default(node[1], xm, y12, z1, x22, ym, zm),
        new octant_default(node[0], x12, y12, z1, xm, ym, zm)
      );
      if (i2 = (z2 >= zm) << 2 | (y2 >= ym) << 1 | x2 >= xm) {
        q2 = octs[octs.length - 1];
        octs[octs.length - 1] = octs[octs.length - 1 - i2];
        octs[octs.length - 1 - i2] = q2;
      }
    } else {
      var dx = x2 - +this._x.call(null, node.data), dy = y2 - +this._y.call(null, node.data), dz = z2 - +this._z.call(null, node.data), d2 = dx * dx + dy * dy + dz * dz;
      if (d2 < radius) {
        var d3 = Math.sqrt(radius = d2);
        x03 = x2 - d3, y03 = y2 - d3, z02 = z2 - d3;
        x3 = x2 + d3, y3 = y2 + d3, z3 = z2 + d3;
        data = node.data;
      }
    }
  }
  return data;
}

// node_modules/d3-octree/src/findAll.js
var distance = (x12, y12, z1, x2, y2, z2) => Math.sqrt((x12 - x2) ** 2 + (y12 - y2) ** 2 + (z1 - z2) ** 2);
function findAllWithinRadius(x2, y2, z2, radius) {
  const result = [];
  const xMin = x2 - radius;
  const yMin = y2 - radius;
  const zMin = z2 - radius;
  const xMax = x2 + radius;
  const yMax = y2 + radius;
  const zMax = z2 + radius;
  this.visit((node, x12, y12, z1, x22, y22, z22) => {
    if (!node.length) {
      do {
        const d2 = node.data;
        if (distance(x2, y2, z2, this._x(d2), this._y(d2), this._z(d2)) <= radius) {
          result.push(d2);
        }
      } while (node = node.next);
    }
    return x12 > xMax || y12 > yMax || z1 > zMax || x22 < xMin || y22 < yMin || z22 < zMin;
  });
  return result;
}

// node_modules/d3-octree/src/remove.js
function remove_default(d2) {
  if (isNaN(x2 = +this._x.call(null, d2)) || isNaN(y2 = +this._y.call(null, d2)) || isNaN(z2 = +this._z.call(null, d2))) return this;
  var parent2, node = this._root, retainer, previous, next, x03 = this._x0, y03 = this._y0, z02 = this._z0, x12 = this._x1, y12 = this._y1, z1 = this._z1, x2, y2, z2, xm, ym, zm, right, bottom, deep, i2, j2;
  if (!node) return this;
  if (node.length) while (true) {
    if (right = x2 >= (xm = (x03 + x12) / 2)) x03 = xm;
    else x12 = xm;
    if (bottom = y2 >= (ym = (y03 + y12) / 2)) y03 = ym;
    else y12 = ym;
    if (deep = z2 >= (zm = (z02 + z1) / 2)) z02 = zm;
    else z1 = zm;
    if (!(parent2 = node, node = node[i2 = deep << 2 | bottom << 1 | right])) return this;
    if (!node.length) break;
    if (parent2[i2 + 1 & 7] || parent2[i2 + 2 & 7] || parent2[i2 + 3 & 7] || parent2[i2 + 4 & 7] || parent2[i2 + 5 & 7] || parent2[i2 + 6 & 7] || parent2[i2 + 7 & 7]) retainer = parent2, j2 = i2;
  }
  while (node.data !== d2) if (!(previous = node, node = node.next)) return this;
  if (next = node.next) delete node.next;
  if (previous) return next ? previous.next = next : delete previous.next, this;
  if (!parent2) return this._root = next, this;
  next ? parent2[i2] = next : delete parent2[i2];
  if ((node = parent2[0] || parent2[1] || parent2[2] || parent2[3] || parent2[4] || parent2[5] || parent2[6] || parent2[7]) && node === (parent2[7] || parent2[6] || parent2[5] || parent2[4] || parent2[3] || parent2[2] || parent2[1] || parent2[0]) && !node.length) {
    if (retainer) retainer[j2] = node;
    else this._root = node;
  }
  return this;
}
function removeAll2(data) {
  for (var i2 = 0, n2 = data.length; i2 < n2; ++i2) this.remove(data[i2]);
  return this;
}

// node_modules/d3-octree/src/root.js
function root_default2() {
  return this._root;
}

// node_modules/d3-octree/src/size.js
function size_default() {
  var size = 0;
  this.visit(function(node) {
    if (!node.length) do
      ++size;
    while (node = node.next);
  });
  return size;
}

// node_modules/d3-octree/src/visit.js
function visit_default(callback) {
  var octs = [], q2, node = this._root, child, x03, y03, z02, x12, y12, z1;
  if (node) octs.push(new octant_default(node, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
  while (q2 = octs.pop()) {
    if (!callback(node = q2.node, x03 = q2.x0, y03 = q2.y0, z02 = q2.z0, x12 = q2.x1, y12 = q2.y1, z1 = q2.z1) && node.length) {
      var xm = (x03 + x12) / 2, ym = (y03 + y12) / 2, zm = (z02 + z1) / 2;
      if (child = node[7]) octs.push(new octant_default(child, xm, ym, zm, x12, y12, z1));
      if (child = node[6]) octs.push(new octant_default(child, x03, ym, zm, xm, y12, z1));
      if (child = node[5]) octs.push(new octant_default(child, xm, y03, zm, x12, ym, z1));
      if (child = node[4]) octs.push(new octant_default(child, x03, y03, zm, xm, ym, z1));
      if (child = node[3]) octs.push(new octant_default(child, xm, ym, z02, x12, y12, zm));
      if (child = node[2]) octs.push(new octant_default(child, x03, ym, z02, xm, y12, zm));
      if (child = node[1]) octs.push(new octant_default(child, xm, y03, z02, x12, ym, zm));
      if (child = node[0]) octs.push(new octant_default(child, x03, y03, z02, xm, ym, zm));
    }
  }
  return this;
}

// node_modules/d3-octree/src/visitAfter.js
function visitAfter_default(callback) {
  var octs = [], next = [], q2;
  if (this._root) octs.push(new octant_default(this._root, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1));
  while (q2 = octs.pop()) {
    var node = q2.node;
    if (node.length) {
      var child, x03 = q2.x0, y03 = q2.y0, z02 = q2.z0, x12 = q2.x1, y12 = q2.y1, z1 = q2.z1, xm = (x03 + x12) / 2, ym = (y03 + y12) / 2, zm = (z02 + z1) / 2;
      if (child = node[0]) octs.push(new octant_default(child, x03, y03, z02, xm, ym, zm));
      if (child = node[1]) octs.push(new octant_default(child, xm, y03, z02, x12, ym, zm));
      if (child = node[2]) octs.push(new octant_default(child, x03, ym, z02, xm, y12, zm));
      if (child = node[3]) octs.push(new octant_default(child, xm, ym, z02, x12, y12, zm));
      if (child = node[4]) octs.push(new octant_default(child, x03, y03, zm, xm, ym, z1));
      if (child = node[5]) octs.push(new octant_default(child, xm, y03, zm, x12, ym, z1));
      if (child = node[6]) octs.push(new octant_default(child, x03, ym, zm, xm, y12, z1));
      if (child = node[7]) octs.push(new octant_default(child, xm, ym, zm, x12, y12, z1));
    }
    next.push(q2);
  }
  while (q2 = next.pop()) {
    callback(q2.node, q2.x0, q2.y0, q2.z0, q2.x1, q2.y1, q2.z1);
  }
  return this;
}

// node_modules/d3-octree/src/x.js
function defaultX(d2) {
  return d2[0];
}
function x_default(_2) {
  return arguments.length ? (this._x = _2, this) : this._x;
}

// node_modules/d3-octree/src/y.js
function defaultY(d2) {
  return d2[1];
}
function y_default(_2) {
  return arguments.length ? (this._y = _2, this) : this._y;
}

// node_modules/d3-octree/src/z.js
function defaultZ(d2) {
  return d2[2];
}
function z_default(_2) {
  return arguments.length ? (this._z = _2, this) : this._z;
}

// node_modules/d3-octree/src/octree.js
function octree(nodes, x2, y2, z2) {
  var tree = new Octree(x2 == null ? defaultX : x2, y2 == null ? defaultY : y2, z2 == null ? defaultZ : z2, NaN, NaN, NaN, NaN, NaN, NaN);
  return nodes == null ? tree : tree.addAll(nodes);
}
function Octree(x2, y2, z2, x03, y03, z02, x12, y12, z1) {
  this._x = x2;
  this._y = y2;
  this._z = z2;
  this._x0 = x03;
  this._y0 = y03;
  this._z0 = z02;
  this._x1 = x12;
  this._y1 = y12;
  this._z1 = z1;
  this._root = void 0;
}
function leaf_copy(leaf) {
  var copy3 = { data: leaf.data }, next = copy3;
  while (leaf = leaf.next) next = next.next = { data: leaf.data };
  return copy3;
}
var treeProto = octree.prototype = Octree.prototype;
treeProto.copy = function() {
  var copy3 = new Octree(this._x, this._y, this._z, this._x0, this._y0, this._z0, this._x1, this._y1, this._z1), node = this._root, nodes, child;
  if (!node) return copy3;
  if (!node.length) return copy3._root = leaf_copy(node), copy3;
  nodes = [{ source: node, target: copy3._root = new Array(8) }];
  while (node = nodes.pop()) {
    for (var i2 = 0; i2 < 8; ++i2) {
      if (child = node.source[i2]) {
        if (child.length) nodes.push({ source: child, target: node.target[i2] = new Array(8) });
        else node.target[i2] = leaf_copy(child);
      }
    }
  }
  return copy3;
};
treeProto.add = add_default;
treeProto.addAll = addAll;
treeProto.cover = cover_default;
treeProto.data = data_default;
treeProto.extent = extent_default;
treeProto.find = find_default;
treeProto.findAllWithinRadius = findAllWithinRadius;
treeProto.remove = remove_default;
treeProto.removeAll = removeAll2;
treeProto.root = root_default2;
treeProto.size = size_default;
treeProto.visit = visit_default;
treeProto.visitAfter = visitAfter_default;
treeProto.x = x_default;
treeProto.y = y_default;
treeProto.z = z_default;

// node_modules/d3-array/src/ascending.js
function ascending(a2, b) {
  return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a2, b) {
  return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f2) {
  let compare1, compare2, delta;
  if (f2.length !== 2) {
    compare1 = ascending;
    compare2 = (d2, x2) => ascending(f2(d2), x2);
    delta = (d2, x2) => f2(d2) - x2;
  } else {
    compare1 = f2 === ascending || f2 === descending ? f2 : zero;
    compare2 = f2;
    delta = f2;
  }
  function left(a2, x2, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x2) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a2, x2, lo = 0, hi = a2.length) {
    if (lo < hi) {
      if (compare1(x2, x2) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a2, x2, lo = 0, hi = a2.length) {
    const i2 = left(a2, x2, lo, hi - 1);
    return i2 > lo && delta(a2[i2 - 1], x2) > -delta(a2[i2], x2) ? i2 - 1 : i2;
  }
  return { left, center, right };
}
function zero() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x2) {
  return x2 === null ? NaN : +x2;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur4) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0)) throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0)) throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0)) throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0)) throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry) return data;
    const blurx = rx && blur4(rx);
    const blury = ry && blur4(ry);
    const temp2 = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp2, values, width, height);
      blurh(blurx, values, temp2, width, height);
      blurh(blurx, temp2, values, width, height);
      blurv(blury, values, temp2, width, height);
      blurv(blury, temp2, values, width, height);
      blurv(blury, values, temp2, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp2, width, height);
      blurh(blurx, temp2, values, width, height);
      blurh(blurx, values, temp2, width, height);
    } else if (blury) {
      blurv(blury, values, temp2, width, height);
      blurv(blury, temp2, values, width, height);
      blurv(blury, values, temp2, width, height);
    }
    return data;
  };
}
function blurh(blur4, T2, S2, w4, h2) {
  for (let y2 = 0, n2 = w4 * h2; y2 < n2; ) {
    blur4(T2, S2, y2, y2 += w4, 1);
  }
}
function blurv(blur4, T2, S2, w4, h2) {
  for (let x2 = 0, n2 = w4 * h2; x2 < w4; ++x2) {
    blur4(T2, S2, x2, x2 + n2, w4);
  }
}
function blurfImage(radius) {
  const blur4 = blurf(radius);
  return (T2, S2, start, stop, step2) => {
    start <<= 2, stop <<= 2, step2 <<= 2;
    blur4(T2, S2, start + 0, stop + 0, step2);
    blur4(T2, S2, start + 1, stop + 1, step2);
    blur4(T2, S2, start + 2, stop + 2, step2);
    blur4(T2, S2, start + 3, stop + 3, step2);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius) return bluri(radius);
  const t4 = radius - radius0;
  const w4 = 2 * radius + 1;
  return (T2, S2, start, stop, step2) => {
    if (!((stop -= step2) >= start)) return;
    let sum3 = radius0 * S2[start];
    const s0 = step2 * radius0;
    const s1 = s0 + step2;
    for (let i2 = start, j2 = start + s0; i2 < j2; i2 += step2) {
      sum3 += S2[Math.min(stop, i2)];
    }
    for (let i2 = start, j2 = stop; i2 <= j2; i2 += step2) {
      sum3 += S2[Math.min(stop, i2 + s0)];
      T2[i2] = (sum3 + t4 * (S2[Math.max(start, i2 - s1)] + S2[Math.min(stop, i2 + s1)])) / w4;
      sum3 -= S2[Math.max(start, i2 - s0)];
    }
  };
}
function bluri(radius) {
  const w4 = 2 * radius + 1;
  return (T2, S2, start, stop, step2) => {
    if (!((stop -= step2) >= start)) return;
    let sum3 = radius * S2[start];
    const s2 = step2 * radius;
    for (let i2 = start, j2 = start + s2; i2 < j2; i2 += step2) {
      sum3 += S2[Math.min(stop, i2)];
    }
    for (let i2 = start, j2 = stop; i2 <= j2; i2 += step2) {
      sum3 += S2[Math.min(stop, i2 + s2)];
      T2[i2] = sum3 / w4;
      sum3 -= S2[Math.max(start, i2 - s2)];
    }
  };
}

// node_modules/d3-array/src/extent.js
function extent(values, valueof) {
  let min4;
  let max4;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null) {
        if (min4 === void 0) {
          if (value >= value) min4 = max4 = value;
        } else {
          if (min4 > value) min4 = value;
          if (max4 < value) max4 = value;
        }
      }
    }
  } else {
    let index7 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index7, values)) != null) {
        if (min4 === void 0) {
          if (value >= value) min4 = max4 = value;
        } else {
          if (min4 > value) min4 = value;
          if (max4 < value) max4 = value;
        }
      }
    }
  }
  return [min4, max4];
}

// node_modules/d3-array/src/fsum.js
var Adder = class {
  constructor() {
    this._partials = new Float64Array(32);
    this._n = 0;
  }
  add(x2) {
    const p2 = this._partials;
    let i2 = 0;
    for (let j2 = 0; j2 < this._n && j2 < 32; j2++) {
      const y2 = p2[j2], hi = x2 + y2, lo = Math.abs(x2) < Math.abs(y2) ? x2 - (hi - y2) : y2 - (hi - x2);
      if (lo) p2[i2++] = lo;
      x2 = hi;
    }
    p2[i2] = x2;
    this._n = i2 + 1;
    return this;
  }
  valueOf() {
    const p2 = this._partials;
    let n2 = this._n, x2, y2, lo, hi = 0;
    if (n2 > 0) {
      hi = p2[--n2];
      while (n2 > 0) {
        x2 = hi;
        y2 = p2[--n2];
        hi = x2 + y2;
        lo = y2 - (hi - x2);
        if (lo) break;
      }
      if (n2 > 0 && (lo < 0 && p2[n2 - 1] < 0 || lo > 0 && p2[n2 - 1] > 0)) {
        y2 = lo * 2;
        x2 = hi + y2;
        if (y2 == x2 - hi) hi = x2;
      }
    }
    return hi;
  }
};

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start, stop, count2) {
  const step2 = (stop - start) / Math.max(0, count2), power = Math.floor(Math.log10(step2)), error = step2 / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i2, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start * inc);
    i2 = Math.round(stop * inc);
    if (i1 / inc < start) ++i1;
    if (i2 / inc > stop) --i2;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start / inc);
    i2 = Math.round(stop / inc);
    if (i1 * inc < start) ++i1;
    if (i2 * inc > stop) --i2;
  }
  if (i2 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start, stop, count2 * 2);
  return [i1, i2, inc];
}
function ticks(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  if (!(count2 > 0)) return [];
  if (start === stop) return [start];
  const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count2) : tickSpec(start, stop, count2);
  if (!(i2 >= i1)) return [];
  const n2 = i2 - i1 + 1, ticks2 = new Array(n2);
  if (reverse2) {
    if (inc < 0) for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i2 - i3) / -inc;
    else for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i2 - i3) * inc;
  } else {
    if (inc < 0) for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i1 + i3) / -inc;
    else for (let i3 = 0; i3 < n2; ++i3) ticks2[i3] = (i1 + i3) * inc;
  }
  return ticks2;
}
function tickIncrement(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  return tickSpec(start, stop, count2)[2];
}
function tickStep(start, stop, count2) {
  stop = +stop, start = +start, count2 = +count2;
  const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count2) : tickIncrement(start, stop, count2);
  return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-array/src/max.js
function max(values, valueof) {
  let max4;
  if (valueof === void 0) {
    for (const value of values) {
      if (value != null && (max4 < value || max4 === void 0 && value >= value)) {
        max4 = value;
      }
    }
  } else {
    let index7 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index7, values)) != null && (max4 < value || max4 === void 0 && value >= value)) {
        max4 = value;
      }
    }
  }
  return max4;
}

// node_modules/d3-array/src/mean.js
function mean(values, valueof) {
  let count2 = 0;
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value != null && (value = +value) >= value) {
        ++count2, sum3 += value;
      }
    }
  } else {
    let index7 = -1;
    for (let value of values) {
      if ((value = valueof(value, ++index7, values)) != null && (value = +value) >= value) {
        ++count2, sum3 += value;
      }
    }
  }
  if (count2) return sum3 / count2;
}

// node_modules/d3-array/src/merge.js
function* flatten2(arrays) {
  for (const array3 of arrays) {
    yield* array3;
  }
}
function merge(arrays) {
  return Array.from(flatten2(arrays));
}

// node_modules/d3-array/src/range.js
function range(start, stop, step2) {
  start = +start, stop = +stop, step2 = (n2 = arguments.length) < 2 ? (stop = start, start = 0, 1) : n2 < 3 ? 1 : +step2;
  var i2 = -1, n2 = Math.max(0, Math.ceil((stop - start) / step2)) | 0, range4 = new Array(n2);
  while (++i2 < n2) {
    range4[i2] = start + i2 * step2;
  }
  return range4;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array3, i0 = 0, i1 = array3.length) {
    let m2 = i1 - (i0 = +i0);
    while (m2) {
      const i2 = random() * m2-- | 0, t4 = array3[m2 + i0];
      array3[m2 + i0] = array3[i2 + i0];
      array3[i2 + i0] = t4;
    }
    return array3;
  };
}

// node_modules/d3-array/src/sum.js
function sum(values, valueof) {
  let sum3 = 0;
  if (valueof === void 0) {
    for (let value of values) {
      if (value = +value) {
        sum3 += value;
      }
    }
  } else {
    let index7 = -1;
    for (let value of values) {
      if (value = +valueof(value, ++index7, values)) {
        sum3 += value;
      }
    }
  }
  return sum3;
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range4) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range4).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent2, definition) {
  var prototype = Object.create(parent2.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color2() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color2, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format3) {
  var m2, l2;
  format3 = (format3 + "").trim().toLowerCase();
  return (m2 = reHex.exec(format3)) ? (l2 = m2[1].length, m2 = parseInt(m2[1], 16), l2 === 6 ? rgbn(m2) : l2 === 3 ? new Rgb(m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, (m2 & 15) << 4 | m2 & 15, 1) : l2 === 8 ? rgba(m2 >> 24 & 255, m2 >> 16 & 255, m2 >> 8 & 255, (m2 & 255) / 255) : l2 === 4 ? rgba(m2 >> 12 & 15 | m2 >> 8 & 240, m2 >> 8 & 15 | m2 >> 4 & 240, m2 >> 4 & 15 | m2 & 240, ((m2 & 15) << 4 | m2 & 15) / 255) : null) : (m2 = reRgbInteger.exec(format3)) ? new Rgb(m2[1], m2[2], m2[3], 1) : (m2 = reRgbPercent.exec(format3)) ? new Rgb(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, 1) : (m2 = reRgbaInteger.exec(format3)) ? rgba(m2[1], m2[2], m2[3], m2[4]) : (m2 = reRgbaPercent.exec(format3)) ? rgba(m2[1] * 255 / 100, m2[2] * 255 / 100, m2[3] * 255 / 100, m2[4]) : (m2 = reHslPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, 1) : (m2 = reHslaPercent.exec(format3)) ? hsla(m2[1], m2[2] / 100, m2[3] / 100, m2[4]) : named.hasOwnProperty(format3) ? rgbn(named[format3]) : format3 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n2) {
  return new Rgb(n2 >> 16 & 255, n2 >> 8 & 255, n2 & 255, 1);
}
function rgba(r2, g2, b, a2) {
  if (a2 <= 0) r2 = g2 = b = NaN;
  return new Rgb(r2, g2, b, a2);
}
function rgbConvert(o2) {
  if (!(o2 instanceof Color2)) o2 = color(o2);
  if (!o2) return new Rgb();
  o2 = o2.rgb();
  return new Rgb(o2.r, o2.g, o2.b, o2.opacity);
}
function rgb(r2, g2, b, opacity) {
  return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g2, b, opacity == null ? 1 : opacity);
}
function Rgb(r2, g2, b, opacity) {
  this.r = +r2;
  this.g = +g2;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Rgb, rgb, extend(Color2, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a2 = clampa(this.opacity);
  return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla(h2, s2, l2, a2) {
  if (a2 <= 0) h2 = s2 = l2 = NaN;
  else if (l2 <= 0 || l2 >= 1) h2 = s2 = NaN;
  else if (s2 <= 0) h2 = NaN;
  return new Hsl(h2, s2, l2, a2);
}
function hslConvert(o2) {
  if (o2 instanceof Hsl) return new Hsl(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Color2)) o2 = color(o2);
  if (!o2) return new Hsl();
  if (o2 instanceof Hsl) return o2;
  o2 = o2.rgb();
  var r2 = o2.r / 255, g2 = o2.g / 255, b = o2.b / 255, min4 = Math.min(r2, g2, b), max4 = Math.max(r2, g2, b), h2 = NaN, s2 = max4 - min4, l2 = (max4 + min4) / 2;
  if (s2) {
    if (r2 === max4) h2 = (g2 - b) / s2 + (g2 < b) * 6;
    else if (g2 === max4) h2 = (b - r2) / s2 + 2;
    else h2 = (r2 - g2) / s2 + 4;
    s2 /= l2 < 0.5 ? max4 + min4 : 2 - max4 - min4;
    h2 *= 60;
  } else {
    s2 = l2 > 0 && l2 < 1 ? 0 : h2;
  }
  return new Hsl(h2, s2, l2, o2.opacity);
}
function hsl(h2, s2, l2, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s2, l2, opacity == null ? 1 : opacity);
}
function Hsl(h2, s2, l2, opacity) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l2;
  this.opacity = +opacity;
}
define_default(Hsl, hsl, extend(Color2, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Hsl(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l2 = this.l, m2 = l2 + (l2 < 0.5 ? l2 : 1 - l2) * s2, m1 = 2 * l2 - m2;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m2),
      hsl2rgb(h2, m1, m2),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m2),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h2, m1, m2) {
  return (h2 < 60 ? m1 + (m2 - m1) * h2 / 60 : h2 < 180 ? m2 : h2 < 240 ? m1 + (m2 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o2) {
  if (o2 instanceof Lab) return new Lab(o2.l, o2.a, o2.b, o2.opacity);
  if (o2 instanceof Hcl) return hcl2lab(o2);
  if (!(o2 instanceof Rgb)) o2 = rgbConvert(o2);
  var r2 = rgb2lrgb(o2.r), g2 = rgb2lrgb(o2.g), b = rgb2lrgb(o2.b), y2 = xyz2lab((0.2225045 * r2 + 0.7168786 * g2 + 0.0606169 * b) / Yn), x2, z2;
  if (r2 === g2 && g2 === b) x2 = z2 = y2;
  else {
    x2 = xyz2lab((0.4360747 * r2 + 0.3850649 * g2 + 0.1430804 * b) / Xn);
    z2 = xyz2lab((0.0139322 * r2 + 0.0971045 * g2 + 0.7141733 * b) / Zn);
  }
  return new Lab(116 * y2 - 16, 500 * (x2 - y2), 200 * (y2 - z2), o2.opacity);
}
function lab(l2, a2, b, opacity) {
  return arguments.length === 1 ? labConvert(l2) : new Lab(l2, a2, b, opacity == null ? 1 : opacity);
}
function Lab(l2, a2, b, opacity) {
  this.l = +l2;
  this.a = +a2;
  this.b = +b;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color2, {
  brighter(k2) {
    return new Lab(this.l + K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  darker(k2) {
    return new Lab(this.l - K * (k2 == null ? 1 : k2), this.a, this.b, this.opacity);
  },
  rgb() {
    var y2 = (this.l + 16) / 116, x2 = isNaN(this.a) ? y2 : y2 + this.a / 500, z2 = isNaN(this.b) ? y2 : y2 - this.b / 200;
    x2 = Xn * lab2xyz(x2);
    y2 = Yn * lab2xyz(y2);
    z2 = Zn * lab2xyz(z2);
    return new Rgb(
      lrgb2rgb(3.1338561 * x2 - 1.6168667 * y2 - 0.4906146 * z2),
      lrgb2rgb(-0.9787684 * x2 + 1.9161415 * y2 + 0.033454 * z2),
      lrgb2rgb(0.0719453 * x2 - 0.2289914 * y2 + 1.4052427 * z2),
      this.opacity
    );
  }
}));
function xyz2lab(t4) {
  return t4 > t3 ? Math.pow(t4, 1 / 3) : t4 / t2 + t0;
}
function lab2xyz(t4) {
  return t4 > t1 ? t4 * t4 * t4 : t2 * (t4 - t0);
}
function lrgb2rgb(x2) {
  return 255 * (x2 <= 31308e-7 ? 12.92 * x2 : 1.055 * Math.pow(x2, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x2) {
  return (x2 /= 255) <= 0.04045 ? x2 / 12.92 : Math.pow((x2 + 0.055) / 1.055, 2.4);
}
function hclConvert(o2) {
  if (o2 instanceof Hcl) return new Hcl(o2.h, o2.c, o2.l, o2.opacity);
  if (!(o2 instanceof Lab)) o2 = labConvert(o2);
  if (o2.a === 0 && o2.b === 0) return new Hcl(NaN, 0 < o2.l && o2.l < 100 ? 0 : NaN, o2.l, o2.opacity);
  var h2 = Math.atan2(o2.b, o2.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o2.a * o2.a + o2.b * o2.b), o2.l, o2.opacity);
}
function hcl(h2, c4, l2, opacity) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c4, l2, opacity == null ? 1 : opacity);
}
function Hcl(h2, c4, l2, opacity) {
  this.h = +h2;
  this.c = +c4;
  this.l = +l2;
  this.opacity = +opacity;
}
function hcl2lab(o2) {
  if (isNaN(o2.h)) return new Lab(o2.l, 0, 0, o2.opacity);
  var h2 = o2.h * radians;
  return new Lab(o2.l, Math.cos(h2) * o2.c, Math.sin(h2) * o2.c, o2.opacity);
}
define_default(Hcl, hcl, extend(Color2, {
  brighter(k2) {
    return new Hcl(this.h, this.c, this.l + K * (k2 == null ? 1 : k2), this.opacity);
  },
  darker(k2) {
    return new Hcl(this.h, this.c, this.l - K * (k2 == null ? 1 : k2), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A = -0.14861;
var B = 1.78277;
var C = -0.29227;
var D = -0.90649;
var E = 1.97294;
var ED = E * D;
var EB = E * B;
var BC_DA = B * C - D * A;
function cubehelixConvert(o2) {
  if (o2 instanceof Cubehelix) return new Cubehelix(o2.h, o2.s, o2.l, o2.opacity);
  if (!(o2 instanceof Rgb)) o2 = rgbConvert(o2);
  var r2 = o2.r / 255, g2 = o2.g / 255, b = o2.b / 255, l2 = (BC_DA * b + ED * r2 - EB * g2) / (BC_DA + ED - EB), bl = b - l2, k2 = (E * (g2 - l2) - C * bl) / D, s2 = Math.sqrt(k2 * k2 + bl * bl) / (E * l2 * (1 - l2)), h2 = s2 ? Math.atan2(k2, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s2, l2, o2.opacity);
}
function cubehelix(h2, s2, l2, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s2, l2, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s2, l2, opacity) {
  this.h = +h2;
  this.s = +s2;
  this.l = +l2;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color2, {
  brighter(k2) {
    k2 = k2 == null ? brighter : Math.pow(brighter, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  darker(k2) {
    k2 = k2 == null ? darker : Math.pow(darker, k2);
    return new Cubehelix(this.h, this.s, this.l * k2, this.opacity);
  },
  rgb() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l2 = +this.l, a2 = isNaN(this.s) ? 0 : this.s * l2 * (1 - l2), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb(
      255 * (l2 + a2 * (A * cosh2 + B * sinh2)),
      255 * (l2 + a2 * (C * cosh2 + D * sinh2)),
      255 * (l2 + a2 * (E * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/d3-interpolate/src/basis.js
function basis(t13, v0, v1, v22, v3) {
  var t22 = t13 * t13, t32 = t22 * t13;
  return ((1 - 3 * t13 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t13 + 3 * t22 - 3 * t32) * v22 + t32 * v3) / 6;
}
function basis_default(values) {
  var n2 = values.length - 1;
  return function(t4) {
    var i2 = t4 <= 0 ? t4 = 0 : t4 >= 1 ? (t4 = 1, n2 - 1) : Math.floor(t4 * n2), v1 = values[i2], v22 = values[i2 + 1], v0 = i2 > 0 ? values[i2 - 1] : 2 * v1 - v22, v3 = i2 < n2 - 1 ? values[i2 + 2] : 2 * v22 - v1;
    return basis((t4 - i2 / n2) * n2, v0, v1, v22, v3);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n2 = values.length;
  return function(t4) {
    var i2 = Math.floor(((t4 %= 1) < 0 ? ++t4 : t4) * n2), v0 = values[(i2 + n2 - 1) % n2], v1 = values[i2 % n2], v22 = values[(i2 + 1) % n2], v3 = values[(i2 + 2) % n2];
    return basis((t4 - i2 / n2) * n2, v0, v1, v22, v3);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default = (x2) => () => x2;

// node_modules/d3-interpolate/src/color.js
function linear(a2, d2) {
  return function(t4) {
    return a2 + t4 * d2;
  };
}
function exponential(a2, b, y2) {
  return a2 = Math.pow(a2, y2), b = Math.pow(b, y2) - a2, y2 = 1 / y2, function(t4) {
    return Math.pow(a2 + t4 * b, y2);
  };
}
function hue(a2, b) {
  var d2 = b - a2;
  return d2 ? linear(a2, d2 > 180 || d2 < -180 ? d2 - 360 * Math.round(d2 / 360) : d2) : constant_default(isNaN(a2) ? b : a2);
}
function gamma(y2) {
  return (y2 = +y2) === 1 ? nogamma : function(a2, b) {
    return b - a2 ? exponential(a2, b, y2) : constant_default(isNaN(a2) ? b : a2);
  };
}
function nogamma(a2, b) {
  var d2 = b - a2;
  return d2 ? linear(a2, d2) : constant_default(isNaN(a2) ? b : a2);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y2) {
  var color3 = gamma(y2);
  function rgb3(start, end) {
    var r2 = color3((start = rgb(start)).r, (end = rgb(end)).r), g2 = color3(start.g, end.g), b = color3(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
    return function(t4) {
      start.r = r2(t4);
      start.g = g2(t4);
      start.b = b(t4);
      start.opacity = opacity(t4);
      return start + "";
    };
  }
  rgb3.gamma = rgbGamma;
  return rgb3;
}(1);
function rgbSpline(spline) {
  return function(colors) {
    var n2 = colors.length, r2 = new Array(n2), g2 = new Array(n2), b = new Array(n2), i2, color3;
    for (i2 = 0; i2 < n2; ++i2) {
      color3 = rgb(colors[i2]);
      r2[i2] = color3.r || 0;
      g2[i2] = color3.g || 0;
      b[i2] = color3.b || 0;
    }
    r2 = spline(r2);
    g2 = spline(g2);
    b = spline(b);
    color3.opacity = 1;
    return function(t4) {
      color3.r = r2(t4);
      color3.g = g2(t4);
      color3.b = b(t4);
      return color3 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a2, b) {
  if (!b) b = [];
  var n2 = a2 ? Math.min(b.length, a2.length) : 0, c4 = b.slice(), i2;
  return function(t4) {
    for (i2 = 0; i2 < n2; ++i2) c4[i2] = a2[i2] * (1 - t4) + b[i2] * t4;
    return c4;
  };
}
function isNumberArray(x2) {
  return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function array_default(a2, b) {
  return (isNumberArray(b) ? numberArray_default : genericArray)(a2, b);
}
function genericArray(a2, b) {
  var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c4 = new Array(nb), i2;
  for (i2 = 0; i2 < na; ++i2) x2[i2] = value_default(a2[i2], b[i2]);
  for (; i2 < nb; ++i2) c4[i2] = b[i2];
  return function(t4) {
    for (i2 = 0; i2 < na; ++i2) c4[i2] = x2[i2](t4);
    return c4;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a2, b) {
  var d2 = /* @__PURE__ */ new Date();
  return a2 = +a2, b = +b, function(t4) {
    return d2.setTime(a2 * (1 - t4) + b * t4), d2;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a2, b) {
  return a2 = +a2, b = +b, function(t4) {
    return a2 * (1 - t4) + b * t4;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a2, b) {
  var i2 = {}, c4 = {}, k2;
  if (a2 === null || typeof a2 !== "object") a2 = {};
  if (b === null || typeof b !== "object") b = {};
  for (k2 in b) {
    if (k2 in a2) {
      i2[k2] = value_default(a2[k2], b[k2]);
    } else {
      c4[k2] = b[k2];
    }
  }
  return function(t4) {
    for (k2 in i2) c4[k2] = i2[k2](t4);
    return c4;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero2(b) {
  return function() {
    return b;
  };
}
function one(b) {
  return function(t4) {
    return b(t4) + "";
  };
}
function string_default(a2, b) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i2 = -1, s2 = [], q2 = [];
  a2 = a2 + "", b = b + "";
  while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
    if ((bs = bm.index) > bi) {
      bs = b.slice(bi, bs);
      if (s2[i2]) s2[i2] += bs;
      else s2[++i2] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s2[i2]) s2[i2] += bm;
      else s2[++i2] = bm;
    } else {
      s2[++i2] = null;
      q2.push({ i: i2, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b.length) {
    bs = b.slice(bi);
    if (s2[i2]) s2[i2] += bs;
    else s2[++i2] = bs;
  }
  return s2.length < 2 ? q2[0] ? one(q2[0].x) : zero2(b) : (b = q2.length, function(t4) {
    for (var i3 = 0, o2; i3 < b; ++i3) s2[(o2 = q2[i3]).i] = o2.x(t4);
    return s2.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a2, b) {
  var t4 = typeof b, c4;
  return b == null || t4 === "boolean" ? constant_default(b) : (t4 === "number" ? number_default : t4 === "string" ? (c4 = color(b)) ? (b = c4, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a2, b) {
  return a2 = +a2, b = +b, function(t4) {
    return Math.round(a2 * (1 - t4) + b * t4);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity2 = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a2, b, c4, d2, e3, f2) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a2 * a2 + b * b)) a2 /= scaleX, b /= scaleX;
  if (skewX = a2 * c4 + b * d2) c4 -= a2 * skewX, d2 -= b * skewX;
  if (scaleY = Math.sqrt(c4 * c4 + d2 * d2)) c4 /= scaleY, d2 /= scaleY, skewX /= scaleY;
  if (a2 * d2 < b * c4) a2 = -a2, b = -b, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e3,
    translateY: f2,
    rotate: Math.atan2(b, a2) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m2 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m2.isIdentity ? identity2 : decompose_default(m2.a, m2.b, m2.c, m2.d, m2.e, m2.f);
}
function parseSvg(value) {
  if (value == null) return identity2;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity2;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse2, pxComma, pxParen, degParen) {
  function pop(s2) {
    return s2.length ? s2.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s2, q2) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push("translate(", null, pxComma, null, pxParen);
      q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s2.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate2(a2, b, s2, q2) {
    if (a2 !== b) {
      if (a2 - b > 180) b += 360;
      else if (b - a2 > 180) a2 += 360;
      q2.push({ i: s2.push(pop(s2) + "rotate(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "rotate(" + b + degParen);
    }
  }
  function skewX(a2, b, s2, q2) {
    if (a2 !== b) {
      q2.push({ i: s2.push(pop(s2) + "skewX(", null, degParen) - 2, x: number_default(a2, b) });
    } else if (b) {
      s2.push(pop(s2) + "skewX(" + b + degParen);
    }
  }
  function scale2(xa, ya, xb, yb, s2, q2) {
    if (xa !== xb || ya !== yb) {
      var i2 = s2.push(pop(s2) + "scale(", null, ",", null, ")");
      q2.push({ i: i2 - 4, x: number_default(xa, xb) }, { i: i2 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s2.push(pop(s2) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a2, b) {
    var s2 = [], q2 = [];
    a2 = parse2(a2), b = parse2(b);
    translate(a2.translateX, a2.translateY, b.translateX, b.translateY, s2, q2);
    rotate2(a2.rotate, b.rotate, s2, q2);
    skewX(a2.skewX, b.skewX, s2, q2);
    scale2(a2.scaleX, a2.scaleY, b.scaleX, b.scaleY, s2, q2);
    a2 = b = null;
    return function(t4) {
      var i2 = -1, n2 = q2.length, o2;
      while (++i2 < n2) s2[(o2 = q2[i2]).i] = o2.x(t4);
      return s2.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x2) {
  return ((x2 = Math.exp(x2)) + 1 / x2) / 2;
}
function sinh(x2) {
  return ((x2 = Math.exp(x2)) - 1 / x2) / 2;
}
function tanh(x2) {
  return ((x2 = Math.exp(2 * x2)) - 1) / (x2 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p02, p1) {
    var ux0 = p02[0], uy0 = p02[1], w02 = p02[2], ux1 = p1[0], uy1 = p1[1], w12 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d2 = dx * dx + dy * dy, i2, S2;
    if (d2 < epsilon2) {
      S2 = Math.log(w12 / w02) / rho;
      i2 = function(t4) {
        return [
          ux0 + t4 * dx,
          uy0 + t4 * dy,
          w02 * Math.exp(rho * t4 * S2)
        ];
      };
    } else {
      var d1 = Math.sqrt(d2), b0 = (w12 * w12 - w02 * w02 + rho4 * d2) / (2 * w02 * rho2 * d1), b1 = (w12 * w12 - w02 * w02 - rho4 * d2) / (2 * w12 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S2 = (r1 - r0) / rho;
      i2 = function(t4) {
        var s2 = t4 * S2, coshr0 = cosh(r0), u5 = w02 / (rho2 * d1) * (coshr0 * tanh(rho * s2 + r0) - sinh(r0));
        return [
          ux0 + u5 * dx,
          uy0 + u5 * dy,
          w02 * coshr0 / cosh(rho * s2 + r0)
        ];
      };
    }
    i2.duration = S2 * 1e3 * rho / Math.SQRT2;
    return i2;
  }
  zoom.rho = function(_2) {
    var _1 = Math.max(1e-3, +_2), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl2(hue3) {
  return function(start, end) {
    var h2 = hue3((start = hsl(start)).h, (end = hsl(end)).h), s2 = nogamma(start.s, end.s), l2 = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t4) {
      start.h = h2(t4);
      start.s = s2(t4);
      start.l = l2(t4);
      start.opacity = opacity(t4);
      return start + "";
    };
  };
}
var hsl_default = hsl2(hue);
var hslLong = hsl2(nogamma);

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue3) {
  return function(start, end) {
    var h2 = hue3((start = hcl(start)).h, (end = hcl(end)).h), c4 = nogamma(start.c, end.c), l2 = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
    return function(t4) {
      start.h = h2(t4);
      start.c = c4(t4);
      start.l = l2(t4);
      start.opacity = opacity(t4);
      return start + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue3) {
  return function cubehelixGamma(y2) {
    y2 = +y2;
    function cubehelix3(start, end) {
      var h2 = hue3((start = cubehelix(start)).h, (end = cubehelix(end)).h), s2 = nogamma(start.s, end.s), l2 = nogamma(start.l, end.l), opacity = nogamma(start.opacity, end.opacity);
      return function(t4) {
        start.h = h2(t4);
        start.s = s2(t4);
        start.l = l2(Math.pow(t4, y2));
        start.opacity = opacity(t4);
        return start + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/d3-scale/src/constant.js
function constants(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x2) {
  return +x2;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity3(x2) {
  return x2;
}
function normalize2(a2, b) {
  return (b -= a2 = +a2) ? function(x2) {
    return (x2 - a2) / b;
  } : constants(isNaN(b) ? NaN : 0.5);
}
function clamper(a2, b) {
  var t4;
  if (a2 > b) t4 = a2, a2 = b, b = t4;
  return function(x2) {
    return Math.max(a2, Math.min(b, x2));
  };
}
function bimap(domain, range4, interpolate) {
  var d0 = domain[0], d1 = domain[1], r0 = range4[0], r1 = range4[1];
  if (d1 < d0) d0 = normalize2(d1, d0), r0 = interpolate(r1, r0);
  else d0 = normalize2(d0, d1), r0 = interpolate(r0, r1);
  return function(x2) {
    return r0(d0(x2));
  };
}
function polymap(domain, range4, interpolate) {
  var j2 = Math.min(domain.length, range4.length) - 1, d2 = new Array(j2), r2 = new Array(j2), i2 = -1;
  if (domain[j2] < domain[0]) {
    domain = domain.slice().reverse();
    range4 = range4.slice().reverse();
  }
  while (++i2 < j2) {
    d2[i2] = normalize2(domain[i2], domain[i2 + 1]);
    r2[i2] = interpolate(range4[i2], range4[i2 + 1]);
  }
  return function(x2) {
    var i3 = bisect_default(domain, x2, 1, j2) - 1;
    return r2[i3](d2[i3](x2));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range4 = unit, interpolate = value_default, transform, untransform, unknown, clamp3 = identity3, piecewise2, output2, input;
  function rescale() {
    var n2 = Math.min(domain.length, range4.length);
    if (clamp3 !== identity3) clamp3 = clamper(domain[0], domain[n2 - 1]);
    piecewise2 = n2 > 2 ? polymap : bimap;
    output2 = input = null;
    return scale2;
  }
  function scale2(x2) {
    return x2 == null || isNaN(x2 = +x2) ? unknown : (output2 || (output2 = piecewise2(domain.map(transform), range4, interpolate)))(transform(clamp3(x2)));
  }
  scale2.invert = function(y2) {
    return clamp3(untransform((input || (input = piecewise2(range4, domain.map(transform), number_default)))(y2)));
  };
  scale2.domain = function(_2) {
    return arguments.length ? (domain = Array.from(_2, number2), rescale()) : domain.slice();
  };
  scale2.range = function(_2) {
    return arguments.length ? (range4 = Array.from(_2), rescale()) : range4.slice();
  };
  scale2.rangeRound = function(_2) {
    return range4 = Array.from(_2), interpolate = round_default, rescale();
  };
  scale2.clamp = function(_2) {
    return arguments.length ? (clamp3 = _2 ? true : identity3, rescale()) : clamp3 !== identity3;
  };
  scale2.interpolate = function(_2) {
    return arguments.length ? (interpolate = _2, rescale()) : interpolate;
  };
  scale2.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale2) : unknown;
  };
  return function(t4, u5) {
    transform = t4, untransform = u5;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x2) {
  return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
}
function formatDecimalParts(x2, p2) {
  if ((i2 = (x2 = p2 ? x2.toExponential(p2 - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
  var i2, coefficient = x2.slice(0, i2);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x2.slice(i2 + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x2) {
  return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i2 = value.length, t4 = [], j2 = 0, g2 = grouping[0], length2 = 0;
    while (i2 > 0 && g2 > 0) {
      if (length2 + g2 + 1 > width) g2 = Math.max(1, width - length2);
      t4.push(value.substring(i2 -= g2, i2 + g2));
      if ((length2 += g2 + 1) > width) break;
      g2 = grouping[j2 = (j2 + 1) % grouping.length];
    }
    return t4.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i2) {
      return numerals[+i2];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s2) {
  out: for (var n2 = s2.length, i2 = 1, i0 = -1, i1; i2 < n2; ++i2) {
    switch (s2[i2]) {
      case ".":
        i0 = i1 = i2;
        break;
      case "0":
        if (i0 === 0) i0 = i2;
        i1 = i2;
        break;
      default:
        if (!+s2[i2]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x2, p2) {
  var d2 = formatDecimalParts(x2, p2);
  if (!d2) return x2 + "";
  var coefficient = d2[0], exponent = d2[1], i2 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n2 = coefficient.length;
  return i2 === n2 ? coefficient : i2 > n2 ? coefficient + new Array(i2 - n2 + 1).join("0") : i2 > 0 ? coefficient.slice(0, i2) + "." + coefficient.slice(i2) : "0." + new Array(1 - i2).join("0") + formatDecimalParts(x2, Math.max(0, p2 + i2 - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x2, p2) {
  var d2 = formatDecimalParts(x2, p2);
  if (!d2) return x2 + "";
  var coefficient = d2[0], exponent = d2[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": (x2, p2) => (x2 * 100).toFixed(p2),
  "b": (x2) => Math.round(x2).toString(2),
  "c": (x2) => x2 + "",
  "d": formatDecimal_default,
  "e": (x2, p2) => x2.toExponential(p2),
  "f": (x2, p2) => x2.toFixed(p2),
  "g": (x2, p2) => x2.toPrecision(p2),
  "o": (x2) => Math.round(x2).toString(8),
  "p": (x2, p2) => formatRounded_default(x2 * 100, p2),
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
  "x": (x2) => Math.round(x2).toString(16)
};

// node_modules/d3-format/src/identity.js
function identity_default(x2) {
  return x2;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "−" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign6 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes_default[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=") zero3 = true, fill = "0", align = "=";
    var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format3(value) {
      var valuePrefix = prefix, valueSuffix = suffix, i2, n2, c4;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign6 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign6 === "(" ? sign6 : minus : sign6 === "-" || sign6 === "(" ? "" : sign6) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign6 === "(" ? ")" : "");
        if (maybeSuffix) {
          i2 = -1, n2 = value.length;
          while (++i2 < n2) {
            if (c4 = value.charCodeAt(i2), 48 > c4 || c4 > 57) {
              valueSuffix = (c4 === 46 ? decimal + value.slice(i2 + 1) : value.slice(i2)) + valueSuffix;
              value = value.slice(0, i2);
              break;
            }
          }
        }
      }
      if (comma && !zero3) value = group2(value, Infinity);
      var length2 = valuePrefix.length + value.length + valueSuffix.length, padding = length2 < width ? new Array(width - length2 + 1).join(fill) : "";
      if (comma && zero3) value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length2 = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length2);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format3.toString = function() {
      return specifier + "";
    };
    return format3;
  }
  function formatPrefix2(specifier, value) {
    var f2 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e3 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e3), prefix = prefixes[8 + e3 / 3];
    return function(value2) {
      return f2(k2 * value2) + prefix;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  thousands: ",",
  grouping: [3],
  currency: ["$", ""]
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step2) {
  return Math.max(0, -exponent_default(Math.abs(step2)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step2, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step2)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step2, max4) {
  step2 = Math.abs(step2), max4 = Math.abs(max4) - step2;
  return Math.max(0, exponent_default(max4) - exponent_default(step2)) + 1;
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start, stop, count2, specifier) {
  var step2 = tickStep(start, stop, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start), Math.abs(stop));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step2, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step2, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step2))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale2) {
  var domain = scale2.domain;
  scale2.ticks = function(count2) {
    var d2 = domain();
    return ticks(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2);
  };
  scale2.tickFormat = function(count2, specifier) {
    var d2 = domain();
    return tickFormat(d2[0], d2[d2.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale2.nice = function(count2) {
    if (count2 == null) count2 = 10;
    var d2 = domain();
    var i0 = 0;
    var i1 = d2.length - 1;
    var start = d2[i0];
    var stop = d2[i1];
    var prestep;
    var step2;
    var maxIter = 10;
    if (stop < start) {
      step2 = start, start = stop, stop = step2;
      step2 = i0, i0 = i1, i1 = step2;
    }
    while (maxIter-- > 0) {
      step2 = tickIncrement(start, stop, count2);
      if (step2 === prestep) {
        d2[i0] = start;
        d2[i1] = stop;
        return domain(d2);
      } else if (step2 > 0) {
        start = Math.floor(start / step2) * step2;
        stop = Math.ceil(stop / step2) * step2;
      } else if (step2 < 0) {
        start = Math.ceil(start * step2) / step2;
        stop = Math.floor(stop * step2) / step2;
      } else {
        break;
      }
      prestep = step2;
    }
    return scale2;
  };
  return scale2;
}
function linear2() {
  var scale2 = continuous();
  scale2.copy = function() {
    return copy(scale2, linear2());
  };
  initRange.apply(scale2, arguments);
  return linearish(scale2);
}

// node_modules/d3-scale/src/quantize.js
function quantize() {
  var x03 = 0, x12 = 1, n2 = 1, domain = [0.5], range4 = [0, 1], unknown;
  function scale2(x2) {
    return x2 != null && x2 <= x2 ? range4[bisect_default(domain, x2, 0, n2)] : unknown;
  }
  function rescale() {
    var i2 = -1;
    domain = new Array(n2);
    while (++i2 < n2) domain[i2] = ((i2 + 1) * x12 - (i2 - n2) * x03) / (n2 + 1);
    return scale2;
  }
  scale2.domain = function(_2) {
    return arguments.length ? ([x03, x12] = _2, x03 = +x03, x12 = +x12, rescale()) : [x03, x12];
  };
  scale2.range = function(_2) {
    return arguments.length ? (n2 = (range4 = Array.from(_2)).length - 1, rescale()) : range4.slice();
  };
  scale2.invertExtent = function(y2) {
    var i2 = range4.indexOf(y2);
    return i2 < 0 ? [NaN, NaN] : i2 < 1 ? [x03, domain[0]] : i2 >= n2 ? [domain[n2 - 1], x12] : [domain[i2 - 1], domain[i2]];
  };
  scale2.unknown = function(_2) {
    return arguments.length ? (unknown = _2, scale2) : scale2;
  };
  scale2.thresholds = function() {
    return domain.slice();
  };
  scale2.copy = function() {
    return quantize().domain([x03, x12]).range(range4).unknown(unknown);
  };
  return initRange.apply(linearish(scale2), arguments);
}

// node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count2, field) {
  function interval(date) {
    return floori(date = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date)), date;
  }
  interval.floor = (date) => {
    return floori(date = /* @__PURE__ */ new Date(+date)), date;
  };
  interval.ceil = (date) => {
    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
  };
  interval.round = (date) => {
    const d0 = interval(date), d1 = interval.ceil(date);
    return date - d0 < d1 - date ? d0 : d1;
  };
  interval.offset = (date, step2) => {
    return offseti(date = /* @__PURE__ */ new Date(+date), step2 == null ? 1 : Math.floor(step2)), date;
  };
  interval.range = (start, stop, step2) => {
    const range4 = [];
    start = interval.ceil(start);
    step2 = step2 == null ? 1 : Math.floor(step2);
    if (!(start < stop) || !(step2 > 0)) return range4;
    let previous;
    do
      range4.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step2), floori(start);
    while (previous < start && start < stop);
    return range4;
  };
  interval.filter = (test) => {
    return timeInterval((date) => {
      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
    }, (date, step2) => {
      if (date >= date) {
        if (step2 < 0) while (++step2 <= 0) {
          while (offseti(date, -1), !test(date)) {
          }
        }
        else while (--step2 >= 0) {
          while (offseti(date, 1), !test(date)) {
          }
        }
      }
    });
  };
  if (count2) {
    interval.count = (start, end) => {
      t02.setTime(+start), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval.every = (step2) => {
      step2 = Math.floor(step2);
      return !isFinite(step2) || !(step2 > 0) ? null : !(step2 > 1) ? interval : interval.filter(field ? (d2) => field(d2) % step2 === 0 : (d2) => interval.count(0, d2) % step2 === 0);
    };
  }
  return interval;
}

// node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date, step2) => {
  date.setTime(+date + step2);
}, (start, end) => {
  return end - start;
});
millisecond.every = (k2) => {
  k2 = Math.floor(k2);
  if (!isFinite(k2) || !(k2 > 0)) return null;
  if (!(k2 > 1)) return millisecond;
  return timeInterval((date) => {
    date.setTime(Math.floor(date / k2) * k2);
  }, (date, step2) => {
    date.setTime(+date + step2 * k2);
  }, (start, end) => {
    return (end - start) / k2;
  });
};
var milliseconds = millisecond.range;

// node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-time/src/second.js
var second = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds());
}, (date, step2) => {
  date.setTime(+date + step2 * durationSecond);
}, (start, end) => {
  return (end - start) / durationSecond;
}, (date) => {
  return date.getUTCSeconds();
});
var seconds = second.range;

// node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
}, (date, step2) => {
  date.setTime(+date + step2 * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date) => {
  date.setUTCSeconds(0, 0);
}, (date, step2) => {
  date.setTime(+date + step2 * durationMinute);
}, (start, end) => {
  return (end - start) / durationMinute;
}, (date) => {
  return date.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

// node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date) => {
  date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
}, (date, step2) => {
  date.setTime(+date + step2 * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date) => {
  date.setUTCMinutes(0, 0, 0);
}, (date, step2) => {
  date.setTime(+date + step2 * durationHour);
}, (start, end) => {
  return (end - start) / durationHour;
}, (date) => {
  return date.getUTCHours();
});
var utcHours = utcHour.range;

// node_modules/d3-time/src/day.js
var timeDay = timeInterval(
  (date) => date.setHours(0, 0, 0, 0),
  (date, step2) => date.setDate(date.getDate() + step2),
  (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
  (date) => date.getDate() - 1
);
var timeDays = timeDay.range;
var utcDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step2) => {
  date.setUTCDate(date.getUTCDate() + step2);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return date.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date) => {
  date.setUTCHours(0, 0, 0, 0);
}, (date, step2) => {
  date.setUTCDate(date.getUTCDate() + step2);
}, (start, end) => {
  return (end - start) / durationDay;
}, (date) => {
  return Math.floor(date / durationDay);
});
var unixDays = unixDay.range;

// node_modules/d3-time/src/week.js
function timeWeekday(i2) {
  return timeInterval((date) => {
    date.setDate(date.getDate() - (date.getDay() + 7 - i2) % 7);
    date.setHours(0, 0, 0, 0);
  }, (date, step2) => {
    date.setDate(date.getDate() + step2 * 7);
  }, (start, end) => {
    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i2) {
  return timeInterval((date) => {
    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i2) % 7);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step2) => {
    date.setUTCDate(date.getUTCDate() + step2 * 7);
  }, (start, end) => {
    return (end - start) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date) => {
  date.setDate(1);
  date.setHours(0, 0, 0, 0);
}, (date, step2) => {
  date.setMonth(date.getMonth() + step2);
}, (start, end) => {
  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
}, (date) => {
  return date.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date) => {
  date.setUTCDate(1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step2) => {
  date.setUTCMonth(date.getUTCMonth() + step2);
}, (start, end) => {
  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
}, (date) => {
  return date.getUTCMonth();
});
var utcMonths = utcMonth.range;

// node_modules/d3-time/src/year.js
var timeYear = timeInterval((date) => {
  date.setMonth(0, 1);
  date.setHours(0, 0, 0, 0);
}, (date, step2) => {
  date.setFullYear(date.getFullYear() + step2);
}, (start, end) => {
  return end.getFullYear() - start.getFullYear();
}, (date) => {
  return date.getFullYear();
});
timeYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date) => {
    date.setFullYear(Math.floor(date.getFullYear() / k2) * k2);
    date.setMonth(0, 1);
    date.setHours(0, 0, 0, 0);
  }, (date, step2) => {
    date.setFullYear(date.getFullYear() + step2 * k2);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date) => {
  date.setUTCMonth(0, 1);
  date.setUTCHours(0, 0, 0, 0);
}, (date, step2) => {
  date.setUTCFullYear(date.getUTCFullYear() + step2);
}, (start, end) => {
  return end.getUTCFullYear() - start.getUTCFullYear();
}, (date) => {
  return date.getUTCFullYear();
});
utcYear.every = (k2) => {
  return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date) => {
    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k2) * k2);
    date.setUTCMonth(0, 1);
    date.setUTCHours(0, 0, 0, 0);
  }, (date, step2) => {
    date.setUTCFullYear(date.getUTCFullYear() + step2 * k2);
  });
};
var utcYears = utcYear.range;

// node_modules/d3-time/src/ticks.js
function ticker(year, month, week, day, hour, minute) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute, 1, durationMinute],
    [minute, 5, 5 * durationMinute],
    [minute, 15, 15 * durationMinute],
    [minute, 30, 30 * durationMinute],
    [hour, 1, durationHour],
    [hour, 3, 3 * durationHour],
    [hour, 6, 6 * durationHour],
    [hour, 12, 12 * durationHour],
    [day, 1, durationDay],
    [day, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month, 1, durationMonth],
    [month, 3, 3 * durationMonth],
    [year, 1, durationYear]
  ];
  function ticks2(start, stop, count2) {
    const reverse2 = stop < start;
    if (reverse2) [start, stop] = [stop, start];
    const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start, stop, count2);
    const ticks3 = interval ? interval.range(start, +stop + 1) : [];
    return reverse2 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start, stop, count2) {
    const target = Math.abs(stop - start) / count2;
    const i2 = bisector(([, , step3]) => step3).right(tickIntervals, target);
    if (i2 === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count2));
    if (i2 === 0) return millisecond.every(Math.max(tickStep(start, stop, count2), 1));
    const [t4, step2] = tickIntervals[target / tickIntervals[i2 - 1][2] < tickIntervals[i2][2] / target ? i2 - 1 : i2];
    return t4.every(step2);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

// node_modules/d3-time-format/src/locale.js
function localDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date = new Date(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
    date.setFullYear(d2.y);
    return date;
  }
  return new Date(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L);
}
function utcDate(d2) {
  if (0 <= d2.y && d2.y < 100) {
    var date = new Date(Date.UTC(-1, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
    date.setUTCFullYear(d2.y);
    return date;
  }
  return new Date(Date.UTC(d2.y, d2.m, d2.d, d2.H, d2.M, d2.S, d2.L));
}
function newDate(y2, m2, d2) {
  return { y: y2, m: m2, d: d2, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date) {
      var string = [], i2 = -1, j2 = 0, n2 = specifier.length, c4, pad3, format3;
      if (!(date instanceof Date)) date = /* @__PURE__ */ new Date(+date);
      while (++i2 < n2) {
        if (specifier.charCodeAt(i2) === 37) {
          string.push(specifier.slice(j2, i2));
          if ((pad3 = pads[c4 = specifier.charAt(++i2)]) != null) c4 = specifier.charAt(++i2);
          else pad3 = c4 === "e" ? " " : "0";
          if (format3 = formats2[c4]) c4 = format3(date, pad3);
          string.push(c4);
          j2 = i2 + 1;
        }
      }
      string.push(specifier.slice(j2, i2));
      return string.join("");
    };
  }
  function newParse(specifier, Z) {
    return function(string) {
      var d2 = newDate(1900, void 0, 1), i2 = parseSpecifier(d2, specifier, string += "", 0), week, day;
      if (i2 != string.length) return null;
      if ("Q" in d2) return new Date(d2.Q);
      if ("s" in d2) return new Date(d2.s * 1e3 + ("L" in d2 ? d2.L : 0));
      if (Z && !("Z" in d2)) d2.Z = 0;
      if ("p" in d2) d2.H = d2.H % 12 + d2.p * 12;
      if (d2.m === void 0) d2.m = "q" in d2 ? d2.q : 0;
      if ("V" in d2) {
        if (d2.V < 1 || d2.V > 53) return null;
        if (!("w" in d2)) d2.w = 1;
        if ("Z" in d2) {
          week = utcDate(newDate(d2.y, 0, 1)), day = week.getUTCDay();
          week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
          week = utcDay.offset(week, (d2.V - 1) * 7);
          d2.y = week.getUTCFullYear();
          d2.m = week.getUTCMonth();
          d2.d = week.getUTCDate() + (d2.w + 6) % 7;
        } else {
          week = localDate(newDate(d2.y, 0, 1)), day = week.getDay();
          week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
          week = timeDay.offset(week, (d2.V - 1) * 7);
          d2.y = week.getFullYear();
          d2.m = week.getMonth();
          d2.d = week.getDate() + (d2.w + 6) % 7;
        }
      } else if ("W" in d2 || "U" in d2) {
        if (!("w" in d2)) d2.w = "u" in d2 ? d2.u % 7 : "W" in d2 ? 1 : 0;
        day = "Z" in d2 ? utcDate(newDate(d2.y, 0, 1)).getUTCDay() : localDate(newDate(d2.y, 0, 1)).getDay();
        d2.m = 0;
        d2.d = "W" in d2 ? (d2.w + 6) % 7 + d2.W * 7 - (day + 5) % 7 : d2.w + d2.U * 7 - (day + 6) % 7;
      }
      if ("Z" in d2) {
        d2.H += d2.Z / 100 | 0;
        d2.M += d2.Z % 100;
        return utcDate(d2);
      }
      return localDate(d2);
    };
  }
  function parseSpecifier(d2, specifier, string, j2) {
    var i2 = 0, n2 = specifier.length, m2 = string.length, c4, parse2;
    while (i2 < n2) {
      if (j2 >= m2) return -1;
      c4 = specifier.charCodeAt(i2++);
      if (c4 === 37) {
        c4 = specifier.charAt(i2++);
        parse2 = parses[c4 in pads ? specifier.charAt(i2++) : c4];
        if (!parse2 || (j2 = parse2(d2, string, j2)) < 0) return -1;
      } else if (c4 != string.charCodeAt(j2++)) {
        return -1;
      }
    }
    return j2;
  }
  function parsePeriod(d2, string, i2) {
    var n2 = periodRe.exec(string.slice(i2));
    return n2 ? (d2.p = periodLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
  }
  function parseShortWeekday(d2, string, i2) {
    var n2 = shortWeekdayRe.exec(string.slice(i2));
    return n2 ? (d2.w = shortWeekdayLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
  }
  function parseWeekday(d2, string, i2) {
    var n2 = weekdayRe.exec(string.slice(i2));
    return n2 ? (d2.w = weekdayLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
  }
  function parseShortMonth(d2, string, i2) {
    var n2 = shortMonthRe.exec(string.slice(i2));
    return n2 ? (d2.m = shortMonthLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
  }
  function parseMonth(d2, string, i2) {
    var n2 = monthRe.exec(string.slice(i2));
    return n2 ? (d2.m = monthLookup.get(n2[0].toLowerCase()), i2 + n2[0].length) : -1;
  }
  function parseLocaleDateTime(d2, string, i2) {
    return parseSpecifier(d2, locale_dateTime, string, i2);
  }
  function parseLocaleDate(d2, string, i2) {
    return parseSpecifier(d2, locale_date, string, i2);
  }
  function parseLocaleTime(d2, string, i2) {
    return parseSpecifier(d2, locale_time, string, i2);
  }
  function formatShortWeekday(d2) {
    return locale_shortWeekdays[d2.getDay()];
  }
  function formatWeekday(d2) {
    return locale_weekdays[d2.getDay()];
  }
  function formatShortMonth(d2) {
    return locale_shortMonths[d2.getMonth()];
  }
  function formatMonth(d2) {
    return locale_months[d2.getMonth()];
  }
  function formatPeriod(d2) {
    return locale_periods[+(d2.getHours() >= 12)];
  }
  function formatQuarter(d2) {
    return 1 + ~~(d2.getMonth() / 3);
  }
  function formatUTCShortWeekday(d2) {
    return locale_shortWeekdays[d2.getUTCDay()];
  }
  function formatUTCWeekday(d2) {
    return locale_weekdays[d2.getUTCDay()];
  }
  function formatUTCShortMonth(d2) {
    return locale_shortMonths[d2.getUTCMonth()];
  }
  function formatUTCMonth(d2) {
    return locale_months[d2.getUTCMonth()];
  }
  function formatUTCPeriod(d2) {
    return locale_periods[+(d2.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d2) {
    return 1 + ~~(d2.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f2 = newFormat(specifier += "", formats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    parse: function(specifier) {
      var p2 = newParse(specifier += "", false);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    },
    utcFormat: function(specifier) {
      var f2 = newFormat(specifier += "", utcFormats);
      f2.toString = function() {
        return specifier;
      };
      return f2;
    },
    utcParse: function(specifier) {
      var p2 = newParse(specifier += "", true);
      p2.toString = function() {
        return specifier;
      };
      return p2;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign6 = value < 0 ? "-" : "", string = (sign6 ? -value : value) + "", length2 = string.length;
  return sign6 + (length2 < width ? new Array(width - length2 + 1).join(fill) + string : string);
}
function requote(s2) {
  return s2.replace(requoteRe, "\\$&");
}
function formatRe(names2) {
  return new RegExp("^(?:" + names2.map(requote).join("|") + ")", "i");
}
function formatLookup(names2) {
  return new Map(names2.map((name, i2) => [name.toLowerCase(), i2]));
}
function parseWeekdayNumberSunday(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 1));
  return n2 ? (d2.w = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekdayNumberMonday(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 1));
  return n2 ? (d2.u = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekNumberSunday(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.U = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekNumberISO(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.V = +n2[0], i2 + n2[0].length) : -1;
}
function parseWeekNumberMonday(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.W = +n2[0], i2 + n2[0].length) : -1;
}
function parseFullYear(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 4));
  return n2 ? (d2.y = +n2[0], i2 + n2[0].length) : -1;
}
function parseYear(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.y = +n2[0] + (+n2[0] > 68 ? 1900 : 2e3), i2 + n2[0].length) : -1;
}
function parseZone(d2, string, i2) {
  var n2 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i2, i2 + 6));
  return n2 ? (d2.Z = n2[1] ? 0 : -(n2[2] + (n2[3] || "00")), i2 + n2[0].length) : -1;
}
function parseQuarter(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 1));
  return n2 ? (d2.q = n2[0] * 3 - 3, i2 + n2[0].length) : -1;
}
function parseMonthNumber(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.m = n2[0] - 1, i2 + n2[0].length) : -1;
}
function parseDayOfMonth(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.d = +n2[0], i2 + n2[0].length) : -1;
}
function parseDayOfYear(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 3));
  return n2 ? (d2.m = 0, d2.d = +n2[0], i2 + n2[0].length) : -1;
}
function parseHour24(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.H = +n2[0], i2 + n2[0].length) : -1;
}
function parseMinutes(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.M = +n2[0], i2 + n2[0].length) : -1;
}
function parseSeconds(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 2));
  return n2 ? (d2.S = +n2[0], i2 + n2[0].length) : -1;
}
function parseMilliseconds(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 3));
  return n2 ? (d2.L = +n2[0], i2 + n2[0].length) : -1;
}
function parseMicroseconds(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2, i2 + 6));
  return n2 ? (d2.L = Math.floor(n2[0] / 1e3), i2 + n2[0].length) : -1;
}
function parseLiteralPercent(d2, string, i2) {
  var n2 = percentRe.exec(string.slice(i2, i2 + 1));
  return n2 ? i2 + n2[0].length : -1;
}
function parseUnixTimestamp(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2));
  return n2 ? (d2.Q = +n2[0], i2 + n2[0].length) : -1;
}
function parseUnixTimestampSeconds(d2, string, i2) {
  var n2 = numberRe.exec(string.slice(i2));
  return n2 ? (d2.s = +n2[0], i2 + n2[0].length) : -1;
}
function formatDayOfMonth(d2, p2) {
  return pad(d2.getDate(), p2, 2);
}
function formatHour24(d2, p2) {
  return pad(d2.getHours(), p2, 2);
}
function formatHour12(d2, p2) {
  return pad(d2.getHours() % 12 || 12, p2, 2);
}
function formatDayOfYear(d2, p2) {
  return pad(1 + timeDay.count(timeYear(d2), d2), p2, 3);
}
function formatMilliseconds(d2, p2) {
  return pad(d2.getMilliseconds(), p2, 3);
}
function formatMicroseconds(d2, p2) {
  return formatMilliseconds(d2, p2) + "000";
}
function formatMonthNumber(d2, p2) {
  return pad(d2.getMonth() + 1, p2, 2);
}
function formatMinutes(d2, p2) {
  return pad(d2.getMinutes(), p2, 2);
}
function formatSeconds(d2, p2) {
  return pad(d2.getSeconds(), p2, 2);
}
function formatWeekdayNumberMonday(d2) {
  var day = d2.getDay();
  return day === 0 ? 7 : day;
}
function formatWeekNumberSunday(d2, p2) {
  return pad(timeSunday.count(timeYear(d2) - 1, d2), p2, 2);
}
function dISO(d2) {
  var day = d2.getDay();
  return day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
}
function formatWeekNumberISO(d2, p2) {
  d2 = dISO(d2);
  return pad(timeThursday.count(timeYear(d2), d2) + (timeYear(d2).getDay() === 4), p2, 2);
}
function formatWeekdayNumberSunday(d2) {
  return d2.getDay();
}
function formatWeekNumberMonday(d2, p2) {
  return pad(timeMonday.count(timeYear(d2) - 1, d2), p2, 2);
}
function formatYear(d2, p2) {
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatYearISO(d2, p2) {
  d2 = dISO(d2);
  return pad(d2.getFullYear() % 100, p2, 2);
}
function formatFullYear(d2, p2) {
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatFullYearISO(d2, p2) {
  var day = d2.getDay();
  d2 = day >= 4 || day === 0 ? timeThursday(d2) : timeThursday.ceil(d2);
  return pad(d2.getFullYear() % 1e4, p2, 4);
}
function formatZone(d2) {
  var z2 = d2.getTimezoneOffset();
  return (z2 > 0 ? "-" : (z2 *= -1, "+")) + pad(z2 / 60 | 0, "0", 2) + pad(z2 % 60, "0", 2);
}
function formatUTCDayOfMonth(d2, p2) {
  return pad(d2.getUTCDate(), p2, 2);
}
function formatUTCHour24(d2, p2) {
  return pad(d2.getUTCHours(), p2, 2);
}
function formatUTCHour12(d2, p2) {
  return pad(d2.getUTCHours() % 12 || 12, p2, 2);
}
function formatUTCDayOfYear(d2, p2) {
  return pad(1 + utcDay.count(utcYear(d2), d2), p2, 3);
}
function formatUTCMilliseconds(d2, p2) {
  return pad(d2.getUTCMilliseconds(), p2, 3);
}
function formatUTCMicroseconds(d2, p2) {
  return formatUTCMilliseconds(d2, p2) + "000";
}
function formatUTCMonthNumber(d2, p2) {
  return pad(d2.getUTCMonth() + 1, p2, 2);
}
function formatUTCMinutes(d2, p2) {
  return pad(d2.getUTCMinutes(), p2, 2);
}
function formatUTCSeconds(d2, p2) {
  return pad(d2.getUTCSeconds(), p2, 2);
}
function formatUTCWeekdayNumberMonday(d2) {
  var dow = d2.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d2, p2) {
  return pad(utcSunday.count(utcYear(d2) - 1, d2), p2, 2);
}
function UTCdISO(d2) {
  var day = d2.getUTCDay();
  return day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
}
function formatUTCWeekNumberISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(utcThursday.count(utcYear(d2), d2) + (utcYear(d2).getUTCDay() === 4), p2, 2);
}
function formatUTCWeekdayNumberSunday(d2) {
  return d2.getUTCDay();
}
function formatUTCWeekNumberMonday(d2, p2) {
  return pad(utcMonday.count(utcYear(d2) - 1, d2), p2, 2);
}
function formatUTCYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCYearISO(d2, p2) {
  d2 = UTCdISO(d2);
  return pad(d2.getUTCFullYear() % 100, p2, 2);
}
function formatUTCFullYear(d2, p2) {
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCFullYearISO(d2, p2) {
  var day = d2.getUTCDay();
  d2 = day >= 4 || day === 0 ? utcThursday(d2) : utcThursday.ceil(d2);
  return pad(d2.getUTCFullYear() % 1e4, p2, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d2) {
  return +d2;
}
function formatUnixTimestampSeconds(d2) {
  return Math.floor(+d2 / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date) {
  return date.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date = new Date(string);
  return isNaN(date) ? null : date;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/d3-geo/src/math.js
var epsilon = 1e-6;
var epsilon22 = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var quarterPi = pi / 4;
var tau = pi * 2;
var degrees3 = 180 / pi;
var radians2 = pi / 180;
var abs = Math.abs;
var atan = Math.atan;
var atan2 = Math.atan2;
var cos = Math.cos;
var ceil = Math.ceil;
var exp = Math.exp;
var hypot = Math.hypot;
var log2 = Math.log;
var sin = Math.sin;
var sign2 = Math.sign || function(x2) {
  return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
};
var sqrt2 = Math.sqrt;
var tan = Math.tan;
function acos(x2) {
  return x2 > 1 ? 0 : x2 < -1 ? pi : Math.acos(x2);
}
function asin(x2) {
  return x2 > 1 ? halfPi : x2 < -1 ? -halfPi : Math.asin(x2);
}
function haversin(x2) {
  return (x2 = sin(x2 / 2)) * x2;
}

// node_modules/d3-geo/src/noop.js
function noop() {
}

// node_modules/d3-geo/src/stream.js
function streamGeometry(geometry, stream) {
  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
    streamGeometryType[geometry.type](geometry, stream);
  }
}
var streamObjectType = {
  Feature: function(object2, stream) {
    streamGeometry(object2.geometry, stream);
  },
  FeatureCollection: function(object2, stream) {
    var features = object2.features, i2 = -1, n2 = features.length;
    while (++i2 < n2) streamGeometry(features[i2].geometry, stream);
  }
};
var streamGeometryType = {
  Sphere: function(object2, stream) {
    stream.sphere();
  },
  Point: function(object2, stream) {
    object2 = object2.coordinates;
    stream.point(object2[0], object2[1], object2[2]);
  },
  MultiPoint: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) object2 = coordinates2[i2], stream.point(object2[0], object2[1], object2[2]);
  },
  LineString: function(object2, stream) {
    streamLine(object2.coordinates, stream, 0);
  },
  MultiLineString: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) streamLine(coordinates2[i2], stream, 0);
  },
  Polygon: function(object2, stream) {
    streamPolygon(object2.coordinates, stream);
  },
  MultiPolygon: function(object2, stream) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) streamPolygon(coordinates2[i2], stream);
  },
  GeometryCollection: function(object2, stream) {
    var geometries = object2.geometries, i2 = -1, n2 = geometries.length;
    while (++i2 < n2) streamGeometry(geometries[i2], stream);
  }
};
function streamLine(coordinates2, stream, closed) {
  var i2 = -1, n2 = coordinates2.length - closed, coordinate;
  stream.lineStart();
  while (++i2 < n2) coordinate = coordinates2[i2], stream.point(coordinate[0], coordinate[1], coordinate[2]);
  stream.lineEnd();
}
function streamPolygon(coordinates2, stream) {
  var i2 = -1, n2 = coordinates2.length;
  stream.polygonStart();
  while (++i2 < n2) streamLine(coordinates2[i2], stream, 1);
  stream.polygonEnd();
}
function stream_default(object2, stream) {
  if (object2 && streamObjectType.hasOwnProperty(object2.type)) {
    streamObjectType[object2.type](object2, stream);
  } else {
    streamGeometry(object2, stream);
  }
}

// node_modules/d3-geo/src/area.js
var areaRingSum = new Adder();
var areaSum = new Adder();
var lambda00;
var phi00;
var lambda0;
var cosPhi0;
var sinPhi0;
var areaStream = {
  point: noop,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: function() {
    areaRingSum = new Adder();
    areaStream.lineStart = areaRingStart;
    areaStream.lineEnd = areaRingEnd;
  },
  polygonEnd: function() {
    var areaRing = +areaRingSum;
    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
    this.lineStart = this.lineEnd = this.point = noop;
  },
  sphere: function() {
    areaSum.add(tau);
  }
};
function areaRingStart() {
  areaStream.point = areaPointFirst;
}
function areaRingEnd() {
  areaPoint(lambda00, phi00);
}
function areaPointFirst(lambda, phi) {
  areaStream.point = areaPoint;
  lambda00 = lambda, phi00 = phi;
  lambda *= radians2, phi *= radians2;
  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
}
function areaPoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  phi = phi / 2 + quarterPi;
  var dLambda = lambda - lambda0, sdLambda = dLambda >= 0 ? 1 : -1, adLambda = sdLambda * dLambda, cosPhi = cos(phi), sinPhi = sin(phi), k2 = sinPhi0 * sinPhi, u5 = cosPhi0 * cosPhi + k2 * cos(adLambda), v3 = k2 * sdLambda * sin(adLambda);
  areaRingSum.add(atan2(v3, u5));
  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
}

// node_modules/d3-geo/src/cartesian.js
function spherical(cartesian3) {
  return [atan2(cartesian3[1], cartesian3[0]), asin(cartesian3[2])];
}
function cartesian(spherical3) {
  var lambda = spherical3[0], phi = spherical3[1], cosPhi = cos(phi);
  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
}
function cartesianDot(a2, b) {
  return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
}
function cartesianCross(a2, b) {
  return [a2[1] * b[2] - a2[2] * b[1], a2[2] * b[0] - a2[0] * b[2], a2[0] * b[1] - a2[1] * b[0]];
}
function cartesianAddInPlace(a2, b) {
  a2[0] += b[0], a2[1] += b[1], a2[2] += b[2];
}
function cartesianScale(vector, k2) {
  return [vector[0] * k2, vector[1] * k2, vector[2] * k2];
}
function cartesianNormalizeInPlace(d2) {
  var l2 = sqrt2(d2[0] * d2[0] + d2[1] * d2[1] + d2[2] * d2[2]);
  d2[0] /= l2, d2[1] /= l2, d2[2] /= l2;
}

// node_modules/d3-geo/src/bounds.js
var lambda02;
var phi0;
var lambda1;
var phi1;
var lambda2;
var lambda002;
var phi002;
var p0;
var deltaSum;
var ranges;
var range2;
var boundsStream = {
  point: boundsPoint,
  lineStart: boundsLineStart,
  lineEnd: boundsLineEnd,
  polygonStart: function() {
    boundsStream.point = boundsRingPoint;
    boundsStream.lineStart = boundsRingStart;
    boundsStream.lineEnd = boundsRingEnd;
    deltaSum = new Adder();
    areaStream.polygonStart();
  },
  polygonEnd: function() {
    areaStream.polygonEnd();
    boundsStream.point = boundsPoint;
    boundsStream.lineStart = boundsLineStart;
    boundsStream.lineEnd = boundsLineEnd;
    if (areaRingSum < 0) lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
    else if (deltaSum > epsilon) phi1 = 90;
    else if (deltaSum < -epsilon) phi0 = -90;
    range2[0] = lambda02, range2[1] = lambda1;
  },
  sphere: function() {
    lambda02 = -(lambda1 = 180), phi0 = -(phi1 = 90);
  }
};
function boundsPoint(lambda, phi) {
  ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
}
function linePoint(lambda, phi) {
  var p2 = cartesian([lambda * radians2, phi * radians2]);
  if (p0) {
    var normal2 = cartesianCross(p0, p2), equatorial = [normal2[1], -normal2[0], 0], inflection = cartesianCross(equatorial, normal2);
    cartesianNormalizeInPlace(inflection);
    inflection = spherical(inflection);
    var delta = lambda - lambda2, sign6 = delta > 0 ? 1 : -1, lambdai = inflection[0] * degrees3 * sign6, phii, antimeridian = abs(delta) > 180;
    if (antimeridian ^ (sign6 * lambda2 < lambdai && lambdai < sign6 * lambda)) {
      phii = inflection[1] * degrees3;
      if (phii > phi1) phi1 = phii;
    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign6 * lambda2 < lambdai && lambdai < sign6 * lambda)) {
      phii = -inflection[1] * degrees3;
      if (phii < phi0) phi0 = phii;
    } else {
      if (phi < phi0) phi0 = phi;
      if (phi > phi1) phi1 = phi;
    }
    if (antimeridian) {
      if (lambda < lambda2) {
        if (angle(lambda02, lambda) > angle(lambda02, lambda1)) lambda1 = lambda;
      } else {
        if (angle(lambda, lambda1) > angle(lambda02, lambda1)) lambda02 = lambda;
      }
    } else {
      if (lambda1 >= lambda02) {
        if (lambda < lambda02) lambda02 = lambda;
        if (lambda > lambda1) lambda1 = lambda;
      } else {
        if (lambda > lambda2) {
          if (angle(lambda02, lambda) > angle(lambda02, lambda1)) lambda1 = lambda;
        } else {
          if (angle(lambda, lambda1) > angle(lambda02, lambda1)) lambda02 = lambda;
        }
      }
    }
  } else {
    ranges.push(range2 = [lambda02 = lambda, lambda1 = lambda]);
  }
  if (phi < phi0) phi0 = phi;
  if (phi > phi1) phi1 = phi;
  p0 = p2, lambda2 = lambda;
}
function boundsLineStart() {
  boundsStream.point = linePoint;
}
function boundsLineEnd() {
  range2[0] = lambda02, range2[1] = lambda1;
  boundsStream.point = boundsPoint;
  p0 = null;
}
function boundsRingPoint(lambda, phi) {
  if (p0) {
    var delta = lambda - lambda2;
    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
  } else {
    lambda002 = lambda, phi002 = phi;
  }
  areaStream.point(lambda, phi);
  linePoint(lambda, phi);
}
function boundsRingStart() {
  areaStream.lineStart();
}
function boundsRingEnd() {
  boundsRingPoint(lambda002, phi002);
  areaStream.lineEnd();
  if (abs(deltaSum) > epsilon) lambda02 = -(lambda1 = 180);
  range2[0] = lambda02, range2[1] = lambda1;
  p0 = null;
}
function angle(lambda04, lambda12) {
  return (lambda12 -= lambda04) < 0 ? lambda12 + 360 : lambda12;
}
function rangeCompare(a2, b) {
  return a2[0] - b[0];
}
function rangeContains(range4, x2) {
  return range4[0] <= range4[1] ? range4[0] <= x2 && x2 <= range4[1] : x2 < range4[0] || range4[1] < x2;
}
function bounds_default(feature) {
  var i2, n2, a2, b, merged, deltaMax, delta;
  phi1 = lambda1 = -(lambda02 = phi0 = Infinity);
  ranges = [];
  stream_default(feature, boundsStream);
  if (n2 = ranges.length) {
    ranges.sort(rangeCompare);
    for (i2 = 1, a2 = ranges[0], merged = [a2]; i2 < n2; ++i2) {
      b = ranges[i2];
      if (rangeContains(a2, b[0]) || rangeContains(a2, b[1])) {
        if (angle(a2[0], b[1]) > angle(a2[0], a2[1])) a2[1] = b[1];
        if (angle(b[0], a2[1]) > angle(a2[0], a2[1])) a2[0] = b[0];
      } else {
        merged.push(a2 = b);
      }
    }
    for (deltaMax = -Infinity, n2 = merged.length - 1, i2 = 0, a2 = merged[n2]; i2 <= n2; a2 = b, ++i2) {
      b = merged[i2];
      if ((delta = angle(a2[1], b[0])) > deltaMax) deltaMax = delta, lambda02 = b[0], lambda1 = a2[1];
    }
  }
  ranges = range2 = null;
  return lambda02 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda02, phi0], [lambda1, phi1]];
}

// node_modules/d3-geo/src/centroid.js
var W0;
var W1;
var X0;
var Y0;
var Z0;
var X1;
var Y1;
var Z1;
var X2;
var Y2;
var Z2;
var lambda003;
var phi003;
var x0;
var y0;
var z0;
var centroidStream = {
  sphere: noop,
  point: centroidPoint,
  lineStart: centroidLineStart,
  lineEnd: centroidLineEnd,
  polygonStart: function() {
    centroidStream.lineStart = centroidRingStart;
    centroidStream.lineEnd = centroidRingEnd;
  },
  polygonEnd: function() {
    centroidStream.lineStart = centroidLineStart;
    centroidStream.lineEnd = centroidLineEnd;
  }
};
function centroidPoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi);
  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
}
function centroidPointCartesian(x2, y2, z2) {
  ++W0;
  X0 += (x2 - X0) / W0;
  Y0 += (y2 - Y0) / W0;
  Z0 += (z2 - Z0) / W0;
}
function centroidLineStart() {
  centroidStream.point = centroidLinePointFirst;
}
function centroidLinePointFirst(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidStream.point = centroidLinePoint;
  centroidPointCartesian(x0, y0, z0);
}
function centroidLinePoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi), x2 = cosPhi * cos(lambda), y2 = cosPhi * sin(lambda), z2 = sin(phi), w4 = atan2(sqrt2((w4 = y0 * z2 - z0 * y2) * w4 + (w4 = z0 * x2 - x0 * z2) * w4 + (w4 = x0 * y2 - y0 * x2) * w4), x0 * x2 + y0 * y2 + z0 * z2);
  W1 += w4;
  X1 += w4 * (x0 + (x0 = x2));
  Y1 += w4 * (y0 + (y0 = y2));
  Z1 += w4 * (z0 + (z0 = z2));
  centroidPointCartesian(x0, y0, z0);
}
function centroidLineEnd() {
  centroidStream.point = centroidPoint;
}
function centroidRingStart() {
  centroidStream.point = centroidRingPointFirst;
}
function centroidRingEnd() {
  centroidRingPoint(lambda003, phi003);
  centroidStream.point = centroidPoint;
}
function centroidRingPointFirst(lambda, phi) {
  lambda003 = lambda, phi003 = phi;
  lambda *= radians2, phi *= radians2;
  centroidStream.point = centroidRingPoint;
  var cosPhi = cos(phi);
  x0 = cosPhi * cos(lambda);
  y0 = cosPhi * sin(lambda);
  z0 = sin(phi);
  centroidPointCartesian(x0, y0, z0);
}
function centroidRingPoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var cosPhi = cos(phi), x2 = cosPhi * cos(lambda), y2 = cosPhi * sin(lambda), z2 = sin(phi), cx = y0 * z2 - z0 * y2, cy = z0 * x2 - x0 * z2, cz = x0 * y2 - y0 * x2, m2 = hypot(cx, cy, cz), w4 = asin(m2), v3 = m2 && -w4 / m2;
  X2.add(v3 * cx);
  Y2.add(v3 * cy);
  Z2.add(v3 * cz);
  W1 += w4;
  X1 += w4 * (x0 + (x0 = x2));
  Y1 += w4 * (y0 + (y0 = y2));
  Z1 += w4 * (z0 + (z0 = z2));
  centroidPointCartesian(x0, y0, z0);
}
function centroid_default(object2) {
  W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0;
  X2 = new Adder();
  Y2 = new Adder();
  Z2 = new Adder();
  stream_default(object2, centroidStream);
  var x2 = +X2, y2 = +Y2, z2 = +Z2, m2 = hypot(x2, y2, z2);
  if (m2 < epsilon22) {
    x2 = X1, y2 = Y1, z2 = Z1;
    if (W1 < epsilon) x2 = X0, y2 = Y0, z2 = Z0;
    m2 = hypot(x2, y2, z2);
    if (m2 < epsilon22) return [NaN, NaN];
  }
  return [atan2(y2, x2) * degrees3, asin(z2 / m2) * degrees3];
}

// node_modules/d3-geo/src/compose.js
function compose_default(a2, b) {
  function compose(x2, y2) {
    return x2 = a2(x2, y2), b(x2[0], x2[1]);
  }
  if (a2.invert && b.invert) compose.invert = function(x2, y2) {
    return x2 = b.invert(x2, y2), x2 && a2.invert(x2[0], x2[1]);
  };
  return compose;
}

// node_modules/d3-geo/src/rotation.js
function rotationIdentity(lambda, phi) {
  if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;
  return [lambda, phi];
}
rotationIdentity.invert = rotationIdentity;
function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
  return (deltaLambda %= tau) ? deltaPhi || deltaGamma ? compose_default(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
}
function forwardRotationLambda(deltaLambda) {
  return function(lambda, phi) {
    lambda += deltaLambda;
    if (abs(lambda) > pi) lambda -= Math.round(lambda / tau) * tau;
    return [lambda, phi];
  };
}
function rotationLambda(deltaLambda) {
  var rotation = forwardRotationLambda(deltaLambda);
  rotation.invert = forwardRotationLambda(-deltaLambda);
  return rotation;
}
function rotationPhiGamma(deltaPhi, deltaGamma) {
  var cosDeltaPhi = cos(deltaPhi), sinDeltaPhi = sin(deltaPhi), cosDeltaGamma = cos(deltaGamma), sinDeltaGamma = sin(deltaGamma);
  function rotation(lambda, phi) {
    var cosPhi = cos(phi), x2 = cos(lambda) * cosPhi, y2 = sin(lambda) * cosPhi, z2 = sin(phi), k2 = z2 * cosDeltaPhi + x2 * sinDeltaPhi;
    return [
      atan2(y2 * cosDeltaGamma - k2 * sinDeltaGamma, x2 * cosDeltaPhi - z2 * sinDeltaPhi),
      asin(k2 * cosDeltaGamma + y2 * sinDeltaGamma)
    ];
  }
  rotation.invert = function(lambda, phi) {
    var cosPhi = cos(phi), x2 = cos(lambda) * cosPhi, y2 = sin(lambda) * cosPhi, z2 = sin(phi), k2 = z2 * cosDeltaGamma - y2 * sinDeltaGamma;
    return [
      atan2(y2 * cosDeltaGamma + z2 * sinDeltaGamma, x2 * cosDeltaPhi + k2 * sinDeltaPhi),
      asin(k2 * cosDeltaPhi - x2 * sinDeltaPhi)
    ];
  };
  return rotation;
}
function rotation_default(rotate2) {
  rotate2 = rotateRadians(rotate2[0] * radians2, rotate2[1] * radians2, rotate2.length > 2 ? rotate2[2] * radians2 : 0);
  function forward(coordinates2) {
    coordinates2 = rotate2(coordinates2[0] * radians2, coordinates2[1] * radians2);
    return coordinates2[0] *= degrees3, coordinates2[1] *= degrees3, coordinates2;
  }
  forward.invert = function(coordinates2) {
    coordinates2 = rotate2.invert(coordinates2[0] * radians2, coordinates2[1] * radians2);
    return coordinates2[0] *= degrees3, coordinates2[1] *= degrees3, coordinates2;
  };
  return forward;
}

// node_modules/d3-geo/src/circle.js
function circleStream(stream, radius, delta, direction2, t03, t13) {
  if (!delta) return;
  var cosRadius = cos(radius), sinRadius = sin(radius), step2 = direction2 * delta;
  if (t03 == null) {
    t03 = radius + direction2 * tau;
    t13 = radius - step2 / 2;
  } else {
    t03 = circleRadius(cosRadius, t03);
    t13 = circleRadius(cosRadius, t13);
    if (direction2 > 0 ? t03 < t13 : t03 > t13) t03 += direction2 * tau;
  }
  for (var point2, t4 = t03; direction2 > 0 ? t4 > t13 : t4 < t13; t4 -= step2) {
    point2 = spherical([cosRadius, -sinRadius * cos(t4), -sinRadius * sin(t4)]);
    stream.point(point2[0], point2[1]);
  }
}
function circleRadius(cosRadius, point2) {
  point2 = cartesian(point2), point2[0] -= cosRadius;
  cartesianNormalizeInPlace(point2);
  var radius = acos(-point2[1]);
  return ((-point2[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
}

// node_modules/d3-geo/src/clip/buffer.js
function buffer_default() {
  var lines = [], line;
  return {
    point: function(x2, y2, m2) {
      line.push([x2, y2, m2]);
    },
    lineStart: function() {
      lines.push(line = []);
    },
    lineEnd: noop,
    rejoin: function() {
      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
    },
    result: function() {
      var result = lines;
      lines = [];
      line = null;
      return result;
    }
  };
}

// node_modules/d3-geo/src/pointEqual.js
function pointEqual_default(a2, b) {
  return abs(a2[0] - b[0]) < epsilon && abs(a2[1] - b[1]) < epsilon;
}

// node_modules/d3-geo/src/clip/rejoin.js
function Intersection(point2, points, other, entry) {
  this.x = point2;
  this.z = points;
  this.o = other;
  this.e = entry;
  this.v = false;
  this.n = this.p = null;
}
function rejoin_default(segments, compareIntersection2, startInside, interpolate, stream) {
  var subject = [], clip = [], i2, n2;
  segments.forEach(function(segment) {
    if ((n3 = segment.length - 1) <= 0) return;
    var n3, p02 = segment[0], p1 = segment[n3], x2;
    if (pointEqual_default(p02, p1)) {
      if (!p02[2] && !p1[2]) {
        stream.lineStart();
        for (i2 = 0; i2 < n3; ++i2) stream.point((p02 = segment[i2])[0], p02[1]);
        stream.lineEnd();
        return;
      }
      p1[0] += 2 * epsilon;
    }
    subject.push(x2 = new Intersection(p02, segment, null, true));
    clip.push(x2.o = new Intersection(p02, null, x2, false));
    subject.push(x2 = new Intersection(p1, segment, null, false));
    clip.push(x2.o = new Intersection(p1, null, x2, true));
  });
  if (!subject.length) return;
  clip.sort(compareIntersection2);
  link(subject);
  link(clip);
  for (i2 = 0, n2 = clip.length; i2 < n2; ++i2) {
    clip[i2].e = startInside = !startInside;
  }
  var start = subject[0], points, point2;
  while (1) {
    var current = start, isSubject = true;
    while (current.v) if ((current = current.n) === start) return;
    points = current.z;
    stream.lineStart();
    do {
      current.v = current.o.v = true;
      if (current.e) {
        if (isSubject) {
          for (i2 = 0, n2 = points.length; i2 < n2; ++i2) stream.point((point2 = points[i2])[0], point2[1]);
        } else {
          interpolate(current.x, current.n.x, 1, stream);
        }
        current = current.n;
      } else {
        if (isSubject) {
          points = current.p.z;
          for (i2 = points.length - 1; i2 >= 0; --i2) stream.point((point2 = points[i2])[0], point2[1]);
        } else {
          interpolate(current.x, current.p.x, -1, stream);
        }
        current = current.p;
      }
      current = current.o;
      points = current.z;
      isSubject = !isSubject;
    } while (!current.v);
    stream.lineEnd();
  }
}
function link(array3) {
  if (!(n2 = array3.length)) return;
  var n2, i2 = 0, a2 = array3[0], b;
  while (++i2 < n2) {
    a2.n = b = array3[i2];
    b.p = a2;
    a2 = b;
  }
  a2.n = b = array3[0];
  b.p = a2;
}

// node_modules/d3-geo/src/polygonContains.js
function longitude(point2) {
  return abs(point2[0]) <= pi ? point2[0] : sign2(point2[0]) * ((abs(point2[0]) + pi) % tau - pi);
}
function polygonContains_default(polygon, point2) {
  var lambda = longitude(point2), phi = point2[1], sinPhi = sin(phi), normal2 = [sin(lambda), -cos(lambda), 0], angle2 = 0, winding = 0;
  var sum3 = new Adder();
  if (sinPhi === 1) phi = halfPi + epsilon;
  else if (sinPhi === -1) phi = -halfPi - epsilon;
  for (var i2 = 0, n2 = polygon.length; i2 < n2; ++i2) {
    if (!(m2 = (ring = polygon[i2]).length)) continue;
    var ring, m2, point0 = ring[m2 - 1], lambda04 = longitude(point0), phi02 = point0[1] / 2 + quarterPi, sinPhi03 = sin(phi02), cosPhi03 = cos(phi02);
    for (var j2 = 0; j2 < m2; ++j2, lambda04 = lambda12, sinPhi03 = sinPhi1, cosPhi03 = cosPhi1, point0 = point1) {
      var point1 = ring[j2], lambda12 = longitude(point1), phi12 = point1[1] / 2 + quarterPi, sinPhi1 = sin(phi12), cosPhi1 = cos(phi12), delta = lambda12 - lambda04, sign6 = delta >= 0 ? 1 : -1, absDelta = sign6 * delta, antimeridian = absDelta > pi, k2 = sinPhi03 * sinPhi1;
      sum3.add(atan2(k2 * sign6 * sin(absDelta), cosPhi03 * cosPhi1 + k2 * cos(absDelta)));
      angle2 += antimeridian ? delta + sign6 * tau : delta;
      if (antimeridian ^ lambda04 >= lambda ^ lambda12 >= lambda) {
        var arc = cartesianCross(cartesian(point0), cartesian(point1));
        cartesianNormalizeInPlace(arc);
        var intersection2 = cartesianCross(normal2, arc);
        cartesianNormalizeInPlace(intersection2);
        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection2[2]);
        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
          winding += antimeridian ^ delta >= 0 ? 1 : -1;
        }
      }
    }
  }
  return (angle2 < -epsilon || angle2 < epsilon && sum3 < -epsilon22) ^ winding & 1;
}

// node_modules/d3-geo/src/clip/index.js
function clip_default(pointVisible, clipLine, interpolate, start) {
  return function(sink) {
    var line = clipLine(sink), ringBuffer = buffer_default(), ringSink = clipLine(ringBuffer), polygonStarted = false, polygon, segments, ring;
    var clip = {
      point: point2,
      lineStart,
      lineEnd,
      polygonStart: function() {
        clip.point = pointRing;
        clip.lineStart = ringStart;
        clip.lineEnd = ringEnd;
        segments = [];
        polygon = [];
      },
      polygonEnd: function() {
        clip.point = point2;
        clip.lineStart = lineStart;
        clip.lineEnd = lineEnd;
        segments = merge(segments);
        var startInside = polygonContains_default(polygon, start);
        if (segments.length) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          rejoin_default(segments, compareIntersection, startInside, interpolate, sink);
        } else if (startInside) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          interpolate(null, null, 1, sink);
          sink.lineEnd();
        }
        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
        segments = polygon = null;
      },
      sphere: function() {
        sink.polygonStart();
        sink.lineStart();
        interpolate(null, null, 1, sink);
        sink.lineEnd();
        sink.polygonEnd();
      }
    };
    function point2(lambda, phi) {
      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
    }
    function pointLine(lambda, phi) {
      line.point(lambda, phi);
    }
    function lineStart() {
      clip.point = pointLine;
      line.lineStart();
    }
    function lineEnd() {
      clip.point = point2;
      line.lineEnd();
    }
    function pointRing(lambda, phi) {
      ring.push([lambda, phi]);
      ringSink.point(lambda, phi);
    }
    function ringStart() {
      ringSink.lineStart();
      ring = [];
    }
    function ringEnd() {
      pointRing(ring[0][0], ring[0][1]);
      ringSink.lineEnd();
      var clean = ringSink.clean(), ringSegments = ringBuffer.result(), i2, n2 = ringSegments.length, m2, segment, point3;
      ring.pop();
      polygon.push(ring);
      ring = null;
      if (!n2) return;
      if (clean & 1) {
        segment = ringSegments[0];
        if ((m2 = segment.length - 1) > 0) {
          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
          sink.lineStart();
          for (i2 = 0; i2 < m2; ++i2) sink.point((point3 = segment[i2])[0], point3[1]);
          sink.lineEnd();
        }
        return;
      }
      if (n2 > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
      segments.push(ringSegments.filter(validSegment));
    }
    return clip;
  };
}
function validSegment(segment) {
  return segment.length > 1;
}
function compareIntersection(a2, b) {
  return ((a2 = a2.x)[0] < 0 ? a2[1] - halfPi - epsilon : halfPi - a2[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
}

// node_modules/d3-geo/src/clip/antimeridian.js
var antimeridian_default = clip_default(
  function() {
    return true;
  },
  clipAntimeridianLine,
  clipAntimeridianInterpolate,
  [-pi, -halfPi]
);
function clipAntimeridianLine(stream) {
  var lambda04 = NaN, phi02 = NaN, sign0 = NaN, clean;
  return {
    lineStart: function() {
      stream.lineStart();
      clean = 1;
    },
    point: function(lambda12, phi12) {
      var sign1 = lambda12 > 0 ? pi : -pi, delta = abs(lambda12 - lambda04);
      if (abs(delta - pi) < epsilon) {
        stream.point(lambda04, phi02 = (phi02 + phi12) / 2 > 0 ? halfPi : -halfPi);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        stream.point(lambda12, phi02);
        clean = 0;
      } else if (sign0 !== sign1 && delta >= pi) {
        if (abs(lambda04 - sign0) < epsilon) lambda04 -= sign0 * epsilon;
        if (abs(lambda12 - sign1) < epsilon) lambda12 -= sign1 * epsilon;
        phi02 = clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12);
        stream.point(sign0, phi02);
        stream.lineEnd();
        stream.lineStart();
        stream.point(sign1, phi02);
        clean = 0;
      }
      stream.point(lambda04 = lambda12, phi02 = phi12);
      sign0 = sign1;
    },
    lineEnd: function() {
      stream.lineEnd();
      lambda04 = phi02 = NaN;
    },
    clean: function() {
      return 2 - clean;
    }
  };
}
function clipAntimeridianIntersect(lambda04, phi02, lambda12, phi12) {
  var cosPhi03, cosPhi1, sinLambda0Lambda1 = sin(lambda04 - lambda12);
  return abs(sinLambda0Lambda1) > epsilon ? atan((sin(phi02) * (cosPhi1 = cos(phi12)) * sin(lambda12) - sin(phi12) * (cosPhi03 = cos(phi02)) * sin(lambda04)) / (cosPhi03 * cosPhi1 * sinLambda0Lambda1)) : (phi02 + phi12) / 2;
}
function clipAntimeridianInterpolate(from, to, direction2, stream) {
  var phi;
  if (from == null) {
    phi = direction2 * halfPi;
    stream.point(-pi, phi);
    stream.point(0, phi);
    stream.point(pi, phi);
    stream.point(pi, 0);
    stream.point(pi, -phi);
    stream.point(0, -phi);
    stream.point(-pi, -phi);
    stream.point(-pi, 0);
    stream.point(-pi, phi);
  } else if (abs(from[0] - to[0]) > epsilon) {
    var lambda = from[0] < to[0] ? pi : -pi;
    phi = direction2 * lambda / 2;
    stream.point(-lambda, phi);
    stream.point(0, phi);
    stream.point(lambda, phi);
  } else {
    stream.point(to[0], to[1]);
  }
}

// node_modules/d3-geo/src/clip/circle.js
function circle_default(radius) {
  var cr = cos(radius), delta = 2 * radians2, smallRadius = cr > 0, notHemisphere = abs(cr) > epsilon;
  function interpolate(from, to, direction2, stream) {
    circleStream(stream, radius, delta, direction2, from, to);
  }
  function visible(lambda, phi) {
    return cos(lambda) * cos(phi) > cr;
  }
  function clipLine(stream) {
    var point0, c0, v0, v00, clean;
    return {
      lineStart: function() {
        v00 = v0 = false;
        clean = 1;
      },
      point: function(lambda, phi) {
        var point1 = [lambda, phi], point2, v3 = visible(lambda, phi), c4 = smallRadius ? v3 ? 0 : code2(lambda, phi) : v3 ? code2(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
        if (!point0 && (v00 = v0 = v3)) stream.lineStart();
        if (v3 !== v0) {
          point2 = intersect2(point0, point1);
          if (!point2 || pointEqual_default(point0, point2) || pointEqual_default(point1, point2))
            point1[2] = 1;
        }
        if (v3 !== v0) {
          clean = 0;
          if (v3) {
            stream.lineStart();
            point2 = intersect2(point1, point0);
            stream.point(point2[0], point2[1]);
          } else {
            point2 = intersect2(point0, point1);
            stream.point(point2[0], point2[1], 2);
            stream.lineEnd();
          }
          point0 = point2;
        } else if (notHemisphere && point0 && smallRadius ^ v3) {
          var t4;
          if (!(c4 & c0) && (t4 = intersect2(point1, point0, true))) {
            clean = 0;
            if (smallRadius) {
              stream.lineStart();
              stream.point(t4[0][0], t4[0][1]);
              stream.point(t4[1][0], t4[1][1]);
              stream.lineEnd();
            } else {
              stream.point(t4[1][0], t4[1][1]);
              stream.lineEnd();
              stream.lineStart();
              stream.point(t4[0][0], t4[0][1], 3);
            }
          }
        }
        if (v3 && (!point0 || !pointEqual_default(point0, point1))) {
          stream.point(point1[0], point1[1]);
        }
        point0 = point1, v0 = v3, c0 = c4;
      },
      lineEnd: function() {
        if (v0) stream.lineEnd();
        point0 = null;
      },
      // Rejoin first and last segments if there were intersections and the first
      // and last points were visible.
      clean: function() {
        return clean | (v00 && v0) << 1;
      }
    };
  }
  function intersect2(a2, b, two) {
    var pa = cartesian(a2), pb = cartesian(b);
    var n1 = [1, 0, 0], n2 = cartesianCross(pa, pb), n2n2 = cartesianDot(n2, n2), n1n2 = n2[0], determinant = n2n2 - n1n2 * n1n2;
    if (!determinant) return !two && a2;
    var c1 = cr * n2n2 / determinant, c22 = -cr * n1n2 / determinant, n1xn2 = cartesianCross(n1, n2), A6 = cartesianScale(n1, c1), B4 = cartesianScale(n2, c22);
    cartesianAddInPlace(A6, B4);
    var u5 = n1xn2, w4 = cartesianDot(A6, u5), uu = cartesianDot(u5, u5), t22 = w4 * w4 - uu * (cartesianDot(A6, A6) - 1);
    if (t22 < 0) return;
    var t4 = sqrt2(t22), q2 = cartesianScale(u5, (-w4 - t4) / uu);
    cartesianAddInPlace(q2, A6);
    q2 = spherical(q2);
    if (!two) return q2;
    var lambda04 = a2[0], lambda12 = b[0], phi02 = a2[1], phi12 = b[1], z2;
    if (lambda12 < lambda04) z2 = lambda04, lambda04 = lambda12, lambda12 = z2;
    var delta2 = lambda12 - lambda04, polar = abs(delta2 - pi) < epsilon, meridian = polar || delta2 < epsilon;
    if (!polar && phi12 < phi02) z2 = phi02, phi02 = phi12, phi12 = z2;
    if (meridian ? polar ? phi02 + phi12 > 0 ^ q2[1] < (abs(q2[0] - lambda04) < epsilon ? phi02 : phi12) : phi02 <= q2[1] && q2[1] <= phi12 : delta2 > pi ^ (lambda04 <= q2[0] && q2[0] <= lambda12)) {
      var q1 = cartesianScale(u5, (-w4 + t4) / uu);
      cartesianAddInPlace(q1, A6);
      return [q2, spherical(q1)];
    }
  }
  function code2(lambda, phi) {
    var r2 = smallRadius ? radius : pi - radius, code3 = 0;
    if (lambda < -r2) code3 |= 1;
    else if (lambda > r2) code3 |= 2;
    if (phi < -r2) code3 |= 4;
    else if (phi > r2) code3 |= 8;
    return code3;
  }
  return clip_default(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
}

// node_modules/d3-geo/src/clip/line.js
function line_default(a2, b, x03, y03, x12, y12) {
  var ax = a2[0], ay = a2[1], bx = b[0], by = b[1], t03 = 0, t13 = 1, dx = bx - ax, dy = by - ay, r2;
  r2 = x03 - ax;
  if (!dx && r2 > 0) return;
  r2 /= dx;
  if (dx < 0) {
    if (r2 < t03) return;
    if (r2 < t13) t13 = r2;
  } else if (dx > 0) {
    if (r2 > t13) return;
    if (r2 > t03) t03 = r2;
  }
  r2 = x12 - ax;
  if (!dx && r2 < 0) return;
  r2 /= dx;
  if (dx < 0) {
    if (r2 > t13) return;
    if (r2 > t03) t03 = r2;
  } else if (dx > 0) {
    if (r2 < t03) return;
    if (r2 < t13) t13 = r2;
  }
  r2 = y03 - ay;
  if (!dy && r2 > 0) return;
  r2 /= dy;
  if (dy < 0) {
    if (r2 < t03) return;
    if (r2 < t13) t13 = r2;
  } else if (dy > 0) {
    if (r2 > t13) return;
    if (r2 > t03) t03 = r2;
  }
  r2 = y12 - ay;
  if (!dy && r2 < 0) return;
  r2 /= dy;
  if (dy < 0) {
    if (r2 > t13) return;
    if (r2 > t03) t03 = r2;
  } else if (dy > 0) {
    if (r2 < t03) return;
    if (r2 < t13) t13 = r2;
  }
  if (t03 > 0) a2[0] = ax + t03 * dx, a2[1] = ay + t03 * dy;
  if (t13 < 1) b[0] = ax + t13 * dx, b[1] = ay + t13 * dy;
  return true;
}

// node_modules/d3-geo/src/clip/rectangle.js
var clipMax = 1e9;
var clipMin = -clipMax;
function clipRectangle(x03, y03, x12, y12) {
  function visible(x2, y2) {
    return x03 <= x2 && x2 <= x12 && y03 <= y2 && y2 <= y12;
  }
  function interpolate(from, to, direction2, stream) {
    var a2 = 0, a1 = 0;
    if (from == null || (a2 = corner(from, direction2)) !== (a1 = corner(to, direction2)) || comparePoint(from, to) < 0 ^ direction2 > 0) {
      do
        stream.point(a2 === 0 || a2 === 3 ? x03 : x12, a2 > 1 ? y12 : y03);
      while ((a2 = (a2 + direction2 + 4) % 4) !== a1);
    } else {
      stream.point(to[0], to[1]);
    }
  }
  function corner(p2, direction2) {
    return abs(p2[0] - x03) < epsilon ? direction2 > 0 ? 0 : 3 : abs(p2[0] - x12) < epsilon ? direction2 > 0 ? 2 : 1 : abs(p2[1] - y03) < epsilon ? direction2 > 0 ? 1 : 0 : direction2 > 0 ? 3 : 2;
  }
  function compareIntersection2(a2, b) {
    return comparePoint(a2.x, b.x);
  }
  function comparePoint(a2, b) {
    var ca3 = corner(a2, 1), cb = corner(b, 1);
    return ca3 !== cb ? ca3 - cb : ca3 === 0 ? b[1] - a2[1] : ca3 === 1 ? a2[0] - b[0] : ca3 === 2 ? a2[1] - b[1] : b[0] - a2[0];
  }
  return function(stream) {
    var activeStream = stream, bufferStream = buffer_default(), segments, polygon, ring, x__, y__, v__, x_, y_, v_, first, clean;
    var clipStream = {
      point: point2,
      lineStart,
      lineEnd,
      polygonStart,
      polygonEnd
    };
    function point2(x2, y2) {
      if (visible(x2, y2)) activeStream.point(x2, y2);
    }
    function polygonInside() {
      var winding = 0;
      for (var i2 = 0, n2 = polygon.length; i2 < n2; ++i2) {
        for (var ring2 = polygon[i2], j2 = 1, m2 = ring2.length, point3 = ring2[0], a0, a1, b0 = point3[0], b1 = point3[1]; j2 < m2; ++j2) {
          a0 = b0, a1 = b1, point3 = ring2[j2], b0 = point3[0], b1 = point3[1];
          if (a1 <= y12) {
            if (b1 > y12 && (b0 - a0) * (y12 - a1) > (b1 - a1) * (x03 - a0)) ++winding;
          } else {
            if (b1 <= y12 && (b0 - a0) * (y12 - a1) < (b1 - a1) * (x03 - a0)) --winding;
          }
        }
      }
      return winding;
    }
    function polygonStart() {
      activeStream = bufferStream, segments = [], polygon = [], clean = true;
    }
    function polygonEnd() {
      var startInside = polygonInside(), cleanInside = clean && startInside, visible2 = (segments = merge(segments)).length;
      if (cleanInside || visible2) {
        stream.polygonStart();
        if (cleanInside) {
          stream.lineStart();
          interpolate(null, null, 1, stream);
          stream.lineEnd();
        }
        if (visible2) {
          rejoin_default(segments, compareIntersection2, startInside, interpolate, stream);
        }
        stream.polygonEnd();
      }
      activeStream = stream, segments = polygon = ring = null;
    }
    function lineStart() {
      clipStream.point = linePoint2;
      if (polygon) polygon.push(ring = []);
      first = true;
      v_ = false;
      x_ = y_ = NaN;
    }
    function lineEnd() {
      if (segments) {
        linePoint2(x__, y__);
        if (v__ && v_) bufferStream.rejoin();
        segments.push(bufferStream.result());
      }
      clipStream.point = point2;
      if (v_) activeStream.lineEnd();
    }
    function linePoint2(x2, y2) {
      var v3 = visible(x2, y2);
      if (polygon) ring.push([x2, y2]);
      if (first) {
        x__ = x2, y__ = y2, v__ = v3;
        first = false;
        if (v3) {
          activeStream.lineStart();
          activeStream.point(x2, y2);
        }
      } else {
        if (v3 && v_) activeStream.point(x2, y2);
        else {
          var a2 = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))], b = [x2 = Math.max(clipMin, Math.min(clipMax, x2)), y2 = Math.max(clipMin, Math.min(clipMax, y2))];
          if (line_default(a2, b, x03, y03, x12, y12)) {
            if (!v_) {
              activeStream.lineStart();
              activeStream.point(a2[0], a2[1]);
            }
            activeStream.point(b[0], b[1]);
            if (!v3) activeStream.lineEnd();
            clean = false;
          } else if (v3) {
            activeStream.lineStart();
            activeStream.point(x2, y2);
            clean = false;
          }
        }
      }
      x_ = x2, y_ = y2, v_ = v3;
    }
    return clipStream;
  };
}

// node_modules/d3-geo/src/length.js
var lengthSum;
var lambda03;
var sinPhi02;
var cosPhi02;
var lengthStream = {
  sphere: noop,
  point: noop,
  lineStart: lengthLineStart,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop
};
function lengthLineStart() {
  lengthStream.point = lengthPointFirst;
  lengthStream.lineEnd = lengthLineEnd;
}
function lengthLineEnd() {
  lengthStream.point = lengthStream.lineEnd = noop;
}
function lengthPointFirst(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  lambda03 = lambda, sinPhi02 = sin(phi), cosPhi02 = cos(phi);
  lengthStream.point = lengthPoint;
}
function lengthPoint(lambda, phi) {
  lambda *= radians2, phi *= radians2;
  var sinPhi = sin(phi), cosPhi = cos(phi), delta = abs(lambda - lambda03), cosDelta = cos(delta), sinDelta = sin(delta), x2 = cosPhi * sinDelta, y2 = cosPhi02 * sinPhi - sinPhi02 * cosPhi * cosDelta, z2 = sinPhi02 * sinPhi + cosPhi02 * cosPhi * cosDelta;
  lengthSum.add(atan2(sqrt2(x2 * x2 + y2 * y2), z2));
  lambda03 = lambda, sinPhi02 = sinPhi, cosPhi02 = cosPhi;
}
function length_default(object2) {
  lengthSum = new Adder();
  stream_default(object2, lengthStream);
  return +lengthSum;
}

// node_modules/d3-geo/src/distance.js
var coordinates = [null, null];
var object = { type: "LineString", coordinates };
function distance_default(a2, b) {
  coordinates[0] = a2;
  coordinates[1] = b;
  return length_default(object);
}

// node_modules/d3-geo/src/contains.js
var containsObjectType = {
  Feature: function(object2, point2) {
    return containsGeometry(object2.geometry, point2);
  },
  FeatureCollection: function(object2, point2) {
    var features = object2.features, i2 = -1, n2 = features.length;
    while (++i2 < n2) if (containsGeometry(features[i2].geometry, point2)) return true;
    return false;
  }
};
var containsGeometryType = {
  Sphere: function() {
    return true;
  },
  Point: function(object2, point2) {
    return containsPoint(object2.coordinates, point2);
  },
  MultiPoint: function(object2, point2) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) if (containsPoint(coordinates2[i2], point2)) return true;
    return false;
  },
  LineString: function(object2, point2) {
    return containsLine(object2.coordinates, point2);
  },
  MultiLineString: function(object2, point2) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) if (containsLine(coordinates2[i2], point2)) return true;
    return false;
  },
  Polygon: function(object2, point2) {
    return containsPolygon(object2.coordinates, point2);
  },
  MultiPolygon: function(object2, point2) {
    var coordinates2 = object2.coordinates, i2 = -1, n2 = coordinates2.length;
    while (++i2 < n2) if (containsPolygon(coordinates2[i2], point2)) return true;
    return false;
  },
  GeometryCollection: function(object2, point2) {
    var geometries = object2.geometries, i2 = -1, n2 = geometries.length;
    while (++i2 < n2) if (containsGeometry(geometries[i2], point2)) return true;
    return false;
  }
};
function containsGeometry(geometry, point2) {
  return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point2) : false;
}
function containsPoint(coordinates2, point2) {
  return distance_default(coordinates2, point2) === 0;
}
function containsLine(coordinates2, point2) {
  var ao, bo, ab4;
  for (var i2 = 0, n2 = coordinates2.length; i2 < n2; i2++) {
    bo = distance_default(coordinates2[i2], point2);
    if (bo === 0) return true;
    if (i2 > 0) {
      ab4 = distance_default(coordinates2[i2], coordinates2[i2 - 1]);
      if (ab4 > 0 && ao <= ab4 && bo <= ab4 && (ao + bo - ab4) * (1 - Math.pow((ao - bo) / ab4, 2)) < epsilon22 * ab4)
        return true;
    }
    ao = bo;
  }
  return false;
}
function containsPolygon(coordinates2, point2) {
  return !!polygonContains_default(coordinates2.map(ringRadians), pointRadians(point2));
}
function ringRadians(ring) {
  return ring = ring.map(pointRadians), ring.pop(), ring;
}
function pointRadians(point2) {
  return [point2[0] * radians2, point2[1] * radians2];
}
function contains_default(object2, point2) {
  return (object2 && containsObjectType.hasOwnProperty(object2.type) ? containsObjectType[object2.type] : containsGeometry)(object2, point2);
}

// node_modules/d3-geo/src/graticule.js
function graticuleX(y03, y12, dy) {
  var y2 = range(y03, y12 - epsilon, dy).concat(y12);
  return function(x2) {
    return y2.map(function(y3) {
      return [x2, y3];
    });
  };
}
function graticuleY(x03, x12, dx) {
  var x2 = range(x03, x12 - epsilon, dx).concat(x12);
  return function(y2) {
    return x2.map(function(x3) {
      return [x3, y2];
    });
  };
}
function graticule() {
  var x12, x03, X12, X02, y12, y03, Y12, Y02, dx = 10, dy = dx, DX = 90, DY = 360, x2, y2, X, Y, precision = 2.5;
  function graticule2() {
    return { type: "MultiLineString", coordinates: lines() };
  }
  function lines() {
    return range(ceil(X02 / DX) * DX, X12, DX).map(X).concat(range(ceil(Y02 / DY) * DY, Y12, DY).map(Y)).concat(range(ceil(x03 / dx) * dx, x12, dx).filter(function(x3) {
      return abs(x3 % DX) > epsilon;
    }).map(x2)).concat(range(ceil(y03 / dy) * dy, y12, dy).filter(function(y3) {
      return abs(y3 % DY) > epsilon;
    }).map(y2));
  }
  graticule2.lines = function() {
    return lines().map(function(coordinates2) {
      return { type: "LineString", coordinates: coordinates2 };
    });
  };
  graticule2.outline = function() {
    return {
      type: "Polygon",
      coordinates: [
        X(X02).concat(
          Y(Y12).slice(1),
          X(X12).reverse().slice(1),
          Y(Y02).reverse().slice(1)
        )
      ]
    };
  };
  graticule2.extent = function(_2) {
    if (!arguments.length) return graticule2.extentMinor();
    return graticule2.extentMajor(_2).extentMinor(_2);
  };
  graticule2.extentMajor = function(_2) {
    if (!arguments.length) return [[X02, Y02], [X12, Y12]];
    X02 = +_2[0][0], X12 = +_2[1][0];
    Y02 = +_2[0][1], Y12 = +_2[1][1];
    if (X02 > X12) _2 = X02, X02 = X12, X12 = _2;
    if (Y02 > Y12) _2 = Y02, Y02 = Y12, Y12 = _2;
    return graticule2.precision(precision);
  };
  graticule2.extentMinor = function(_2) {
    if (!arguments.length) return [[x03, y03], [x12, y12]];
    x03 = +_2[0][0], x12 = +_2[1][0];
    y03 = +_2[0][1], y12 = +_2[1][1];
    if (x03 > x12) _2 = x03, x03 = x12, x12 = _2;
    if (y03 > y12) _2 = y03, y03 = y12, y12 = _2;
    return graticule2.precision(precision);
  };
  graticule2.step = function(_2) {
    if (!arguments.length) return graticule2.stepMinor();
    return graticule2.stepMajor(_2).stepMinor(_2);
  };
  graticule2.stepMajor = function(_2) {
    if (!arguments.length) return [DX, DY];
    DX = +_2[0], DY = +_2[1];
    return graticule2;
  };
  graticule2.stepMinor = function(_2) {
    if (!arguments.length) return [dx, dy];
    dx = +_2[0], dy = +_2[1];
    return graticule2;
  };
  graticule2.precision = function(_2) {
    if (!arguments.length) return precision;
    precision = +_2;
    x2 = graticuleX(y03, y12, 90);
    y2 = graticuleY(x03, x12, precision);
    X = graticuleX(Y02, Y12, 90);
    Y = graticuleY(X02, X12, precision);
    return graticule2;
  };
  return graticule2.extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]]).extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
}
function graticule10() {
  return graticule()();
}

// node_modules/d3-geo/src/interpolate.js
function interpolate_default(a2, b) {
  var x03 = a2[0] * radians2, y03 = a2[1] * radians2, x12 = b[0] * radians2, y12 = b[1] * radians2, cy0 = cos(y03), sy0 = sin(y03), cy1 = cos(y12), sy1 = sin(y12), kx0 = cy0 * cos(x03), ky0 = cy0 * sin(x03), kx1 = cy1 * cos(x12), ky1 = cy1 * sin(x12), d2 = 2 * asin(sqrt2(haversin(y12 - y03) + cy0 * cy1 * haversin(x12 - x03))), k2 = sin(d2);
  var interpolate = d2 ? function(t4) {
    var B4 = sin(t4 *= d2) / k2, A6 = sin(d2 - t4) / k2, x2 = A6 * kx0 + B4 * kx1, y2 = A6 * ky0 + B4 * ky1, z2 = A6 * sy0 + B4 * sy1;
    return [
      atan2(y2, x2) * degrees3,
      atan2(z2, sqrt2(x2 * x2 + y2 * y2)) * degrees3
    ];
  } : function() {
    return [x03 * degrees3, y03 * degrees3];
  };
  interpolate.distance = d2;
  return interpolate;
}

// node_modules/d3-geo/src/identity.js
var identity_default2 = (x2) => x2;

// node_modules/d3-geo/src/path/area.js
var areaSum2 = new Adder();
var areaRingSum2 = new Adder();

// node_modules/d3-geo/src/path/bounds.js
var x02 = Infinity;
var y02 = x02;
var x1 = -x02;
var y1 = x1;
var boundsStream2 = {
  point: boundsPoint2,
  lineStart: noop,
  lineEnd: noop,
  polygonStart: noop,
  polygonEnd: noop,
  result: function() {
    var bounds = [[x02, y02], [x1, y1]];
    x1 = y1 = -(y02 = x02 = Infinity);
    return bounds;
  }
};
function boundsPoint2(x2, y2) {
  if (x2 < x02) x02 = x2;
  if (x2 > x1) x1 = x2;
  if (y2 < y02) y02 = y2;
  if (y2 > y1) y1 = y2;
}
var bounds_default2 = boundsStream2;

// node_modules/d3-geo/src/path/context.js
function PathContext(context2) {
  this._context = context2;
}
PathContext.prototype = {
  _radius: 4.5,
  pointRadius: function(_2) {
    return this._radius = _2, this;
  },
  polygonStart: function() {
    this._line = 0;
  },
  polygonEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line === 0) this._context.closePath();
    this._point = NaN;
  },
  point: function(x2, y2) {
    switch (this._point) {
      case 0: {
        this._context.moveTo(x2, y2);
        this._point = 1;
        break;
      }
      case 1: {
        this._context.lineTo(x2, y2);
        break;
      }
      default: {
        this._context.moveTo(x2 + this._radius, y2);
        this._context.arc(x2, y2, this._radius, 0, tau);
        break;
      }
    }
  },
  result: noop
};

// node_modules/d3-geo/src/path/measure.js
var lengthSum2 = new Adder();

// node_modules/d3-geo/src/transform.js
function transformer2(methods) {
  return function(stream) {
    var s2 = new TransformStream();
    for (var key in methods) s2[key] = methods[key];
    s2.stream = stream;
    return s2;
  };
}
function TransformStream() {
}
TransformStream.prototype = {
  constructor: TransformStream,
  point: function(x2, y2) {
    this.stream.point(x2, y2);
  },
  sphere: function() {
    this.stream.sphere();
  },
  lineStart: function() {
    this.stream.lineStart();
  },
  lineEnd: function() {
    this.stream.lineEnd();
  },
  polygonStart: function() {
    this.stream.polygonStart();
  },
  polygonEnd: function() {
    this.stream.polygonEnd();
  }
};

// node_modules/d3-geo/src/projection/fit.js
function fit(projection2, fitBounds, object2) {
  var clip = projection2.clipExtent && projection2.clipExtent();
  projection2.scale(150).translate([0, 0]);
  if (clip != null) projection2.clipExtent(null);
  stream_default(object2, projection2.stream(bounds_default2));
  fitBounds(bounds_default2.result());
  if (clip != null) projection2.clipExtent(clip);
  return projection2;
}
function fitExtent(projection2, extent2, object2) {
  return fit(projection2, function(b) {
    var w4 = extent2[1][0] - extent2[0][0], h2 = extent2[1][1] - extent2[0][1], k2 = Math.min(w4 / (b[1][0] - b[0][0]), h2 / (b[1][1] - b[0][1])), x2 = +extent2[0][0] + (w4 - k2 * (b[1][0] + b[0][0])) / 2, y2 = +extent2[0][1] + (h2 - k2 * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k2).translate([x2, y2]);
  }, object2);
}
function fitSize(projection2, size, object2) {
  return fitExtent(projection2, [[0, 0], size], object2);
}
function fitWidth(projection2, width, object2) {
  return fit(projection2, function(b) {
    var w4 = +width, k2 = w4 / (b[1][0] - b[0][0]), x2 = (w4 - k2 * (b[1][0] + b[0][0])) / 2, y2 = -k2 * b[0][1];
    projection2.scale(150 * k2).translate([x2, y2]);
  }, object2);
}
function fitHeight(projection2, height, object2) {
  return fit(projection2, function(b) {
    var h2 = +height, k2 = h2 / (b[1][1] - b[0][1]), x2 = -k2 * b[0][0], y2 = (h2 - k2 * (b[1][1] + b[0][1])) / 2;
    projection2.scale(150 * k2).translate([x2, y2]);
  }, object2);
}

// node_modules/d3-geo/src/projection/resample.js
var maxDepth = 16;
var cosMinDistance = cos(30 * radians2);
function resample_default(project, delta2) {
  return +delta2 ? resample(project, delta2) : resampleNone(project);
}
function resampleNone(project) {
  return transformer2({
    point: function(x2, y2) {
      x2 = project(x2, y2);
      this.stream.point(x2[0], x2[1]);
    }
  });
}
function resample(project, delta2) {
  function resampleLineTo(x03, y03, lambda04, a0, b0, c0, x12, y12, lambda12, a1, b1, c1, depth2, stream) {
    var dx = x12 - x03, dy = y12 - y03, d2 = dx * dx + dy * dy;
    if (d2 > 4 * delta2 && depth2--) {
      var a2 = a0 + a1, b = b0 + b1, c4 = c0 + c1, m2 = sqrt2(a2 * a2 + b * b + c4 * c4), phi2 = asin(c4 /= m2), lambda22 = abs(abs(c4) - 1) < epsilon || abs(lambda04 - lambda12) < epsilon ? (lambda04 + lambda12) / 2 : atan2(b, a2), p2 = project(lambda22, phi2), x2 = p2[0], y2 = p2[1], dx2 = x2 - x03, dy2 = y2 - y03, dz = dy * dx2 - dx * dy2;
      if (dz * dz / d2 > delta2 || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
        resampleLineTo(x03, y03, lambda04, a0, b0, c0, x2, y2, lambda22, a2 /= m2, b /= m2, c4, depth2, stream);
        stream.point(x2, y2);
        resampleLineTo(x2, y2, lambda22, a2, b, c4, x12, y12, lambda12, a1, b1, c1, depth2, stream);
      }
    }
  }
  return function(stream) {
    var lambda004, x00, y00, a00, b00, c00, lambda04, x03, y03, a0, b0, c0;
    var resampleStream = {
      point: point2,
      lineStart,
      lineEnd,
      polygonStart: function() {
        stream.polygonStart();
        resampleStream.lineStart = ringStart;
      },
      polygonEnd: function() {
        stream.polygonEnd();
        resampleStream.lineStart = lineStart;
      }
    };
    function point2(x2, y2) {
      x2 = project(x2, y2);
      stream.point(x2[0], x2[1]);
    }
    function lineStart() {
      x03 = NaN;
      resampleStream.point = linePoint2;
      stream.lineStart();
    }
    function linePoint2(lambda, phi) {
      var c4 = cartesian([lambda, phi]), p2 = project(lambda, phi);
      resampleLineTo(x03, y03, lambda04, a0, b0, c0, x03 = p2[0], y03 = p2[1], lambda04 = lambda, a0 = c4[0], b0 = c4[1], c0 = c4[2], maxDepth, stream);
      stream.point(x03, y03);
    }
    function lineEnd() {
      resampleStream.point = point2;
      stream.lineEnd();
    }
    function ringStart() {
      lineStart();
      resampleStream.point = ringPoint;
      resampleStream.lineEnd = ringEnd;
    }
    function ringPoint(lambda, phi) {
      linePoint2(lambda004 = lambda, phi), x00 = x03, y00 = y03, a00 = a0, b00 = b0, c00 = c0;
      resampleStream.point = linePoint2;
    }
    function ringEnd() {
      resampleLineTo(x03, y03, lambda04, a0, b0, c0, x00, y00, lambda004, a00, b00, c00, maxDepth, stream);
      resampleStream.lineEnd = lineEnd;
      lineEnd();
    }
    return resampleStream;
  };
}

// node_modules/d3-geo/src/projection/index.js
var transformRadians = transformer2({
  point: function(x2, y2) {
    this.stream.point(x2 * radians2, y2 * radians2);
  }
});
function transformRotate(rotate2) {
  return transformer2({
    point: function(x2, y2) {
      var r2 = rotate2(x2, y2);
      return this.stream.point(r2[0], r2[1]);
    }
  });
}
function scaleTranslate(k2, dx, dy, sx, sy) {
  function transform(x2, y2) {
    x2 *= sx;
    y2 *= sy;
    return [dx + k2 * x2, dy - k2 * y2];
  }
  transform.invert = function(x2, y2) {
    return [(x2 - dx) / k2 * sx, (dy - y2) / k2 * sy];
  };
  return transform;
}
function scaleTranslateRotate(k2, dx, dy, sx, sy, alpha) {
  if (!alpha) return scaleTranslate(k2, dx, dy, sx, sy);
  var cosAlpha = cos(alpha), sinAlpha = sin(alpha), a2 = cosAlpha * k2, b = sinAlpha * k2, ai = cosAlpha / k2, bi = sinAlpha / k2, ci = (sinAlpha * dy - cosAlpha * dx) / k2, fi = (sinAlpha * dx + cosAlpha * dy) / k2;
  function transform(x2, y2) {
    x2 *= sx;
    y2 *= sy;
    return [a2 * x2 - b * y2 + dx, dy - b * x2 - a2 * y2];
  }
  transform.invert = function(x2, y2) {
    return [sx * (ai * x2 - bi * y2 + ci), sy * (fi - bi * x2 - ai * y2)];
  };
  return transform;
}
function projection(project) {
  return projectionMutator(function() {
    return project;
  })();
}
function projectionMutator(projectAt) {
  var project, k2 = 150, x2 = 480, y2 = 250, lambda = 0, phi = 0, deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate2, alpha = 0, sx = 1, sy = 1, theta = null, preclip = antimeridian_default, x03 = null, y03, x12, y12, postclip = identity_default2, delta2 = 0.5, projectResample, projectTransform, projectRotateTransform, cache2, cacheStream;
  function projection2(point2) {
    return projectRotateTransform(point2[0] * radians2, point2[1] * radians2);
  }
  function invert(point2) {
    point2 = projectRotateTransform.invert(point2[0], point2[1]);
    return point2 && [point2[0] * degrees3, point2[1] * degrees3];
  }
  projection2.stream = function(stream) {
    return cache2 && cacheStream === stream ? cache2 : cache2 = transformRadians(transformRotate(rotate2)(preclip(projectResample(postclip(cacheStream = stream)))));
  };
  projection2.preclip = function(_2) {
    return arguments.length ? (preclip = _2, theta = void 0, reset()) : preclip;
  };
  projection2.postclip = function(_2) {
    return arguments.length ? (postclip = _2, x03 = y03 = x12 = y12 = null, reset()) : postclip;
  };
  projection2.clipAngle = function(_2) {
    return arguments.length ? (preclip = +_2 ? circle_default(theta = _2 * radians2) : (theta = null, antimeridian_default), reset()) : theta * degrees3;
  };
  projection2.clipExtent = function(_2) {
    return arguments.length ? (postclip = _2 == null ? (x03 = y03 = x12 = y12 = null, identity_default2) : clipRectangle(x03 = +_2[0][0], y03 = +_2[0][1], x12 = +_2[1][0], y12 = +_2[1][1]), reset()) : x03 == null ? null : [[x03, y03], [x12, y12]];
  };
  projection2.scale = function(_2) {
    return arguments.length ? (k2 = +_2, recenter()) : k2;
  };
  projection2.translate = function(_2) {
    return arguments.length ? (x2 = +_2[0], y2 = +_2[1], recenter()) : [x2, y2];
  };
  projection2.center = function(_2) {
    return arguments.length ? (lambda = _2[0] % 360 * radians2, phi = _2[1] % 360 * radians2, recenter()) : [lambda * degrees3, phi * degrees3];
  };
  projection2.rotate = function(_2) {
    return arguments.length ? (deltaLambda = _2[0] % 360 * radians2, deltaPhi = _2[1] % 360 * radians2, deltaGamma = _2.length > 2 ? _2[2] % 360 * radians2 : 0, recenter()) : [deltaLambda * degrees3, deltaPhi * degrees3, deltaGamma * degrees3];
  };
  projection2.angle = function(_2) {
    return arguments.length ? (alpha = _2 % 360 * radians2, recenter()) : alpha * degrees3;
  };
  projection2.reflectX = function(_2) {
    return arguments.length ? (sx = _2 ? -1 : 1, recenter()) : sx < 0;
  };
  projection2.reflectY = function(_2) {
    return arguments.length ? (sy = _2 ? -1 : 1, recenter()) : sy < 0;
  };
  projection2.precision = function(_2) {
    return arguments.length ? (projectResample = resample_default(projectTransform, delta2 = _2 * _2), reset()) : sqrt2(delta2);
  };
  projection2.fitExtent = function(extent2, object2) {
    return fitExtent(projection2, extent2, object2);
  };
  projection2.fitSize = function(size, object2) {
    return fitSize(projection2, size, object2);
  };
  projection2.fitWidth = function(width, object2) {
    return fitWidth(projection2, width, object2);
  };
  projection2.fitHeight = function(height, object2) {
    return fitHeight(projection2, height, object2);
  };
  function recenter() {
    var center = scaleTranslateRotate(k2, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)), transform = scaleTranslateRotate(k2, x2 - center[0], y2 - center[1], sx, sy, alpha);
    rotate2 = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
    projectTransform = compose_default(project, transform);
    projectRotateTransform = compose_default(rotate2, projectTransform);
    projectResample = resample_default(projectTransform, delta2);
    return reset();
  }
  function reset() {
    cache2 = cacheStream = null;
    return projection2;
  }
  return function() {
    project = projectAt.apply(this, arguments);
    projection2.invert = project.invert && invert;
    return recenter();
  };
}

// node_modules/d3-geo/src/projection/azimuthal.js
function azimuthalRaw(scale2) {
  return function(x2, y2) {
    var cx = cos(x2), cy = cos(y2), k2 = scale2(cx * cy);
    if (k2 === Infinity) return [2, 0];
    return [
      k2 * cy * sin(x2),
      k2 * sin(y2)
    ];
  };
}
function azimuthalInvert(angle2) {
  return function(x2, y2) {
    var z2 = sqrt2(x2 * x2 + y2 * y2), c4 = angle2(z2), sc = sin(c4), cc2 = cos(c4);
    return [
      atan2(x2 * sc, z2 * cc2),
      asin(z2 && y2 * sc / z2)
    ];
  };
}

// node_modules/d3-geo/src/projection/azimuthalEqualArea.js
var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
  return sqrt2(2 / (1 + cxcy));
});
azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z2) {
  return 2 * asin(z2 / 2);
});

// node_modules/d3-geo/src/projection/azimuthalEquidistant.js
var azimuthalEquidistantRaw = azimuthalRaw(function(c4) {
  return (c4 = acos(c4)) && c4 / sin(c4);
});
azimuthalEquidistantRaw.invert = azimuthalInvert(function(z2) {
  return z2;
});

// node_modules/d3-geo/src/projection/mercator.js
function mercatorRaw(lambda, phi) {
  return [lambda, log2(tan((halfPi + phi) / 2))];
}
mercatorRaw.invert = function(x2, y2) {
  return [x2, 2 * atan(exp(y2)) - halfPi];
};

// node_modules/d3-geo/src/projection/equirectangular.js
function equirectangularRaw(lambda, phi) {
  return [lambda, phi];
}
equirectangularRaw.invert = equirectangularRaw;

// node_modules/d3-geo/src/projection/equalEarth.js
var A1 = 1.340264;
var A2 = -0.081106;
var A3 = 893e-6;
var A4 = 3796e-6;
var M = sqrt2(3) / 2;
var iterations = 12;
function equalEarthRaw(lambda, phi) {
  var l2 = asin(M * sin(phi)), l22 = l2 * l2, l6 = l22 * l22 * l22;
  return [
    lambda * cos(l2) / (M * (A1 + 3 * A2 * l22 + l6 * (7 * A3 + 9 * A4 * l22))),
    l2 * (A1 + A2 * l22 + l6 * (A3 + A4 * l22))
  ];
}
equalEarthRaw.invert = function(x2, y2) {
  var l2 = y2, l22 = l2 * l2, l6 = l22 * l22 * l22;
  for (var i2 = 0, delta, fy, fpy; i2 < iterations; ++i2) {
    fy = l2 * (A1 + A2 * l22 + l6 * (A3 + A4 * l22)) - y2;
    fpy = A1 + 3 * A2 * l22 + l6 * (7 * A3 + 9 * A4 * l22);
    l2 -= delta = fy / fpy, l22 = l2 * l2, l6 = l22 * l22 * l22;
    if (abs(delta) < epsilon22) break;
  }
  return [
    M * x2 * (A1 + 3 * A2 * l22 + l6 * (7 * A3 + 9 * A4 * l22)) / cos(l2),
    asin(sin(l2) / M)
  ];
};

// node_modules/d3-geo/src/projection/gnomonic.js
function gnomonicRaw(x2, y2) {
  var cy = cos(y2), k2 = cos(x2) * cy;
  return [cy * sin(x2) / k2, sin(y2) / k2];
}
gnomonicRaw.invert = azimuthalInvert(atan);

// node_modules/d3-geo/src/projection/naturalEarth1.js
function naturalEarth1Raw(lambda, phi) {
  var phi2 = phi * phi, phi4 = phi2 * phi2;
  return [
    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (3971e-6 * phi2 - 1529e-6 * phi4))),
    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4)))
  ];
}
naturalEarth1Raw.invert = function(x2, y2) {
  var phi = y2, i2 = 25, delta;
  do {
    var phi2 = phi * phi, phi4 = phi2 * phi2;
    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 5916e-6 * phi4))) - y2) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 5916e-6 * 11 * phi4)));
  } while (abs(delta) > epsilon && --i2 > 0);
  return [
    x2 / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (3971e-6 - 1529e-6 * phi2)))),
    phi
  ];
};

// node_modules/d3-geo/src/projection/orthographic.js
function orthographicRaw(x2, y2) {
  return [cos(y2) * sin(x2), sin(y2)];
}
orthographicRaw.invert = azimuthalInvert(asin);

// node_modules/d3-geo/src/projection/stereographic.js
function stereographicRaw(x2, y2) {
  var cy = cos(y2), k2 = 1 + cos(x2) * cy;
  return [cy * sin(x2) / k2, sin(y2) / k2];
}
stereographicRaw.invert = azimuthalInvert(function(z2) {
  return 2 * atan(z2);
});
function stereographic_default() {
  return projection(stereographicRaw).scale(250).clipAngle(142);
}

// node_modules/d3-geo/src/projection/transverseMercator.js
function transverseMercatorRaw(lambda, phi) {
  return [log2(tan((halfPi + phi) / 2)), -lambda];
}
transverseMercatorRaw.invert = function(x2, y2) {
  return [-y2, 2 * atan(exp(x2)) - halfPi];
};

// node_modules/three-slippy-map-globe/dist/three-slippy-map-globe.mjs
function _arrayLikeToArray4(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles4(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles3(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray4(r2);
}
function _assertClassBrand(e3, t4, n2) {
  if ("function" == typeof e3 ? e3 === t4 : e3.has(t4)) return arguments.length < 3 ? t4 : n2;
  throw new TypeError("Private element is not present on this object");
}
function _assertThisInitialized(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}
function _callSuper(t4, o2, e3) {
  return o2 = _getPrototypeOf(o2), _possibleConstructorReturn(t4, _isNativeReflectConstruct() ? Reflect.construct(o2, [], _getPrototypeOf(t4).constructor) : o2.apply(t4, e3));
}
function _checkPrivateRedeclaration(e3, t4) {
  if (t4.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck2(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet2(s2, a2) {
  return s2.get(_assertClassBrand(s2, a2));
}
function _classPrivateFieldInitSpec(e3, t4, a2) {
  _checkPrivateRedeclaration(e3, t4), t4.set(e3, a2);
}
function _classPrivateFieldSet2(s2, a2, r2) {
  return s2.set(_assertClassBrand(s2, a2), r2), r2;
}
function _classPrivateMethodInitSpec(e3, a2) {
  _checkPrivateRedeclaration(e3, a2), a2.add(e3);
}
function _defineProperties(e3, r2) {
  for (var t4 = 0; t4 < r2.length; t4++) {
    var o2 = r2[t4];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, _toPropertyKey2(o2.key), o2);
  }
}
function _createClass2(e3, r2, t4) {
  return _defineProperties(e3.prototype, r2), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}
function _defineProperty2(e3, r2, t4) {
  return (r2 = _toPropertyKey2(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t4,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t4, e3;
}
function _getPrototypeOf(t4) {
  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t5) {
    return t5.__proto__ || Object.getPrototypeOf(t5);
  }, _getPrototypeOf(t4);
}
function _inherits(t4, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t4.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t4,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t4, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf(t4, e3);
}
function _isNativeReflectConstruct() {
  try {
    var t4 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t5) {
  }
  return (_isNativeReflectConstruct = function() {
    return !!t4;
  })();
}
function _iterableToArray3(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit4(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest4() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread3() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn(t4, e3) {
  if (e3 && ("object" == typeof e3 || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized(t4);
}
function _setPrototypeOf(t4, e3) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t5, e4) {
    return t5.__proto__ = e4, t5;
  }, _setPrototypeOf(t4, e3);
}
function _slicedToArray4(r2, e3) {
  return _arrayWithHoles4(r2) || _iterableToArrayLimit4(r2, e3) || _unsupportedIterableToArray4(r2, e3) || _nonIterableRest4();
}
function _toConsumableArray3(r2) {
  return _arrayWithoutHoles3(r2) || _iterableToArray3(r2) || _unsupportedIterableToArray4(r2) || _nonIterableSpread3();
}
function _toPrimitive2(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t4);
}
function _toPropertyKey2(t4) {
  var i2 = _toPrimitive2(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray4(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray4(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray4(r2, a2) : void 0;
  }
}
var _materialDispose = function materialDispose(material) {
  if (material instanceof Array) {
    material.forEach(_materialDispose);
  } else {
    if (material.map) {
      material.map.dispose();
    }
    material.dispose();
  }
};
var _deallocate = function deallocate(obj) {
  if (obj.geometry) {
    obj.geometry.dispose();
  }
  if (obj.material) {
    _materialDispose(obj.material);
  }
  if (obj.texture) {
    obj.texture.dispose();
  }
  if (obj.children) {
    obj.children.forEach(_deallocate);
  }
};
var emptyObject = function emptyObject2(obj) {
  if (obj && obj.children) while (obj.children.length) {
    var childObj = obj.children[0];
    obj.remove(childObj);
    _deallocate(childObj);
  }
};
function polar2Cartesian(lat, lng, r2) {
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return {
    x: r2 * Math.sin(phi) * Math.cos(theta),
    y: r2 * Math.cos(phi),
    z: r2 * Math.sin(phi) * Math.sin(theta)
  };
}
function cartesian2Polar(_ref) {
  var x2 = _ref.x, y2 = _ref.y, z2 = _ref.z;
  var r2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
  var phi = Math.acos(y2 / r2);
  var theta = Math.atan2(z2, x2);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    // keep within [-180, 180] boundaries
    r: r2
  };
}
function deg2Rad(deg) {
  return deg * Math.PI / 180;
}
var yMercatorScale = function yMercatorScale2(y2) {
  return 1 - (mercatorRaw(0, (0.5 - y2) * Math.PI)[1] / Math.PI + 1) / 2;
};
var yMercatorScaleClamped = function yMercatorScaleClamped2(y2) {
  return Math.max(0, Math.min(1, yMercatorScale(y2)));
};
var yMercatorScaleInvert = function yMercatorScaleInvert2(y2) {
  return 0.5 - mercatorRaw.invert(0, (2 * (1 - y2) - 1) * Math.PI)[1] / Math.PI;
};
var convertMercatorUV = function convertMercatorUV2(uvs) {
  var y03 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var y12 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
  var offsetScale = linear2().domain([1, 0]).range([y03, y12]).clamp(true);
  var revOffsetScale = linear2().domain([yMercatorScaleClamped(y03), yMercatorScaleClamped(y12)]).range([1, 0]).clamp(true);
  var scale2 = function scale3(v3) {
    return revOffsetScale(yMercatorScaleClamped(offsetScale(v3)));
  };
  var arr = uvs.array;
  for (var i2 = 0, len = arr.length; i2 < len; i2 += 2) {
    arr[i2 + 1] = scale2(arr[i2 + 1]);
  }
  uvs.needsUpdate = true;
};
var findTileXY = function findTileXY2(level, isMercator, lng, lat) {
  var gridSize = Math.pow(2, level);
  var x2 = Math.max(0, Math.min(gridSize - 1, Math.floor((lng + 180) * gridSize / 360)));
  var relY = (90 - lat) / 180;
  isMercator && (relY = Math.max(0, Math.min(1, yMercatorScale(relY))));
  var y2 = Math.floor(relY * gridSize);
  return [x2, y2];
};
var genTilesCoords = function genTilesCoords2(level, isMercator) {
  var x03 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var y03 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
  var _x1 = arguments.length > 4 ? arguments[4] : void 0;
  var _y1 = arguments.length > 5 ? arguments[5] : void 0;
  var tiles = [];
  var gridSize = Math.pow(2, level);
  var tileLngLen = 360 / gridSize;
  var regTileLatLen = 180 / gridSize;
  var x12 = _x1 === void 0 ? gridSize - 1 : _x1;
  var y12 = _y1 === void 0 ? gridSize - 1 : _y1;
  for (var x2 = x03, maxX = Math.min(gridSize - 1, x12); x2 <= maxX; x2++) {
    for (var y2 = y03, maxY = Math.min(gridSize - 1, y12); y2 <= maxY; y2++) {
      var reproY = y2, tileLatLen = regTileLatLen;
      if (isMercator) {
        reproY = y2 === 0 ? y2 : yMercatorScaleInvert(y2 / gridSize) * gridSize;
        var reproYEnd = y2 + 1 === gridSize ? y2 + 1 : yMercatorScaleInvert((y2 + 1) / gridSize) * gridSize;
        tileLatLen = (reproYEnd - reproY) * 180 / gridSize;
      }
      var lng = -180 + (x2 + 0.5) * tileLngLen;
      var lat = 90 - (reproY * 180 / gridSize + tileLatLen / 2);
      var latLen = tileLatLen;
      tiles.push({
        x: x2,
        y: y2,
        lng,
        lat,
        latLen
      });
    }
  }
  return tiles;
};
var MAX_LEVEL_TO_RENDER_ALL_TILES = 6;
var MAX_LEVEL_TO_BUILD_LOOKUP_OCTREE = 7;
var TILE_SEARCH_RADIUS_CAMERA_DISTANCE = 3;
var TILE_SEARCH_RADIUS_SURFACE_DISTANCE = 90;
var _radius = /* @__PURE__ */ new WeakMap();
var _isMercator = /* @__PURE__ */ new WeakMap();
var _tileUrl = /* @__PURE__ */ new WeakMap();
var _level = /* @__PURE__ */ new WeakMap();
var _tilesMeta = /* @__PURE__ */ new WeakMap();
var _isInView = /* @__PURE__ */ new WeakMap();
var _camera2 = /* @__PURE__ */ new WeakMap();
var _innerBackLayer = /* @__PURE__ */ new WeakMap();
var _ThreeSlippyMapGlobe_brand = /* @__PURE__ */ new WeakSet();
var ThreeSlippyMapGlobe = function(_Group) {
  function ThreeSlippyMapGlobe2(radius) {
    var _this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, tileUrl = _ref.tileUrl, _ref$minLevel = _ref.minLevel, minLevel = _ref$minLevel === void 0 ? 0 : _ref$minLevel, _ref$maxLevel = _ref.maxLevel, maxLevel = _ref$maxLevel === void 0 ? 17 : _ref$maxLevel, _ref$mercatorProjecti = _ref.mercatorProjection, mercatorProjection2 = _ref$mercatorProjecti === void 0 ? true : _ref$mercatorProjecti;
    _classCallCheck2(this, ThreeSlippyMapGlobe2);
    _this = _callSuper(this, ThreeSlippyMapGlobe2);
    _classPrivateMethodInitSpec(_this, _ThreeSlippyMapGlobe_brand);
    _classPrivateFieldInitSpec(_this, _radius, void 0);
    _classPrivateFieldInitSpec(_this, _isMercator, void 0);
    _classPrivateFieldInitSpec(_this, _tileUrl, void 0);
    _classPrivateFieldInitSpec(_this, _level, void 0);
    _classPrivateFieldInitSpec(_this, _tilesMeta, {});
    _classPrivateFieldInitSpec(_this, _isInView, void 0);
    _classPrivateFieldInitSpec(_this, _camera2, void 0);
    _classPrivateFieldInitSpec(_this, _innerBackLayer, void 0);
    _defineProperty2(_this, "minLevel", void 0);
    _defineProperty2(_this, "maxLevel", void 0);
    _defineProperty2(_this, "thresholds", _toConsumableArray3(new Array(30)).map(function(_2, idx) {
      return 8 / Math.pow(2, idx);
    }));
    _defineProperty2(_this, "curvatureResolution", 5);
    _defineProperty2(_this, "tileMargin", 0);
    _defineProperty2(_this, "clearTiles", function() {
      Object.values(_classPrivateFieldGet2(_tilesMeta, _this)).forEach(function(l2) {
        l2.forEach(function(d2) {
          if (d2.obj) {
            _this.remove(d2.obj);
            emptyObject(d2.obj);
            delete d2.obj;
          }
        });
      });
      _classPrivateFieldSet2(_tilesMeta, _this, {});
    });
    _classPrivateFieldSet2(_radius, _this, radius);
    _this.tileUrl = tileUrl;
    _classPrivateFieldSet2(_isMercator, _this, mercatorProjection2);
    _this.minLevel = minLevel;
    _this.maxLevel = maxLevel;
    _this.level = 0;
    _this.add(_classPrivateFieldSet2(_innerBackLayer, _this, new Mesh(new SphereGeometry(_classPrivateFieldGet2(_radius, _this) * 0.99, 180, 90), new MeshBasicMaterial({
      color: 0
    }))));
    _classPrivateFieldGet2(_innerBackLayer, _this).visible = false;
    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffset = true;
    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffsetUnits = 3;
    _classPrivateFieldGet2(_innerBackLayer, _this).material.polygonOffsetFactor = 1;
    return _this;
  }
  _inherits(ThreeSlippyMapGlobe2, _Group);
  return _createClass2(ThreeSlippyMapGlobe2, [{
    key: "tileUrl",
    get: (
      // Public attributes
      function get() {
        return _classPrivateFieldGet2(_tileUrl, this);
      }
    ),
    set: function set(tileUrl) {
      _classPrivateFieldSet2(_tileUrl, this, tileUrl);
      this.updatePov(_classPrivateFieldGet2(_camera2, this));
    }
  }, {
    key: "level",
    get: function get() {
      return _classPrivateFieldGet2(_level, this);
    },
    set: function set(level) {
      var _this2 = this;
      if (!_classPrivateFieldGet2(_tilesMeta, this)[level]) _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _buildMetaLevel).call(this, level);
      var prevLevel = _classPrivateFieldGet2(_level, this);
      _classPrivateFieldSet2(_level, this, level);
      if (level === prevLevel || prevLevel === void 0) return;
      _classPrivateFieldGet2(_innerBackLayer, this).visible = level > 0;
      _classPrivateFieldGet2(_tilesMeta, this)[level].forEach(function(d2) {
        return d2.obj && (d2.obj.material.depthWrite = true);
      });
      prevLevel < level && _classPrivateFieldGet2(_tilesMeta, this)[prevLevel].forEach(function(d2) {
        return d2.obj && (d2.obj.material.depthWrite = false);
      });
      if (prevLevel > level) {
        for (var l2 = level + 1; l2 <= prevLevel; l2++) {
          _classPrivateFieldGet2(_tilesMeta, this)[l2] && _classPrivateFieldGet2(_tilesMeta, this)[l2].forEach(function(d2) {
            if (d2.obj) {
              _this2.remove(d2.obj);
              emptyObject(d2.obj);
              delete d2.obj;
            }
          });
        }
      }
      _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _fetchNeededTiles).call(this);
    }
    // Public methods
  }, {
    key: "updatePov",
    value: function updatePov(camera3) {
      var _this3 = this;
      if (!camera3 || !(camera3 instanceof Camera)) return;
      _classPrivateFieldSet2(_camera2, this, camera3);
      var frustum;
      _classPrivateFieldSet2(_isInView, this, function(d2) {
        if (!d2.hullPnts) {
          var lngLen = 360 / Math.pow(2, _this3.level);
          var lng = d2.lng, lat = d2.lat, latLen = d2.latLen;
          var lng0 = lng - lngLen / 2;
          var lng1 = lng + lngLen / 2;
          var lat0 = lat - latLen / 2;
          var lat1 = lat + latLen / 2;
          d2.hullPnts = [[lat, lng], [lat0, lng0], [lat1, lng0], [lat0, lng1], [lat1, lng1]].map(function(_ref2) {
            var _ref3 = _slicedToArray4(_ref2, 2), lat2 = _ref3[0], lng2 = _ref3[1];
            return polar2Cartesian(lat2, lng2, _classPrivateFieldGet2(_radius, _this3));
          }).map(function(_ref4) {
            var x2 = _ref4.x, y2 = _ref4.y, z2 = _ref4.z;
            return new Vector3(x2, y2, z2);
          });
        }
        if (!frustum) {
          frustum = new Frustum();
          camera3.updateMatrix();
          camera3.updateMatrixWorld();
          frustum.setFromProjectionMatrix(new Matrix4().multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse));
        }
        return d2.hullPnts.some(function(pos) {
          return frustum.containsPoint(pos.clone().applyMatrix4(_this3.matrixWorld));
        });
      });
      if (this.tileUrl) {
        var pov = camera3.position.clone();
        var distToGlobeCenter = pov.distanceTo(this.getWorldPosition(new Vector3()));
        var cameraDistance = (distToGlobeCenter - _classPrivateFieldGet2(_radius, this)) / _classPrivateFieldGet2(_radius, this);
        var idx = this.thresholds.findIndex(function(t4) {
          return t4 && t4 <= cameraDistance;
        });
        this.level = Math.min(this.maxLevel, Math.max(this.minLevel, idx < 0 ? this.thresholds.length : idx));
        _assertClassBrand(_ThreeSlippyMapGlobe_brand, this, _fetchNeededTiles).call(this);
      }
    }
  }]);
}(Group);
function _buildMetaLevel(level) {
  var _this4 = this;
  if (level > MAX_LEVEL_TO_BUILD_LOOKUP_OCTREE) {
    _classPrivateFieldGet2(_tilesMeta, this)[level] = [];
    return;
  }
  var levelMeta = _classPrivateFieldGet2(_tilesMeta, this)[level] = genTilesCoords(level, _classPrivateFieldGet2(_isMercator, this));
  levelMeta.forEach(function(d2) {
    return d2.centroid = polar2Cartesian(d2.lat, d2.lng, _classPrivateFieldGet2(_radius, _this4));
  });
  levelMeta.octree = octree().x(function(d2) {
    return d2.centroid.x;
  }).y(function(d2) {
    return d2.centroid.y;
  }).z(function(d2) {
    return d2.centroid.z;
  }).addAll(levelMeta);
}
function _fetchNeededTiles() {
  var _this5 = this;
  if (!this.tileUrl || this.level === void 0 || !_classPrivateFieldGet2(_tilesMeta, this).hasOwnProperty(this.level)) return;
  if (!_classPrivateFieldGet2(_isInView, this) && this.level > MAX_LEVEL_TO_RENDER_ALL_TILES) return;
  var tiles = _classPrivateFieldGet2(_tilesMeta, this)[this.level];
  if (_classPrivateFieldGet2(_camera2, this)) {
    var povPos = this.worldToLocal(_classPrivateFieldGet2(_camera2, this).position.clone());
    if (tiles.octree) {
      var _tiles$octree;
      var _povPos = this.worldToLocal(_classPrivateFieldGet2(_camera2, this).position.clone());
      var searchRadius = (_povPos.length() - _classPrivateFieldGet2(_radius, this)) * TILE_SEARCH_RADIUS_CAMERA_DISTANCE;
      tiles = (_tiles$octree = tiles.octree).findAllWithinRadius.apply(_tiles$octree, _toConsumableArray3(_povPos).concat([searchRadius]));
    } else {
      var povCoords = cartesian2Polar(povPos);
      var searchRadiusLat = (povCoords.r / _classPrivateFieldGet2(_radius, this) - 1) * TILE_SEARCH_RADIUS_SURFACE_DISTANCE;
      var searchRadiusLng = searchRadiusLat / Math.cos(deg2Rad(povCoords.lat));
      var lngRange = [povCoords.lng - searchRadiusLng, povCoords.lng + searchRadiusLng];
      var latRange = [povCoords.lat + searchRadiusLat, povCoords.lat - searchRadiusLat];
      var _findTileXY = findTileXY(this.level, _classPrivateFieldGet2(_isMercator, this), lngRange[0], latRange[0]), _findTileXY2 = _slicedToArray4(_findTileXY, 2), x03 = _findTileXY2[0], y03 = _findTileXY2[1];
      var _findTileXY3 = findTileXY(this.level, _classPrivateFieldGet2(_isMercator, this), lngRange[1], latRange[1]), _findTileXY4 = _slicedToArray4(_findTileXY3, 2), x12 = _findTileXY4[0], y12 = _findTileXY4[1];
      !tiles.record && (tiles.record = {});
      var r2 = tiles.record;
      if (!r2.hasOwnProperty("".concat(Math.round((x03 + x12) / 2), "_").concat(Math.round((y03 + y12) / 2)))) {
        tiles = genTilesCoords(this.level, _classPrivateFieldGet2(_isMercator, this), x03, y03, x12, y12).map(function(d2) {
          var k3 = "".concat(d2.x, "_").concat(d2.y);
          if (r2.hasOwnProperty(k3)) return r2[k3];
          r2[k3] = d2;
          tiles.push(d2);
          return d2;
        });
      } else {
        var selTiles = [];
        for (var x2 = x03; x2 <= x12; x2++) {
          for (var y2 = y03; y2 <= y12; y2++) {
            var k2 = "".concat(x2, "_").concat(y2);
            if (!r2.hasOwnProperty(k2)) {
              r2[k2] = genTilesCoords(this.level, _classPrivateFieldGet2(_isMercator, this), x2, y2, x2, y2)[0];
              tiles.push(r2[k2]);
            }
            selTiles.push(r2[k2]);
          }
        }
        tiles = selTiles;
      }
    }
  }
  tiles.filter(function(d2) {
    return !d2.obj;
  }).filter(_classPrivateFieldGet2(_isInView, this) || function() {
    return true;
  }).forEach(function(d2) {
    var x3 = d2.x, y3 = d2.y, lng = d2.lng, lat = d2.lat, latLen = d2.latLen;
    var lngLen = 360 / Math.pow(2, _this5.level);
    if (!d2.obj) {
      var width = lngLen * (1 - _this5.tileMargin);
      var height = latLen * (1 - _this5.tileMargin);
      var rotLng = deg2Rad(lng);
      var rotLat = deg2Rad(-lat);
      var tile = new Mesh(new SphereGeometry(_classPrivateFieldGet2(_radius, _this5), Math.ceil(width / _this5.curvatureResolution), Math.ceil(height / _this5.curvatureResolution), deg2Rad(90 - width / 2) + rotLng, deg2Rad(width), deg2Rad(90 - height / 2) + rotLat, deg2Rad(height)), new MeshLambertMaterial());
      if (_classPrivateFieldGet2(_isMercator, _this5)) {
        var _map = [lat + latLen / 2, lat - latLen / 2].map(function(lat2) {
          return 0.5 - lat2 / 180;
        }), _map2 = _slicedToArray4(_map, 2), _y3 = _map2[0], _y22 = _map2[1];
        convertMercatorUV(tile.geometry.attributes.uv, _y3, _y22);
      }
      d2.obj = tile;
    }
    if (!d2.loading) {
      d2.loading = true;
      new TextureLoader().load(_this5.tileUrl(x3, y3, _this5.level), function(texture2) {
        var tile2 = d2.obj;
        if (tile2) {
          texture2.colorSpace = SRGBColorSpace;
          tile2.material.map = texture2;
          tile2.material.color = null;
          tile2.material.needsUpdate = true;
          _this5.add(tile2);
        }
        d2.loading = false;
      });
    }
  });
}

// node_modules/earcut/src/earcut.js
function earcut(data, holeIndices, dim = 2) {
  const hasHoles = holeIndices && holeIndices.length;
  const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
  let outerNode = linkedList2(data, 0, outerLen, dim, true);
  const triangles = [];
  if (!outerNode || outerNode.next === outerNode.prev) return triangles;
  let minX, minY, invSize;
  if (hasHoles) outerNode = eliminateHoles2(data, holeIndices, outerNode, dim);
  if (data.length > 80 * dim) {
    minX = data[0];
    minY = data[1];
    let maxX = minX;
    let maxY = minY;
    for (let i2 = dim; i2 < outerLen; i2 += dim) {
      const x2 = data[i2];
      const y2 = data[i2 + 1];
      if (x2 < minX) minX = x2;
      if (y2 < minY) minY = y2;
      if (x2 > maxX) maxX = x2;
      if (y2 > maxY) maxY = y2;
    }
    invSize = Math.max(maxX - minX, maxY - minY);
    invSize = invSize !== 0 ? 32767 / invSize : 0;
  }
  earcutLinked2(outerNode, triangles, dim, minX, minY, invSize, 0);
  return triangles;
}
function linkedList2(data, start, end, dim, clockwise) {
  let last;
  if (clockwise === signedArea2(data, start, end, dim) > 0) {
    for (let i2 = start; i2 < end; i2 += dim) last = insertNode2(i2 / dim | 0, data[i2], data[i2 + 1], last);
  } else {
    for (let i2 = end - dim; i2 >= start; i2 -= dim) last = insertNode2(i2 / dim | 0, data[i2], data[i2 + 1], last);
  }
  if (last && equals2(last, last.next)) {
    removeNode2(last);
    last = last.next;
  }
  return last;
}
function filterPoints2(start, end) {
  if (!start) return start;
  if (!end) end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals2(p2, p2.next) || area2(p2.prev, p2, p2.next) === 0)) {
      removeNode2(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next) break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked2(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return;
  if (!pass && invSize) indexCurve2(ear, minX, minY, invSize);
  let stop = ear;
  while (ear.prev !== ear.next) {
    const prev = ear.prev;
    const next = ear.next;
    if (invSize ? isEarHashed2(ear, minX, minY, invSize) : isEar2(ear)) {
      triangles.push(prev.i, ear.i, next.i);
      removeNode2(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked2(filterPoints2(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections2(filterPoints2(ear), triangles);
        earcutLinked2(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut2(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar2(ear) {
  const a2 = ear.prev, b = ear, c4 = ear.next;
  if (area2(a2, b, c4) >= 0) return false;
  const ax = a2.x, bx = b.x, cx = c4.x, ay = a2.y, by = b.y, cy = c4.y;
  const x03 = Math.min(ax, bx, cx), y03 = Math.min(ay, by, cy), x12 = Math.max(ax, bx, cx), y12 = Math.max(ay, by, cy);
  let p2 = c4.next;
  while (p2 !== a2) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area2(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed2(ear, minX, minY, invSize) {
  const a2 = ear.prev, b = ear, c4 = ear.next;
  if (area2(a2, b, c4) >= 0) return false;
  const ax = a2.x, bx = b.x, cx = c4.x, ay = a2.y, by = b.y, cy = c4.y;
  const x03 = Math.min(ax, bx, cx), y03 = Math.min(ay, by, cy), x12 = Math.max(ax, bx, cx), y12 = Math.max(ay, by, cy);
  const minZ = zOrder2(x03, y03, minX, minY, invSize), maxZ = zOrder2(x12, y12, minX, minY, invSize);
  let p2 = ear.prevZ, n2 = ear.nextZ;
  while (p2 && p2.z >= minZ && n2 && n2.z <= maxZ) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && p2 !== a2 && p2 !== c4 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area2(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
    if (n2.x >= x03 && n2.x <= x12 && n2.y >= y03 && n2.y <= y12 && n2 !== a2 && n2 !== c4 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area2(n2.prev, n2, n2.next) >= 0) return false;
    n2 = n2.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && p2 !== a2 && p2 !== c4 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area2(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
  }
  while (n2 && n2.z <= maxZ) {
    if (n2.x >= x03 && n2.x <= x12 && n2.y >= y03 && n2.y <= y12 && n2 !== a2 && n2 !== c4 && pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area2(n2.prev, n2, n2.next) >= 0) return false;
    n2 = n2.nextZ;
  }
  return true;
}
function cureLocalIntersections2(start, triangles) {
  let p2 = start;
  do {
    const a2 = p2.prev, b = p2.next.next;
    if (!equals2(a2, b) && intersects2(a2, p2, p2.next, b) && locallyInside2(a2, b) && locallyInside2(b, a2)) {
      triangles.push(a2.i, p2.i, b.i);
      removeNode2(p2);
      removeNode2(p2.next);
      p2 = start = b;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints2(p2);
}
function splitEarcut2(start, triangles, dim, minX, minY, invSize) {
  let a2 = start;
  do {
    let b = a2.next.next;
    while (b !== a2.prev) {
      if (a2.i !== b.i && isValidDiagonal2(a2, b)) {
        let c4 = splitPolygon2(a2, b);
        a2 = filterPoints2(a2, a2.next);
        c4 = filterPoints2(c4, c4.next);
        earcutLinked2(a2, triangles, dim, minX, minY, invSize, 0);
        earcutLinked2(c4, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a2 = a2.next;
  } while (a2 !== start);
}
function eliminateHoles2(data, holeIndices, outerNode, dim) {
  const queue = [];
  for (let i2 = 0, len = holeIndices.length; i2 < len; i2++) {
    const start = holeIndices[i2] * dim;
    const end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
    const list = linkedList2(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost2(list));
  }
  queue.sort(compareXYSlope);
  for (let i2 = 0; i2 < queue.length; i2++) {
    outerNode = eliminateHole2(queue[i2], outerNode);
  }
  return outerNode;
}
function compareXYSlope(a2, b) {
  let result = a2.x - b.x;
  if (result === 0) {
    result = a2.y - b.y;
    if (result === 0) {
      const aSlope = (a2.next.y - a2.y) / (a2.next.x - a2.x);
      const bSlope = (b.next.y - b.y) / (b.next.x - b.x);
      result = aSlope - bSlope;
    }
  }
  return result;
}
function eliminateHole2(hole, outerNode) {
  const bridge = findHoleBridge2(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon2(bridge, hole);
  filterPoints2(bridgeReverse, bridgeReverse.next);
  return filterPoints2(bridge, bridge.next);
}
function findHoleBridge2(hole, outerNode) {
  let p2 = outerNode;
  const hx = hole.x;
  const hy = hole.y;
  let qx = -Infinity;
  let m2;
  if (equals2(hole, p2)) return p2;
  do {
    if (equals2(hole, p2.next)) return p2.next;
    else if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x2 = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x2 <= hx && x2 > qx) {
        qx = x2;
        m2 = p2.x < p2.next.x ? p2 : p2.next;
        if (x2 === hx) return m2;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m2) return null;
  const stop = m2;
  const mx = m2.x;
  const my = m2.y;
  let tanMin = Infinity;
  p2 = m2;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle2(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      const tan3 = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside2(p2, hole) && (tan3 < tanMin || tan3 === tanMin && (p2.x > m2.x || p2.x === m2.x && sectorContainsSector2(m2, p2)))) {
        m2 = p2;
        tanMin = tan3;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m2;
}
function sectorContainsSector2(m2, p2) {
  return area2(m2.prev, m2, p2.prev) < 0 && area2(p2.next, m2, m2.next) < 0;
}
function indexCurve2(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === 0) p2.z = zOrder2(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked2(p2);
}
function sortLinked2(list) {
  let numMerges;
  let inSize = 1;
  do {
    let p2 = list;
    let e3;
    list = null;
    let tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      let q2 = p2;
      let pSize = 0;
      for (let i2 = 0; i2 < inSize; i2++) {
        pSize++;
        q2 = q2.nextZ;
        if (!q2) break;
      }
      let qSize = inSize;
      while (pSize > 0 || qSize > 0 && q2) {
        if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
          e3 = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e3 = q2;
          q2 = q2.nextZ;
          qSize--;
        }
        if (tail) tail.nextZ = e3;
        else list = e3;
        e3.prevZ = tail;
        tail = e3;
      }
      p2 = q2;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder2(x2, y2, minX, minY, invSize) {
  x2 = (x2 - minX) * invSize | 0;
  y2 = (y2 - minY) * invSize | 0;
  x2 = (x2 | x2 << 8) & 16711935;
  x2 = (x2 | x2 << 4) & 252645135;
  x2 = (x2 | x2 << 2) & 858993459;
  x2 = (x2 | x2 << 1) & 1431655765;
  y2 = (y2 | y2 << 8) & 16711935;
  y2 = (y2 | y2 << 4) & 252645135;
  y2 = (y2 | y2 << 2) & 858993459;
  y2 = (y2 | y2 << 1) & 1431655765;
  return x2 | y2 << 1;
}
function getLeftmost2(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y) leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle2(ax, ay, bx, by, cx, cy, px3, py3) {
  return (cx - px3) * (ay - py3) >= (ax - px3) * (cy - py3) && (ax - px3) * (by - py3) >= (bx - px3) * (ay - py3) && (bx - px3) * (cy - py3) >= (cx - px3) * (by - py3);
}
function pointInTriangleExceptFirst(ax, ay, bx, by, cx, cy, px3, py3) {
  return !(ax === px3 && ay === py3) && pointInTriangle2(ax, ay, bx, by, cx, cy, px3, py3);
}
function isValidDiagonal2(a2, b) {
  return a2.next.i !== b.i && a2.prev.i !== b.i && !intersectsPolygon2(a2, b) && // doesn't intersect other edges
  (locallyInside2(a2, b) && locallyInside2(b, a2) && middleInside2(a2, b) && // locally visible
  (area2(a2.prev, a2, b.prev) || area2(a2, b.prev, b)) || // does not create opposite-facing sectors
  equals2(a2, b) && area2(a2.prev, a2, a2.next) > 0 && area2(b.prev, b, b.next) > 0);
}
function area2(p2, q2, r2) {
  return (q2.y - p2.y) * (r2.x - q2.x) - (q2.x - p2.x) * (r2.y - q2.y);
}
function equals2(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects2(p1, q1, p2, q2) {
  const o1 = sign3(area2(p1, q1, p2));
  const o2 = sign3(area2(p1, q1, q2));
  const o3 = sign3(area2(p2, q2, p1));
  const o4 = sign3(area2(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true;
  if (o1 === 0 && onSegment2(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment2(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment2(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment2(p2, q1, q2)) return true;
  return false;
}
function onSegment2(p2, q2, r2) {
  return q2.x <= Math.max(p2.x, r2.x) && q2.x >= Math.min(p2.x, r2.x) && q2.y <= Math.max(p2.y, r2.y) && q2.y >= Math.min(p2.y, r2.y);
}
function sign3(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon2(a2, b) {
  let p2 = a2;
  do {
    if (p2.i !== a2.i && p2.next.i !== a2.i && p2.i !== b.i && p2.next.i !== b.i && intersects2(p2, p2.next, a2, b)) return true;
    p2 = p2.next;
  } while (p2 !== a2);
  return false;
}
function locallyInside2(a2, b) {
  return area2(a2.prev, a2, a2.next) < 0 ? area2(a2, b, a2.next) >= 0 && area2(a2, a2.prev, b) >= 0 : area2(a2, b, a2.prev) < 0 || area2(a2, a2.next, b) < 0;
}
function middleInside2(a2, b) {
  let p2 = a2;
  let inside = false;
  const px3 = (a2.x + b.x) / 2;
  const py3 = (a2.y + b.y) / 2;
  do {
    if (p2.y > py3 !== p2.next.y > py3 && p2.next.y !== p2.y && px3 < (p2.next.x - p2.x) * (py3 - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a2);
  return inside;
}
function splitPolygon2(a2, b) {
  const a22 = createNode(a2.i, a2.x, a2.y), b2 = createNode(b.i, b.x, b.y), an = a2.next, bp = b.prev;
  a2.next = b;
  b.prev = a2;
  a22.next = an;
  an.prev = a22;
  b2.next = a22;
  a22.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
}
function insertNode2(i2, x2, y2, last) {
  const p2 = createNode(i2, x2, y2);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode2(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ) p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ) p2.nextZ.prevZ = p2.prevZ;
}
function createNode(i2, x2, y2) {
  return {
    i: i2,
    // vertex index in coordinates array
    x: x2,
    y: y2,
    // vertex coordinates
    prev: null,
    // previous and next vertex nodes in a polygon ring
    next: null,
    z: 0,
    // z-order curve value
    prevZ: null,
    // previous and next nodes in z-order
    nextZ: null,
    steiner: false
    // indicates whether this is a steiner point
  };
}
function signedArea2(data, start, end, dim) {
  let sum3 = 0;
  for (let i2 = start, j2 = end - dim; i2 < end; i2 += dim) {
    sum3 += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
    j2 = i2;
  }
  return sum3;
}
function flatten3(data) {
  const vertices = [];
  const holes = [];
  const dimensions = data[0][0].length;
  let holeIndex = 0;
  let prevLen = 0;
  for (const ring of data) {
    for (const p2 of ring) {
      for (let d2 = 0; d2 < dimensions; d2++) vertices.push(p2[d2]);
    }
    if (prevLen) {
      holeIndex += prevLen;
      holes.push(holeIndex);
    }
    prevLen = ring.length;
  }
  return { vertices, holes, dimensions };
}

// node_modules/three-geojson-geometry/dist/three-geojson-geometry.mjs
function _arrayLikeToArray5(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles5(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles4(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray5(r2);
}
function _assertThisInitialized2(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}
function _callSuper2(t4, o2, e3) {
  return o2 = _getPrototypeOf2(o2), _possibleConstructorReturn2(t4, _isNativeReflectConstruct2() ? Reflect.construct(o2, [], _getPrototypeOf2(t4).constructor) : o2.apply(t4, e3));
}
function _classCallCheck3(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _createClass3(e3, r2, t4) {
  return Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}
function _createForOfIteratorHelper(r2, e3) {
  var t4 = "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (!t4) {
    if (Array.isArray(r2) || (t4 = _unsupportedIterableToArray5(r2)) || e3) {
      t4 && (r2 = t4);
      var n2 = 0, F2 = function() {
      };
      return {
        s: F2,
        n: function() {
          return n2 >= r2.length ? {
            done: true
          } : {
            done: false,
            value: r2[n2++]
          };
        },
        e: function(r3) {
          throw r3;
        },
        f: F2
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var o2, a2 = true, u5 = false;
  return {
    s: function() {
      t4 = t4.call(r2);
    },
    n: function() {
      var r3 = t4.next();
      return a2 = r3.done, r3;
    },
    e: function(r3) {
      u5 = true, o2 = r3;
    },
    f: function() {
      try {
        a2 || null == t4.return || t4.return();
      } finally {
        if (u5) throw o2;
      }
    }
  };
}
function _getPrototypeOf2(t4) {
  return _getPrototypeOf2 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t5) {
    return t5.__proto__ || Object.getPrototypeOf(t5);
  }, _getPrototypeOf2(t4);
}
function _inherits2(t4, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t4.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t4,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t4, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf2(t4, e3);
}
function _isNativeReflectConstruct2() {
  try {
    var t4 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t5) {
  }
  return (_isNativeReflectConstruct2 = function() {
    return !!t4;
  })();
}
function _iterableToArray4(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit5(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) {
        if (Object(t4) !== t4) return;
        f2 = false;
      } else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest5() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread4() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn2(t4, e3) {
  if (e3 && ("object" == typeof e3 || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized2(t4);
}
function _setPrototypeOf2(t4, e3) {
  return _setPrototypeOf2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t5, e4) {
    return t5.__proto__ = e4, t5;
  }, _setPrototypeOf2(t4, e3);
}
function _slicedToArray5(r2, e3) {
  return _arrayWithHoles5(r2) || _iterableToArrayLimit5(r2, e3) || _unsupportedIterableToArray5(r2, e3) || _nonIterableRest5();
}
function _toConsumableArray4(r2) {
  return _arrayWithoutHoles4(r2) || _iterableToArray4(r2) || _unsupportedIterableToArray5(r2) || _nonIterableSpread4();
}
function _unsupportedIterableToArray5(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray5(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray5(r2, a2) : void 0;
  }
}
var interpolateLine = function interpolateLine2() {
  var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var result = [];
  var prevPnt = null;
  lineCoords.forEach(function(pnt) {
    if (prevPnt) {
      var dist2 = distance_default(pnt, prevPnt) * 180 / Math.PI;
      if (dist2 > maxDegDistance) {
        var geoInterpol = interpolate_default(prevPnt, pnt);
        var altInterpol = prevPnt.length > 2 || pnt.length > 2 ? number_default(prevPnt[2] || 0, pnt[2] || 0) : null;
        var interpol = altInterpol ? function(t5) {
          return [].concat(_toConsumableArray4(geoInterpol(t5)), [altInterpol(t5)]);
        } : geoInterpol;
        var tStep = 1 / Math.ceil(dist2 / maxDegDistance);
        var t4 = tStep;
        while (t4 < 1) {
          result.push(interpol(t4));
          t4 += tStep;
        }
      }
    }
    result.push(prevPnt = pnt);
  });
  return result;
};
var THREE = typeof window !== "undefined" && window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn = new THREE.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var GeoJsonGeometry = function(_THREE$BufferGeometry) {
  function GeoJsonGeometry2(geoJson) {
    var _this;
    var radius = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
    var resolution3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 5;
    _classCallCheck3(this, GeoJsonGeometry2);
    _this = _callSuper2(this, GeoJsonGeometry2);
    _this.type = "GeoJsonGeometry";
    _this.parameters = {
      geoJson,
      radius,
      resolution: resolution3
    };
    var groups2 = ({
      Point: genPoint,
      MultiPoint: genMultiPoint,
      LineString: genLineString,
      MultiLineString: genMultiLineString,
      Polygon: genPolygon,
      MultiPolygon: genMultiPolygon
    }[geoJson.type] || function() {
      return [];
    })(geoJson.coordinates, radius);
    var indices = [], vertices = [];
    var groupCnt = 0;
    groups2.forEach(function(newG) {
      var prevIndCnt = indices.length;
      concatGroup({
        indices,
        vertices
      }, newG);
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    });
    indices.length && _this.setIndex(indices);
    vertices.length && _this[setAttributeFn]("position", new THREE.Float32BufferAttribute(vertices, 3));
    function genPoint(coords, r2) {
      var vertices2 = polar2Cartesian2(coords[1], coords[0], r2 + (coords[2] || 0));
      var indices2 = [];
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiPoint(coords, r2) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c4) {
        return genPoint(c4, r2);
      }).forEach(function(_ref) {
        var _ref2 = _slicedToArray5(_ref, 1), newPnt = _ref2[0];
        concatGroup(result, newPnt);
      });
      return [result];
    }
    function genLineString(coords, r2) {
      var coords3d = interpolateLine(coords, resolution3).map(function(_ref3) {
        var _ref4 = _slicedToArray5(_ref3, 3), lng = _ref4[0], lat = _ref4[1], _ref4$ = _ref4[2], alt = _ref4$ === void 0 ? 0 : _ref4$;
        return polar2Cartesian2(lat, lng, r2 + alt);
      });
      var _earcutFlatten = flatten3([coords3d]), vertices2 = _earcutFlatten.vertices;
      var numPoints = Math.round(vertices2.length / 3);
      var indices2 = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        indices2.push(vIdx - 1, vIdx);
      }
      return [{
        vertices: vertices2,
        indices: indices2
      }];
    }
    function genMultiLineString(coords, r2) {
      var result = {
        vertices: [],
        indices: []
      };
      coords.map(function(c4) {
        return genLineString(c4, r2);
      }).forEach(function(_ref5) {
        var _ref6 = _slicedToArray5(_ref5, 1), newLine = _ref6[0];
        concatGroup(result, newLine);
      });
      return [result];
    }
    function genPolygon(coords, r2) {
      var coords3d = coords.map(function(coordsSegment) {
        return interpolateLine(coordsSegment, resolution3).map(function(_ref7) {
          var _ref8 = _slicedToArray5(_ref7, 3), lng = _ref8[0], lat = _ref8[1], _ref8$ = _ref8[2], alt = _ref8$ === void 0 ? 0 : _ref8$;
          return polar2Cartesian2(lat, lng, r2 + alt);
        });
      });
      var _earcutFlatten2 = flatten3(coords3d), vertices2 = _earcutFlatten2.vertices, holes = _earcutFlatten2.holes;
      var firstHoleIdx = holes[0] || Infinity;
      var outerVertices = vertices2.slice(0, firstHoleIdx * 3);
      var holeVertices = vertices2.slice(firstHoleIdx * 3);
      var holesIdx = new Set(holes);
      var numPoints = Math.round(vertices2.length / 3);
      var outerIndices = [], holeIndices = [];
      for (var vIdx = 1; vIdx < numPoints; vIdx++) {
        if (!holesIdx.has(vIdx)) {
          if (vIdx < firstHoleIdx) {
            outerIndices.push(vIdx - 1, vIdx);
          } else {
            holeIndices.push(vIdx - 1 - firstHoleIdx, vIdx - firstHoleIdx);
          }
        }
      }
      var groups3 = [{
        indices: outerIndices,
        vertices: outerVertices
      }];
      if (holes.length) {
        groups3.push({
          indices: holeIndices,
          vertices: holeVertices
        });
      }
      return groups3;
    }
    function genMultiPolygon(coords, r2) {
      var outer = {
        vertices: [],
        indices: []
      };
      var holes = {
        vertices: [],
        indices: []
      };
      coords.map(function(c4) {
        return genPolygon(c4, r2);
      }).forEach(function(_ref9) {
        var _ref10 = _slicedToArray5(_ref9, 2), newOuter = _ref10[0], newHoles = _ref10[1];
        concatGroup(outer, newOuter);
        newHoles && concatGroup(holes, newHoles);
      });
      var groups3 = [outer];
      holes.vertices.length && groups3.push(holes);
      return groups3;
    }
    return _this;
  }
  _inherits2(GeoJsonGeometry2, _THREE$BufferGeometry);
  return _createClass3(GeoJsonGeometry2);
}(THREE.BufferGeometry);
function concatGroup(main, extra) {
  var prevVertCnt = Math.round(main.vertices.length / 3);
  concatArr(main.vertices, extra.vertices);
  concatArr(main.indices, extra.indices.map(function(ind) {
    return ind + prevVertCnt;
  }));
}
function concatArr(target, src) {
  var _iterator = _createForOfIteratorHelper(src), _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done; ) {
      var e3 = _step.value;
      target.push(e3);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
}
function polar2Cartesian2(lat, lng) {
  var r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r2 * Math.sin(phi) * Math.cos(theta),
    // x
    r2 * Math.cos(phi),
    // y
    r2 * Math.sin(phi) * Math.sin(theta)
    // z
  ];
}

// node_modules/three/examples/jsm/utils/BufferGeometryUtils.js
var BufferGeometryUtils_exports = {};
__export(BufferGeometryUtils_exports, {
  computeMikkTSpaceTangents: () => computeMikkTSpaceTangents,
  computeMorphedAttributes: () => computeMorphedAttributes,
  deepCloneAttribute: () => deepCloneAttribute,
  deinterleaveAttribute: () => deinterleaveAttribute,
  deinterleaveGeometry: () => deinterleaveGeometry,
  estimateBytesUsed: () => estimateBytesUsed,
  interleaveAttributes: () => interleaveAttributes,
  mergeAttributes: () => mergeAttributes,
  mergeGeometries: () => mergeGeometries,
  mergeGroups: () => mergeGroups,
  mergeVertices: () => mergeVertices,
  toCreasedNormals: () => toCreasedNormals,
  toTrianglesDrawMode: () => toTrianglesDrawMode
});
function computeMikkTSpaceTangents(geometry, MikkTSpace, negateSign = true) {
  if (!MikkTSpace || !MikkTSpace.isReady) {
    throw new Error("BufferGeometryUtils: Initialized MikkTSpace library required.");
  }
  if (!geometry.hasAttribute("position") || !geometry.hasAttribute("normal") || !geometry.hasAttribute("uv")) {
    throw new Error('BufferGeometryUtils: Tangents require "position", "normal", and "uv" attributes.');
  }
  function getAttributeArray(attribute2) {
    if (attribute2.normalized || attribute2.isInterleavedBufferAttribute) {
      const dstArray = new Float32Array(attribute2.count * attribute2.itemSize);
      for (let i2 = 0, j2 = 0; i2 < attribute2.count; i2++) {
        dstArray[j2++] = attribute2.getX(i2);
        dstArray[j2++] = attribute2.getY(i2);
        if (attribute2.itemSize > 2) {
          dstArray[j2++] = attribute2.getZ(i2);
        }
      }
      return dstArray;
    }
    if (attribute2.array instanceof Float32Array) {
      return attribute2.array;
    }
    return new Float32Array(attribute2.array);
  }
  const _geometry3 = geometry.index ? geometry.toNonIndexed() : geometry;
  const tangents = MikkTSpace.generateTangents(
    getAttributeArray(_geometry3.attributes.position),
    getAttributeArray(_geometry3.attributes.normal),
    getAttributeArray(_geometry3.attributes.uv)
  );
  if (negateSign) {
    for (let i2 = 3; i2 < tangents.length; i2 += 4) {
      tangents[i2] *= -1;
    }
  }
  _geometry3.setAttribute("tangent", new BufferAttribute(tangents, 4));
  if (geometry !== _geometry3) {
    geometry.copy(_geometry3);
  }
  return geometry;
}
function mergeGeometries(geometries, useGroups = false) {
  const isIndexed = geometries[0].index !== null;
  const attributesUsed = new Set(Object.keys(geometries[0].attributes));
  const morphAttributesUsed = new Set(Object.keys(geometries[0].morphAttributes));
  const attributes = {};
  const morphAttributes = {};
  const morphTargetsRelative = geometries[0].morphTargetsRelative;
  const mergedGeometry = new BufferGeometry();
  let offset = 0;
  for (let i2 = 0; i2 < geometries.length; ++i2) {
    const geometry = geometries[i2];
    let attributesCount = 0;
    if (isIndexed !== (geometry.index !== null)) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". All geometries must have compatible attributes; make sure index attribute exists among all geometries, or in none of them.");
      return null;
    }
    for (const name in geometry.attributes) {
      if (!attributesUsed.has(name)) {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + '. All geometries must have compatible attributes; make sure "' + name + '" attribute exists among all geometries, or in none of them.');
        return null;
      }
      if (attributes[name] === void 0) attributes[name] = [];
      attributes[name].push(geometry.attributes[name]);
      attributesCount++;
    }
    if (attributesCount !== attributesUsed.size) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". Make sure all geometries have the same number of attributes.");
      return null;
    }
    if (morphTargetsRelative !== geometry.morphTargetsRelative) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". .morphTargetsRelative must be consistent throughout all geometries.");
      return null;
    }
    for (const name in geometry.morphAttributes) {
      if (!morphAttributesUsed.has(name)) {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ".  .morphAttributes must be consistent throughout all geometries.");
        return null;
      }
      if (morphAttributes[name] === void 0) morphAttributes[name] = [];
      morphAttributes[name].push(geometry.morphAttributes[name]);
    }
    if (useGroups) {
      let count2;
      if (isIndexed) {
        count2 = geometry.index.count;
      } else if (geometry.attributes.position !== void 0) {
        count2 = geometry.attributes.position.count;
      } else {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed with geometry at index " + i2 + ". The geometry must have either an index or a position attribute");
        return null;
      }
      mergedGeometry.addGroup(offset, count2, i2);
      offset += count2;
    }
  }
  if (isIndexed) {
    let indexOffset = 0;
    const mergedIndex = [];
    for (let i2 = 0; i2 < geometries.length; ++i2) {
      const index7 = geometries[i2].index;
      for (let j2 = 0; j2 < index7.count; ++j2) {
        mergedIndex.push(index7.getX(j2) + indexOffset);
      }
      indexOffset += geometries[i2].attributes.position.count;
    }
    mergedGeometry.setIndex(mergedIndex);
  }
  for (const name in attributes) {
    const mergedAttribute = mergeAttributes(attributes[name]);
    if (!mergedAttribute) {
      console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the " + name + " attribute.");
      return null;
    }
    mergedGeometry.setAttribute(name, mergedAttribute);
  }
  for (const name in morphAttributes) {
    const numMorphTargets = morphAttributes[name][0].length;
    if (numMorphTargets === 0) break;
    mergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};
    mergedGeometry.morphAttributes[name] = [];
    for (let i2 = 0; i2 < numMorphTargets; ++i2) {
      const morphAttributesToMerge = [];
      for (let j2 = 0; j2 < morphAttributes[name].length; ++j2) {
        morphAttributesToMerge.push(morphAttributes[name][j2][i2]);
      }
      const mergedMorphAttribute = mergeAttributes(morphAttributesToMerge);
      if (!mergedMorphAttribute) {
        console.error("THREE.BufferGeometryUtils: .mergeGeometries() failed while trying to merge the " + name + " morphAttribute.");
        return null;
      }
      mergedGeometry.morphAttributes[name].push(mergedMorphAttribute);
    }
  }
  return mergedGeometry;
}
function mergeAttributes(attributes) {
  let TypedArray;
  let itemSize;
  let normalized;
  let gpuType = -1;
  let arrayLength = 0;
  for (let i2 = 0; i2 < attributes.length; ++i2) {
    const attribute2 = attributes[i2];
    if (TypedArray === void 0) TypedArray = attribute2.array.constructor;
    if (TypedArray !== attribute2.array.constructor) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.array must be of consistent array types across matching attributes.");
      return null;
    }
    if (itemSize === void 0) itemSize = attribute2.itemSize;
    if (itemSize !== attribute2.itemSize) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.itemSize must be consistent across matching attributes.");
      return null;
    }
    if (normalized === void 0) normalized = attribute2.normalized;
    if (normalized !== attribute2.normalized) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.normalized must be consistent across matching attributes.");
      return null;
    }
    if (gpuType === -1) gpuType = attribute2.gpuType;
    if (gpuType !== attribute2.gpuType) {
      console.error("THREE.BufferGeometryUtils: .mergeAttributes() failed. BufferAttribute.gpuType must be consistent across matching attributes.");
      return null;
    }
    arrayLength += attribute2.count * itemSize;
  }
  const array3 = new TypedArray(arrayLength);
  const result = new BufferAttribute(array3, itemSize, normalized);
  let offset = 0;
  for (let i2 = 0; i2 < attributes.length; ++i2) {
    const attribute2 = attributes[i2];
    if (attribute2.isInterleavedBufferAttribute) {
      const tupleOffset = offset / itemSize;
      for (let j2 = 0, l2 = attribute2.count; j2 < l2; j2++) {
        for (let c4 = 0; c4 < itemSize; c4++) {
          const value = attribute2.getComponent(j2, c4);
          result.setComponent(j2 + tupleOffset, c4, value);
        }
      }
    } else {
      array3.set(attribute2.array, offset);
    }
    offset += attribute2.count * itemSize;
  }
  if (gpuType !== void 0) {
    result.gpuType = gpuType;
  }
  return result;
}
function deepCloneAttribute(attribute2) {
  if (attribute2.isInstancedInterleavedBufferAttribute || attribute2.isInterleavedBufferAttribute) {
    return deinterleaveAttribute(attribute2);
  }
  if (attribute2.isInstancedBufferAttribute) {
    return new InstancedBufferAttribute().copy(attribute2);
  }
  return new BufferAttribute().copy(attribute2);
}
function interleaveAttributes(attributes) {
  let TypedArray;
  let arrayLength = 0;
  let stride = 0;
  for (let i2 = 0, l2 = attributes.length; i2 < l2; ++i2) {
    const attribute2 = attributes[i2];
    if (TypedArray === void 0) TypedArray = attribute2.array.constructor;
    if (TypedArray !== attribute2.array.constructor) {
      console.error("AttributeBuffers of different types cannot be interleaved");
      return null;
    }
    arrayLength += attribute2.array.length;
    stride += attribute2.itemSize;
  }
  const interleavedBuffer = new InterleavedBuffer(new TypedArray(arrayLength), stride);
  let offset = 0;
  const res = [];
  const getters = ["getX", "getY", "getZ", "getW"];
  const setters = ["setX", "setY", "setZ", "setW"];
  for (let j2 = 0, l2 = attributes.length; j2 < l2; j2++) {
    const attribute2 = attributes[j2];
    const itemSize = attribute2.itemSize;
    const count2 = attribute2.count;
    const iba = new InterleavedBufferAttribute(interleavedBuffer, itemSize, offset, attribute2.normalized);
    res.push(iba);
    offset += itemSize;
    for (let c4 = 0; c4 < count2; c4++) {
      for (let k2 = 0; k2 < itemSize; k2++) {
        iba[setters[k2]](c4, attribute2[getters[k2]](c4));
      }
    }
  }
  return res;
}
function deinterleaveAttribute(attribute2) {
  const cons = attribute2.data.array.constructor;
  const count2 = attribute2.count;
  const itemSize = attribute2.itemSize;
  const normalized = attribute2.normalized;
  const array3 = new cons(count2 * itemSize);
  let newAttribute;
  if (attribute2.isInstancedInterleavedBufferAttribute) {
    newAttribute = new InstancedBufferAttribute(array3, itemSize, normalized, attribute2.meshPerAttribute);
  } else {
    newAttribute = new BufferAttribute(array3, itemSize, normalized);
  }
  for (let i2 = 0; i2 < count2; i2++) {
    newAttribute.setX(i2, attribute2.getX(i2));
    if (itemSize >= 2) {
      newAttribute.setY(i2, attribute2.getY(i2));
    }
    if (itemSize >= 3) {
      newAttribute.setZ(i2, attribute2.getZ(i2));
    }
    if (itemSize >= 4) {
      newAttribute.setW(i2, attribute2.getW(i2));
    }
  }
  return newAttribute;
}
function deinterleaveGeometry(geometry) {
  const attributes = geometry.attributes;
  const morphTargets = geometry.morphTargets;
  const attrMap = /* @__PURE__ */ new Map();
  for (const key in attributes) {
    const attr = attributes[key];
    if (attr.isInterleavedBufferAttribute) {
      if (!attrMap.has(attr)) {
        attrMap.set(attr, deinterleaveAttribute(attr));
      }
      attributes[key] = attrMap.get(attr);
    }
  }
  for (const key in morphTargets) {
    const attr = morphTargets[key];
    if (attr.isInterleavedBufferAttribute) {
      if (!attrMap.has(attr)) {
        attrMap.set(attr, deinterleaveAttribute(attr));
      }
      morphTargets[key] = attrMap.get(attr);
    }
  }
}
function estimateBytesUsed(geometry) {
  let mem = 0;
  for (const name in geometry.attributes) {
    const attr = geometry.getAttribute(name);
    mem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;
  }
  const indices = geometry.getIndex();
  mem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;
  return mem;
}
function mergeVertices(geometry, tolerance = 1e-4) {
  tolerance = Math.max(tolerance, Number.EPSILON);
  const hashToIndex = {};
  const indices = geometry.getIndex();
  const positions = geometry.getAttribute("position");
  const vertexCount = indices ? indices.count : positions.count;
  let nextIndex = 0;
  const attributeNames = Object.keys(geometry.attributes);
  const tmpAttributes = {};
  const tmpMorphAttributes = {};
  const newIndices = [];
  const getters = ["getX", "getY", "getZ", "getW"];
  const setters = ["setX", "setY", "setZ", "setW"];
  for (let i2 = 0, l2 = attributeNames.length; i2 < l2; i2++) {
    const name = attributeNames[i2];
    const attr = geometry.attributes[name];
    tmpAttributes[name] = new attr.constructor(
      new attr.array.constructor(attr.count * attr.itemSize),
      attr.itemSize,
      attr.normalized
    );
    const morphAttributes = geometry.morphAttributes[name];
    if (morphAttributes) {
      if (!tmpMorphAttributes[name]) tmpMorphAttributes[name] = [];
      morphAttributes.forEach((morphAttr, i3) => {
        const array3 = new morphAttr.array.constructor(morphAttr.count * morphAttr.itemSize);
        tmpMorphAttributes[name][i3] = new morphAttr.constructor(array3, morphAttr.itemSize, morphAttr.normalized);
      });
    }
  }
  const halfTolerance = tolerance * 0.5;
  const exponent = Math.log10(1 / tolerance);
  const hashMultiplier = Math.pow(10, exponent);
  const hashAdditive = halfTolerance * hashMultiplier;
  for (let i2 = 0; i2 < vertexCount; i2++) {
    const index7 = indices ? indices.getX(i2) : i2;
    let hash2 = "";
    for (let j2 = 0, l2 = attributeNames.length; j2 < l2; j2++) {
      const name = attributeNames[j2];
      const attribute2 = geometry.getAttribute(name);
      const itemSize = attribute2.itemSize;
      for (let k2 = 0; k2 < itemSize; k2++) {
        hash2 += `${~~(attribute2[getters[k2]](index7) * hashMultiplier + hashAdditive)},`;
      }
    }
    if (hash2 in hashToIndex) {
      newIndices.push(hashToIndex[hash2]);
    } else {
      for (let j2 = 0, l2 = attributeNames.length; j2 < l2; j2++) {
        const name = attributeNames[j2];
        const attribute2 = geometry.getAttribute(name);
        const morphAttributes = geometry.morphAttributes[name];
        const itemSize = attribute2.itemSize;
        const newArray = tmpAttributes[name];
        const newMorphArrays = tmpMorphAttributes[name];
        for (let k2 = 0; k2 < itemSize; k2++) {
          const getterFunc = getters[k2];
          const setterFunc = setters[k2];
          newArray[setterFunc](nextIndex, attribute2[getterFunc](index7));
          if (morphAttributes) {
            for (let m2 = 0, ml = morphAttributes.length; m2 < ml; m2++) {
              newMorphArrays[m2][setterFunc](nextIndex, morphAttributes[m2][getterFunc](index7));
            }
          }
        }
      }
      hashToIndex[hash2] = nextIndex;
      newIndices.push(nextIndex);
      nextIndex++;
    }
  }
  const result = geometry.clone();
  for (const name in geometry.attributes) {
    const tmpAttribute = tmpAttributes[name];
    result.setAttribute(name, new tmpAttribute.constructor(
      tmpAttribute.array.slice(0, nextIndex * tmpAttribute.itemSize),
      tmpAttribute.itemSize,
      tmpAttribute.normalized
    ));
    if (!(name in tmpMorphAttributes)) continue;
    for (let j2 = 0; j2 < tmpMorphAttributes[name].length; j2++) {
      const tmpMorphAttribute = tmpMorphAttributes[name][j2];
      result.morphAttributes[name][j2] = new tmpMorphAttribute.constructor(
        tmpMorphAttribute.array.slice(0, nextIndex * tmpMorphAttribute.itemSize),
        tmpMorphAttribute.itemSize,
        tmpMorphAttribute.normalized
      );
    }
  }
  result.setIndex(newIndices);
  return result;
}
function toTrianglesDrawMode(geometry, drawMode) {
  if (drawMode === TrianglesDrawMode) {
    console.warn("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.");
    return geometry;
  }
  if (drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode) {
    let index7 = geometry.getIndex();
    if (index7 === null) {
      const indices = [];
      const position = geometry.getAttribute("position");
      if (position !== void 0) {
        for (let i2 = 0; i2 < position.count; i2++) {
          indices.push(i2);
        }
        geometry.setIndex(indices);
        index7 = geometry.getIndex();
      } else {
        console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.");
        return geometry;
      }
    }
    const numberOfTriangles = index7.count - 2;
    const newIndices = [];
    if (drawMode === TriangleFanDrawMode) {
      for (let i2 = 1; i2 <= numberOfTriangles; i2++) {
        newIndices.push(index7.getX(0));
        newIndices.push(index7.getX(i2));
        newIndices.push(index7.getX(i2 + 1));
      }
    } else {
      for (let i2 = 0; i2 < numberOfTriangles; i2++) {
        if (i2 % 2 === 0) {
          newIndices.push(index7.getX(i2));
          newIndices.push(index7.getX(i2 + 1));
          newIndices.push(index7.getX(i2 + 2));
        } else {
          newIndices.push(index7.getX(i2 + 2));
          newIndices.push(index7.getX(i2 + 1));
          newIndices.push(index7.getX(i2));
        }
      }
    }
    if (newIndices.length / 3 !== numberOfTriangles) {
      console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.");
    }
    const newGeometry = geometry.clone();
    newGeometry.setIndex(newIndices);
    newGeometry.clearGroups();
    return newGeometry;
  } else {
    console.error("THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:", drawMode);
    return geometry;
  }
}
function computeMorphedAttributes(object2) {
  const _vA3 = new Vector3();
  const _vB3 = new Vector3();
  const _vC3 = new Vector3();
  const _tempA3 = new Vector3();
  const _tempB = new Vector3();
  const _tempC = new Vector3();
  const _morphA3 = new Vector3();
  const _morphB = new Vector3();
  const _morphC = new Vector3();
  function _calculateMorphedAttributeData(object3, attribute2, morphAttribute, morphTargetsRelative2, a3, b2, c5, modifiedAttributeArray) {
    _vA3.fromBufferAttribute(attribute2, a3);
    _vB3.fromBufferAttribute(attribute2, b2);
    _vC3.fromBufferAttribute(attribute2, c5);
    const morphInfluences = object3.morphTargetInfluences;
    if (morphAttribute && morphInfluences) {
      _morphA3.set(0, 0, 0);
      _morphB.set(0, 0, 0);
      _morphC.set(0, 0, 0);
      for (let i3 = 0, il2 = morphAttribute.length; i3 < il2; i3++) {
        const influence = morphInfluences[i3];
        const morph = morphAttribute[i3];
        if (influence === 0) continue;
        _tempA3.fromBufferAttribute(morph, a3);
        _tempB.fromBufferAttribute(morph, b2);
        _tempC.fromBufferAttribute(morph, c5);
        if (morphTargetsRelative2) {
          _morphA3.addScaledVector(_tempA3, influence);
          _morphB.addScaledVector(_tempB, influence);
          _morphC.addScaledVector(_tempC, influence);
        } else {
          _morphA3.addScaledVector(_tempA3.sub(_vA3), influence);
          _morphB.addScaledVector(_tempB.sub(_vB3), influence);
          _morphC.addScaledVector(_tempC.sub(_vC3), influence);
        }
      }
      _vA3.add(_morphA3);
      _vB3.add(_morphB);
      _vC3.add(_morphC);
    }
    if (object3.isSkinnedMesh) {
      object3.applyBoneTransform(a3, _vA3);
      object3.applyBoneTransform(b2, _vB3);
      object3.applyBoneTransform(c5, _vC3);
    }
    modifiedAttributeArray[a3 * 3 + 0] = _vA3.x;
    modifiedAttributeArray[a3 * 3 + 1] = _vA3.y;
    modifiedAttributeArray[a3 * 3 + 2] = _vA3.z;
    modifiedAttributeArray[b2 * 3 + 0] = _vB3.x;
    modifiedAttributeArray[b2 * 3 + 1] = _vB3.y;
    modifiedAttributeArray[b2 * 3 + 2] = _vB3.z;
    modifiedAttributeArray[c5 * 3 + 0] = _vC3.x;
    modifiedAttributeArray[c5 * 3 + 1] = _vC3.y;
    modifiedAttributeArray[c5 * 3 + 2] = _vC3.z;
  }
  const geometry = object2.geometry;
  const material = object2.material;
  let a2, b, c4;
  const index7 = geometry.index;
  const positionAttribute = geometry.attributes.position;
  const morphPosition = geometry.morphAttributes.position;
  const morphTargetsRelative = geometry.morphTargetsRelative;
  const normalAttribute = geometry.attributes.normal;
  const morphNormal = geometry.morphAttributes.position;
  const groups2 = geometry.groups;
  const drawRange = geometry.drawRange;
  let i2, j2, il, jl;
  let group2;
  let start, end;
  const modifiedPosition = new Float32Array(positionAttribute.count * positionAttribute.itemSize);
  const modifiedNormal = new Float32Array(normalAttribute.count * normalAttribute.itemSize);
  if (index7 !== null) {
    if (Array.isArray(material)) {
      for (i2 = 0, il = groups2.length; i2 < il; i2++) {
        group2 = groups2[i2];
        start = Math.max(group2.start, drawRange.start);
        end = Math.min(group2.start + group2.count, drawRange.start + drawRange.count);
        for (j2 = start, jl = end; j2 < jl; j2 += 3) {
          a2 = index7.getX(j2);
          b = index7.getX(j2 + 1);
          c4 = index7.getX(j2 + 2);
          _calculateMorphedAttributeData(
            object2,
            positionAttribute,
            morphPosition,
            morphTargetsRelative,
            a2,
            b,
            c4,
            modifiedPosition
          );
          _calculateMorphedAttributeData(
            object2,
            normalAttribute,
            morphNormal,
            morphTargetsRelative,
            a2,
            b,
            c4,
            modifiedNormal
          );
        }
      }
    } else {
      start = Math.max(0, drawRange.start);
      end = Math.min(index7.count, drawRange.start + drawRange.count);
      for (i2 = start, il = end; i2 < il; i2 += 3) {
        a2 = index7.getX(i2);
        b = index7.getX(i2 + 1);
        c4 = index7.getX(i2 + 2);
        _calculateMorphedAttributeData(
          object2,
          positionAttribute,
          morphPosition,
          morphTargetsRelative,
          a2,
          b,
          c4,
          modifiedPosition
        );
        _calculateMorphedAttributeData(
          object2,
          normalAttribute,
          morphNormal,
          morphTargetsRelative,
          a2,
          b,
          c4,
          modifiedNormal
        );
      }
    }
  } else {
    if (Array.isArray(material)) {
      for (i2 = 0, il = groups2.length; i2 < il; i2++) {
        group2 = groups2[i2];
        start = Math.max(group2.start, drawRange.start);
        end = Math.min(group2.start + group2.count, drawRange.start + drawRange.count);
        for (j2 = start, jl = end; j2 < jl; j2 += 3) {
          a2 = j2;
          b = j2 + 1;
          c4 = j2 + 2;
          _calculateMorphedAttributeData(
            object2,
            positionAttribute,
            morphPosition,
            morphTargetsRelative,
            a2,
            b,
            c4,
            modifiedPosition
          );
          _calculateMorphedAttributeData(
            object2,
            normalAttribute,
            morphNormal,
            morphTargetsRelative,
            a2,
            b,
            c4,
            modifiedNormal
          );
        }
      }
    } else {
      start = Math.max(0, drawRange.start);
      end = Math.min(positionAttribute.count, drawRange.start + drawRange.count);
      for (i2 = start, il = end; i2 < il; i2 += 3) {
        a2 = i2;
        b = i2 + 1;
        c4 = i2 + 2;
        _calculateMorphedAttributeData(
          object2,
          positionAttribute,
          morphPosition,
          morphTargetsRelative,
          a2,
          b,
          c4,
          modifiedPosition
        );
        _calculateMorphedAttributeData(
          object2,
          normalAttribute,
          morphNormal,
          morphTargetsRelative,
          a2,
          b,
          c4,
          modifiedNormal
        );
      }
    }
  }
  const morphedPositionAttribute = new Float32BufferAttribute(modifiedPosition, 3);
  const morphedNormalAttribute = new Float32BufferAttribute(modifiedNormal, 3);
  return {
    positionAttribute,
    normalAttribute,
    morphedPositionAttribute,
    morphedNormalAttribute
  };
}
function mergeGroups(geometry) {
  if (geometry.groups.length === 0) {
    console.warn("THREE.BufferGeometryUtils.mergeGroups(): No groups are defined. Nothing to merge.");
    return geometry;
  }
  let groups2 = geometry.groups;
  groups2 = groups2.sort((a2, b) => {
    if (a2.materialIndex !== b.materialIndex) return a2.materialIndex - b.materialIndex;
    return a2.start - b.start;
  });
  if (geometry.getIndex() === null) {
    const positionAttribute = geometry.getAttribute("position");
    const indices = [];
    for (let i2 = 0; i2 < positionAttribute.count; i2 += 3) {
      indices.push(i2, i2 + 1, i2 + 2);
    }
    geometry.setIndex(indices);
  }
  const index7 = geometry.getIndex();
  const newIndices = [];
  for (let i2 = 0; i2 < groups2.length; i2++) {
    const group2 = groups2[i2];
    const groupStart = group2.start;
    const groupLength = groupStart + group2.count;
    for (let j2 = groupStart; j2 < groupLength; j2++) {
      newIndices.push(index7.getX(j2));
    }
  }
  geometry.dispose();
  geometry.setIndex(newIndices);
  let start = 0;
  for (let i2 = 0; i2 < groups2.length; i2++) {
    const group2 = groups2[i2];
    group2.start = start;
    start += group2.count;
  }
  let currentGroup = groups2[0];
  geometry.groups = [currentGroup];
  for (let i2 = 1; i2 < groups2.length; i2++) {
    const group2 = groups2[i2];
    if (currentGroup.materialIndex === group2.materialIndex) {
      currentGroup.count += group2.count;
    } else {
      currentGroup = group2;
      geometry.groups.push(currentGroup);
    }
  }
  return geometry;
}
function toCreasedNormals(geometry, creaseAngle = Math.PI / 3) {
  const creaseDot = Math.cos(creaseAngle);
  const hashMultiplier = (1 + 1e-10) * 100;
  const verts = [new Vector3(), new Vector3(), new Vector3()];
  const tempVec1 = new Vector3();
  const tempVec2 = new Vector3();
  const tempNorm = new Vector3();
  const tempNorm2 = new Vector3();
  function hashVertex(v3) {
    const x2 = ~~(v3.x * hashMultiplier);
    const y2 = ~~(v3.y * hashMultiplier);
    const z2 = ~~(v3.z * hashMultiplier);
    return `${x2},${y2},${z2}`;
  }
  const resultGeometry = geometry.index ? geometry.toNonIndexed() : geometry;
  const posAttr = resultGeometry.attributes.position;
  const vertexMap = {};
  for (let i2 = 0, l2 = posAttr.count / 3; i2 < l2; i2++) {
    const i3 = 3 * i2;
    const a2 = verts[0].fromBufferAttribute(posAttr, i3 + 0);
    const b = verts[1].fromBufferAttribute(posAttr, i3 + 1);
    const c4 = verts[2].fromBufferAttribute(posAttr, i3 + 2);
    tempVec1.subVectors(c4, b);
    tempVec2.subVectors(a2, b);
    const normal2 = new Vector3().crossVectors(tempVec1, tempVec2).normalize();
    for (let n2 = 0; n2 < 3; n2++) {
      const vert = verts[n2];
      const hash2 = hashVertex(vert);
      if (!(hash2 in vertexMap)) {
        vertexMap[hash2] = [];
      }
      vertexMap[hash2].push(normal2);
    }
  }
  const normalArray = new Float32Array(posAttr.count * 3);
  const normAttr = new BufferAttribute(normalArray, 3, false);
  for (let i2 = 0, l2 = posAttr.count / 3; i2 < l2; i2++) {
    const i3 = 3 * i2;
    const a2 = verts[0].fromBufferAttribute(posAttr, i3 + 0);
    const b = verts[1].fromBufferAttribute(posAttr, i3 + 1);
    const c4 = verts[2].fromBufferAttribute(posAttr, i3 + 2);
    tempVec1.subVectors(c4, b);
    tempVec2.subVectors(a2, b);
    tempNorm.crossVectors(tempVec1, tempVec2).normalize();
    for (let n2 = 0; n2 < 3; n2++) {
      const vert = verts[n2];
      const hash2 = hashVertex(vert);
      const otherNormals = vertexMap[hash2];
      tempNorm2.set(0, 0, 0);
      for (let k2 = 0, lk = otherNormals.length; k2 < lk; k2++) {
        const otherNorm = otherNormals[k2];
        if (tempNorm.dot(otherNorm) > creaseDot) {
          tempNorm2.add(otherNorm);
        }
      }
      tempNorm2.normalize();
      normAttr.setXYZ(i3 + n2, tempNorm2.x, tempNorm2.y, tempNorm2.z);
    }
  }
  resultGeometry.setAttribute("normal", normAttr);
  return resultGeometry;
}

// node_modules/accessor-fn/dist/accessor-fn.mjs
var index4 = function(p2) {
  return typeof p2 === "function" ? p2 : typeof p2 === "string" ? function(obj) {
    return obj[p2];
  } : function(obj) {
    return p2;
  };
};

// node_modules/tinycolor2/esm/tinycolor.js
function _typeof(obj) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(obj2) {
    return typeof obj2;
  } : function(obj2) {
    return obj2 && "function" == typeof Symbol && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
  }, _typeof(obj);
}
var trimLeft = /^\s+/;
var trimRight = /\s+$/;
function tinycolor(color3, opts) {
  color3 = color3 ? color3 : "";
  opts = opts || {};
  if (color3 instanceof tinycolor) {
    return color3;
  }
  if (!(this instanceof tinycolor)) {
    return new tinycolor(color3, opts);
  }
  var rgb3 = inputToRGB(color3);
  this._originalInput = color3, this._r = rgb3.r, this._g = rgb3.g, this._b = rgb3.b, this._a = rgb3.a, this._roundA = Math.round(100 * this._a) / 100, this._format = opts.format || rgb3.format;
  this._gradientType = opts.gradientType;
  if (this._r < 1) this._r = Math.round(this._r);
  if (this._g < 1) this._g = Math.round(this._g);
  if (this._b < 1) this._b = Math.round(this._b);
  this._ok = rgb3.ok;
}
tinycolor.prototype = {
  isDark: function isDark() {
    return this.getBrightness() < 128;
  },
  isLight: function isLight() {
    return !this.isDark();
  },
  isValid: function isValid() {
    return this._ok;
  },
  getOriginalInput: function getOriginalInput() {
    return this._originalInput;
  },
  getFormat: function getFormat() {
    return this._format;
  },
  getAlpha: function getAlpha() {
    return this._a;
  },
  getBrightness: function getBrightness() {
    var rgb3 = this.toRgb();
    return (rgb3.r * 299 + rgb3.g * 587 + rgb3.b * 114) / 1e3;
  },
  getLuminance: function getLuminance() {
    var rgb3 = this.toRgb();
    var RsRGB, GsRGB, BsRGB, R, G2, B4;
    RsRGB = rgb3.r / 255;
    GsRGB = rgb3.g / 255;
    BsRGB = rgb3.b / 255;
    if (RsRGB <= 0.03928) R = RsRGB / 12.92;
    else R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);
    if (GsRGB <= 0.03928) G2 = GsRGB / 12.92;
    else G2 = Math.pow((GsRGB + 0.055) / 1.055, 2.4);
    if (BsRGB <= 0.03928) B4 = BsRGB / 12.92;
    else B4 = Math.pow((BsRGB + 0.055) / 1.055, 2.4);
    return 0.2126 * R + 0.7152 * G2 + 0.0722 * B4;
  },
  setAlpha: function setAlpha(value) {
    this._a = boundAlpha(value);
    this._roundA = Math.round(100 * this._a) / 100;
    return this;
  },
  toHsv: function toHsv() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    return {
      h: hsv.h * 360,
      s: hsv.s,
      v: hsv.v,
      a: this._a
    };
  },
  toHsvString: function toHsvString() {
    var hsv = rgbToHsv(this._r, this._g, this._b);
    var h2 = Math.round(hsv.h * 360), s2 = Math.round(hsv.s * 100), v3 = Math.round(hsv.v * 100);
    return this._a == 1 ? "hsv(" + h2 + ", " + s2 + "%, " + v3 + "%)" : "hsva(" + h2 + ", " + s2 + "%, " + v3 + "%, " + this._roundA + ")";
  },
  toHsl: function toHsl() {
    var hsl4 = rgbToHsl(this._r, this._g, this._b);
    return {
      h: hsl4.h * 360,
      s: hsl4.s,
      l: hsl4.l,
      a: this._a
    };
  },
  toHslString: function toHslString() {
    var hsl4 = rgbToHsl(this._r, this._g, this._b);
    var h2 = Math.round(hsl4.h * 360), s2 = Math.round(hsl4.s * 100), l2 = Math.round(hsl4.l * 100);
    return this._a == 1 ? "hsl(" + h2 + ", " + s2 + "%, " + l2 + "%)" : "hsla(" + h2 + ", " + s2 + "%, " + l2 + "%, " + this._roundA + ")";
  },
  toHex: function toHex(allow3Char) {
    return rgbToHex(this._r, this._g, this._b, allow3Char);
  },
  toHexString: function toHexString(allow3Char) {
    return "#" + this.toHex(allow3Char);
  },
  toHex8: function toHex8(allow4Char) {
    return rgbaToHex(this._r, this._g, this._b, this._a, allow4Char);
  },
  toHex8String: function toHex8String(allow4Char) {
    return "#" + this.toHex8(allow4Char);
  },
  toRgb: function toRgb() {
    return {
      r: Math.round(this._r),
      g: Math.round(this._g),
      b: Math.round(this._b),
      a: this._a
    };
  },
  toRgbString: function toRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ")" : "rgba(" + Math.round(this._r) + ", " + Math.round(this._g) + ", " + Math.round(this._b) + ", " + this._roundA + ")";
  },
  toPercentageRgb: function toPercentageRgb() {
    return {
      r: Math.round(bound01(this._r, 255) * 100) + "%",
      g: Math.round(bound01(this._g, 255) * 100) + "%",
      b: Math.round(bound01(this._b, 255) * 100) + "%",
      a: this._a
    };
  },
  toPercentageRgbString: function toPercentageRgbString() {
    return this._a == 1 ? "rgb(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%)" : "rgba(" + Math.round(bound01(this._r, 255) * 100) + "%, " + Math.round(bound01(this._g, 255) * 100) + "%, " + Math.round(bound01(this._b, 255) * 100) + "%, " + this._roundA + ")";
  },
  toName: function toName() {
    if (this._a === 0) {
      return "transparent";
    }
    if (this._a < 1) {
      return false;
    }
    return hexNames[rgbToHex(this._r, this._g, this._b, true)] || false;
  },
  toFilter: function toFilter(secondColor) {
    var hex8String = "#" + rgbaToArgbHex(this._r, this._g, this._b, this._a);
    var secondHex8String = hex8String;
    var gradientType = this._gradientType ? "GradientType = 1, " : "";
    if (secondColor) {
      var s2 = tinycolor(secondColor);
      secondHex8String = "#" + rgbaToArgbHex(s2._r, s2._g, s2._b, s2._a);
    }
    return "progid:DXImageTransform.Microsoft.gradient(" + gradientType + "startColorstr=" + hex8String + ",endColorstr=" + secondHex8String + ")";
  },
  toString: function toString(format3) {
    var formatSet = !!format3;
    format3 = format3 || this._format;
    var formattedString = false;
    var hasAlpha = this._a < 1 && this._a >= 0;
    var needsAlphaFormat = !formatSet && hasAlpha && (format3 === "hex" || format3 === "hex6" || format3 === "hex3" || format3 === "hex4" || format3 === "hex8" || format3 === "name");
    if (needsAlphaFormat) {
      if (format3 === "name" && this._a === 0) {
        return this.toName();
      }
      return this.toRgbString();
    }
    if (format3 === "rgb") {
      formattedString = this.toRgbString();
    }
    if (format3 === "prgb") {
      formattedString = this.toPercentageRgbString();
    }
    if (format3 === "hex" || format3 === "hex6") {
      formattedString = this.toHexString();
    }
    if (format3 === "hex3") {
      formattedString = this.toHexString(true);
    }
    if (format3 === "hex4") {
      formattedString = this.toHex8String(true);
    }
    if (format3 === "hex8") {
      formattedString = this.toHex8String();
    }
    if (format3 === "name") {
      formattedString = this.toName();
    }
    if (format3 === "hsl") {
      formattedString = this.toHslString();
    }
    if (format3 === "hsv") {
      formattedString = this.toHsvString();
    }
    return formattedString || this.toHexString();
  },
  clone: function clone() {
    return tinycolor(this.toString());
  },
  _applyModification: function _applyModification(fn, args) {
    var color3 = fn.apply(null, [this].concat([].slice.call(args)));
    this._r = color3._r;
    this._g = color3._g;
    this._b = color3._b;
    this.setAlpha(color3._a);
    return this;
  },
  lighten: function lighten() {
    return this._applyModification(_lighten, arguments);
  },
  brighten: function brighten() {
    return this._applyModification(_brighten, arguments);
  },
  darken: function darken() {
    return this._applyModification(_darken, arguments);
  },
  desaturate: function desaturate() {
    return this._applyModification(_desaturate, arguments);
  },
  saturate: function saturate() {
    return this._applyModification(_saturate, arguments);
  },
  greyscale: function greyscale() {
    return this._applyModification(_greyscale, arguments);
  },
  spin: function spin() {
    return this._applyModification(_spin, arguments);
  },
  _applyCombination: function _applyCombination(fn, args) {
    return fn.apply(null, [this].concat([].slice.call(args)));
  },
  analogous: function analogous() {
    return this._applyCombination(_analogous, arguments);
  },
  complement: function complement() {
    return this._applyCombination(_complement, arguments);
  },
  monochromatic: function monochromatic() {
    return this._applyCombination(_monochromatic, arguments);
  },
  splitcomplement: function splitcomplement() {
    return this._applyCombination(_splitcomplement, arguments);
  },
  // Disabled until https://github.com/bgrins/TinyColor/issues/254
  // polyad: function (number) {
  //   return this._applyCombination(polyad, [number]);
  // },
  triad: function triad() {
    return this._applyCombination(polyad, [3]);
  },
  tetrad: function tetrad() {
    return this._applyCombination(polyad, [4]);
  }
};
tinycolor.fromRatio = function(color3, opts) {
  if (_typeof(color3) == "object") {
    var newColor = {};
    for (var i2 in color3) {
      if (color3.hasOwnProperty(i2)) {
        if (i2 === "a") {
          newColor[i2] = color3[i2];
        } else {
          newColor[i2] = convertToPercentage(color3[i2]);
        }
      }
    }
    color3 = newColor;
  }
  return tinycolor(color3, opts);
};
function inputToRGB(color3) {
  var rgb3 = {
    r: 0,
    g: 0,
    b: 0
  };
  var a2 = 1;
  var s2 = null;
  var v3 = null;
  var l2 = null;
  var ok = false;
  var format3 = false;
  if (typeof color3 == "string") {
    color3 = stringInputToObject(color3);
  }
  if (_typeof(color3) == "object") {
    if (isValidCSSUnit(color3.r) && isValidCSSUnit(color3.g) && isValidCSSUnit(color3.b)) {
      rgb3 = rgbToRgb(color3.r, color3.g, color3.b);
      ok = true;
      format3 = String(color3.r).substr(-1) === "%" ? "prgb" : "rgb";
    } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.v)) {
      s2 = convertToPercentage(color3.s);
      v3 = convertToPercentage(color3.v);
      rgb3 = hsvToRgb(color3.h, s2, v3);
      ok = true;
      format3 = "hsv";
    } else if (isValidCSSUnit(color3.h) && isValidCSSUnit(color3.s) && isValidCSSUnit(color3.l)) {
      s2 = convertToPercentage(color3.s);
      l2 = convertToPercentage(color3.l);
      rgb3 = hslToRgb(color3.h, s2, l2);
      ok = true;
      format3 = "hsl";
    }
    if (color3.hasOwnProperty("a")) {
      a2 = color3.a;
    }
  }
  a2 = boundAlpha(a2);
  return {
    ok,
    format: color3.format || format3,
    r: Math.min(255, Math.max(rgb3.r, 0)),
    g: Math.min(255, Math.max(rgb3.g, 0)),
    b: Math.min(255, Math.max(rgb3.b, 0)),
    a: a2
  };
}
function rgbToRgb(r2, g2, b) {
  return {
    r: bound01(r2, 255) * 255,
    g: bound01(g2, 255) * 255,
    b: bound01(b, 255) * 255
  };
}
function rgbToHsl(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max4 = Math.max(r2, g2, b), min4 = Math.min(r2, g2, b);
  var h2, s2, l2 = (max4 + min4) / 2;
  if (max4 == min4) {
    h2 = s2 = 0;
  } else {
    var d2 = max4 - min4;
    s2 = l2 > 0.5 ? d2 / (2 - max4 - min4) : d2 / (max4 + min4);
    switch (max4) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return {
    h: h2,
    s: s2,
    l: l2
  };
}
function hslToRgb(h2, s2, l2) {
  var r2, g2, b;
  h2 = bound01(h2, 360);
  s2 = bound01(s2, 100);
  l2 = bound01(l2, 100);
  function hue2rgb3(p3, q3, t4) {
    if (t4 < 0) t4 += 1;
    if (t4 > 1) t4 -= 1;
    if (t4 < 1 / 6) return p3 + (q3 - p3) * 6 * t4;
    if (t4 < 1 / 2) return q3;
    if (t4 < 2 / 3) return p3 + (q3 - p3) * (2 / 3 - t4) * 6;
    return p3;
  }
  if (s2 === 0) {
    r2 = g2 = b = l2;
  } else {
    var q2 = l2 < 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
    var p2 = 2 * l2 - q2;
    r2 = hue2rgb3(p2, q2, h2 + 1 / 3);
    g2 = hue2rgb3(p2, q2, h2);
    b = hue2rgb3(p2, q2, h2 - 1 / 3);
  }
  return {
    r: r2 * 255,
    g: g2 * 255,
    b: b * 255
  };
}
function rgbToHsv(r2, g2, b) {
  r2 = bound01(r2, 255);
  g2 = bound01(g2, 255);
  b = bound01(b, 255);
  var max4 = Math.max(r2, g2, b), min4 = Math.min(r2, g2, b);
  var h2, s2, v3 = max4;
  var d2 = max4 - min4;
  s2 = max4 === 0 ? 0 : d2 / max4;
  if (max4 == min4) {
    h2 = 0;
  } else {
    switch (max4) {
      case r2:
        h2 = (g2 - b) / d2 + (g2 < b ? 6 : 0);
        break;
      case g2:
        h2 = (b - r2) / d2 + 2;
        break;
      case b:
        h2 = (r2 - g2) / d2 + 4;
        break;
    }
    h2 /= 6;
  }
  return {
    h: h2,
    s: s2,
    v: v3
  };
}
function hsvToRgb(h2, s2, v3) {
  h2 = bound01(h2, 360) * 6;
  s2 = bound01(s2, 100);
  v3 = bound01(v3, 100);
  var i2 = Math.floor(h2), f2 = h2 - i2, p2 = v3 * (1 - s2), q2 = v3 * (1 - f2 * s2), t4 = v3 * (1 - (1 - f2) * s2), mod2 = i2 % 6, r2 = [v3, q2, p2, p2, t4, v3][mod2], g2 = [t4, v3, v3, q2, p2, p2][mod2], b = [p2, p2, t4, v3, v3, q2][mod2];
  return {
    r: r2 * 255,
    g: g2 * 255,
    b: b * 255
  };
}
function rgbToHex(r2, g2, b, allow3Char) {
  var hex2 = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g2).toString(16)), pad2(Math.round(b).toString(16))];
  if (allow3Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1)) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0);
  }
  return hex2.join("");
}
function rgbaToHex(r2, g2, b, a2, allow4Char) {
  var hex2 = [pad2(Math.round(r2).toString(16)), pad2(Math.round(g2).toString(16)), pad2(Math.round(b).toString(16)), pad2(convertDecimalToHex(a2))];
  if (allow4Char && hex2[0].charAt(0) == hex2[0].charAt(1) && hex2[1].charAt(0) == hex2[1].charAt(1) && hex2[2].charAt(0) == hex2[2].charAt(1) && hex2[3].charAt(0) == hex2[3].charAt(1)) {
    return hex2[0].charAt(0) + hex2[1].charAt(0) + hex2[2].charAt(0) + hex2[3].charAt(0);
  }
  return hex2.join("");
}
function rgbaToArgbHex(r2, g2, b, a2) {
  var hex2 = [pad2(convertDecimalToHex(a2)), pad2(Math.round(r2).toString(16)), pad2(Math.round(g2).toString(16)), pad2(Math.round(b).toString(16))];
  return hex2.join("");
}
tinycolor.equals = function(color1, color22) {
  if (!color1 || !color22) return false;
  return tinycolor(color1).toRgbString() == tinycolor(color22).toRgbString();
};
tinycolor.random = function() {
  return tinycolor.fromRatio({
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  });
};
function _desaturate(color3, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color3).toHsl();
  hsl4.s -= amount / 100;
  hsl4.s = clamp01(hsl4.s);
  return tinycolor(hsl4);
}
function _saturate(color3, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color3).toHsl();
  hsl4.s += amount / 100;
  hsl4.s = clamp01(hsl4.s);
  return tinycolor(hsl4);
}
function _greyscale(color3) {
  return tinycolor(color3).desaturate(100);
}
function _lighten(color3, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color3).toHsl();
  hsl4.l += amount / 100;
  hsl4.l = clamp01(hsl4.l);
  return tinycolor(hsl4);
}
function _brighten(color3, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var rgb3 = tinycolor(color3).toRgb();
  rgb3.r = Math.max(0, Math.min(255, rgb3.r - Math.round(255 * -(amount / 100))));
  rgb3.g = Math.max(0, Math.min(255, rgb3.g - Math.round(255 * -(amount / 100))));
  rgb3.b = Math.max(0, Math.min(255, rgb3.b - Math.round(255 * -(amount / 100))));
  return tinycolor(rgb3);
}
function _darken(color3, amount) {
  amount = amount === 0 ? 0 : amount || 10;
  var hsl4 = tinycolor(color3).toHsl();
  hsl4.l -= amount / 100;
  hsl4.l = clamp01(hsl4.l);
  return tinycolor(hsl4);
}
function _spin(color3, amount) {
  var hsl4 = tinycolor(color3).toHsl();
  var hue3 = (hsl4.h + amount) % 360;
  hsl4.h = hue3 < 0 ? 360 + hue3 : hue3;
  return tinycolor(hsl4);
}
function _complement(color3) {
  var hsl4 = tinycolor(color3).toHsl();
  hsl4.h = (hsl4.h + 180) % 360;
  return tinycolor(hsl4);
}
function polyad(color3, number3) {
  if (isNaN(number3) || number3 <= 0) {
    throw new Error("Argument to polyad must be a positive number");
  }
  var hsl4 = tinycolor(color3).toHsl();
  var result = [tinycolor(color3)];
  var step2 = 360 / number3;
  for (var i2 = 1; i2 < number3; i2++) {
    result.push(tinycolor({
      h: (hsl4.h + i2 * step2) % 360,
      s: hsl4.s,
      l: hsl4.l
    }));
  }
  return result;
}
function _splitcomplement(color3) {
  var hsl4 = tinycolor(color3).toHsl();
  var h2 = hsl4.h;
  return [tinycolor(color3), tinycolor({
    h: (h2 + 72) % 360,
    s: hsl4.s,
    l: hsl4.l
  }), tinycolor({
    h: (h2 + 216) % 360,
    s: hsl4.s,
    l: hsl4.l
  })];
}
function _analogous(color3, results, slices) {
  results = results || 6;
  slices = slices || 30;
  var hsl4 = tinycolor(color3).toHsl();
  var part = 360 / slices;
  var ret = [tinycolor(color3)];
  for (hsl4.h = (hsl4.h - (part * results >> 1) + 720) % 360; --results; ) {
    hsl4.h = (hsl4.h + part) % 360;
    ret.push(tinycolor(hsl4));
  }
  return ret;
}
function _monochromatic(color3, results) {
  results = results || 6;
  var hsv = tinycolor(color3).toHsv();
  var h2 = hsv.h, s2 = hsv.s, v3 = hsv.v;
  var ret = [];
  var modification = 1 / results;
  while (results--) {
    ret.push(tinycolor({
      h: h2,
      s: s2,
      v: v3
    }));
    v3 = (v3 + modification) % 1;
  }
  return ret;
}
tinycolor.mix = function(color1, color22, amount) {
  amount = amount === 0 ? 0 : amount || 50;
  var rgb1 = tinycolor(color1).toRgb();
  var rgb22 = tinycolor(color22).toRgb();
  var p2 = amount / 100;
  var rgba3 = {
    r: (rgb22.r - rgb1.r) * p2 + rgb1.r,
    g: (rgb22.g - rgb1.g) * p2 + rgb1.g,
    b: (rgb22.b - rgb1.b) * p2 + rgb1.b,
    a: (rgb22.a - rgb1.a) * p2 + rgb1.a
  };
  return tinycolor(rgba3);
};
tinycolor.readability = function(color1, color22) {
  var c1 = tinycolor(color1);
  var c22 = tinycolor(color22);
  return (Math.max(c1.getLuminance(), c22.getLuminance()) + 0.05) / (Math.min(c1.getLuminance(), c22.getLuminance()) + 0.05);
};
tinycolor.isReadable = function(color1, color22, wcag2) {
  var readability = tinycolor.readability(color1, color22);
  var wcag2Parms, out;
  out = false;
  wcag2Parms = validateWCAG2Parms(wcag2);
  switch (wcag2Parms.level + wcag2Parms.size) {
    case "AAsmall":
    case "AAAlarge":
      out = readability >= 4.5;
      break;
    case "AAlarge":
      out = readability >= 3;
      break;
    case "AAAsmall":
      out = readability >= 7;
      break;
  }
  return out;
};
tinycolor.mostReadable = function(baseColor, colorList, args) {
  var bestColor = null;
  var bestScore = 0;
  var readability;
  var includeFallbackColors, level, size;
  args = args || {};
  includeFallbackColors = args.includeFallbackColors;
  level = args.level;
  size = args.size;
  for (var i2 = 0; i2 < colorList.length; i2++) {
    readability = tinycolor.readability(baseColor, colorList[i2]);
    if (readability > bestScore) {
      bestScore = readability;
      bestColor = tinycolor(colorList[i2]);
    }
  }
  if (tinycolor.isReadable(baseColor, bestColor, {
    level,
    size
  }) || !includeFallbackColors) {
    return bestColor;
  } else {
    args.includeFallbackColors = false;
    return tinycolor.mostReadable(baseColor, ["#fff", "#000"], args);
  }
};
var names = tinycolor.names = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "0ff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "00f",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  burntsienna: "ea7e5d",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "0ff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "f0f",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "663399",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
var hexNames = tinycolor.hexNames = flip(names);
function flip(o2) {
  var flipped = {};
  for (var i2 in o2) {
    if (o2.hasOwnProperty(i2)) {
      flipped[o2[i2]] = i2;
    }
  }
  return flipped;
}
function boundAlpha(a2) {
  a2 = parseFloat(a2);
  if (isNaN(a2) || a2 < 0 || a2 > 1) {
    a2 = 1;
  }
  return a2;
}
function bound01(n2, max4) {
  if (isOnePointZero(n2)) n2 = "100%";
  var processPercent = isPercentage(n2);
  n2 = Math.min(max4, Math.max(0, parseFloat(n2)));
  if (processPercent) {
    n2 = parseInt(n2 * max4, 10) / 100;
  }
  if (Math.abs(n2 - max4) < 1e-6) {
    return 1;
  }
  return n2 % max4 / parseFloat(max4);
}
function clamp01(val) {
  return Math.min(1, Math.max(0, val));
}
function parseIntFromHex(val) {
  return parseInt(val, 16);
}
function isOnePointZero(n2) {
  return typeof n2 == "string" && n2.indexOf(".") != -1 && parseFloat(n2) === 1;
}
function isPercentage(n2) {
  return typeof n2 === "string" && n2.indexOf("%") != -1;
}
function pad2(c4) {
  return c4.length == 1 ? "0" + c4 : "" + c4;
}
function convertToPercentage(n2) {
  if (n2 <= 1) {
    n2 = n2 * 100 + "%";
  }
  return n2;
}
function convertDecimalToHex(d2) {
  return Math.round(parseFloat(d2) * 255).toString(16);
}
function convertHexToDecimal(h2) {
  return parseIntFromHex(h2) / 255;
}
var matchers = function() {
  var CSS_INTEGER = "[-\\+]?\\d+%?";
  var CSS_NUMBER = "[-\\+]?\\d*\\.\\d+%?";
  var CSS_UNIT = "(?:" + CSS_NUMBER + ")|(?:" + CSS_INTEGER + ")";
  var PERMISSIVE_MATCH3 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  var PERMISSIVE_MATCH4 = "[\\s|\\(]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")[,|\\s]+(" + CSS_UNIT + ")\\s*\\)?";
  return {
    CSS_UNIT: new RegExp(CSS_UNIT),
    rgb: new RegExp("rgb" + PERMISSIVE_MATCH3),
    rgba: new RegExp("rgba" + PERMISSIVE_MATCH4),
    hsl: new RegExp("hsl" + PERMISSIVE_MATCH3),
    hsla: new RegExp("hsla" + PERMISSIVE_MATCH4),
    hsv: new RegExp("hsv" + PERMISSIVE_MATCH3),
    hsva: new RegExp("hsva" + PERMISSIVE_MATCH4),
    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/
  };
}();
function isValidCSSUnit(color3) {
  return !!matchers.CSS_UNIT.exec(color3);
}
function stringInputToObject(color3) {
  color3 = color3.replace(trimLeft, "").replace(trimRight, "").toLowerCase();
  var named2 = false;
  if (names[color3]) {
    color3 = names[color3];
    named2 = true;
  } else if (color3 == "transparent") {
    return {
      r: 0,
      g: 0,
      b: 0,
      a: 0,
      format: "name"
    };
  }
  var match;
  if (match = matchers.rgb.exec(color3)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3]
    };
  }
  if (match = matchers.rgba.exec(color3)) {
    return {
      r: match[1],
      g: match[2],
      b: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsl.exec(color3)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3]
    };
  }
  if (match = matchers.hsla.exec(color3)) {
    return {
      h: match[1],
      s: match[2],
      l: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hsv.exec(color3)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3]
    };
  }
  if (match = matchers.hsva.exec(color3)) {
    return {
      h: match[1],
      s: match[2],
      v: match[3],
      a: match[4]
    };
  }
  if (match = matchers.hex8.exec(color3)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      a: convertHexToDecimal(match[4]),
      format: named2 ? "name" : "hex8"
    };
  }
  if (match = matchers.hex6.exec(color3)) {
    return {
      r: parseIntFromHex(match[1]),
      g: parseIntFromHex(match[2]),
      b: parseIntFromHex(match[3]),
      format: named2 ? "name" : "hex"
    };
  }
  if (match = matchers.hex4.exec(color3)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      a: convertHexToDecimal(match[4] + "" + match[4]),
      format: named2 ? "name" : "hex8"
    };
  }
  if (match = matchers.hex3.exec(color3)) {
    return {
      r: parseIntFromHex(match[1] + "" + match[1]),
      g: parseIntFromHex(match[2] + "" + match[2]),
      b: parseIntFromHex(match[3] + "" + match[3]),
      format: named2 ? "name" : "hex"
    };
  }
  return false;
}
function validateWCAG2Parms(parms) {
  var level, size;
  parms = parms || {
    level: "AA",
    size: "small"
  };
  level = (parms.level || "AA").toUpperCase();
  size = (parms.size || "small").toLowerCase();
  if (level !== "AA" && level !== "AAA") {
    level = "AA";
  }
  if (size !== "small" && size !== "large") {
    size = "small";
  }
  return {
    level,
    size
  };
}

// node_modules/data-bind-mapper/dist/data-bind-mapper.mjs
function _arrayLikeToArray6(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles6(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles5(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray6(r2);
}
function _assertClassBrand2(e3, t4, n2) {
  if ("function" == typeof e3 ? e3 === t4 : e3.has(t4)) return arguments.length < 3 ? t4 : n2;
  throw new TypeError("Private element is not present on this object");
}
function _checkPrivateRedeclaration2(e3, t4) {
  if (t4.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck4(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet22(s2, a2) {
  return s2.get(_assertClassBrand2(s2, a2));
}
function _classPrivateFieldInitSpec2(e3, t4, a2) {
  _checkPrivateRedeclaration2(e3, t4), t4.set(e3, a2);
}
function _classPrivateFieldSet22(s2, a2, r2) {
  return s2.set(_assertClassBrand2(s2, a2), r2), r2;
}
function _defineProperties2(e3, r2) {
  for (var t4 = 0; t4 < r2.length; t4++) {
    var o2 = r2[t4];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, _toPropertyKey3(o2.key), o2);
  }
}
function _createClass4(e3, r2, t4) {
  return r2 && _defineProperties2(e3.prototype, r2), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}
function _iterableToArray5(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit6(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest6() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread5() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray6(r2, e3) {
  return _arrayWithHoles6(r2) || _iterableToArrayLimit6(r2, e3) || _unsupportedIterableToArray6(r2, e3) || _nonIterableRest6();
}
function _toConsumableArray5(r2) {
  return _arrayWithoutHoles5(r2) || _iterableToArray5(r2) || _unsupportedIterableToArray6(r2) || _nonIterableSpread5();
}
function _toPrimitive3(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t4);
}
function _toPropertyKey3(t4) {
  var i2 = _toPrimitive3(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray6(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray6(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray6(r2, a2) : void 0;
  }
}
var _dataMap = /* @__PURE__ */ new WeakMap();
var _objMap = /* @__PURE__ */ new WeakMap();
var _id = /* @__PURE__ */ new WeakMap();
var _createObj = /* @__PURE__ */ new WeakMap();
var _updateObj = /* @__PURE__ */ new WeakMap();
var _removeObj = /* @__PURE__ */ new WeakMap();
var DataBindMapper = function() {
  function DataBindMapper2() {
    _classCallCheck4(this, DataBindMapper2);
    _classPrivateFieldInitSpec2(this, _dataMap, /* @__PURE__ */ new Map());
    _classPrivateFieldInitSpec2(this, _objMap, /* @__PURE__ */ new Map());
    _classPrivateFieldInitSpec2(this, _id, function(d2) {
      return d2;
    });
    _classPrivateFieldInitSpec2(this, _createObj, function() {
      return {};
    });
    _classPrivateFieldInitSpec2(this, _updateObj, function() {
    });
    _classPrivateFieldInitSpec2(this, _removeObj, function() {
    });
  }
  return _createClass4(DataBindMapper2, [{
    key: "getObj",
    value: function getObj(d2) {
      return _classPrivateFieldGet22(_dataMap, this).get(_classPrivateFieldGet22(_id, this).call(this, d2));
    }
  }, {
    key: "getData",
    value: function getData(o2) {
      return _classPrivateFieldGet22(_objMap, this).get(o2);
    }
  }, {
    key: "entries",
    value: function entries() {
      return _toConsumableArray5(_classPrivateFieldGet22(_objMap, this).entries()).map(function(_ref) {
        var _ref2 = _slicedToArray6(_ref, 2), o2 = _ref2[0], d2 = _ref2[1];
        return [d2, o2];
      });
    }
  }, {
    key: "id",
    value: function id2(p2) {
      _classPrivateFieldSet22(_id, this, index4(p2));
      return this;
    }
  }, {
    key: "onCreateObj",
    value: function onCreateObj(fn) {
      _classPrivateFieldSet22(_createObj, this, fn);
      return this;
    }
  }, {
    key: "onUpdateObj",
    value: function onUpdateObj(fn) {
      _classPrivateFieldSet22(_updateObj, this, fn);
      return this;
    }
  }, {
    key: "onRemoveObj",
    value: function onRemoveObj(fn) {
      _classPrivateFieldSet22(_removeObj, this, fn);
      return this;
    }
  }, {
    key: "digest",
    value: function digest(data) {
      var _this = this;
      data.filter(function(d2) {
        return !_classPrivateFieldGet22(_dataMap, _this).has(_classPrivateFieldGet22(_id, _this).call(_this, d2));
      }).forEach(function(d2) {
        var obj = _classPrivateFieldGet22(_createObj, _this).call(_this, d2);
        _classPrivateFieldGet22(_dataMap, _this).set(_classPrivateFieldGet22(_id, _this).call(_this, d2), obj);
        _classPrivateFieldGet22(_objMap, _this).set(obj, d2);
      });
      var dataIdsMap = new Map(data.map(function(d2) {
        return [_classPrivateFieldGet22(_id, _this).call(_this, d2), d2];
      }));
      _classPrivateFieldGet22(_dataMap, this).forEach(function(o2, dId) {
        if (!dataIdsMap.has(dId)) {
          _classPrivateFieldGet22(_removeObj, _this).call(_this, o2, dId);
          _classPrivateFieldGet22(_dataMap, _this)["delete"](dId);
          _classPrivateFieldGet22(_objMap, _this)["delete"](o2);
        } else {
          _classPrivateFieldGet22(_updateObj, _this).call(_this, o2, dataIdsMap.get(dId));
        }
      });
      return this;
    }
  }, {
    key: "clear",
    value: function clear() {
      this.digest([]);
      return this;
    }
  }]);
}();

// node_modules/three-globe/dist/three-globe.mjs
var import_frame_ticker = __toESM(require_FrameTicker(), 1);

// node_modules/robust-predicates/esm/util.js
var epsilon3 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon3) * epsilon3;
function sum2(elen, e3, flen, f2, h2) {
  let Q, Qnew, hh, bvirt;
  let enow = e3[0];
  let fnow = f2[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q = enow;
    enow = e3[++eindex];
  } else {
    Q = fnow;
    fnow = f2[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q;
      hh = Q - (Qnew - enow);
      enow = e3[++eindex];
    } else {
      Qnew = fnow + Q;
      hh = Q - (Qnew - fnow);
      fnow = f2[++findex];
    }
    Q = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q + enow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (enow - bvirt);
        enow = e3[++eindex];
      } else {
        Qnew = Q + fnow;
        bvirt = Qnew - Q;
        hh = Q - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f2[++findex];
      }
      Q = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q + enow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (enow - bvirt);
    enow = e3[++eindex];
    Q = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q + fnow;
    bvirt = Qnew - Q;
    hh = Q - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f2[++findex];
    Q = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  if (Q !== 0 || hindex === 0) {
    h2[hindex++] = Q;
  }
  return hindex;
}
function estimate(elen, e3) {
  let Q = e3[0];
  for (let i2 = 1; i2 < elen; i2++) Q += e3[i2];
  return Q;
}
function vec(n2) {
  return new Float64Array(n2);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon3) * epsilon3;
var ccwerrboundB = (2 + 12 * epsilon3) * epsilon3;
var ccwerrboundC = (9 + 64 * epsilon3) * epsilon3 * epsilon3;
var B2 = vec(4);
var C1 = vec(8);
var C2 = vec(12);
var D2 = vec(16);
var u = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c4, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t13, t03, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c4 = splitter * acx;
  ahi = c4 - (c4 - acx);
  alo = acx - ahi;
  c4 = splitter * bcy;
  bhi = c4 - (c4 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcx;
  c4 = splitter * acy;
  ahi = c4 - (c4 - acy);
  alo = acy - ahi;
  c4 = splitter * bcx;
  bhi = c4 - (c4 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  B2[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  B2[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B2[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B2[3] = u32;
  let det = estimate(4, B2);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound) return det;
  s1 = acxtail * bcy;
  c4 = splitter * acxtail;
  ahi = c4 - (c4 - acxtail);
  alo = acxtail - ahi;
  c4 = splitter * bcy;
  bhi = c4 - (c4 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcx;
  c4 = splitter * acytail;
  ahi = c4 - (c4 - acytail);
  alo = acytail - ahi;
  c4 = splitter * bcx;
  bhi = c4 - (c4 - bcx);
  blo = bcx - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C1len = sum2(4, B2, 4, u, C1);
  s1 = acx * bcytail;
  c4 = splitter * acx;
  ahi = c4 - (c4 - acx);
  alo = acx - ahi;
  c4 = splitter * bcytail;
  bhi = c4 - (c4 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acy * bcxtail;
  c4 = splitter * acy;
  ahi = c4 - (c4 - acy);
  alo = acy - ahi;
  c4 = splitter * bcxtail;
  bhi = c4 - (c4 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const C2len = sum2(C1len, C1, 4, u, C2);
  s1 = acxtail * bcytail;
  c4 = splitter * acxtail;
  ahi = c4 - (c4 - acxtail);
  alo = acxtail - ahi;
  c4 = splitter * bcytail;
  bhi = c4 - (c4 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t13 = acytail * bcxtail;
  c4 = splitter * acytail;
  ahi = c4 - (c4 - acytail);
  alo = acytail - ahi;
  c4 = splitter * bcxtail;
  bhi = c4 - (c4 - bcxtail);
  blo = bcxtail - bhi;
  t03 = alo * blo - (t13 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t03;
  bvirt = s0 - _i;
  u[0] = s0 - (_i + bvirt) + (bvirt - t03);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t13;
  bvirt = _0 - _i;
  u[1] = _0 - (_i + bvirt) + (bvirt - t13);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u[3] = u32;
  const Dlen = sum2(C2len, C2, 4, u, D2);
  return D2[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum) return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon3) * epsilon3;
var o3derrboundB = (3 + 28 * epsilon3) * epsilon3;
var o3derrboundC = (26 + 288 * epsilon3) * epsilon3 * epsilon3;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u2 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon3) * epsilon3;
var iccerrboundB = (4 + 48 * epsilon3) * epsilon3;
var iccerrboundC = (44 + 576 * epsilon3) * epsilon3 * epsilon3;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u3 = vec(4);
var v = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon3) * epsilon3;
var isperrboundB = (5 + 72 * epsilon3) * epsilon3;
var isperrboundC = (71 + 1408 * epsilon3) * epsilon3 * epsilon3;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n2 = points.length;
    const coords = new Float64Array(n2 * 2);
    for (let i2 = 0; i2 < n2; i2++) {
      const p2 = points[i2];
      coords[2 * i2] = getX(p2);
      coords[2 * i2 + 1] = getY(p2);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n2 = coords.length >> 1;
    if (n2 > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n2 - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n2));
    this._hullPrev = new Uint32Array(n2);
    this._hullNext = new Uint32Array(n2);
    this._hullTri = new Uint32Array(n2);
    this._hullHash = new Int32Array(this._hashSize);
    this._ids = new Uint32Array(n2);
    this._dists = new Float64Array(n2);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n2 = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i3 = 0; i3 < n2; i3++) {
      const x2 = coords[2 * i3];
      const y2 = coords[2 * i3 + 1];
      if (x2 < minX) minX = x2;
      if (y2 < minY) minY = y2;
      if (x2 > maxX) maxX = x2;
      if (y2 > maxY) maxY = y2;
      this._ids[i3] = i3;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let i0, i1, i2;
    for (let i3 = 0, minDist = Infinity; i3 < n2; i3++) {
      const d2 = dist(cx, cy, coords[2 * i3], coords[2 * i3 + 1]);
      if (d2 < minDist) {
        i0 = i3;
        minDist = d2;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    for (let i3 = 0, minDist = Infinity; i3 < n2; i3++) {
      if (i3 === i0) continue;
      const d2 = dist(i0x, i0y, coords[2 * i3], coords[2 * i3 + 1]);
      if (d2 < minDist && d2 > 0) {
        i1 = i3;
        minDist = d2;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i3 = 0; i3 < n2; i3++) {
      if (i3 === i0 || i3 === i1) continue;
      const r2 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i3], coords[2 * i3 + 1]);
      if (r2 < minRadius) {
        i2 = i3;
        minRadius = r2;
      }
    }
    let i2x = coords[2 * i2];
    let i2y = coords[2 * i2 + 1];
    if (minRadius === Infinity) {
      for (let i3 = 0; i3 < n2; i3++) {
        this._dists[i3] = coords[2 * i3] - coords[0] || coords[2 * i3 + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n2 - 1);
      const hull = new Uint32Array(n2);
      let j2 = 0;
      for (let i3 = 0, d0 = -Infinity; i3 < n2; i3++) {
        const id2 = this._ids[i3];
        const d2 = this._dists[id2];
        if (d2 > d0) {
          hull[j2++] = id2;
          d0 = d2;
        }
      }
      this.hull = hull.subarray(0, j2);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i3 = i1;
      const x2 = i1x;
      const y2 = i1y;
      i1 = i2;
      i1x = i2x;
      i1y = i2y;
      i2 = i3;
      i2x = x2;
      i2y = y2;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i3 = 0; i3 < n2; i3++) {
      this._dists[i3] = dist(coords[2 * i3], coords[2 * i3 + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n2 - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i2] = i1;
    hullNext[i1] = hullPrev[i0] = i2;
    hullNext[i2] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i2] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i2;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i2, -1, -1, -1);
    for (let k2 = 0, xp, yp; k2 < this._ids.length; k2++) {
      const i3 = this._ids[k2];
      const x2 = coords[2 * i3];
      const y2 = coords[2 * i3 + 1];
      if (k2 > 0 && Math.abs(x2 - xp) <= EPSILON && Math.abs(y2 - yp) <= EPSILON) continue;
      xp = x2;
      yp = y2;
      if (i3 === i0 || i3 === i1 || i3 === i2) continue;
      let start = 0;
      for (let j2 = 0, key = this._hashKey(x2, y2); j2 < this._hashSize; j2++) {
        start = hullHash[(key + j2) % this._hashSize];
        if (start !== -1 && start !== hullNext[start]) break;
      }
      start = hullPrev[start];
      let e3 = start, q2;
      while (q2 = hullNext[e3], orient2d(x2, y2, coords[2 * e3], coords[2 * e3 + 1], coords[2 * q2], coords[2 * q2 + 1]) >= 0) {
        e3 = q2;
        if (e3 === start) {
          e3 = -1;
          break;
        }
      }
      if (e3 === -1) continue;
      let t4 = this._addTriangle(e3, i3, hullNext[e3], -1, -1, hullTri[e3]);
      hullTri[i3] = this._legalize(t4 + 2);
      hullTri[e3] = t4;
      hullSize++;
      let n3 = hullNext[e3];
      while (q2 = hullNext[n3], orient2d(x2, y2, coords[2 * n3], coords[2 * n3 + 1], coords[2 * q2], coords[2 * q2 + 1]) < 0) {
        t4 = this._addTriangle(n3, i3, q2, hullTri[i3], -1, hullTri[n3]);
        hullTri[i3] = this._legalize(t4 + 2);
        hullNext[n3] = n3;
        hullSize--;
        n3 = q2;
      }
      if (e3 === start) {
        while (q2 = hullPrev[e3], orient2d(x2, y2, coords[2 * q2], coords[2 * q2 + 1], coords[2 * e3], coords[2 * e3 + 1]) < 0) {
          t4 = this._addTriangle(q2, i3, e3, -1, hullTri[e3], hullTri[q2]);
          this._legalize(t4 + 2);
          hullTri[q2] = t4;
          hullNext[e3] = e3;
          hullSize--;
          e3 = q2;
        }
      }
      this._hullStart = hullPrev[i3] = e3;
      hullNext[e3] = hullPrev[n3] = i3;
      hullNext[i3] = n3;
      hullHash[this._hashKey(x2, y2)] = i3;
      hullHash[this._hashKey(coords[2 * e3], coords[2 * e3 + 1])] = e3;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i3 = 0, e3 = this._hullStart; i3 < hullSize; i3++) {
      this.hull[i3] = e3;
      e3 = hullNext[e3];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x2, y2) {
    return Math.floor(pseudoAngle(x2 - this._cx, y2 - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a2) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i2 = 0;
    let ar = 0;
    while (true) {
      const b = halfedges[a2];
      const a0 = a2 - a2 % 3;
      ar = a0 + (a2 + 2) % 3;
      if (b === -1) {
        if (i2 === 0) break;
        a2 = EDGE_STACK[--i2];
        continue;
      }
      const b0 = b - b % 3;
      const al = a0 + (a2 + 1) % 3;
      const bl = b0 + (b + 2) % 3;
      const p02 = triangles[ar];
      const pr = triangles[a2];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p02],
        coords[2 * p02 + 1],
        coords[2 * pr],
        coords[2 * pr + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a2] = p1;
        triangles[b] = p02;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e3 = this._hullStart;
          do {
            if (this._hullTri[e3] === bl) {
              this._hullTri[e3] = a2;
              break;
            }
            e3 = this._hullPrev[e3];
          } while (e3 !== this._hullStart);
        }
        this._link(a2, hbl);
        this._link(b, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b + 1) % 3;
        if (i2 < EDGE_STACK.length) {
          EDGE_STACK[i2++] = br;
        }
      } else {
        if (i2 === 0) break;
        a2 = EDGE_STACK[--i2];
      }
    }
    return ar;
  }
  _link(a2, b) {
    this._halfedges[a2] = b;
    if (b !== -1) this._halfedges[b] = a2;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i2, a2, b, c4) {
    const t4 = this.trianglesLen;
    this._triangles[t4] = i0;
    this._triangles[t4 + 1] = i1;
    this._triangles[t4 + 2] = i2;
    this._link(t4, a2);
    this._link(t4 + 1, b);
    this._link(t4 + 2, c4);
    this.trianglesLen += 3;
    return t4;
  }
};
function pseudoAngle(dx, dy) {
  const p2 = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p2 : 1 + p2) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px3, py3) {
  const dx = ax - px3;
  const dy = ay - py3;
  const ex = bx - px3;
  const ey = by - py3;
  const fx = cx - px3;
  const fy = cy - py3;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d2 = 0.5 / (dx * ey - dy * ex);
  const x2 = (ey * bl - dy * cl) * d2;
  const y2 = (dx * cl - ex * bl) * d2;
  return x2 * x2 + y2 * y2;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d2 = 0.5 / (dx * ey - dy * ex);
  const x2 = ax + (ey * bl - dy * cl) * d2;
  const y2 = ay + (dx * cl - ex * bl) * d2;
  return { x: x2, y: y2 };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i2 = left + 1; i2 <= right; i2++) {
      const temp2 = ids[i2];
      const tempDist = dists[temp2];
      let j2 = i2 - 1;
      while (j2 >= left && dists[ids[j2]] > tempDist) ids[j2 + 1] = ids[j2--];
      ids[j2 + 1] = temp2;
    }
  } else {
    const median2 = left + right >> 1;
    let i2 = left + 1;
    let j2 = right;
    swap(ids, median2, i2);
    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
    if (dists[ids[i2]] > dists[ids[right]]) swap(ids, i2, right);
    if (dists[ids[left]] > dists[ids[i2]]) swap(ids, left, i2);
    const temp2 = ids[i2];
    const tempDist = dists[temp2];
    while (true) {
      do
        i2++;
      while (dists[ids[i2]] < tempDist);
      do
        j2--;
      while (dists[ids[j2]] > tempDist);
      if (j2 < i2) break;
      swap(ids, i2, j2);
    }
    ids[left + 1] = ids[j2];
    ids[j2] = temp2;
    if (right - i2 + 1 >= j2 - left) {
      quicksort(ids, dists, i2, right);
      quicksort(ids, dists, left, j2 - 1);
    } else {
      quicksort(ids, dists, left, j2 - 1);
      quicksort(ids, dists, i2, right);
    }
  }
}
function swap(arr, i2, j2) {
  const tmp3 = arr[i2];
  arr[i2] = arr[j2];
  arr[j2] = tmp3;
}
function defaultGetX(p2) {
  return p2[0];
}
function defaultGetY(p2) {
  return p2[1];
}

// node_modules/point-in-polygon-hao/dist/esm/index.js
function pointInPolygon(p2, polygon) {
  var i2;
  var ii;
  var k2 = 0;
  var f2;
  var u1;
  var v1;
  var u22;
  var v22;
  var currentP;
  var nextP;
  var x2 = p2[0];
  var y2 = p2[1];
  var numContours = polygon.length;
  for (i2 = 0; i2 < numContours; i2++) {
    ii = 0;
    var contour = polygon[i2];
    var contourLen = contour.length - 1;
    currentP = contour[0];
    if (currentP[0] !== contour[contourLen][0] && currentP[1] !== contour[contourLen][1]) {
      throw new Error("First and last coordinates in a ring must be the same");
    }
    u1 = currentP[0] - x2;
    v1 = currentP[1] - y2;
    for (ii; ii < contourLen; ii++) {
      nextP = contour[ii + 1];
      u22 = nextP[0] - x2;
      v22 = nextP[1] - y2;
      if (v1 === 0 && v22 === 0) {
        if (u22 <= 0 && u1 >= 0 || u1 <= 0 && u22 >= 0) {
          return 0;
        }
      } else if (v22 >= 0 && v1 <= 0 || v22 <= 0 && v1 >= 0) {
        f2 = orient2d(u1, u22, v1, v22, 0, 0);
        if (f2 === 0) {
          return 0;
        }
        if (f2 > 0 && v22 > 0 && v1 <= 0 || f2 < 0 && v22 <= 0 && v1 > 0) {
          k2++;
        }
      }
      currentP = nextP;
      v1 = v22;
      u1 = u22;
    }
  }
  if (k2 % 2 === 0) {
    return false;
  }
  return true;
}

// node_modules/@turf/helpers/dist/esm/index.js
var earthRadius = 63710088e-1;
var factors = {
  centimeters: earthRadius * 100,
  centimetres: earthRadius * 100,
  degrees: 360 / (2 * Math.PI),
  feet: earthRadius * 3.28084,
  inches: earthRadius * 39.37,
  kilometers: earthRadius / 1e3,
  kilometres: earthRadius / 1e3,
  meters: earthRadius,
  metres: earthRadius,
  miles: earthRadius / 1609.344,
  millimeters: earthRadius * 1e3,
  millimetres: earthRadius * 1e3,
  nauticalmiles: earthRadius / 1852,
  radians: 1,
  yards: earthRadius * 1.0936
};

// node_modules/@turf/invariant/dist/esm/index.js
function getCoord(coord) {
  if (!coord) {
    throw new Error("coord is required");
  }
  if (!Array.isArray(coord)) {
    if (coord.type === "Feature" && coord.geometry !== null && coord.geometry.type === "Point") {
      return [...coord.geometry.coordinates];
    }
    if (coord.type === "Point") {
      return [...coord.coordinates];
    }
  }
  if (Array.isArray(coord) && coord.length >= 2 && !Array.isArray(coord[0]) && !Array.isArray(coord[1])) {
    return [...coord];
  }
  throw new Error("coord must be GeoJSON Point or an Array of numbers");
}
function getGeom(geojson) {
  if (geojson.type === "Feature") {
    return geojson.geometry;
  }
  return geojson;
}

// node_modules/@turf/boolean-point-in-polygon/dist/esm/index.js
function booleanPointInPolygon(point2, polygon, options = {}) {
  if (!point2) {
    throw new Error("point is required");
  }
  if (!polygon) {
    throw new Error("polygon is required");
  }
  const pt = getCoord(point2);
  const geom = getGeom(polygon);
  const type = geom.type;
  const bbox = polygon.bbox;
  let polys = geom.coordinates;
  if (bbox && inBBox(pt, bbox) === false) {
    return false;
  }
  if (type === "Polygon") {
    polys = [polys];
  }
  let result = false;
  for (var i2 = 0; i2 < polys.length; ++i2) {
    const polyResult = pointInPolygon(pt, polys[i2]);
    if (polyResult === 0) return options.ignoreBoundary ? false : true;
    else if (polyResult) result = true;
  }
  return result;
}
function inBBox(pt, bbox) {
  return bbox[0] <= pt[0] && bbox[1] <= pt[1] && bbox[2] >= pt[0] && bbox[3] >= pt[1];
}
var turf_boolean_point_in_polygon_default = booleanPointInPolygon;

// node_modules/d3-delaunay/src/path.js
var epsilon4 = 1e-6;
var Path2 = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x2, y2) {
    this._ += `M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x2, y2) {
    this._ += `L${this._x1 = +x2},${this._y1 = +y2}`;
  }
  arc(x2, y2, r2) {
    x2 = +x2, y2 = +y2, r2 = +r2;
    const x03 = x2 + r2;
    const y03 = y2;
    if (r2 < 0) throw new Error("negative radius");
    if (this._x1 === null) this._ += `M${x03},${y03}`;
    else if (Math.abs(this._x1 - x03) > epsilon4 || Math.abs(this._y1 - y03) > epsilon4) this._ += "L" + x03 + "," + y03;
    if (!r2) return;
    this._ += `A${r2},${r2},0,1,1,${x2 - r2},${y2}A${r2},${r2},0,1,1,${this._x1 = x03},${this._y1 = y03}`;
  }
  rect(x2, y2, w4, h2) {
    this._ += `M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${+w4}v${+h2}h${-w4}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x2, y2) {
    this._.push([x2, y2]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x2, y2) {
    this._.push([x2, y2]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i2 = 0, j2 = 0, n2 = triangles.length, x2, y2; i2 < n2; i2 += 3, j2 += 2) {
      const t13 = triangles[i2] * 2;
      const t22 = triangles[i2 + 1] * 2;
      const t32 = triangles[i2 + 2] * 2;
      const x13 = points[t13];
      const y13 = points[t13 + 1];
      const x22 = points[t22];
      const y22 = points[t22 + 1];
      const x3 = points[t32];
      const y3 = points[t32 + 1];
      const dx = x22 - x13;
      const dy = y22 - y13;
      const ex = x3 - x13;
      const ey = y3 - y13;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i3 of hull) bx += points[i3 * 2], by += points[i3 * 2 + 1];
          bx /= hull.length, by /= hull.length;
        }
        const a2 = 1e9 * Math.sign((bx - x13) * ey - (by - y13) * ex);
        x2 = (x13 + x3) / 2 - a2 * ey;
        y2 = (y13 + y3) / 2 + a2 * ex;
      } else {
        const d2 = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x2 = x13 + (ey * bl - dy * cl) * d2;
        y2 = y13 + (dx * cl - ex * bl) * d2;
      }
      circumcenters[j2] = x2;
      circumcenters[j2 + 1] = y2;
    }
    let h2 = hull[hull.length - 1];
    let p02, p1 = h2 * 4;
    let x03, x12 = points[2 * h2];
    let y03, y12 = points[2 * h2 + 1];
    vectors.fill(0);
    for (let i2 = 0; i2 < hull.length; ++i2) {
      h2 = hull[i2];
      p02 = p1, x03 = x12, y03 = y12;
      p1 = h2 * 4, x12 = points[2 * h2], y12 = points[2 * h2 + 1];
      vectors[p02 + 2] = vectors[p1] = y03 - y12;
      vectors[p02 + 3] = vectors[p1 + 1] = x12 - x03;
    }
  }
  render(context2) {
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1) return null;
    for (let i2 = 0, n2 = halfedges.length; i2 < n2; ++i2) {
      const j2 = halfedges[i2];
      if (j2 < i2) continue;
      const ti = Math.floor(i2 / 3) * 2;
      const tj = Math.floor(j2 / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context2);
    }
    let h02, h12 = hull[hull.length - 1];
    for (let i2 = 0; i2 < hull.length; ++i2) {
      h02 = h12, h12 = hull[i2];
      const t4 = Math.floor(inedges[h12] / 3) * 2;
      const x2 = circumcenters[t4];
      const y2 = circumcenters[t4 + 1];
      const v3 = h02 * 4;
      const p2 = this._project(x2, y2, vectors[v3 + 2], vectors[v3 + 3]);
      if (p2) this._renderSegment(x2, y2, p2[0], p2[1], context2);
    }
    return buffer2 && buffer2.value();
  }
  renderBounds(context2) {
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    context2.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer2 && buffer2.value();
  }
  renderCell(i2, context2) {
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    const points = this._clip(i2);
    if (points === null || !points.length) return;
    context2.moveTo(points[0], points[1]);
    let n2 = points.length;
    while (points[0] === points[n2 - 2] && points[1] === points[n2 - 1] && n2 > 1) n2 -= 2;
    for (let i3 = 2; i3 < n2; i3 += 2) {
      if (points[i3] !== points[i3 - 2] || points[i3 + 1] !== points[i3 - 1])
        context2.lineTo(points[i3], points[i3 + 1]);
    }
    context2.closePath();
    return buffer2 && buffer2.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i2 = 0, n2 = points.length / 2; i2 < n2; ++i2) {
      const cell = this.cellPolygon(i2);
      if (cell) cell.index = i2, yield cell;
    }
  }
  cellPolygon(i2) {
    const polygon = new Polygon();
    this.renderCell(i2, polygon);
    return polygon.value();
  }
  _renderSegment(x03, y03, x12, y12, context2) {
    let S2;
    const c0 = this._regioncode(x03, y03);
    const c1 = this._regioncode(x12, y12);
    if (c0 === 0 && c1 === 0) {
      context2.moveTo(x03, y03);
      context2.lineTo(x12, y12);
    } else if (S2 = this._clipSegment(x03, y03, x12, y12, c0, c1)) {
      context2.moveTo(S2[0], S2[1]);
      context2.lineTo(S2[2], S2[3]);
    }
  }
  contains(i2, x2, y2) {
    if ((x2 = +x2, x2 !== x2) || (y2 = +y2, y2 !== y2)) return false;
    return this.delaunay._step(i2, x2, y2) === i2;
  }
  *neighbors(i2) {
    const ci = this._clip(i2);
    if (ci) for (const j2 of this.delaunay.neighbors(i2)) {
      const cj = this._clip(j2);
      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
          if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
            yield j2;
            break loop;
          }
        }
      }
    }
  }
  _cell(i2) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i2];
    if (e0 === -1) return null;
    const points = [];
    let e3 = e0;
    do {
      const t4 = Math.floor(e3 / 3);
      points.push(circumcenters[t4 * 2], circumcenters[t4 * 2 + 1]);
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i2) break;
      e3 = halfedges[e3];
    } while (e3 !== e0 && e3 !== -1);
    return points;
  }
  _clip(i2) {
    if (i2 === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i2);
    if (points === null) return null;
    const { vectors: V2 } = this;
    const v3 = i2 * 4;
    return this._simplify(V2[v3] || V2[v3 + 1] ? this._clipInfinite(i2, points, V2[v3], V2[v3 + 1], V2[v3 + 2], V2[v3 + 3]) : this._clipFinite(i2, points));
  }
  _clipFinite(i2, points) {
    const n2 = points.length;
    let P2 = null;
    let x03, y03, x12 = points[n2 - 2], y12 = points[n2 - 1];
    let c0, c1 = this._regioncode(x12, y12);
    let e0, e1 = 0;
    for (let j2 = 0; j2 < n2; j2 += 2) {
      x03 = x12, y03 = y12, x12 = points[j2], y12 = points[j2 + 1];
      c0 = c1, c1 = this._regioncode(x12, y12);
      if (c0 === 0 && c1 === 0) {
        e0 = e1, e1 = 0;
        if (P2) P2.push(x12, y12);
        else P2 = [x12, y12];
      } else {
        let S2, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S2 = this._clipSegment(x03, y03, x12, y12, c0, c1)) === null) continue;
          [sx0, sy0, sx1, sy1] = S2;
        } else {
          if ((S2 = this._clipSegment(x12, y12, x03, y03, c1, c0)) === null) continue;
          [sx1, sy1, sx0, sy0] = S2;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1) this._edge(i2, e0, e1, P2, P2.length);
          if (P2) P2.push(sx0, sy0);
          else P2 = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1) this._edge(i2, e0, e1, P2, P2.length);
        if (P2) P2.push(sx1, sy1);
        else P2 = [sx1, sy1];
      }
    }
    if (P2) {
      e0 = e1, e1 = this._edgecode(P2[0], P2[1]);
      if (e0 && e1) this._edge(i2, e0, e1, P2, P2.length);
    } else if (this.contains(i2, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P2;
  }
  _clipSegment(x03, y03, x12, y12, c0, c1) {
    const flip2 = c0 < c1;
    if (flip2) [x03, y03, x12, y12, c0, c1] = [x12, y12, x03, y03, c1, c0];
    while (true) {
      if (c0 === 0 && c1 === 0) return flip2 ? [x12, y12, x03, y03] : [x03, y03, x12, y12];
      if (c0 & c1) return null;
      let x2, y2, c4 = c0 || c1;
      if (c4 & 8) x2 = x03 + (x12 - x03) * (this.ymax - y03) / (y12 - y03), y2 = this.ymax;
      else if (c4 & 4) x2 = x03 + (x12 - x03) * (this.ymin - y03) / (y12 - y03), y2 = this.ymin;
      else if (c4 & 2) y2 = y03 + (y12 - y03) * (this.xmax - x03) / (x12 - x03), x2 = this.xmax;
      else y2 = y03 + (y12 - y03) * (this.xmin - x03) / (x12 - x03), x2 = this.xmin;
      if (c0) x03 = x2, y03 = y2, c0 = this._regioncode(x03, y03);
      else x12 = x2, y12 = y2, c1 = this._regioncode(x12, y12);
    }
  }
  _clipInfinite(i2, points, vx0, vy0, vxn, vyn) {
    let P2 = Array.from(points), p2;
    if (p2 = this._project(P2[0], P2[1], vx0, vy0)) P2.unshift(p2[0], p2[1]);
    if (p2 = this._project(P2[P2.length - 2], P2[P2.length - 1], vxn, vyn)) P2.push(p2[0], p2[1]);
    if (P2 = this._clipFinite(i2, P2)) {
      for (let j2 = 0, n2 = P2.length, c0, c1 = this._edgecode(P2[n2 - 2], P2[n2 - 1]); j2 < n2; j2 += 2) {
        c0 = c1, c1 = this._edgecode(P2[j2], P2[j2 + 1]);
        if (c0 && c1) j2 = this._edge(i2, c0, c1, P2, j2), n2 = P2.length;
      }
    } else if (this.contains(i2, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P2 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P2;
  }
  _edge(i2, e0, e1, P2, j2) {
    while (e0 !== e1) {
      let x2, y2;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        // top-left
        case 4:
          e0 = 6, x2 = this.xmax, y2 = this.ymin;
          break;
        // top
        case 6:
          e0 = 2;
          continue;
        // top-right
        case 2:
          e0 = 10, x2 = this.xmax, y2 = this.ymax;
          break;
        // right
        case 10:
          e0 = 8;
          continue;
        // bottom-right
        case 8:
          e0 = 9, x2 = this.xmin, y2 = this.ymax;
          break;
        // bottom
        case 9:
          e0 = 1;
          continue;
        // bottom-left
        case 1:
          e0 = 5, x2 = this.xmin, y2 = this.ymin;
          break;
      }
      if ((P2[j2] !== x2 || P2[j2 + 1] !== y2) && this.contains(i2, x2, y2)) {
        P2.splice(j2, 0, x2, y2), j2 += 2;
      }
    }
    return j2;
  }
  _project(x03, y03, vx, vy) {
    let t4 = Infinity, c4, x2, y2;
    if (vy < 0) {
      if (y03 <= this.ymin) return null;
      if ((c4 = (this.ymin - y03) / vy) < t4) y2 = this.ymin, x2 = x03 + (t4 = c4) * vx;
    } else if (vy > 0) {
      if (y03 >= this.ymax) return null;
      if ((c4 = (this.ymax - y03) / vy) < t4) y2 = this.ymax, x2 = x03 + (t4 = c4) * vx;
    }
    if (vx > 0) {
      if (x03 >= this.xmax) return null;
      if ((c4 = (this.xmax - x03) / vx) < t4) x2 = this.xmax, y2 = y03 + (t4 = c4) * vy;
    } else if (vx < 0) {
      if (x03 <= this.xmin) return null;
      if ((c4 = (this.xmin - x03) / vx) < t4) x2 = this.xmin, y2 = y03 + (t4 = c4) * vy;
    }
    return [x2, y2];
  }
  _edgecode(x2, y2) {
    return (x2 === this.xmin ? 1 : x2 === this.xmax ? 2 : 0) | (y2 === this.ymin ? 4 : y2 === this.ymax ? 8 : 0);
  }
  _regioncode(x2, y2) {
    return (x2 < this.xmin ? 1 : x2 > this.xmax ? 2 : 0) | (y2 < this.ymin ? 4 : y2 > this.ymax ? 8 : 0);
  }
  _simplify(P2) {
    if (P2 && P2.length > 4) {
      for (let i2 = 0; i2 < P2.length; i2 += 2) {
        const j2 = (i2 + 2) % P2.length, k2 = (i2 + 4) % P2.length;
        if (P2[i2] === P2[j2] && P2[j2] === P2[k2] || P2[i2 + 1] === P2[j2 + 1] && P2[j2 + 1] === P2[k2 + 1]) {
          P2.splice(j2, 2), i2 -= 2;
        }
      }
      if (!P2.length) P2 = null;
    }
    return P2;
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau2 = 2 * Math.PI;
var pow3 = Math.pow;
function pointX(p2) {
  return p2[0];
}
function pointY(p2) {
  return p2[1];
}
function collinear(d2) {
  const { triangles, coords } = d2;
  for (let i2 = 0; i2 < triangles.length; i2 += 3) {
    const a2 = 2 * triangles[i2], b = 2 * triangles[i2 + 1], c4 = 2 * triangles[i2 + 2], cross3 = (coords[c4] - coords[a2]) * (coords[b + 1] - coords[a2 + 1]) - (coords[b] - coords[a2]) * (coords[c4 + 1] - coords[a2 + 1]);
    if (cross3 > 1e-10) return false;
  }
  return true;
}
function jitter(x2, y2, r2) {
  return [x2 + Math.sin(x2 + y2) * r2, y2 + Math.cos(x2 - y2) * r2];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d2 = this._delaunator, points = this.points;
    if (d2.hull && d2.hull.length > 2 && collinear(d2)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_2, i2) => i2).sort((i2, j2) => points[2 * i2] - points[2 * j2] || points[2 * i2 + 1] - points[2 * j2 + 1]);
      const e3 = this.collinear[0], f2 = this.collinear[this.collinear.length - 1], bounds = [points[2 * e3], points[2 * e3 + 1], points[2 * f2], points[2 * f2 + 1]], r2 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i2 = 0, n2 = points.length / 2; i2 < n2; ++i2) {
        const p2 = jitter(points[2 * i2], points[2 * i2 + 1], r2);
        points[2 * i2] = p2[0];
        points[2 * i2 + 1] = p2[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e3 = 0, n2 = halfedges.length; e3 < n2; ++e3) {
      const p2 = triangles[e3 % 3 === 2 ? e3 - 2 : e3 + 1];
      if (halfedges[e3] === -1 || inedges[p2] === -1) inedges[p2] = e3;
    }
    for (let i2 = 0, n2 = hull.length; i2 < n2; ++i2) {
      hullIndex[hull[i2]] = i2;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i2) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l2 = collinear2.indexOf(i2);
      if (l2 > 0) yield collinear2[l2 - 1];
      if (l2 < collinear2.length - 1) yield collinear2[l2 + 1];
      return;
    }
    const e0 = inedges[i2];
    if (e0 === -1) return;
    let e3 = e0, p02 = -1;
    do {
      yield p02 = triangles[e3];
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i2) return;
      e3 = halfedges[e3];
      if (e3 === -1) {
        const p2 = hull[(_hullIndex[i2] + 1) % hull.length];
        if (p2 !== p02) yield p2;
        return;
      }
    } while (e3 !== e0);
  }
  find(x2, y2, i2 = 0) {
    if ((x2 = +x2, x2 !== x2) || (y2 = +y2, y2 !== y2)) return -1;
    const i0 = i2;
    let c4;
    while ((c4 = this._step(i2, x2, y2)) >= 0 && c4 !== i2 && c4 !== i0) i2 = c4;
    return c4;
  }
  _step(i2, x2, y2) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i2] === -1 || !points.length) return (i2 + 1) % (points.length >> 1);
    let c4 = i2;
    let dc = pow3(x2 - points[i2 * 2], 2) + pow3(y2 - points[i2 * 2 + 1], 2);
    const e0 = inedges[i2];
    let e3 = e0;
    do {
      let t4 = triangles[e3];
      const dt = pow3(x2 - points[t4 * 2], 2) + pow3(y2 - points[t4 * 2 + 1], 2);
      if (dt < dc) dc = dt, c4 = t4;
      e3 = e3 % 3 === 2 ? e3 - 2 : e3 + 1;
      if (triangles[e3] !== i2) break;
      e3 = halfedges[e3];
      if (e3 === -1) {
        e3 = hull[(_hullIndex[i2] + 1) % hull.length];
        if (e3 !== t4) {
          if (pow3(x2 - points[e3 * 2], 2) + pow3(y2 - points[e3 * 2 + 1], 2) < dc) return e3;
        }
        break;
      }
    } while (e3 !== e0);
    return c4;
  }
  render(context2) {
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i2 = 0, n2 = halfedges.length; i2 < n2; ++i2) {
      const j2 = halfedges[i2];
      if (j2 < i2) continue;
      const ti = triangles[i2] * 2;
      const tj = triangles[j2] * 2;
      context2.moveTo(points[ti], points[ti + 1]);
      context2.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context2);
    return buffer2 && buffer2.value();
  }
  renderPoints(context2, r2) {
    if (r2 === void 0 && (!context2 || typeof context2.moveTo !== "function")) r2 = context2, context2 = null;
    r2 = r2 == void 0 ? 2 : +r2;
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    const { points } = this;
    for (let i2 = 0, n2 = points.length; i2 < n2; i2 += 2) {
      const x2 = points[i2], y2 = points[i2 + 1];
      context2.moveTo(x2 + r2, y2);
      context2.arc(x2, y2, r2, 0, tau2);
    }
    return buffer2 && buffer2.value();
  }
  renderHull(context2) {
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    const { hull, points } = this;
    const h2 = hull[0] * 2, n2 = hull.length;
    context2.moveTo(points[h2], points[h2 + 1]);
    for (let i2 = 1; i2 < n2; ++i2) {
      const h3 = 2 * hull[i2];
      context2.lineTo(points[h3], points[h3 + 1]);
    }
    context2.closePath();
    return buffer2 && buffer2.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i2, context2) {
    const buffer2 = context2 == null ? context2 = new Path2() : void 0;
    const { points, triangles } = this;
    const t03 = triangles[i2 *= 3] * 2;
    const t13 = triangles[i2 + 1] * 2;
    const t22 = triangles[i2 + 2] * 2;
    context2.moveTo(points[t03], points[t03 + 1]);
    context2.lineTo(points[t13], points[t13 + 1]);
    context2.lineTo(points[t22], points[t22 + 1]);
    context2.closePath();
    return buffer2 && buffer2.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i2 = 0, n2 = triangles.length / 3; i2 < n2; ++i2) {
      yield this.trianglePolygon(i2);
    }
  }
  trianglePolygon(i2) {
    const polygon = new Polygon();
    this.renderTriangle(i2, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n2 = points.length;
  const array3 = new Float64Array(n2 * 2);
  for (let i2 = 0; i2 < n2; ++i2) {
    const p2 = points[i2];
    array3[i2 * 2] = fx.call(that, p2, i2, points);
    array3[i2 * 2 + 1] = fy.call(that, p2, i2, points);
  }
  return array3;
}
function* flatIterable(points, fx, fy, that) {
  let i2 = 0;
  for (const p2 of points) {
    yield fx.call(that, p2, i2, points);
    yield fy.call(that, p2, i2, points);
    ++i2;
  }
}

// node_modules/d3-geo-voronoi/src/math.js
var pi2 = Math.PI;
var halfPi2 = pi2 / 2;
var quarterPi2 = pi2 / 4;
var tau3 = pi2 * 2;
var degrees4 = 180 / pi2;
var radians3 = pi2 / 180;
var atan22 = Math.atan2;
var cos2 = Math.cos;
var max2 = Math.max;
var min2 = Math.min;
var sin2 = Math.sin;
var sign4 = Math.sign || function(x2) {
  return x2 > 0 ? 1 : x2 < 0 ? -1 : 0;
};
var sqrt3 = Math.sqrt;
function asin2(x2) {
  return x2 > 1 ? halfPi2 : x2 < -1 ? -halfPi2 : Math.asin(x2);
}

// node_modules/d3-geo-voronoi/src/cartesian.js
function cartesianDot2(a2, b) {
  return a2[0] * b[0] + a2[1] * b[1] + a2[2] * b[2];
}
function cartesianCross2(a2, b) {
  return [
    a2[1] * b[2] - a2[2] * b[1],
    a2[2] * b[0] - a2[0] * b[2],
    a2[0] * b[1] - a2[1] * b[0]
  ];
}
function cartesianAdd(a2, b) {
  return [a2[0] + b[0], a2[1] + b[1], a2[2] + b[2]];
}
function cartesianNormalize(d2) {
  var l2 = sqrt3(d2[0] * d2[0] + d2[1] * d2[1] + d2[2] * d2[2]);
  return [d2[0] / l2, d2[1] / l2, d2[2] / l2];
}

// node_modules/d3-geo-voronoi/src/delaunay.js
function spherical2(cartesian3) {
  return [
    atan22(cartesian3[1], cartesian3[0]) * degrees4,
    asin2(max2(-1, min2(1, cartesian3[2]))) * degrees4
  ];
}
function cartesian2(coordinates2) {
  const lambda = coordinates2[0] * radians3, phi = coordinates2[1] * radians3, cosphi = cos2(phi);
  return [cosphi * cos2(lambda), cosphi * sin2(lambda), sin2(phi)];
}
function excess(triangle) {
  triangle = triangle.map((p2) => cartesian2(p2));
  return cartesianDot2(triangle[0], cartesianCross2(triangle[2], triangle[1]));
}
function geoDelaunay(points) {
  const delaunay = geo_delaunay_from(points), triangles = geo_triangles(delaunay), edges = geo_edges(triangles, points), neighbors = geo_neighbors(triangles, points.length), find2 = geo_find(neighbors, points), circumcenters = geo_circumcenters(triangles, points), { polygons, centers } = geo_polygons(circumcenters, triangles, points), mesh = geo_mesh(polygons), hull = geo_hull(triangles, points), urquhart = geo_urquhart(edges, triangles);
  return {
    delaunay,
    edges,
    triangles,
    centers,
    neighbors,
    polygons,
    mesh,
    hull,
    urquhart,
    find: find2
  };
}
function geo_find(neighbors, points) {
  function distance22(a2, b) {
    let x2 = a2[0] - b[0], y2 = a2[1] - b[1], z2 = a2[2] - b[2];
    return x2 * x2 + y2 * y2 + z2 * z2;
  }
  return function find2(x2, y2, next) {
    if (next === void 0) next = 0;
    let cell, dist2, found = next;
    const xyz = cartesian2([x2, y2]);
    do {
      cell = next;
      next = null;
      dist2 = distance22(xyz, cartesian2(points[cell]));
      neighbors[cell].forEach((i2) => {
        let ndist = distance22(xyz, cartesian2(points[i2]));
        if (ndist < dist2) {
          dist2 = ndist;
          next = i2;
          found = i2;
          return;
        }
      });
    } while (next !== null);
    return found;
  };
}
function geo_delaunay_from(points) {
  if (points.length < 2) return {};
  let pivot = 0;
  while (isNaN(points[pivot][0] + points[pivot][1]) && pivot++ < points.length) ;
  const r2 = rotation_default(points[pivot]), projection2 = stereographic_default().translate([0, 0]).scale(1).rotate(r2.invert([180, 0]));
  points = points.map(projection2);
  const zeros = [];
  let max22 = 1;
  for (let i2 = 0, n2 = points.length; i2 < n2; i2++) {
    let m2 = points[i2][0] ** 2 + points[i2][1] ** 2;
    if (!isFinite(m2) || m2 > 1e32) zeros.push(i2);
    else if (m2 > max22) max22 = m2;
  }
  const FAR = 1e6 * sqrt3(max22);
  zeros.forEach((i2) => points[i2] = [FAR, 0]);
  points.push([0, FAR]);
  points.push([-FAR, 0]);
  points.push([0, -FAR]);
  const delaunay = Delaunay.from(points);
  delaunay.projection = projection2;
  const { triangles, halfedges, inedges } = delaunay;
  const degenerate = [];
  for (let i2 = 0, l2 = halfedges.length; i2 < l2; i2++) {
    if (halfedges[i2] < 0) {
      const j2 = i2 % 3 == 2 ? i2 - 2 : i2 + 1;
      const k2 = i2 % 3 == 0 ? i2 + 2 : i2 - 1;
      const a2 = halfedges[j2];
      const b = halfedges[k2];
      halfedges[a2] = b;
      halfedges[b] = a2;
      halfedges[j2] = halfedges[k2] = -1;
      triangles[i2] = triangles[j2] = triangles[k2] = pivot;
      inedges[triangles[a2]] = a2 % 3 == 0 ? a2 + 2 : a2 - 1;
      inedges[triangles[b]] = b % 3 == 0 ? b + 2 : b - 1;
      degenerate.push(Math.min(i2, j2, k2));
      i2 += 2 - i2 % 3;
    } else if (triangles[i2] > points.length - 3 - 1) {
      triangles[i2] = pivot;
    }
  }
  return delaunay;
}
function geo_edges(triangles, points) {
  const _index = /* @__PURE__ */ new Set();
  if (points.length === 2) return [[0, 1]];
  triangles.forEach((tri2) => {
    if (tri2[0] === tri2[1]) return;
    if (excess(tri2.map((i2) => points[i2])) < 0) return;
    for (let i2 = 0, j2; i2 < 3; i2++) {
      j2 = (i2 + 1) % 3;
      _index.add(extent([tri2[i2], tri2[j2]]).join("-"));
    }
  });
  return Array.from(_index, (d2) => d2.split("-").map(Number));
}
function geo_triangles(delaunay) {
  const { triangles } = delaunay;
  if (!triangles) return [];
  const geo_triangles2 = [];
  for (let i2 = 0, n2 = triangles.length / 3; i2 < n2; i2++) {
    const a2 = triangles[3 * i2], b = triangles[3 * i2 + 1], c4 = triangles[3 * i2 + 2];
    if (a2 !== b && b !== c4) {
      geo_triangles2.push([a2, c4, b]);
    }
  }
  return geo_triangles2;
}
function geo_circumcenters(triangles, points) {
  return triangles.map((tri2) => {
    const c4 = tri2.map((i2) => points[i2]).map(cartesian2), V2 = cartesianAdd(
      cartesianAdd(cartesianCross2(c4[1], c4[0]), cartesianCross2(c4[2], c4[1])),
      cartesianCross2(c4[0], c4[2])
    );
    return spherical2(cartesianNormalize(V2));
  });
}
function geo_neighbors(triangles, npoints) {
  const neighbors = [];
  triangles.forEach((tri2) => {
    for (let j2 = 0; j2 < 3; j2++) {
      const a2 = tri2[j2], b = tri2[(j2 + 1) % 3];
      neighbors[a2] = neighbors[a2] || [];
      neighbors[a2].push(b);
    }
  });
  if (triangles.length === 0) {
    if (npoints === 2) neighbors[0] = [1], neighbors[1] = [0];
    else if (npoints === 1) neighbors[0] = [];
  }
  return neighbors;
}
function geo_polygons(circumcenters, triangles, points) {
  const polygons = [];
  const centers = circumcenters.slice();
  if (triangles.length === 0) {
    if (points.length < 2) return { polygons, centers };
    if (points.length === 2) {
      const a2 = cartesian2(points[0]), b = cartesian2(points[1]), m2 = cartesianNormalize(cartesianAdd(a2, b)), d2 = cartesianNormalize(cartesianCross2(a2, b)), c4 = cartesianCross2(m2, d2);
      const poly = [
        m2,
        cartesianCross2(m2, c4),
        cartesianCross2(cartesianCross2(m2, c4), c4),
        cartesianCross2(cartesianCross2(cartesianCross2(m2, c4), c4), c4)
      ].map(spherical2).map(supplement);
      return polygons.push(poly), polygons.push(poly.slice().reverse()), { polygons, centers };
    }
  }
  triangles.forEach((tri2, t4) => {
    for (let j2 = 0; j2 < 3; j2++) {
      const a2 = tri2[j2], b = tri2[(j2 + 1) % 3], c4 = tri2[(j2 + 2) % 3];
      polygons[a2] = polygons[a2] || [];
      polygons[a2].push([b, c4, t4, [a2, b, c4]]);
    }
  });
  const reordered = polygons.map((poly) => {
    const p2 = [poly[0][2]];
    let k2 = poly[0][1];
    for (let i2 = 1; i2 < poly.length; i2++) {
      for (let j2 = 0; j2 < poly.length; j2++) {
        if (poly[j2][0] == k2) {
          k2 = poly[j2][1];
          p2.push(poly[j2][2]);
          break;
        }
      }
    }
    if (p2.length > 2) {
      return p2;
    } else if (p2.length == 2) {
      const R0 = o_midpoint(
        points[poly[0][3][0]],
        points[poly[0][3][1]],
        centers[p2[0]]
      ), R1 = o_midpoint(
        points[poly[0][3][2]],
        points[poly[0][3][0]],
        centers[p2[0]]
      );
      const i0 = supplement(R0), i1 = supplement(R1);
      return [p2[0], i1, p2[1], i0];
    }
  });
  function supplement(point2) {
    let f2 = -1;
    centers.slice(triangles.length, Infinity).forEach((p2, i2) => {
      if (p2[0] === point2[0] && p2[1] === point2[1]) f2 = i2 + triangles.length;
    });
    if (f2 < 0) f2 = centers.length, centers.push(point2);
    return f2;
  }
  return { polygons: reordered, centers };
}
function o_midpoint(a2, b, c4) {
  a2 = cartesian2(a2);
  b = cartesian2(b);
  c4 = cartesian2(c4);
  const s2 = sign4(cartesianDot2(cartesianCross2(b, a2), c4));
  return spherical2(cartesianNormalize(cartesianAdd(a2, b)).map((d2) => s2 * d2));
}
function geo_mesh(polygons) {
  const mesh = [];
  polygons.forEach((poly) => {
    if (!poly) return;
    let p2 = poly[poly.length - 1];
    for (let q2 of poly) {
      if (q2 > p2) mesh.push([p2, q2]);
      p2 = q2;
    }
  });
  return mesh;
}
function geo_urquhart(edges, triangles) {
  return function(distances) {
    const _lengths = /* @__PURE__ */ new Map(), _urquhart = /* @__PURE__ */ new Map();
    edges.forEach((edge, i2) => {
      const u5 = edge.join("-");
      _lengths.set(u5, distances[i2]);
      _urquhart.set(u5, true);
    });
    triangles.forEach((tri2) => {
      let l2 = 0, remove3 = -1;
      for (let j2 = 0; j2 < 3; j2++) {
        let u5 = extent([tri2[j2], tri2[(j2 + 1) % 3]]).join("-");
        if (_lengths.get(u5) > l2) {
          l2 = _lengths.get(u5);
          remove3 = u5;
        }
      }
      _urquhart.set(remove3, false);
    });
    return edges.map((edge) => _urquhart.get(edge.join("-")));
  };
}
function geo_hull(triangles, points) {
  const _hull = /* @__PURE__ */ new Set(), hull = [];
  triangles.map((tri2) => {
    if (excess(tri2.map((i2) => points[i2 > points.length ? 0 : i2])) > 1e-12)
      return;
    for (let i2 = 0; i2 < 3; i2++) {
      let e3 = [tri2[i2], tri2[(i2 + 1) % 3]], code2 = `${e3[0]}-${e3[1]}`;
      if (_hull.has(code2)) _hull.delete(code2);
      else _hull.add(`${e3[1]}-${e3[0]}`);
    }
  });
  const _index = /* @__PURE__ */ new Map();
  let start;
  _hull.forEach((e3) => {
    e3 = e3.split("-").map(Number);
    _index.set(e3[0], e3[1]);
    start = e3[0];
  });
  if (start === void 0) return hull;
  let next = start;
  do {
    hull.push(next);
    let n2 = _index.get(next);
    _index.set(next, -1);
    next = n2;
  } while (next > -1 && next !== start);
  return hull;
}

// node_modules/d3-geo-voronoi/src/voronoi.js
function geoVoronoi(data) {
  const v3 = function(data2) {
    v3.delaunay = null;
    v3._data = data2;
    if (typeof v3._data === "object" && v3._data.type === "FeatureCollection") {
      v3._data = v3._data.features;
    }
    if (typeof v3._data === "object") {
      const temp2 = v3._data.map((d2) => [v3._vx(d2), v3._vy(d2), d2]).filter((d2) => isFinite(d2[0] + d2[1]));
      v3.points = temp2.map((d2) => [d2[0], d2[1]]);
      v3.valid = temp2.map((d2) => d2[2]);
      v3.delaunay = geoDelaunay(v3.points);
    }
    return v3;
  };
  v3._vx = function(d2) {
    if (typeof d2 == "object" && "type" in d2) {
      return centroid_default(d2)[0];
    }
    if (0 in d2) return d2[0];
  };
  v3._vy = function(d2) {
    if (typeof d2 == "object" && "type" in d2) {
      return centroid_default(d2)[1];
    }
    if (1 in d2) return d2[1];
  };
  v3.x = function(f2) {
    if (!f2) return v3._vx;
    v3._vx = f2;
    return v3;
  };
  v3.y = function(f2) {
    if (!f2) return v3._vy;
    v3._vy = f2;
    return v3;
  };
  v3.polygons = function(data2) {
    if (data2 !== void 0) {
      v3(data2);
    }
    if (!v3.delaunay) return false;
    const coll = {
      type: "FeatureCollection",
      features: []
    };
    if (v3.valid.length === 0) return coll;
    v3.delaunay.polygons.forEach(
      (poly, i2) => coll.features.push({
        type: "Feature",
        geometry: !poly ? null : {
          type: "Polygon",
          coordinates: [
            [...poly, poly[0]].map((i3) => v3.delaunay.centers[i3])
          ]
        },
        properties: {
          site: v3.valid[i2],
          sitecoordinates: v3.points[i2],
          neighbours: v3.delaunay.neighbors[i2]
          // not part of the public API
        }
      })
    );
    if (v3.valid.length === 1)
      coll.features.push({
        type: "Feature",
        geometry: { type: "Sphere" },
        properties: {
          site: v3.valid[0],
          sitecoordinates: v3.points[0],
          neighbours: []
        }
      });
    return coll;
  };
  v3.triangles = function(data2) {
    if (data2 !== void 0) {
      v3(data2);
    }
    if (!v3.delaunay) return false;
    return {
      type: "FeatureCollection",
      features: v3.delaunay.triangles.map((tri2, index7) => {
        tri2 = tri2.map((i2) => v3.points[i2]);
        tri2.center = v3.delaunay.centers[index7];
        return tri2;
      }).filter((tri2) => excess(tri2) > 0).map((tri2) => ({
        type: "Feature",
        properties: {
          circumcenter: tri2.center
        },
        geometry: {
          type: "Polygon",
          coordinates: [[...tri2, tri2[0]]]
        }
      }))
    };
  };
  v3.links = function(data2) {
    if (data2 !== void 0) {
      v3(data2);
    }
    if (!v3.delaunay) return false;
    const _distances = v3.delaunay.edges.map(
      (e3) => distance_default(v3.points[e3[0]], v3.points[e3[1]])
    ), _urquart = v3.delaunay.urquhart(_distances);
    return {
      type: "FeatureCollection",
      features: v3.delaunay.edges.map((e3, i2) => ({
        type: "Feature",
        properties: {
          source: v3.valid[e3[0]],
          target: v3.valid[e3[1]],
          length: _distances[i2],
          urquhart: !!_urquart[i2]
        },
        geometry: {
          type: "LineString",
          coordinates: [v3.points[e3[0]], v3.points[e3[1]]]
        }
      }))
    };
  };
  v3.mesh = function(data2) {
    if (data2 !== void 0) {
      v3(data2);
    }
    if (!v3.delaunay) return false;
    return {
      type: "MultiLineString",
      coordinates: v3.delaunay.edges.map((e3) => [
        v3.points[e3[0]],
        v3.points[e3[1]]
      ])
    };
  };
  v3.cellMesh = function(data2) {
    if (data2 !== void 0) {
      v3(data2);
    }
    if (!v3.delaunay) return false;
    const { centers, polygons } = v3.delaunay;
    const coordinates2 = [];
    for (const p2 of polygons) {
      if (!p2) continue;
      for (let n2 = p2.length, p02 = p2[n2 - 1], p1 = p2[0], i2 = 0; i2 < n2; p02 = p1, p1 = p2[++i2]) {
        if (p1 > p02) {
          coordinates2.push([centers[p02], centers[p1]]);
        }
      }
    }
    return {
      type: "MultiLineString",
      coordinates: coordinates2
    };
  };
  v3._found = void 0;
  v3.find = function(x2, y2, radius) {
    v3._found = v3.delaunay.find(x2, y2, v3._found);
    if (!radius || distance_default([x2, y2], v3.points[v3._found]) < radius)
      return v3._found;
  };
  v3.hull = function(data2) {
    if (data2 !== void 0) {
      v3(data2);
    }
    const hull = v3.delaunay.hull, points = v3.points;
    return hull.length === 0 ? null : {
      type: "Polygon",
      coordinates: [[...hull.map((i2) => points[i2]), points[hull[0]]]]
    };
  };
  return data ? v3(data) : v3;
}

// node_modules/three-conic-polygon-geometry/dist/three-conic-polygon-geometry.mjs
function _arrayLikeToArray7(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles7(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles6(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray7(r2);
}
function _assertThisInitialized3(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}
function _callSuper3(t4, o2, e3) {
  return o2 = _getPrototypeOf3(o2), _possibleConstructorReturn3(t4, _isNativeReflectConstruct3() ? Reflect.construct(o2, [], _getPrototypeOf3(t4).constructor) : o2.apply(t4, e3));
}
function _classCallCheck5(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _createClass5(e3, r2, t4) {
  return Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}
function _getPrototypeOf3(t4) {
  return _getPrototypeOf3 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t5) {
    return t5.__proto__ || Object.getPrototypeOf(t5);
  }, _getPrototypeOf3(t4);
}
function _inherits3(t4, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t4.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t4,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t4, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf3(t4, e3);
}
function _isNativeReflectConstruct3() {
  try {
    var t4 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t5) {
  }
  return (_isNativeReflectConstruct3 = function() {
    return !!t4;
  })();
}
function _iterableToArray6(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit7(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest7() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread6() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _possibleConstructorReturn3(t4, e3) {
  if (e3 && ("object" == typeof e3 || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized3(t4);
}
function _setPrototypeOf3(t4, e3) {
  return _setPrototypeOf3 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t5, e4) {
    return t5.__proto__ = e4, t5;
  }, _setPrototypeOf3(t4, e3);
}
function _slicedToArray7(r2, e3) {
  return _arrayWithHoles7(r2) || _iterableToArrayLimit7(r2, e3) || _unsupportedIterableToArray7(r2, e3) || _nonIterableRest7();
}
function _toConsumableArray6(r2) {
  return _arrayWithoutHoles6(r2) || _iterableToArray6(r2) || _unsupportedIterableToArray7(r2) || _nonIterableSpread6();
}
function _unsupportedIterableToArray7(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray7(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray7(r2, a2) : void 0;
  }
}
function geoPolygonTriangulate(polygon) {
  var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$resolution = _ref.resolution, resolution3 = _ref$resolution === void 0 ? Infinity : _ref$resolution;
  var contour = interpolateContourPoints(polygon, resolution3);
  var edgePoints = merge(contour);
  var innerPoints = getInnerGeoPoints(polygon, resolution3);
  var points = [].concat(_toConsumableArray6(edgePoints), _toConsumableArray6(innerPoints));
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds = bounds_default(boundariesGeojson), _geoBounds2 = _slicedToArray7(_geoBounds, 2), _geoBounds2$ = _slicedToArray7(_geoBounds2[0], 2), minLng = _geoBounds2$[0], minLat = _geoBounds2$[1], _geoBounds2$2 = _slicedToArray7(_geoBounds2[1], 2), maxLng = _geoBounds2$2[0], maxLat = _geoBounds2$2[1];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  var indices = [];
  if (crossesPoleOrAntimeridian) {
    var vt = geoVoronoi(points).triangles();
    var pntMap = new Map(points.map(function(_ref2, idx) {
      var _ref3 = _slicedToArray7(_ref2, 2), lng = _ref3[0], lat = _ref3[1];
      return ["".concat(lng, "-").concat(lat), idx];
    }));
    vt.features.forEach(function(f2) {
      var _indices;
      var triangle = f2.geometry.coordinates[0].slice(0, 3).reverse();
      var inds = [];
      triangle.forEach(function(_ref4) {
        var _ref5 = _slicedToArray7(_ref4, 2), lng = _ref5[0], lat = _ref5[1];
        var k2 = "".concat(lng, "-").concat(lat);
        pntMap.has(k2) && inds.push(pntMap.get(k2));
      });
      if (inds.length !== 3) return;
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = f2.properties.circumcenter;
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return;
      }
      (_indices = indices).push.apply(_indices, inds);
    });
  } else if (!innerPoints.length) {
    var _earcutFlatten = flatten3(contour), vertices = _earcutFlatten.vertices, _earcutFlatten$holes = _earcutFlatten.holes, holes = _earcutFlatten$holes === void 0 ? [] : _earcutFlatten$holes;
    indices = earcut(vertices, holes, 2);
  } else {
    var delaunay = Delaunator.from(points);
    var _loop = function _loop2(i3) {
      var _indices2;
      var inds = [2, 1, 0].map(function(idx) {
        return delaunay.triangles[i3 + idx];
      });
      var triangle = inds.map(function(indice) {
        return points[indice];
      });
      if (inds.some(function(ind) {
        return ind < edgePoints.length;
      })) {
        var triangleCentroid = [0, 1].map(function(coordIdx) {
          return mean(triangle, function(p2) {
            return p2[coordIdx];
          });
        });
        if (!pointInside(triangleCentroid, boundariesGeojson, crossesPoleOrAntimeridian)) return 1;
      }
      (_indices2 = indices).push.apply(_indices2, _toConsumableArray6(inds));
    };
    for (var i2 = 0, len = delaunay.triangles.length; i2 < len; i2 += 3) {
      if (_loop(i2)) continue;
    }
  }
  var lngUvScale = linear2(extent(points, function(d2) {
    return d2[0];
  }), [0, 1]);
  var latUvScale = linear2(extent(points, function(d2) {
    return d2[1];
  }), [0, 1]);
  var uvs = points.map(function(_ref6) {
    var _ref7 = _slicedToArray7(_ref6, 2), lng = _ref7[0], lat = _ref7[1];
    return [lngUvScale(lng), latUvScale(lat)];
  });
  var triangles = {
    points,
    indices,
    uvs
  };
  return {
    contour,
    triangles
  };
}
function interpolateContourPoints(polygon, maxDistance) {
  return polygon.map(function(coords) {
    var pnts = [];
    var prevPnt;
    coords.forEach(function(pnt) {
      if (prevPnt) {
        var dist2 = distance_default(pnt, prevPnt) * 180 / Math.PI;
        if (dist2 > maxDistance) {
          var interpol = interpolate_default(prevPnt, pnt);
          var tStep = 1 / Math.ceil(dist2 / maxDistance);
          var t4 = tStep;
          while (t4 < 1) {
            pnts.push(interpol(t4));
            t4 += tStep;
          }
        }
      }
      pnts.push(prevPnt = pnt);
    });
    return pnts;
  });
}
function getInnerGeoPoints(polygon, maxDistance) {
  var boundariesGeojson = {
    type: "Polygon",
    coordinates: polygon
  };
  var _geoBounds3 = bounds_default(boundariesGeojson), _geoBounds4 = _slicedToArray7(_geoBounds3, 2), _geoBounds4$ = _slicedToArray7(_geoBounds4[0], 2), minLng = _geoBounds4$[0], minLat = _geoBounds4$[1], _geoBounds4$2 = _slicedToArray7(_geoBounds4[1], 2), maxLng = _geoBounds4$2[0], maxLat = _geoBounds4$2[1];
  if (Math.min(Math.abs(maxLng - minLng), Math.abs(maxLat - minLat)) < maxDistance) return [];
  var crossesPoleOrAntimeridian = minLng > maxLng || maxLat >= 89 || minLat <= -89;
  return getGeoSpiralGrid(maxDistance, {
    minLng,
    maxLng,
    minLat,
    maxLat
  }).filter(function(pnt) {
    return pointInside(pnt, boundariesGeojson, crossesPoleOrAntimeridian);
  });
}
function getGeoSpiralGrid(distanceBetweenPoints) {
  var _ref8 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, minLng = _ref8.minLng, maxLng = _ref8.maxLng, minLat = _ref8.minLat, maxLat = _ref8.maxLat;
  var numPoints = Math.round(Math.pow(360 / distanceBetweenPoints, 2) / Math.PI);
  var phi = (1 + Math.sqrt(5)) / 2;
  var getPntLng = function getPntLng2(idx) {
    return idx / phi * 360 % 360 - 180;
  };
  var getPntLat = function getPntLat2(idx) {
    return Math.acos(2 * idx / numPoints - 1) / Math.PI * 180 - 90;
  };
  var getPntIdx = function getPntIdx2(lat) {
    return numPoints * (Math.cos((lat + 90) * Math.PI / 180) + 1) / 2;
  };
  var pntIdxRange = [maxLat !== void 0 ? Math.ceil(getPntIdx(maxLat)) : 0, minLat !== void 0 ? Math.floor(getPntIdx(minLat)) : numPoints - 1];
  var isLngInRange = minLng === void 0 && maxLng === void 0 ? function() {
    return true;
  } : minLng === void 0 ? function(lng2) {
    return lng2 <= maxLng;
  } : maxLng === void 0 ? function(lng2) {
    return lng2 >= minLng;
  } : maxLng >= minLng ? function(lng2) {
    return lng2 >= minLng && lng2 <= maxLng;
  } : function(lng2) {
    return lng2 >= minLng || lng2 <= maxLng;
  };
  var pnts = [];
  for (var i2 = pntIdxRange[0]; i2 <= pntIdxRange[1]; i2++) {
    var lng = getPntLng(i2);
    isLngInRange(lng) && pnts.push([lng, getPntLat(i2)]);
  }
  return pnts;
}
function pointInside(pnt, polygon) {
  var crossesPoleOrAntimeridian = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  return crossesPoleOrAntimeridian ? contains_default(polygon, pnt) : turf_boolean_point_in_polygon_default(pnt, polygon);
}
var THREE2 = window.THREE ? window.THREE : {
  BufferGeometry,
  Float32BufferAttribute
};
var setAttributeFn2 = new THREE2.BufferGeometry().setAttribute ? "setAttribute" : "addAttribute";
var ConicPolygonGeometry = function(_THREE$BufferGeometry) {
  function ConicPolygonGeometry2(polygonGeoJson, bottomHeight, topHeight, closedBottom, closedTop, includeSides, curvatureResolution) {
    var _this;
    _classCallCheck5(this, ConicPolygonGeometry2);
    _this = _callSuper3(this, ConicPolygonGeometry2);
    _this.type = "ConicPolygonGeometry";
    _this.parameters = {
      polygonGeoJson,
      bottomHeight,
      topHeight,
      closedBottom,
      closedTop,
      includeSides,
      curvatureResolution
    };
    bottomHeight = bottomHeight || 0;
    topHeight = topHeight || 1;
    closedBottom = closedBottom !== void 0 ? closedBottom : true;
    closedTop = closedTop !== void 0 ? closedTop : true;
    includeSides = includeSides !== void 0 ? includeSides : true;
    curvatureResolution = curvatureResolution || 5;
    var _geoPolygonTriangulat = geoPolygonTriangulate(polygonGeoJson, {
      resolution: curvatureResolution
    }), contour = _geoPolygonTriangulat.contour, triangles = _geoPolygonTriangulat.triangles;
    var flatUvs = merge(triangles.uvs);
    var vertices = [];
    var uvs = [];
    var indices = [];
    var groupCnt = 0;
    var addGroup = function addGroup2(groupData) {
      var prevVertCnt = Math.round(vertices.length / 3);
      var prevIndCnt = indices.length;
      vertices = vertices.concat(groupData.vertices);
      uvs = uvs.concat(groupData.uvs);
      indices = indices.concat(!prevVertCnt ? groupData.indices : groupData.indices.map(function(ind) {
        return ind + prevVertCnt;
      }));
      _this.addGroup(prevIndCnt, indices.length - prevIndCnt, groupCnt++);
    };
    includeSides && addGroup(generateTorso());
    closedBottom && addGroup(generateCap(bottomHeight, false));
    closedTop && addGroup(generateCap(topHeight, true));
    _this.setIndex(indices);
    _this[setAttributeFn2]("position", new THREE2.Float32BufferAttribute(vertices, 3));
    _this[setAttributeFn2]("uv", new THREE2.Float32BufferAttribute(uvs, 2));
    _this.computeVertexNormals();
    function generateVertices(polygon, altitude) {
      var altFn = typeof altitude === "function" ? altitude : function() {
        return altitude;
      };
      var coords3d = polygon.map(function(coords) {
        return coords.map(function(_ref) {
          var _ref2 = _slicedToArray7(_ref, 2), lng = _ref2[0], lat = _ref2[1];
          return polar2Cartesian3(lat, lng, altFn(lng, lat));
        });
      });
      return flatten3(coords3d);
    }
    function generateTorso() {
      var _generateVertices = generateVertices(contour, bottomHeight), bottomVerts = _generateVertices.vertices, holes = _generateVertices.holes;
      var _generateVertices2 = generateVertices(contour, topHeight), topVerts = _generateVertices2.vertices;
      var vertices2 = merge([topVerts, bottomVerts]);
      var numPoints = Math.round(topVerts.length / 3);
      var holesIdx = new Set(holes);
      var lastHoleIdx = 0;
      var indices2 = [];
      for (var v0Idx = 0; v0Idx < numPoints; v0Idx++) {
        var v1Idx = v0Idx + 1;
        if (v1Idx === numPoints) {
          v1Idx = lastHoleIdx;
        } else if (holesIdx.has(v1Idx)) {
          var holeIdx = v1Idx;
          v1Idx = lastHoleIdx;
          lastHoleIdx = holeIdx;
        }
        indices2.push(v0Idx, v0Idx + numPoints, v1Idx + numPoints);
        indices2.push(v1Idx + numPoints, v1Idx, v0Idx);
      }
      var uvs2 = [];
      for (var v3 = 1; v3 >= 0; v3--) for (var i2 = 0; i2 < numPoints; i2 += 1) uvs2.push(i2 / (numPoints - 1), v3);
      return {
        indices: indices2,
        vertices: vertices2,
        uvs: uvs2
      };
    }
    function generateCap(radius) {
      var isTop = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
      return {
        // need to reverse-wind the bottom triangles to make them face outwards
        indices: isTop ? triangles.indices : triangles.indices.slice().reverse(),
        vertices: generateVertices([triangles.points], radius).vertices,
        uvs: flatUvs
      };
    }
    return _this;
  }
  _inherits3(ConicPolygonGeometry2, _THREE$BufferGeometry);
  return _createClass5(ConicPolygonGeometry2);
}(THREE2.BufferGeometry);
function polar2Cartesian3(lat, lng) {
  var r2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  return [
    r2 * Math.sin(phi) * Math.cos(theta),
    // x
    r2 * Math.cos(phi),
    // y
    r2 * Math.sin(phi) * Math.sin(theta)
    // z
  ];
}

// node_modules/index-array-by/dist/index-array-by.mjs
function _arrayLikeToArray8(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles8(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles7(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray8(r2);
}
function _iterableToArray7(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit8(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest8() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread7() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _objectWithoutProperties(e3, t4) {
  if (null == e3) return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose(e3, t4);
  if (Object.getOwnPropertySymbols) {
    var s2 = Object.getOwnPropertySymbols(e3);
    for (r2 = 0; r2 < s2.length; r2++) o2 = s2[r2], t4.includes(o2) || {}.propertyIsEnumerable.call(e3, o2) && (i2[o2] = e3[o2]);
  }
  return i2;
}
function _objectWithoutPropertiesLoose(r2, e3) {
  if (null == r2) return {};
  var t4 = {};
  for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
    if (e3.includes(n2)) continue;
    t4[n2] = r2[n2];
  }
  return t4;
}
function _slicedToArray8(r2, e3) {
  return _arrayWithHoles8(r2) || _iterableToArrayLimit8(r2, e3) || _unsupportedIterableToArray8(r2, e3) || _nonIterableRest8();
}
function _toConsumableArray7(r2) {
  return _arrayWithoutHoles7(r2) || _iterableToArray7(r2) || _unsupportedIterableToArray8(r2) || _nonIterableSpread7();
}
function _toPrimitive4(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return String(t4);
}
function _toPropertyKey4(t4) {
  var i2 = _toPrimitive4(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray8(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray8(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray8(r2, a2) : void 0;
  }
}
var index5 = function() {
  var list = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
  var keyAccessors = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var multiItem = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
  var flattenKeys = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
  var keys = (keyAccessors instanceof Array ? keyAccessors.length ? keyAccessors : [void 0] : [keyAccessors]).map(function(key) {
    return {
      keyAccessor: key,
      isProp: !(key instanceof Function)
    };
  });
  var indexedResult = list.reduce(function(res, item) {
    var iterObj = res;
    var itemVal = item;
    keys.forEach(function(_ref, idx) {
      var keyAccessor = _ref.keyAccessor, isProp = _ref.isProp;
      var key;
      if (isProp) {
        var _itemVal = itemVal, propVal = _itemVal[keyAccessor], rest = _objectWithoutProperties(_itemVal, [keyAccessor].map(_toPropertyKey4));
        key = propVal;
        itemVal = rest;
      } else {
        key = keyAccessor(itemVal, idx);
      }
      if (idx + 1 < keys.length) {
        if (!iterObj.hasOwnProperty(key)) {
          iterObj[key] = {};
        }
        iterObj = iterObj[key];
      } else {
        if (multiItem) {
          if (!iterObj.hasOwnProperty(key)) {
            iterObj[key] = [];
          }
          iterObj[key].push(itemVal);
        } else {
          iterObj[key] = itemVal;
        }
      }
    });
    return res;
  }, {});
  if (multiItem instanceof Function) {
    (function reduce2(node) {
      var level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      if (level === keys.length) {
        Object.keys(node).forEach(function(k2) {
          return node[k2] = multiItem(node[k2]);
        });
      } else {
        Object.values(node).forEach(function(child) {
          return reduce2(child, level + 1);
        });
      }
    })(indexedResult);
  }
  var result = indexedResult;
  if (flattenKeys) {
    result = [];
    (function flatten4(node) {
      var accKeys = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
      if (accKeys.length === keys.length) {
        result.push({
          keys: accKeys,
          vals: node
        });
      } else {
        Object.entries(node).forEach(function(_ref2) {
          var _ref3 = _slicedToArray8(_ref2, 2), key = _ref3[0], val = _ref3[1];
          return flatten4(val, [].concat(_toConsumableArray7(accKeys), [key]));
        });
      }
    })(indexedResult);
    if (keyAccessors instanceof Array && keyAccessors.length === 0 && result.length === 1) {
      result[0].keys = [];
    }
  }
  return result;
};

// node_modules/h3-js/dist/browser/h3-js.es.js
var libh3 = function(libh32) {
  libh32 = libh32 || {};
  var Module = typeof libh32 !== "undefined" ? libh32 : {};
  var moduleOverrides = {};
  var key;
  for (key in Module) {
    if (Module.hasOwnProperty(key)) {
      moduleOverrides[key] = Module[key];
    }
  }
  var arguments_ = [];
  var scriptDirectory = "";
  function locateFile(path) {
    if (Module["locateFile"]) {
      return Module["locateFile"](path, scriptDirectory);
    }
    return scriptDirectory + path;
  }
  var readAsync;
  {
    if (typeof document !== "undefined" && document.currentScript) {
      scriptDirectory = document.currentScript.src;
    }
    if (scriptDirectory.indexOf("blob:") !== 0) {
      scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
    } else {
      scriptDirectory = "";
    }
    readAsync = function readAsync2(url, onload, onerror) {
      var xhr = new XMLHttpRequest();
      xhr.open("GET", url, true);
      xhr.responseType = "arraybuffer";
      xhr.onload = function xhr_onload() {
        if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
          onload(xhr.response);
          return;
        }
        var data = tryParseAsDataURI(url);
        if (data) {
          onload(data.buffer);
          return;
        }
        onerror();
      };
      xhr.onerror = onerror;
      xhr.send(null);
    };
  }
  var out = Module["print"] || console.log.bind(console);
  var err = Module["printErr"] || console.warn.bind(console);
  for (key in moduleOverrides) {
    if (moduleOverrides.hasOwnProperty(key)) {
      Module[key] = moduleOverrides[key];
    }
  }
  moduleOverrides = null;
  if (Module["arguments"]) {
    arguments_ = Module["arguments"];
  }
  var tempRet0 = 0;
  var setTempRet0 = function(value) {
    tempRet0 = value;
  };
  var getTempRet0 = function() {
    return tempRet0;
  };
  var GLOBAL_BASE = 8;
  function setValue(ptr, value, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        HEAP8[ptr >> 0] = value;
        break;
      case "i8":
        HEAP8[ptr >> 0] = value;
        break;
      case "i16":
        HEAP16[ptr >> 1] = value;
        break;
      case "i32":
        HEAP32[ptr >> 2] = value;
        break;
      case "i64":
        tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math_min(+Math_floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
        break;
      case "float":
        HEAPF32[ptr >> 2] = value;
        break;
      case "double":
        HEAPF64[ptr >> 3] = value;
        break;
      default:
        abort("invalid type for setValue: " + type);
    }
  }
  function getValue(ptr, type, noSafe) {
    type = type || "i8";
    if (type.charAt(type.length - 1) === "*") {
      type = "i32";
    }
    switch (type) {
      case "i1":
        return HEAP8[ptr >> 0];
      case "i8":
        return HEAP8[ptr >> 0];
      case "i16":
        return HEAP16[ptr >> 1];
      case "i32":
        return HEAP32[ptr >> 2];
      case "i64":
        return HEAP32[ptr >> 2];
      case "float":
        return HEAPF32[ptr >> 2];
      case "double":
        return HEAPF64[ptr >> 3];
      default:
        abort("invalid type for getValue: " + type);
    }
    return null;
  }
  var ABORT = false;
  function assert(condition, text) {
    if (!condition) {
      abort("Assertion failed: " + text);
    }
  }
  function getCFunc(ident) {
    var func = Module["_" + ident];
    assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
    return func;
  }
  function ccall(ident, returnType, argTypes, args, opts) {
    var toC = {
      "string": function(str) {
        var ret2 = 0;
        if (str !== null && str !== void 0 && str !== 0) {
          var len = (str.length << 2) + 1;
          ret2 = stackAlloc(len);
          stringToUTF8(str, ret2, len);
        }
        return ret2;
      },
      "array": function(arr) {
        var ret2 = stackAlloc(arr.length);
        writeArrayToMemory(arr, ret2);
        return ret2;
      }
    };
    function convertReturnValue(ret2) {
      if (returnType === "string") {
        return UTF8ToString(ret2);
      }
      if (returnType === "boolean") {
        return Boolean(ret2);
      }
      return ret2;
    }
    var func = getCFunc(ident);
    var cArgs = [];
    var stack2 = 0;
    if (args) {
      for (var i2 = 0; i2 < args.length; i2++) {
        var converter = toC[argTypes[i2]];
        if (converter) {
          if (stack2 === 0) {
            stack2 = stackSave();
          }
          cArgs[i2] = converter(args[i2]);
        } else {
          cArgs[i2] = args[i2];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    ret = convertReturnValue(ret);
    if (stack2 !== 0) {
      stackRestore(stack2);
    }
    return ret;
  }
  function cwrap(ident, returnType, argTypes, opts) {
    argTypes = argTypes || [];
    var numericArgs = argTypes.every(function(type) {
      return type === "number";
    });
    var numericRet = returnType !== "string";
    if (numericRet && numericArgs && !opts) {
      return getCFunc(ident);
    }
    return function() {
      return ccall(ident, returnType, argTypes, arguments, opts);
    };
  }
  var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : void 0;
  function UTF8ArrayToString(u8Array, idx, maxBytesToRead) {
    var endIdx = idx + maxBytesToRead;
    var endPtr = idx;
    while (u8Array[endPtr] && !(endPtr >= endIdx)) {
      ++endPtr;
    }
    if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
      return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
    } else {
      var str = "";
      while (idx < endPtr) {
        var u0 = u8Array[idx++];
        if (!(u0 & 128)) {
          str += String.fromCharCode(u0);
          continue;
        }
        var u1 = u8Array[idx++] & 63;
        if ((u0 & 224) == 192) {
          str += String.fromCharCode((u0 & 31) << 6 | u1);
          continue;
        }
        var u22 = u8Array[idx++] & 63;
        if ((u0 & 240) == 224) {
          u0 = (u0 & 15) << 12 | u1 << 6 | u22;
        } else {
          u0 = (u0 & 7) << 18 | u1 << 12 | u22 << 6 | u8Array[idx++] & 63;
        }
        if (u0 < 65536) {
          str += String.fromCharCode(u0);
        } else {
          var ch = u0 - 65536;
          str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
        }
      }
    }
    return str;
  }
  function UTF8ToString(ptr, maxBytesToRead) {
    return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
  }
  function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
    if (!(maxBytesToWrite > 0)) {
      return 0;
    }
    var startIdx = outIdx;
    var endIdx = outIdx + maxBytesToWrite - 1;
    for (var i2 = 0; i2 < str.length; ++i2) {
      var u5 = str.charCodeAt(i2);
      if (u5 >= 55296 && u5 <= 57343) {
        var u1 = str.charCodeAt(++i2);
        u5 = 65536 + ((u5 & 1023) << 10) | u1 & 1023;
      }
      if (u5 <= 127) {
        if (outIdx >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = u5;
      } else if (u5 <= 2047) {
        if (outIdx + 1 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 192 | u5 >> 6;
        outU8Array[outIdx++] = 128 | u5 & 63;
      } else if (u5 <= 65535) {
        if (outIdx + 2 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 224 | u5 >> 12;
        outU8Array[outIdx++] = 128 | u5 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u5 & 63;
      } else {
        if (outIdx + 3 >= endIdx) {
          break;
        }
        outU8Array[outIdx++] = 240 | u5 >> 18;
        outU8Array[outIdx++] = 128 | u5 >> 12 & 63;
        outU8Array[outIdx++] = 128 | u5 >> 6 & 63;
        outU8Array[outIdx++] = 128 | u5 & 63;
      }
    }
    outU8Array[outIdx] = 0;
    return outIdx - startIdx;
  }
  function stringToUTF8(str, outPtr, maxBytesToWrite) {
    return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
  }
  var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : void 0;
  function writeArrayToMemory(array3, buffer3) {
    HEAP8.set(array3, buffer3);
  }
  function alignUp(x2, multiple) {
    if (x2 % multiple > 0) {
      x2 += multiple - x2 % multiple;
    }
    return x2;
  }
  var buffer2, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
  function updateGlobalBufferAndViews(buf) {
    buffer2 = buf;
    Module["HEAP8"] = HEAP8 = new Int8Array(buf);
    Module["HEAP16"] = HEAP16 = new Int16Array(buf);
    Module["HEAP32"] = HEAP32 = new Int32Array(buf);
    Module["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
    Module["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
    Module["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
    Module["HEAPF32"] = HEAPF32 = new Float32Array(buf);
    Module["HEAPF64"] = HEAPF64 = new Float64Array(buf);
  }
  var DYNAMIC_BASE = 5271520, DYNAMICTOP_PTR = 28608;
  var INITIAL_TOTAL_MEMORY = Module["TOTAL_MEMORY"] || 33554432;
  if (Module["buffer"]) {
    buffer2 = Module["buffer"];
  } else {
    buffer2 = new ArrayBuffer(INITIAL_TOTAL_MEMORY);
  }
  INITIAL_TOTAL_MEMORY = buffer2.byteLength;
  updateGlobalBufferAndViews(buffer2);
  HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;
  function callRuntimeCallbacks(callbacks) {
    while (callbacks.length > 0) {
      var callback = callbacks.shift();
      if (typeof callback == "function") {
        callback();
        continue;
      }
      var func = callback.func;
      if (typeof func === "number") {
        if (callback.arg === void 0) {
          Module["dynCall_v"](func);
        } else {
          Module["dynCall_vi"](func, callback.arg);
        }
      } else {
        func(callback.arg === void 0 ? null : callback.arg);
      }
    }
  }
  var __ATPRERUN__ = [];
  var __ATINIT__ = [];
  var __ATMAIN__ = [];
  var __ATPOSTRUN__ = [];
  function preRun() {
    if (Module["preRun"]) {
      if (typeof Module["preRun"] == "function") {
        Module["preRun"] = [Module["preRun"]];
      }
      while (Module["preRun"].length) {
        addOnPreRun(Module["preRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPRERUN__);
  }
  function initRuntime() {
    callRuntimeCallbacks(__ATINIT__);
  }
  function preMain() {
    callRuntimeCallbacks(__ATMAIN__);
  }
  function postRun() {
    if (Module["postRun"]) {
      if (typeof Module["postRun"] == "function") {
        Module["postRun"] = [Module["postRun"]];
      }
      while (Module["postRun"].length) {
        addOnPostRun(Module["postRun"].shift());
      }
    }
    callRuntimeCallbacks(__ATPOSTRUN__);
  }
  function addOnPreRun(cb) {
    __ATPRERUN__.unshift(cb);
  }
  function addOnPostRun(cb) {
    __ATPOSTRUN__.unshift(cb);
  }
  var Math_abs = Math.abs;
  var Math_ceil = Math.ceil;
  var Math_floor = Math.floor;
  var Math_min = Math.min;
  var runDependencies = 0;
  var runDependencyWatcher = null;
  var dependenciesFulfilled = null;
  function addRunDependency(id2) {
    runDependencies++;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
  }
  function removeRunDependency(id2) {
    runDependencies--;
    if (Module["monitorRunDependencies"]) {
      Module["monitorRunDependencies"](runDependencies);
    }
    if (runDependencies == 0) {
      if (runDependencyWatcher !== null) {
        clearInterval(runDependencyWatcher);
        runDependencyWatcher = null;
      }
      if (dependenciesFulfilled) {
        var callback = dependenciesFulfilled;
        dependenciesFulfilled = null;
        callback();
      }
    }
  }
  Module["preloadedImages"] = {};
  Module["preloadedAudios"] = {};
  var memoryInitializer = null;
  var dataURIPrefix = "data:application/octet-stream;base64,";
  function isDataURI(filename) {
    return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;
  }
  var tempDouble;
  var tempI64;
  memoryInitializer = "data:application/octet-stream;base64,";
  var tempDoublePtr = 28624;
  function demangle(func) {
    return func;
  }
  function demangleAll(text) {
    var regex = /\b__Z[\w\d_]+/g;
    return text.replace(regex, function(x2) {
      var y2 = demangle(x2);
      return x2 === y2 ? x2 : y2 + " [" + x2 + "]";
    });
  }
  function jsStackTrace() {
    var err2 = new Error();
    if (!err2.stack) {
      try {
        throw new Error(0);
      } catch (e3) {
        err2 = e3;
      }
      if (!err2.stack) {
        return "(no stack trace available)";
      }
    }
    return err2.stack.toString();
  }
  function stackTrace() {
    var js = jsStackTrace();
    if (Module["extraStackTrace"]) {
      js += "\n" + Module["extraStackTrace"]();
    }
    return demangleAll(js);
  }
  function ___assert_fail(condition, filename, line, func) {
    abort("Assertion failed: " + UTF8ToString(condition) + ", at: " + [filename ? UTF8ToString(filename) : "unknown filename", line, func ? UTF8ToString(func) : "unknown function"]);
  }
  function _emscripten_get_heap_size() {
    return HEAP8.length;
  }
  function _emscripten_memcpy_big(dest, src, num) {
    HEAPU8.set(HEAPU8.subarray(src, src + num), dest);
  }
  function ___setErrNo(value) {
    if (Module["___errno_location"]) {
      HEAP32[Module["___errno_location"]() >> 2] = value;
    }
    return value;
  }
  function abortOnCannotGrowMemory(requestedSize) {
    abort("OOM");
  }
  function emscripten_realloc_buffer(size) {
    try {
      var newBuffer = new ArrayBuffer(size);
      if (newBuffer.byteLength != size) {
        return;
      }
      new Int8Array(newBuffer).set(HEAP8);
      _emscripten_replace_memory(newBuffer);
      updateGlobalBufferAndViews(newBuffer);
      return 1;
    } catch (e3) {
    }
  }
  function _emscripten_resize_heap(requestedSize) {
    var oldSize = _emscripten_get_heap_size();
    var PAGE_MULTIPLE = 16777216;
    var LIMIT = 2147483648 - PAGE_MULTIPLE;
    if (requestedSize > LIMIT) {
      return false;
    }
    var MIN_TOTAL_MEMORY = 16777216;
    var newSize = Math.max(oldSize, MIN_TOTAL_MEMORY);
    while (newSize < requestedSize) {
      if (newSize <= 536870912) {
        newSize = alignUp(2 * newSize, PAGE_MULTIPLE);
      } else {
        newSize = Math.min(alignUp((3 * newSize + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);
      }
    }
    var replacement = emscripten_realloc_buffer(newSize);
    if (!replacement) {
      return false;
    }
    return true;
  }
  var decodeBase64 = typeof atob === "function" ? atob : function(input) {
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    var output2 = "";
    var chr1, chr2, chr3;
    var enc1, enc2, enc3, enc4;
    var i2 = 0;
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    do {
      enc1 = keyStr.indexOf(input.charAt(i2++));
      enc2 = keyStr.indexOf(input.charAt(i2++));
      enc3 = keyStr.indexOf(input.charAt(i2++));
      enc4 = keyStr.indexOf(input.charAt(i2++));
      chr1 = enc1 << 2 | enc2 >> 4;
      chr2 = (enc2 & 15) << 4 | enc3 >> 2;
      chr3 = (enc3 & 3) << 6 | enc4;
      output2 = output2 + String.fromCharCode(chr1);
      if (enc3 !== 64) {
        output2 = output2 + String.fromCharCode(chr2);
      }
      if (enc4 !== 64) {
        output2 = output2 + String.fromCharCode(chr3);
      }
    } while (i2 < input.length);
    return output2;
  };
  function intArrayFromBase64(s2) {
    try {
      var decoded = decodeBase64(s2);
      var bytes = new Uint8Array(decoded.length);
      for (var i2 = 0; i2 < decoded.length; ++i2) {
        bytes[i2] = decoded.charCodeAt(i2);
      }
      return bytes;
    } catch (_2) {
      throw new Error("Converting base64 string to bytes failed.");
    }
  }
  function tryParseAsDataURI(filename) {
    if (!isDataURI(filename)) {
      return;
    }
    return intArrayFromBase64(filename.slice(dataURIPrefix.length));
  }
  var asmGlobalArg = {
    "Math": Math,
    "Int8Array": Int8Array,
    "Int32Array": Int32Array,
    "Uint8Array": Uint8Array,
    "Float32Array": Float32Array,
    "Float64Array": Float64Array
  };
  var asmLibraryArg = {
    "a": abort,
    "b": setTempRet0,
    "c": getTempRet0,
    "d": ___assert_fail,
    "e": ___setErrNo,
    "f": _emscripten_get_heap_size,
    "g": _emscripten_memcpy_big,
    "h": _emscripten_resize_heap,
    "i": abortOnCannotGrowMemory,
    "j": demangle,
    "k": demangleAll,
    "l": emscripten_realloc_buffer,
    "m": jsStackTrace,
    "n": stackTrace,
    "o": tempDoublePtr,
    "p": DYNAMICTOP_PTR
  };
  var asm = (
    /** @suppress {uselessCode} */
    function(global3, env, buffer3) {
      "almost asm";
      var a2 = new global3.Int8Array(buffer3), b = new global3.Int32Array(buffer3), c4 = new global3.Uint8Array(buffer3), d2 = new global3.Float32Array(buffer3), e3 = new global3.Float64Array(buffer3), f2 = env.o | 0, g2 = env.p | 0, p2 = global3.Math.floor, q2 = global3.Math.abs, r2 = global3.Math.sqrt, s2 = global3.Math.pow, t4 = global3.Math.cos, u5 = global3.Math.sin, v3 = global3.Math.tan, w4 = global3.Math.acos, x2 = global3.Math.asin, y2 = global3.Math.atan, z2 = global3.Math.atan2, A6 = global3.Math.ceil, B4 = global3.Math.imul, C4 = global3.Math.min, D4 = global3.Math.max, E3 = global3.Math.clz32, G2 = env.b, H = env.c, I2 = env.d, J = env.e, K3 = env.f, L2 = env.g, M3 = env.h, N2 = env.i, T2 = 28640;
      function W(newBuffer) {
        a2 = new Int8Array(newBuffer);
        c4 = new Uint8Array(newBuffer);
        b = new Int32Array(newBuffer);
        d2 = new Float32Array(newBuffer);
        e3 = new Float64Array(newBuffer);
        buffer3 = newBuffer;
        return true;
      }
      function X(a3) {
        a3 = a3 | 0;
        var b2 = 0;
        b2 = T2;
        T2 = T2 + a3 | 0;
        T2 = T2 + 15 & -16;
        return b2 | 0;
      }
      function Y() {
        return T2 | 0;
      }
      function Z(a3) {
        a3 = a3 | 0;
        T2 = a3;
      }
      function _2(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        T2 = a3;
      }
      function $2(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0;
        if ((a3 | 0) < 0) {
          c5 = 2;
          return c5 | 0;
        }
        if ((a3 | 0) > 13780509) {
          c5 = sc(15, c5) | 0;
          return c5 | 0;
        } else {
          d3 = ((a3 | 0) < 0) << 31 >> 31;
          f3 = Kd(a3 | 0, d3 | 0, 3, 0) | 0;
          e4 = H() | 0;
          d3 = Ed(a3 | 0, d3 | 0, 1, 0) | 0;
          d3 = Kd(f3 | 0, e4 | 0, d3 | 0, H() | 0) | 0;
          d3 = Ed(d3 | 0, H() | 0, 1, 0) | 0;
          a3 = H() | 0;
          b[c5 >> 2] = d3;
          b[c5 + 4 >> 2] = a3;
          c5 = 0;
          return c5 | 0;
        }
        return 0;
      }
      function aa2(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        return ba(a3, b2, c5, d3, 0) | 0;
      }
      function ba(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        j2 = T2;
        T2 = T2 + 16 | 0;
        h2 = j2;
        if (!(ca3(a3, c5, d3, e4, f3) | 0)) {
          e4 = 0;
          T2 = j2;
          return e4 | 0;
        }
        do {
          if ((d3 | 0) >= 0) {
            if ((d3 | 0) > 13780509) {
              g3 = sc(15, h2) | 0;
              if (g3 | 0) {
                break;
              }
              i2 = h2;
              h2 = b[i2 >> 2] | 0;
              i2 = b[i2 + 4 >> 2] | 0;
            } else {
              g3 = ((d3 | 0) < 0) << 31 >> 31;
              k2 = Kd(d3 | 0, g3 | 0, 3, 0) | 0;
              i2 = H() | 0;
              g3 = Ed(d3 | 0, g3 | 0, 1, 0) | 0;
              g3 = Kd(k2 | 0, i2 | 0, g3 | 0, H() | 0) | 0;
              g3 = Ed(g3 | 0, H() | 0, 1, 0) | 0;
              i2 = H() | 0;
              b[h2 >> 2] = g3;
              b[h2 + 4 >> 2] = i2;
              h2 = g3;
            }
            Vd(e4 | 0, 0, h2 << 3 | 0) | 0;
            if (f3 | 0) {
              Vd(f3 | 0, 0, h2 << 2 | 0) | 0;
              g3 = da2(a3, c5, d3, e4, f3, h2, i2, 0) | 0;
              break;
            }
            g3 = Dd(h2, 4) | 0;
            if (!g3) {
              g3 = 13;
            } else {
              k2 = da2(a3, c5, d3, e4, g3, h2, i2, 0) | 0;
              Cd(g3);
              g3 = k2;
            }
          } else {
            g3 = 2;
          }
        } while (0);
        k2 = g3;
        T2 = j2;
        return k2 | 0;
      }
      function ca3(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0;
        q3 = T2;
        T2 = T2 + 16 | 0;
        o2 = q3;
        p3 = q3 + 8 | 0;
        n2 = o2;
        b[n2 >> 2] = a3;
        b[n2 + 4 >> 2] = c5;
        if ((d3 | 0) < 0) {
          p3 = 2;
          T2 = q3;
          return p3 | 0;
        }
        g3 = e4;
        b[g3 >> 2] = a3;
        b[g3 + 4 >> 2] = c5;
        g3 = (f3 | 0) != 0;
        if (g3) {
          b[f3 >> 2] = 0;
        }
        if (Fb(a3, c5) | 0) {
          p3 = 9;
          T2 = q3;
          return p3 | 0;
        }
        b[p3 >> 2] = 0;
        a: do {
          if ((d3 | 0) >= 1) {
            if (g3) {
              l2 = 1;
              k2 = 0;
              m2 = 0;
              n2 = 1;
              g3 = a3;
              while (1) {
                if (!(k2 | m2)) {
                  g3 = ea2(g3, c5, 4, p3, o2) | 0;
                  if (g3 | 0) {
                    break a;
                  }
                  c5 = o2;
                  g3 = b[c5 >> 2] | 0;
                  c5 = b[c5 + 4 >> 2] | 0;
                  if (Fb(g3, c5) | 0) {
                    g3 = 9;
                    break a;
                  }
                }
                g3 = ea2(g3, c5, b[26800 + (m2 << 2) >> 2] | 0, p3, o2) | 0;
                if (g3 | 0) {
                  break a;
                }
                c5 = o2;
                g3 = b[c5 >> 2] | 0;
                c5 = b[c5 + 4 >> 2] | 0;
                a3 = e4 + (l2 << 3) | 0;
                b[a3 >> 2] = g3;
                b[a3 + 4 >> 2] = c5;
                b[f3 + (l2 << 2) >> 2] = n2;
                a3 = k2 + 1 | 0;
                h2 = (a3 | 0) == (n2 | 0);
                i2 = m2 + 1 | 0;
                j2 = (i2 | 0) == 6;
                if (Fb(g3, c5) | 0) {
                  g3 = 9;
                  break a;
                }
                n2 = n2 + (j2 & h2 & 1) | 0;
                if ((n2 | 0) > (d3 | 0)) {
                  g3 = 0;
                  break;
                } else {
                  l2 = l2 + 1 | 0;
                  k2 = h2 ? 0 : a3;
                  m2 = h2 ? j2 ? 0 : i2 : m2;
                }
              }
            } else {
              l2 = 1;
              k2 = 0;
              m2 = 0;
              n2 = 1;
              g3 = a3;
              while (1) {
                if (!(k2 | m2)) {
                  g3 = ea2(g3, c5, 4, p3, o2) | 0;
                  if (g3 | 0) {
                    break a;
                  }
                  c5 = o2;
                  g3 = b[c5 >> 2] | 0;
                  c5 = b[c5 + 4 >> 2] | 0;
                  if (Fb(g3, c5) | 0) {
                    g3 = 9;
                    break a;
                  }
                }
                g3 = ea2(g3, c5, b[26800 + (m2 << 2) >> 2] | 0, p3, o2) | 0;
                if (g3 | 0) {
                  break a;
                }
                c5 = o2;
                g3 = b[c5 >> 2] | 0;
                c5 = b[c5 + 4 >> 2] | 0;
                a3 = e4 + (l2 << 3) | 0;
                b[a3 >> 2] = g3;
                b[a3 + 4 >> 2] = c5;
                a3 = k2 + 1 | 0;
                h2 = (a3 | 0) == (n2 | 0);
                i2 = m2 + 1 | 0;
                j2 = (i2 | 0) == 6;
                if (Fb(g3, c5) | 0) {
                  g3 = 9;
                  break a;
                }
                n2 = n2 + (j2 & h2 & 1) | 0;
                if ((n2 | 0) > (d3 | 0)) {
                  g3 = 0;
                  break;
                } else {
                  l2 = l2 + 1 | 0;
                  k2 = h2 ? 0 : a3;
                  m2 = h2 ? j2 ? 0 : i2 : m2;
                }
              }
            }
          } else {
            g3 = 0;
          }
        } while (0);
        p3 = g3;
        T2 = q3;
        return p3 | 0;
      }
      function da2(a3, c5, d3, e4, f3, g3, h2, i2) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        h2 = h2 | 0;
        i2 = i2 | 0;
        var j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0;
        q3 = T2;
        T2 = T2 + 16 | 0;
        o2 = q3 + 8 | 0;
        p3 = q3;
        j2 = Md(a3 | 0, c5 | 0, g3 | 0, h2 | 0) | 0;
        l2 = H() | 0;
        m2 = e4 + (j2 << 3) | 0;
        r3 = m2;
        s3 = b[r3 >> 2] | 0;
        r3 = b[r3 + 4 >> 2] | 0;
        k2 = (s3 | 0) == (a3 | 0) & (r3 | 0) == (c5 | 0);
        if (!((s3 | 0) == 0 & (r3 | 0) == 0 | k2)) {
          do {
            j2 = Ed(j2 | 0, l2 | 0, 1, 0) | 0;
            j2 = Ld(j2 | 0, H() | 0, g3 | 0, h2 | 0) | 0;
            l2 = H() | 0;
            m2 = e4 + (j2 << 3) | 0;
            s3 = m2;
            r3 = b[s3 >> 2] | 0;
            s3 = b[s3 + 4 >> 2] | 0;
            k2 = (r3 | 0) == (a3 | 0) & (s3 | 0) == (c5 | 0);
          } while (!((r3 | 0) == 0 & (s3 | 0) == 0 | k2));
        }
        j2 = f3 + (j2 << 2) | 0;
        if (k2 ? (b[j2 >> 2] | 0) <= (i2 | 0) : 0) {
          s3 = 0;
          T2 = q3;
          return s3 | 0;
        }
        s3 = m2;
        b[s3 >> 2] = a3;
        b[s3 + 4 >> 2] = c5;
        b[j2 >> 2] = i2;
        if ((i2 | 0) >= (d3 | 0)) {
          s3 = 0;
          T2 = q3;
          return s3 | 0;
        }
        k2 = i2 + 1 | 0;
        b[o2 >> 2] = 0;
        j2 = ea2(a3, c5, 2, o2, p3) | 0;
        switch (j2 | 0) {
          case 9: {
            n2 = 9;
            break;
          }
          case 0: {
            j2 = p3;
            j2 = da2(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e4, f3, g3, h2, k2) | 0;
            if (!j2) {
              n2 = 9;
            }
            break;
          }
          default:
        }
        a: do {
          if ((n2 | 0) == 9) {
            b[o2 >> 2] = 0;
            j2 = ea2(a3, c5, 3, o2, p3) | 0;
            switch (j2 | 0) {
              case 9:
                break;
              case 0: {
                j2 = p3;
                j2 = da2(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e4, f3, g3, h2, k2) | 0;
                if (j2 | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o2 >> 2] = 0;
            j2 = ea2(a3, c5, 1, o2, p3) | 0;
            switch (j2 | 0) {
              case 9:
                break;
              case 0: {
                j2 = p3;
                j2 = da2(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e4, f3, g3, h2, k2) | 0;
                if (j2 | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o2 >> 2] = 0;
            j2 = ea2(a3, c5, 5, o2, p3) | 0;
            switch (j2 | 0) {
              case 9:
                break;
              case 0: {
                j2 = p3;
                j2 = da2(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e4, f3, g3, h2, k2) | 0;
                if (j2 | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o2 >> 2] = 0;
            j2 = ea2(a3, c5, 4, o2, p3) | 0;
            switch (j2 | 0) {
              case 9:
                break;
              case 0: {
                j2 = p3;
                j2 = da2(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e4, f3, g3, h2, k2) | 0;
                if (j2 | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            b[o2 >> 2] = 0;
            j2 = ea2(a3, c5, 6, o2, p3) | 0;
            switch (j2 | 0) {
              case 9:
                break;
              case 0: {
                j2 = p3;
                j2 = da2(b[j2 >> 2] | 0, b[j2 + 4 >> 2] | 0, d3, e4, f3, g3, h2, k2) | 0;
                if (j2 | 0) {
                  break a;
                }
                break;
              }
              default:
                break a;
            }
            s3 = 0;
            T2 = q3;
            return s3 | 0;
          }
        } while (0);
        s3 = j2;
        T2 = q3;
        return s3 | 0;
      }
      function ea2(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        if (d3 >>> 0 > 6) {
          f3 = 1;
          return f3 | 0;
        }
        m2 = (b[e4 >> 2] | 0) % 6 | 0;
        b[e4 >> 2] = m2;
        if ((m2 | 0) > 0) {
          g3 = 0;
          do {
            d3 = Za(d3) | 0;
            g3 = g3 + 1 | 0;
          } while ((g3 | 0) < (b[e4 >> 2] | 0));
        }
        m2 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        l2 = m2 & 127;
        if (l2 >>> 0 > 121) {
          f3 = 5;
          return f3 | 0;
        }
        j2 = Nb(a3, c5) | 0;
        g3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        a: do {
          if (!g3) {
            k2 = 8;
          } else {
            while (1) {
              h2 = (15 - g3 | 0) * 3 | 0;
              i2 = Od(a3 | 0, c5 | 0, h2 | 0) | 0;
              H() | 0;
              i2 = i2 & 7;
              if ((i2 | 0) == 7) {
                c5 = 5;
                break;
              }
              p3 = (Tb(g3) | 0) == 0;
              g3 = g3 + -1 | 0;
              n2 = Pd(7, 0, h2 | 0) | 0;
              c5 = c5 & ~(H() | 0);
              o2 = Pd(b[(p3 ? 432 : 16) + (i2 * 28 | 0) + (d3 << 2) >> 2] | 0, 0, h2 | 0) | 0;
              h2 = H() | 0;
              d3 = b[(p3 ? 640 : 224) + (i2 * 28 | 0) + (d3 << 2) >> 2] | 0;
              a3 = o2 | a3 & ~n2;
              c5 = h2 | c5;
              if (!d3) {
                d3 = 0;
                break a;
              }
              if (!g3) {
                k2 = 8;
                break a;
              }
            }
            return c5 | 0;
          }
        } while (0);
        if ((k2 | 0) == 8) {
          p3 = b[848 + (l2 * 28 | 0) + (d3 << 2) >> 2] | 0;
          o2 = Pd(p3 | 0, 0, 45) | 0;
          a3 = o2 | a3;
          c5 = H() | 0 | c5 & -1040385;
          d3 = b[4272 + (l2 * 28 | 0) + (d3 << 2) >> 2] | 0;
          if ((p3 & 127 | 0) == 127) {
            p3 = Pd(b[848 + (l2 * 28 | 0) + 20 >> 2] | 0, 0, 45) | 0;
            c5 = H() | 0 | c5 & -1040385;
            d3 = b[4272 + (l2 * 28 | 0) + 20 >> 2] | 0;
            a3 = Pb(p3 | a3, c5) | 0;
            c5 = H() | 0;
            b[e4 >> 2] = (b[e4 >> 2] | 0) + 1;
          }
        }
        i2 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        i2 = i2 & 127;
        b: do {
          if (!(ma(i2) | 0)) {
            if ((d3 | 0) > 0) {
              g3 = 0;
              do {
                a3 = Pb(a3, c5) | 0;
                c5 = H() | 0;
                g3 = g3 + 1 | 0;
              } while ((g3 | 0) != (d3 | 0));
            }
          } else {
            c: do {
              if ((Nb(a3, c5) | 0) == 1) {
                if ((l2 | 0) != (i2 | 0)) {
                  if (sa(i2, b[7696 + (l2 * 28 | 0) >> 2] | 0) | 0) {
                    a3 = Rb(a3, c5) | 0;
                    h2 = 1;
                    c5 = H() | 0;
                    break;
                  } else {
                    I2(27795, 26864, 436, 26872);
                  }
                }
                switch (j2 | 0) {
                  case 3: {
                    a3 = Pb(a3, c5) | 0;
                    c5 = H() | 0;
                    b[e4 >> 2] = (b[e4 >> 2] | 0) + 1;
                    h2 = 0;
                    break c;
                  }
                  case 5: {
                    a3 = Rb(a3, c5) | 0;
                    c5 = H() | 0;
                    b[e4 >> 2] = (b[e4 >> 2] | 0) + 5;
                    h2 = 0;
                    break c;
                  }
                  case 0: {
                    p3 = 9;
                    return p3 | 0;
                  }
                  default: {
                    p3 = 1;
                    return p3 | 0;
                  }
                }
              } else {
                h2 = 0;
              }
            } while (0);
            if ((d3 | 0) > 0) {
              g3 = 0;
              do {
                a3 = Ob(a3, c5) | 0;
                c5 = H() | 0;
                g3 = g3 + 1 | 0;
              } while ((g3 | 0) != (d3 | 0));
            }
            if ((l2 | 0) != (i2 | 0)) {
              if (!(na(i2) | 0)) {
                if ((h2 | 0) != 0 | (Nb(a3, c5) | 0) != 5) {
                  break;
                }
                b[e4 >> 2] = (b[e4 >> 2] | 0) + 1;
                break;
              }
              switch (m2 & 127) {
                case 8:
                case 118:
                  break b;
                default:
              }
              if ((Nb(a3, c5) | 0) != 3) {
                b[e4 >> 2] = (b[e4 >> 2] | 0) + 1;
              }
            }
          }
        } while (0);
        b[e4 >> 2] = ((b[e4 >> 2] | 0) + d3 | 0) % 6 | 0;
        p3 = f3;
        b[p3 >> 2] = a3;
        b[p3 + 4 >> 2] = c5;
        p3 = 0;
        return p3 | 0;
      }
      function fa(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        i2 = T2;
        T2 = T2 + 16 | 0;
        g3 = i2;
        h2 = i2 + 8 | 0;
        f3 = (Fb(a3, c5) | 0) == 0;
        f3 = f3 ? 1 : 2;
        while (1) {
          b[h2 >> 2] = 0;
          k2 = (ea2(a3, c5, f3, h2, g3) | 0) == 0;
          j2 = g3;
          if (k2 & ((b[j2 >> 2] | 0) == (d3 | 0) ? (b[j2 + 4 >> 2] | 0) == (e4 | 0) : 0)) {
            a3 = 4;
            break;
          }
          f3 = f3 + 1 | 0;
          if (f3 >>> 0 >= 7) {
            f3 = 7;
            a3 = 4;
            break;
          }
        }
        if ((a3 | 0) == 4) {
          T2 = i2;
          return f3 | 0;
        }
        return 0;
      }
      function ga(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        p3 = T2;
        T2 = T2 + 16 | 0;
        n2 = p3;
        o2 = p3 + 8 | 0;
        m2 = n2;
        b[m2 >> 2] = a3;
        b[m2 + 4 >> 2] = c5;
        if (!d3) {
          o2 = e4;
          b[o2 >> 2] = a3;
          b[o2 + 4 >> 2] = c5;
          o2 = 0;
          T2 = p3;
          return o2 | 0;
        }
        b[o2 >> 2] = 0;
        a: do {
          if (!(Fb(a3, c5) | 0)) {
            g3 = (d3 | 0) > 0;
            if (g3) {
              f3 = 0;
              m2 = a3;
              do {
                a3 = ea2(m2, c5, 4, o2, n2) | 0;
                if (a3 | 0) {
                  break a;
                }
                c5 = n2;
                m2 = b[c5 >> 2] | 0;
                c5 = b[c5 + 4 >> 2] | 0;
                f3 = f3 + 1 | 0;
                if (Fb(m2, c5) | 0) {
                  a3 = 9;
                  break a;
                }
              } while ((f3 | 0) < (d3 | 0));
              l2 = e4;
              b[l2 >> 2] = m2;
              b[l2 + 4 >> 2] = c5;
              l2 = d3 + -1 | 0;
              if (g3) {
                k2 = 0;
                a3 = 1;
                do {
                  f3 = 26800 + (k2 << 2) | 0;
                  if ((k2 | 0) == 5) {
                    h2 = b[f3 >> 2] | 0;
                    g3 = 0;
                    f3 = a3;
                    while (1) {
                      a3 = n2;
                      a3 = ea2(b[a3 >> 2] | 0, b[a3 + 4 >> 2] | 0, h2, o2, n2) | 0;
                      if (a3 | 0) {
                        break a;
                      }
                      if ((g3 | 0) != (l2 | 0)) {
                        j2 = n2;
                        i2 = b[j2 >> 2] | 0;
                        j2 = b[j2 + 4 >> 2] | 0;
                        a3 = e4 + (f3 << 3) | 0;
                        b[a3 >> 2] = i2;
                        b[a3 + 4 >> 2] = j2;
                        if (!(Fb(i2, j2) | 0)) {
                          a3 = f3 + 1 | 0;
                        } else {
                          a3 = 9;
                          break a;
                        }
                      } else {
                        a3 = f3;
                      }
                      g3 = g3 + 1 | 0;
                      if ((g3 | 0) >= (d3 | 0)) {
                        break;
                      } else {
                        f3 = a3;
                      }
                    }
                  } else {
                    h2 = n2;
                    j2 = b[f3 >> 2] | 0;
                    i2 = 0;
                    f3 = a3;
                    g3 = b[h2 >> 2] | 0;
                    h2 = b[h2 + 4 >> 2] | 0;
                    while (1) {
                      a3 = ea2(g3, h2, j2, o2, n2) | 0;
                      if (a3 | 0) {
                        break a;
                      }
                      h2 = n2;
                      g3 = b[h2 >> 2] | 0;
                      h2 = b[h2 + 4 >> 2] | 0;
                      a3 = e4 + (f3 << 3) | 0;
                      b[a3 >> 2] = g3;
                      b[a3 + 4 >> 2] = h2;
                      a3 = f3 + 1 | 0;
                      if (Fb(g3, h2) | 0) {
                        a3 = 9;
                        break a;
                      }
                      i2 = i2 + 1 | 0;
                      if ((i2 | 0) >= (d3 | 0)) {
                        break;
                      } else {
                        f3 = a3;
                      }
                    }
                  }
                  k2 = k2 + 1 | 0;
                } while (k2 >>> 0 < 6);
                a3 = n2;
                h2 = m2;
                f3 = b[a3 >> 2] | 0;
                g3 = c5;
                a3 = b[a3 + 4 >> 2] | 0;
              } else {
                h2 = m2;
                f3 = m2;
                g3 = c5;
                a3 = c5;
              }
            } else {
              h2 = e4;
              b[h2 >> 2] = a3;
              b[h2 + 4 >> 2] = c5;
              h2 = a3;
              f3 = a3;
              g3 = c5;
              a3 = c5;
            }
            a3 = (h2 | 0) == (f3 | 0) & (g3 | 0) == (a3 | 0) ? 0 : 9;
          } else {
            a3 = 9;
          }
        } while (0);
        o2 = a3;
        T2 = p3;
        return o2 | 0;
      }
      function ha(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        i2 = T2;
        T2 = T2 + 48 | 0;
        f3 = i2 + 16 | 0;
        g3 = i2 + 8 | 0;
        h2 = i2;
        d3 = Vc(d3) | 0;
        if (d3 | 0) {
          h2 = d3;
          T2 = i2;
          return h2 | 0;
        }
        k2 = a3;
        j2 = b[k2 + 4 >> 2] | 0;
        d3 = g3;
        b[d3 >> 2] = b[k2 >> 2];
        b[d3 + 4 >> 2] = j2;
        Uc(g3, f3);
        d3 = Fa(f3, c5, h2) | 0;
        if (!d3) {
          c5 = b[g3 >> 2] | 0;
          g3 = b[a3 + 8 >> 2] | 0;
          if ((g3 | 0) > 0) {
            f3 = b[a3 + 12 >> 2] | 0;
            d3 = 0;
            do {
              c5 = (b[f3 + (d3 << 3) >> 2] | 0) + c5 | 0;
              d3 = d3 + 1 | 0;
            } while ((d3 | 0) < (g3 | 0));
          }
          d3 = h2;
          f3 = b[d3 >> 2] | 0;
          d3 = b[d3 + 4 >> 2] | 0;
          g3 = ((c5 | 0) < 0) << 31 >> 31;
          if ((d3 | 0) < (g3 | 0) | (d3 | 0) == (g3 | 0) & f3 >>> 0 < c5 >>> 0) {
            d3 = h2;
            b[d3 >> 2] = c5;
            b[d3 + 4 >> 2] = g3;
            d3 = g3;
          } else {
            c5 = f3;
          }
          j2 = Ed(c5 | 0, d3 | 0, 12, 0) | 0;
          k2 = H() | 0;
          d3 = h2;
          b[d3 >> 2] = j2;
          b[d3 + 4 >> 2] = k2;
          d3 = e4;
          b[d3 >> 2] = j2;
          b[d3 + 4 >> 2] = k2;
          d3 = 0;
        }
        k2 = d3;
        T2 = i2;
        return k2 | 0;
      }
      function ia(a3, c5, d3, f3, g3, h2, i2) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        h2 = h2 | 0;
        i2 = i2 | 0;
        var j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E4 = 0, F2 = 0, G3 = 0, I3 = 0, J2 = 0, K4 = 0, L3 = 0, M4 = 0;
        I3 = T2;
        T2 = T2 + 64 | 0;
        D5 = I3 + 48 | 0;
        E4 = I3 + 32 | 0;
        F2 = I3 + 24 | 0;
        x3 = I3 + 8 | 0;
        y3 = I3;
        k2 = b[a3 >> 2] | 0;
        if ((k2 | 0) <= 0) {
          G3 = 0;
          T2 = I3;
          return G3 | 0;
        }
        z3 = a3 + 4 | 0;
        A7 = D5 + 8 | 0;
        B5 = E4 + 8 | 0;
        C5 = x3 + 8 | 0;
        j2 = 0;
        v4 = 0;
        while (1) {
          l2 = b[z3 >> 2] | 0;
          u6 = l2 + (v4 << 4) | 0;
          b[D5 >> 2] = b[u6 >> 2];
          b[D5 + 4 >> 2] = b[u6 + 4 >> 2];
          b[D5 + 8 >> 2] = b[u6 + 8 >> 2];
          b[D5 + 12 >> 2] = b[u6 + 12 >> 2];
          if ((v4 | 0) == (k2 + -1 | 0)) {
            b[E4 >> 2] = b[l2 >> 2];
            b[E4 + 4 >> 2] = b[l2 + 4 >> 2];
            b[E4 + 8 >> 2] = b[l2 + 8 >> 2];
            b[E4 + 12 >> 2] = b[l2 + 12 >> 2];
          } else {
            u6 = l2 + (v4 + 1 << 4) | 0;
            b[E4 >> 2] = b[u6 >> 2];
            b[E4 + 4 >> 2] = b[u6 + 4 >> 2];
            b[E4 + 8 >> 2] = b[u6 + 8 >> 2];
            b[E4 + 12 >> 2] = b[u6 + 12 >> 2];
          }
          k2 = Ga(D5, E4, f3, F2) | 0;
          a: do {
            if (!k2) {
              k2 = F2;
              l2 = b[k2 >> 2] | 0;
              k2 = b[k2 + 4 >> 2] | 0;
              if ((k2 | 0) > 0 | (k2 | 0) == 0 & l2 >>> 0 > 0) {
                t5 = 0;
                u6 = 0;
                b: while (1) {
                  K4 = 1 / (+(l2 >>> 0) + 4294967296 * +(k2 | 0));
                  M4 = +e3[D5 >> 3];
                  k2 = Fd(l2 | 0, k2 | 0, t5 | 0, u6 | 0) | 0;
                  L3 = +(k2 >>> 0) + 4294967296 * +(H() | 0);
                  J2 = +(t5 >>> 0) + 4294967296 * +(u6 | 0);
                  e3[x3 >> 3] = K4 * (M4 * L3) + K4 * (+e3[E4 >> 3] * J2);
                  e3[C5 >> 3] = K4 * (+e3[A7 >> 3] * L3) + K4 * (+e3[B5 >> 3] * J2);
                  k2 = Ub(x3, f3, y3) | 0;
                  if (k2 | 0) {
                    j2 = k2;
                    break;
                  }
                  s3 = y3;
                  r3 = b[s3 >> 2] | 0;
                  s3 = b[s3 + 4 >> 2] | 0;
                  o2 = Md(r3 | 0, s3 | 0, c5 | 0, d3 | 0) | 0;
                  m2 = H() | 0;
                  k2 = i2 + (o2 << 3) | 0;
                  n2 = k2;
                  l2 = b[n2 >> 2] | 0;
                  n2 = b[n2 + 4 >> 2] | 0;
                  c: do {
                    if ((l2 | 0) == 0 & (n2 | 0) == 0) {
                      w5 = k2;
                      G3 = 16;
                    } else {
                      p3 = 0;
                      q3 = 0;
                      while (1) {
                        if ((p3 | 0) > (d3 | 0) | (p3 | 0) == (d3 | 0) & q3 >>> 0 > c5 >>> 0) {
                          j2 = 1;
                          break b;
                        }
                        if ((l2 | 0) == (r3 | 0) & (n2 | 0) == (s3 | 0)) {
                          break c;
                        }
                        k2 = Ed(o2 | 0, m2 | 0, 1, 0) | 0;
                        o2 = Ld(k2 | 0, H() | 0, c5 | 0, d3 | 0) | 0;
                        m2 = H() | 0;
                        q3 = Ed(q3 | 0, p3 | 0, 1, 0) | 0;
                        p3 = H() | 0;
                        k2 = i2 + (o2 << 3) | 0;
                        n2 = k2;
                        l2 = b[n2 >> 2] | 0;
                        n2 = b[n2 + 4 >> 2] | 0;
                        if ((l2 | 0) == 0 & (n2 | 0) == 0) {
                          w5 = k2;
                          G3 = 16;
                          break;
                        }
                      }
                    }
                  } while (0);
                  if ((G3 | 0) == 16 ? (G3 = 0, !((r3 | 0) == 0 & (s3 | 0) == 0)) : 0) {
                    q3 = w5;
                    b[q3 >> 2] = r3;
                    b[q3 + 4 >> 2] = s3;
                    q3 = h2 + (b[g3 >> 2] << 3) | 0;
                    b[q3 >> 2] = r3;
                    b[q3 + 4 >> 2] = s3;
                    q3 = g3;
                    q3 = Ed(b[q3 >> 2] | 0, b[q3 + 4 >> 2] | 0, 1, 0) | 0;
                    r3 = H() | 0;
                    s3 = g3;
                    b[s3 >> 2] = q3;
                    b[s3 + 4 >> 2] = r3;
                  }
                  t5 = Ed(t5 | 0, u6 | 0, 1, 0) | 0;
                  u6 = H() | 0;
                  k2 = F2;
                  l2 = b[k2 >> 2] | 0;
                  k2 = b[k2 + 4 >> 2] | 0;
                  if (!((k2 | 0) > (u6 | 0) | (k2 | 0) == (u6 | 0) & l2 >>> 0 > t5 >>> 0)) {
                    l2 = 1;
                    break a;
                  }
                }
                l2 = 0;
              } else {
                l2 = 1;
              }
            } else {
              l2 = 0;
              j2 = k2;
            }
          } while (0);
          v4 = v4 + 1 | 0;
          if (!l2) {
            G3 = 21;
            break;
          }
          k2 = b[a3 >> 2] | 0;
          if ((v4 | 0) >= (k2 | 0)) {
            j2 = 0;
            G3 = 21;
            break;
          }
        }
        if ((G3 | 0) == 21) {
          T2 = I3;
          return j2 | 0;
        }
        return 0;
      }
      function ja(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E4 = 0, F2 = 0, G3 = 0, I3 = 0, J2 = 0, K4 = 0;
        K4 = T2;
        T2 = T2 + 112 | 0;
        F2 = K4 + 80 | 0;
        j2 = K4 + 72 | 0;
        G3 = K4;
        I3 = K4 + 56 | 0;
        f3 = Vc(d3) | 0;
        if (f3 | 0) {
          J2 = f3;
          T2 = K4;
          return J2 | 0;
        }
        k2 = a3 + 8 | 0;
        J2 = Bd((b[k2 >> 2] << 5) + 32 | 0) | 0;
        if (!J2) {
          J2 = 13;
          T2 = K4;
          return J2 | 0;
        }
        Wc(a3, J2);
        f3 = Vc(d3) | 0;
        if (!f3) {
          D5 = a3;
          E4 = b[D5 + 4 >> 2] | 0;
          f3 = j2;
          b[f3 >> 2] = b[D5 >> 2];
          b[f3 + 4 >> 2] = E4;
          Uc(j2, F2);
          f3 = Fa(F2, c5, G3) | 0;
          if (!f3) {
            f3 = b[j2 >> 2] | 0;
            g3 = b[k2 >> 2] | 0;
            if ((g3 | 0) > 0) {
              h2 = b[a3 + 12 >> 2] | 0;
              d3 = 0;
              do {
                f3 = (b[h2 + (d3 << 3) >> 2] | 0) + f3 | 0;
                d3 = d3 + 1 | 0;
              } while ((d3 | 0) != (g3 | 0));
              d3 = f3;
            } else {
              d3 = f3;
            }
            f3 = G3;
            g3 = b[f3 >> 2] | 0;
            f3 = b[f3 + 4 >> 2] | 0;
            h2 = ((d3 | 0) < 0) << 31 >> 31;
            if ((f3 | 0) < (h2 | 0) | (f3 | 0) == (h2 | 0) & g3 >>> 0 < d3 >>> 0) {
              f3 = G3;
              b[f3 >> 2] = d3;
              b[f3 + 4 >> 2] = h2;
              f3 = h2;
            } else {
              d3 = g3;
            }
            D5 = Ed(d3 | 0, f3 | 0, 12, 0) | 0;
            E4 = H() | 0;
            f3 = G3;
            b[f3 >> 2] = D5;
            b[f3 + 4 >> 2] = E4;
            f3 = 0;
          } else {
            D5 = 0;
            E4 = 0;
          }
          if (!f3) {
            d3 = Dd(D5, 8) | 0;
            if (!d3) {
              Cd(J2);
              J2 = 13;
              T2 = K4;
              return J2 | 0;
            }
            i2 = Dd(D5, 8) | 0;
            if (!i2) {
              Cd(J2);
              Cd(d3);
              J2 = 13;
              T2 = K4;
              return J2 | 0;
            }
            B5 = F2;
            b[B5 >> 2] = 0;
            b[B5 + 4 >> 2] = 0;
            B5 = a3;
            C5 = b[B5 + 4 >> 2] | 0;
            f3 = j2;
            b[f3 >> 2] = b[B5 >> 2];
            b[f3 + 4 >> 2] = C5;
            f3 = ia(j2, D5, E4, c5, F2, d3, i2) | 0;
            a: do {
              if (!f3) {
                b: do {
                  if ((b[k2 >> 2] | 0) > 0) {
                    h2 = a3 + 12 | 0;
                    g3 = 0;
                    while (1) {
                      f3 = ia((b[h2 >> 2] | 0) + (g3 << 3) | 0, D5, E4, c5, F2, d3, i2) | 0;
                      g3 = g3 + 1 | 0;
                      if (f3 | 0) {
                        break;
                      }
                      if ((g3 | 0) >= (b[k2 >> 2] | 0)) {
                        break b;
                      }
                    }
                    Cd(d3);
                    Cd(i2);
                    Cd(J2);
                    break a;
                  }
                } while (0);
                if ((E4 | 0) > 0 | (E4 | 0) == 0 & D5 >>> 0 > 0) {
                  Vd(i2 | 0, 0, D5 << 3 | 0) | 0;
                }
                C5 = F2;
                B5 = b[C5 + 4 >> 2] | 0;
                c: do {
                  if ((B5 | 0) > 0 | (B5 | 0) == 0 & (b[C5 >> 2] | 0) >>> 0 > 0) {
                    y3 = d3;
                    z3 = i2;
                    A7 = d3;
                    B5 = i2;
                    C5 = d3;
                    f3 = d3;
                    v4 = d3;
                    w5 = i2;
                    x3 = i2;
                    d3 = i2;
                    d: while (1) {
                      r3 = 0;
                      s3 = 0;
                      t5 = 0;
                      u6 = 0;
                      g3 = 0;
                      h2 = 0;
                      while (1) {
                        i2 = G3;
                        j2 = i2 + 56 | 0;
                        do {
                          b[i2 >> 2] = 0;
                          i2 = i2 + 4 | 0;
                        } while ((i2 | 0) < (j2 | 0));
                        c5 = y3 + (r3 << 3) | 0;
                        k2 = b[c5 >> 2] | 0;
                        c5 = b[c5 + 4 >> 2] | 0;
                        if (ca3(k2, c5, 1, G3, 0) | 0) {
                          i2 = G3;
                          j2 = i2 + 56 | 0;
                          do {
                            b[i2 >> 2] = 0;
                            i2 = i2 + 4 | 0;
                          } while ((i2 | 0) < (j2 | 0));
                          i2 = Dd(7, 4) | 0;
                          if (i2 | 0) {
                            da2(k2, c5, 1, G3, i2, 7, 0, 0) | 0;
                            Cd(i2);
                          }
                        }
                        q3 = 0;
                        while (1) {
                          p3 = G3 + (q3 << 3) | 0;
                          o2 = b[p3 >> 2] | 0;
                          p3 = b[p3 + 4 >> 2] | 0;
                          e: do {
                            if ((o2 | 0) == 0 & (p3 | 0) == 0) {
                              i2 = g3;
                              j2 = h2;
                            } else {
                              l2 = Md(o2 | 0, p3 | 0, D5 | 0, E4 | 0) | 0;
                              k2 = H() | 0;
                              i2 = e4 + (l2 << 3) | 0;
                              c5 = i2;
                              j2 = b[c5 >> 2] | 0;
                              c5 = b[c5 + 4 >> 2] | 0;
                              if (!((j2 | 0) == 0 & (c5 | 0) == 0)) {
                                m2 = 0;
                                n2 = 0;
                                do {
                                  if ((m2 | 0) > (E4 | 0) | (m2 | 0) == (E4 | 0) & n2 >>> 0 > D5 >>> 0) {
                                    break d;
                                  }
                                  if ((j2 | 0) == (o2 | 0) & (c5 | 0) == (p3 | 0)) {
                                    i2 = g3;
                                    j2 = h2;
                                    break e;
                                  }
                                  i2 = Ed(l2 | 0, k2 | 0, 1, 0) | 0;
                                  l2 = Ld(i2 | 0, H() | 0, D5 | 0, E4 | 0) | 0;
                                  k2 = H() | 0;
                                  n2 = Ed(n2 | 0, m2 | 0, 1, 0) | 0;
                                  m2 = H() | 0;
                                  i2 = e4 + (l2 << 3) | 0;
                                  c5 = i2;
                                  j2 = b[c5 >> 2] | 0;
                                  c5 = b[c5 + 4 >> 2] | 0;
                                } while (!((j2 | 0) == 0 & (c5 | 0) == 0));
                              }
                              if ((o2 | 0) == 0 & (p3 | 0) == 0) {
                                i2 = g3;
                                j2 = h2;
                                break;
                              }
                              Xb(o2, p3, I3) | 0;
                              if (Xc(a3, J2, I3) | 0) {
                                n2 = Ed(g3 | 0, h2 | 0, 1, 0) | 0;
                                h2 = H() | 0;
                                m2 = i2;
                                b[m2 >> 2] = o2;
                                b[m2 + 4 >> 2] = p3;
                                g3 = z3 + (g3 << 3) | 0;
                                b[g3 >> 2] = o2;
                                b[g3 + 4 >> 2] = p3;
                                g3 = n2;
                              }
                              i2 = g3;
                              j2 = h2;
                            }
                          } while (0);
                          q3 = q3 + 1 | 0;
                          if (q3 >>> 0 >= 7) {
                            break;
                          } else {
                            g3 = i2;
                            h2 = j2;
                          }
                        }
                        r3 = Ed(r3 | 0, s3 | 0, 1, 0) | 0;
                        s3 = H() | 0;
                        t5 = Ed(t5 | 0, u6 | 0, 1, 0) | 0;
                        u6 = H() | 0;
                        h2 = F2;
                        g3 = b[h2 >> 2] | 0;
                        h2 = b[h2 + 4 >> 2] | 0;
                        if (!((u6 | 0) < (h2 | 0) | (u6 | 0) == (h2 | 0) & t5 >>> 0 < g3 >>> 0)) {
                          break;
                        } else {
                          g3 = i2;
                          h2 = j2;
                        }
                      }
                      if ((h2 | 0) > 0 | (h2 | 0) == 0 & g3 >>> 0 > 0) {
                        g3 = 0;
                        h2 = 0;
                        do {
                          u6 = y3 + (g3 << 3) | 0;
                          b[u6 >> 2] = 0;
                          b[u6 + 4 >> 2] = 0;
                          g3 = Ed(g3 | 0, h2 | 0, 1, 0) | 0;
                          h2 = H() | 0;
                          u6 = F2;
                          t5 = b[u6 + 4 >> 2] | 0;
                        } while ((h2 | 0) < (t5 | 0) | ((h2 | 0) == (t5 | 0) ? g3 >>> 0 < (b[u6 >> 2] | 0) >>> 0 : 0));
                      }
                      u6 = F2;
                      b[u6 >> 2] = i2;
                      b[u6 + 4 >> 2] = j2;
                      if ((j2 | 0) > 0 | (j2 | 0) == 0 & i2 >>> 0 > 0) {
                        q3 = d3;
                        r3 = x3;
                        s3 = C5;
                        t5 = w5;
                        u6 = z3;
                        d3 = v4;
                        x3 = f3;
                        w5 = A7;
                        v4 = q3;
                        f3 = r3;
                        C5 = B5;
                        B5 = s3;
                        A7 = t5;
                        z3 = y3;
                        y3 = u6;
                      } else {
                        break c;
                      }
                    }
                    Cd(A7);
                    Cd(B5);
                    Cd(J2);
                    f3 = 1;
                    break a;
                  } else {
                    f3 = i2;
                  }
                } while (0);
                Cd(J2);
                Cd(d3);
                Cd(f3);
                f3 = 0;
              } else {
                Cd(d3);
                Cd(i2);
                Cd(J2);
              }
            } while (0);
            J2 = f3;
            T2 = K4;
            return J2 | 0;
          }
        }
        Cd(J2);
        J2 = f3;
        T2 = K4;
        return J2 | 0;
      }
      function ka(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        l2 = T2;
        T2 = T2 + 176 | 0;
        j2 = l2;
        if ((c5 | 0) < 1) {
          sd(d3, 0, 0);
          k2 = 0;
          T2 = l2;
          return k2 | 0;
        }
        i2 = a3;
        i2 = Od(b[i2 >> 2] | 0, b[i2 + 4 >> 2] | 0, 52) | 0;
        H() | 0;
        sd(d3, (c5 | 0) > 6 ? c5 : 6, i2 & 15);
        i2 = 0;
        while (1) {
          e4 = a3 + (i2 << 3) | 0;
          e4 = Yb(b[e4 >> 2] | 0, b[e4 + 4 >> 2] | 0, j2) | 0;
          if (e4 | 0) {
            break;
          }
          e4 = b[j2 >> 2] | 0;
          if ((e4 | 0) > 0) {
            h2 = 0;
            do {
              g3 = j2 + 8 + (h2 << 4) | 0;
              h2 = h2 + 1 | 0;
              e4 = j2 + 8 + (((h2 | 0) % (e4 | 0) | 0) << 4) | 0;
              f3 = xd(d3, e4, g3) | 0;
              if (!f3) {
                wd(d3, g3, e4) | 0;
              } else {
                vd(d3, f3) | 0;
              }
              e4 = b[j2 >> 2] | 0;
            } while ((h2 | 0) < (e4 | 0));
          }
          i2 = i2 + 1 | 0;
          if ((i2 | 0) >= (c5 | 0)) {
            e4 = 0;
            k2 = 13;
            break;
          }
        }
        if ((k2 | 0) == 13) {
          T2 = l2;
          return e4 | 0;
        }
        td(d3);
        k2 = e4;
        T2 = l2;
        return k2 | 0;
      }
      function la(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        g3 = T2;
        T2 = T2 + 32 | 0;
        e4 = g3;
        f3 = g3 + 16 | 0;
        a3 = ka(a3, c5, f3) | 0;
        if (a3 | 0) {
          d3 = a3;
          T2 = g3;
          return d3 | 0;
        }
        b[d3 >> 2] = 0;
        b[d3 + 4 >> 2] = 0;
        b[d3 + 8 >> 2] = 0;
        a3 = ud(f3) | 0;
        if (a3 | 0) {
          do {
            c5 = Ac(d3) | 0;
            do {
              Bc(c5, a3) | 0;
              h2 = a3 + 16 | 0;
              b[e4 >> 2] = b[h2 >> 2];
              b[e4 + 4 >> 2] = b[h2 + 4 >> 2];
              b[e4 + 8 >> 2] = b[h2 + 8 >> 2];
              b[e4 + 12 >> 2] = b[h2 + 12 >> 2];
              vd(f3, a3) | 0;
              a3 = yd(f3, e4) | 0;
            } while ((a3 | 0) != 0);
            a3 = ud(f3) | 0;
          } while ((a3 | 0) != 0);
        }
        td(f3);
        a3 = Dc(d3) | 0;
        if (!a3) {
          h2 = 0;
          T2 = g3;
          return h2 | 0;
        }
        Cc(d3);
        h2 = a3;
        T2 = g3;
        return h2 | 0;
      }
      function ma(a3) {
        a3 = a3 | 0;
        if (a3 >>> 0 > 121) {
          a3 = 0;
          return a3 | 0;
        }
        a3 = b[7696 + (a3 * 28 | 0) + 16 >> 2] | 0;
        return a3 | 0;
      }
      function na(a3) {
        a3 = a3 | 0;
        return (a3 | 0) == 4 | (a3 | 0) == 117 | 0;
      }
      function oa(a3) {
        a3 = a3 | 0;
        return b[11120 + ((b[a3 >> 2] | 0) * 216 | 0) + ((b[a3 + 4 >> 2] | 0) * 72 | 0) + ((b[a3 + 8 >> 2] | 0) * 24 | 0) + (b[a3 + 12 >> 2] << 3) >> 2] | 0;
      }
      function pa(a3) {
        a3 = a3 | 0;
        return b[11120 + ((b[a3 >> 2] | 0) * 216 | 0) + ((b[a3 + 4 >> 2] | 0) * 72 | 0) + ((b[a3 + 8 >> 2] | 0) * 24 | 0) + (b[a3 + 12 >> 2] << 3) + 4 >> 2] | 0;
      }
      function qa(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        a3 = 7696 + (a3 * 28 | 0) | 0;
        b[c5 >> 2] = b[a3 >> 2];
        b[c5 + 4 >> 2] = b[a3 + 4 >> 2];
        b[c5 + 8 >> 2] = b[a3 + 8 >> 2];
        b[c5 + 12 >> 2] = b[a3 + 12 >> 2];
        return;
      }
      function ra(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0;
        if (c5 >>> 0 > 20) {
          c5 = -1;
          return c5 | 0;
        }
        do {
          if ((b[11120 + (c5 * 216 | 0) >> 2] | 0) != (a3 | 0)) {
            if ((b[11120 + (c5 * 216 | 0) + 8 >> 2] | 0) != (a3 | 0)) {
              if ((b[11120 + (c5 * 216 | 0) + 16 >> 2] | 0) != (a3 | 0)) {
                if ((b[11120 + (c5 * 216 | 0) + 24 >> 2] | 0) != (a3 | 0)) {
                  if ((b[11120 + (c5 * 216 | 0) + 32 >> 2] | 0) != (a3 | 0)) {
                    if ((b[11120 + (c5 * 216 | 0) + 40 >> 2] | 0) != (a3 | 0)) {
                      if ((b[11120 + (c5 * 216 | 0) + 48 >> 2] | 0) != (a3 | 0)) {
                        if ((b[11120 + (c5 * 216 | 0) + 56 >> 2] | 0) != (a3 | 0)) {
                          if ((b[11120 + (c5 * 216 | 0) + 64 >> 2] | 0) != (a3 | 0)) {
                            if ((b[11120 + (c5 * 216 | 0) + 72 >> 2] | 0) != (a3 | 0)) {
                              if ((b[11120 + (c5 * 216 | 0) + 80 >> 2] | 0) != (a3 | 0)) {
                                if ((b[11120 + (c5 * 216 | 0) + 88 >> 2] | 0) != (a3 | 0)) {
                                  if ((b[11120 + (c5 * 216 | 0) + 96 >> 2] | 0) != (a3 | 0)) {
                                    if ((b[11120 + (c5 * 216 | 0) + 104 >> 2] | 0) != (a3 | 0)) {
                                      if ((b[11120 + (c5 * 216 | 0) + 112 >> 2] | 0) != (a3 | 0)) {
                                        if ((b[11120 + (c5 * 216 | 0) + 120 >> 2] | 0) != (a3 | 0)) {
                                          if ((b[11120 + (c5 * 216 | 0) + 128 >> 2] | 0) != (a3 | 0)) {
                                            if ((b[11120 + (c5 * 216 | 0) + 136 >> 2] | 0) == (a3 | 0)) {
                                              a3 = 2;
                                              d3 = 1;
                                              e4 = 2;
                                            } else {
                                              if ((b[11120 + (c5 * 216 | 0) + 144 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 0;
                                                d3 = 2;
                                                e4 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 152 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 0;
                                                d3 = 2;
                                                e4 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 160 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 0;
                                                d3 = 2;
                                                e4 = 2;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 168 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 1;
                                                d3 = 2;
                                                e4 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 176 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 1;
                                                d3 = 2;
                                                e4 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 184 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 1;
                                                d3 = 2;
                                                e4 = 2;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 192 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 2;
                                                d3 = 2;
                                                e4 = 0;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 200 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 2;
                                                d3 = 2;
                                                e4 = 1;
                                                break;
                                              }
                                              if ((b[11120 + (c5 * 216 | 0) + 208 >> 2] | 0) == (a3 | 0)) {
                                                a3 = 2;
                                                d3 = 2;
                                                e4 = 2;
                                                break;
                                              } else {
                                                a3 = -1;
                                              }
                                              return a3 | 0;
                                            }
                                          } else {
                                            a3 = 2;
                                            d3 = 1;
                                            e4 = 1;
                                          }
                                        } else {
                                          a3 = 2;
                                          d3 = 1;
                                          e4 = 0;
                                        }
                                      } else {
                                        a3 = 1;
                                        d3 = 1;
                                        e4 = 2;
                                      }
                                    } else {
                                      a3 = 1;
                                      d3 = 1;
                                      e4 = 1;
                                    }
                                  } else {
                                    a3 = 1;
                                    d3 = 1;
                                    e4 = 0;
                                  }
                                } else {
                                  a3 = 0;
                                  d3 = 1;
                                  e4 = 2;
                                }
                              } else {
                                a3 = 0;
                                d3 = 1;
                                e4 = 1;
                              }
                            } else {
                              a3 = 0;
                              d3 = 1;
                              e4 = 0;
                            }
                          } else {
                            a3 = 2;
                            d3 = 0;
                            e4 = 2;
                          }
                        } else {
                          a3 = 2;
                          d3 = 0;
                          e4 = 1;
                        }
                      } else {
                        a3 = 2;
                        d3 = 0;
                        e4 = 0;
                      }
                    } else {
                      a3 = 1;
                      d3 = 0;
                      e4 = 2;
                    }
                  } else {
                    a3 = 1;
                    d3 = 0;
                    e4 = 1;
                  }
                } else {
                  a3 = 1;
                  d3 = 0;
                  e4 = 0;
                }
              } else {
                a3 = 0;
                d3 = 0;
                e4 = 2;
              }
            } else {
              a3 = 0;
              d3 = 0;
              e4 = 1;
            }
          } else {
            a3 = 0;
            d3 = 0;
            e4 = 0;
          }
        } while (0);
        c5 = b[11120 + (c5 * 216 | 0) + (d3 * 72 | 0) + (a3 * 24 | 0) + (e4 << 3) + 4 >> 2] | 0;
        return c5 | 0;
      }
      function sa(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        if ((b[7696 + (a3 * 28 | 0) + 20 >> 2] | 0) == (c5 | 0)) {
          c5 = 1;
          return c5 | 0;
        }
        c5 = (b[7696 + (a3 * 28 | 0) + 24 >> 2] | 0) == (c5 | 0);
        return c5 | 0;
      }
      function ta(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        return b[848 + (a3 * 28 | 0) + (c5 << 2) >> 2] | 0;
      }
      function ua(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        if ((b[848 + (a3 * 28 | 0) >> 2] | 0) == (c5 | 0)) {
          c5 = 0;
          return c5 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 4 >> 2] | 0) == (c5 | 0)) {
          c5 = 1;
          return c5 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 8 >> 2] | 0) == (c5 | 0)) {
          c5 = 2;
          return c5 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 12 >> 2] | 0) == (c5 | 0)) {
          c5 = 3;
          return c5 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 16 >> 2] | 0) == (c5 | 0)) {
          c5 = 4;
          return c5 | 0;
        }
        if ((b[848 + (a3 * 28 | 0) + 20 >> 2] | 0) == (c5 | 0)) {
          c5 = 5;
          return c5 | 0;
        } else {
          return ((b[848 + (a3 * 28 | 0) + 24 >> 2] | 0) == (c5 | 0) ? 6 : 7) | 0;
        }
        return 0;
      }
      function va() {
        return 122;
      }
      function wa(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0;
        c5 = 0;
        do {
          Pd(c5 | 0, 0, 45) | 0;
          e4 = H() | 0 | 134225919;
          d3 = a3 + (c5 << 3) | 0;
          b[d3 >> 2] = -1;
          b[d3 + 4 >> 2] = e4;
          c5 = c5 + 1 | 0;
        } while ((c5 | 0) != 122);
        return 0;
      }
      function xa(a3) {
        a3 = a3 | 0;
        var b2 = 0, c5 = 0, d3 = 0;
        d3 = +e3[a3 + 16 >> 3];
        c5 = +e3[a3 + 24 >> 3];
        b2 = d3 - c5;
        return +(d3 < c5 ? b2 + 6.283185307179586 : b2);
      }
      function ya(a3) {
        a3 = a3 | 0;
        return +e3[a3 + 16 >> 3] < +e3[a3 + 24 >> 3] | 0;
      }
      function za(a3) {
        a3 = a3 | 0;
        return +(+e3[a3 >> 3] - +e3[a3 + 8 >> 3]);
      }
      function Aa(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0;
        c5 = +e3[b2 >> 3];
        if (!(c5 >= +e3[a3 + 8 >> 3])) {
          b2 = 0;
          return b2 | 0;
        }
        if (!(c5 <= +e3[a3 >> 3])) {
          b2 = 0;
          return b2 | 0;
        }
        d3 = +e3[a3 + 16 >> 3];
        c5 = +e3[a3 + 24 >> 3];
        f3 = +e3[b2 + 8 >> 3];
        b2 = f3 >= c5;
        a3 = f3 <= d3 & 1;
        if (d3 < c5) {
          if (b2) {
            a3 = 1;
          }
        } else if (!b2) {
          a3 = 0;
        }
        b2 = (a3 | 0) != 0;
        return b2 | 0;
      }
      function Ba(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        if (+e3[a3 >> 3] < +e3[b2 + 8 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        if (+e3[a3 + 8 >> 3] > +e3[b2 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        g3 = +e3[a3 + 16 >> 3];
        c5 = a3 + 24 | 0;
        l2 = +e3[c5 >> 3];
        h2 = g3 < l2;
        d3 = b2 + 16 | 0;
        k2 = +e3[d3 >> 3];
        f3 = b2 + 24 | 0;
        j2 = +e3[f3 >> 3];
        i2 = k2 < j2;
        b2 = l2 - k2 < j2 - g3;
        a3 = h2 ? i2 | b2 ? 1 : 2 : 0;
        b2 = i2 ? h2 ? 1 : b2 ? 2 : 1 : 0;
        g3 = +ic(g3, a3);
        if (g3 < +ic(+e3[f3 >> 3], b2)) {
          i2 = 0;
          return i2 | 0;
        }
        l2 = +ic(+e3[c5 >> 3], a3);
        if (l2 > +ic(+e3[d3 >> 3], b2)) {
          i2 = 0;
          return i2 | 0;
        }
        i2 = 1;
        return i2 | 0;
      }
      function Ca(a3, c5, d3, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        h2 = +e3[a3 + 16 >> 3];
        k2 = +e3[a3 + 24 >> 3];
        a3 = h2 < k2;
        j2 = +e3[c5 + 16 >> 3];
        i2 = +e3[c5 + 24 >> 3];
        g3 = j2 < i2;
        c5 = k2 - j2 < i2 - h2;
        b[d3 >> 2] = a3 ? g3 | c5 ? 1 : 2 : 0;
        b[f3 >> 2] = g3 ? a3 ? 1 : c5 ? 2 : 1 : 0;
        return;
      }
      function Da(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        if (+e3[a3 >> 3] < +e3[b2 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        if (+e3[a3 + 8 >> 3] > +e3[b2 + 8 >> 3]) {
          d3 = 0;
          return d3 | 0;
        }
        d3 = a3 + 16 | 0;
        j2 = +e3[d3 >> 3];
        g3 = +e3[a3 + 24 >> 3];
        h2 = j2 < g3;
        c5 = b2 + 16 | 0;
        l2 = +e3[c5 >> 3];
        f3 = b2 + 24 | 0;
        k2 = +e3[f3 >> 3];
        i2 = l2 < k2;
        b2 = g3 - l2 < k2 - j2;
        a3 = h2 ? i2 | b2 ? 1 : 2 : 0;
        b2 = i2 ? h2 ? 1 : b2 ? 2 : 1 : 0;
        g3 = +ic(g3, a3);
        if (!(g3 <= +ic(+e3[f3 >> 3], b2))) {
          i2 = 0;
          return i2 | 0;
        }
        l2 = +ic(+e3[d3 >> 3], a3);
        i2 = l2 >= +ic(+e3[c5 >> 3], b2);
        return i2 | 0;
      }
      function Ea(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        g3 = T2;
        T2 = T2 + 176 | 0;
        f3 = g3;
        b[f3 >> 2] = 4;
        j2 = +e3[c5 >> 3];
        e3[f3 + 8 >> 3] = j2;
        h2 = +e3[c5 + 16 >> 3];
        e3[f3 + 16 >> 3] = h2;
        e3[f3 + 24 >> 3] = j2;
        j2 = +e3[c5 + 24 >> 3];
        e3[f3 + 32 >> 3] = j2;
        i2 = +e3[c5 + 8 >> 3];
        e3[f3 + 40 >> 3] = i2;
        e3[f3 + 48 >> 3] = j2;
        e3[f3 + 56 >> 3] = i2;
        e3[f3 + 64 >> 3] = h2;
        c5 = f3 + 72 | 0;
        d3 = c5 + 96 | 0;
        do {
          b[c5 >> 2] = 0;
          c5 = c5 + 4 | 0;
        } while ((c5 | 0) < (d3 | 0));
        Ud(a3 | 0, f3 | 0, 168) | 0;
        T2 = g3;
        return;
      }
      function Fa(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0;
        t5 = T2;
        T2 = T2 + 288 | 0;
        n2 = t5 + 264 | 0;
        o2 = t5 + 96 | 0;
        m2 = t5;
        k2 = m2;
        l2 = k2 + 96 | 0;
        do {
          b[k2 >> 2] = 0;
          k2 = k2 + 4 | 0;
        } while ((k2 | 0) < (l2 | 0));
        c5 = ac2(c5, m2) | 0;
        if (c5 | 0) {
          s3 = c5;
          T2 = t5;
          return s3 | 0;
        }
        l2 = m2;
        m2 = b[l2 >> 2] | 0;
        l2 = b[l2 + 4 >> 2] | 0;
        Xb(m2, l2, n2) | 0;
        Yb(m2, l2, o2) | 0;
        j2 = +kc(n2, o2 + 8 | 0);
        e3[n2 >> 3] = +e3[a3 >> 3];
        l2 = n2 + 8 | 0;
        e3[l2 >> 3] = +e3[a3 + 16 >> 3];
        e3[o2 >> 3] = +e3[a3 + 8 >> 3];
        m2 = o2 + 8 | 0;
        e3[m2 >> 3] = +e3[a3 + 24 >> 3];
        h2 = +kc(n2, o2);
        v4 = +e3[l2 >> 3] - +e3[m2 >> 3];
        i2 = +q2(+v4);
        u6 = +e3[n2 >> 3] - +e3[o2 >> 3];
        g3 = +q2(+u6);
        if (!(v4 == 0 | u6 == 0) ? (v4 = +Rd(+i2, +g3), v4 = +A6(+(h2 * h2 / +Sd(+(v4 / +Sd(+i2, +g3)), 3) / (j2 * (j2 * 2.59807621135) * 0.8))), e3[f2 >> 3] = v4, r3 = ~~v4 >>> 0, s3 = +q2(v4) >= 1 ? v4 > 0 ? ~~+C4(+p2(v4 / 4294967296), 4294967295) >>> 0 : ~~+A6((v4 - +(~~v4 >>> 0)) / 4294967296) >>> 0 : 0, !((b[f2 + 4 >> 2] & 2146435072 | 0) == 2146435072)) : 0) {
          o2 = (r3 | 0) == 0 & (s3 | 0) == 0;
          c5 = d3;
          b[c5 >> 2] = o2 ? 1 : r3;
          b[c5 + 4 >> 2] = o2 ? 0 : s3;
          c5 = 0;
        } else {
          c5 = 1;
        }
        s3 = c5;
        T2 = t5;
        return s3 | 0;
      }
      function Ga(a3, c5, d3, g3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        m2 = T2;
        T2 = T2 + 288 | 0;
        j2 = m2 + 264 | 0;
        k2 = m2 + 96 | 0;
        l2 = m2;
        h2 = l2;
        i2 = h2 + 96 | 0;
        do {
          b[h2 >> 2] = 0;
          h2 = h2 + 4 | 0;
        } while ((h2 | 0) < (i2 | 0));
        d3 = ac2(d3, l2) | 0;
        if (d3 | 0) {
          g3 = d3;
          T2 = m2;
          return g3 | 0;
        }
        d3 = l2;
        h2 = b[d3 >> 2] | 0;
        d3 = b[d3 + 4 >> 2] | 0;
        Xb(h2, d3, j2) | 0;
        Yb(h2, d3, k2) | 0;
        n2 = +kc(j2, k2 + 8 | 0);
        n2 = +A6(+(+kc(a3, c5) / (n2 * 2)));
        e3[f2 >> 3] = n2;
        d3 = ~~n2 >>> 0;
        h2 = +q2(n2) >= 1 ? n2 > 0 ? ~~+C4(+p2(n2 / 4294967296), 4294967295) >>> 0 : ~~+A6((n2 - +(~~n2 >>> 0)) / 4294967296) >>> 0 : 0;
        if ((b[f2 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          g3 = 1;
          T2 = m2;
          return g3 | 0;
        }
        l2 = (d3 | 0) == 0 & (h2 | 0) == 0;
        b[g3 >> 2] = l2 ? 1 : d3;
        b[g3 + 4 >> 2] = l2 ? 0 : h2;
        g3 = 0;
        T2 = m2;
        return g3 | 0;
      }
      function Ha(a3, b2) {
        a3 = a3 | 0;
        b2 = +b2;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        g3 = a3 + 16 | 0;
        h2 = +e3[g3 >> 3];
        c5 = a3 + 24 | 0;
        f3 = +e3[c5 >> 3];
        d3 = h2 - f3;
        d3 = h2 < f3 ? d3 + 6.283185307179586 : d3;
        k2 = +e3[a3 >> 3];
        i2 = a3 + 8 | 0;
        j2 = +e3[i2 >> 3];
        l2 = k2 - j2;
        d3 = (d3 * b2 - d3) * 0.5;
        b2 = (l2 * b2 - l2) * 0.5;
        k2 = k2 + b2;
        e3[a3 >> 3] = k2 > 1.5707963267948966 ? 1.5707963267948966 : k2;
        b2 = j2 - b2;
        e3[i2 >> 3] = b2 < -1.5707963267948966 ? -1.5707963267948966 : b2;
        b2 = h2 + d3;
        b2 = b2 > 3.141592653589793 ? b2 + -6.283185307179586 : b2;
        e3[g3 >> 3] = b2 < -3.141592653589793 ? b2 + 6.283185307179586 : b2;
        b2 = f3 - d3;
        b2 = b2 > 3.141592653589793 ? b2 + -6.283185307179586 : b2;
        e3[c5 >> 3] = b2 < -3.141592653589793 ? b2 + 6.283185307179586 : b2;
        return;
      }
      function Ia(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        b[a3 >> 2] = c5;
        b[a3 + 4 >> 2] = d3;
        b[a3 + 8 >> 2] = e4;
        return;
      }
      function Ja(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0;
        n2 = c5 + 8 | 0;
        b[n2 >> 2] = 0;
        k2 = +e3[a3 >> 3];
        i2 = +q2(+k2);
        l2 = +e3[a3 + 8 >> 3];
        j2 = +q2(+l2) * 1.1547005383792515;
        i2 = i2 + j2 * 0.5;
        d3 = ~~i2;
        a3 = ~~j2;
        i2 = i2 - +(d3 | 0);
        j2 = j2 - +(a3 | 0);
        do {
          if (i2 < 0.5) {
            if (i2 < 0.3333333333333333) {
              b[c5 >> 2] = d3;
              if (j2 < (i2 + 1) * 0.5) {
                b[c5 + 4 >> 2] = a3;
                break;
              } else {
                a3 = a3 + 1 | 0;
                b[c5 + 4 >> 2] = a3;
                break;
              }
            } else {
              o2 = 1 - i2;
              a3 = (!(j2 < o2) & 1) + a3 | 0;
              b[c5 + 4 >> 2] = a3;
              if (o2 <= j2 & j2 < i2 * 2) {
                d3 = d3 + 1 | 0;
                b[c5 >> 2] = d3;
                break;
              } else {
                b[c5 >> 2] = d3;
                break;
              }
            }
          } else {
            if (!(i2 < 0.6666666666666666)) {
              d3 = d3 + 1 | 0;
              b[c5 >> 2] = d3;
              if (j2 < i2 * 0.5) {
                b[c5 + 4 >> 2] = a3;
                break;
              } else {
                a3 = a3 + 1 | 0;
                b[c5 + 4 >> 2] = a3;
                break;
              }
            }
            if (j2 < 1 - i2) {
              b[c5 + 4 >> 2] = a3;
              if (i2 * 2 + -1 < j2) {
                b[c5 >> 2] = d3;
                break;
              }
            } else {
              a3 = a3 + 1 | 0;
              b[c5 + 4 >> 2] = a3;
            }
            d3 = d3 + 1 | 0;
            b[c5 >> 2] = d3;
          }
        } while (0);
        do {
          if (k2 < 0) {
            if (!(a3 & 1)) {
              m2 = (a3 | 0) / 2 | 0;
              m2 = Fd(d3 | 0, ((d3 | 0) < 0) << 31 >> 31 | 0, m2 | 0, ((m2 | 0) < 0) << 31 >> 31 | 0) | 0;
              d3 = ~~(+(d3 | 0) - (+(m2 >>> 0) + 4294967296 * +(H() | 0)) * 2);
              b[c5 >> 2] = d3;
              break;
            } else {
              m2 = (a3 + 1 | 0) / 2 | 0;
              m2 = Fd(d3 | 0, ((d3 | 0) < 0) << 31 >> 31 | 0, m2 | 0, ((m2 | 0) < 0) << 31 >> 31 | 0) | 0;
              d3 = ~~(+(d3 | 0) - ((+(m2 >>> 0) + 4294967296 * +(H() | 0)) * 2 + 1));
              b[c5 >> 2] = d3;
              break;
            }
          }
        } while (0);
        m2 = c5 + 4 | 0;
        if (l2 < 0) {
          d3 = d3 - ((a3 << 1 | 1 | 0) / 2 | 0) | 0;
          b[c5 >> 2] = d3;
          a3 = 0 - a3 | 0;
          b[m2 >> 2] = a3;
        }
        f3 = a3 - d3 | 0;
        if ((d3 | 0) < 0) {
          g3 = 0 - d3 | 0;
          b[m2 >> 2] = f3;
          b[n2 >> 2] = g3;
          b[c5 >> 2] = 0;
          a3 = f3;
          d3 = 0;
        } else {
          g3 = 0;
        }
        if ((a3 | 0) < 0) {
          d3 = d3 - a3 | 0;
          b[c5 >> 2] = d3;
          g3 = g3 - a3 | 0;
          b[n2 >> 2] = g3;
          b[m2 >> 2] = 0;
          a3 = 0;
        }
        h2 = d3 - g3 | 0;
        f3 = a3 - g3 | 0;
        if ((g3 | 0) < 0) {
          b[c5 >> 2] = h2;
          b[m2 >> 2] = f3;
          b[n2 >> 2] = 0;
          a3 = f3;
          d3 = h2;
          g3 = 0;
        }
        f3 = (a3 | 0) < (d3 | 0) ? a3 : d3;
        f3 = (g3 | 0) < (f3 | 0) ? g3 : f3;
        if ((f3 | 0) <= 0) {
          return;
        }
        b[c5 >> 2] = d3 - f3;
        b[m2 >> 2] = a3 - f3;
        b[n2 >> 2] = g3 - f3;
        return;
      }
      function Ka(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        c5 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        d3 = b[h2 >> 2] | 0;
        if ((c5 | 0) < 0) {
          d3 = d3 - c5 | 0;
          b[h2 >> 2] = d3;
          g3 = a3 + 8 | 0;
          b[g3 >> 2] = (b[g3 >> 2] | 0) - c5;
          b[a3 >> 2] = 0;
          c5 = 0;
        }
        if ((d3 | 0) < 0) {
          c5 = c5 - d3 | 0;
          b[a3 >> 2] = c5;
          g3 = a3 + 8 | 0;
          f3 = (b[g3 >> 2] | 0) - d3 | 0;
          b[g3 >> 2] = f3;
          b[h2 >> 2] = 0;
          d3 = 0;
        } else {
          f3 = a3 + 8 | 0;
          g3 = f3;
          f3 = b[f3 >> 2] | 0;
        }
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[a3 >> 2] = c5;
          d3 = d3 - f3 | 0;
          b[h2 >> 2] = d3;
          b[g3 >> 2] = 0;
          f3 = 0;
        }
        e4 = (d3 | 0) < (c5 | 0) ? d3 : c5;
        e4 = (f3 | 0) < (e4 | 0) ? f3 : e4;
        if ((e4 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = c5 - e4;
        b[h2 >> 2] = d3 - e4;
        b[g3 >> 2] = f3 - e4;
        return;
      }
      function La(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0;
        f3 = b[a3 + 8 >> 2] | 0;
        d3 = +((b[a3 + 4 >> 2] | 0) - f3 | 0);
        e3[c5 >> 3] = +((b[a3 >> 2] | 0) - f3 | 0) - d3 * 0.5;
        e3[c5 + 8 >> 3] = d3 * 0.8660254037844386;
        return;
      }
      function Ma(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        b[d3 >> 2] = (b[c5 >> 2] | 0) + (b[a3 >> 2] | 0);
        b[d3 + 4 >> 2] = (b[c5 + 4 >> 2] | 0) + (b[a3 + 4 >> 2] | 0);
        b[d3 + 8 >> 2] = (b[c5 + 8 >> 2] | 0) + (b[a3 + 8 >> 2] | 0);
        return;
      }
      function Na(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        b[d3 >> 2] = (b[a3 >> 2] | 0) - (b[c5 >> 2] | 0);
        b[d3 + 4 >> 2] = (b[a3 + 4 >> 2] | 0) - (b[c5 + 4 >> 2] | 0);
        b[d3 + 8 >> 2] = (b[a3 + 8 >> 2] | 0) - (b[c5 + 8 >> 2] | 0);
        return;
      }
      function Oa(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0;
        d3 = B4(b[a3 >> 2] | 0, c5) | 0;
        b[a3 >> 2] = d3;
        d3 = a3 + 4 | 0;
        e4 = B4(b[d3 >> 2] | 0, c5) | 0;
        b[d3 >> 2] = e4;
        a3 = a3 + 8 | 0;
        c5 = B4(b[a3 >> 2] | 0, c5) | 0;
        b[a3 >> 2] = c5;
        return;
      }
      function Pa(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = b[a3 >> 2] | 0;
        i2 = (h2 | 0) < 0;
        e4 = (b[a3 + 4 >> 2] | 0) - (i2 ? h2 : 0) | 0;
        g3 = (e4 | 0) < 0;
        f3 = (g3 ? 0 - e4 | 0 : 0) + ((b[a3 + 8 >> 2] | 0) - (i2 ? h2 : 0)) | 0;
        d3 = (f3 | 0) < 0;
        a3 = d3 ? 0 : f3;
        c5 = (g3 ? 0 : e4) - (d3 ? f3 : 0) | 0;
        f3 = (i2 ? 0 : h2) - (g3 ? e4 : 0) - (d3 ? f3 : 0) | 0;
        d3 = (c5 | 0) < (f3 | 0) ? c5 : f3;
        d3 = (a3 | 0) < (d3 | 0) ? a3 : d3;
        e4 = (d3 | 0) > 0;
        a3 = a3 - (e4 ? d3 : 0) | 0;
        c5 = c5 - (e4 ? d3 : 0) | 0;
        a: do {
          switch (f3 - (e4 ? d3 : 0) | 0) {
            case 0:
              switch (c5 | 0) {
                case 0: {
                  i2 = (a3 | 0) == 0 ? 0 : (a3 | 0) == 1 ? 1 : 7;
                  return i2 | 0;
                }
                case 1: {
                  i2 = (a3 | 0) == 0 ? 2 : (a3 | 0) == 1 ? 3 : 7;
                  return i2 | 0;
                }
                default:
                  break a;
              }
            case 1:
              switch (c5 | 0) {
                case 0: {
                  i2 = (a3 | 0) == 0 ? 4 : (a3 | 0) == 1 ? 5 : 7;
                  return i2 | 0;
                }
                case 1: {
                  if (!a3) {
                    a3 = 6;
                  } else {
                    break a;
                  }
                  return a3 | 0;
                }
                default:
                  break a;
              }
            default:
          }
        } while (0);
        i2 = 7;
        return i2 | 0;
      }
      function Qa(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        j2 = a3 + 8 | 0;
        h2 = b[j2 >> 2] | 0;
        i2 = (b[a3 >> 2] | 0) - h2 | 0;
        k2 = a3 + 4 | 0;
        h2 = (b[k2 >> 2] | 0) - h2 | 0;
        if (i2 >>> 0 > 715827881 | h2 >>> 0 > 715827881) {
          e4 = (i2 | 0) > 0;
          f3 = 2147483647 - i2 | 0;
          g3 = -2147483648 - i2 | 0;
          if (e4 ? (f3 | 0) < (i2 | 0) : (g3 | 0) > (i2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
          d3 = i2 << 1;
          if (e4 ? (2147483647 - d3 | 0) < (i2 | 0) : (-2147483648 - d3 | 0) > (i2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
          if ((h2 | 0) > 0 ? (2147483647 - h2 | 0) < (h2 | 0) : (-2147483648 - h2 | 0) > (h2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
          c5 = i2 * 3 | 0;
          d3 = h2 << 1;
          if ((e4 ? (f3 | 0) < (d3 | 0) : (g3 | 0) > (d3 | 0)) ? 1 : (i2 | 0) > -1 ? (c5 | -2147483648 | 0) >= (h2 | 0) : (c5 ^ -2147483648 | 0) < (h2 | 0)) {
            k2 = 1;
            return k2 | 0;
          }
        } else {
          d3 = h2 << 1;
          c5 = i2 * 3 | 0;
        }
        e4 = Ad(+(c5 - h2 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e4;
        f3 = Ad(+(d3 + i2 | 0) * 0.14285714285714285) | 0;
        b[k2 >> 2] = f3;
        b[j2 >> 2] = 0;
        d3 = (f3 | 0) < (e4 | 0);
        c5 = d3 ? e4 : f3;
        d3 = d3 ? f3 : e4;
        if ((d3 | 0) < 0) {
          if ((d3 | 0) == -2147483648 ? 1 : (c5 | 0) > 0 ? (2147483647 - c5 | 0) < (d3 | 0) : (-2147483648 - c5 | 0) > (d3 | 0)) {
            I2(27795, 26892, 354, 26903);
          }
          if ((c5 | 0) > -1 ? (c5 | -2147483648 | 0) >= (d3 | 0) : (c5 ^ -2147483648 | 0) < (d3 | 0)) {
            I2(27795, 26892, 354, 26903);
          }
        }
        c5 = f3 - e4 | 0;
        if ((e4 | 0) < 0) {
          d3 = 0 - e4 | 0;
          b[k2 >> 2] = c5;
          b[j2 >> 2] = d3;
          b[a3 >> 2] = 0;
          e4 = 0;
        } else {
          c5 = f3;
          d3 = 0;
        }
        if ((c5 | 0) < 0) {
          e4 = e4 - c5 | 0;
          b[a3 >> 2] = e4;
          d3 = d3 - c5 | 0;
          b[j2 >> 2] = d3;
          b[k2 >> 2] = 0;
          c5 = 0;
        }
        g3 = e4 - d3 | 0;
        f3 = c5 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[k2 >> 2] = f3;
          b[j2 >> 2] = 0;
          c5 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e4;
        }
        e4 = (c5 | 0) < (f3 | 0) ? c5 : f3;
        e4 = (d3 | 0) < (e4 | 0) ? d3 : e4;
        if ((e4 | 0) <= 0) {
          k2 = 0;
          return k2 | 0;
        }
        b[a3 >> 2] = f3 - e4;
        b[k2 >> 2] = c5 - e4;
        b[j2 >> 2] = d3 - e4;
        k2 = 0;
        return k2 | 0;
      }
      function Ra(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        h2 = a3 + 8 | 0;
        f3 = b[h2 >> 2] | 0;
        g3 = (b[a3 >> 2] | 0) - f3 | 0;
        i2 = a3 + 4 | 0;
        f3 = (b[i2 >> 2] | 0) - f3 | 0;
        if (g3 >>> 0 > 715827881 | f3 >>> 0 > 715827881) {
          d3 = (g3 | 0) > 0;
          if (d3 ? (2147483647 - g3 | 0) < (g3 | 0) : (-2147483648 - g3 | 0) > (g3 | 0)) {
            i2 = 1;
            return i2 | 0;
          }
          c5 = g3 << 1;
          e4 = (f3 | 0) > 0;
          if (e4 ? (2147483647 - f3 | 0) < (f3 | 0) : (-2147483648 - f3 | 0) > (f3 | 0)) {
            i2 = 1;
            return i2 | 0;
          }
          j2 = f3 << 1;
          if (e4 ? (2147483647 - j2 | 0) < (f3 | 0) : (-2147483648 - j2 | 0) > (f3 | 0)) {
            j2 = 1;
            return j2 | 0;
          }
          if (d3 ? (2147483647 - c5 | 0) < (f3 | 0) : (-2147483648 - c5 | 0) > (f3 | 0)) {
            j2 = 1;
            return j2 | 0;
          }
          d3 = f3 * 3 | 0;
          if ((f3 | 0) > -1 ? (d3 | -2147483648 | 0) >= (g3 | 0) : (d3 ^ -2147483648 | 0) < (g3 | 0)) {
            j2 = 1;
            return j2 | 0;
          }
        } else {
          d3 = f3 * 3 | 0;
          c5 = g3 << 1;
        }
        e4 = Ad(+(c5 + f3 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e4;
        f3 = Ad(+(d3 - g3 | 0) * 0.14285714285714285) | 0;
        b[i2 >> 2] = f3;
        b[h2 >> 2] = 0;
        d3 = (f3 | 0) < (e4 | 0);
        c5 = d3 ? e4 : f3;
        d3 = d3 ? f3 : e4;
        if ((d3 | 0) < 0) {
          if ((d3 | 0) == -2147483648 ? 1 : (c5 | 0) > 0 ? (2147483647 - c5 | 0) < (d3 | 0) : (-2147483648 - c5 | 0) > (d3 | 0)) {
            I2(27795, 26892, 402, 26917);
          }
          if ((c5 | 0) > -1 ? (c5 | -2147483648 | 0) >= (d3 | 0) : (c5 ^ -2147483648 | 0) < (d3 | 0)) {
            I2(27795, 26892, 402, 26917);
          }
        }
        c5 = f3 - e4 | 0;
        if ((e4 | 0) < 0) {
          d3 = 0 - e4 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = d3;
          b[a3 >> 2] = 0;
          e4 = 0;
        } else {
          c5 = f3;
          d3 = 0;
        }
        if ((c5 | 0) < 0) {
          e4 = e4 - c5 | 0;
          b[a3 >> 2] = e4;
          d3 = d3 - c5 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          c5 = 0;
        }
        g3 = e4 - d3 | 0;
        f3 = c5 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          c5 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e4;
        }
        e4 = (c5 | 0) < (f3 | 0) ? c5 : f3;
        e4 = (d3 | 0) < (e4 | 0) ? d3 : e4;
        if ((e4 | 0) <= 0) {
          j2 = 0;
          return j2 | 0;
        }
        b[a3 >> 2] = f3 - e4;
        b[i2 >> 2] = c5 - e4;
        b[h2 >> 2] = d3 - e4;
        j2 = 0;
        return j2 | 0;
      }
      function Sa(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = a3 + 8 | 0;
        d3 = b[h2 >> 2] | 0;
        c5 = (b[a3 >> 2] | 0) - d3 | 0;
        i2 = a3 + 4 | 0;
        d3 = (b[i2 >> 2] | 0) - d3 | 0;
        e4 = Ad(+((c5 * 3 | 0) - d3 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e4;
        c5 = Ad(+((d3 << 1) + c5 | 0) * 0.14285714285714285) | 0;
        b[i2 >> 2] = c5;
        b[h2 >> 2] = 0;
        d3 = c5 - e4 | 0;
        if ((e4 | 0) < 0) {
          g3 = 0 - e4 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = g3;
          b[a3 >> 2] = 0;
          c5 = d3;
          e4 = 0;
          d3 = g3;
        } else {
          d3 = 0;
        }
        if ((c5 | 0) < 0) {
          e4 = e4 - c5 | 0;
          b[a3 >> 2] = e4;
          d3 = d3 - c5 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          c5 = 0;
        }
        g3 = e4 - d3 | 0;
        f3 = c5 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          c5 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e4;
        }
        e4 = (c5 | 0) < (f3 | 0) ? c5 : f3;
        e4 = (d3 | 0) < (e4 | 0) ? d3 : e4;
        if ((e4 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - e4;
        b[i2 >> 2] = c5 - e4;
        b[h2 >> 2] = d3 - e4;
        return;
      }
      function Ta(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = a3 + 8 | 0;
        d3 = b[h2 >> 2] | 0;
        c5 = (b[a3 >> 2] | 0) - d3 | 0;
        i2 = a3 + 4 | 0;
        d3 = (b[i2 >> 2] | 0) - d3 | 0;
        e4 = Ad(+((c5 << 1) + d3 | 0) * 0.14285714285714285) | 0;
        b[a3 >> 2] = e4;
        c5 = Ad(+((d3 * 3 | 0) - c5 | 0) * 0.14285714285714285) | 0;
        b[i2 >> 2] = c5;
        b[h2 >> 2] = 0;
        d3 = c5 - e4 | 0;
        if ((e4 | 0) < 0) {
          g3 = 0 - e4 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = g3;
          b[a3 >> 2] = 0;
          c5 = d3;
          e4 = 0;
          d3 = g3;
        } else {
          d3 = 0;
        }
        if ((c5 | 0) < 0) {
          e4 = e4 - c5 | 0;
          b[a3 >> 2] = e4;
          d3 = d3 - c5 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          c5 = 0;
        }
        g3 = e4 - d3 | 0;
        f3 = c5 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          c5 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e4;
        }
        e4 = (c5 | 0) < (f3 | 0) ? c5 : f3;
        e4 = (d3 | 0) < (e4 | 0) ? d3 : e4;
        if ((e4 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - e4;
        b[i2 >> 2] = c5 - e4;
        b[h2 >> 2] = d3 - e4;
        return;
      }
      function Ua(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        c5 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        d3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        e4 = b[i2 >> 2] | 0;
        f3 = d3 + (c5 * 3 | 0) | 0;
        b[a3 >> 2] = f3;
        d3 = e4 + (d3 * 3 | 0) | 0;
        b[h2 >> 2] = d3;
        c5 = (e4 * 3 | 0) + c5 | 0;
        b[i2 >> 2] = c5;
        e4 = d3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[h2 >> 2] = e4;
          b[i2 >> 2] = c5;
          b[a3 >> 2] = 0;
          d3 = e4;
          e4 = 0;
        } else {
          e4 = f3;
        }
        if ((d3 | 0) < 0) {
          e4 = e4 - d3 | 0;
          b[a3 >> 2] = e4;
          c5 = c5 - d3 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e4 - c5 | 0;
        f3 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e4 = g3;
          c5 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e4 | 0) ? f3 : e4;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e4 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c5 - d3;
        return;
      }
      function Va(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        c5 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        e4 = (c5 * 3 | 0) + f3 | 0;
        f3 = d3 + (f3 * 3 | 0) | 0;
        b[a3 >> 2] = f3;
        b[h2 >> 2] = e4;
        c5 = (d3 * 3 | 0) + c5 | 0;
        b[i2 >> 2] = c5;
        d3 = e4 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c5;
          b[a3 >> 2] = 0;
          f3 = 0;
        } else {
          d3 = e4;
        }
        if ((d3 | 0) < 0) {
          f3 = f3 - d3 | 0;
          b[a3 >> 2] = f3;
          c5 = c5 - d3 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = f3 - c5 | 0;
        e4 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = e4;
          b[i2 >> 2] = 0;
          f3 = g3;
          c5 = 0;
        } else {
          e4 = d3;
        }
        d3 = (e4 | 0) < (f3 | 0) ? e4 : f3;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - d3;
        b[h2 >> 2] = e4 - d3;
        b[i2 >> 2] = c5 - d3;
        return;
      }
      function Wa(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        if ((c5 + -1 | 0) >>> 0 >= 6) {
          return;
        }
        f3 = (b[15440 + (c5 * 12 | 0) >> 2] | 0) + (b[a3 >> 2] | 0) | 0;
        b[a3 >> 2] = f3;
        i2 = a3 + 4 | 0;
        e4 = (b[15440 + (c5 * 12 | 0) + 4 >> 2] | 0) + (b[i2 >> 2] | 0) | 0;
        b[i2 >> 2] = e4;
        h2 = a3 + 8 | 0;
        c5 = (b[15440 + (c5 * 12 | 0) + 8 >> 2] | 0) + (b[h2 >> 2] | 0) | 0;
        b[h2 >> 2] = c5;
        d3 = e4 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = c5;
          b[a3 >> 2] = 0;
          e4 = 0;
        } else {
          d3 = e4;
          e4 = f3;
        }
        if ((d3 | 0) < 0) {
          e4 = e4 - d3 | 0;
          b[a3 >> 2] = e4;
          c5 = c5 - d3 | 0;
          b[h2 >> 2] = c5;
          b[i2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e4 - c5 | 0;
        f3 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[i2 >> 2] = f3;
          b[h2 >> 2] = 0;
          e4 = g3;
          c5 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e4 | 0) ? f3 : e4;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e4 - d3;
        b[i2 >> 2] = f3 - d3;
        b[h2 >> 2] = c5 - d3;
        return;
      }
      function Xa(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        c5 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        e4 = c5 + f3 | 0;
        f3 = d3 + f3 | 0;
        b[a3 >> 2] = f3;
        b[h2 >> 2] = e4;
        c5 = d3 + c5 | 0;
        b[i2 >> 2] = c5;
        d3 = e4 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c5;
          b[a3 >> 2] = 0;
          e4 = 0;
        } else {
          d3 = e4;
          e4 = f3;
        }
        if ((d3 | 0) < 0) {
          e4 = e4 - d3 | 0;
          b[a3 >> 2] = e4;
          c5 = c5 - d3 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e4 - c5 | 0;
        f3 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e4 = g3;
          c5 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e4 | 0) ? f3 : e4;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e4 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c5 - d3;
        return;
      }
      function Ya(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        c5 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        e4 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        f3 = e4 + c5 | 0;
        b[a3 >> 2] = f3;
        e4 = d3 + e4 | 0;
        b[h2 >> 2] = e4;
        c5 = d3 + c5 | 0;
        b[i2 >> 2] = c5;
        d3 = e4 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c5;
          b[a3 >> 2] = 0;
          e4 = 0;
        } else {
          d3 = e4;
          e4 = f3;
        }
        if ((d3 | 0) < 0) {
          e4 = e4 - d3 | 0;
          b[a3 >> 2] = e4;
          c5 = c5 - d3 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e4 - c5 | 0;
        f3 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e4 = g3;
          c5 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e4 | 0) ? f3 : e4;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e4 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c5 - d3;
        return;
      }
      function Za(a3) {
        a3 = a3 | 0;
        switch (a3 | 0) {
          case 1: {
            a3 = 5;
            break;
          }
          case 5: {
            a3 = 4;
            break;
          }
          case 4: {
            a3 = 6;
            break;
          }
          case 6: {
            a3 = 2;
            break;
          }
          case 2: {
            a3 = 3;
            break;
          }
          case 3: {
            a3 = 1;
            break;
          }
          default:
        }
        return a3 | 0;
      }
      function _a2(a3) {
        a3 = a3 | 0;
        switch (a3 | 0) {
          case 1: {
            a3 = 3;
            break;
          }
          case 3: {
            a3 = 2;
            break;
          }
          case 2: {
            a3 = 6;
            break;
          }
          case 6: {
            a3 = 4;
            break;
          }
          case 4: {
            a3 = 5;
            break;
          }
          case 5: {
            a3 = 1;
            break;
          }
          default:
        }
        return a3 | 0;
      }
      function $a(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        c5 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        d3 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        e4 = b[i2 >> 2] | 0;
        f3 = d3 + (c5 << 1) | 0;
        b[a3 >> 2] = f3;
        d3 = e4 + (d3 << 1) | 0;
        b[h2 >> 2] = d3;
        c5 = (e4 << 1) + c5 | 0;
        b[i2 >> 2] = c5;
        e4 = d3 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[h2 >> 2] = e4;
          b[i2 >> 2] = c5;
          b[a3 >> 2] = 0;
          d3 = e4;
          e4 = 0;
        } else {
          e4 = f3;
        }
        if ((d3 | 0) < 0) {
          e4 = e4 - d3 | 0;
          b[a3 >> 2] = e4;
          c5 = c5 - d3 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = e4 - c5 | 0;
        f3 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          e4 = g3;
          c5 = 0;
        } else {
          f3 = d3;
        }
        d3 = (f3 | 0) < (e4 | 0) ? f3 : e4;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = e4 - d3;
        b[h2 >> 2] = f3 - d3;
        b[i2 >> 2] = c5 - d3;
        return;
      }
      function ab4(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = b[a3 >> 2] | 0;
        h2 = a3 + 4 | 0;
        c5 = b[h2 >> 2] | 0;
        i2 = a3 + 8 | 0;
        d3 = b[i2 >> 2] | 0;
        e4 = (c5 << 1) + f3 | 0;
        f3 = d3 + (f3 << 1) | 0;
        b[a3 >> 2] = f3;
        b[h2 >> 2] = e4;
        c5 = (d3 << 1) + c5 | 0;
        b[i2 >> 2] = c5;
        d3 = e4 - f3 | 0;
        if ((f3 | 0) < 0) {
          c5 = c5 - f3 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = c5;
          b[a3 >> 2] = 0;
          f3 = 0;
        } else {
          d3 = e4;
        }
        if ((d3 | 0) < 0) {
          f3 = f3 - d3 | 0;
          b[a3 >> 2] = f3;
          c5 = c5 - d3 | 0;
          b[i2 >> 2] = c5;
          b[h2 >> 2] = 0;
          d3 = 0;
        }
        g3 = f3 - c5 | 0;
        e4 = d3 - c5 | 0;
        if ((c5 | 0) < 0) {
          b[a3 >> 2] = g3;
          b[h2 >> 2] = e4;
          b[i2 >> 2] = 0;
          f3 = g3;
          c5 = 0;
        } else {
          e4 = d3;
        }
        d3 = (e4 | 0) < (f3 | 0) ? e4 : f3;
        d3 = (c5 | 0) < (d3 | 0) ? c5 : d3;
        if ((d3 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - d3;
        b[h2 >> 2] = e4 - d3;
        b[i2 >> 2] = c5 - d3;
        return;
      }
      function bb2(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = (b[a3 >> 2] | 0) - (b[c5 >> 2] | 0) | 0;
        i2 = (h2 | 0) < 0;
        e4 = (b[a3 + 4 >> 2] | 0) - (b[c5 + 4 >> 2] | 0) - (i2 ? h2 : 0) | 0;
        g3 = (e4 | 0) < 0;
        f3 = (i2 ? 0 - h2 | 0 : 0) + (b[a3 + 8 >> 2] | 0) - (b[c5 + 8 >> 2] | 0) + (g3 ? 0 - e4 | 0 : 0) | 0;
        a3 = (f3 | 0) < 0;
        c5 = a3 ? 0 : f3;
        d3 = (g3 ? 0 : e4) - (a3 ? f3 : 0) | 0;
        f3 = (i2 ? 0 : h2) - (g3 ? e4 : 0) - (a3 ? f3 : 0) | 0;
        a3 = (d3 | 0) < (f3 | 0) ? d3 : f3;
        a3 = (c5 | 0) < (a3 | 0) ? c5 : a3;
        e4 = (a3 | 0) > 0;
        c5 = c5 - (e4 ? a3 : 0) | 0;
        d3 = d3 - (e4 ? a3 : 0) | 0;
        a3 = f3 - (e4 ? a3 : 0) | 0;
        a3 = (a3 | 0) > -1 ? a3 : 0 - a3 | 0;
        d3 = (d3 | 0) > -1 ? d3 : 0 - d3 | 0;
        c5 = (c5 | 0) > -1 ? c5 : 0 - c5 | 0;
        c5 = (d3 | 0) > (c5 | 0) ? d3 : c5;
        return ((a3 | 0) > (c5 | 0) ? a3 : c5) | 0;
      }
      function cb(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0;
        d3 = b[a3 + 8 >> 2] | 0;
        b[c5 >> 2] = (b[a3 >> 2] | 0) - d3;
        b[c5 + 4 >> 2] = (b[a3 + 4 >> 2] | 0) - d3;
        return;
      }
      function db(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        e4 = b[a3 >> 2] | 0;
        b[c5 >> 2] = e4;
        f3 = b[a3 + 4 >> 2] | 0;
        h2 = c5 + 4 | 0;
        b[h2 >> 2] = f3;
        i2 = c5 + 8 | 0;
        b[i2 >> 2] = 0;
        d3 = (f3 | 0) < (e4 | 0);
        a3 = d3 ? e4 : f3;
        d3 = d3 ? f3 : e4;
        if ((d3 | 0) < 0) {
          if ((d3 | 0) == -2147483648 ? 1 : (a3 | 0) > 0 ? (2147483647 - a3 | 0) < (d3 | 0) : (-2147483648 - a3 | 0) > (d3 | 0)) {
            c5 = 1;
            return c5 | 0;
          }
          if ((a3 | 0) > -1 ? (a3 | -2147483648 | 0) >= (d3 | 0) : (a3 ^ -2147483648 | 0) < (d3 | 0)) {
            c5 = 1;
            return c5 | 0;
          }
        }
        a3 = f3 - e4 | 0;
        if ((e4 | 0) < 0) {
          d3 = 0 - e4 | 0;
          b[h2 >> 2] = a3;
          b[i2 >> 2] = d3;
          b[c5 >> 2] = 0;
          e4 = 0;
        } else {
          a3 = f3;
          d3 = 0;
        }
        if ((a3 | 0) < 0) {
          e4 = e4 - a3 | 0;
          b[c5 >> 2] = e4;
          d3 = d3 - a3 | 0;
          b[i2 >> 2] = d3;
          b[h2 >> 2] = 0;
          a3 = 0;
        }
        g3 = e4 - d3 | 0;
        f3 = a3 - d3 | 0;
        if ((d3 | 0) < 0) {
          b[c5 >> 2] = g3;
          b[h2 >> 2] = f3;
          b[i2 >> 2] = 0;
          a3 = f3;
          f3 = g3;
          d3 = 0;
        } else {
          f3 = e4;
        }
        e4 = (a3 | 0) < (f3 | 0) ? a3 : f3;
        e4 = (d3 | 0) < (e4 | 0) ? d3 : e4;
        if ((e4 | 0) <= 0) {
          c5 = 0;
          return c5 | 0;
        }
        b[c5 >> 2] = f3 - e4;
        b[h2 >> 2] = a3 - e4;
        b[i2 >> 2] = d3 - e4;
        c5 = 0;
        return c5 | 0;
      }
      function eb2(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0;
        c5 = a3 + 8 | 0;
        f3 = b[c5 >> 2] | 0;
        d3 = f3 - (b[a3 >> 2] | 0) | 0;
        b[a3 >> 2] = d3;
        e4 = a3 + 4 | 0;
        a3 = (b[e4 >> 2] | 0) - f3 | 0;
        b[e4 >> 2] = a3;
        b[c5 >> 2] = 0 - (a3 + d3);
        return;
      }
      function fb(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        d3 = b[a3 >> 2] | 0;
        c5 = 0 - d3 | 0;
        b[a3 >> 2] = c5;
        h2 = a3 + 8 | 0;
        b[h2 >> 2] = 0;
        i2 = a3 + 4 | 0;
        e4 = b[i2 >> 2] | 0;
        f3 = e4 + d3 | 0;
        if ((d3 | 0) > 0) {
          b[i2 >> 2] = f3;
          b[h2 >> 2] = d3;
          b[a3 >> 2] = 0;
          c5 = 0;
          e4 = f3;
        } else {
          d3 = 0;
        }
        if ((e4 | 0) < 0) {
          g3 = c5 - e4 | 0;
          b[a3 >> 2] = g3;
          d3 = d3 - e4 | 0;
          b[h2 >> 2] = d3;
          b[i2 >> 2] = 0;
          f3 = g3 - d3 | 0;
          c5 = 0 - d3 | 0;
          if ((d3 | 0) < 0) {
            b[a3 >> 2] = f3;
            b[i2 >> 2] = c5;
            b[h2 >> 2] = 0;
            e4 = c5;
            d3 = 0;
          } else {
            e4 = 0;
            f3 = g3;
          }
        } else {
          f3 = c5;
        }
        c5 = (e4 | 0) < (f3 | 0) ? e4 : f3;
        c5 = (d3 | 0) < (c5 | 0) ? d3 : c5;
        if ((c5 | 0) <= 0) {
          return;
        }
        b[a3 >> 2] = f3 - c5;
        b[i2 >> 2] = e4 - c5;
        b[h2 >> 2] = d3 - c5;
        return;
      }
      function gb(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        m2 = T2;
        T2 = T2 + 64 | 0;
        l2 = m2;
        i2 = m2 + 56 | 0;
        if (!(true & (c5 & 2013265920 | 0) == 134217728 & (true & (e4 & 2013265920 | 0) == 134217728))) {
          f3 = 5;
          T2 = m2;
          return f3 | 0;
        }
        if ((a3 | 0) == (d3 | 0) & (c5 | 0) == (e4 | 0)) {
          b[f3 >> 2] = 0;
          f3 = 0;
          T2 = m2;
          return f3 | 0;
        }
        h2 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        h2 = h2 & 15;
        k2 = Od(d3 | 0, e4 | 0, 52) | 0;
        H() | 0;
        if ((h2 | 0) != (k2 & 15 | 0)) {
          f3 = 12;
          T2 = m2;
          return f3 | 0;
        }
        g3 = h2 + -1 | 0;
        if (h2 >>> 0 > 1) {
          Db(a3, c5, g3, l2) | 0;
          Db(d3, e4, g3, i2) | 0;
          k2 = l2;
          j2 = b[k2 >> 2] | 0;
          k2 = b[k2 + 4 >> 2] | 0;
          a: do {
            if ((j2 | 0) == (b[i2 >> 2] | 0) ? (k2 | 0) == (b[i2 + 4 >> 2] | 0) : 0) {
              h2 = (h2 ^ 15) * 3 | 0;
              g3 = Od(a3 | 0, c5 | 0, h2 | 0) | 0;
              H() | 0;
              g3 = g3 & 7;
              h2 = Od(d3 | 0, e4 | 0, h2 | 0) | 0;
              H() | 0;
              h2 = h2 & 7;
              do {
                if (!((g3 | 0) == 0 | (h2 | 0) == 0)) {
                  if ((g3 | 0) == 7) {
                    g3 = 5;
                  } else {
                    if ((g3 | 0) == 1 | (h2 | 0) == 1 ? Fb(j2, k2) | 0 : 0) {
                      g3 = 5;
                      break;
                    }
                    if ((b[15536 + (g3 << 2) >> 2] | 0) != (h2 | 0) ? (b[15568 + (g3 << 2) >> 2] | 0) != (h2 | 0) : 0) {
                      break a;
                    }
                    b[f3 >> 2] = 1;
                    g3 = 0;
                  }
                } else {
                  b[f3 >> 2] = 1;
                  g3 = 0;
                }
              } while (0);
              f3 = g3;
              T2 = m2;
              return f3 | 0;
            }
          } while (0);
        }
        g3 = l2;
        h2 = g3 + 56 | 0;
        do {
          b[g3 >> 2] = 0;
          g3 = g3 + 4 | 0;
        } while ((g3 | 0) < (h2 | 0));
        aa2(a3, c5, 1, l2) | 0;
        c5 = l2;
        if (((((!((b[c5 >> 2] | 0) == (d3 | 0) ? (b[c5 + 4 >> 2] | 0) == (e4 | 0) : 0) ? (c5 = l2 + 8 | 0, !((b[c5 >> 2] | 0) == (d3 | 0) ? (b[c5 + 4 >> 2] | 0) == (e4 | 0) : 0)) : 0) ? (c5 = l2 + 16 | 0, !((b[c5 >> 2] | 0) == (d3 | 0) ? (b[c5 + 4 >> 2] | 0) == (e4 | 0) : 0)) : 0) ? (c5 = l2 + 24 | 0, !((b[c5 >> 2] | 0) == (d3 | 0) ? (b[c5 + 4 >> 2] | 0) == (e4 | 0) : 0)) : 0) ? (c5 = l2 + 32 | 0, !((b[c5 >> 2] | 0) == (d3 | 0) ? (b[c5 + 4 >> 2] | 0) == (e4 | 0) : 0)) : 0) ? (c5 = l2 + 40 | 0, !((b[c5 >> 2] | 0) == (d3 | 0) ? (b[c5 + 4 >> 2] | 0) == (e4 | 0) : 0)) : 0) {
          g3 = l2 + 48 | 0;
          g3 = ((b[g3 >> 2] | 0) == (d3 | 0) ? (b[g3 + 4 >> 2] | 0) == (e4 | 0) : 0) & 1;
        } else {
          g3 = 1;
        }
        b[f3 >> 2] = g3;
        f3 = 0;
        T2 = m2;
        return f3 | 0;
      }
      function hb(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        d3 = fa(a3, c5, d3, e4) | 0;
        if ((d3 | 0) == 7) {
          f3 = 11;
          return f3 | 0;
        }
        e4 = Pd(d3 | 0, 0, 56) | 0;
        c5 = c5 & -2130706433 | (H() | 0) | 268435456;
        b[f3 >> 2] = a3 | e4;
        b[f3 + 4 >> 2] = c5;
        f3 = 0;
        return f3 | 0;
      }
      function ib(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        if (!(true & (c5 & 2013265920 | 0) == 268435456)) {
          d3 = 6;
          return d3 | 0;
        }
        b[d3 >> 2] = a3;
        b[d3 + 4 >> 2] = c5 & -2130706433 | 134217728;
        d3 = 0;
        return d3 | 0;
      }
      function jb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0;
        f3 = T2;
        T2 = T2 + 16 | 0;
        e4 = f3;
        b[e4 >> 2] = 0;
        if (!(true & (c5 & 2013265920 | 0) == 268435456)) {
          e4 = 6;
          T2 = f3;
          return e4 | 0;
        }
        g3 = Od(a3 | 0, c5 | 0, 56) | 0;
        H() | 0;
        e4 = ea2(a3, c5 & -2130706433 | 134217728, g3 & 7, e4, d3) | 0;
        T2 = f3;
        return e4 | 0;
      }
      function kb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0;
        c5 = Od(a3 | 0, b2 | 0, 56) | 0;
        H() | 0;
        switch (c5 & 7) {
          case 0:
          case 7: {
            c5 = 0;
            return c5 | 0;
          }
          default:
        }
        c5 = b2 & -2130706433 | 134217728;
        if (!(true & (b2 & 2013265920 | 0) == 268435456)) {
          c5 = 0;
          return c5 | 0;
        }
        if (true & (b2 & 117440512 | 0) == 16777216 & (Fb(a3, c5) | 0) != 0) {
          c5 = 0;
          return c5 | 0;
        }
        c5 = Bb(a3, c5) | 0;
        return c5 | 0;
      }
      function lb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        f3 = T2;
        T2 = T2 + 16 | 0;
        e4 = f3;
        if (!(true & (c5 & 2013265920 | 0) == 268435456)) {
          e4 = 6;
          T2 = f3;
          return e4 | 0;
        }
        g3 = c5 & -2130706433 | 134217728;
        h2 = d3;
        b[h2 >> 2] = a3;
        b[h2 + 4 >> 2] = g3;
        b[e4 >> 2] = 0;
        c5 = Od(a3 | 0, c5 | 0, 56) | 0;
        H() | 0;
        e4 = ea2(a3, g3, c5 & 7, e4, d3 + 8 | 0) | 0;
        T2 = f3;
        return e4 | 0;
      }
      function mb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0;
        f3 = (Fb(a3, c5) | 0) == 0;
        c5 = c5 & -2130706433;
        e4 = d3;
        b[e4 >> 2] = f3 ? a3 : 0;
        b[e4 + 4 >> 2] = f3 ? c5 | 285212672 : 0;
        e4 = d3 + 8 | 0;
        b[e4 >> 2] = a3;
        b[e4 + 4 >> 2] = c5 | 301989888;
        e4 = d3 + 16 | 0;
        b[e4 >> 2] = a3;
        b[e4 + 4 >> 2] = c5 | 318767104;
        e4 = d3 + 24 | 0;
        b[e4 >> 2] = a3;
        b[e4 + 4 >> 2] = c5 | 335544320;
        e4 = d3 + 32 | 0;
        b[e4 >> 2] = a3;
        b[e4 + 4 >> 2] = c5 | 352321536;
        d3 = d3 + 40 | 0;
        b[d3 >> 2] = a3;
        b[d3 + 4 >> 2] = c5 | 369098752;
        return 0;
      }
      function nb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        h2 = T2;
        T2 = T2 + 16 | 0;
        f3 = h2;
        g3 = c5 & -2130706433 | 134217728;
        if (!(true & (c5 & 2013265920 | 0) == 268435456)) {
          g3 = 6;
          T2 = h2;
          return g3 | 0;
        }
        e4 = Od(a3 | 0, c5 | 0, 56) | 0;
        H() | 0;
        e4 = md(a3, g3, e4 & 7) | 0;
        if ((e4 | 0) == -1) {
          b[d3 >> 2] = 0;
          g3 = 6;
          T2 = h2;
          return g3 | 0;
        }
        if (Wb(a3, g3, f3) | 0) {
          I2(27795, 26932, 282, 26947);
        }
        c5 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        c5 = c5 & 15;
        if (!(Fb(a3, g3) | 0)) {
          xb(f3, c5, e4, 2, d3);
        } else {
          tb(f3, c5, e4, 2, d3);
        }
        g3 = 0;
        T2 = h2;
        return g3 | 0;
      }
      function ob(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0;
        d3 = T2;
        T2 = T2 + 16 | 0;
        e4 = d3;
        pb(a3, b2, c5, e4);
        Ja(e4, c5 + 4 | 0);
        T2 = d3;
        return;
      }
      function pb(a3, c5, d3, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        j2 = T2;
        T2 = T2 + 16 | 0;
        k2 = j2;
        qb(a3, d3, k2);
        h2 = +w4(+(1 - +e3[k2 >> 3] * 0.5));
        if (h2 < 1e-16) {
          b[f3 >> 2] = 0;
          b[f3 + 4 >> 2] = 0;
          b[f3 + 8 >> 2] = 0;
          b[f3 + 12 >> 2] = 0;
          T2 = j2;
          return;
        }
        k2 = b[d3 >> 2] | 0;
        g3 = +e3[15920 + (k2 * 24 | 0) >> 3];
        g3 = +gc(g3 - +gc(+mc(15600 + (k2 << 4) | 0, a3)));
        if (!(Tb(c5) | 0)) {
          i2 = g3;
        } else {
          i2 = +gc(g3 + -0.3334731722518321);
        }
        g3 = +v3(+h2) * 2.618033988749896;
        if ((c5 | 0) > 0) {
          a3 = 0;
          do {
            g3 = g3 * 2.6457513110645907;
            a3 = a3 + 1 | 0;
          } while ((a3 | 0) != (c5 | 0));
        }
        h2 = +t4(+i2) * g3;
        e3[f3 >> 3] = h2;
        i2 = +u5(+i2) * g3;
        e3[f3 + 8 >> 3] = i2;
        T2 = j2;
        return;
      }
      function qb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        h2 = T2;
        T2 = T2 + 32 | 0;
        g3 = h2;
        ld(a3, g3);
        b[c5 >> 2] = 0;
        e3[d3 >> 3] = 5;
        f3 = +kd(16400, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 0;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16424, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 1;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16448, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 2;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16472, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 3;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16496, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 4;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16520, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 5;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16544, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 6;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16568, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 7;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16592, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 8;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16616, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 9;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16640, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 10;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16664, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 11;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16688, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 12;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16712, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 13;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16736, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 14;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16760, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 15;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16784, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 16;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16808, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 17;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16832, g3);
        if (f3 < +e3[d3 >> 3]) {
          b[c5 >> 2] = 18;
          e3[d3 >> 3] = f3;
        }
        f3 = +kd(16856, g3);
        if (!(f3 < +e3[d3 >> 3])) {
          T2 = h2;
          return;
        }
        b[c5 >> 2] = 19;
        e3[d3 >> 3] = f3;
        T2 = h2;
        return;
      }
      function rb(a3, c5, d3, f3, g3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0;
        h2 = +hd(a3);
        if (h2 < 1e-16) {
          c5 = 15600 + (c5 << 4) | 0;
          b[g3 >> 2] = b[c5 >> 2];
          b[g3 + 4 >> 2] = b[c5 + 4 >> 2];
          b[g3 + 8 >> 2] = b[c5 + 8 >> 2];
          b[g3 + 12 >> 2] = b[c5 + 12 >> 2];
          return;
        }
        i2 = +z2(+ +e3[a3 + 8 >> 3], + +e3[a3 >> 3]);
        if ((d3 | 0) > 0) {
          a3 = 0;
          do {
            h2 = h2 * 0.37796447300922725;
            a3 = a3 + 1 | 0;
          } while ((a3 | 0) != (d3 | 0));
        }
        j2 = h2 * 0.3333333333333333;
        if (!f3) {
          h2 = +y2(+(h2 * 0.381966011250105));
          if (Tb(d3) | 0) {
            i2 = +gc(i2 + 0.3334731722518321);
          }
        } else {
          d3 = (Tb(d3) | 0) == 0;
          h2 = +y2(+((d3 ? j2 : j2 * 0.37796447300922725) * 0.381966011250105));
        }
        nc(15600 + (c5 << 4) | 0, +gc(+e3[15920 + (c5 * 24 | 0) >> 3] - i2), h2, g3);
        return;
      }
      function sb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0;
        e4 = T2;
        T2 = T2 + 16 | 0;
        f3 = e4;
        La(a3 + 4 | 0, f3);
        rb(f3, b[a3 >> 2] | 0, c5, 0, d3);
        T2 = e4;
        return;
      }
      function tb(a3, c5, d3, f3, g3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E4 = 0, F2 = 0, G3 = 0, H2 = 0, J2 = 0;
        G3 = T2;
        T2 = T2 + 272 | 0;
        h2 = G3 + 256 | 0;
        u6 = G3 + 240 | 0;
        D5 = G3;
        E4 = G3 + 224 | 0;
        F2 = G3 + 208 | 0;
        v4 = G3 + 176 | 0;
        w5 = G3 + 160 | 0;
        x3 = G3 + 192 | 0;
        y3 = G3 + 144 | 0;
        z3 = G3 + 128 | 0;
        A7 = G3 + 112 | 0;
        B5 = G3 + 96 | 0;
        C5 = G3 + 80 | 0;
        b[h2 >> 2] = c5;
        b[u6 >> 2] = b[a3 >> 2];
        b[u6 + 4 >> 2] = b[a3 + 4 >> 2];
        b[u6 + 8 >> 2] = b[a3 + 8 >> 2];
        b[u6 + 12 >> 2] = b[a3 + 12 >> 2];
        ub(u6, h2, D5);
        b[g3 >> 2] = 0;
        u6 = f3 + d3 + ((f3 | 0) == 5 & 1) | 0;
        if ((u6 | 0) <= (d3 | 0)) {
          T2 = G3;
          return;
        }
        k2 = b[h2 >> 2] | 0;
        l2 = E4 + 4 | 0;
        m2 = v4 + 4 | 0;
        n2 = d3 + 5 | 0;
        o2 = 16880 + (k2 << 2) | 0;
        p3 = 16960 + (k2 << 2) | 0;
        q3 = z3 + 8 | 0;
        r3 = A7 + 8 | 0;
        s3 = B5 + 8 | 0;
        t5 = F2 + 4 | 0;
        j2 = d3;
        a: while (1) {
          i2 = D5 + (((j2 | 0) % 5 | 0) << 4) | 0;
          b[F2 >> 2] = b[i2 >> 2];
          b[F2 + 4 >> 2] = b[i2 + 4 >> 2];
          b[F2 + 8 >> 2] = b[i2 + 8 >> 2];
          b[F2 + 12 >> 2] = b[i2 + 12 >> 2];
          do {
          } while ((vb(F2, k2, 0, 1) | 0) == 2);
          if ((j2 | 0) > (d3 | 0) & (Tb(c5) | 0) != 0) {
            b[v4 >> 2] = b[F2 >> 2];
            b[v4 + 4 >> 2] = b[F2 + 4 >> 2];
            b[v4 + 8 >> 2] = b[F2 + 8 >> 2];
            b[v4 + 12 >> 2] = b[F2 + 12 >> 2];
            La(l2, w5);
            f3 = b[v4 >> 2] | 0;
            h2 = b[17040 + (f3 * 80 | 0) + (b[E4 >> 2] << 2) >> 2] | 0;
            b[v4 >> 2] = b[18640 + (f3 * 80 | 0) + (h2 * 20 | 0) >> 2];
            i2 = b[18640 + (f3 * 80 | 0) + (h2 * 20 | 0) + 16 >> 2] | 0;
            if ((i2 | 0) > 0) {
              a3 = 0;
              do {
                Xa(m2);
                a3 = a3 + 1 | 0;
              } while ((a3 | 0) < (i2 | 0));
            }
            i2 = 18640 + (f3 * 80 | 0) + (h2 * 20 | 0) + 4 | 0;
            b[x3 >> 2] = b[i2 >> 2];
            b[x3 + 4 >> 2] = b[i2 + 4 >> 2];
            b[x3 + 8 >> 2] = b[i2 + 8 >> 2];
            Oa(x3, (b[o2 >> 2] | 0) * 3 | 0);
            Ma(m2, x3, m2);
            Ka(m2);
            La(m2, y3);
            H2 = +(b[p3 >> 2] | 0);
            e3[z3 >> 3] = H2 * 3;
            e3[q3 >> 3] = 0;
            J2 = H2 * -1.5;
            e3[A7 >> 3] = J2;
            e3[r3 >> 3] = H2 * 2.598076211353316;
            e3[B5 >> 3] = J2;
            e3[s3 >> 3] = H2 * -2.598076211353316;
            switch (b[17040 + ((b[v4 >> 2] | 0) * 80 | 0) + (b[F2 >> 2] << 2) >> 2] | 0) {
              case 1: {
                a3 = A7;
                f3 = z3;
                break;
              }
              case 3: {
                a3 = B5;
                f3 = A7;
                break;
              }
              case 2: {
                a3 = z3;
                f3 = B5;
                break;
              }
              default: {
                a3 = 12;
                break a;
              }
            }
            id2(w5, y3, f3, a3, C5);
            rb(C5, b[v4 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
            b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
          }
          if ((j2 | 0) < (n2 | 0)) {
            La(t5, v4);
            rb(v4, b[F2 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
            b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
          }
          b[E4 >> 2] = b[F2 >> 2];
          b[E4 + 4 >> 2] = b[F2 + 4 >> 2];
          b[E4 + 8 >> 2] = b[F2 + 8 >> 2];
          b[E4 + 12 >> 2] = b[F2 + 12 >> 2];
          j2 = j2 + 1 | 0;
          if ((j2 | 0) >= (u6 | 0)) {
            a3 = 3;
            break;
          }
        }
        if ((a3 | 0) == 3) {
          T2 = G3;
          return;
        } else if ((a3 | 0) == 12) {
          I2(26970, 27017, 572, 27027);
        }
      }
      function ub(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T2;
        T2 = T2 + 128 | 0;
        e4 = j2 + 64 | 0;
        f3 = j2;
        g3 = e4;
        h2 = 20240;
        i2 = g3 + 60 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        g3 = f3;
        h2 = 20304;
        i2 = g3 + 60 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        i2 = (Tb(b[c5 >> 2] | 0) | 0) == 0;
        e4 = i2 ? e4 : f3;
        f3 = a3 + 4 | 0;
        $a(f3);
        ab4(f3);
        if (Tb(b[c5 >> 2] | 0) | 0) {
          Va(f3);
          b[c5 >> 2] = (b[c5 >> 2] | 0) + 1;
        }
        b[d3 >> 2] = b[a3 >> 2];
        c5 = d3 + 4 | 0;
        Ma(f3, e4, c5);
        Ka(c5);
        b[d3 + 16 >> 2] = b[a3 >> 2];
        c5 = d3 + 20 | 0;
        Ma(f3, e4 + 12 | 0, c5);
        Ka(c5);
        b[d3 + 32 >> 2] = b[a3 >> 2];
        c5 = d3 + 36 | 0;
        Ma(f3, e4 + 24 | 0, c5);
        Ka(c5);
        b[d3 + 48 >> 2] = b[a3 >> 2];
        c5 = d3 + 52 | 0;
        Ma(f3, e4 + 36 | 0, c5);
        Ka(c5);
        b[d3 + 64 >> 2] = b[a3 >> 2];
        d3 = d3 + 68 | 0;
        Ma(f3, e4 + 48 | 0, d3);
        Ka(d3);
        T2 = j2;
        return;
      }
      function vb(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        p3 = T2;
        T2 = T2 + 32 | 0;
        n2 = p3 + 12 | 0;
        i2 = p3;
        o2 = a3 + 4 | 0;
        m2 = b[16960 + (c5 << 2) >> 2] | 0;
        l2 = (e4 | 0) != 0;
        m2 = l2 ? m2 * 3 | 0 : m2;
        f3 = b[o2 >> 2] | 0;
        k2 = a3 + 8 | 0;
        h2 = b[k2 >> 2] | 0;
        if (l2) {
          g3 = a3 + 12 | 0;
          e4 = b[g3 >> 2] | 0;
          f3 = h2 + f3 + e4 | 0;
          if ((f3 | 0) == (m2 | 0)) {
            o2 = 1;
            T2 = p3;
            return o2 | 0;
          } else {
            j2 = g3;
          }
        } else {
          j2 = a3 + 12 | 0;
          e4 = b[j2 >> 2] | 0;
          f3 = h2 + f3 + e4 | 0;
        }
        if ((f3 | 0) <= (m2 | 0)) {
          o2 = 0;
          T2 = p3;
          return o2 | 0;
        }
        do {
          if ((e4 | 0) > 0) {
            e4 = b[a3 >> 2] | 0;
            if ((h2 | 0) > 0) {
              g3 = 18640 + (e4 * 80 | 0) + 60 | 0;
              e4 = a3;
              break;
            }
            e4 = 18640 + (e4 * 80 | 0) + 40 | 0;
            if (!d3) {
              g3 = e4;
              e4 = a3;
            } else {
              Ia(n2, m2, 0, 0);
              Na(o2, n2, i2);
              Ya(i2);
              Ma(i2, n2, o2);
              g3 = e4;
              e4 = a3;
            }
          } else {
            g3 = 18640 + ((b[a3 >> 2] | 0) * 80 | 0) + 20 | 0;
            e4 = a3;
          }
        } while (0);
        b[e4 >> 2] = b[g3 >> 2];
        f3 = g3 + 16 | 0;
        if ((b[f3 >> 2] | 0) > 0) {
          e4 = 0;
          do {
            Xa(o2);
            e4 = e4 + 1 | 0;
          } while ((e4 | 0) < (b[f3 >> 2] | 0));
        }
        a3 = g3 + 4 | 0;
        b[n2 >> 2] = b[a3 >> 2];
        b[n2 + 4 >> 2] = b[a3 + 4 >> 2];
        b[n2 + 8 >> 2] = b[a3 + 8 >> 2];
        c5 = b[16880 + (c5 << 2) >> 2] | 0;
        Oa(n2, l2 ? c5 * 3 | 0 : c5);
        Ma(o2, n2, o2);
        Ka(o2);
        if (l2) {
          e4 = ((b[k2 >> 2] | 0) + (b[o2 >> 2] | 0) + (b[j2 >> 2] | 0) | 0) == (m2 | 0) ? 1 : 2;
        } else {
          e4 = 2;
        }
        o2 = e4;
        T2 = p3;
        return o2 | 0;
      }
      function wb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0;
        do {
          c5 = vb(a3, b2, 0, 1) | 0;
        } while ((c5 | 0) == 2);
        return c5 | 0;
      }
      function xb(a3, c5, d3, f3, g3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0;
        B5 = T2;
        T2 = T2 + 240 | 0;
        h2 = B5 + 224 | 0;
        x3 = B5 + 208 | 0;
        y3 = B5;
        z3 = B5 + 192 | 0;
        A7 = B5 + 176 | 0;
        s3 = B5 + 160 | 0;
        t5 = B5 + 144 | 0;
        u6 = B5 + 128 | 0;
        v4 = B5 + 112 | 0;
        w5 = B5 + 96 | 0;
        b[h2 >> 2] = c5;
        b[x3 >> 2] = b[a3 >> 2];
        b[x3 + 4 >> 2] = b[a3 + 4 >> 2];
        b[x3 + 8 >> 2] = b[a3 + 8 >> 2];
        b[x3 + 12 >> 2] = b[a3 + 12 >> 2];
        yb(x3, h2, y3);
        b[g3 >> 2] = 0;
        r3 = f3 + d3 + ((f3 | 0) == 6 & 1) | 0;
        if ((r3 | 0) <= (d3 | 0)) {
          T2 = B5;
          return;
        }
        k2 = b[h2 >> 2] | 0;
        l2 = d3 + 6 | 0;
        m2 = 16960 + (k2 << 2) | 0;
        n2 = t5 + 8 | 0;
        o2 = u6 + 8 | 0;
        p3 = v4 + 8 | 0;
        q3 = z3 + 4 | 0;
        i2 = 0;
        j2 = d3;
        f3 = -1;
        a: while (1) {
          h2 = (j2 | 0) % 6 | 0;
          a3 = y3 + (h2 << 4) | 0;
          b[z3 >> 2] = b[a3 >> 2];
          b[z3 + 4 >> 2] = b[a3 + 4 >> 2];
          b[z3 + 8 >> 2] = b[a3 + 8 >> 2];
          b[z3 + 12 >> 2] = b[a3 + 12 >> 2];
          a3 = i2;
          i2 = vb(z3, k2, 0, 1) | 0;
          if ((j2 | 0) > (d3 | 0) & (Tb(c5) | 0) != 0 ? (a3 | 0) != 1 ? (b[z3 >> 2] | 0) != (f3 | 0) : 0 : 0) {
            La(y3 + (((h2 + 5 | 0) % 6 | 0) << 4) + 4 | 0, A7);
            La(y3 + (h2 << 4) + 4 | 0, s3);
            C5 = +(b[m2 >> 2] | 0);
            e3[t5 >> 3] = C5 * 3;
            e3[n2 >> 3] = 0;
            D5 = C5 * -1.5;
            e3[u6 >> 3] = D5;
            e3[o2 >> 3] = C5 * 2.598076211353316;
            e3[v4 >> 3] = D5;
            e3[p3 >> 3] = C5 * -2.598076211353316;
            h2 = b[x3 >> 2] | 0;
            switch (b[17040 + (h2 * 80 | 0) + (((f3 | 0) == (h2 | 0) ? b[z3 >> 2] | 0 : f3) << 2) >> 2] | 0) {
              case 1: {
                a3 = u6;
                f3 = t5;
                break;
              }
              case 3: {
                a3 = v4;
                f3 = u6;
                break;
              }
              case 2: {
                a3 = t5;
                f3 = v4;
                break;
              }
              default: {
                a3 = 8;
                break a;
              }
            }
            id2(A7, s3, f3, a3, w5);
            if (!(jd(A7, w5) | 0) ? !(jd(s3, w5) | 0) : 0) {
              rb(w5, b[x3 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
              b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
            }
          }
          if ((j2 | 0) < (l2 | 0)) {
            La(q3, A7);
            rb(A7, b[z3 >> 2] | 0, k2, 1, g3 + 8 + (b[g3 >> 2] << 4) | 0);
            b[g3 >> 2] = (b[g3 >> 2] | 0) + 1;
          }
          j2 = j2 + 1 | 0;
          if ((j2 | 0) >= (r3 | 0)) {
            a3 = 3;
            break;
          } else {
            f3 = b[z3 >> 2] | 0;
          }
        }
        if ((a3 | 0) == 3) {
          T2 = B5;
          return;
        } else if ((a3 | 0) == 8) {
          I2(27054, 27017, 737, 27099);
        }
      }
      function yb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T2;
        T2 = T2 + 160 | 0;
        e4 = j2 + 80 | 0;
        f3 = j2;
        g3 = e4;
        h2 = 20368;
        i2 = g3 + 72 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        g3 = f3;
        h2 = 20448;
        i2 = g3 + 72 | 0;
        do {
          b[g3 >> 2] = b[h2 >> 2];
          g3 = g3 + 4 | 0;
          h2 = h2 + 4 | 0;
        } while ((g3 | 0) < (i2 | 0));
        i2 = (Tb(b[c5 >> 2] | 0) | 0) == 0;
        e4 = i2 ? e4 : f3;
        f3 = a3 + 4 | 0;
        $a(f3);
        ab4(f3);
        if (Tb(b[c5 >> 2] | 0) | 0) {
          Va(f3);
          b[c5 >> 2] = (b[c5 >> 2] | 0) + 1;
        }
        b[d3 >> 2] = b[a3 >> 2];
        c5 = d3 + 4 | 0;
        Ma(f3, e4, c5);
        Ka(c5);
        b[d3 + 16 >> 2] = b[a3 >> 2];
        c5 = d3 + 20 | 0;
        Ma(f3, e4 + 12 | 0, c5);
        Ka(c5);
        b[d3 + 32 >> 2] = b[a3 >> 2];
        c5 = d3 + 36 | 0;
        Ma(f3, e4 + 24 | 0, c5);
        Ka(c5);
        b[d3 + 48 >> 2] = b[a3 >> 2];
        c5 = d3 + 52 | 0;
        Ma(f3, e4 + 36 | 0, c5);
        Ka(c5);
        b[d3 + 64 >> 2] = b[a3 >> 2];
        c5 = d3 + 68 | 0;
        Ma(f3, e4 + 48 | 0, c5);
        Ka(c5);
        b[d3 + 80 >> 2] = b[a3 >> 2];
        d3 = d3 + 84 | 0;
        Ma(f3, e4 + 60 | 0, d3);
        Ka(d3);
        T2 = j2;
        return;
      }
      function zb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        b2 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        return b2 & 15 | 0;
      }
      function Ab(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        b2 = Od(a3 | 0, b2 | 0, 45) | 0;
        H() | 0;
        return b2 & 127 | 0;
      }
      function Bb(b2, c5) {
        b2 = b2 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        if (!(true & (c5 & -16777216 | 0) == 134217728)) {
          b2 = 0;
          return b2 | 0;
        }
        e4 = Od(b2 | 0, c5 | 0, 52) | 0;
        H() | 0;
        e4 = e4 & 15;
        d3 = Od(b2 | 0, c5 | 0, 45) | 0;
        H() | 0;
        d3 = d3 & 127;
        if (d3 >>> 0 > 121) {
          b2 = 0;
          return b2 | 0;
        }
        h2 = (e4 ^ 15) * 3 | 0;
        f3 = Od(b2 | 0, c5 | 0, h2 | 0) | 0;
        h2 = Pd(f3 | 0, H() | 0, h2 | 0) | 0;
        f3 = H() | 0;
        g3 = Fd(-1227133514, -1171, h2 | 0, f3 | 0) | 0;
        if (!((h2 & 613566756 & g3 | 0) == 0 & (f3 & 4681 & (H() | 0) | 0) == 0)) {
          h2 = 0;
          return h2 | 0;
        }
        h2 = (e4 * 3 | 0) + 19 | 0;
        g3 = Pd(~b2 | 0, ~c5 | 0, h2 | 0) | 0;
        h2 = Od(g3 | 0, H() | 0, h2 | 0) | 0;
        if (!((e4 | 0) == 15 | (h2 | 0) == 0 & (H() | 0) == 0)) {
          h2 = 0;
          return h2 | 0;
        }
        if (!(a2[20528 + d3 >> 0] | 0)) {
          h2 = 1;
          return h2 | 0;
        }
        c5 = c5 & 8191;
        if ((b2 | 0) == 0 & (c5 | 0) == 0) {
          h2 = 1;
          return h2 | 0;
        } else {
          h2 = Qd(b2 | 0, c5 | 0, 0) | 0;
          H() | 0;
          return ((63 - h2 | 0) % 3 | 0 | 0) != 0 | 0;
        }
        return 0;
      }
      function Cb(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        f3 = Pd(c5 | 0, 0, 52) | 0;
        g3 = H() | 0;
        d3 = Pd(d3 | 0, 0, 45) | 0;
        d3 = g3 | (H() | 0) | 134225919;
        if ((c5 | 0) < 1) {
          g3 = -1;
          e4 = d3;
          c5 = a3;
          b[c5 >> 2] = g3;
          a3 = a3 + 4 | 0;
          b[a3 >> 2] = e4;
          return;
        }
        g3 = 1;
        f3 = -1;
        while (1) {
          h2 = (15 - g3 | 0) * 3 | 0;
          i2 = Pd(7, 0, h2 | 0) | 0;
          d3 = d3 & ~(H() | 0);
          h2 = Pd(e4 | 0, 0, h2 | 0) | 0;
          f3 = f3 & ~i2 | h2;
          d3 = d3 | (H() | 0);
          if ((g3 | 0) == (c5 | 0)) {
            break;
          } else {
            g3 = g3 + 1 | 0;
          }
        }
        i2 = a3;
        h2 = i2;
        b[h2 >> 2] = f3;
        i2 = i2 + 4 | 0;
        b[i2 >> 2] = d3;
        return;
      }
      function Db(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0;
        g3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        if (d3 >>> 0 > 15) {
          e4 = 4;
          return e4 | 0;
        }
        if ((g3 | 0) < (d3 | 0)) {
          e4 = 12;
          return e4 | 0;
        }
        if ((g3 | 0) == (d3 | 0)) {
          b[e4 >> 2] = a3;
          b[e4 + 4 >> 2] = c5;
          e4 = 0;
          return e4 | 0;
        }
        f3 = Pd(d3 | 0, 0, 52) | 0;
        f3 = f3 | a3;
        a3 = H() | 0 | c5 & -15728641;
        if ((g3 | 0) > (d3 | 0)) {
          do {
            c5 = Pd(7, 0, (14 - d3 | 0) * 3 | 0) | 0;
            d3 = d3 + 1 | 0;
            f3 = c5 | f3;
            a3 = H() | 0 | a3;
          } while ((d3 | 0) < (g3 | 0));
        }
        b[e4 >> 2] = f3;
        b[e4 + 4 >> 2] = a3;
        e4 = 0;
        return e4 | 0;
      }
      function Eb(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        g3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        if (!((d3 | 0) < 16 & (g3 | 0) <= (d3 | 0))) {
          e4 = 4;
          return e4 | 0;
        }
        f3 = d3 - g3 | 0;
        d3 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        a: do {
          if (!(ma(d3 & 127) | 0)) {
            d3 = Mc(7, 0, f3, ((f3 | 0) < 0) << 31 >> 31) | 0;
            f3 = H() | 0;
          } else {
            b: do {
              if (g3 | 0) {
                d3 = 1;
                while (1) {
                  h2 = Pd(7, 0, (15 - d3 | 0) * 3 | 0) | 0;
                  if (!((h2 & a3 | 0) == 0 & ((H() | 0) & c5 | 0) == 0)) {
                    break;
                  }
                  if (d3 >>> 0 < g3 >>> 0) {
                    d3 = d3 + 1 | 0;
                  } else {
                    break b;
                  }
                }
                d3 = Mc(7, 0, f3, ((f3 | 0) < 0) << 31 >> 31) | 0;
                f3 = H() | 0;
                break a;
              }
            } while (0);
            d3 = Mc(7, 0, f3, ((f3 | 0) < 0) << 31 >> 31) | 0;
            d3 = Kd(d3 | 0, H() | 0, 5, 0) | 0;
            d3 = Ed(d3 | 0, H() | 0, -5, -1) | 0;
            d3 = Id(d3 | 0, H() | 0, 6, 0) | 0;
            d3 = Ed(d3 | 0, H() | 0, 1, 0) | 0;
            f3 = H() | 0;
          }
        } while (0);
        h2 = e4;
        b[h2 >> 2] = d3;
        b[h2 + 4 >> 2] = f3;
        h2 = 0;
        return h2 | 0;
      }
      function Fb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0;
        e4 = Od(a3 | 0, b2 | 0, 45) | 0;
        H() | 0;
        if (!(ma(e4 & 127) | 0)) {
          e4 = 0;
          return e4 | 0;
        }
        e4 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e4 = e4 & 15;
        a: do {
          if (!e4) {
            c5 = 0;
          } else {
            d3 = 1;
            while (1) {
              c5 = Od(a3 | 0, b2 | 0, (15 - d3 | 0) * 3 | 0) | 0;
              H() | 0;
              c5 = c5 & 7;
              if (c5 | 0) {
                break a;
              }
              if (d3 >>> 0 < e4 >>> 0) {
                d3 = d3 + 1 | 0;
              } else {
                c5 = 0;
                break;
              }
            }
          }
        } while (0);
        e4 = (c5 | 0) == 0 & 1;
        return e4 | 0;
      }
      function Gb(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = T2;
        T2 = T2 + 16 | 0;
        g3 = h2;
        dc(g3, a3, c5, d3);
        c5 = g3;
        a3 = b[c5 >> 2] | 0;
        c5 = b[c5 + 4 >> 2] | 0;
        if ((a3 | 0) == 0 & (c5 | 0) == 0) {
          T2 = h2;
          return 0;
        }
        f3 = 0;
        d3 = 0;
        do {
          i2 = e4 + (f3 << 3) | 0;
          b[i2 >> 2] = a3;
          b[i2 + 4 >> 2] = c5;
          f3 = Ed(f3 | 0, d3 | 0, 1, 0) | 0;
          d3 = H() | 0;
          fc(g3);
          i2 = g3;
          a3 = b[i2 >> 2] | 0;
          c5 = b[i2 + 4 >> 2] | 0;
        } while (!((a3 | 0) == 0 & (c5 | 0) == 0));
        T2 = h2;
        return 0;
      }
      function Hb(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        if ((d3 | 0) < (c5 | 0)) {
          c5 = b2;
          d3 = a3;
          G2(c5 | 0);
          return d3 | 0;
        }
        c5 = Pd(-1, -1, ((d3 - c5 | 0) * 3 | 0) + 3 | 0) | 0;
        d3 = Pd(~c5 | 0, ~(H() | 0) | 0, (15 - d3 | 0) * 3 | 0) | 0;
        c5 = ~(H() | 0) & b2;
        d3 = ~d3 & a3;
        G2(c5 | 0);
        return d3 | 0;
      }
      function Ib(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0;
        f3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        if (!((d3 | 0) < 16 & (f3 | 0) <= (d3 | 0))) {
          e4 = 4;
          return e4 | 0;
        }
        if ((f3 | 0) < (d3 | 0)) {
          f3 = Pd(-1, -1, ((d3 + -1 - f3 | 0) * 3 | 0) + 3 | 0) | 0;
          f3 = Pd(~f3 | 0, ~(H() | 0) | 0, (15 - d3 | 0) * 3 | 0) | 0;
          c5 = ~(H() | 0) & c5;
          a3 = ~f3 & a3;
        }
        f3 = Pd(d3 | 0, 0, 52) | 0;
        d3 = c5 & -15728641 | (H() | 0);
        b[e4 >> 2] = a3 | f3;
        b[e4 + 4 >> 2] = d3;
        e4 = 0;
        return e4 | 0;
      }
      function Jb(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E4 = 0;
        if ((d3 | 0) == 0 & (e4 | 0) == 0) {
          E4 = 0;
          return E4 | 0;
        }
        f3 = a3;
        g3 = b[f3 >> 2] | 0;
        f3 = b[f3 + 4 >> 2] | 0;
        if (true & (f3 & 15728640 | 0) == 0) {
          if (!((e4 | 0) > 0 | (e4 | 0) == 0 & d3 >>> 0 > 0)) {
            E4 = 0;
            return E4 | 0;
          }
          E4 = c5;
          b[E4 >> 2] = g3;
          b[E4 + 4 >> 2] = f3;
          if ((d3 | 0) == 1 & (e4 | 0) == 0) {
            E4 = 0;
            return E4 | 0;
          }
          f3 = 1;
          g3 = 0;
          do {
            C5 = a3 + (f3 << 3) | 0;
            D5 = b[C5 + 4 >> 2] | 0;
            E4 = c5 + (f3 << 3) | 0;
            b[E4 >> 2] = b[C5 >> 2];
            b[E4 + 4 >> 2] = D5;
            f3 = Ed(f3 | 0, g3 | 0, 1, 0) | 0;
            g3 = H() | 0;
          } while ((g3 | 0) < (e4 | 0) | (g3 | 0) == (e4 | 0) & f3 >>> 0 < d3 >>> 0);
          f3 = 0;
          return f3 | 0;
        }
        B5 = d3 << 3;
        D5 = Bd(B5) | 0;
        if (!D5) {
          E4 = 13;
          return E4 | 0;
        }
        Ud(D5 | 0, a3 | 0, B5 | 0) | 0;
        C5 = Dd(d3, 8) | 0;
        if (!C5) {
          Cd(D5);
          E4 = 13;
          return E4 | 0;
        }
        a: while (1) {
          f3 = D5;
          k2 = b[f3 >> 2] | 0;
          f3 = b[f3 + 4 >> 2] | 0;
          z3 = Od(k2 | 0, f3 | 0, 52) | 0;
          H() | 0;
          z3 = z3 & 15;
          A7 = z3 + -1 | 0;
          y3 = (z3 | 0) != 0;
          x3 = (e4 | 0) > 0 | (e4 | 0) == 0 & d3 >>> 0 > 0;
          b: do {
            if (y3 & x3) {
              t5 = Pd(A7 | 0, 0, 52) | 0;
              u6 = H() | 0;
              if (A7 >>> 0 > 15) {
                if (!((k2 | 0) == 0 & (f3 | 0) == 0)) {
                  E4 = 16;
                  break a;
                }
                g3 = 0;
                a3 = 0;
                while (1) {
                  g3 = Ed(g3 | 0, a3 | 0, 1, 0) | 0;
                  a3 = H() | 0;
                  if (!((a3 | 0) < (e4 | 0) | (a3 | 0) == (e4 | 0) & g3 >>> 0 < d3 >>> 0)) {
                    break b;
                  }
                  h2 = D5 + (g3 << 3) | 0;
                  w5 = b[h2 >> 2] | 0;
                  h2 = b[h2 + 4 >> 2] | 0;
                  if (!((w5 | 0) == 0 & (h2 | 0) == 0)) {
                    f3 = h2;
                    E4 = 16;
                    break a;
                  }
                }
              }
              i2 = k2;
              a3 = f3;
              g3 = 0;
              h2 = 0;
              while (1) {
                if (!((i2 | 0) == 0 & (a3 | 0) == 0)) {
                  if (!(true & (a3 & 117440512 | 0) == 0)) {
                    E4 = 21;
                    break a;
                  }
                  l2 = Od(i2 | 0, a3 | 0, 52) | 0;
                  H() | 0;
                  l2 = l2 & 15;
                  if ((l2 | 0) < (A7 | 0)) {
                    f3 = 12;
                    E4 = 27;
                    break a;
                  }
                  if ((l2 | 0) != (A7 | 0)) {
                    i2 = i2 | t5;
                    a3 = a3 & -15728641 | u6;
                    if (l2 >>> 0 >= z3 >>> 0) {
                      j2 = A7;
                      do {
                        w5 = Pd(7, 0, (14 - j2 | 0) * 3 | 0) | 0;
                        j2 = j2 + 1 | 0;
                        i2 = w5 | i2;
                        a3 = H() | 0 | a3;
                      } while (j2 >>> 0 < l2 >>> 0);
                    }
                  }
                  n2 = Md(i2 | 0, a3 | 0, d3 | 0, e4 | 0) | 0;
                  o2 = H() | 0;
                  j2 = C5 + (n2 << 3) | 0;
                  l2 = j2;
                  m2 = b[l2 >> 2] | 0;
                  l2 = b[l2 + 4 >> 2] | 0;
                  if (!((m2 | 0) == 0 & (l2 | 0) == 0)) {
                    r3 = 0;
                    s3 = 0;
                    do {
                      if ((r3 | 0) > (e4 | 0) | (r3 | 0) == (e4 | 0) & s3 >>> 0 > d3 >>> 0) {
                        E4 = 31;
                        break a;
                      }
                      if ((m2 | 0) == (i2 | 0) & (l2 & -117440513 | 0) == (a3 | 0)) {
                        p3 = Od(m2 | 0, l2 | 0, 56) | 0;
                        H() | 0;
                        p3 = p3 & 7;
                        q3 = p3 + 1 | 0;
                        w5 = Od(m2 | 0, l2 | 0, 45) | 0;
                        H() | 0;
                        c: do {
                          if (!(ma(w5 & 127) | 0)) {
                            l2 = 7;
                          } else {
                            m2 = Od(m2 | 0, l2 | 0, 52) | 0;
                            H() | 0;
                            m2 = m2 & 15;
                            if (!m2) {
                              l2 = 6;
                              break;
                            }
                            l2 = 1;
                            while (1) {
                              w5 = Pd(7, 0, (15 - l2 | 0) * 3 | 0) | 0;
                              if (!((w5 & i2 | 0) == 0 & ((H() | 0) & a3 | 0) == 0)) {
                                l2 = 7;
                                break c;
                              }
                              if (l2 >>> 0 < m2 >>> 0) {
                                l2 = l2 + 1 | 0;
                              } else {
                                l2 = 6;
                                break;
                              }
                            }
                          }
                        } while (0);
                        if ((p3 + 2 | 0) >>> 0 > l2 >>> 0) {
                          E4 = 41;
                          break a;
                        }
                        w5 = Pd(q3 | 0, 0, 56) | 0;
                        a3 = H() | 0 | a3 & -117440513;
                        v4 = j2;
                        b[v4 >> 2] = 0;
                        b[v4 + 4 >> 2] = 0;
                        i2 = w5 | i2;
                      } else {
                        n2 = Ed(n2 | 0, o2 | 0, 1, 0) | 0;
                        n2 = Ld(n2 | 0, H() | 0, d3 | 0, e4 | 0) | 0;
                        o2 = H() | 0;
                      }
                      s3 = Ed(s3 | 0, r3 | 0, 1, 0) | 0;
                      r3 = H() | 0;
                      j2 = C5 + (n2 << 3) | 0;
                      l2 = j2;
                      m2 = b[l2 >> 2] | 0;
                      l2 = b[l2 + 4 >> 2] | 0;
                    } while (!((m2 | 0) == 0 & (l2 | 0) == 0));
                  }
                  w5 = j2;
                  b[w5 >> 2] = i2;
                  b[w5 + 4 >> 2] = a3;
                }
                g3 = Ed(g3 | 0, h2 | 0, 1, 0) | 0;
                h2 = H() | 0;
                if (!((h2 | 0) < (e4 | 0) | (h2 | 0) == (e4 | 0) & g3 >>> 0 < d3 >>> 0)) {
                  break b;
                }
                a3 = D5 + (g3 << 3) | 0;
                i2 = b[a3 >> 2] | 0;
                a3 = b[a3 + 4 >> 2] | 0;
              }
            }
          } while (0);
          w5 = Ed(d3 | 0, e4 | 0, 5, 0) | 0;
          v4 = H() | 0;
          if (v4 >>> 0 < 0 | (v4 | 0) == 0 & w5 >>> 0 < 11) {
            E4 = 85;
            break;
          }
          w5 = Id(d3 | 0, e4 | 0, 6, 0) | 0;
          H() | 0;
          w5 = Dd(w5, 8) | 0;
          if (!w5) {
            E4 = 48;
            break;
          }
          do {
            if (x3) {
              q3 = 0;
              a3 = 0;
              p3 = 0;
              r3 = 0;
              while (1) {
                l2 = C5 + (q3 << 3) | 0;
                h2 = l2;
                g3 = b[h2 >> 2] | 0;
                h2 = b[h2 + 4 >> 2] | 0;
                if (!((g3 | 0) == 0 & (h2 | 0) == 0)) {
                  m2 = Od(g3 | 0, h2 | 0, 56) | 0;
                  H() | 0;
                  m2 = m2 & 7;
                  i2 = m2 + 1 | 0;
                  n2 = h2 & -117440513;
                  v4 = Od(g3 | 0, h2 | 0, 45) | 0;
                  H() | 0;
                  d: do {
                    if (ma(v4 & 127) | 0) {
                      o2 = Od(g3 | 0, h2 | 0, 52) | 0;
                      H() | 0;
                      o2 = o2 & 15;
                      if (o2 | 0) {
                        j2 = 1;
                        while (1) {
                          v4 = Pd(7, 0, (15 - j2 | 0) * 3 | 0) | 0;
                          if (!((g3 & v4 | 0) == 0 & (n2 & (H() | 0) | 0) == 0)) {
                            break d;
                          }
                          if (j2 >>> 0 < o2 >>> 0) {
                            j2 = j2 + 1 | 0;
                          } else {
                            break;
                          }
                        }
                      }
                      h2 = Pd(i2 | 0, 0, 56) | 0;
                      g3 = h2 | g3;
                      h2 = H() | 0 | n2;
                      i2 = l2;
                      b[i2 >> 2] = g3;
                      b[i2 + 4 >> 2] = h2;
                      i2 = m2 + 2 | 0;
                    }
                  } while (0);
                  if ((i2 | 0) == 7) {
                    v4 = w5 + (a3 << 3) | 0;
                    b[v4 >> 2] = g3;
                    b[v4 + 4 >> 2] = h2 & -117440513;
                    a3 = Ed(a3 | 0, p3 | 0, 1, 0) | 0;
                    v4 = H() | 0;
                  } else {
                    v4 = p3;
                  }
                } else {
                  v4 = p3;
                }
                q3 = Ed(q3 | 0, r3 | 0, 1, 0) | 0;
                r3 = H() | 0;
                if (!((r3 | 0) < (e4 | 0) | (r3 | 0) == (e4 | 0) & q3 >>> 0 < d3 >>> 0)) {
                  break;
                } else {
                  p3 = v4;
                }
              }
              if (x3) {
                s3 = A7 >>> 0 > 15;
                t5 = Pd(A7 | 0, 0, 52) | 0;
                u6 = H() | 0;
                if (!y3) {
                  g3 = 0;
                  j2 = 0;
                  i2 = 0;
                  h2 = 0;
                  while (1) {
                    if (!((k2 | 0) == 0 & (f3 | 0) == 0)) {
                      A7 = c5 + (g3 << 3) | 0;
                      b[A7 >> 2] = k2;
                      b[A7 + 4 >> 2] = f3;
                      g3 = Ed(g3 | 0, j2 | 0, 1, 0) | 0;
                      j2 = H() | 0;
                    }
                    i2 = Ed(i2 | 0, h2 | 0, 1, 0) | 0;
                    h2 = H() | 0;
                    if (!((h2 | 0) < (e4 | 0) | (h2 | 0) == (e4 | 0) & i2 >>> 0 < d3 >>> 0)) {
                      break;
                    }
                    f3 = D5 + (i2 << 3) | 0;
                    k2 = b[f3 >> 2] | 0;
                    f3 = b[f3 + 4 >> 2] | 0;
                  }
                  f3 = v4;
                  break;
                }
                g3 = 0;
                j2 = 0;
                h2 = 0;
                i2 = 0;
                while (1) {
                  do {
                    if (!((k2 | 0) == 0 & (f3 | 0) == 0)) {
                      o2 = Od(k2 | 0, f3 | 0, 52) | 0;
                      H() | 0;
                      o2 = o2 & 15;
                      if (s3 | (o2 | 0) < (A7 | 0)) {
                        E4 = 80;
                        break a;
                      }
                      if ((o2 | 0) != (A7 | 0)) {
                        l2 = k2 | t5;
                        m2 = f3 & -15728641 | u6;
                        if (o2 >>> 0 >= z3 >>> 0) {
                          n2 = A7;
                          do {
                            y3 = Pd(7, 0, (14 - n2 | 0) * 3 | 0) | 0;
                            n2 = n2 + 1 | 0;
                            l2 = y3 | l2;
                            m2 = H() | 0 | m2;
                          } while (n2 >>> 0 < o2 >>> 0);
                        }
                      } else {
                        l2 = k2;
                        m2 = f3;
                      }
                      p3 = Md(l2 | 0, m2 | 0, d3 | 0, e4 | 0) | 0;
                      n2 = 0;
                      o2 = 0;
                      r3 = H() | 0;
                      do {
                        if ((n2 | 0) > (e4 | 0) | (n2 | 0) == (e4 | 0) & o2 >>> 0 > d3 >>> 0) {
                          E4 = 81;
                          break a;
                        }
                        y3 = C5 + (p3 << 3) | 0;
                        q3 = b[y3 + 4 >> 2] | 0;
                        if ((q3 & -117440513 | 0) == (m2 | 0) ? (b[y3 >> 2] | 0) == (l2 | 0) : 0) {
                          E4 = 65;
                          break;
                        }
                        y3 = Ed(p3 | 0, r3 | 0, 1, 0) | 0;
                        p3 = Ld(y3 | 0, H() | 0, d3 | 0, e4 | 0) | 0;
                        r3 = H() | 0;
                        o2 = Ed(o2 | 0, n2 | 0, 1, 0) | 0;
                        n2 = H() | 0;
                        y3 = C5 + (p3 << 3) | 0;
                      } while (!((b[y3 >> 2] | 0) == (l2 | 0) ? (b[y3 + 4 >> 2] | 0) == (m2 | 0) : 0));
                      if ((E4 | 0) == 65 ? (E4 = 0, true & (q3 & 117440512 | 0) == 100663296) : 0) {
                        break;
                      }
                      y3 = c5 + (g3 << 3) | 0;
                      b[y3 >> 2] = k2;
                      b[y3 + 4 >> 2] = f3;
                      g3 = Ed(g3 | 0, j2 | 0, 1, 0) | 0;
                      j2 = H() | 0;
                    }
                  } while (0);
                  h2 = Ed(h2 | 0, i2 | 0, 1, 0) | 0;
                  i2 = H() | 0;
                  if (!((i2 | 0) < (e4 | 0) | (i2 | 0) == (e4 | 0) & h2 >>> 0 < d3 >>> 0)) {
                    break;
                  }
                  f3 = D5 + (h2 << 3) | 0;
                  k2 = b[f3 >> 2] | 0;
                  f3 = b[f3 + 4 >> 2] | 0;
                }
                f3 = v4;
              } else {
                g3 = 0;
                f3 = v4;
              }
            } else {
              g3 = 0;
              a3 = 0;
              f3 = 0;
            }
          } while (0);
          Vd(C5 | 0, 0, B5 | 0) | 0;
          Ud(D5 | 0, w5 | 0, a3 << 3 | 0) | 0;
          Cd(w5);
          if ((a3 | 0) == 0 & (f3 | 0) == 0) {
            E4 = 89;
            break;
          } else {
            c5 = c5 + (g3 << 3) | 0;
            e4 = f3;
            d3 = a3;
          }
        }
        if ((E4 | 0) == 16) {
          if (true & (f3 & 117440512 | 0) == 0) {
            f3 = 4;
            E4 = 27;
          } else {
            E4 = 21;
          }
        } else if ((E4 | 0) == 31) {
          I2(27795, 27122, 529, 27132);
        } else if ((E4 | 0) == 41) {
          Cd(D5);
          Cd(C5);
          E4 = 10;
          return E4 | 0;
        } else if ((E4 | 0) == 48) {
          Cd(D5);
          Cd(C5);
          E4 = 13;
          return E4 | 0;
        } else if ((E4 | 0) == 80) {
          I2(27795, 27122, 620, 27132);
        } else if ((E4 | 0) == 81) {
          I2(27795, 27122, 632, 27132);
        } else if ((E4 | 0) == 85) {
          Ud(c5 | 0, D5 | 0, d3 << 3 | 0) | 0;
          E4 = 89;
        }
        if ((E4 | 0) == 21) {
          Cd(D5);
          Cd(C5);
          E4 = 5;
          return E4 | 0;
        } else if ((E4 | 0) == 27) {
          Cd(D5);
          Cd(C5);
          E4 = f3;
          return E4 | 0;
        } else if ((E4 | 0) == 89) {
          Cd(D5);
          Cd(C5);
          E4 = 0;
          return E4 | 0;
        }
        return 0;
      }
      function Kb(a3, c5, d3, e4, f3, g3, h2) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        h2 = h2 | 0;
        var i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0;
        q3 = T2;
        T2 = T2 + 16 | 0;
        p3 = q3;
        if (!((d3 | 0) > 0 | (d3 | 0) == 0 & c5 >>> 0 > 0)) {
          p3 = 0;
          T2 = q3;
          return p3 | 0;
        }
        if ((h2 | 0) >= 16) {
          p3 = 12;
          T2 = q3;
          return p3 | 0;
        }
        n2 = 0;
        o2 = 0;
        m2 = 0;
        i2 = 0;
        a: while (1) {
          k2 = a3 + (n2 << 3) | 0;
          j2 = b[k2 >> 2] | 0;
          k2 = b[k2 + 4 >> 2] | 0;
          l2 = Od(j2 | 0, k2 | 0, 52) | 0;
          H() | 0;
          if ((l2 & 15 | 0) > (h2 | 0)) {
            i2 = 12;
            j2 = 11;
            break;
          }
          dc(p3, j2, k2, h2);
          l2 = p3;
          k2 = b[l2 >> 2] | 0;
          l2 = b[l2 + 4 >> 2] | 0;
          if ((k2 | 0) == 0 & (l2 | 0) == 0) {
            j2 = m2;
          } else {
            j2 = m2;
            do {
              if (!((i2 | 0) < (g3 | 0) | (i2 | 0) == (g3 | 0) & j2 >>> 0 < f3 >>> 0)) {
                j2 = 10;
                break a;
              }
              m2 = e4 + (j2 << 3) | 0;
              b[m2 >> 2] = k2;
              b[m2 + 4 >> 2] = l2;
              j2 = Ed(j2 | 0, i2 | 0, 1, 0) | 0;
              i2 = H() | 0;
              fc(p3);
              m2 = p3;
              k2 = b[m2 >> 2] | 0;
              l2 = b[m2 + 4 >> 2] | 0;
            } while (!((k2 | 0) == 0 & (l2 | 0) == 0));
          }
          n2 = Ed(n2 | 0, o2 | 0, 1, 0) | 0;
          o2 = H() | 0;
          if (!((o2 | 0) < (d3 | 0) | (o2 | 0) == (d3 | 0) & n2 >>> 0 < c5 >>> 0)) {
            i2 = 0;
            j2 = 11;
            break;
          } else {
            m2 = j2;
          }
        }
        if ((j2 | 0) == 10) {
          p3 = 14;
          T2 = q3;
          return p3 | 0;
        } else if ((j2 | 0) == 11) {
          T2 = q3;
          return i2 | 0;
        }
        return 0;
      }
      function Lb(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        n2 = T2;
        T2 = T2 + 16 | 0;
        m2 = n2;
        a: do {
          if ((d3 | 0) > 0 | (d3 | 0) == 0 & c5 >>> 0 > 0) {
            k2 = 0;
            h2 = 0;
            g3 = 0;
            l2 = 0;
            while (1) {
              j2 = a3 + (k2 << 3) | 0;
              i2 = b[j2 >> 2] | 0;
              j2 = b[j2 + 4 >> 2] | 0;
              if (!((i2 | 0) == 0 & (j2 | 0) == 0)) {
                j2 = (Eb(i2, j2, e4, m2) | 0) == 0;
                i2 = m2;
                h2 = Ed(b[i2 >> 2] | 0, b[i2 + 4 >> 2] | 0, h2 | 0, g3 | 0) | 0;
                g3 = H() | 0;
                if (!j2) {
                  g3 = 12;
                  break;
                }
              }
              k2 = Ed(k2 | 0, l2 | 0, 1, 0) | 0;
              l2 = H() | 0;
              if (!((l2 | 0) < (d3 | 0) | (l2 | 0) == (d3 | 0) & k2 >>> 0 < c5 >>> 0)) {
                break a;
              }
            }
            T2 = n2;
            return g3 | 0;
          } else {
            h2 = 0;
            g3 = 0;
          }
        } while (0);
        b[f3 >> 2] = h2;
        b[f3 + 4 >> 2] = g3;
        f3 = 0;
        T2 = n2;
        return f3 | 0;
      }
      function Mb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        b2 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        return b2 & 1 | 0;
      }
      function Nb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0;
        e4 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e4 = e4 & 15;
        if (!e4) {
          e4 = 0;
          return e4 | 0;
        }
        d3 = 1;
        while (1) {
          c5 = Od(a3 | 0, b2 | 0, (15 - d3 | 0) * 3 | 0) | 0;
          H() | 0;
          c5 = c5 & 7;
          if (c5 | 0) {
            d3 = 5;
            break;
          }
          if (d3 >>> 0 < e4 >>> 0) {
            d3 = d3 + 1 | 0;
          } else {
            c5 = 0;
            d3 = 5;
            break;
          }
        }
        if ((d3 | 0) == 5) {
          return c5 | 0;
        }
        return 0;
      }
      function Ob(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        i2 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        if (!i2) {
          h2 = b2;
          i2 = a3;
          G2(h2 | 0);
          return i2 | 0;
        }
        h2 = 1;
        c5 = 0;
        while (1) {
          f3 = (15 - h2 | 0) * 3 | 0;
          d3 = Pd(7, 0, f3 | 0) | 0;
          e4 = H() | 0;
          g3 = Od(a3 | 0, b2 | 0, f3 | 0) | 0;
          H() | 0;
          f3 = Pd(Za(g3 & 7) | 0, 0, f3 | 0) | 0;
          g3 = H() | 0;
          a3 = f3 | a3 & ~d3;
          b2 = g3 | b2 & ~e4;
          a: do {
            if (!c5) {
              if (!((f3 & d3 | 0) == 0 & (g3 & e4 | 0) == 0)) {
                d3 = Od(a3 | 0, b2 | 0, 52) | 0;
                H() | 0;
                d3 = d3 & 15;
                if (!d3) {
                  c5 = 1;
                } else {
                  c5 = 1;
                  b: while (1) {
                    g3 = Od(a3 | 0, b2 | 0, (15 - c5 | 0) * 3 | 0) | 0;
                    H() | 0;
                    switch (g3 & 7) {
                      case 1:
                        break b;
                      case 0:
                        break;
                      default: {
                        c5 = 1;
                        break a;
                      }
                    }
                    if (c5 >>> 0 < d3 >>> 0) {
                      c5 = c5 + 1 | 0;
                    } else {
                      c5 = 1;
                      break a;
                    }
                  }
                  c5 = 1;
                  while (1) {
                    g3 = (15 - c5 | 0) * 3 | 0;
                    e4 = Od(a3 | 0, b2 | 0, g3 | 0) | 0;
                    H() | 0;
                    f3 = Pd(7, 0, g3 | 0) | 0;
                    b2 = b2 & ~(H() | 0);
                    g3 = Pd(Za(e4 & 7) | 0, 0, g3 | 0) | 0;
                    a3 = a3 & ~f3 | g3;
                    b2 = b2 | (H() | 0);
                    if (c5 >>> 0 < d3 >>> 0) {
                      c5 = c5 + 1 | 0;
                    } else {
                      c5 = 1;
                      break;
                    }
                  }
                }
              } else {
                c5 = 0;
              }
            }
          } while (0);
          if (h2 >>> 0 < i2 >>> 0) {
            h2 = h2 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Pb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0;
        d3 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        d3 = d3 & 15;
        if (!d3) {
          c5 = b2;
          d3 = a3;
          G2(c5 | 0);
          return d3 | 0;
        }
        c5 = 1;
        while (1) {
          f3 = (15 - c5 | 0) * 3 | 0;
          g3 = Od(a3 | 0, b2 | 0, f3 | 0) | 0;
          H() | 0;
          e4 = Pd(7, 0, f3 | 0) | 0;
          b2 = b2 & ~(H() | 0);
          f3 = Pd(Za(g3 & 7) | 0, 0, f3 | 0) | 0;
          a3 = f3 | a3 & ~e4;
          b2 = H() | 0 | b2;
          if (c5 >>> 0 < d3 >>> 0) {
            c5 = c5 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Qb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        i2 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        if (!i2) {
          h2 = b2;
          i2 = a3;
          G2(h2 | 0);
          return i2 | 0;
        }
        h2 = 1;
        c5 = 0;
        while (1) {
          f3 = (15 - h2 | 0) * 3 | 0;
          d3 = Pd(7, 0, f3 | 0) | 0;
          e4 = H() | 0;
          g3 = Od(a3 | 0, b2 | 0, f3 | 0) | 0;
          H() | 0;
          f3 = Pd(_a2(g3 & 7) | 0, 0, f3 | 0) | 0;
          g3 = H() | 0;
          a3 = f3 | a3 & ~d3;
          b2 = g3 | b2 & ~e4;
          a: do {
            if (!c5) {
              if (!((f3 & d3 | 0) == 0 & (g3 & e4 | 0) == 0)) {
                d3 = Od(a3 | 0, b2 | 0, 52) | 0;
                H() | 0;
                d3 = d3 & 15;
                if (!d3) {
                  c5 = 1;
                } else {
                  c5 = 1;
                  b: while (1) {
                    g3 = Od(a3 | 0, b2 | 0, (15 - c5 | 0) * 3 | 0) | 0;
                    H() | 0;
                    switch (g3 & 7) {
                      case 1:
                        break b;
                      case 0:
                        break;
                      default: {
                        c5 = 1;
                        break a;
                      }
                    }
                    if (c5 >>> 0 < d3 >>> 0) {
                      c5 = c5 + 1 | 0;
                    } else {
                      c5 = 1;
                      break a;
                    }
                  }
                  c5 = 1;
                  while (1) {
                    e4 = (15 - c5 | 0) * 3 | 0;
                    f3 = Pd(7, 0, e4 | 0) | 0;
                    g3 = b2 & ~(H() | 0);
                    b2 = Od(a3 | 0, b2 | 0, e4 | 0) | 0;
                    H() | 0;
                    b2 = Pd(_a2(b2 & 7) | 0, 0, e4 | 0) | 0;
                    a3 = a3 & ~f3 | b2;
                    b2 = g3 | (H() | 0);
                    if (c5 >>> 0 < d3 >>> 0) {
                      c5 = c5 + 1 | 0;
                    } else {
                      c5 = 1;
                      break;
                    }
                  }
                }
              } else {
                c5 = 0;
              }
            }
          } while (0);
          if (h2 >>> 0 < i2 >>> 0) {
            h2 = h2 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Rb(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0;
        d3 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        d3 = d3 & 15;
        if (!d3) {
          c5 = b2;
          d3 = a3;
          G2(c5 | 0);
          return d3 | 0;
        }
        c5 = 1;
        while (1) {
          g3 = (15 - c5 | 0) * 3 | 0;
          f3 = Pd(7, 0, g3 | 0) | 0;
          e4 = b2 & ~(H() | 0);
          b2 = Od(a3 | 0, b2 | 0, g3 | 0) | 0;
          H() | 0;
          b2 = Pd(_a2(b2 & 7) | 0, 0, g3 | 0) | 0;
          a3 = b2 | a3 & ~f3;
          b2 = H() | 0 | e4;
          if (c5 >>> 0 < d3 >>> 0) {
            c5 = c5 + 1 | 0;
          } else {
            break;
          }
        }
        G2(b2 | 0);
        return a3 | 0;
      }
      function Sb(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        j2 = T2;
        T2 = T2 + 64 | 0;
        i2 = j2 + 40 | 0;
        e4 = j2 + 24 | 0;
        f3 = j2 + 12 | 0;
        g3 = j2;
        Pd(c5 | 0, 0, 52) | 0;
        d3 = H() | 0 | 134225919;
        if (!c5) {
          if ((b[a3 + 4 >> 2] | 0) > 2) {
            h2 = 0;
            i2 = 0;
            G2(h2 | 0);
            T2 = j2;
            return i2 | 0;
          }
          if ((b[a3 + 8 >> 2] | 0) > 2) {
            h2 = 0;
            i2 = 0;
            G2(h2 | 0);
            T2 = j2;
            return i2 | 0;
          }
          if ((b[a3 + 12 >> 2] | 0) > 2) {
            h2 = 0;
            i2 = 0;
            G2(h2 | 0);
            T2 = j2;
            return i2 | 0;
          }
          Pd(oa(a3) | 0, 0, 45) | 0;
          h2 = H() | 0 | d3;
          i2 = -1;
          G2(h2 | 0);
          T2 = j2;
          return i2 | 0;
        }
        b[i2 >> 2] = b[a3 >> 2];
        b[i2 + 4 >> 2] = b[a3 + 4 >> 2];
        b[i2 + 8 >> 2] = b[a3 + 8 >> 2];
        b[i2 + 12 >> 2] = b[a3 + 12 >> 2];
        h2 = i2 + 4 | 0;
        if ((c5 | 0) > 0) {
          a3 = -1;
          while (1) {
            b[e4 >> 2] = b[h2 >> 2];
            b[e4 + 4 >> 2] = b[h2 + 4 >> 2];
            b[e4 + 8 >> 2] = b[h2 + 8 >> 2];
            if (!(c5 & 1)) {
              Ta(h2);
              b[f3 >> 2] = b[h2 >> 2];
              b[f3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[f3 + 8 >> 2] = b[h2 + 8 >> 2];
              Va(f3);
            } else {
              Sa(h2);
              b[f3 >> 2] = b[h2 >> 2];
              b[f3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[f3 + 8 >> 2] = b[h2 + 8 >> 2];
              Ua(f3);
            }
            Na(e4, f3, g3);
            Ka(g3);
            l2 = (15 - c5 | 0) * 3 | 0;
            k2 = Pd(7, 0, l2 | 0) | 0;
            d3 = d3 & ~(H() | 0);
            l2 = Pd(Pa(g3) | 0, 0, l2 | 0) | 0;
            a3 = l2 | a3 & ~k2;
            d3 = H() | 0 | d3;
            if ((c5 | 0) > 1) {
              c5 = c5 + -1 | 0;
            } else {
              break;
            }
          }
        } else {
          a3 = -1;
        }
        a: do {
          if (((b[h2 >> 2] | 0) <= 2 ? (b[i2 + 8 >> 2] | 0) <= 2 : 0) ? (b[i2 + 12 >> 2] | 0) <= 2 : 0) {
            e4 = oa(i2) | 0;
            c5 = Pd(e4 | 0, 0, 45) | 0;
            c5 = c5 | a3;
            a3 = H() | 0 | d3 & -1040385;
            g3 = pa(i2) | 0;
            if (!(ma(e4) | 0)) {
              if ((g3 | 0) <= 0) {
                break;
              }
              f3 = 0;
              while (1) {
                e4 = Od(c5 | 0, a3 | 0, 52) | 0;
                H() | 0;
                e4 = e4 & 15;
                if (e4) {
                  d3 = 1;
                  while (1) {
                    l2 = (15 - d3 | 0) * 3 | 0;
                    i2 = Od(c5 | 0, a3 | 0, l2 | 0) | 0;
                    H() | 0;
                    k2 = Pd(7, 0, l2 | 0) | 0;
                    a3 = a3 & ~(H() | 0);
                    l2 = Pd(Za(i2 & 7) | 0, 0, l2 | 0) | 0;
                    c5 = c5 & ~k2 | l2;
                    a3 = a3 | (H() | 0);
                    if (d3 >>> 0 < e4 >>> 0) {
                      d3 = d3 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                }
                f3 = f3 + 1 | 0;
                if ((f3 | 0) == (g3 | 0)) {
                  break a;
                }
              }
            }
            f3 = Od(c5 | 0, a3 | 0, 52) | 0;
            H() | 0;
            f3 = f3 & 15;
            b: do {
              if (f3) {
                d3 = 1;
                c: while (1) {
                  l2 = Od(c5 | 0, a3 | 0, (15 - d3 | 0) * 3 | 0) | 0;
                  H() | 0;
                  switch (l2 & 7) {
                    case 1:
                      break c;
                    case 0:
                      break;
                    default:
                      break b;
                  }
                  if (d3 >>> 0 < f3 >>> 0) {
                    d3 = d3 + 1 | 0;
                  } else {
                    break b;
                  }
                }
                if (sa(e4, b[i2 >> 2] | 0) | 0) {
                  d3 = 1;
                  while (1) {
                    i2 = (15 - d3 | 0) * 3 | 0;
                    k2 = Pd(7, 0, i2 | 0) | 0;
                    l2 = a3 & ~(H() | 0);
                    a3 = Od(c5 | 0, a3 | 0, i2 | 0) | 0;
                    H() | 0;
                    a3 = Pd(_a2(a3 & 7) | 0, 0, i2 | 0) | 0;
                    c5 = c5 & ~k2 | a3;
                    a3 = l2 | (H() | 0);
                    if (d3 >>> 0 < f3 >>> 0) {
                      d3 = d3 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                } else {
                  d3 = 1;
                  while (1) {
                    l2 = (15 - d3 | 0) * 3 | 0;
                    i2 = Od(c5 | 0, a3 | 0, l2 | 0) | 0;
                    H() | 0;
                    k2 = Pd(7, 0, l2 | 0) | 0;
                    a3 = a3 & ~(H() | 0);
                    l2 = Pd(Za(i2 & 7) | 0, 0, l2 | 0) | 0;
                    c5 = c5 & ~k2 | l2;
                    a3 = a3 | (H() | 0);
                    if (d3 >>> 0 < f3 >>> 0) {
                      d3 = d3 + 1 | 0;
                    } else {
                      break;
                    }
                  }
                }
              }
            } while (0);
            if ((g3 | 0) > 0) {
              d3 = 0;
              do {
                c5 = Ob(c5, a3) | 0;
                a3 = H() | 0;
                d3 = d3 + 1 | 0;
              } while ((d3 | 0) != (g3 | 0));
            }
          } else {
            c5 = 0;
            a3 = 0;
          }
        } while (0);
        k2 = a3;
        l2 = c5;
        G2(k2 | 0);
        T2 = j2;
        return l2 | 0;
      }
      function Tb(a3) {
        a3 = a3 | 0;
        return (a3 | 0) % 2 | 0 | 0;
      }
      function Ub(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0;
        f3 = T2;
        T2 = T2 + 16 | 0;
        e4 = f3;
        if (c5 >>> 0 > 15) {
          e4 = 4;
          T2 = f3;
          return e4 | 0;
        }
        if ((b[a3 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          e4 = 3;
          T2 = f3;
          return e4 | 0;
        }
        if ((b[a3 + 8 + 4 >> 2] & 2146435072 | 0) == 2146435072) {
          e4 = 3;
          T2 = f3;
          return e4 | 0;
        }
        ob(a3, c5, e4);
        c5 = Sb(e4, c5) | 0;
        e4 = H() | 0;
        b[d3 >> 2] = c5;
        b[d3 + 4 >> 2] = e4;
        if ((c5 | 0) == 0 & (e4 | 0) == 0) {
          I2(27795, 27122, 959, 27145);
        }
        e4 = 0;
        T2 = f3;
        return e4 | 0;
      }
      function Vb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        f3 = d3 + 4 | 0;
        g3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        g3 = g3 & 15;
        h2 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        e4 = (g3 | 0) == 0;
        if (!(ma(h2 & 127) | 0)) {
          if (e4) {
            h2 = 0;
            return h2 | 0;
          }
          if ((b[f3 >> 2] | 0) == 0 ? (b[d3 + 8 >> 2] | 0) == 0 : 0) {
            e4 = (b[d3 + 12 >> 2] | 0) != 0 & 1;
          } else {
            e4 = 1;
          }
        } else if (e4) {
          h2 = 1;
          return h2 | 0;
        } else {
          e4 = 1;
        }
        d3 = 1;
        while (1) {
          if (!(d3 & 1)) {
            Va(f3);
          } else {
            Ua(f3);
          }
          h2 = Od(a3 | 0, c5 | 0, (15 - d3 | 0) * 3 | 0) | 0;
          H() | 0;
          Wa(f3, h2 & 7);
          if (d3 >>> 0 < g3 >>> 0) {
            d3 = d3 + 1 | 0;
          } else {
            break;
          }
        }
        return e4 | 0;
      }
      function Wb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        l2 = T2;
        T2 = T2 + 16 | 0;
        j2 = l2;
        k2 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        k2 = k2 & 127;
        if (k2 >>> 0 > 121) {
          b[d3 >> 2] = 0;
          b[d3 + 4 >> 2] = 0;
          b[d3 + 8 >> 2] = 0;
          b[d3 + 12 >> 2] = 0;
          k2 = 5;
          T2 = l2;
          return k2 | 0;
        }
        a: do {
          if ((ma(k2) | 0) != 0 ? (g3 = Od(a3 | 0, c5 | 0, 52) | 0, H() | 0, g3 = g3 & 15, (g3 | 0) != 0) : 0) {
            e4 = 1;
            b: while (1) {
              i2 = Od(a3 | 0, c5 | 0, (15 - e4 | 0) * 3 | 0) | 0;
              H() | 0;
              switch (i2 & 7) {
                case 5:
                  break b;
                case 0:
                  break;
                default: {
                  e4 = c5;
                  break a;
                }
              }
              if (e4 >>> 0 < g3 >>> 0) {
                e4 = e4 + 1 | 0;
              } else {
                e4 = c5;
                break a;
              }
            }
            f3 = 1;
            e4 = c5;
            while (1) {
              c5 = (15 - f3 | 0) * 3 | 0;
              h2 = Pd(7, 0, c5 | 0) | 0;
              i2 = e4 & ~(H() | 0);
              e4 = Od(a3 | 0, e4 | 0, c5 | 0) | 0;
              H() | 0;
              e4 = Pd(_a2(e4 & 7) | 0, 0, c5 | 0) | 0;
              a3 = a3 & ~h2 | e4;
              e4 = i2 | (H() | 0);
              if (f3 >>> 0 < g3 >>> 0) {
                f3 = f3 + 1 | 0;
              } else {
                break;
              }
            }
          } else {
            e4 = c5;
          }
        } while (0);
        i2 = 7696 + (k2 * 28 | 0) | 0;
        b[d3 >> 2] = b[i2 >> 2];
        b[d3 + 4 >> 2] = b[i2 + 4 >> 2];
        b[d3 + 8 >> 2] = b[i2 + 8 >> 2];
        b[d3 + 12 >> 2] = b[i2 + 12 >> 2];
        if (!(Vb(a3, e4, d3) | 0)) {
          k2 = 0;
          T2 = l2;
          return k2 | 0;
        }
        h2 = d3 + 4 | 0;
        b[j2 >> 2] = b[h2 >> 2];
        b[j2 + 4 >> 2] = b[h2 + 4 >> 2];
        b[j2 + 8 >> 2] = b[h2 + 8 >> 2];
        g3 = Od(a3 | 0, e4 | 0, 52) | 0;
        H() | 0;
        i2 = g3 & 15;
        if (!(g3 & 1)) {
          g3 = i2;
        } else {
          Va(h2);
          g3 = i2 + 1 | 0;
        }
        if (!(ma(k2) | 0)) {
          e4 = 0;
        } else {
          c: do {
            if (!i2) {
              e4 = 0;
            } else {
              c5 = 1;
              while (1) {
                f3 = Od(a3 | 0, e4 | 0, (15 - c5 | 0) * 3 | 0) | 0;
                H() | 0;
                f3 = f3 & 7;
                if (f3 | 0) {
                  e4 = f3;
                  break c;
                }
                if (c5 >>> 0 < i2 >>> 0) {
                  c5 = c5 + 1 | 0;
                } else {
                  e4 = 0;
                  break;
                }
              }
            }
          } while (0);
          e4 = (e4 | 0) == 4 & 1;
        }
        if (!(vb(d3, g3, e4, 0) | 0)) {
          if ((g3 | 0) != (i2 | 0)) {
            b[h2 >> 2] = b[j2 >> 2];
            b[h2 + 4 >> 2] = b[j2 + 4 >> 2];
            b[h2 + 8 >> 2] = b[j2 + 8 >> 2];
          }
        } else {
          if (ma(k2) | 0) {
            do {
            } while ((vb(d3, g3, 0, 0) | 0) != 0);
          }
          if ((g3 | 0) != (i2 | 0)) {
            Ta(h2);
          }
        }
        k2 = 0;
        T2 = l2;
        return k2 | 0;
      }
      function Xb(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0;
        f3 = T2;
        T2 = T2 + 16 | 0;
        d3 = f3;
        e4 = Wb(a3, b2, d3) | 0;
        if (e4 | 0) {
          T2 = f3;
          return e4 | 0;
        }
        e4 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        sb(d3, e4 & 15, c5);
        e4 = 0;
        T2 = f3;
        return e4 | 0;
      }
      function Yb(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0;
        g3 = T2;
        T2 = T2 + 16 | 0;
        f3 = g3;
        d3 = Wb(a3, b2, f3) | 0;
        if (d3 | 0) {
          f3 = d3;
          T2 = g3;
          return f3 | 0;
        }
        d3 = Od(a3 | 0, b2 | 0, 45) | 0;
        H() | 0;
        d3 = (ma(d3 & 127) | 0) == 0;
        e4 = Od(a3 | 0, b2 | 0, 52) | 0;
        H() | 0;
        e4 = e4 & 15;
        a: do {
          if (!d3) {
            if (e4 | 0) {
              d3 = 1;
              while (1) {
                h2 = Pd(7, 0, (15 - d3 | 0) * 3 | 0) | 0;
                if (!((h2 & a3 | 0) == 0 & ((H() | 0) & b2 | 0) == 0)) {
                  break a;
                }
                if (d3 >>> 0 < e4 >>> 0) {
                  d3 = d3 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            tb(f3, e4, 0, 5, c5);
            h2 = 0;
            T2 = g3;
            return h2 | 0;
          }
        } while (0);
        xb(f3, e4, 0, 6, c5);
        h2 = 0;
        T2 = g3;
        return h2 | 0;
      }
      function Zb(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0;
        f3 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        if (!(ma(f3 & 127) | 0)) {
          f3 = 2;
          b[d3 >> 2] = f3;
          return 0;
        }
        f3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        if (!f3) {
          f3 = 5;
          b[d3 >> 2] = f3;
          return 0;
        }
        e4 = 1;
        while (1) {
          g3 = Pd(7, 0, (15 - e4 | 0) * 3 | 0) | 0;
          if (!((g3 & a3 | 0) == 0 & ((H() | 0) & c5 | 0) == 0)) {
            e4 = 2;
            a3 = 6;
            break;
          }
          if (e4 >>> 0 < f3 >>> 0) {
            e4 = e4 + 1 | 0;
          } else {
            e4 = 5;
            a3 = 6;
            break;
          }
        }
        if ((a3 | 0) == 6) {
          b[d3 >> 2] = e4;
          return 0;
        }
        return 0;
      }
      function _b2(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        m2 = T2;
        T2 = T2 + 128 | 0;
        k2 = m2 + 112 | 0;
        g3 = m2 + 96 | 0;
        l2 = m2;
        f3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        i2 = f3 & 15;
        b[k2 >> 2] = i2;
        h2 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        h2 = h2 & 127;
        a: do {
          if (ma(h2) | 0) {
            if (i2 | 0) {
              e4 = 1;
              while (1) {
                j2 = Pd(7, 0, (15 - e4 | 0) * 3 | 0) | 0;
                if (!((j2 & a3 | 0) == 0 & ((H() | 0) & c5 | 0) == 0)) {
                  f3 = 0;
                  break a;
                }
                if (e4 >>> 0 < i2 >>> 0) {
                  e4 = e4 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            if (!(f3 & 1)) {
              j2 = Pd(i2 + 1 | 0, 0, 52) | 0;
              l2 = H() | 0 | c5 & -15728641;
              k2 = Pd(7, 0, (14 - i2 | 0) * 3 | 0) | 0;
              l2 = _b2((j2 | a3) & ~k2, l2 & ~(H() | 0), d3) | 0;
              T2 = m2;
              return l2 | 0;
            } else {
              f3 = 1;
            }
          } else {
            f3 = 0;
          }
        } while (0);
        e4 = Wb(a3, c5, g3) | 0;
        if (!e4) {
          if (f3) {
            ub(g3, k2, l2);
            j2 = 5;
          } else {
            yb(g3, k2, l2);
            j2 = 6;
          }
          b: do {
            if (ma(h2) | 0) {
              if (!i2) {
                a3 = 5;
              } else {
                e4 = 1;
                while (1) {
                  h2 = Pd(7, 0, (15 - e4 | 0) * 3 | 0) | 0;
                  if (!((h2 & a3 | 0) == 0 & ((H() | 0) & c5 | 0) == 0)) {
                    a3 = 2;
                    break b;
                  }
                  if (e4 >>> 0 < i2 >>> 0) {
                    e4 = e4 + 1 | 0;
                  } else {
                    a3 = 5;
                    break;
                  }
                }
              }
            } else {
              a3 = 2;
            }
          } while (0);
          Vd(d3 | 0, -1, a3 << 2 | 0) | 0;
          c: do {
            if (f3) {
              g3 = 0;
              while (1) {
                h2 = l2 + (g3 << 4) | 0;
                wb(h2, b[k2 >> 2] | 0) | 0;
                h2 = b[h2 >> 2] | 0;
                i2 = b[d3 >> 2] | 0;
                if ((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)) {
                  e4 = d3;
                } else {
                  f3 = 0;
                  do {
                    f3 = f3 + 1 | 0;
                    if (f3 >>> 0 >= a3 >>> 0) {
                      e4 = 1;
                      break c;
                    }
                    e4 = d3 + (f3 << 2) | 0;
                    i2 = b[e4 >> 2] | 0;
                  } while (!((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)));
                }
                b[e4 >> 2] = h2;
                g3 = g3 + 1 | 0;
                if (g3 >>> 0 >= j2 >>> 0) {
                  e4 = 0;
                  break;
                }
              }
            } else {
              g3 = 0;
              while (1) {
                h2 = l2 + (g3 << 4) | 0;
                vb(h2, b[k2 >> 2] | 0, 0, 1) | 0;
                h2 = b[h2 >> 2] | 0;
                i2 = b[d3 >> 2] | 0;
                if ((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)) {
                  e4 = d3;
                } else {
                  f3 = 0;
                  do {
                    f3 = f3 + 1 | 0;
                    if (f3 >>> 0 >= a3 >>> 0) {
                      e4 = 1;
                      break c;
                    }
                    e4 = d3 + (f3 << 2) | 0;
                    i2 = b[e4 >> 2] | 0;
                  } while (!((i2 | 0) == -1 | (i2 | 0) == (h2 | 0)));
                }
                b[e4 >> 2] = h2;
                g3 = g3 + 1 | 0;
                if (g3 >>> 0 >= j2 >>> 0) {
                  e4 = 0;
                  break;
                }
              }
            }
          } while (0);
        }
        l2 = e4;
        T2 = m2;
        return l2 | 0;
      }
      function $b() {
        return 12;
      }
      function ac2(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (a3 >>> 0 > 15) {
          i2 = 4;
          return i2 | 0;
        }
        Pd(a3 | 0, 0, 52) | 0;
        i2 = H() | 0 | 134225919;
        if (!a3) {
          d3 = 0;
          e4 = 0;
          do {
            if (ma(e4) | 0) {
              Pd(e4 | 0, 0, 45) | 0;
              h2 = i2 | (H() | 0);
              a3 = c5 + (d3 << 3) | 0;
              b[a3 >> 2] = -1;
              b[a3 + 4 >> 2] = h2;
              d3 = d3 + 1 | 0;
            }
            e4 = e4 + 1 | 0;
          } while ((e4 | 0) != 122);
          d3 = 0;
          return d3 | 0;
        }
        d3 = 0;
        h2 = 0;
        do {
          if (ma(h2) | 0) {
            Pd(h2 | 0, 0, 45) | 0;
            e4 = 1;
            f3 = -1;
            g3 = i2 | (H() | 0);
            while (1) {
              j2 = Pd(7, 0, (15 - e4 | 0) * 3 | 0) | 0;
              f3 = f3 & ~j2;
              g3 = g3 & ~(H() | 0);
              if ((e4 | 0) == (a3 | 0)) {
                break;
              } else {
                e4 = e4 + 1 | 0;
              }
            }
            j2 = c5 + (d3 << 3) | 0;
            b[j2 >> 2] = f3;
            b[j2 + 4 >> 2] = g3;
            d3 = d3 + 1 | 0;
          }
          h2 = h2 + 1 | 0;
        } while ((h2 | 0) != 122);
        d3 = 0;
        return d3 | 0;
      }
      function bc4(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0;
        t5 = T2;
        T2 = T2 + 16 | 0;
        r3 = t5;
        s3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        s3 = s3 & 15;
        if (d3 >>> 0 > 15) {
          s3 = 4;
          T2 = t5;
          return s3 | 0;
        }
        if ((s3 | 0) < (d3 | 0)) {
          s3 = 12;
          T2 = t5;
          return s3 | 0;
        }
        if ((s3 | 0) != (d3 | 0)) {
          g3 = Pd(d3 | 0, 0, 52) | 0;
          g3 = g3 | a3;
          i2 = H() | 0 | c5 & -15728641;
          if ((s3 | 0) > (d3 | 0)) {
            j2 = d3;
            do {
              q3 = Pd(7, 0, (14 - j2 | 0) * 3 | 0) | 0;
              j2 = j2 + 1 | 0;
              g3 = q3 | g3;
              i2 = H() | 0 | i2;
            } while ((j2 | 0) < (s3 | 0));
            q3 = g3;
          } else {
            q3 = g3;
          }
        } else {
          q3 = a3;
          i2 = c5;
        }
        p3 = Od(q3 | 0, i2 | 0, 45) | 0;
        H() | 0;
        a: do {
          if (ma(p3 & 127) | 0) {
            j2 = Od(q3 | 0, i2 | 0, 52) | 0;
            H() | 0;
            j2 = j2 & 15;
            if (j2 | 0) {
              g3 = 1;
              while (1) {
                p3 = Pd(7, 0, (15 - g3 | 0) * 3 | 0) | 0;
                if (!((p3 & q3 | 0) == 0 & ((H() | 0) & i2 | 0) == 0)) {
                  k2 = 33;
                  break a;
                }
                if (g3 >>> 0 < j2 >>> 0) {
                  g3 = g3 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            p3 = e4;
            b[p3 >> 2] = 0;
            b[p3 + 4 >> 2] = 0;
            if ((s3 | 0) > (d3 | 0)) {
              p3 = c5 & -15728641;
              o2 = s3;
              while (1) {
                n2 = o2;
                o2 = o2 + -1 | 0;
                if (o2 >>> 0 > 15 | (s3 | 0) < (o2 | 0)) {
                  k2 = 19;
                  break;
                }
                if ((s3 | 0) != (o2 | 0)) {
                  g3 = Pd(o2 | 0, 0, 52) | 0;
                  g3 = g3 | a3;
                  j2 = H() | 0 | p3;
                  if ((s3 | 0) < (n2 | 0)) {
                    m2 = g3;
                  } else {
                    k2 = o2;
                    do {
                      m2 = Pd(7, 0, (14 - k2 | 0) * 3 | 0) | 0;
                      k2 = k2 + 1 | 0;
                      g3 = m2 | g3;
                      j2 = H() | 0 | j2;
                    } while ((k2 | 0) < (s3 | 0));
                    m2 = g3;
                  }
                } else {
                  m2 = a3;
                  j2 = c5;
                }
                l2 = Od(m2 | 0, j2 | 0, 45) | 0;
                H() | 0;
                if (!(ma(l2 & 127) | 0)) {
                  g3 = 0;
                } else {
                  l2 = Od(m2 | 0, j2 | 0, 52) | 0;
                  H() | 0;
                  l2 = l2 & 15;
                  b: do {
                    if (!l2) {
                      g3 = 0;
                    } else {
                      k2 = 1;
                      while (1) {
                        g3 = Od(m2 | 0, j2 | 0, (15 - k2 | 0) * 3 | 0) | 0;
                        H() | 0;
                        g3 = g3 & 7;
                        if (g3 | 0) {
                          break b;
                        }
                        if (k2 >>> 0 < l2 >>> 0) {
                          k2 = k2 + 1 | 0;
                        } else {
                          g3 = 0;
                          break;
                        }
                      }
                    }
                  } while (0);
                  g3 = (g3 | 0) == 0 & 1;
                }
                j2 = Od(a3 | 0, c5 | 0, (15 - n2 | 0) * 3 | 0) | 0;
                H() | 0;
                j2 = j2 & 7;
                if ((j2 | 0) == 7) {
                  f3 = 5;
                  k2 = 42;
                  break;
                }
                g3 = (g3 | 0) != 0;
                if ((j2 | 0) == 1 & g3) {
                  f3 = 5;
                  k2 = 42;
                  break;
                }
                m2 = j2 + (((j2 | 0) != 0 & g3) << 31 >> 31) | 0;
                if (m2 | 0) {
                  k2 = s3 - n2 | 0;
                  k2 = Mc(7, 0, k2, ((k2 | 0) < 0) << 31 >> 31) | 0;
                  l2 = H() | 0;
                  if (g3) {
                    g3 = Kd(k2 | 0, l2 | 0, 5, 0) | 0;
                    g3 = Ed(g3 | 0, H() | 0, -5, -1) | 0;
                    g3 = Id(g3 | 0, H() | 0, 6, 0) | 0;
                    g3 = Ed(g3 | 0, H() | 0, 1, 0) | 0;
                    j2 = H() | 0;
                  } else {
                    g3 = k2;
                    j2 = l2;
                  }
                  n2 = m2 + -1 | 0;
                  n2 = Kd(k2 | 0, l2 | 0, n2 | 0, ((n2 | 0) < 0) << 31 >> 31 | 0) | 0;
                  n2 = Ed(g3 | 0, j2 | 0, n2 | 0, H() | 0) | 0;
                  m2 = H() | 0;
                  l2 = e4;
                  l2 = Ed(n2 | 0, m2 | 0, b[l2 >> 2] | 0, b[l2 + 4 >> 2] | 0) | 0;
                  m2 = H() | 0;
                  n2 = e4;
                  b[n2 >> 2] = l2;
                  b[n2 + 4 >> 2] = m2;
                }
                if ((o2 | 0) <= (d3 | 0)) {
                  k2 = 37;
                  break;
                }
              }
              if ((k2 | 0) == 19) {
                I2(27795, 27122, 1276, 27158);
              } else if ((k2 | 0) == 37) {
                h2 = e4;
                f3 = b[h2 + 4 >> 2] | 0;
                h2 = b[h2 >> 2] | 0;
                break;
              } else if ((k2 | 0) == 42) {
                T2 = t5;
                return f3 | 0;
              }
            } else {
              f3 = 0;
              h2 = 0;
            }
          } else {
            k2 = 33;
          }
        } while (0);
        c: do {
          if ((k2 | 0) == 33) {
            p3 = e4;
            b[p3 >> 2] = 0;
            b[p3 + 4 >> 2] = 0;
            if ((s3 | 0) > (d3 | 0)) {
              g3 = s3;
              while (1) {
                f3 = Od(a3 | 0, c5 | 0, (15 - g3 | 0) * 3 | 0) | 0;
                H() | 0;
                f3 = f3 & 7;
                if ((f3 | 0) == 7) {
                  f3 = 5;
                  break;
                }
                h2 = s3 - g3 | 0;
                h2 = Mc(7, 0, h2, ((h2 | 0) < 0) << 31 >> 31) | 0;
                f3 = Kd(h2 | 0, H() | 0, f3 | 0, 0) | 0;
                h2 = H() | 0;
                p3 = e4;
                h2 = Ed(b[p3 >> 2] | 0, b[p3 + 4 >> 2] | 0, f3 | 0, h2 | 0) | 0;
                f3 = H() | 0;
                p3 = e4;
                b[p3 >> 2] = h2;
                b[p3 + 4 >> 2] = f3;
                g3 = g3 + -1 | 0;
                if ((g3 | 0) <= (d3 | 0)) {
                  break c;
                }
              }
              T2 = t5;
              return f3 | 0;
            } else {
              f3 = 0;
              h2 = 0;
            }
          }
        } while (0);
        if (Eb(q3, i2, s3, r3) | 0) {
          I2(27795, 27122, 1236, 27173);
        }
        s3 = r3;
        r3 = b[s3 + 4 >> 2] | 0;
        if (((f3 | 0) > -1 | (f3 | 0) == -1 & h2 >>> 0 > 4294967295) & ((r3 | 0) > (f3 | 0) | ((r3 | 0) == (f3 | 0) ? (b[s3 >> 2] | 0) >>> 0 > h2 >>> 0 : 0))) {
          s3 = 0;
          T2 = t5;
          return s3 | 0;
        } else {
          I2(27795, 27122, 1316, 27158);
        }
        return 0;
      }
      function cc2(a3, c5, d3, e4, f3, g3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0;
        m2 = T2;
        T2 = T2 + 16 | 0;
        h2 = m2;
        if (f3 >>> 0 > 15) {
          g3 = 4;
          T2 = m2;
          return g3 | 0;
        }
        i2 = Od(d3 | 0, e4 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        if ((i2 | 0) > (f3 | 0)) {
          g3 = 12;
          T2 = m2;
          return g3 | 0;
        }
        if (Eb(d3, e4, f3, h2) | 0) {
          I2(27795, 27122, 1236, 27173);
        }
        l2 = h2;
        k2 = b[l2 + 4 >> 2] | 0;
        if (!(((c5 | 0) > -1 | (c5 | 0) == -1 & a3 >>> 0 > 4294967295) & ((k2 | 0) > (c5 | 0) | ((k2 | 0) == (c5 | 0) ? (b[l2 >> 2] | 0) >>> 0 > a3 >>> 0 : 0)))) {
          g3 = 2;
          T2 = m2;
          return g3 | 0;
        }
        l2 = f3 - i2 | 0;
        f3 = Pd(f3 | 0, 0, 52) | 0;
        j2 = H() | 0 | e4 & -15728641;
        k2 = g3;
        b[k2 >> 2] = f3 | d3;
        b[k2 + 4 >> 2] = j2;
        k2 = Od(d3 | 0, e4 | 0, 45) | 0;
        H() | 0;
        a: do {
          if (ma(k2 & 127) | 0) {
            if (i2 | 0) {
              h2 = 1;
              while (1) {
                k2 = Pd(7, 0, (15 - h2 | 0) * 3 | 0) | 0;
                if (!((k2 & d3 | 0) == 0 & ((H() | 0) & e4 | 0) == 0)) {
                  break a;
                }
                if (h2 >>> 0 < i2 >>> 0) {
                  h2 = h2 + 1 | 0;
                } else {
                  break;
                }
              }
            }
            if ((l2 | 0) < 1) {
              g3 = 0;
              T2 = m2;
              return g3 | 0;
            }
            k2 = i2 ^ 15;
            e4 = -1;
            j2 = 1;
            h2 = 1;
            while (1) {
              i2 = l2 - j2 | 0;
              i2 = Mc(7, 0, i2, ((i2 | 0) < 0) << 31 >> 31) | 0;
              d3 = H() | 0;
              do {
                if (h2) {
                  h2 = Kd(i2 | 0, d3 | 0, 5, 0) | 0;
                  h2 = Ed(h2 | 0, H() | 0, -5, -1) | 0;
                  h2 = Id(h2 | 0, H() | 0, 6, 0) | 0;
                  f3 = H() | 0;
                  if ((c5 | 0) > (f3 | 0) | (c5 | 0) == (f3 | 0) & a3 >>> 0 > h2 >>> 0) {
                    c5 = Ed(a3 | 0, c5 | 0, -1, -1) | 0;
                    c5 = Fd(c5 | 0, H() | 0, h2 | 0, f3 | 0) | 0;
                    h2 = H() | 0;
                    n2 = g3;
                    p3 = b[n2 >> 2] | 0;
                    n2 = b[n2 + 4 >> 2] | 0;
                    q3 = (k2 + e4 | 0) * 3 | 0;
                    o2 = Pd(7, 0, q3 | 0) | 0;
                    n2 = n2 & ~(H() | 0);
                    e4 = Id(c5 | 0, h2 | 0, i2 | 0, d3 | 0) | 0;
                    a3 = H() | 0;
                    f3 = Ed(e4 | 0, a3 | 0, 2, 0) | 0;
                    q3 = Pd(f3 | 0, H() | 0, q3 | 0) | 0;
                    n2 = H() | 0 | n2;
                    f3 = g3;
                    b[f3 >> 2] = q3 | p3 & ~o2;
                    b[f3 + 4 >> 2] = n2;
                    a3 = Kd(e4 | 0, a3 | 0, i2 | 0, d3 | 0) | 0;
                    a3 = Fd(c5 | 0, h2 | 0, a3 | 0, H() | 0) | 0;
                    h2 = 0;
                    c5 = H() | 0;
                    break;
                  } else {
                    q3 = g3;
                    o2 = b[q3 >> 2] | 0;
                    q3 = b[q3 + 4 >> 2] | 0;
                    p3 = Pd(7, 0, (k2 + e4 | 0) * 3 | 0) | 0;
                    q3 = q3 & ~(H() | 0);
                    h2 = g3;
                    b[h2 >> 2] = o2 & ~p3;
                    b[h2 + 4 >> 2] = q3;
                    h2 = 1;
                    break;
                  }
                } else {
                  o2 = g3;
                  f3 = b[o2 >> 2] | 0;
                  o2 = b[o2 + 4 >> 2] | 0;
                  e4 = (k2 + e4 | 0) * 3 | 0;
                  n2 = Pd(7, 0, e4 | 0) | 0;
                  o2 = o2 & ~(H() | 0);
                  q3 = Id(a3 | 0, c5 | 0, i2 | 0, d3 | 0) | 0;
                  h2 = H() | 0;
                  e4 = Pd(q3 | 0, h2 | 0, e4 | 0) | 0;
                  o2 = H() | 0 | o2;
                  p3 = g3;
                  b[p3 >> 2] = e4 | f3 & ~n2;
                  b[p3 + 4 >> 2] = o2;
                  h2 = Kd(q3 | 0, h2 | 0, i2 | 0, d3 | 0) | 0;
                  a3 = Fd(a3 | 0, c5 | 0, h2 | 0, H() | 0) | 0;
                  h2 = 0;
                  c5 = H() | 0;
                }
              } while (0);
              if ((l2 | 0) > (j2 | 0)) {
                e4 = ~j2;
                j2 = j2 + 1 | 0;
              } else {
                c5 = 0;
                break;
              }
            }
            T2 = m2;
            return c5 | 0;
          }
        } while (0);
        if ((l2 | 0) < 1) {
          q3 = 0;
          T2 = m2;
          return q3 | 0;
        }
        f3 = i2 ^ 15;
        h2 = 1;
        while (1) {
          p3 = l2 - h2 | 0;
          p3 = Mc(7, 0, p3, ((p3 | 0) < 0) << 31 >> 31) | 0;
          q3 = H() | 0;
          j2 = g3;
          d3 = b[j2 >> 2] | 0;
          j2 = b[j2 + 4 >> 2] | 0;
          i2 = (f3 - h2 | 0) * 3 | 0;
          e4 = Pd(7, 0, i2 | 0) | 0;
          j2 = j2 & ~(H() | 0);
          n2 = Id(a3 | 0, c5 | 0, p3 | 0, q3 | 0) | 0;
          o2 = H() | 0;
          i2 = Pd(n2 | 0, o2 | 0, i2 | 0) | 0;
          j2 = H() | 0 | j2;
          k2 = g3;
          b[k2 >> 2] = i2 | d3 & ~e4;
          b[k2 + 4 >> 2] = j2;
          q3 = Kd(n2 | 0, o2 | 0, p3 | 0, q3 | 0) | 0;
          a3 = Fd(a3 | 0, c5 | 0, q3 | 0, H() | 0) | 0;
          c5 = H() | 0;
          if ((l2 | 0) <= (h2 | 0)) {
            c5 = 0;
            break;
          } else {
            h2 = h2 + 1 | 0;
          }
        }
        T2 = m2;
        return c5 | 0;
      }
      function dc(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        f3 = Od(c5 | 0, d3 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        if ((c5 | 0) == 0 & (d3 | 0) == 0 | ((e4 | 0) > 15 | (f3 | 0) > (e4 | 0))) {
          g3 = -1;
          c5 = -1;
          d3 = 0;
          f3 = 0;
        } else {
          c5 = Hb(c5, d3, f3 + 1 | 0, e4) | 0;
          h2 = (H() | 0) & -15728641;
          d3 = Pd(e4 | 0, 0, 52) | 0;
          d3 = c5 | d3;
          h2 = h2 | (H() | 0);
          c5 = (Fb(d3, h2) | 0) == 0;
          g3 = f3;
          c5 = c5 ? -1 : e4;
          f3 = h2;
        }
        h2 = a3;
        b[h2 >> 2] = d3;
        b[h2 + 4 >> 2] = f3;
        b[a3 + 8 >> 2] = g3;
        b[a3 + 12 >> 2] = c5;
        return;
      }
      function ec(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0;
        f3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        g3 = e4 + 8 | 0;
        b[g3 >> 2] = f3;
        if ((a3 | 0) == 0 & (c5 | 0) == 0 | ((d3 | 0) > 15 | (f3 | 0) > (d3 | 0))) {
          d3 = e4;
          b[d3 >> 2] = 0;
          b[d3 + 4 >> 2] = 0;
          b[g3 >> 2] = -1;
          b[e4 + 12 >> 2] = -1;
          return;
        }
        a3 = Hb(a3, c5, f3 + 1 | 0, d3) | 0;
        g3 = (H() | 0) & -15728641;
        f3 = Pd(d3 | 0, 0, 52) | 0;
        f3 = a3 | f3;
        g3 = g3 | (H() | 0);
        a3 = e4;
        b[a3 >> 2] = f3;
        b[a3 + 4 >> 2] = g3;
        a3 = e4 + 12 | 0;
        if (!(Fb(f3, g3) | 0)) {
          b[a3 >> 2] = -1;
          return;
        } else {
          b[a3 >> 2] = d3;
          return;
        }
      }
      function fc(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        d3 = a3;
        c5 = b[d3 >> 2] | 0;
        d3 = b[d3 + 4 >> 2] | 0;
        if ((c5 | 0) == 0 & (d3 | 0) == 0) {
          return;
        }
        e4 = Od(c5 | 0, d3 | 0, 52) | 0;
        H() | 0;
        e4 = e4 & 15;
        i2 = Pd(1, 0, (e4 ^ 15) * 3 | 0) | 0;
        c5 = Ed(i2 | 0, H() | 0, c5 | 0, d3 | 0) | 0;
        d3 = H() | 0;
        i2 = a3;
        b[i2 >> 2] = c5;
        b[i2 + 4 >> 2] = d3;
        i2 = a3 + 8 | 0;
        h2 = b[i2 >> 2] | 0;
        if ((e4 | 0) < (h2 | 0)) {
          return;
        }
        j2 = a3 + 12 | 0;
        g3 = e4;
        while (1) {
          if ((g3 | 0) == (h2 | 0)) {
            e4 = 5;
            break;
          }
          k2 = (g3 | 0) == (b[j2 >> 2] | 0);
          f3 = (15 - g3 | 0) * 3 | 0;
          e4 = Od(c5 | 0, d3 | 0, f3 | 0) | 0;
          H() | 0;
          e4 = e4 & 7;
          if (k2 & ((e4 | 0) == 1 & true)) {
            e4 = 7;
            break;
          }
          if (!((e4 | 0) == 7 & true)) {
            e4 = 10;
            break;
          }
          k2 = Pd(1, 0, f3 | 0) | 0;
          c5 = Ed(c5 | 0, d3 | 0, k2 | 0, H() | 0) | 0;
          d3 = H() | 0;
          k2 = a3;
          b[k2 >> 2] = c5;
          b[k2 + 4 >> 2] = d3;
          if ((g3 | 0) > (h2 | 0)) {
            g3 = g3 + -1 | 0;
          } else {
            e4 = 10;
            break;
          }
        }
        if ((e4 | 0) == 5) {
          k2 = a3;
          b[k2 >> 2] = 0;
          b[k2 + 4 >> 2] = 0;
          b[i2 >> 2] = -1;
          b[j2 >> 2] = -1;
          return;
        } else if ((e4 | 0) == 7) {
          h2 = Pd(1, 0, f3 | 0) | 0;
          h2 = Ed(c5 | 0, d3 | 0, h2 | 0, H() | 0) | 0;
          i2 = H() | 0;
          k2 = a3;
          b[k2 >> 2] = h2;
          b[k2 + 4 >> 2] = i2;
          b[j2 >> 2] = g3 + -1;
          return;
        } else if ((e4 | 0) == 10) {
          return;
        }
      }
      function gc(a3) {
        a3 = +a3;
        var b2 = 0;
        b2 = a3 < 0 ? a3 + 6.283185307179586 : a3;
        return +(!(a3 >= 6.283185307179586) ? b2 : b2 + -6.283185307179586);
      }
      function hc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (!(+q2(+(+e3[a3 >> 3] - +e3[b2 >> 3])) < 17453292519943298e-27)) {
          b2 = 0;
          return b2 | 0;
        }
        b2 = +q2(+(+e3[a3 + 8 >> 3] - +e3[b2 + 8 >> 3])) < 17453292519943298e-27;
        return b2 | 0;
      }
      function ic(a3, b2) {
        a3 = +a3;
        b2 = b2 | 0;
        switch (b2 | 0) {
          case 1: {
            a3 = a3 < 0 ? a3 + 6.283185307179586 : a3;
            break;
          }
          case 2: {
            a3 = a3 > 0 ? a3 + -6.283185307179586 : a3;
            break;
          }
          default:
        }
        return +a3;
      }
      function jc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0;
        f3 = +e3[b2 >> 3];
        d3 = +e3[a3 >> 3];
        g3 = +u5(+((f3 - d3) * 0.5));
        c5 = +u5(+((+e3[b2 + 8 >> 3] - +e3[a3 + 8 >> 3]) * 0.5));
        c5 = g3 * g3 + c5 * (+t4(+f3) * +t4(+d3) * c5);
        return +(+z2(+ +r2(+c5), + +r2(+(1 - c5))) * 2);
      }
      function kc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0;
        f3 = +e3[b2 >> 3];
        d3 = +e3[a3 >> 3];
        g3 = +u5(+((f3 - d3) * 0.5));
        c5 = +u5(+((+e3[b2 + 8 >> 3] - +e3[a3 + 8 >> 3]) * 0.5));
        c5 = g3 * g3 + c5 * (+t4(+f3) * +t4(+d3) * c5);
        return +(+z2(+ +r2(+c5), + +r2(+(1 - c5))) * 2 * 6371.007180918475);
      }
      function lc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0;
        f3 = +e3[b2 >> 3];
        d3 = +e3[a3 >> 3];
        g3 = +u5(+((f3 - d3) * 0.5));
        c5 = +u5(+((+e3[b2 + 8 >> 3] - +e3[a3 + 8 >> 3]) * 0.5));
        c5 = g3 * g3 + c5 * (+t4(+f3) * +t4(+d3) * c5);
        return +(+z2(+ +r2(+c5), + +r2(+(1 - c5))) * 2 * 6371.007180918475 * 1e3);
      }
      function mc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0;
        g3 = +e3[b2 >> 3];
        d3 = +t4(+g3);
        f3 = +e3[b2 + 8 >> 3] - +e3[a3 + 8 >> 3];
        h2 = d3 * +u5(+f3);
        c5 = +e3[a3 >> 3];
        return + +z2(+h2, +(+u5(+g3) * +t4(+c5) - +t4(+f3) * (d3 * +u5(+c5))));
      }
      function nc(a3, c5, d3, f3) {
        a3 = a3 | 0;
        c5 = +c5;
        d3 = +d3;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (d3 < 1e-16) {
          b[f3 >> 2] = b[a3 >> 2];
          b[f3 + 4 >> 2] = b[a3 + 4 >> 2];
          b[f3 + 8 >> 2] = b[a3 + 8 >> 2];
          b[f3 + 12 >> 2] = b[a3 + 12 >> 2];
          return;
        }
        h2 = c5 < 0 ? c5 + 6.283185307179586 : c5;
        h2 = !(c5 >= 6.283185307179586) ? h2 : h2 + -6.283185307179586;
        do {
          if (h2 < 1e-16) {
            c5 = +e3[a3 >> 3] + d3;
            e3[f3 >> 3] = c5;
            g3 = f3;
          } else {
            g3 = +q2(+(h2 + -3.141592653589793)) < 1e-16;
            c5 = +e3[a3 >> 3];
            if (g3) {
              c5 = c5 - d3;
              e3[f3 >> 3] = c5;
              g3 = f3;
              break;
            }
            i2 = +t4(+d3);
            d3 = +u5(+d3);
            c5 = i2 * +u5(+c5) + +t4(+h2) * (d3 * +t4(+c5));
            c5 = c5 > 1 ? 1 : c5;
            c5 = +x2(+(c5 < -1 ? -1 : c5));
            e3[f3 >> 3] = c5;
            if (+q2(+(c5 + -1.5707963267948966)) < 1e-16) {
              e3[f3 >> 3] = 1.5707963267948966;
              e3[f3 + 8 >> 3] = 0;
              return;
            }
            if (+q2(+(c5 + 1.5707963267948966)) < 1e-16) {
              e3[f3 >> 3] = -1.5707963267948966;
              e3[f3 + 8 >> 3] = 0;
              return;
            }
            j2 = 1 / +t4(+c5);
            h2 = d3 * +u5(+h2) * j2;
            d3 = +e3[a3 >> 3];
            c5 = j2 * ((i2 - +u5(+c5) * +u5(+d3)) / +t4(+d3));
            i2 = h2 > 1 ? 1 : h2;
            c5 = c5 > 1 ? 1 : c5;
            c5 = +e3[a3 + 8 >> 3] + +z2(+(i2 < -1 ? -1 : i2), +(c5 < -1 ? -1 : c5));
            if (c5 > 3.141592653589793) {
              do {
                c5 = c5 + -6.283185307179586;
              } while (c5 > 3.141592653589793);
            }
            if (c5 < -3.141592653589793) {
              do {
                c5 = c5 + 6.283185307179586;
              } while (c5 < -3.141592653589793);
            }
            e3[f3 + 8 >> 3] = c5;
            return;
          }
        } while (0);
        if (+q2(+(c5 + -1.5707963267948966)) < 1e-16) {
          e3[g3 >> 3] = 1.5707963267948966;
          e3[f3 + 8 >> 3] = 0;
          return;
        }
        if (+q2(+(c5 + 1.5707963267948966)) < 1e-16) {
          e3[g3 >> 3] = -1.5707963267948966;
          e3[f3 + 8 >> 3] = 0;
          return;
        }
        c5 = +e3[a3 + 8 >> 3];
        if (c5 > 3.141592653589793) {
          do {
            c5 = c5 + -6.283185307179586;
          } while (c5 > 3.141592653589793);
        }
        if (c5 < -3.141592653589793) {
          do {
            c5 = c5 + 6.283185307179586;
          } while (c5 < -3.141592653589793);
        }
        e3[f3 + 8 >> 3] = c5;
        return;
      }
      function oc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e3[b2 >> 3] = +e3[20656 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function pc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e3[b2 >> 3] = +e3[20784 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function qc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e3[b2 >> 3] = +e3[20912 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function rc(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (a3 >>> 0 > 15) {
          b2 = 4;
          return b2 | 0;
        }
        e3[b2 >> 3] = +e3[21040 + (a3 << 3) >> 3];
        b2 = 0;
        return b2 | 0;
      }
      function sc(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0;
        if (a3 >>> 0 > 15) {
          c5 = 4;
          return c5 | 0;
        }
        d3 = Mc(7, 0, a3, ((a3 | 0) < 0) << 31 >> 31) | 0;
        d3 = Kd(d3 | 0, H() | 0, 120, 0) | 0;
        a3 = H() | 0;
        b[c5 >> 2] = d3 | 2;
        b[c5 + 4 >> 2] = a3;
        c5 = 0;
        return c5 | 0;
      }
      function tc(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        n2 = +e3[b2 >> 3];
        l2 = +e3[a3 >> 3];
        j2 = +u5(+((n2 - l2) * 0.5));
        g3 = +e3[b2 + 8 >> 3];
        k2 = +e3[a3 + 8 >> 3];
        h2 = +u5(+((g3 - k2) * 0.5));
        i2 = +t4(+l2);
        m2 = +t4(+n2);
        h2 = j2 * j2 + h2 * (m2 * i2 * h2);
        h2 = +z2(+ +r2(+h2), + +r2(+(1 - h2))) * 2;
        j2 = +e3[c5 >> 3];
        n2 = +u5(+((j2 - n2) * 0.5));
        d3 = +e3[c5 + 8 >> 3];
        g3 = +u5(+((d3 - g3) * 0.5));
        f3 = +t4(+j2);
        g3 = n2 * n2 + g3 * (m2 * f3 * g3);
        g3 = +z2(+ +r2(+g3), + +r2(+(1 - g3))) * 2;
        j2 = +u5(+((l2 - j2) * 0.5));
        d3 = +u5(+((k2 - d3) * 0.5));
        d3 = j2 * j2 + d3 * (i2 * f3 * d3);
        d3 = +z2(+ +r2(+d3), + +r2(+(1 - d3))) * 2;
        f3 = (h2 + g3 + d3) * 0.5;
        return +(+y2(+ +r2(+(+v3(+(f3 * 0.5)) * +v3(+((f3 - h2) * 0.5)) * +v3(+((f3 - g3) * 0.5)) * +v3(+((f3 - d3) * 0.5))))) * 4);
      }
      function uc(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T2;
        T2 = T2 + 192 | 0;
        h2 = j2 + 168 | 0;
        i2 = j2;
        g3 = Xb(a3, c5, h2) | 0;
        if (g3 | 0) {
          d3 = g3;
          T2 = j2;
          return d3 | 0;
        }
        if (Yb(a3, c5, i2) | 0) {
          I2(27795, 27190, 415, 27199);
        }
        c5 = b[i2 >> 2] | 0;
        if ((c5 | 0) > 0) {
          f3 = +tc(i2 + 8 | 0, i2 + 8 + (((c5 | 0) != 1 & 1) << 4) | 0, h2) + 0;
          if ((c5 | 0) != 1) {
            a3 = 1;
            do {
              g3 = a3;
              a3 = a3 + 1 | 0;
              f3 = f3 + +tc(i2 + 8 + (g3 << 4) | 0, i2 + 8 + (((a3 | 0) % (c5 | 0) | 0) << 4) | 0, h2);
            } while ((a3 | 0) < (c5 | 0));
          }
        } else {
          f3 = 0;
        }
        e3[d3 >> 3] = f3;
        d3 = 0;
        T2 = j2;
        return d3 | 0;
      }
      function vc(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        a3 = uc(a3, b2, c5) | 0;
        if (a3 | 0) {
          return a3 | 0;
        }
        e3[c5 >> 3] = +e3[c5 >> 3] * 6371.007180918475 * 6371.007180918475;
        return a3 | 0;
      }
      function wc(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        a3 = uc(a3, b2, c5) | 0;
        if (a3 | 0) {
          return a3 | 0;
        }
        e3[c5 >> 3] = +e3[c5 >> 3] * 6371.007180918475 * 6371.007180918475 * 1e3 * 1e3;
        return a3 | 0;
      }
      function xc(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T2;
        T2 = T2 + 176 | 0;
        i2 = j2;
        a3 = nb(a3, c5, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          T2 = j2;
          return i2 | 0;
        }
        e3[d3 >> 3] = 0;
        a3 = b[i2 >> 2] | 0;
        if ((a3 | 0) <= 1) {
          i2 = 0;
          T2 = j2;
          return i2 | 0;
        }
        c5 = a3 + -1 | 0;
        a3 = 0;
        f3 = +e3[i2 + 8 >> 3];
        g3 = +e3[i2 + 16 >> 3];
        h2 = 0;
        do {
          a3 = a3 + 1 | 0;
          l2 = f3;
          f3 = +e3[i2 + 8 + (a3 << 4) >> 3];
          m2 = +u5(+((f3 - l2) * 0.5));
          k2 = g3;
          g3 = +e3[i2 + 8 + (a3 << 4) + 8 >> 3];
          k2 = +u5(+((g3 - k2) * 0.5));
          k2 = m2 * m2 + k2 * (+t4(+f3) * +t4(+l2) * k2);
          h2 = h2 + +z2(+ +r2(+k2), + +r2(+(1 - k2))) * 2;
        } while ((a3 | 0) < (c5 | 0));
        e3[d3 >> 3] = h2;
        i2 = 0;
        T2 = j2;
        return i2 | 0;
      }
      function yc(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T2;
        T2 = T2 + 176 | 0;
        i2 = j2;
        a3 = nb(a3, c5, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          h2 = +e3[d3 >> 3];
          h2 = h2 * 6371.007180918475;
          e3[d3 >> 3] = h2;
          T2 = j2;
          return i2 | 0;
        }
        e3[d3 >> 3] = 0;
        a3 = b[i2 >> 2] | 0;
        if ((a3 | 0) <= 1) {
          i2 = 0;
          h2 = 0;
          h2 = h2 * 6371.007180918475;
          e3[d3 >> 3] = h2;
          T2 = j2;
          return i2 | 0;
        }
        c5 = a3 + -1 | 0;
        a3 = 0;
        f3 = +e3[i2 + 8 >> 3];
        g3 = +e3[i2 + 16 >> 3];
        h2 = 0;
        do {
          a3 = a3 + 1 | 0;
          l2 = f3;
          f3 = +e3[i2 + 8 + (a3 << 4) >> 3];
          m2 = +u5(+((f3 - l2) * 0.5));
          k2 = g3;
          g3 = +e3[i2 + 8 + (a3 << 4) + 8 >> 3];
          k2 = +u5(+((g3 - k2) * 0.5));
          k2 = m2 * m2 + k2 * (+t4(+l2) * +t4(+f3) * k2);
          h2 = h2 + +z2(+ +r2(+k2), + +r2(+(1 - k2))) * 2;
        } while ((a3 | 0) != (c5 | 0));
        e3[d3 >> 3] = h2;
        i2 = 0;
        m2 = h2;
        m2 = m2 * 6371.007180918475;
        e3[d3 >> 3] = m2;
        T2 = j2;
        return i2 | 0;
      }
      function zc(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T2;
        T2 = T2 + 176 | 0;
        i2 = j2;
        a3 = nb(a3, c5, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          h2 = +e3[d3 >> 3];
          h2 = h2 * 6371.007180918475;
          h2 = h2 * 1e3;
          e3[d3 >> 3] = h2;
          T2 = j2;
          return i2 | 0;
        }
        e3[d3 >> 3] = 0;
        a3 = b[i2 >> 2] | 0;
        if ((a3 | 0) <= 1) {
          i2 = 0;
          h2 = 0;
          h2 = h2 * 6371.007180918475;
          h2 = h2 * 1e3;
          e3[d3 >> 3] = h2;
          T2 = j2;
          return i2 | 0;
        }
        c5 = a3 + -1 | 0;
        a3 = 0;
        f3 = +e3[i2 + 8 >> 3];
        g3 = +e3[i2 + 16 >> 3];
        h2 = 0;
        do {
          a3 = a3 + 1 | 0;
          l2 = f3;
          f3 = +e3[i2 + 8 + (a3 << 4) >> 3];
          m2 = +u5(+((f3 - l2) * 0.5));
          k2 = g3;
          g3 = +e3[i2 + 8 + (a3 << 4) + 8 >> 3];
          k2 = +u5(+((g3 - k2) * 0.5));
          k2 = m2 * m2 + k2 * (+t4(+l2) * +t4(+f3) * k2);
          h2 = h2 + +z2(+ +r2(+k2), + +r2(+(1 - k2))) * 2;
        } while ((a3 | 0) != (c5 | 0));
        e3[d3 >> 3] = h2;
        i2 = 0;
        m2 = h2;
        m2 = m2 * 6371.007180918475;
        m2 = m2 * 1e3;
        e3[d3 >> 3] = m2;
        T2 = j2;
        return i2 | 0;
      }
      function Ac(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0;
        c5 = Dd(1, 12) | 0;
        if (!c5) {
          I2(27280, 27235, 49, 27293);
        }
        d3 = a3 + 4 | 0;
        e4 = b[d3 >> 2] | 0;
        if (e4 | 0) {
          e4 = e4 + 8 | 0;
          b[e4 >> 2] = c5;
          b[d3 >> 2] = c5;
          return c5 | 0;
        }
        if (b[a3 >> 2] | 0) {
          I2(27310, 27235, 61, 27333);
        }
        e4 = a3;
        b[e4 >> 2] = c5;
        b[d3 >> 2] = c5;
        return c5 | 0;
      }
      function Bc(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0;
        e4 = Bd(24) | 0;
        if (!e4) {
          I2(27347, 27235, 78, 27361);
        }
        b[e4 >> 2] = b[c5 >> 2];
        b[e4 + 4 >> 2] = b[c5 + 4 >> 2];
        b[e4 + 8 >> 2] = b[c5 + 8 >> 2];
        b[e4 + 12 >> 2] = b[c5 + 12 >> 2];
        b[e4 + 16 >> 2] = 0;
        c5 = a3 + 4 | 0;
        d3 = b[c5 >> 2] | 0;
        if (d3 | 0) {
          b[d3 + 16 >> 2] = e4;
          b[c5 >> 2] = e4;
          return e4 | 0;
        }
        if (b[a3 >> 2] | 0) {
          I2(27376, 27235, 82, 27361);
        }
        b[a3 >> 2] = e4;
        b[c5 >> 2] = e4;
        return e4 | 0;
      }
      function Cc(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0;
        if (!a3) {
          return;
        }
        e4 = 1;
        while (1) {
          c5 = b[a3 >> 2] | 0;
          if (c5 | 0) {
            do {
              d3 = b[c5 >> 2] | 0;
              if (d3 | 0) {
                do {
                  f3 = d3;
                  d3 = b[d3 + 16 >> 2] | 0;
                  Cd(f3);
                } while ((d3 | 0) != 0);
              }
              f3 = c5;
              c5 = b[c5 + 8 >> 2] | 0;
              Cd(f3);
            } while ((c5 | 0) != 0);
          }
          c5 = a3;
          a3 = b[a3 + 8 >> 2] | 0;
          if (!e4) {
            Cd(c5);
          }
          if (!a3) {
            break;
          } else {
            e4 = 0;
          }
        }
        return;
      }
      function Dc(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0, B5 = 0, C5 = 0, D5 = 0, E4 = 0, F2 = 0, G3 = 0, H2 = 0, J2 = 0, K4 = 0;
        g3 = a3 + 8 | 0;
        if (b[g3 >> 2] | 0) {
          K4 = 1;
          return K4 | 0;
        }
        f3 = b[a3 >> 2] | 0;
        if (!f3) {
          K4 = 0;
          return K4 | 0;
        }
        c5 = f3;
        d3 = 0;
        do {
          d3 = d3 + 1 | 0;
          c5 = b[c5 + 8 >> 2] | 0;
        } while ((c5 | 0) != 0);
        if (d3 >>> 0 < 2) {
          K4 = 0;
          return K4 | 0;
        }
        H2 = Bd(d3 << 2) | 0;
        if (!H2) {
          I2(27396, 27235, 317, 27415);
        }
        G3 = Bd(d3 << 5) | 0;
        if (!G3) {
          I2(27437, 27235, 321, 27415);
        }
        b[a3 >> 2] = 0;
        z3 = a3 + 4 | 0;
        b[z3 >> 2] = 0;
        b[g3 >> 2] = 0;
        d3 = 0;
        F2 = 0;
        y3 = 0;
        n2 = 0;
        a: while (1) {
          m2 = b[f3 >> 2] | 0;
          if (m2) {
            h2 = 0;
            i2 = m2;
            do {
              k2 = +e3[i2 + 8 >> 3];
              c5 = i2;
              i2 = b[i2 + 16 >> 2] | 0;
              l2 = (i2 | 0) == 0;
              g3 = l2 ? m2 : i2;
              j2 = +e3[g3 + 8 >> 3];
              if (+q2(+(k2 - j2)) > 3.141592653589793) {
                K4 = 14;
                break;
              }
              h2 = h2 + (j2 - k2) * (+e3[c5 >> 3] + +e3[g3 >> 3]);
            } while (!l2);
            if ((K4 | 0) == 14) {
              K4 = 0;
              h2 = 0;
              c5 = m2;
              do {
                x3 = +e3[c5 + 8 >> 3];
                E4 = c5 + 16 | 0;
                D5 = b[E4 >> 2] | 0;
                D5 = (D5 | 0) == 0 ? m2 : D5;
                w5 = +e3[D5 + 8 >> 3];
                h2 = h2 + (+e3[c5 >> 3] + +e3[D5 >> 3]) * ((w5 < 0 ? w5 + 6.283185307179586 : w5) - (x3 < 0 ? x3 + 6.283185307179586 : x3));
                c5 = b[((c5 | 0) == 0 ? f3 : E4) >> 2] | 0;
              } while ((c5 | 0) != 0);
            }
            if (h2 > 0) {
              b[H2 + (F2 << 2) >> 2] = f3;
              F2 = F2 + 1 | 0;
              g3 = y3;
              c5 = n2;
            } else {
              K4 = 19;
            }
          } else {
            K4 = 19;
          }
          if ((K4 | 0) == 19) {
            K4 = 0;
            do {
              if (!d3) {
                if (!n2) {
                  if (!(b[a3 >> 2] | 0)) {
                    g3 = z3;
                    i2 = a3;
                    c5 = f3;
                    d3 = a3;
                    break;
                  } else {
                    K4 = 27;
                    break a;
                  }
                } else {
                  g3 = z3;
                  i2 = n2 + 8 | 0;
                  c5 = f3;
                  d3 = a3;
                  break;
                }
              } else {
                c5 = d3 + 8 | 0;
                if (b[c5 >> 2] | 0) {
                  K4 = 21;
                  break a;
                }
                d3 = Dd(1, 12) | 0;
                if (!d3) {
                  K4 = 23;
                  break a;
                }
                b[c5 >> 2] = d3;
                g3 = d3 + 4 | 0;
                i2 = d3;
                c5 = n2;
              }
            } while (0);
            b[i2 >> 2] = f3;
            b[g3 >> 2] = f3;
            i2 = G3 + (y3 << 5) | 0;
            l2 = b[f3 >> 2] | 0;
            if (l2) {
              m2 = G3 + (y3 << 5) + 8 | 0;
              e3[m2 >> 3] = 17976931348623157e292;
              n2 = G3 + (y3 << 5) + 24 | 0;
              e3[n2 >> 3] = 17976931348623157e292;
              e3[i2 >> 3] = -17976931348623157e292;
              o2 = G3 + (y3 << 5) + 16 | 0;
              e3[o2 >> 3] = -17976931348623157e292;
              u6 = 17976931348623157e292;
              v4 = -17976931348623157e292;
              g3 = 0;
              p3 = l2;
              k2 = 17976931348623157e292;
              s3 = 17976931348623157e292;
              t5 = -17976931348623157e292;
              j2 = -17976931348623157e292;
              while (1) {
                h2 = +e3[p3 >> 3];
                x3 = +e3[p3 + 8 >> 3];
                p3 = b[p3 + 16 >> 2] | 0;
                r3 = (p3 | 0) == 0;
                w5 = +e3[(r3 ? l2 : p3) + 8 >> 3];
                if (h2 < k2) {
                  e3[m2 >> 3] = h2;
                  k2 = h2;
                }
                if (x3 < s3) {
                  e3[n2 >> 3] = x3;
                  s3 = x3;
                }
                if (h2 > t5) {
                  e3[i2 >> 3] = h2;
                } else {
                  h2 = t5;
                }
                if (x3 > j2) {
                  e3[o2 >> 3] = x3;
                  j2 = x3;
                }
                u6 = x3 > 0 & x3 < u6 ? x3 : u6;
                v4 = x3 < 0 & x3 > v4 ? x3 : v4;
                g3 = g3 | +q2(+(x3 - w5)) > 3.141592653589793;
                if (r3) {
                  break;
                } else {
                  t5 = h2;
                }
              }
              if (g3) {
                e3[o2 >> 3] = v4;
                e3[n2 >> 3] = u6;
              }
            } else {
              b[i2 >> 2] = 0;
              b[i2 + 4 >> 2] = 0;
              b[i2 + 8 >> 2] = 0;
              b[i2 + 12 >> 2] = 0;
              b[i2 + 16 >> 2] = 0;
              b[i2 + 20 >> 2] = 0;
              b[i2 + 24 >> 2] = 0;
              b[i2 + 28 >> 2] = 0;
            }
            g3 = y3 + 1 | 0;
          }
          E4 = f3 + 8 | 0;
          f3 = b[E4 >> 2] | 0;
          b[E4 >> 2] = 0;
          if (!f3) {
            K4 = 45;
            break;
          } else {
            y3 = g3;
            n2 = c5;
          }
        }
        if ((K4 | 0) == 21) {
          I2(27213, 27235, 35, 27247);
        } else if ((K4 | 0) == 23) {
          I2(27267, 27235, 37, 27247);
        } else if ((K4 | 0) == 27) {
          I2(27310, 27235, 61, 27333);
        } else if ((K4 | 0) == 45) {
          b: do {
            if ((F2 | 0) > 0) {
              E4 = (g3 | 0) == 0;
              C5 = g3 << 2;
              D5 = (a3 | 0) == 0;
              B5 = 0;
              c5 = 0;
              while (1) {
                A7 = b[H2 + (B5 << 2) >> 2] | 0;
                if (!E4) {
                  y3 = Bd(C5) | 0;
                  if (!y3) {
                    K4 = 50;
                    break;
                  }
                  z3 = Bd(C5) | 0;
                  if (!z3) {
                    K4 = 52;
                    break;
                  }
                  c: do {
                    if (!D5) {
                      g3 = 0;
                      d3 = 0;
                      i2 = a3;
                      while (1) {
                        f3 = G3 + (g3 << 5) | 0;
                        if (Ec(b[i2 >> 2] | 0, f3, b[A7 >> 2] | 0) | 0) {
                          b[y3 + (d3 << 2) >> 2] = i2;
                          b[z3 + (d3 << 2) >> 2] = f3;
                          r3 = d3 + 1 | 0;
                        } else {
                          r3 = d3;
                        }
                        i2 = b[i2 + 8 >> 2] | 0;
                        if (!i2) {
                          break;
                        } else {
                          g3 = g3 + 1 | 0;
                          d3 = r3;
                        }
                      }
                      if ((r3 | 0) > 0) {
                        f3 = b[y3 >> 2] | 0;
                        if ((r3 | 0) == 1) {
                          d3 = f3;
                        } else {
                          o2 = 0;
                          p3 = -1;
                          d3 = f3;
                          n2 = f3;
                          while (1) {
                            l2 = b[n2 >> 2] | 0;
                            f3 = 0;
                            i2 = 0;
                            while (1) {
                              g3 = b[b[y3 + (i2 << 2) >> 2] >> 2] | 0;
                              if ((g3 | 0) == (l2 | 0)) {
                                m2 = f3;
                              } else {
                                m2 = f3 + ((Ec(g3, b[z3 + (i2 << 2) >> 2] | 0, b[l2 >> 2] | 0) | 0) & 1) | 0;
                              }
                              i2 = i2 + 1 | 0;
                              if ((i2 | 0) == (r3 | 0)) {
                                break;
                              } else {
                                f3 = m2;
                              }
                            }
                            g3 = (m2 | 0) > (p3 | 0);
                            d3 = g3 ? n2 : d3;
                            f3 = o2 + 1 | 0;
                            if ((f3 | 0) == (r3 | 0)) {
                              break c;
                            }
                            o2 = f3;
                            p3 = g3 ? m2 : p3;
                            n2 = b[y3 + (f3 << 2) >> 2] | 0;
                          }
                        }
                      } else {
                        d3 = 0;
                      }
                    } else {
                      d3 = 0;
                    }
                  } while (0);
                  Cd(y3);
                  Cd(z3);
                  if (d3) {
                    g3 = d3 + 4 | 0;
                    f3 = b[g3 >> 2] | 0;
                    if (!f3) {
                      if (b[d3 >> 2] | 0) {
                        K4 = 70;
                        break;
                      }
                    } else {
                      d3 = f3 + 8 | 0;
                    }
                    b[d3 >> 2] = A7;
                    b[g3 >> 2] = A7;
                  } else {
                    K4 = 73;
                  }
                } else {
                  K4 = 73;
                }
                if ((K4 | 0) == 73) {
                  K4 = 0;
                  c5 = b[A7 >> 2] | 0;
                  if (c5 | 0) {
                    do {
                      z3 = c5;
                      c5 = b[c5 + 16 >> 2] | 0;
                      Cd(z3);
                    } while ((c5 | 0) != 0);
                  }
                  Cd(A7);
                  c5 = 1;
                }
                B5 = B5 + 1 | 0;
                if ((B5 | 0) >= (F2 | 0)) {
                  J2 = c5;
                  break b;
                }
              }
              if ((K4 | 0) == 50) {
                I2(27452, 27235, 249, 27471);
              } else if ((K4 | 0) == 52) {
                I2(27490, 27235, 252, 27471);
              } else if ((K4 | 0) == 70) {
                I2(27310, 27235, 61, 27333);
              }
            } else {
              J2 = 0;
            }
          } while (0);
          Cd(H2);
          Cd(G3);
          K4 = J2;
          return K4 | 0;
        }
        return 0;
      }
      function Ec(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        if (!(Aa(c5, d3) | 0)) {
          a3 = 0;
          return a3 | 0;
        }
        c5 = ya(c5) | 0;
        f3 = +e3[d3 >> 3];
        g3 = +e3[d3 + 8 >> 3];
        g3 = c5 & g3 < 0 ? g3 + 6.283185307179586 : g3;
        a3 = b[a3 >> 2] | 0;
        if (!a3) {
          a3 = 0;
          return a3 | 0;
        }
        if (c5) {
          c5 = 0;
          l2 = g3;
          d3 = a3;
          a: while (1) {
            while (1) {
              i2 = +e3[d3 >> 3];
              g3 = +e3[d3 + 8 >> 3];
              d3 = d3 + 16 | 0;
              m2 = b[d3 >> 2] | 0;
              m2 = (m2 | 0) == 0 ? a3 : m2;
              h2 = +e3[m2 >> 3];
              j2 = +e3[m2 + 8 >> 3];
              if (i2 > h2) {
                k2 = i2;
                i2 = j2;
              } else {
                k2 = h2;
                h2 = i2;
                i2 = g3;
                g3 = j2;
              }
              f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
              if (!(f3 < h2 | f3 > k2)) {
                break;
              }
              d3 = b[d3 >> 2] | 0;
              if (!d3) {
                d3 = 22;
                break a;
              }
            }
            j2 = i2 < 0 ? i2 + 6.283185307179586 : i2;
            i2 = g3 < 0 ? g3 + 6.283185307179586 : g3;
            l2 = j2 == l2 | i2 == l2 ? l2 + -2220446049250313e-31 : l2;
            k2 = j2 + (i2 - j2) * ((f3 - h2) / (k2 - h2));
            if ((k2 < 0 ? k2 + 6.283185307179586 : k2) > l2) {
              c5 = c5 ^ 1;
            }
            d3 = b[d3 >> 2] | 0;
            if (!d3) {
              d3 = 22;
              break;
            }
          }
          if ((d3 | 0) == 22) {
            return c5 | 0;
          }
        } else {
          c5 = 0;
          l2 = g3;
          d3 = a3;
          b: while (1) {
            while (1) {
              i2 = +e3[d3 >> 3];
              g3 = +e3[d3 + 8 >> 3];
              d3 = d3 + 16 | 0;
              m2 = b[d3 >> 2] | 0;
              m2 = (m2 | 0) == 0 ? a3 : m2;
              h2 = +e3[m2 >> 3];
              j2 = +e3[m2 + 8 >> 3];
              if (i2 > h2) {
                k2 = i2;
                i2 = j2;
              } else {
                k2 = h2;
                h2 = i2;
                i2 = g3;
                g3 = j2;
              }
              f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
              if (!(f3 < h2 | f3 > k2)) {
                break;
              }
              d3 = b[d3 >> 2] | 0;
              if (!d3) {
                d3 = 22;
                break b;
              }
            }
            l2 = i2 == l2 | g3 == l2 ? l2 + -2220446049250313e-31 : l2;
            if (i2 + (g3 - i2) * ((f3 - h2) / (k2 - h2)) > l2) {
              c5 = c5 ^ 1;
            }
            d3 = b[d3 >> 2] | 0;
            if (!d3) {
              d3 = 22;
              break;
            }
          }
          if ((d3 | 0) == 22) {
            return c5 | 0;
          }
        }
        return 0;
      }
      function Fc(c5, d3, e4, f3, g3) {
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0;
        u6 = T2;
        T2 = T2 + 32 | 0;
        t5 = u6 + 16 | 0;
        s3 = u6;
        h2 = Od(c5 | 0, d3 | 0, 52) | 0;
        H() | 0;
        h2 = h2 & 15;
        p3 = Od(e4 | 0, f3 | 0, 52) | 0;
        H() | 0;
        if ((h2 | 0) != (p3 & 15 | 0)) {
          t5 = 12;
          T2 = u6;
          return t5 | 0;
        }
        l2 = Od(c5 | 0, d3 | 0, 45) | 0;
        H() | 0;
        l2 = l2 & 127;
        m2 = Od(e4 | 0, f3 | 0, 45) | 0;
        H() | 0;
        m2 = m2 & 127;
        if (l2 >>> 0 > 121 | m2 >>> 0 > 121) {
          t5 = 5;
          T2 = u6;
          return t5 | 0;
        }
        p3 = (l2 | 0) != (m2 | 0);
        if (p3) {
          j2 = ua(l2, m2) | 0;
          if ((j2 | 0) == 7) {
            t5 = 1;
            T2 = u6;
            return t5 | 0;
          }
          k2 = ua(m2, l2) | 0;
          if ((k2 | 0) == 7) {
            I2(27514, 27538, 161, 27548);
          } else {
            q3 = j2;
            i2 = k2;
          }
        } else {
          q3 = 0;
          i2 = 0;
        }
        n2 = ma(l2) | 0;
        o2 = ma(m2) | 0;
        b[t5 >> 2] = 0;
        b[t5 + 4 >> 2] = 0;
        b[t5 + 8 >> 2] = 0;
        b[t5 + 12 >> 2] = 0;
        do {
          if (!q3) {
            Vb(e4, f3, t5) | 0;
            if ((n2 | 0) != 0 & (o2 | 0) != 0) {
              if ((m2 | 0) != (l2 | 0)) {
                I2(27621, 27538, 261, 27548);
              }
              i2 = Nb(c5, d3) | 0;
              h2 = Nb(e4, f3) | 0;
              if (!((i2 | 0) == 7 | (h2 | 0) == 7)) {
                if (!(a2[22e3 + (i2 * 7 | 0) + h2 >> 0] | 0)) {
                  i2 = b[21168 + (i2 * 28 | 0) + (h2 << 2) >> 2] | 0;
                  if ((i2 | 0) > 0) {
                    j2 = t5 + 4 | 0;
                    h2 = 0;
                    do {
                      Ya(j2);
                      h2 = h2 + 1 | 0;
                    } while ((h2 | 0) != (i2 | 0));
                    r3 = 51;
                  } else {
                    r3 = 51;
                  }
                } else {
                  h2 = 1;
                }
              } else {
                h2 = 5;
              }
            } else {
              r3 = 51;
            }
          } else {
            m2 = b[4272 + (l2 * 28 | 0) + (q3 << 2) >> 2] | 0;
            j2 = (m2 | 0) > 0;
            if (!o2) {
              if (j2) {
                l2 = 0;
                k2 = e4;
                j2 = f3;
                do {
                  k2 = Rb(k2, j2) | 0;
                  j2 = H() | 0;
                  i2 = _a2(i2) | 0;
                  l2 = l2 + 1 | 0;
                } while ((l2 | 0) != (m2 | 0));
                m2 = i2;
                l2 = k2;
                k2 = j2;
              } else {
                m2 = i2;
                l2 = e4;
                k2 = f3;
              }
            } else if (j2) {
              l2 = 0;
              k2 = e4;
              j2 = f3;
              do {
                k2 = Qb(k2, j2) | 0;
                j2 = H() | 0;
                i2 = _a2(i2) | 0;
                if ((i2 | 0) == 1) {
                  i2 = _a2(1) | 0;
                }
                l2 = l2 + 1 | 0;
              } while ((l2 | 0) != (m2 | 0));
              m2 = i2;
              l2 = k2;
              k2 = j2;
            } else {
              m2 = i2;
              l2 = e4;
              k2 = f3;
            }
            Vb(l2, k2, t5) | 0;
            if (!p3) {
              I2(27563, 27538, 191, 27548);
            }
            j2 = (n2 | 0) != 0;
            i2 = (o2 | 0) != 0;
            if (j2 & i2) {
              I2(27590, 27538, 192, 27548);
            }
            if (!j2) {
              if (i2) {
                i2 = Nb(l2, k2) | 0;
                if ((i2 | 0) == 7) {
                  h2 = 5;
                  break;
                }
                if (a2[22e3 + (i2 * 7 | 0) + m2 >> 0] | 0) {
                  h2 = 1;
                  break;
                }
                l2 = 0;
                k2 = b[21168 + (m2 * 28 | 0) + (i2 << 2) >> 2] | 0;
              } else {
                l2 = 0;
                k2 = 0;
              }
            } else {
              i2 = Nb(c5, d3) | 0;
              if ((i2 | 0) == 7) {
                h2 = 5;
                break;
              }
              if (a2[22e3 + (i2 * 7 | 0) + q3 >> 0] | 0) {
                h2 = 1;
                break;
              }
              k2 = b[21168 + (i2 * 28 | 0) + (q3 << 2) >> 2] | 0;
              l2 = k2;
            }
            if ((l2 | k2 | 0) < 0) {
              h2 = 5;
            } else {
              if ((k2 | 0) > 0) {
                j2 = t5 + 4 | 0;
                i2 = 0;
                do {
                  Ya(j2);
                  i2 = i2 + 1 | 0;
                } while ((i2 | 0) != (k2 | 0));
              }
              b[s3 >> 2] = 0;
              b[s3 + 4 >> 2] = 0;
              b[s3 + 8 >> 2] = 0;
              Wa(s3, q3);
              if (h2 | 0) {
                while (1) {
                  if (!(Tb(h2) | 0)) {
                    Va(s3);
                  } else {
                    Ua(s3);
                  }
                  if ((h2 | 0) > 1) {
                    h2 = h2 + -1 | 0;
                  } else {
                    break;
                  }
                }
              }
              if ((l2 | 0) > 0) {
                h2 = 0;
                do {
                  Ya(s3);
                  h2 = h2 + 1 | 0;
                } while ((h2 | 0) != (l2 | 0));
              }
              r3 = t5 + 4 | 0;
              Ma(r3, s3, r3);
              Ka(r3);
              r3 = 51;
            }
          }
        } while (0);
        if ((r3 | 0) == 51) {
          h2 = t5 + 4 | 0;
          b[g3 >> 2] = b[h2 >> 2];
          b[g3 + 4 >> 2] = b[h2 + 4 >> 2];
          b[g3 + 8 >> 2] = b[h2 + 8 >> 2];
          h2 = 0;
        }
        t5 = h2;
        T2 = u6;
        return t5 | 0;
      }
      function Gc(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0;
        q3 = T2;
        T2 = T2 + 48 | 0;
        k2 = q3 + 36 | 0;
        h2 = q3 + 24 | 0;
        i2 = q3 + 12 | 0;
        j2 = q3;
        f3 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        f3 = f3 & 15;
        n2 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        n2 = n2 & 127;
        if (n2 >>> 0 > 121) {
          e4 = 5;
          T2 = q3;
          return e4 | 0;
        }
        l2 = ma(n2) | 0;
        Pd(f3 | 0, 0, 52) | 0;
        r3 = H() | 0 | 134225919;
        g3 = e4;
        b[g3 >> 2] = -1;
        b[g3 + 4 >> 2] = r3;
        if (!f3) {
          f3 = Pa(d3) | 0;
          if ((f3 | 0) == 7) {
            r3 = 1;
            T2 = q3;
            return r3 | 0;
          }
          f3 = ta(n2, f3) | 0;
          if ((f3 | 0) == 127) {
            r3 = 1;
            T2 = q3;
            return r3 | 0;
          }
          o2 = Pd(f3 | 0, 0, 45) | 0;
          p3 = H() | 0;
          n2 = e4;
          p3 = b[n2 + 4 >> 2] & -1040385 | p3;
          r3 = e4;
          b[r3 >> 2] = b[n2 >> 2] | o2;
          b[r3 + 4 >> 2] = p3;
          r3 = 0;
          T2 = q3;
          return r3 | 0;
        }
        b[k2 >> 2] = b[d3 >> 2];
        b[k2 + 4 >> 2] = b[d3 + 4 >> 2];
        b[k2 + 8 >> 2] = b[d3 + 8 >> 2];
        d3 = f3;
        while (1) {
          g3 = d3;
          d3 = d3 + -1 | 0;
          b[h2 >> 2] = b[k2 >> 2];
          b[h2 + 4 >> 2] = b[k2 + 4 >> 2];
          b[h2 + 8 >> 2] = b[k2 + 8 >> 2];
          if (!(Tb(g3) | 0)) {
            f3 = Ra(k2) | 0;
            if (f3 | 0) {
              d3 = 13;
              break;
            }
            b[i2 >> 2] = b[k2 >> 2];
            b[i2 + 4 >> 2] = b[k2 + 4 >> 2];
            b[i2 + 8 >> 2] = b[k2 + 8 >> 2];
            Va(i2);
          } else {
            f3 = Qa(k2) | 0;
            if (f3 | 0) {
              d3 = 13;
              break;
            }
            b[i2 >> 2] = b[k2 >> 2];
            b[i2 + 4 >> 2] = b[k2 + 4 >> 2];
            b[i2 + 8 >> 2] = b[k2 + 8 >> 2];
            Ua(i2);
          }
          Na(h2, i2, j2);
          Ka(j2);
          f3 = e4;
          t5 = b[f3 >> 2] | 0;
          f3 = b[f3 + 4 >> 2] | 0;
          u6 = (15 - g3 | 0) * 3 | 0;
          s3 = Pd(7, 0, u6 | 0) | 0;
          f3 = f3 & ~(H() | 0);
          u6 = Pd(Pa(j2) | 0, 0, u6 | 0) | 0;
          f3 = H() | 0 | f3;
          r3 = e4;
          b[r3 >> 2] = u6 | t5 & ~s3;
          b[r3 + 4 >> 2] = f3;
          if ((g3 | 0) <= 1) {
            d3 = 14;
            break;
          }
        }
        a: do {
          if ((d3 | 0) != 13) {
            if ((d3 | 0) == 14) {
              if (((b[k2 >> 2] | 0) <= 1 ? (b[k2 + 4 >> 2] | 0) <= 1 : 0) ? (b[k2 + 8 >> 2] | 0) <= 1 : 0) {
                d3 = Pa(k2) | 0;
                f3 = ta(n2, d3) | 0;
                if ((f3 | 0) == 127) {
                  j2 = 0;
                } else {
                  j2 = ma(f3) | 0;
                }
                b: do {
                  if (!d3) {
                    if ((l2 | 0) != 0 & (j2 | 0) != 0) {
                      d3 = Nb(a3, c5) | 0;
                      g3 = e4;
                      g3 = Nb(b[g3 >> 2] | 0, b[g3 + 4 >> 2] | 0) | 0;
                      if ((d3 | 0) == 7 | (g3 | 0) == 7) {
                        f3 = 5;
                        break a;
                      }
                      g3 = b[21376 + (d3 * 28 | 0) + (g3 << 2) >> 2] | 0;
                      if ((g3 | 0) < 0) {
                        f3 = 5;
                        break a;
                      }
                      if (!g3) {
                        d3 = 59;
                      } else {
                        i2 = e4;
                        d3 = 0;
                        h2 = b[i2 >> 2] | 0;
                        i2 = b[i2 + 4 >> 2] | 0;
                        do {
                          h2 = Pb(h2, i2) | 0;
                          i2 = H() | 0;
                          u6 = e4;
                          b[u6 >> 2] = h2;
                          b[u6 + 4 >> 2] = i2;
                          d3 = d3 + 1 | 0;
                        } while ((d3 | 0) < (g3 | 0));
                        d3 = 58;
                      }
                    } else {
                      d3 = 58;
                    }
                  } else {
                    if (l2) {
                      f3 = Nb(a3, c5) | 0;
                      if ((f3 | 0) == 7) {
                        f3 = 5;
                        break a;
                      }
                      g3 = b[21376 + (f3 * 28 | 0) + (d3 << 2) >> 2] | 0;
                      if ((g3 | 0) > 0) {
                        f3 = d3;
                        d3 = 0;
                        do {
                          f3 = Za(f3) | 0;
                          d3 = d3 + 1 | 0;
                        } while ((d3 | 0) != (g3 | 0));
                      } else {
                        f3 = d3;
                      }
                      if ((f3 | 0) == 1) {
                        f3 = 9;
                        break a;
                      }
                      d3 = ta(n2, f3) | 0;
                      if ((d3 | 0) == 127) {
                        I2(27648, 27538, 411, 27678);
                      }
                      if (!(ma(d3) | 0)) {
                        p3 = d3;
                        o2 = g3;
                        m2 = f3;
                      } else {
                        I2(27693, 27538, 412, 27678);
                      }
                    } else {
                      p3 = f3;
                      o2 = 0;
                      m2 = d3;
                    }
                    i2 = b[4272 + (n2 * 28 | 0) + (m2 << 2) >> 2] | 0;
                    if ((i2 | 0) <= -1) {
                      I2(27724, 27538, 419, 27678);
                    }
                    if (!j2) {
                      if ((o2 | 0) < 0) {
                        f3 = 5;
                        break a;
                      }
                      if (o2 | 0) {
                        g3 = e4;
                        f3 = 0;
                        d3 = b[g3 >> 2] | 0;
                        g3 = b[g3 + 4 >> 2] | 0;
                        do {
                          d3 = Pb(d3, g3) | 0;
                          g3 = H() | 0;
                          u6 = e4;
                          b[u6 >> 2] = d3;
                          b[u6 + 4 >> 2] = g3;
                          f3 = f3 + 1 | 0;
                        } while ((f3 | 0) < (o2 | 0));
                      }
                      if ((i2 | 0) <= 0) {
                        f3 = p3;
                        d3 = 58;
                        break;
                      }
                      g3 = e4;
                      f3 = 0;
                      d3 = b[g3 >> 2] | 0;
                      g3 = b[g3 + 4 >> 2] | 0;
                      while (1) {
                        d3 = Pb(d3, g3) | 0;
                        g3 = H() | 0;
                        u6 = e4;
                        b[u6 >> 2] = d3;
                        b[u6 + 4 >> 2] = g3;
                        f3 = f3 + 1 | 0;
                        if ((f3 | 0) == (i2 | 0)) {
                          f3 = p3;
                          d3 = 58;
                          break b;
                        }
                      }
                    }
                    h2 = ua(p3, n2) | 0;
                    if ((h2 | 0) == 7) {
                      I2(27514, 27538, 428, 27678);
                    }
                    f3 = e4;
                    d3 = b[f3 >> 2] | 0;
                    f3 = b[f3 + 4 >> 2] | 0;
                    if ((i2 | 0) > 0) {
                      g3 = 0;
                      do {
                        d3 = Pb(d3, f3) | 0;
                        f3 = H() | 0;
                        u6 = e4;
                        b[u6 >> 2] = d3;
                        b[u6 + 4 >> 2] = f3;
                        g3 = g3 + 1 | 0;
                      } while ((g3 | 0) != (i2 | 0));
                    }
                    f3 = Nb(d3, f3) | 0;
                    if ((f3 | 0) == 7) {
                      I2(27795, 27538, 440, 27678);
                    }
                    d3 = na(p3) | 0;
                    d3 = b[(d3 ? 21792 : 21584) + (h2 * 28 | 0) + (f3 << 2) >> 2] | 0;
                    if ((d3 | 0) < 0) {
                      I2(27795, 27538, 454, 27678);
                    }
                    if (!d3) {
                      f3 = p3;
                      d3 = 58;
                    } else {
                      h2 = e4;
                      f3 = 0;
                      g3 = b[h2 >> 2] | 0;
                      h2 = b[h2 + 4 >> 2] | 0;
                      do {
                        g3 = Ob(g3, h2) | 0;
                        h2 = H() | 0;
                        u6 = e4;
                        b[u6 >> 2] = g3;
                        b[u6 + 4 >> 2] = h2;
                        f3 = f3 + 1 | 0;
                      } while ((f3 | 0) < (d3 | 0));
                      f3 = p3;
                      d3 = 58;
                    }
                  }
                } while (0);
                if ((d3 | 0) == 58) {
                  if (j2) {
                    d3 = 59;
                  }
                }
                if ((d3 | 0) == 59) {
                  u6 = e4;
                  if ((Nb(b[u6 >> 2] | 0, b[u6 + 4 >> 2] | 0) | 0) == 1) {
                    f3 = 9;
                    break;
                  }
                }
                u6 = e4;
                s3 = b[u6 >> 2] | 0;
                u6 = b[u6 + 4 >> 2] & -1040385;
                t5 = Pd(f3 | 0, 0, 45) | 0;
                u6 = u6 | (H() | 0);
                f3 = e4;
                b[f3 >> 2] = s3 | t5;
                b[f3 + 4 >> 2] = u6;
                f3 = 0;
              } else {
                f3 = 1;
              }
            }
          }
        } while (0);
        u6 = f3;
        T2 = q3;
        return u6 | 0;
      }
      function Hc(a3, b2, c5, d3, e4, f3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0;
        h2 = T2;
        T2 = T2 + 16 | 0;
        g3 = h2;
        if (!e4) {
          a3 = Fc(a3, b2, c5, d3, g3) | 0;
          if (!a3) {
            cb(g3, f3);
            a3 = 0;
          }
        } else {
          a3 = 15;
        }
        T2 = h2;
        return a3 | 0;
      }
      function Ic(a3, b2, c5, d3, e4) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0;
        g3 = T2;
        T2 = T2 + 16 | 0;
        f3 = g3;
        if (!d3) {
          c5 = db(c5, f3) | 0;
          if (!c5) {
            c5 = Gc(a3, b2, f3, e4) | 0;
          }
        } else {
          c5 = 15;
        }
        T2 = g3;
        return c5 | 0;
      }
      function Jc(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T2;
        T2 = T2 + 32 | 0;
        h2 = j2 + 12 | 0;
        i2 = j2;
        g3 = Fc(a3, c5, a3, c5, h2) | 0;
        if (g3 | 0) {
          i2 = g3;
          T2 = j2;
          return i2 | 0;
        }
        a3 = Fc(a3, c5, d3, e4, i2) | 0;
        if (a3 | 0) {
          i2 = a3;
          T2 = j2;
          return i2 | 0;
        }
        h2 = bb2(h2, i2) | 0;
        i2 = f3;
        b[i2 >> 2] = h2;
        b[i2 + 4 >> 2] = ((h2 | 0) < 0) << 31 >> 31;
        i2 = 0;
        T2 = j2;
        return i2 | 0;
      }
      function Kc(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T2;
        T2 = T2 + 32 | 0;
        h2 = j2 + 12 | 0;
        i2 = j2;
        g3 = Fc(a3, c5, a3, c5, h2) | 0;
        if (!g3) {
          g3 = Fc(a3, c5, d3, e4, i2) | 0;
          if (!g3) {
            e4 = bb2(h2, i2) | 0;
            e4 = Ed(e4 | 0, ((e4 | 0) < 0) << 31 >> 31 | 0, 1, 0) | 0;
            h2 = H() | 0;
            i2 = f3;
            b[i2 >> 2] = e4;
            b[i2 + 4 >> 2] = h2;
            i2 = 0;
            T2 = j2;
            return i2 | 0;
          }
        }
        i2 = g3;
        T2 = j2;
        return i2 | 0;
      }
      function Lc(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0;
        z3 = T2;
        T2 = T2 + 48 | 0;
        x3 = z3 + 24 | 0;
        h2 = z3 + 12 | 0;
        y3 = z3;
        g3 = Fc(a3, c5, a3, c5, x3) | 0;
        if (!g3) {
          g3 = Fc(a3, c5, d3, e4, h2) | 0;
          if (!g3) {
            v4 = bb2(x3, h2) | 0;
            w5 = ((v4 | 0) < 0) << 31 >> 31;
            b[x3 >> 2] = 0;
            b[x3 + 4 >> 2] = 0;
            b[x3 + 8 >> 2] = 0;
            b[h2 >> 2] = 0;
            b[h2 + 4 >> 2] = 0;
            b[h2 + 8 >> 2] = 0;
            if (Fc(a3, c5, a3, c5, x3) | 0) {
              I2(27795, 27538, 692, 27747);
            }
            if (Fc(a3, c5, d3, e4, h2) | 0) {
              I2(27795, 27538, 697, 27747);
            }
            eb2(x3);
            eb2(h2);
            l2 = (v4 | 0) == 0 ? 0 : 1 / +(v4 | 0);
            d3 = b[x3 >> 2] | 0;
            r3 = l2 * +((b[h2 >> 2] | 0) - d3 | 0);
            s3 = x3 + 4 | 0;
            e4 = b[s3 >> 2] | 0;
            t5 = l2 * +((b[h2 + 4 >> 2] | 0) - e4 | 0);
            u6 = x3 + 8 | 0;
            g3 = b[u6 >> 2] | 0;
            l2 = l2 * +((b[h2 + 8 >> 2] | 0) - g3 | 0);
            b[y3 >> 2] = d3;
            m2 = y3 + 4 | 0;
            b[m2 >> 2] = e4;
            n2 = y3 + 8 | 0;
            b[n2 >> 2] = g3;
            a: do {
              if ((v4 | 0) < 0) {
                g3 = 0;
              } else {
                o2 = 0;
                p3 = 0;
                while (1) {
                  j2 = +(p3 >>> 0) + 4294967296 * +(o2 | 0);
                  A7 = r3 * j2 + +(d3 | 0);
                  i2 = t5 * j2 + +(e4 | 0);
                  j2 = l2 * j2 + +(g3 | 0);
                  d3 = ~~+Td(+A7);
                  h2 = ~~+Td(+i2);
                  g3 = ~~+Td(+j2);
                  A7 = +q2(+(+(d3 | 0) - A7));
                  i2 = +q2(+(+(h2 | 0) - i2));
                  j2 = +q2(+(+(g3 | 0) - j2));
                  do {
                    if (!(A7 > i2 & A7 > j2)) {
                      k2 = 0 - d3 | 0;
                      if (i2 > j2) {
                        e4 = k2 - g3 | 0;
                        break;
                      } else {
                        e4 = h2;
                        g3 = k2 - h2 | 0;
                        break;
                      }
                    } else {
                      d3 = 0 - (h2 + g3) | 0;
                      e4 = h2;
                    }
                  } while (0);
                  b[y3 >> 2] = d3;
                  b[m2 >> 2] = e4;
                  b[n2 >> 2] = g3;
                  fb(y3);
                  g3 = Gc(a3, c5, y3, f3 + (p3 << 3) | 0) | 0;
                  if (g3 | 0) {
                    break a;
                  }
                  if (!((o2 | 0) < (w5 | 0) | (o2 | 0) == (w5 | 0) & p3 >>> 0 < v4 >>> 0)) {
                    g3 = 0;
                    break a;
                  }
                  d3 = Ed(p3 | 0, o2 | 0, 1, 0) | 0;
                  e4 = H() | 0;
                  o2 = e4;
                  p3 = d3;
                  d3 = b[x3 >> 2] | 0;
                  e4 = b[s3 >> 2] | 0;
                  g3 = b[u6 >> 2] | 0;
                }
              }
            } while (0);
            y3 = g3;
            T2 = z3;
            return y3 | 0;
          }
        }
        y3 = g3;
        T2 = z3;
        return y3 | 0;
      }
      function Mc(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0;
        if ((c5 | 0) == 0 & (d3 | 0) == 0) {
          e4 = 0;
          f3 = 1;
          G2(e4 | 0);
          return f3 | 0;
        }
        f3 = a3;
        e4 = b2;
        a3 = 1;
        b2 = 0;
        do {
          g3 = (c5 & 1 | 0) == 0 & true;
          a3 = Kd((g3 ? 1 : f3) | 0, (g3 ? 0 : e4) | 0, a3 | 0, b2 | 0) | 0;
          b2 = H() | 0;
          c5 = Nd(c5 | 0, d3 | 0, 1) | 0;
          d3 = H() | 0;
          f3 = Kd(f3 | 0, e4 | 0, f3 | 0, e4 | 0) | 0;
          e4 = H() | 0;
        } while (!((c5 | 0) == 0 & (d3 | 0) == 0));
        G2(b2 | 0);
        return a3 | 0;
      }
      function Nc(a3, c5, d3, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        j2 = T2;
        T2 = T2 + 16 | 0;
        h2 = j2;
        i2 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        i2 = i2 & 15;
        do {
          if (!i2) {
            g3 = Od(a3 | 0, c5 | 0, 45) | 0;
            H() | 0;
            g3 = g3 & 127;
            if (g3 >>> 0 > 121) {
              i2 = 5;
              T2 = j2;
              return i2 | 0;
            } else {
              h2 = 22064 + (g3 << 5) | 0;
              b[d3 >> 2] = b[h2 >> 2];
              b[d3 + 4 >> 2] = b[h2 + 4 >> 2];
              b[d3 + 8 >> 2] = b[h2 + 8 >> 2];
              b[d3 + 12 >> 2] = b[h2 + 12 >> 2];
              b[d3 + 16 >> 2] = b[h2 + 16 >> 2];
              b[d3 + 20 >> 2] = b[h2 + 20 >> 2];
              b[d3 + 24 >> 2] = b[h2 + 24 >> 2];
              b[d3 + 28 >> 2] = b[h2 + 28 >> 2];
              break;
            }
          } else {
            g3 = Xb(a3, c5, h2) | 0;
            if (!g3) {
              l2 = +e3[h2 >> 3];
              k2 = 1 / +t4(+l2);
              m2 = +e3[25968 + (i2 << 3) >> 3];
              e3[d3 >> 3] = l2 + m2;
              e3[d3 + 8 >> 3] = l2 - m2;
              l2 = +e3[h2 + 8 >> 3];
              k2 = m2 * k2;
              e3[d3 + 16 >> 3] = k2 + l2;
              e3[d3 + 24 >> 3] = l2 - k2;
              break;
            }
            i2 = g3;
            T2 = j2;
            return i2 | 0;
          }
        } while (0);
        Ha(d3, f3 ? 1.4 : 1.1);
        f3 = 26096 + (i2 << 3) | 0;
        if ((b[f3 >> 2] | 0) == (a3 | 0) ? (b[f3 + 4 >> 2] | 0) == (c5 | 0) : 0) {
          e3[d3 >> 3] = 1.5707963267948966;
        }
        i2 = 26224 + (i2 << 3) | 0;
        if ((b[i2 >> 2] | 0) == (a3 | 0) ? (b[i2 + 4 >> 2] | 0) == (c5 | 0) : 0) {
          e3[d3 + 8 >> 3] = -1.5707963267948966;
        }
        if (!(+e3[d3 >> 3] == 1.5707963267948966) ? !(+e3[d3 + 8 >> 3] == -1.5707963267948966) : 0) {
          i2 = 0;
          T2 = j2;
          return i2 | 0;
        }
        e3[d3 + 16 >> 3] = 3.141592653589793;
        e3[d3 + 24 >> 3] = -3.141592653589793;
        i2 = 0;
        T2 = j2;
        return i2 | 0;
      }
      function Oc(c5, d3, e4, f3) {
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        l2 = T2;
        T2 = T2 + 48 | 0;
        i2 = l2 + 32 | 0;
        h2 = l2 + 40 | 0;
        j2 = l2;
        Cb(i2, 0, 0, 0);
        k2 = b[i2 >> 2] | 0;
        i2 = b[i2 + 4 >> 2] | 0;
        do {
          if (e4 >>> 0 <= 15) {
            g3 = Vc(f3) | 0;
            if (g3 | 0) {
              f3 = j2;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[j2 + 8 >> 2] = g3;
              b[j2 + 12 >> 2] = -1;
              f3 = j2 + 16 | 0;
              k2 = j2 + 29 | 0;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[f3 + 8 >> 2] = 0;
              a2[f3 + 12 >> 0] = 0;
              a2[k2 >> 0] = a2[h2 >> 0] | 0;
              a2[k2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
              a2[k2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
              break;
            }
            g3 = Dd((b[d3 + 8 >> 2] | 0) + 1 | 0, 32) | 0;
            if (!g3) {
              f3 = j2;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[j2 + 8 >> 2] = 13;
              b[j2 + 12 >> 2] = -1;
              f3 = j2 + 16 | 0;
              k2 = j2 + 29 | 0;
              b[f3 >> 2] = 0;
              b[f3 + 4 >> 2] = 0;
              b[f3 + 8 >> 2] = 0;
              a2[f3 + 12 >> 0] = 0;
              a2[k2 >> 0] = a2[h2 >> 0] | 0;
              a2[k2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
              a2[k2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
              break;
            } else {
              Wc(d3, g3);
              m2 = j2;
              b[m2 >> 2] = k2;
              b[m2 + 4 >> 2] = i2;
              b[j2 + 8 >> 2] = 0;
              b[j2 + 12 >> 2] = e4;
              b[j2 + 16 >> 2] = f3;
              b[j2 + 20 >> 2] = d3;
              b[j2 + 24 >> 2] = g3;
              a2[j2 + 28 >> 0] = 0;
              k2 = j2 + 29 | 0;
              a2[k2 >> 0] = a2[h2 >> 0] | 0;
              a2[k2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
              a2[k2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
              break;
            }
          } else {
            k2 = j2;
            b[k2 >> 2] = 0;
            b[k2 + 4 >> 2] = 0;
            b[j2 + 8 >> 2] = 4;
            b[j2 + 12 >> 2] = -1;
            k2 = j2 + 16 | 0;
            m2 = j2 + 29 | 0;
            b[k2 >> 2] = 0;
            b[k2 + 4 >> 2] = 0;
            b[k2 + 8 >> 2] = 0;
            a2[k2 + 12 >> 0] = 0;
            a2[m2 >> 0] = a2[h2 >> 0] | 0;
            a2[m2 + 1 >> 0] = a2[h2 + 1 >> 0] | 0;
            a2[m2 + 2 >> 0] = a2[h2 + 2 >> 0] | 0;
          }
        } while (0);
        Pc(j2);
        b[c5 >> 2] = b[j2 >> 2];
        b[c5 + 4 >> 2] = b[j2 + 4 >> 2];
        b[c5 + 8 >> 2] = b[j2 + 8 >> 2];
        b[c5 + 12 >> 2] = b[j2 + 12 >> 2];
        b[c5 + 16 >> 2] = b[j2 + 16 >> 2];
        b[c5 + 20 >> 2] = b[j2 + 20 >> 2];
        b[c5 + 24 >> 2] = b[j2 + 24 >> 2];
        b[c5 + 28 >> 2] = b[j2 + 28 >> 2];
        T2 = l2;
        return;
      }
      function Pc(c5) {
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0;
        w5 = T2;
        T2 = T2 + 336 | 0;
        p3 = w5 + 168 | 0;
        q3 = w5;
        f3 = c5;
        e4 = b[f3 >> 2] | 0;
        f3 = b[f3 + 4 >> 2] | 0;
        if ((e4 | 0) == 0 & (f3 | 0) == 0) {
          T2 = w5;
          return;
        }
        d3 = c5 + 28 | 0;
        if (!(a2[d3 >> 0] | 0)) {
          a2[d3 >> 0] = 1;
        } else {
          e4 = Qc(e4, f3) | 0;
          f3 = H() | 0;
        }
        v4 = c5 + 20 | 0;
        if (!(b[b[v4 >> 2] >> 2] | 0)) {
          d3 = c5 + 24 | 0;
          e4 = b[d3 >> 2] | 0;
          if (e4 | 0) {
            Cd(e4);
          }
          u6 = c5;
          b[u6 >> 2] = 0;
          b[u6 + 4 >> 2] = 0;
          b[c5 + 8 >> 2] = 0;
          b[v4 >> 2] = 0;
          b[c5 + 12 >> 2] = -1;
          b[c5 + 16 >> 2] = 0;
          b[d3 >> 2] = 0;
          T2 = w5;
          return;
        }
        u6 = c5 + 16 | 0;
        d3 = b[u6 >> 2] | 0;
        g3 = d3 & 15;
        a: do {
          if (!((e4 | 0) == 0 & (f3 | 0) == 0)) {
            r3 = c5 + 12 | 0;
            n2 = (g3 | 0) == 3;
            m2 = d3 & 255;
            k2 = (g3 | 1 | 0) == 3;
            o2 = c5 + 24 | 0;
            l2 = (g3 + -1 | 0) >>> 0 < 3;
            i2 = (g3 | 2 | 0) == 3;
            j2 = q3 + 8 | 0;
            b: while (1) {
              h2 = Od(e4 | 0, f3 | 0, 52) | 0;
              H() | 0;
              h2 = h2 & 15;
              if ((h2 | 0) == (b[r3 >> 2] | 0)) {
                switch (m2 & 15) {
                  case 0:
                  case 2:
                  case 3: {
                    g3 = Xb(e4, f3, p3) | 0;
                    if (g3 | 0) {
                      s3 = 15;
                      break b;
                    }
                    if (Xc(b[v4 >> 2] | 0, b[o2 >> 2] | 0, p3) | 0) {
                      s3 = 19;
                      break b;
                    }
                    break;
                  }
                  default:
                }
                if (k2 ? (g3 = b[(b[v4 >> 2] | 0) + 4 >> 2] | 0, b[p3 >> 2] = b[g3 >> 2], b[p3 + 4 >> 2] = b[g3 + 4 >> 2], b[p3 + 8 >> 2] = b[g3 + 8 >> 2], b[p3 + 12 >> 2] = b[g3 + 12 >> 2], Aa(26832, p3) | 0) : 0) {
                  if (Ub(b[(b[v4 >> 2] | 0) + 4 >> 2] | 0, h2, q3) | 0) {
                    s3 = 25;
                    break;
                  }
                  g3 = q3;
                  if ((b[g3 >> 2] | 0) == (e4 | 0) ? (b[g3 + 4 >> 2] | 0) == (f3 | 0) : 0) {
                    s3 = 29;
                    break;
                  }
                }
                if (l2) {
                  g3 = Yb(e4, f3, p3) | 0;
                  if (g3 | 0) {
                    s3 = 32;
                    break;
                  }
                  if (Nc(e4, f3, q3, 0) | 0) {
                    s3 = 36;
                    break;
                  }
                  if (i2 ? Yc(b[v4 >> 2] | 0, b[o2 >> 2] | 0, p3, q3) | 0 : 0) {
                    s3 = 42;
                    break;
                  }
                  if (k2 ? _c(b[v4 >> 2] | 0, b[o2 >> 2] | 0, p3, q3) | 0 : 0) {
                    s3 = 42;
                    break;
                  }
                }
                if (n2) {
                  d3 = Nc(e4, f3, p3, 1) | 0;
                  g3 = b[o2 >> 2] | 0;
                  if (d3 | 0) {
                    s3 = 45;
                    break;
                  }
                  if (Ba(g3, p3) | 0) {
                    Ea(q3, p3);
                    if (Da(p3, b[o2 >> 2] | 0) | 0) {
                      s3 = 53;
                      break;
                    }
                    if (Xc(b[v4 >> 2] | 0, b[o2 >> 2] | 0, j2) | 0) {
                      s3 = 53;
                      break;
                    }
                    if (_c(b[v4 >> 2] | 0, b[o2 >> 2] | 0, q3, p3) | 0) {
                      s3 = 53;
                      break;
                    }
                  }
                }
              }
              do {
                if ((h2 | 0) < (b[r3 >> 2] | 0)) {
                  d3 = Nc(e4, f3, p3, 1) | 0;
                  g3 = b[o2 >> 2] | 0;
                  if (d3 | 0) {
                    s3 = 58;
                    break b;
                  }
                  if (!(Ba(g3, p3) | 0)) {
                    s3 = 73;
                    break;
                  }
                  if (Da(b[o2 >> 2] | 0, p3) | 0 ? (Ea(q3, p3), Yc(b[v4 >> 2] | 0, b[o2 >> 2] | 0, q3, p3) | 0) : 0) {
                    s3 = 65;
                    break b;
                  }
                  e4 = Ib(e4, f3, h2 + 1 | 0, q3) | 0;
                  if (e4 | 0) {
                    s3 = 67;
                    break b;
                  }
                  f3 = q3;
                  e4 = b[f3 >> 2] | 0;
                  f3 = b[f3 + 4 >> 2] | 0;
                } else {
                  s3 = 73;
                }
              } while (0);
              if ((s3 | 0) == 73) {
                s3 = 0;
                e4 = Qc(e4, f3) | 0;
                f3 = H() | 0;
              }
              if ((e4 | 0) == 0 & (f3 | 0) == 0) {
                t5 = o2;
                break a;
              }
            }
            switch (s3 | 0) {
              case 15: {
                d3 = b[o2 >> 2] | 0;
                if (d3 | 0) {
                  Cd(d3);
                }
                s3 = c5;
                b[s3 >> 2] = 0;
                b[s3 + 4 >> 2] = 0;
                b[v4 >> 2] = 0;
                b[r3 >> 2] = -1;
                b[u6 >> 2] = 0;
                b[o2 >> 2] = 0;
                b[c5 + 8 >> 2] = g3;
                s3 = 20;
                break;
              }
              case 19: {
                b[c5 >> 2] = e4;
                b[c5 + 4 >> 2] = f3;
                s3 = 20;
                break;
              }
              case 25: {
                I2(27795, 27761, 470, 27772);
                break;
              }
              case 29: {
                b[c5 >> 2] = e4;
                b[c5 + 4 >> 2] = f3;
                T2 = w5;
                return;
              }
              case 32: {
                d3 = b[o2 >> 2] | 0;
                if (d3 | 0) {
                  Cd(d3);
                }
                t5 = c5;
                b[t5 >> 2] = 0;
                b[t5 + 4 >> 2] = 0;
                b[v4 >> 2] = 0;
                b[r3 >> 2] = -1;
                b[u6 >> 2] = 0;
                b[o2 >> 2] = 0;
                b[c5 + 8 >> 2] = g3;
                T2 = w5;
                return;
              }
              case 36: {
                I2(27795, 27761, 493, 27772);
                break;
              }
              case 42: {
                b[c5 >> 2] = e4;
                b[c5 + 4 >> 2] = f3;
                T2 = w5;
                return;
              }
              case 45: {
                if (g3 | 0) {
                  Cd(g3);
                }
                s3 = c5;
                b[s3 >> 2] = 0;
                b[s3 + 4 >> 2] = 0;
                b[v4 >> 2] = 0;
                b[r3 >> 2] = -1;
                b[u6 >> 2] = 0;
                b[o2 >> 2] = 0;
                b[c5 + 8 >> 2] = d3;
                s3 = 55;
                break;
              }
              case 53: {
                b[c5 >> 2] = e4;
                b[c5 + 4 >> 2] = f3;
                s3 = 55;
                break;
              }
              case 58: {
                if (g3 | 0) {
                  Cd(g3);
                }
                s3 = c5;
                b[s3 >> 2] = 0;
                b[s3 + 4 >> 2] = 0;
                b[v4 >> 2] = 0;
                b[r3 >> 2] = -1;
                b[u6 >> 2] = 0;
                b[o2 >> 2] = 0;
                b[c5 + 8 >> 2] = d3;
                s3 = 71;
                break;
              }
              case 65: {
                b[c5 >> 2] = e4;
                b[c5 + 4 >> 2] = f3;
                s3 = 71;
                break;
              }
              case 67: {
                d3 = b[o2 >> 2] | 0;
                if (d3 | 0) {
                  Cd(d3);
                }
                t5 = c5;
                b[t5 >> 2] = 0;
                b[t5 + 4 >> 2] = 0;
                b[v4 >> 2] = 0;
                b[r3 >> 2] = -1;
                b[u6 >> 2] = 0;
                b[o2 >> 2] = 0;
                b[c5 + 8 >> 2] = e4;
                T2 = w5;
                return;
              }
            }
            if ((s3 | 0) == 20) {
              T2 = w5;
              return;
            } else if ((s3 | 0) == 55) {
              T2 = w5;
              return;
            } else if ((s3 | 0) == 71) {
              T2 = w5;
              return;
            }
          } else {
            t5 = c5 + 24 | 0;
          }
        } while (0);
        d3 = b[t5 >> 2] | 0;
        if (d3 | 0) {
          Cd(d3);
        }
        s3 = c5;
        b[s3 >> 2] = 0;
        b[s3 + 4 >> 2] = 0;
        b[c5 + 8 >> 2] = 0;
        b[v4 >> 2] = 0;
        b[c5 + 12 >> 2] = -1;
        b[u6 >> 2] = 0;
        b[t5 >> 2] = 0;
        T2 = w5;
        return;
      }
      function Qc(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0;
        m2 = T2;
        T2 = T2 + 16 | 0;
        l2 = m2;
        e4 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        e4 = e4 & 15;
        d3 = Od(a3 | 0, c5 | 0, 45) | 0;
        H() | 0;
        do {
          if (e4) {
            while (1) {
              d3 = Pd(e4 + 4095 | 0, 0, 52) | 0;
              f3 = H() | 0 | c5 & -15728641;
              g3 = (15 - e4 | 0) * 3 | 0;
              h2 = Pd(7, 0, g3 | 0) | 0;
              i2 = H() | 0;
              d3 = d3 | a3 | h2;
              f3 = f3 | i2;
              j2 = Od(a3 | 0, c5 | 0, g3 | 0) | 0;
              H() | 0;
              j2 = j2 & 7;
              e4 = e4 + -1 | 0;
              if (j2 >>> 0 < 6) {
                break;
              }
              if (!e4) {
                k2 = 4;
                break;
              } else {
                c5 = f3;
                a3 = d3;
              }
            }
            if ((k2 | 0) == 4) {
              d3 = Od(d3 | 0, f3 | 0, 45) | 0;
              H() | 0;
              break;
            }
            l2 = (j2 | 0) == 0 & (Fb(d3, f3) | 0) != 0;
            l2 = Pd((l2 ? 2 : 1) + j2 | 0, 0, g3 | 0) | 0;
            k2 = H() | 0 | c5 & ~i2;
            l2 = l2 | a3 & ~h2;
            G2(k2 | 0);
            T2 = m2;
            return l2 | 0;
          }
        } while (0);
        d3 = d3 & 127;
        if (d3 >>> 0 > 120) {
          k2 = 0;
          l2 = 0;
          G2(k2 | 0);
          T2 = m2;
          return l2 | 0;
        }
        Cb(l2, 0, d3 + 1 | 0, 0);
        k2 = b[l2 + 4 >> 2] | 0;
        l2 = b[l2 >> 2] | 0;
        G2(k2 | 0);
        T2 = m2;
        return l2 | 0;
      }
      function Rc(a3, c5, d3, e4, f3, g3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0;
        r3 = T2;
        T2 = T2 + 160 | 0;
        m2 = r3 + 80 | 0;
        i2 = r3 + 64 | 0;
        n2 = r3 + 112 | 0;
        q3 = r3;
        Oc(m2, a3, c5, d3);
        k2 = m2;
        dc(i2, b[k2 >> 2] | 0, b[k2 + 4 >> 2] | 0, c5);
        k2 = i2;
        j2 = b[k2 >> 2] | 0;
        k2 = b[k2 + 4 >> 2] | 0;
        h2 = b[m2 + 8 >> 2] | 0;
        o2 = n2 + 4 | 0;
        b[o2 >> 2] = b[m2 >> 2];
        b[o2 + 4 >> 2] = b[m2 + 4 >> 2];
        b[o2 + 8 >> 2] = b[m2 + 8 >> 2];
        b[o2 + 12 >> 2] = b[m2 + 12 >> 2];
        b[o2 + 16 >> 2] = b[m2 + 16 >> 2];
        b[o2 + 20 >> 2] = b[m2 + 20 >> 2];
        b[o2 + 24 >> 2] = b[m2 + 24 >> 2];
        b[o2 + 28 >> 2] = b[m2 + 28 >> 2];
        o2 = q3;
        b[o2 >> 2] = j2;
        b[o2 + 4 >> 2] = k2;
        o2 = q3 + 8 | 0;
        b[o2 >> 2] = h2;
        a3 = q3 + 12 | 0;
        c5 = n2;
        d3 = a3 + 36 | 0;
        do {
          b[a3 >> 2] = b[c5 >> 2];
          a3 = a3 + 4 | 0;
          c5 = c5 + 4 | 0;
        } while ((a3 | 0) < (d3 | 0));
        n2 = q3 + 48 | 0;
        b[n2 >> 2] = b[i2 >> 2];
        b[n2 + 4 >> 2] = b[i2 + 4 >> 2];
        b[n2 + 8 >> 2] = b[i2 + 8 >> 2];
        b[n2 + 12 >> 2] = b[i2 + 12 >> 2];
        if ((j2 | 0) == 0 & (k2 | 0) == 0) {
          q3 = h2;
          T2 = r3;
          return q3 | 0;
        }
        d3 = q3 + 16 | 0;
        l2 = q3 + 24 | 0;
        m2 = q3 + 28 | 0;
        h2 = 0;
        i2 = 0;
        c5 = j2;
        a3 = k2;
        do {
          if (!((h2 | 0) < (f3 | 0) | (h2 | 0) == (f3 | 0) & i2 >>> 0 < e4 >>> 0)) {
            p3 = 4;
            break;
          }
          k2 = i2;
          i2 = Ed(i2 | 0, h2 | 0, 1, 0) | 0;
          h2 = H() | 0;
          k2 = g3 + (k2 << 3) | 0;
          b[k2 >> 2] = c5;
          b[k2 + 4 >> 2] = a3;
          fc(n2);
          a3 = n2;
          c5 = b[a3 >> 2] | 0;
          a3 = b[a3 + 4 >> 2] | 0;
          if ((c5 | 0) == 0 & (a3 | 0) == 0) {
            Pc(d3);
            c5 = d3;
            a3 = b[c5 >> 2] | 0;
            c5 = b[c5 + 4 >> 2] | 0;
            if ((a3 | 0) == 0 & (c5 | 0) == 0) {
              p3 = 10;
              break;
            }
            ec(a3, c5, b[m2 >> 2] | 0, n2);
            a3 = n2;
            c5 = b[a3 >> 2] | 0;
            a3 = b[a3 + 4 >> 2] | 0;
          }
          k2 = q3;
          b[k2 >> 2] = c5;
          b[k2 + 4 >> 2] = a3;
        } while (!((c5 | 0) == 0 & (a3 | 0) == 0));
        if ((p3 | 0) == 4) {
          a3 = q3 + 40 | 0;
          c5 = b[a3 >> 2] | 0;
          if (c5 | 0) {
            Cd(c5);
          }
          p3 = q3 + 16 | 0;
          b[p3 >> 2] = 0;
          b[p3 + 4 >> 2] = 0;
          b[l2 >> 2] = 0;
          b[q3 + 36 >> 2] = 0;
          b[m2 >> 2] = -1;
          b[q3 + 32 >> 2] = 0;
          b[a3 >> 2] = 0;
          ec(0, 0, 0, n2);
          b[q3 >> 2] = 0;
          b[q3 + 4 >> 2] = 0;
          b[o2 >> 2] = 0;
          q3 = 14;
          T2 = r3;
          return q3 | 0;
        } else if ((p3 | 0) == 10) {
          b[q3 >> 2] = 0;
          b[q3 + 4 >> 2] = 0;
          b[o2 >> 2] = b[l2 >> 2];
        }
        q3 = b[o2 >> 2] | 0;
        T2 = r3;
        return q3 | 0;
      }
      function Sc(c5, d3, f3, g3) {
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        g3 = g3 | 0;
        var h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0;
        o2 = T2;
        T2 = T2 + 48 | 0;
        l2 = o2 + 32 | 0;
        k2 = o2 + 40 | 0;
        m2 = o2;
        if (!(b[c5 >> 2] | 0)) {
          n2 = g3;
          b[n2 >> 2] = 0;
          b[n2 + 4 >> 2] = 0;
          n2 = 0;
          T2 = o2;
          return n2 | 0;
        }
        Cb(l2, 0, 0, 0);
        j2 = l2;
        h2 = b[j2 >> 2] | 0;
        j2 = b[j2 + 4 >> 2] | 0;
        do {
          if (d3 >>> 0 > 15) {
            n2 = m2;
            b[n2 >> 2] = 0;
            b[n2 + 4 >> 2] = 0;
            b[m2 + 8 >> 2] = 4;
            b[m2 + 12 >> 2] = -1;
            n2 = m2 + 16 | 0;
            f3 = m2 + 29 | 0;
            b[n2 >> 2] = 0;
            b[n2 + 4 >> 2] = 0;
            b[n2 + 8 >> 2] = 0;
            a2[n2 + 12 >> 0] = 0;
            a2[f3 >> 0] = a2[k2 >> 0] | 0;
            a2[f3 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
            a2[f3 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
            f3 = 4;
            n2 = 9;
          } else {
            f3 = Vc(f3) | 0;
            if (f3 | 0) {
              l2 = m2;
              b[l2 >> 2] = 0;
              b[l2 + 4 >> 2] = 0;
              b[m2 + 8 >> 2] = f3;
              b[m2 + 12 >> 2] = -1;
              l2 = m2 + 16 | 0;
              n2 = m2 + 29 | 0;
              b[l2 >> 2] = 0;
              b[l2 + 4 >> 2] = 0;
              b[l2 + 8 >> 2] = 0;
              a2[l2 + 12 >> 0] = 0;
              a2[n2 >> 0] = a2[k2 >> 0] | 0;
              a2[n2 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
              a2[n2 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
              n2 = 9;
              break;
            }
            f3 = Dd((b[c5 + 8 >> 2] | 0) + 1 | 0, 32) | 0;
            if (!f3) {
              n2 = m2;
              b[n2 >> 2] = 0;
              b[n2 + 4 >> 2] = 0;
              b[m2 + 8 >> 2] = 13;
              b[m2 + 12 >> 2] = -1;
              n2 = m2 + 16 | 0;
              f3 = m2 + 29 | 0;
              b[n2 >> 2] = 0;
              b[n2 + 4 >> 2] = 0;
              b[n2 + 8 >> 2] = 0;
              a2[n2 + 12 >> 0] = 0;
              a2[f3 >> 0] = a2[k2 >> 0] | 0;
              a2[f3 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
              a2[f3 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
              f3 = 13;
              n2 = 9;
              break;
            }
            Wc(c5, f3);
            r3 = m2;
            b[r3 >> 2] = h2;
            b[r3 + 4 >> 2] = j2;
            j2 = m2 + 8 | 0;
            b[j2 >> 2] = 0;
            b[m2 + 12 >> 2] = d3;
            b[m2 + 20 >> 2] = c5;
            b[m2 + 24 >> 2] = f3;
            a2[m2 + 28 >> 0] = 0;
            h2 = m2 + 29 | 0;
            a2[h2 >> 0] = a2[k2 >> 0] | 0;
            a2[h2 + 1 >> 0] = a2[k2 + 1 >> 0] | 0;
            a2[h2 + 2 >> 0] = a2[k2 + 2 >> 0] | 0;
            b[m2 + 16 >> 2] = 3;
            p3 = +za(f3);
            p3 = p3 * +xa(f3);
            i2 = +q2(+ +e3[f3 >> 3]);
            i2 = p3 / +t4(+ +Sd(+i2, + +q2(+ +e3[f3 + 8 >> 3]))) * 6371.007180918475 * 6371.007180918475;
            h2 = m2 + 12 | 0;
            f3 = b[h2 >> 2] | 0;
            a: do {
              if ((f3 | 0) > 0) {
                do {
                  oc(f3 + -1 | 0, l2) | 0;
                  if (!(i2 / +e3[l2 >> 3] > 10)) {
                    break a;
                  }
                  r3 = b[h2 >> 2] | 0;
                  f3 = r3 + -1 | 0;
                  b[h2 >> 2] = f3;
                } while ((r3 | 0) > 1);
              }
            } while (0);
            Pc(m2);
            h2 = g3;
            b[h2 >> 2] = 0;
            b[h2 + 4 >> 2] = 0;
            h2 = m2;
            f3 = b[h2 >> 2] | 0;
            h2 = b[h2 + 4 >> 2] | 0;
            if (!((f3 | 0) == 0 & (h2 | 0) == 0)) {
              do {
                Eb(f3, h2, d3, l2) | 0;
                k2 = l2;
                c5 = g3;
                k2 = Ed(b[c5 >> 2] | 0, b[c5 + 4 >> 2] | 0, b[k2 >> 2] | 0, b[k2 + 4 >> 2] | 0) | 0;
                c5 = H() | 0;
                r3 = g3;
                b[r3 >> 2] = k2;
                b[r3 + 4 >> 2] = c5;
                Pc(m2);
                r3 = m2;
                f3 = b[r3 >> 2] | 0;
                h2 = b[r3 + 4 >> 2] | 0;
              } while (!((f3 | 0) == 0 & (h2 | 0) == 0));
            }
            f3 = b[j2 >> 2] | 0;
          }
        } while (0);
        r3 = f3;
        T2 = o2;
        return r3 | 0;
      }
      function Tc(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0;
        if (!(Aa(c5, d3) | 0)) {
          o2 = 0;
          return o2 | 0;
        }
        c5 = ya(c5) | 0;
        f3 = +e3[d3 >> 3];
        g3 = +e3[d3 + 8 >> 3];
        g3 = c5 & g3 < 0 ? g3 + 6.283185307179586 : g3;
        o2 = b[a3 >> 2] | 0;
        if ((o2 | 0) <= 0) {
          o2 = 0;
          return o2 | 0;
        }
        n2 = b[a3 + 4 >> 2] | 0;
        if (c5) {
          c5 = 0;
          m2 = g3;
          d3 = -1;
          a3 = 0;
          a: while (1) {
            l2 = a3;
            while (1) {
              i2 = +e3[n2 + (l2 << 4) >> 3];
              g3 = +e3[n2 + (l2 << 4) + 8 >> 3];
              a3 = (d3 + 2 | 0) % (o2 | 0) | 0;
              h2 = +e3[n2 + (a3 << 4) >> 3];
              j2 = +e3[n2 + (a3 << 4) + 8 >> 3];
              if (i2 > h2) {
                k2 = i2;
                i2 = j2;
              } else {
                k2 = h2;
                h2 = i2;
                i2 = g3;
                g3 = j2;
              }
              f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
              if (!(f3 < h2 | f3 > k2)) {
                break;
              }
              d3 = l2 + 1 | 0;
              if ((d3 | 0) >= (o2 | 0)) {
                d3 = 22;
                break a;
              } else {
                a3 = l2;
                l2 = d3;
                d3 = a3;
              }
            }
            j2 = i2 < 0 ? i2 + 6.283185307179586 : i2;
            i2 = g3 < 0 ? g3 + 6.283185307179586 : g3;
            m2 = j2 == m2 | i2 == m2 ? m2 + -2220446049250313e-31 : m2;
            k2 = j2 + (i2 - j2) * ((f3 - h2) / (k2 - h2));
            if ((k2 < 0 ? k2 + 6.283185307179586 : k2) > m2) {
              c5 = c5 ^ 1;
            }
            a3 = l2 + 1 | 0;
            if ((a3 | 0) >= (o2 | 0)) {
              d3 = 22;
              break;
            } else {
              d3 = l2;
            }
          }
          if ((d3 | 0) == 22) {
            return c5 | 0;
          }
        } else {
          c5 = 0;
          m2 = g3;
          d3 = -1;
          a3 = 0;
          b: while (1) {
            l2 = a3;
            while (1) {
              i2 = +e3[n2 + (l2 << 4) >> 3];
              g3 = +e3[n2 + (l2 << 4) + 8 >> 3];
              a3 = (d3 + 2 | 0) % (o2 | 0) | 0;
              h2 = +e3[n2 + (a3 << 4) >> 3];
              j2 = +e3[n2 + (a3 << 4) + 8 >> 3];
              if (i2 > h2) {
                k2 = i2;
                i2 = j2;
              } else {
                k2 = h2;
                h2 = i2;
                i2 = g3;
                g3 = j2;
              }
              f3 = f3 == h2 | f3 == k2 ? f3 + 2220446049250313e-31 : f3;
              if (!(f3 < h2 | f3 > k2)) {
                break;
              }
              d3 = l2 + 1 | 0;
              if ((d3 | 0) >= (o2 | 0)) {
                d3 = 22;
                break b;
              } else {
                a3 = l2;
                l2 = d3;
                d3 = a3;
              }
            }
            m2 = i2 == m2 | g3 == m2 ? m2 + -2220446049250313e-31 : m2;
            if (i2 + (g3 - i2) * ((f3 - h2) / (k2 - h2)) > m2) {
              c5 = c5 ^ 1;
            }
            a3 = l2 + 1 | 0;
            if ((a3 | 0) >= (o2 | 0)) {
              d3 = 22;
              break;
            } else {
              d3 = l2;
            }
          }
          if ((d3 | 0) == 22) {
            return c5 | 0;
          }
        }
        return 0;
      }
      function Uc(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0;
        r3 = b[a3 >> 2] | 0;
        if (!r3) {
          b[c5 >> 2] = 0;
          b[c5 + 4 >> 2] = 0;
          b[c5 + 8 >> 2] = 0;
          b[c5 + 12 >> 2] = 0;
          b[c5 + 16 >> 2] = 0;
          b[c5 + 20 >> 2] = 0;
          b[c5 + 24 >> 2] = 0;
          b[c5 + 28 >> 2] = 0;
          return;
        }
        s3 = c5 + 8 | 0;
        e3[s3 >> 3] = 17976931348623157e292;
        t5 = c5 + 24 | 0;
        e3[t5 >> 3] = 17976931348623157e292;
        e3[c5 >> 3] = -17976931348623157e292;
        u6 = c5 + 16 | 0;
        e3[u6 >> 3] = -17976931348623157e292;
        if ((r3 | 0) <= 0) {
          return;
        }
        o2 = b[a3 + 4 >> 2] | 0;
        l2 = 17976931348623157e292;
        m2 = -17976931348623157e292;
        n2 = 0;
        a3 = -1;
        h2 = 17976931348623157e292;
        i2 = 17976931348623157e292;
        k2 = -17976931348623157e292;
        f3 = -17976931348623157e292;
        p3 = 0;
        while (1) {
          d3 = +e3[o2 + (p3 << 4) >> 3];
          j2 = +e3[o2 + (p3 << 4) + 8 >> 3];
          a3 = a3 + 2 | 0;
          g3 = +e3[o2 + (((a3 | 0) == (r3 | 0) ? 0 : a3) << 4) + 8 >> 3];
          if (d3 < h2) {
            e3[s3 >> 3] = d3;
            h2 = d3;
          }
          if (j2 < i2) {
            e3[t5 >> 3] = j2;
            i2 = j2;
          }
          if (d3 > k2) {
            e3[c5 >> 3] = d3;
          } else {
            d3 = k2;
          }
          if (j2 > f3) {
            e3[u6 >> 3] = j2;
            f3 = j2;
          }
          l2 = j2 > 0 & j2 < l2 ? j2 : l2;
          m2 = j2 < 0 & j2 > m2 ? j2 : m2;
          n2 = n2 | +q2(+(j2 - g3)) > 3.141592653589793;
          a3 = p3 + 1 | 0;
          if ((a3 | 0) == (r3 | 0)) {
            break;
          } else {
            v4 = p3;
            k2 = d3;
            p3 = a3;
            a3 = v4;
          }
        }
        if (!n2) {
          return;
        }
        e3[u6 >> 3] = m2;
        e3[t5 >> 3] = l2;
        return;
      }
      function Vc(a3) {
        a3 = a3 | 0;
        return (a3 >>> 0 < 4 ? 0 : 15) | 0;
      }
      function Wc(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0;
        r3 = b[a3 >> 2] | 0;
        if (r3) {
          s3 = c5 + 8 | 0;
          e3[s3 >> 3] = 17976931348623157e292;
          t5 = c5 + 24 | 0;
          e3[t5 >> 3] = 17976931348623157e292;
          e3[c5 >> 3] = -17976931348623157e292;
          u6 = c5 + 16 | 0;
          e3[u6 >> 3] = -17976931348623157e292;
          if ((r3 | 0) > 0) {
            g3 = b[a3 + 4 >> 2] | 0;
            o2 = 17976931348623157e292;
            p3 = -17976931348623157e292;
            f3 = 0;
            d3 = -1;
            k2 = 17976931348623157e292;
            l2 = 17976931348623157e292;
            n2 = -17976931348623157e292;
            i2 = -17976931348623157e292;
            v4 = 0;
            while (1) {
              h2 = +e3[g3 + (v4 << 4) >> 3];
              m2 = +e3[g3 + (v4 << 4) + 8 >> 3];
              z3 = d3 + 2 | 0;
              j2 = +e3[g3 + (((z3 | 0) == (r3 | 0) ? 0 : z3) << 4) + 8 >> 3];
              if (h2 < k2) {
                e3[s3 >> 3] = h2;
                k2 = h2;
              }
              if (m2 < l2) {
                e3[t5 >> 3] = m2;
                l2 = m2;
              }
              if (h2 > n2) {
                e3[c5 >> 3] = h2;
              } else {
                h2 = n2;
              }
              if (m2 > i2) {
                e3[u6 >> 3] = m2;
                i2 = m2;
              }
              o2 = m2 > 0 & m2 < o2 ? m2 : o2;
              p3 = m2 < 0 & m2 > p3 ? m2 : p3;
              f3 = f3 | +q2(+(m2 - j2)) > 3.141592653589793;
              d3 = v4 + 1 | 0;
              if ((d3 | 0) == (r3 | 0)) {
                break;
              } else {
                z3 = v4;
                n2 = h2;
                v4 = d3;
                d3 = z3;
              }
            }
            if (f3) {
              e3[u6 >> 3] = p3;
              e3[t5 >> 3] = o2;
            }
          }
        } else {
          b[c5 >> 2] = 0;
          b[c5 + 4 >> 2] = 0;
          b[c5 + 8 >> 2] = 0;
          b[c5 + 12 >> 2] = 0;
          b[c5 + 16 >> 2] = 0;
          b[c5 + 20 >> 2] = 0;
          b[c5 + 24 >> 2] = 0;
          b[c5 + 28 >> 2] = 0;
        }
        z3 = a3 + 8 | 0;
        d3 = b[z3 >> 2] | 0;
        if ((d3 | 0) <= 0) {
          return;
        }
        y3 = a3 + 12 | 0;
        x3 = 0;
        do {
          g3 = b[y3 >> 2] | 0;
          f3 = x3;
          x3 = x3 + 1 | 0;
          t5 = c5 + (x3 << 5) | 0;
          u6 = b[g3 + (f3 << 3) >> 2] | 0;
          if (u6) {
            v4 = c5 + (x3 << 5) + 8 | 0;
            e3[v4 >> 3] = 17976931348623157e292;
            a3 = c5 + (x3 << 5) + 24 | 0;
            e3[a3 >> 3] = 17976931348623157e292;
            e3[t5 >> 3] = -17976931348623157e292;
            w5 = c5 + (x3 << 5) + 16 | 0;
            e3[w5 >> 3] = -17976931348623157e292;
            if ((u6 | 0) > 0) {
              r3 = b[g3 + (f3 << 3) + 4 >> 2] | 0;
              o2 = 17976931348623157e292;
              p3 = -17976931348623157e292;
              g3 = 0;
              f3 = -1;
              s3 = 0;
              k2 = 17976931348623157e292;
              l2 = 17976931348623157e292;
              m2 = -17976931348623157e292;
              i2 = -17976931348623157e292;
              while (1) {
                h2 = +e3[r3 + (s3 << 4) >> 3];
                n2 = +e3[r3 + (s3 << 4) + 8 >> 3];
                f3 = f3 + 2 | 0;
                j2 = +e3[r3 + (((f3 | 0) == (u6 | 0) ? 0 : f3) << 4) + 8 >> 3];
                if (h2 < k2) {
                  e3[v4 >> 3] = h2;
                  k2 = h2;
                }
                if (n2 < l2) {
                  e3[a3 >> 3] = n2;
                  l2 = n2;
                }
                if (h2 > m2) {
                  e3[t5 >> 3] = h2;
                } else {
                  h2 = m2;
                }
                if (n2 > i2) {
                  e3[w5 >> 3] = n2;
                  i2 = n2;
                }
                o2 = n2 > 0 & n2 < o2 ? n2 : o2;
                p3 = n2 < 0 & n2 > p3 ? n2 : p3;
                g3 = g3 | +q2(+(n2 - j2)) > 3.141592653589793;
                f3 = s3 + 1 | 0;
                if ((f3 | 0) == (u6 | 0)) {
                  break;
                } else {
                  A7 = s3;
                  s3 = f3;
                  m2 = h2;
                  f3 = A7;
                }
              }
              if (g3) {
                e3[w5 >> 3] = p3;
                e3[a3 >> 3] = o2;
              }
            }
          } else {
            b[t5 >> 2] = 0;
            b[t5 + 4 >> 2] = 0;
            b[t5 + 8 >> 2] = 0;
            b[t5 + 12 >> 2] = 0;
            b[t5 + 16 >> 2] = 0;
            b[t5 + 20 >> 2] = 0;
            b[t5 + 24 >> 2] = 0;
            b[t5 + 28 >> 2] = 0;
            d3 = b[z3 >> 2] | 0;
          }
        } while ((x3 | 0) < (d3 | 0));
        return;
      }
      function Xc(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0;
        if (!(Tc(a3, c5, d3) | 0)) {
          f3 = 0;
          return f3 | 0;
        }
        f3 = a3 + 8 | 0;
        if ((b[f3 >> 2] | 0) <= 0) {
          f3 = 1;
          return f3 | 0;
        }
        e4 = a3 + 12 | 0;
        a3 = 0;
        while (1) {
          g3 = a3;
          a3 = a3 + 1 | 0;
          if (Tc((b[e4 >> 2] | 0) + (g3 << 3) | 0, c5 + (a3 << 5) | 0, d3) | 0) {
            a3 = 0;
            e4 = 6;
            break;
          }
          if ((a3 | 0) >= (b[f3 >> 2] | 0)) {
            a3 = 1;
            e4 = 6;
            break;
          }
        }
        if ((e4 | 0) == 6) {
          return a3 | 0;
        }
        return 0;
      }
      function Yc(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0;
        k2 = T2;
        T2 = T2 + 16 | 0;
        i2 = k2;
        h2 = d3 + 8 | 0;
        if (!(Tc(a3, c5, h2) | 0)) {
          j2 = 0;
          T2 = k2;
          return j2 | 0;
        }
        j2 = a3 + 8 | 0;
        a: do {
          if ((b[j2 >> 2] | 0) > 0) {
            g3 = a3 + 12 | 0;
            f3 = 0;
            while (1) {
              l2 = f3;
              f3 = f3 + 1 | 0;
              if (Tc((b[g3 >> 2] | 0) + (l2 << 3) | 0, c5 + (f3 << 5) | 0, h2) | 0) {
                f3 = 0;
                break;
              }
              if ((f3 | 0) >= (b[j2 >> 2] | 0)) {
                break a;
              }
            }
            T2 = k2;
            return f3 | 0;
          }
        } while (0);
        if (Zc(a3, c5, d3, e4) | 0) {
          l2 = 0;
          T2 = k2;
          return l2 | 0;
        }
        b[i2 >> 2] = b[d3 >> 2];
        b[i2 + 4 >> 2] = h2;
        f3 = b[j2 >> 2] | 0;
        b: do {
          if ((f3 | 0) > 0) {
            a3 = a3 + 12 | 0;
            h2 = 0;
            g3 = f3;
            while (1) {
              f3 = b[a3 >> 2] | 0;
              if ((b[f3 + (h2 << 3) >> 2] | 0) > 0) {
                if (Tc(i2, e4, b[f3 + (h2 << 3) + 4 >> 2] | 0) | 0) {
                  f3 = 0;
                  break b;
                }
                f3 = h2 + 1 | 0;
                if (Zc((b[a3 >> 2] | 0) + (h2 << 3) | 0, c5 + (f3 << 5) | 0, d3, e4) | 0) {
                  f3 = 0;
                  break b;
                }
                g3 = b[j2 >> 2] | 0;
              } else {
                f3 = h2 + 1 | 0;
              }
              if ((f3 | 0) < (g3 | 0)) {
                h2 = f3;
              } else {
                f3 = 1;
                break;
              }
            }
          } else {
            f3 = 1;
          }
        } while (0);
        l2 = f3;
        T2 = k2;
        return l2 | 0;
      }
      function Zc(a3, c5, d3, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0, x3 = 0, y3 = 0, z3 = 0, A7 = 0;
        y3 = T2;
        T2 = T2 + 176 | 0;
        u6 = y3 + 172 | 0;
        g3 = y3 + 168 | 0;
        v4 = y3;
        if (!(Ba(c5, f3) | 0)) {
          a3 = 0;
          T2 = y3;
          return a3 | 0;
        }
        Ca(c5, f3, u6, g3);
        Ud(v4 | 0, d3 | 0, 168) | 0;
        if ((b[d3 >> 2] | 0) > 0) {
          c5 = 0;
          do {
            z3 = v4 + 8 + (c5 << 4) + 8 | 0;
            t5 = +ic(+e3[z3 >> 3], b[g3 >> 2] | 0);
            e3[z3 >> 3] = t5;
            c5 = c5 + 1 | 0;
          } while ((c5 | 0) < (b[d3 >> 2] | 0));
        }
        r3 = +e3[f3 >> 3];
        s3 = +e3[f3 + 8 >> 3];
        t5 = +ic(+e3[f3 + 16 >> 3], b[g3 >> 2] | 0);
        p3 = +ic(+e3[f3 + 24 >> 3], b[g3 >> 2] | 0);
        a: do {
          if ((b[a3 >> 2] | 0) > 0) {
            f3 = a3 + 4 | 0;
            g3 = b[v4 >> 2] | 0;
            if ((g3 | 0) <= 0) {
              c5 = 0;
              while (1) {
                c5 = c5 + 1 | 0;
                if ((c5 | 0) >= (b[a3 >> 2] | 0)) {
                  c5 = 0;
                  break a;
                }
              }
            }
            d3 = 0;
            while (1) {
              c5 = b[f3 >> 2] | 0;
              o2 = +e3[c5 + (d3 << 4) >> 3];
              q3 = +ic(+e3[c5 + (d3 << 4) + 8 >> 3], b[u6 >> 2] | 0);
              c5 = b[f3 >> 2] | 0;
              d3 = d3 + 1 | 0;
              z3 = (d3 | 0) % (b[a3 >> 2] | 0) | 0;
              h2 = +e3[c5 + (z3 << 4) >> 3];
              i2 = +ic(+e3[c5 + (z3 << 4) + 8 >> 3], b[u6 >> 2] | 0);
              if (((!(o2 >= r3) | !(h2 >= r3) ? !(o2 <= s3) | !(h2 <= s3) : 0) ? !(q3 <= p3) | !(i2 <= p3) : 0) ? !(q3 >= t5) | !(i2 >= t5) : 0) {
                n2 = h2 - o2;
                l2 = i2 - q3;
                c5 = 0;
                do {
                  A7 = c5;
                  c5 = c5 + 1 | 0;
                  z3 = (c5 | 0) == (g3 | 0) ? 0 : c5;
                  h2 = +e3[v4 + 8 + (A7 << 4) + 8 >> 3];
                  i2 = +e3[v4 + 8 + (z3 << 4) + 8 >> 3] - h2;
                  j2 = +e3[v4 + 8 + (A7 << 4) >> 3];
                  k2 = +e3[v4 + 8 + (z3 << 4) >> 3] - j2;
                  m2 = n2 * i2 - l2 * k2;
                  if ((m2 != 0 ? (w5 = q3 - h2, x3 = o2 - j2, k2 = (w5 * k2 - i2 * x3) / m2, !(k2 < 0 | k2 > 1)) : 0) ? (m2 = (n2 * w5 - l2 * x3) / m2, m2 >= 0 & m2 <= 1) : 0) {
                    c5 = 1;
                    break a;
                  }
                } while ((c5 | 0) < (g3 | 0));
              }
              if ((d3 | 0) >= (b[a3 >> 2] | 0)) {
                c5 = 0;
                break;
              }
            }
          } else {
            c5 = 0;
          }
        } while (0);
        A7 = c5;
        T2 = y3;
        return A7 | 0;
      }
      function _c(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        if (Zc(a3, c5, d3, e4) | 0) {
          g3 = 1;
          return g3 | 0;
        }
        g3 = a3 + 8 | 0;
        if ((b[g3 >> 2] | 0) <= 0) {
          g3 = 0;
          return g3 | 0;
        }
        f3 = a3 + 12 | 0;
        a3 = 0;
        while (1) {
          h2 = a3;
          a3 = a3 + 1 | 0;
          if (Zc((b[f3 >> 2] | 0) + (h2 << 3) | 0, c5 + (a3 << 5) | 0, d3, e4) | 0) {
            a3 = 1;
            f3 = 6;
            break;
          }
          if ((a3 | 0) >= (b[g3 >> 2] | 0)) {
            a3 = 0;
            f3 = 6;
            break;
          }
        }
        if ((f3 | 0) == 6) {
          return a3 | 0;
        }
        return 0;
      }
      function $c() {
        return 8;
      }
      function ad() {
        return 16;
      }
      function bd2() {
        return 168;
      }
      function cd2() {
        return 8;
      }
      function dd() {
        return 16;
      }
      function ed() {
        return 12;
      }
      function fd() {
        return 8;
      }
      function gd(a3) {
        a3 = a3 | 0;
        return +(+((b[a3 >> 2] | 0) >>> 0) + 4294967296 * +(b[a3 + 4 >> 2] | 0));
      }
      function hd(a3) {
        a3 = a3 | 0;
        var b2 = 0, c5 = 0;
        c5 = +e3[a3 >> 3];
        b2 = +e3[a3 + 8 >> 3];
        return + +r2(+(c5 * c5 + b2 * b2));
      }
      function id2(a3, b2, c5, d3, f3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0;
        k2 = +e3[a3 >> 3];
        j2 = +e3[b2 >> 3] - k2;
        i2 = +e3[a3 + 8 >> 3];
        h2 = +e3[b2 + 8 >> 3] - i2;
        m2 = +e3[c5 >> 3];
        g3 = +e3[d3 >> 3] - m2;
        n2 = +e3[c5 + 8 >> 3];
        l2 = +e3[d3 + 8 >> 3] - n2;
        g3 = (g3 * (i2 - n2) - (k2 - m2) * l2) / (j2 * l2 - h2 * g3);
        e3[f3 >> 3] = k2 + j2 * g3;
        e3[f3 + 8 >> 3] = i2 + h2 * g3;
        return;
      }
      function jd(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        if (!(+q2(+(+e3[a3 >> 3] - +e3[b2 >> 3])) < 11920928955078125e-23)) {
          b2 = 0;
          return b2 | 0;
        }
        b2 = +q2(+(+e3[a3 + 8 >> 3] - +e3[b2 + 8 >> 3])) < 11920928955078125e-23;
        return b2 | 0;
      }
      function kd(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0;
        f3 = +e3[a3 >> 3] - +e3[b2 >> 3];
        d3 = +e3[a3 + 8 >> 3] - +e3[b2 + 8 >> 3];
        c5 = +e3[a3 + 16 >> 3] - +e3[b2 + 16 >> 3];
        return +(f3 * f3 + d3 * d3 + c5 * c5);
      }
      function ld(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, f3 = 0;
        c5 = +e3[a3 >> 3];
        d3 = +t4(+c5);
        c5 = +u5(+c5);
        e3[b2 + 16 >> 3] = c5;
        c5 = +e3[a3 + 8 >> 3];
        f3 = d3 * +t4(+c5);
        e3[b2 >> 3] = f3;
        c5 = d3 * +u5(+c5);
        e3[b2 + 8 >> 3] = c5;
        return;
      }
      function md(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0;
        g3 = T2;
        T2 = T2 + 16 | 0;
        f3 = g3;
        e4 = Fb(a3, c5) | 0;
        if ((d3 + -1 | 0) >>> 0 > 5) {
          f3 = -1;
          T2 = g3;
          return f3 | 0;
        }
        e4 = (e4 | 0) != 0;
        if ((d3 | 0) == 1 & e4) {
          f3 = -1;
          T2 = g3;
          return f3 | 0;
        }
        do {
          if (!(nd(a3, c5, f3) | 0)) {
            if (e4) {
              e4 = ((b[26352 + (d3 << 2) >> 2] | 0) + 5 - (b[f3 >> 2] | 0) | 0) % 5 | 0;
              break;
            } else {
              e4 = ((b[26384 + (d3 << 2) >> 2] | 0) + 6 - (b[f3 >> 2] | 0) | 0) % 6 | 0;
              break;
            }
          } else {
            e4 = -1;
          }
        } while (0);
        f3 = e4;
        T2 = g3;
        return f3 | 0;
      }
      function nd(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        k2 = T2;
        T2 = T2 + 32 | 0;
        h2 = k2 + 16 | 0;
        i2 = k2;
        e4 = Wb(a3, c5, h2) | 0;
        if (e4 | 0) {
          d3 = e4;
          T2 = k2;
          return d3 | 0;
        }
        g3 = Ab(a3, c5) | 0;
        j2 = Nb(a3, c5) | 0;
        qa(g3, i2);
        e4 = ra(g3, b[h2 >> 2] | 0) | 0;
        a: do {
          if (ma(g3) | 0) {
            do {
              switch (g3 | 0) {
                case 4: {
                  a3 = 0;
                  break;
                }
                case 14: {
                  a3 = 1;
                  break;
                }
                case 24: {
                  a3 = 2;
                  break;
                }
                case 38: {
                  a3 = 3;
                  break;
                }
                case 49: {
                  a3 = 4;
                  break;
                }
                case 58: {
                  a3 = 5;
                  break;
                }
                case 63: {
                  a3 = 6;
                  break;
                }
                case 72: {
                  a3 = 7;
                  break;
                }
                case 83: {
                  a3 = 8;
                  break;
                }
                case 97: {
                  a3 = 9;
                  break;
                }
                case 107: {
                  a3 = 10;
                  break;
                }
                case 117: {
                  a3 = 11;
                  break;
                }
                default: {
                  e4 = 1;
                  break a;
                }
              }
            } while (0);
            f3 = b[26416 + (a3 * 24 | 0) + 8 >> 2] | 0;
            c5 = b[26416 + (a3 * 24 | 0) + 16 >> 2] | 0;
            a3 = b[h2 >> 2] | 0;
            if ((a3 | 0) != (b[i2 >> 2] | 0)) {
              i2 = na(g3) | 0;
              a3 = b[h2 >> 2] | 0;
              if (i2 | (a3 | 0) == (c5 | 0)) {
                e4 = (e4 + 1 | 0) % 6 | 0;
              }
            }
            if ((j2 | 0) == 3 & (a3 | 0) == (c5 | 0)) {
              e4 = (e4 + 5 | 0) % 6 | 0;
              f3 = 22;
              break;
            }
            if ((j2 | 0) == 5 & (a3 | 0) == (f3 | 0)) {
              e4 = (e4 + 1 | 0) % 6 | 0;
              f3 = 22;
            } else {
              f3 = 22;
            }
          } else {
            f3 = 22;
          }
        } while (0);
        if ((f3 | 0) == 22) {
          b[d3 >> 2] = e4;
          e4 = 0;
        }
        d3 = e4;
        T2 = k2;
        return d3 | 0;
      }
      function od(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0;
        u6 = T2;
        T2 = T2 + 32 | 0;
        t5 = u6 + 24 | 0;
        r3 = u6 + 20 | 0;
        p3 = u6 + 8 | 0;
        o2 = u6 + 16 | 0;
        n2 = u6;
        j2 = (Fb(a3, c5) | 0) == 0;
        j2 = j2 ? 6 : 5;
        l2 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        l2 = l2 & 15;
        if (j2 >>> 0 <= d3 >>> 0) {
          e4 = 2;
          T2 = u6;
          return e4 | 0;
        }
        m2 = (l2 | 0) == 0;
        if (!m2 ? (q3 = Pd(7, 0, (l2 ^ 15) * 3 | 0) | 0, (q3 & a3 | 0) == 0 & ((H() | 0) & c5 | 0) == 0) : 0) {
          f3 = d3;
        } else {
          g3 = 4;
        }
        a: do {
          if ((g3 | 0) == 4) {
            f3 = (Fb(a3, c5) | 0) != 0;
            if (((f3 ? 4 : 5) | 0) < (d3 | 0)) {
              e4 = 1;
              T2 = u6;
              return e4 | 0;
            }
            if (nd(a3, c5, t5) | 0) {
              e4 = 1;
              T2 = u6;
              return e4 | 0;
            }
            g3 = (b[t5 >> 2] | 0) + d3 | 0;
            if (f3) {
              f3 = 26704 + (((g3 | 0) % 5 | 0) << 2) | 0;
            } else {
              f3 = 26736 + (((g3 | 0) % 6 | 0) << 2) | 0;
            }
            q3 = b[f3 >> 2] | 0;
            if ((q3 | 0) == 7) {
              e4 = 1;
              T2 = u6;
              return e4 | 0;
            }
            b[r3 >> 2] = 0;
            f3 = ea2(a3, c5, q3, r3, p3) | 0;
            do {
              if (!f3) {
                i2 = p3;
                k2 = b[i2 >> 2] | 0;
                i2 = b[i2 + 4 >> 2] | 0;
                h2 = i2 >>> 0 < c5 >>> 0 | (i2 | 0) == (c5 | 0) & k2 >>> 0 < a3 >>> 0;
                g3 = h2 ? k2 : a3;
                h2 = h2 ? i2 : c5;
                if (!m2 ? (m2 = Pd(7, 0, (l2 ^ 15) * 3 | 0) | 0, (k2 & m2 | 0) == 0 & (i2 & (H() | 0) | 0) == 0) : 0) {
                  f3 = d3;
                } else {
                  i2 = (d3 + -1 + j2 | 0) % (j2 | 0) | 0;
                  f3 = Fb(a3, c5) | 0;
                  if ((i2 | 0) < 0) {
                    I2(27795, 27797, 246, 27806);
                  }
                  j2 = (f3 | 0) != 0;
                  if (((j2 ? 4 : 5) | 0) < (i2 | 0)) {
                    I2(27795, 27797, 246, 27806);
                  }
                  if (nd(a3, c5, t5) | 0) {
                    I2(27795, 27797, 246, 27806);
                  }
                  f3 = (b[t5 >> 2] | 0) + i2 | 0;
                  if (j2) {
                    f3 = 26704 + (((f3 | 0) % 5 | 0) << 2) | 0;
                  } else {
                    f3 = 26736 + (((f3 | 0) % 6 | 0) << 2) | 0;
                  }
                  i2 = b[f3 >> 2] | 0;
                  if ((i2 | 0) == 7) {
                    I2(27795, 27797, 246, 27806);
                  }
                  b[o2 >> 2] = 0;
                  f3 = ea2(a3, c5, i2, o2, n2) | 0;
                  if (f3 | 0) {
                    break;
                  }
                  k2 = n2;
                  j2 = b[k2 >> 2] | 0;
                  k2 = b[k2 + 4 >> 2] | 0;
                  do {
                    if (k2 >>> 0 < h2 >>> 0 | (k2 | 0) == (h2 | 0) & j2 >>> 0 < g3 >>> 0) {
                      if (!(Fb(j2, k2) | 0)) {
                        g3 = b[26800 + ((((b[o2 >> 2] | 0) + (b[26768 + (i2 << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                      } else {
                        g3 = fa(j2, k2, a3, c5) | 0;
                      }
                      f3 = Fb(j2, k2) | 0;
                      if ((g3 + -1 | 0) >>> 0 > 5) {
                        f3 = -1;
                        g3 = j2;
                        h2 = k2;
                        break;
                      }
                      f3 = (f3 | 0) != 0;
                      if ((g3 | 0) == 1 & f3) {
                        f3 = -1;
                        g3 = j2;
                        h2 = k2;
                        break;
                      }
                      do {
                        if (!(nd(j2, k2, t5) | 0)) {
                          if (f3) {
                            f3 = ((b[26352 + (g3 << 2) >> 2] | 0) + 5 - (b[t5 >> 2] | 0) | 0) % 5 | 0;
                            break;
                          } else {
                            f3 = ((b[26384 + (g3 << 2) >> 2] | 0) + 6 - (b[t5 >> 2] | 0) | 0) % 6 | 0;
                            break;
                          }
                        } else {
                          f3 = -1;
                        }
                      } while (0);
                      g3 = j2;
                      h2 = k2;
                    } else {
                      f3 = d3;
                    }
                  } while (0);
                  i2 = p3;
                  k2 = b[i2 >> 2] | 0;
                  i2 = b[i2 + 4 >> 2] | 0;
                }
                if ((g3 | 0) == (k2 | 0) & (h2 | 0) == (i2 | 0)) {
                  j2 = (Fb(k2, i2) | 0) != 0;
                  if (j2) {
                    a3 = fa(k2, i2, a3, c5) | 0;
                  } else {
                    a3 = b[26800 + ((((b[r3 >> 2] | 0) + (b[26768 + (q3 << 2) >> 2] | 0) | 0) % 6 | 0) << 2) >> 2] | 0;
                  }
                  f3 = Fb(k2, i2) | 0;
                  if ((a3 + -1 | 0) >>> 0 <= 5 ? (s3 = (f3 | 0) != 0, !((a3 | 0) == 1 & s3)) : 0) {
                    do {
                      if (!(nd(k2, i2, t5) | 0)) {
                        if (s3) {
                          f3 = ((b[26352 + (a3 << 2) >> 2] | 0) + 5 - (b[t5 >> 2] | 0) | 0) % 5 | 0;
                          break;
                        } else {
                          f3 = ((b[26384 + (a3 << 2) >> 2] | 0) + 6 - (b[t5 >> 2] | 0) | 0) % 6 | 0;
                          break;
                        }
                      } else {
                        f3 = -1;
                      }
                    } while (0);
                  } else {
                    f3 = -1;
                  }
                  f3 = f3 + 1 | 0;
                  f3 = (f3 | 0) == 6 | j2 & (f3 | 0) == 5 ? 0 : f3;
                }
                c5 = h2;
                a3 = g3;
                break a;
              }
            } while (0);
            e4 = f3;
            T2 = u6;
            return e4 | 0;
          }
        } while (0);
        s3 = Pd(f3 | 0, 0, 56) | 0;
        t5 = H() | 0 | c5 & -2130706433 | 536870912;
        b[e4 >> 2] = s3 | a3;
        b[e4 + 4 >> 2] = t5;
        e4 = 0;
        T2 = u6;
        return e4 | 0;
      }
      function pd(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0;
        g3 = (Fb(a3, c5) | 0) == 0;
        e4 = od(a3, c5, 0, d3) | 0;
        f3 = (e4 | 0) == 0;
        if (g3) {
          if (!f3) {
            g3 = e4;
            return g3 | 0;
          }
          e4 = od(a3, c5, 1, d3 + 8 | 0) | 0;
          if (e4 | 0) {
            g3 = e4;
            return g3 | 0;
          }
          e4 = od(a3, c5, 2, d3 + 16 | 0) | 0;
          if (e4 | 0) {
            g3 = e4;
            return g3 | 0;
          }
          e4 = od(a3, c5, 3, d3 + 24 | 0) | 0;
          if (e4 | 0) {
            g3 = e4;
            return g3 | 0;
          }
          e4 = od(a3, c5, 4, d3 + 32 | 0) | 0;
          if (!e4) {
            return od(a3, c5, 5, d3 + 40 | 0) | 0;
          } else {
            g3 = e4;
            return g3 | 0;
          }
        }
        if (!f3) {
          g3 = e4;
          return g3 | 0;
        }
        e4 = od(a3, c5, 1, d3 + 8 | 0) | 0;
        if (e4 | 0) {
          g3 = e4;
          return g3 | 0;
        }
        e4 = od(a3, c5, 2, d3 + 16 | 0) | 0;
        if (e4 | 0) {
          g3 = e4;
          return g3 | 0;
        }
        e4 = od(a3, c5, 3, d3 + 24 | 0) | 0;
        if (e4 | 0) {
          g3 = e4;
          return g3 | 0;
        }
        e4 = od(a3, c5, 4, d3 + 32 | 0) | 0;
        if (e4 | 0) {
          g3 = e4;
          return g3 | 0;
        }
        g3 = d3 + 40 | 0;
        b[g3 >> 2] = 0;
        b[g3 + 4 >> 2] = 0;
        g3 = 0;
        return g3 | 0;
      }
      function qd(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = T2;
        T2 = T2 + 192 | 0;
        f3 = j2;
        g3 = j2 + 168 | 0;
        h2 = Od(a3 | 0, c5 | 0, 56) | 0;
        H() | 0;
        h2 = h2 & 7;
        i2 = c5 & -2130706433 | 134217728;
        e4 = Wb(a3, i2, g3) | 0;
        if (e4 | 0) {
          i2 = e4;
          T2 = j2;
          return i2 | 0;
        }
        c5 = Od(a3 | 0, c5 | 0, 52) | 0;
        H() | 0;
        c5 = c5 & 15;
        if (!(Fb(a3, i2) | 0)) {
          xb(g3, c5, h2, 1, f3);
        } else {
          tb(g3, c5, h2, 1, f3);
        }
        i2 = f3 + 8 | 0;
        b[d3 >> 2] = b[i2 >> 2];
        b[d3 + 4 >> 2] = b[i2 + 4 >> 2];
        b[d3 + 8 >> 2] = b[i2 + 8 >> 2];
        b[d3 + 12 >> 2] = b[i2 + 12 >> 2];
        i2 = 0;
        T2 = j2;
        return i2 | 0;
      }
      function rd(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, e4 = 0, f3 = 0, g3 = 0;
        f3 = T2;
        T2 = T2 + 16 | 0;
        d3 = f3;
        if (!(true & (c5 & 2013265920 | 0) == 536870912)) {
          e4 = 0;
          T2 = f3;
          return e4 | 0;
        }
        e4 = c5 & -2130706433 | 134217728;
        if (!(Bb(a3, e4) | 0)) {
          e4 = 0;
          T2 = f3;
          return e4 | 0;
        }
        g3 = Od(a3 | 0, c5 | 0, 56) | 0;
        H() | 0;
        g3 = (od(a3, e4, g3 & 7, d3) | 0) == 0;
        e4 = d3;
        e4 = g3 & ((b[e4 >> 2] | 0) == (a3 | 0) ? (b[e4 + 4 >> 2] | 0) == (c5 | 0) : 0) & 1;
        T2 = f3;
        return e4 | 0;
      }
      function sd(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0;
        if ((c5 | 0) > 0) {
          e4 = Dd(c5, 4) | 0;
          b[a3 >> 2] = e4;
          if (!e4) {
            I2(27819, 27842, 40, 27856);
          }
        } else {
          b[a3 >> 2] = 0;
        }
        b[a3 + 4 >> 2] = c5;
        b[a3 + 8 >> 2] = 0;
        b[a3 + 12 >> 2] = d3;
        return;
      }
      function td(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        g3 = a3 + 4 | 0;
        h2 = a3 + 12 | 0;
        i2 = a3 + 8 | 0;
        a: while (1) {
          d3 = b[g3 >> 2] | 0;
          c5 = 0;
          while (1) {
            if ((c5 | 0) >= (d3 | 0)) {
              break a;
            }
            f3 = b[a3 >> 2] | 0;
            j2 = b[f3 + (c5 << 2) >> 2] | 0;
            if (!j2) {
              c5 = c5 + 1 | 0;
            } else {
              break;
            }
          }
          c5 = f3 + (~~(+q2(+(+s2(10, + +(15 - (b[h2 >> 2] | 0) | 0)) * (+e3[j2 >> 3] + +e3[j2 + 8 >> 3]))) % +(d3 | 0)) >>> 0 << 2) | 0;
          d3 = b[c5 >> 2] | 0;
          b: do {
            if (d3 | 0) {
              f3 = j2 + 32 | 0;
              if ((d3 | 0) == (j2 | 0)) {
                b[c5 >> 2] = b[f3 >> 2];
              } else {
                d3 = d3 + 32 | 0;
                c5 = b[d3 >> 2] | 0;
                if (!c5) {
                  break;
                }
                while (1) {
                  if ((c5 | 0) == (j2 | 0)) {
                    break;
                  }
                  d3 = c5 + 32 | 0;
                  c5 = b[d3 >> 2] | 0;
                  if (!c5) {
                    break b;
                  }
                }
                b[d3 >> 2] = b[f3 >> 2];
              }
              Cd(j2);
              b[i2 >> 2] = (b[i2 >> 2] | 0) + -1;
            }
          } while (0);
        }
        Cd(b[a3 >> 2] | 0);
        return;
      }
      function ud(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0;
        e4 = b[a3 + 4 >> 2] | 0;
        d3 = 0;
        while (1) {
          if ((d3 | 0) >= (e4 | 0)) {
            c5 = 0;
            d3 = 4;
            break;
          }
          c5 = b[(b[a3 >> 2] | 0) + (d3 << 2) >> 2] | 0;
          if (!c5) {
            d3 = d3 + 1 | 0;
          } else {
            d3 = 4;
            break;
          }
        }
        if ((d3 | 0) == 4) {
          return c5 | 0;
        }
        return 0;
      }
      function vd(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0, f3 = 0, g3 = 0, h2 = 0;
        d3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e3[c5 >> 3] + +e3[c5 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        d3 = (b[a3 >> 2] | 0) + (d3 << 2) | 0;
        f3 = b[d3 >> 2] | 0;
        if (!f3) {
          h2 = 1;
          return h2 | 0;
        }
        h2 = c5 + 32 | 0;
        do {
          if ((f3 | 0) != (c5 | 0)) {
            d3 = b[f3 + 32 >> 2] | 0;
            if (!d3) {
              h2 = 1;
              return h2 | 0;
            }
            g3 = d3;
            while (1) {
              if ((g3 | 0) == (c5 | 0)) {
                g3 = 8;
                break;
              }
              d3 = b[g3 + 32 >> 2] | 0;
              if (!d3) {
                d3 = 1;
                g3 = 10;
                break;
              } else {
                f3 = g3;
                g3 = d3;
              }
            }
            if ((g3 | 0) == 8) {
              b[f3 + 32 >> 2] = b[h2 >> 2];
              break;
            } else if ((g3 | 0) == 10) {
              return d3 | 0;
            }
          } else {
            b[d3 >> 2] = b[h2 >> 2];
          }
        } while (0);
        Cd(c5);
        h2 = a3 + 8 | 0;
        b[h2 >> 2] = (b[h2 >> 2] | 0) + -1;
        h2 = 0;
        return h2 | 0;
      }
      function wd(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = Bd(40) | 0;
        if (!h2) {
          I2(27872, 27842, 98, 27885);
        }
        b[h2 >> 2] = b[c5 >> 2];
        b[h2 + 4 >> 2] = b[c5 + 4 >> 2];
        b[h2 + 8 >> 2] = b[c5 + 8 >> 2];
        b[h2 + 12 >> 2] = b[c5 + 12 >> 2];
        g3 = h2 + 16 | 0;
        b[g3 >> 2] = b[d3 >> 2];
        b[g3 + 4 >> 2] = b[d3 + 4 >> 2];
        b[g3 + 8 >> 2] = b[d3 + 8 >> 2];
        b[g3 + 12 >> 2] = b[d3 + 12 >> 2];
        b[h2 + 32 >> 2] = 0;
        g3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e3[c5 >> 3] + +e3[c5 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        g3 = (b[a3 >> 2] | 0) + (g3 << 2) | 0;
        f3 = b[g3 >> 2] | 0;
        do {
          if (!f3) {
            b[g3 >> 2] = h2;
          } else {
            while (1) {
              if (hc(f3, c5) | 0 ? hc(f3 + 16 | 0, d3) | 0 : 0) {
                break;
              }
              g3 = b[f3 + 32 >> 2] | 0;
              f3 = (g3 | 0) == 0 ? f3 : g3;
              if (!(b[f3 + 32 >> 2] | 0)) {
                i2 = 10;
                break;
              }
            }
            if ((i2 | 0) == 10) {
              b[f3 + 32 >> 2] = h2;
              break;
            }
            Cd(h2);
            i2 = f3;
            return i2 | 0;
          }
        } while (0);
        i2 = a3 + 8 | 0;
        b[i2 >> 2] = (b[i2 >> 2] | 0) + 1;
        i2 = h2;
        return i2 | 0;
      }
      function xd(a3, c5, d3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var f3 = 0, g3 = 0;
        g3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e3[c5 >> 3] + +e3[c5 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        g3 = b[(b[a3 >> 2] | 0) + (g3 << 2) >> 2] | 0;
        if (!g3) {
          d3 = 0;
          return d3 | 0;
        }
        if (!d3) {
          a3 = g3;
          while (1) {
            if (hc(a3, c5) | 0) {
              f3 = 10;
              break;
            }
            a3 = b[a3 + 32 >> 2] | 0;
            if (!a3) {
              a3 = 0;
              f3 = 10;
              break;
            }
          }
          if ((f3 | 0) == 10) {
            return a3 | 0;
          }
        }
        a3 = g3;
        while (1) {
          if (hc(a3, c5) | 0 ? hc(a3 + 16 | 0, d3) | 0 : 0) {
            f3 = 10;
            break;
          }
          a3 = b[a3 + 32 >> 2] | 0;
          if (!a3) {
            a3 = 0;
            f3 = 10;
            break;
          }
        }
        if ((f3 | 0) == 10) {
          return a3 | 0;
        }
        return 0;
      }
      function yd(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0;
        d3 = ~~(+q2(+(+s2(10, + +(15 - (b[a3 + 12 >> 2] | 0) | 0)) * (+e3[c5 >> 3] + +e3[c5 + 8 >> 3]))) % +(b[a3 + 4 >> 2] | 0)) >>> 0;
        a3 = b[(b[a3 >> 2] | 0) + (d3 << 2) >> 2] | 0;
        if (!a3) {
          d3 = 0;
          return d3 | 0;
        }
        while (1) {
          if (hc(a3, c5) | 0) {
            c5 = 5;
            break;
          }
          a3 = b[a3 + 32 >> 2] | 0;
          if (!a3) {
            a3 = 0;
            c5 = 5;
            break;
          }
        }
        if ((c5 | 0) == 5) {
          return a3 | 0;
        }
        return 0;
      }
      function zd() {
        return 27904;
      }
      function Ad(a3) {
        a3 = +a3;
        return ~~+Wd(+a3) | 0;
      }
      function Bd(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0, q3 = 0, r3 = 0, s3 = 0, t5 = 0, u6 = 0, v4 = 0, w5 = 0;
        w5 = T2;
        T2 = T2 + 16 | 0;
        n2 = w5;
        do {
          if (a3 >>> 0 < 245) {
            k2 = a3 >>> 0 < 11 ? 16 : a3 + 11 & -8;
            a3 = k2 >>> 3;
            m2 = b[6977] | 0;
            d3 = m2 >>> a3;
            if (d3 & 3 | 0) {
              c5 = (d3 & 1 ^ 1) + a3 | 0;
              a3 = 27948 + (c5 << 1 << 2) | 0;
              d3 = a3 + 8 | 0;
              e4 = b[d3 >> 2] | 0;
              f3 = e4 + 8 | 0;
              g3 = b[f3 >> 2] | 0;
              if ((g3 | 0) == (a3 | 0)) {
                b[6977] = m2 & ~(1 << c5);
              } else {
                b[g3 + 12 >> 2] = a3;
                b[d3 >> 2] = g3;
              }
              v4 = c5 << 3;
              b[e4 + 4 >> 2] = v4 | 3;
              v4 = e4 + v4 + 4 | 0;
              b[v4 >> 2] = b[v4 >> 2] | 1;
              v4 = f3;
              T2 = w5;
              return v4 | 0;
            }
            l2 = b[6979] | 0;
            if (k2 >>> 0 > l2 >>> 0) {
              if (d3 | 0) {
                c5 = 2 << a3;
                c5 = d3 << a3 & (c5 | 0 - c5);
                c5 = (c5 & 0 - c5) + -1 | 0;
                i2 = c5 >>> 12 & 16;
                c5 = c5 >>> i2;
                d3 = c5 >>> 5 & 8;
                c5 = c5 >>> d3;
                g3 = c5 >>> 2 & 4;
                c5 = c5 >>> g3;
                a3 = c5 >>> 1 & 2;
                c5 = c5 >>> a3;
                e4 = c5 >>> 1 & 1;
                e4 = (d3 | i2 | g3 | a3 | e4) + (c5 >>> e4) | 0;
                c5 = 27948 + (e4 << 1 << 2) | 0;
                a3 = c5 + 8 | 0;
                g3 = b[a3 >> 2] | 0;
                i2 = g3 + 8 | 0;
                d3 = b[i2 >> 2] | 0;
                if ((d3 | 0) == (c5 | 0)) {
                  a3 = m2 & ~(1 << e4);
                  b[6977] = a3;
                } else {
                  b[d3 + 12 >> 2] = c5;
                  b[a3 >> 2] = d3;
                  a3 = m2;
                }
                v4 = e4 << 3;
                h2 = v4 - k2 | 0;
                b[g3 + 4 >> 2] = k2 | 3;
                f3 = g3 + k2 | 0;
                b[f3 + 4 >> 2] = h2 | 1;
                b[g3 + v4 >> 2] = h2;
                if (l2 | 0) {
                  e4 = b[6982] | 0;
                  c5 = l2 >>> 3;
                  d3 = 27948 + (c5 << 1 << 2) | 0;
                  c5 = 1 << c5;
                  if (!(a3 & c5)) {
                    b[6977] = a3 | c5;
                    c5 = d3;
                    a3 = d3 + 8 | 0;
                  } else {
                    a3 = d3 + 8 | 0;
                    c5 = b[a3 >> 2] | 0;
                  }
                  b[a3 >> 2] = e4;
                  b[c5 + 12 >> 2] = e4;
                  b[e4 + 8 >> 2] = c5;
                  b[e4 + 12 >> 2] = d3;
                }
                b[6979] = h2;
                b[6982] = f3;
                v4 = i2;
                T2 = w5;
                return v4 | 0;
              }
              g3 = b[6978] | 0;
              if (g3) {
                d3 = (g3 & 0 - g3) + -1 | 0;
                f3 = d3 >>> 12 & 16;
                d3 = d3 >>> f3;
                e4 = d3 >>> 5 & 8;
                d3 = d3 >>> e4;
                h2 = d3 >>> 2 & 4;
                d3 = d3 >>> h2;
                i2 = d3 >>> 1 & 2;
                d3 = d3 >>> i2;
                j2 = d3 >>> 1 & 1;
                j2 = b[28212 + ((e4 | f3 | h2 | i2 | j2) + (d3 >>> j2) << 2) >> 2] | 0;
                d3 = j2;
                i2 = j2;
                j2 = (b[j2 + 4 >> 2] & -8) - k2 | 0;
                while (1) {
                  a3 = b[d3 + 16 >> 2] | 0;
                  if (!a3) {
                    a3 = b[d3 + 20 >> 2] | 0;
                    if (!a3) {
                      break;
                    }
                  }
                  h2 = (b[a3 + 4 >> 2] & -8) - k2 | 0;
                  f3 = h2 >>> 0 < j2 >>> 0;
                  d3 = a3;
                  i2 = f3 ? a3 : i2;
                  j2 = f3 ? h2 : j2;
                }
                h2 = i2 + k2 | 0;
                if (h2 >>> 0 > i2 >>> 0) {
                  f3 = b[i2 + 24 >> 2] | 0;
                  c5 = b[i2 + 12 >> 2] | 0;
                  do {
                    if ((c5 | 0) == (i2 | 0)) {
                      a3 = i2 + 20 | 0;
                      c5 = b[a3 >> 2] | 0;
                      if (!c5) {
                        a3 = i2 + 16 | 0;
                        c5 = b[a3 >> 2] | 0;
                        if (!c5) {
                          d3 = 0;
                          break;
                        }
                      }
                      while (1) {
                        e4 = c5 + 20 | 0;
                        d3 = b[e4 >> 2] | 0;
                        if (!d3) {
                          e4 = c5 + 16 | 0;
                          d3 = b[e4 >> 2] | 0;
                          if (!d3) {
                            break;
                          } else {
                            c5 = d3;
                            a3 = e4;
                          }
                        } else {
                          c5 = d3;
                          a3 = e4;
                        }
                      }
                      b[a3 >> 2] = 0;
                      d3 = c5;
                    } else {
                      d3 = b[i2 + 8 >> 2] | 0;
                      b[d3 + 12 >> 2] = c5;
                      b[c5 + 8 >> 2] = d3;
                      d3 = c5;
                    }
                  } while (0);
                  do {
                    if (f3 | 0) {
                      c5 = b[i2 + 28 >> 2] | 0;
                      a3 = 28212 + (c5 << 2) | 0;
                      if ((i2 | 0) == (b[a3 >> 2] | 0)) {
                        b[a3 >> 2] = d3;
                        if (!d3) {
                          b[6978] = g3 & ~(1 << c5);
                          break;
                        }
                      } else {
                        v4 = f3 + 16 | 0;
                        b[((b[v4 >> 2] | 0) == (i2 | 0) ? v4 : f3 + 20 | 0) >> 2] = d3;
                        if (!d3) {
                          break;
                        }
                      }
                      b[d3 + 24 >> 2] = f3;
                      c5 = b[i2 + 16 >> 2] | 0;
                      if (c5 | 0) {
                        b[d3 + 16 >> 2] = c5;
                        b[c5 + 24 >> 2] = d3;
                      }
                      c5 = b[i2 + 20 >> 2] | 0;
                      if (c5 | 0) {
                        b[d3 + 20 >> 2] = c5;
                        b[c5 + 24 >> 2] = d3;
                      }
                    }
                  } while (0);
                  if (j2 >>> 0 < 16) {
                    v4 = j2 + k2 | 0;
                    b[i2 + 4 >> 2] = v4 | 3;
                    v4 = i2 + v4 + 4 | 0;
                    b[v4 >> 2] = b[v4 >> 2] | 1;
                  } else {
                    b[i2 + 4 >> 2] = k2 | 3;
                    b[h2 + 4 >> 2] = j2 | 1;
                    b[h2 + j2 >> 2] = j2;
                    if (l2 | 0) {
                      e4 = b[6982] | 0;
                      c5 = l2 >>> 3;
                      d3 = 27948 + (c5 << 1 << 2) | 0;
                      c5 = 1 << c5;
                      if (!(c5 & m2)) {
                        b[6977] = c5 | m2;
                        c5 = d3;
                        a3 = d3 + 8 | 0;
                      } else {
                        a3 = d3 + 8 | 0;
                        c5 = b[a3 >> 2] | 0;
                      }
                      b[a3 >> 2] = e4;
                      b[c5 + 12 >> 2] = e4;
                      b[e4 + 8 >> 2] = c5;
                      b[e4 + 12 >> 2] = d3;
                    }
                    b[6979] = j2;
                    b[6982] = h2;
                  }
                  v4 = i2 + 8 | 0;
                  T2 = w5;
                  return v4 | 0;
                } else {
                  m2 = k2;
                }
              } else {
                m2 = k2;
              }
            } else {
              m2 = k2;
            }
          } else if (a3 >>> 0 <= 4294967231) {
            a3 = a3 + 11 | 0;
            k2 = a3 & -8;
            e4 = b[6978] | 0;
            if (e4) {
              f3 = 0 - k2 | 0;
              a3 = a3 >>> 8;
              if (a3) {
                if (k2 >>> 0 > 16777215) {
                  j2 = 31;
                } else {
                  m2 = (a3 + 1048320 | 0) >>> 16 & 8;
                  q3 = a3 << m2;
                  i2 = (q3 + 520192 | 0) >>> 16 & 4;
                  q3 = q3 << i2;
                  j2 = (q3 + 245760 | 0) >>> 16 & 2;
                  j2 = 14 - (i2 | m2 | j2) + (q3 << j2 >>> 15) | 0;
                  j2 = k2 >>> (j2 + 7 | 0) & 1 | j2 << 1;
                }
              } else {
                j2 = 0;
              }
              d3 = b[28212 + (j2 << 2) >> 2] | 0;
              a: do {
                if (!d3) {
                  d3 = 0;
                  a3 = 0;
                  q3 = 61;
                } else {
                  a3 = 0;
                  i2 = k2 << ((j2 | 0) == 31 ? 0 : 25 - (j2 >>> 1) | 0);
                  g3 = 0;
                  while (1) {
                    h2 = (b[d3 + 4 >> 2] & -8) - k2 | 0;
                    if (h2 >>> 0 < f3 >>> 0) {
                      if (!h2) {
                        a3 = d3;
                        f3 = 0;
                        q3 = 65;
                        break a;
                      } else {
                        a3 = d3;
                        f3 = h2;
                      }
                    }
                    q3 = b[d3 + 20 >> 2] | 0;
                    d3 = b[d3 + 16 + (i2 >>> 31 << 2) >> 2] | 0;
                    g3 = (q3 | 0) == 0 | (q3 | 0) == (d3 | 0) ? g3 : q3;
                    if (!d3) {
                      d3 = g3;
                      q3 = 61;
                      break;
                    } else {
                      i2 = i2 << 1;
                    }
                  }
                }
              } while (0);
              if ((q3 | 0) == 61) {
                if ((d3 | 0) == 0 & (a3 | 0) == 0) {
                  a3 = 2 << j2;
                  a3 = (a3 | 0 - a3) & e4;
                  if (!a3) {
                    m2 = k2;
                    break;
                  }
                  m2 = (a3 & 0 - a3) + -1 | 0;
                  h2 = m2 >>> 12 & 16;
                  m2 = m2 >>> h2;
                  g3 = m2 >>> 5 & 8;
                  m2 = m2 >>> g3;
                  i2 = m2 >>> 2 & 4;
                  m2 = m2 >>> i2;
                  j2 = m2 >>> 1 & 2;
                  m2 = m2 >>> j2;
                  d3 = m2 >>> 1 & 1;
                  a3 = 0;
                  d3 = b[28212 + ((g3 | h2 | i2 | j2 | d3) + (m2 >>> d3) << 2) >> 2] | 0;
                }
                if (!d3) {
                  i2 = a3;
                  h2 = f3;
                } else {
                  q3 = 65;
                }
              }
              if ((q3 | 0) == 65) {
                g3 = d3;
                while (1) {
                  m2 = (b[g3 + 4 >> 2] & -8) - k2 | 0;
                  d3 = m2 >>> 0 < f3 >>> 0;
                  f3 = d3 ? m2 : f3;
                  a3 = d3 ? g3 : a3;
                  d3 = b[g3 + 16 >> 2] | 0;
                  if (!d3) {
                    d3 = b[g3 + 20 >> 2] | 0;
                  }
                  if (!d3) {
                    i2 = a3;
                    h2 = f3;
                    break;
                  } else {
                    g3 = d3;
                  }
                }
              }
              if (((i2 | 0) != 0 ? h2 >>> 0 < ((b[6979] | 0) - k2 | 0) >>> 0 : 0) ? (l2 = i2 + k2 | 0, l2 >>> 0 > i2 >>> 0) : 0) {
                g3 = b[i2 + 24 >> 2] | 0;
                c5 = b[i2 + 12 >> 2] | 0;
                do {
                  if ((c5 | 0) == (i2 | 0)) {
                    a3 = i2 + 20 | 0;
                    c5 = b[a3 >> 2] | 0;
                    if (!c5) {
                      a3 = i2 + 16 | 0;
                      c5 = b[a3 >> 2] | 0;
                      if (!c5) {
                        c5 = 0;
                        break;
                      }
                    }
                    while (1) {
                      f3 = c5 + 20 | 0;
                      d3 = b[f3 >> 2] | 0;
                      if (!d3) {
                        f3 = c5 + 16 | 0;
                        d3 = b[f3 >> 2] | 0;
                        if (!d3) {
                          break;
                        } else {
                          c5 = d3;
                          a3 = f3;
                        }
                      } else {
                        c5 = d3;
                        a3 = f3;
                      }
                    }
                    b[a3 >> 2] = 0;
                  } else {
                    v4 = b[i2 + 8 >> 2] | 0;
                    b[v4 + 12 >> 2] = c5;
                    b[c5 + 8 >> 2] = v4;
                  }
                } while (0);
                do {
                  if (g3) {
                    a3 = b[i2 + 28 >> 2] | 0;
                    d3 = 28212 + (a3 << 2) | 0;
                    if ((i2 | 0) == (b[d3 >> 2] | 0)) {
                      b[d3 >> 2] = c5;
                      if (!c5) {
                        e4 = e4 & ~(1 << a3);
                        b[6978] = e4;
                        break;
                      }
                    } else {
                      v4 = g3 + 16 | 0;
                      b[((b[v4 >> 2] | 0) == (i2 | 0) ? v4 : g3 + 20 | 0) >> 2] = c5;
                      if (!c5) {
                        break;
                      }
                    }
                    b[c5 + 24 >> 2] = g3;
                    a3 = b[i2 + 16 >> 2] | 0;
                    if (a3 | 0) {
                      b[c5 + 16 >> 2] = a3;
                      b[a3 + 24 >> 2] = c5;
                    }
                    a3 = b[i2 + 20 >> 2] | 0;
                    if (a3) {
                      b[c5 + 20 >> 2] = a3;
                      b[a3 + 24 >> 2] = c5;
                    }
                  }
                } while (0);
                b: do {
                  if (h2 >>> 0 < 16) {
                    v4 = h2 + k2 | 0;
                    b[i2 + 4 >> 2] = v4 | 3;
                    v4 = i2 + v4 + 4 | 0;
                    b[v4 >> 2] = b[v4 >> 2] | 1;
                  } else {
                    b[i2 + 4 >> 2] = k2 | 3;
                    b[l2 + 4 >> 2] = h2 | 1;
                    b[l2 + h2 >> 2] = h2;
                    c5 = h2 >>> 3;
                    if (h2 >>> 0 < 256) {
                      d3 = 27948 + (c5 << 1 << 2) | 0;
                      a3 = b[6977] | 0;
                      c5 = 1 << c5;
                      if (!(a3 & c5)) {
                        b[6977] = a3 | c5;
                        c5 = d3;
                        a3 = d3 + 8 | 0;
                      } else {
                        a3 = d3 + 8 | 0;
                        c5 = b[a3 >> 2] | 0;
                      }
                      b[a3 >> 2] = l2;
                      b[c5 + 12 >> 2] = l2;
                      b[l2 + 8 >> 2] = c5;
                      b[l2 + 12 >> 2] = d3;
                      break;
                    }
                    c5 = h2 >>> 8;
                    if (c5) {
                      if (h2 >>> 0 > 16777215) {
                        d3 = 31;
                      } else {
                        u6 = (c5 + 1048320 | 0) >>> 16 & 8;
                        v4 = c5 << u6;
                        t5 = (v4 + 520192 | 0) >>> 16 & 4;
                        v4 = v4 << t5;
                        d3 = (v4 + 245760 | 0) >>> 16 & 2;
                        d3 = 14 - (t5 | u6 | d3) + (v4 << d3 >>> 15) | 0;
                        d3 = h2 >>> (d3 + 7 | 0) & 1 | d3 << 1;
                      }
                    } else {
                      d3 = 0;
                    }
                    c5 = 28212 + (d3 << 2) | 0;
                    b[l2 + 28 >> 2] = d3;
                    a3 = l2 + 16 | 0;
                    b[a3 + 4 >> 2] = 0;
                    b[a3 >> 2] = 0;
                    a3 = 1 << d3;
                    if (!(e4 & a3)) {
                      b[6978] = e4 | a3;
                      b[c5 >> 2] = l2;
                      b[l2 + 24 >> 2] = c5;
                      b[l2 + 12 >> 2] = l2;
                      b[l2 + 8 >> 2] = l2;
                      break;
                    }
                    c5 = b[c5 >> 2] | 0;
                    c: do {
                      if ((b[c5 + 4 >> 2] & -8 | 0) != (h2 | 0)) {
                        e4 = h2 << ((d3 | 0) == 31 ? 0 : 25 - (d3 >>> 1) | 0);
                        while (1) {
                          d3 = c5 + 16 + (e4 >>> 31 << 2) | 0;
                          a3 = b[d3 >> 2] | 0;
                          if (!a3) {
                            break;
                          }
                          if ((b[a3 + 4 >> 2] & -8 | 0) == (h2 | 0)) {
                            c5 = a3;
                            break c;
                          } else {
                            e4 = e4 << 1;
                            c5 = a3;
                          }
                        }
                        b[d3 >> 2] = l2;
                        b[l2 + 24 >> 2] = c5;
                        b[l2 + 12 >> 2] = l2;
                        b[l2 + 8 >> 2] = l2;
                        break b;
                      }
                    } while (0);
                    u6 = c5 + 8 | 0;
                    v4 = b[u6 >> 2] | 0;
                    b[v4 + 12 >> 2] = l2;
                    b[u6 >> 2] = l2;
                    b[l2 + 8 >> 2] = v4;
                    b[l2 + 12 >> 2] = c5;
                    b[l2 + 24 >> 2] = 0;
                  }
                } while (0);
                v4 = i2 + 8 | 0;
                T2 = w5;
                return v4 | 0;
              } else {
                m2 = k2;
              }
            } else {
              m2 = k2;
            }
          } else {
            m2 = -1;
          }
        } while (0);
        d3 = b[6979] | 0;
        if (d3 >>> 0 >= m2 >>> 0) {
          c5 = d3 - m2 | 0;
          a3 = b[6982] | 0;
          if (c5 >>> 0 > 15) {
            v4 = a3 + m2 | 0;
            b[6982] = v4;
            b[6979] = c5;
            b[v4 + 4 >> 2] = c5 | 1;
            b[a3 + d3 >> 2] = c5;
            b[a3 + 4 >> 2] = m2 | 3;
          } else {
            b[6979] = 0;
            b[6982] = 0;
            b[a3 + 4 >> 2] = d3 | 3;
            v4 = a3 + d3 + 4 | 0;
            b[v4 >> 2] = b[v4 >> 2] | 1;
          }
          v4 = a3 + 8 | 0;
          T2 = w5;
          return v4 | 0;
        }
        h2 = b[6980] | 0;
        if (h2 >>> 0 > m2 >>> 0) {
          t5 = h2 - m2 | 0;
          b[6980] = t5;
          v4 = b[6983] | 0;
          u6 = v4 + m2 | 0;
          b[6983] = u6;
          b[u6 + 4 >> 2] = t5 | 1;
          b[v4 + 4 >> 2] = m2 | 3;
          v4 = v4 + 8 | 0;
          T2 = w5;
          return v4 | 0;
        }
        if (!(b[7095] | 0)) {
          b[7097] = 4096;
          b[7096] = 4096;
          b[7098] = -1;
          b[7099] = -1;
          b[7100] = 0;
          b[7088] = 0;
          b[7095] = n2 & -16 ^ 1431655768;
          a3 = 4096;
        } else {
          a3 = b[7097] | 0;
        }
        i2 = m2 + 48 | 0;
        j2 = m2 + 47 | 0;
        g3 = a3 + j2 | 0;
        f3 = 0 - a3 | 0;
        k2 = g3 & f3;
        if (k2 >>> 0 <= m2 >>> 0) {
          v4 = 0;
          T2 = w5;
          return v4 | 0;
        }
        a3 = b[7087] | 0;
        if (a3 | 0 ? (l2 = b[7085] | 0, n2 = l2 + k2 | 0, n2 >>> 0 <= l2 >>> 0 | n2 >>> 0 > a3 >>> 0) : 0) {
          v4 = 0;
          T2 = w5;
          return v4 | 0;
        }
        d: do {
          if (!(b[7088] & 4)) {
            d3 = b[6983] | 0;
            e: do {
              if (d3) {
                e4 = 28356;
                while (1) {
                  n2 = b[e4 >> 2] | 0;
                  if (n2 >>> 0 <= d3 >>> 0 ? (n2 + (b[e4 + 4 >> 2] | 0) | 0) >>> 0 > d3 >>> 0 : 0) {
                    break;
                  }
                  a3 = b[e4 + 8 >> 2] | 0;
                  if (!a3) {
                    q3 = 128;
                    break e;
                  } else {
                    e4 = a3;
                  }
                }
                c5 = g3 - h2 & f3;
                if (c5 >>> 0 < 2147483647) {
                  a3 = Xd(c5 | 0) | 0;
                  if ((a3 | 0) == ((b[e4 >> 2] | 0) + (b[e4 + 4 >> 2] | 0) | 0)) {
                    if ((a3 | 0) != (-1 | 0)) {
                      h2 = c5;
                      g3 = a3;
                      q3 = 145;
                      break d;
                    }
                  } else {
                    e4 = a3;
                    q3 = 136;
                  }
                } else {
                  c5 = 0;
                }
              } else {
                q3 = 128;
              }
            } while (0);
            do {
              if ((q3 | 0) == 128) {
                d3 = Xd(0) | 0;
                if ((d3 | 0) != (-1 | 0) ? (c5 = d3, o2 = b[7096] | 0, p3 = o2 + -1 | 0, c5 = ((p3 & c5 | 0) == 0 ? 0 : (p3 + c5 & 0 - o2) - c5 | 0) + k2 | 0, o2 = b[7085] | 0, p3 = c5 + o2 | 0, c5 >>> 0 > m2 >>> 0 & c5 >>> 0 < 2147483647) : 0) {
                  n2 = b[7087] | 0;
                  if (n2 | 0 ? p3 >>> 0 <= o2 >>> 0 | p3 >>> 0 > n2 >>> 0 : 0) {
                    c5 = 0;
                    break;
                  }
                  a3 = Xd(c5 | 0) | 0;
                  if ((a3 | 0) == (d3 | 0)) {
                    h2 = c5;
                    g3 = d3;
                    q3 = 145;
                    break d;
                  } else {
                    e4 = a3;
                    q3 = 136;
                  }
                } else {
                  c5 = 0;
                }
              }
            } while (0);
            do {
              if ((q3 | 0) == 136) {
                d3 = 0 - c5 | 0;
                if (!(i2 >>> 0 > c5 >>> 0 & (c5 >>> 0 < 2147483647 & (e4 | 0) != (-1 | 0)))) {
                  if ((e4 | 0) == (-1 | 0)) {
                    c5 = 0;
                    break;
                  } else {
                    h2 = c5;
                    g3 = e4;
                    q3 = 145;
                    break d;
                  }
                }
                a3 = b[7097] | 0;
                a3 = j2 - c5 + a3 & 0 - a3;
                if (a3 >>> 0 >= 2147483647) {
                  h2 = c5;
                  g3 = e4;
                  q3 = 145;
                  break d;
                }
                if ((Xd(a3 | 0) | 0) == (-1 | 0)) {
                  Xd(d3 | 0) | 0;
                  c5 = 0;
                  break;
                } else {
                  h2 = a3 + c5 | 0;
                  g3 = e4;
                  q3 = 145;
                  break d;
                }
              }
            } while (0);
            b[7088] = b[7088] | 4;
            q3 = 143;
          } else {
            c5 = 0;
            q3 = 143;
          }
        } while (0);
        if (((q3 | 0) == 143 ? k2 >>> 0 < 2147483647 : 0) ? (t5 = Xd(k2 | 0) | 0, p3 = Xd(0) | 0, r3 = p3 - t5 | 0, s3 = r3 >>> 0 > (m2 + 40 | 0) >>> 0, !((t5 | 0) == (-1 | 0) | s3 ^ 1 | t5 >>> 0 < p3 >>> 0 & ((t5 | 0) != (-1 | 0) & (p3 | 0) != (-1 | 0)) ^ 1)) : 0) {
          h2 = s3 ? r3 : c5;
          g3 = t5;
          q3 = 145;
        }
        if ((q3 | 0) == 145) {
          c5 = (b[7085] | 0) + h2 | 0;
          b[7085] = c5;
          if (c5 >>> 0 > (b[7086] | 0) >>> 0) {
            b[7086] = c5;
          }
          j2 = b[6983] | 0;
          f: do {
            if (j2) {
              c5 = 28356;
              while (1) {
                a3 = b[c5 >> 2] | 0;
                d3 = b[c5 + 4 >> 2] | 0;
                if ((g3 | 0) == (a3 + d3 | 0)) {
                  q3 = 154;
                  break;
                }
                e4 = b[c5 + 8 >> 2] | 0;
                if (!e4) {
                  break;
                } else {
                  c5 = e4;
                }
              }
              if (((q3 | 0) == 154 ? (u6 = c5 + 4 | 0, (b[c5 + 12 >> 2] & 8 | 0) == 0) : 0) ? g3 >>> 0 > j2 >>> 0 & a3 >>> 0 <= j2 >>> 0 : 0) {
                b[u6 >> 2] = d3 + h2;
                v4 = (b[6980] | 0) + h2 | 0;
                t5 = j2 + 8 | 0;
                t5 = (t5 & 7 | 0) == 0 ? 0 : 0 - t5 & 7;
                u6 = j2 + t5 | 0;
                t5 = v4 - t5 | 0;
                b[6983] = u6;
                b[6980] = t5;
                b[u6 + 4 >> 2] = t5 | 1;
                b[j2 + v4 + 4 >> 2] = 40;
                b[6984] = b[7099];
                break;
              }
              if (g3 >>> 0 < (b[6981] | 0) >>> 0) {
                b[6981] = g3;
              }
              d3 = g3 + h2 | 0;
              c5 = 28356;
              while (1) {
                if ((b[c5 >> 2] | 0) == (d3 | 0)) {
                  q3 = 162;
                  break;
                }
                a3 = b[c5 + 8 >> 2] | 0;
                if (!a3) {
                  break;
                } else {
                  c5 = a3;
                }
              }
              if ((q3 | 0) == 162 ? (b[c5 + 12 >> 2] & 8 | 0) == 0 : 0) {
                b[c5 >> 2] = g3;
                l2 = c5 + 4 | 0;
                b[l2 >> 2] = (b[l2 >> 2] | 0) + h2;
                l2 = g3 + 8 | 0;
                l2 = g3 + ((l2 & 7 | 0) == 0 ? 0 : 0 - l2 & 7) | 0;
                c5 = d3 + 8 | 0;
                c5 = d3 + ((c5 & 7 | 0) == 0 ? 0 : 0 - c5 & 7) | 0;
                k2 = l2 + m2 | 0;
                i2 = c5 - l2 - m2 | 0;
                b[l2 + 4 >> 2] = m2 | 3;
                g: do {
                  if ((j2 | 0) == (c5 | 0)) {
                    v4 = (b[6980] | 0) + i2 | 0;
                    b[6980] = v4;
                    b[6983] = k2;
                    b[k2 + 4 >> 2] = v4 | 1;
                  } else {
                    if ((b[6982] | 0) == (c5 | 0)) {
                      v4 = (b[6979] | 0) + i2 | 0;
                      b[6979] = v4;
                      b[6982] = k2;
                      b[k2 + 4 >> 2] = v4 | 1;
                      b[k2 + v4 >> 2] = v4;
                      break;
                    }
                    a3 = b[c5 + 4 >> 2] | 0;
                    if ((a3 & 3 | 0) == 1) {
                      h2 = a3 & -8;
                      e4 = a3 >>> 3;
                      h: do {
                        if (a3 >>> 0 < 256) {
                          a3 = b[c5 + 8 >> 2] | 0;
                          d3 = b[c5 + 12 >> 2] | 0;
                          if ((d3 | 0) == (a3 | 0)) {
                            b[6977] = b[6977] & ~(1 << e4);
                            break;
                          } else {
                            b[a3 + 12 >> 2] = d3;
                            b[d3 + 8 >> 2] = a3;
                            break;
                          }
                        } else {
                          g3 = b[c5 + 24 >> 2] | 0;
                          a3 = b[c5 + 12 >> 2] | 0;
                          do {
                            if ((a3 | 0) == (c5 | 0)) {
                              d3 = c5 + 16 | 0;
                              e4 = d3 + 4 | 0;
                              a3 = b[e4 >> 2] | 0;
                              if (!a3) {
                                a3 = b[d3 >> 2] | 0;
                                if (!a3) {
                                  a3 = 0;
                                  break;
                                }
                              } else {
                                d3 = e4;
                              }
                              while (1) {
                                f3 = a3 + 20 | 0;
                                e4 = b[f3 >> 2] | 0;
                                if (!e4) {
                                  f3 = a3 + 16 | 0;
                                  e4 = b[f3 >> 2] | 0;
                                  if (!e4) {
                                    break;
                                  } else {
                                    a3 = e4;
                                    d3 = f3;
                                  }
                                } else {
                                  a3 = e4;
                                  d3 = f3;
                                }
                              }
                              b[d3 >> 2] = 0;
                            } else {
                              v4 = b[c5 + 8 >> 2] | 0;
                              b[v4 + 12 >> 2] = a3;
                              b[a3 + 8 >> 2] = v4;
                            }
                          } while (0);
                          if (!g3) {
                            break;
                          }
                          d3 = b[c5 + 28 >> 2] | 0;
                          e4 = 28212 + (d3 << 2) | 0;
                          do {
                            if ((b[e4 >> 2] | 0) != (c5 | 0)) {
                              v4 = g3 + 16 | 0;
                              b[((b[v4 >> 2] | 0) == (c5 | 0) ? v4 : g3 + 20 | 0) >> 2] = a3;
                              if (!a3) {
                                break h;
                              }
                            } else {
                              b[e4 >> 2] = a3;
                              if (a3 | 0) {
                                break;
                              }
                              b[6978] = b[6978] & ~(1 << d3);
                              break h;
                            }
                          } while (0);
                          b[a3 + 24 >> 2] = g3;
                          d3 = c5 + 16 | 0;
                          e4 = b[d3 >> 2] | 0;
                          if (e4 | 0) {
                            b[a3 + 16 >> 2] = e4;
                            b[e4 + 24 >> 2] = a3;
                          }
                          d3 = b[d3 + 4 >> 2] | 0;
                          if (!d3) {
                            break;
                          }
                          b[a3 + 20 >> 2] = d3;
                          b[d3 + 24 >> 2] = a3;
                        }
                      } while (0);
                      c5 = c5 + h2 | 0;
                      f3 = h2 + i2 | 0;
                    } else {
                      f3 = i2;
                    }
                    c5 = c5 + 4 | 0;
                    b[c5 >> 2] = b[c5 >> 2] & -2;
                    b[k2 + 4 >> 2] = f3 | 1;
                    b[k2 + f3 >> 2] = f3;
                    c5 = f3 >>> 3;
                    if (f3 >>> 0 < 256) {
                      d3 = 27948 + (c5 << 1 << 2) | 0;
                      a3 = b[6977] | 0;
                      c5 = 1 << c5;
                      if (!(a3 & c5)) {
                        b[6977] = a3 | c5;
                        c5 = d3;
                        a3 = d3 + 8 | 0;
                      } else {
                        a3 = d3 + 8 | 0;
                        c5 = b[a3 >> 2] | 0;
                      }
                      b[a3 >> 2] = k2;
                      b[c5 + 12 >> 2] = k2;
                      b[k2 + 8 >> 2] = c5;
                      b[k2 + 12 >> 2] = d3;
                      break;
                    }
                    c5 = f3 >>> 8;
                    do {
                      if (!c5) {
                        e4 = 0;
                      } else {
                        if (f3 >>> 0 > 16777215) {
                          e4 = 31;
                          break;
                        }
                        u6 = (c5 + 1048320 | 0) >>> 16 & 8;
                        v4 = c5 << u6;
                        t5 = (v4 + 520192 | 0) >>> 16 & 4;
                        v4 = v4 << t5;
                        e4 = (v4 + 245760 | 0) >>> 16 & 2;
                        e4 = 14 - (t5 | u6 | e4) + (v4 << e4 >>> 15) | 0;
                        e4 = f3 >>> (e4 + 7 | 0) & 1 | e4 << 1;
                      }
                    } while (0);
                    c5 = 28212 + (e4 << 2) | 0;
                    b[k2 + 28 >> 2] = e4;
                    a3 = k2 + 16 | 0;
                    b[a3 + 4 >> 2] = 0;
                    b[a3 >> 2] = 0;
                    a3 = b[6978] | 0;
                    d3 = 1 << e4;
                    if (!(a3 & d3)) {
                      b[6978] = a3 | d3;
                      b[c5 >> 2] = k2;
                      b[k2 + 24 >> 2] = c5;
                      b[k2 + 12 >> 2] = k2;
                      b[k2 + 8 >> 2] = k2;
                      break;
                    }
                    c5 = b[c5 >> 2] | 0;
                    i: do {
                      if ((b[c5 + 4 >> 2] & -8 | 0) != (f3 | 0)) {
                        e4 = f3 << ((e4 | 0) == 31 ? 0 : 25 - (e4 >>> 1) | 0);
                        while (1) {
                          d3 = c5 + 16 + (e4 >>> 31 << 2) | 0;
                          a3 = b[d3 >> 2] | 0;
                          if (!a3) {
                            break;
                          }
                          if ((b[a3 + 4 >> 2] & -8 | 0) == (f3 | 0)) {
                            c5 = a3;
                            break i;
                          } else {
                            e4 = e4 << 1;
                            c5 = a3;
                          }
                        }
                        b[d3 >> 2] = k2;
                        b[k2 + 24 >> 2] = c5;
                        b[k2 + 12 >> 2] = k2;
                        b[k2 + 8 >> 2] = k2;
                        break g;
                      }
                    } while (0);
                    u6 = c5 + 8 | 0;
                    v4 = b[u6 >> 2] | 0;
                    b[v4 + 12 >> 2] = k2;
                    b[u6 >> 2] = k2;
                    b[k2 + 8 >> 2] = v4;
                    b[k2 + 12 >> 2] = c5;
                    b[k2 + 24 >> 2] = 0;
                  }
                } while (0);
                v4 = l2 + 8 | 0;
                T2 = w5;
                return v4 | 0;
              }
              c5 = 28356;
              while (1) {
                a3 = b[c5 >> 2] | 0;
                if (a3 >>> 0 <= j2 >>> 0 ? (v4 = a3 + (b[c5 + 4 >> 2] | 0) | 0, v4 >>> 0 > j2 >>> 0) : 0) {
                  break;
                }
                c5 = b[c5 + 8 >> 2] | 0;
              }
              f3 = v4 + -47 | 0;
              a3 = f3 + 8 | 0;
              a3 = f3 + ((a3 & 7 | 0) == 0 ? 0 : 0 - a3 & 7) | 0;
              f3 = j2 + 16 | 0;
              a3 = a3 >>> 0 < f3 >>> 0 ? j2 : a3;
              c5 = a3 + 8 | 0;
              d3 = h2 + -40 | 0;
              t5 = g3 + 8 | 0;
              t5 = (t5 & 7 | 0) == 0 ? 0 : 0 - t5 & 7;
              u6 = g3 + t5 | 0;
              t5 = d3 - t5 | 0;
              b[6983] = u6;
              b[6980] = t5;
              b[u6 + 4 >> 2] = t5 | 1;
              b[g3 + d3 + 4 >> 2] = 40;
              b[6984] = b[7099];
              d3 = a3 + 4 | 0;
              b[d3 >> 2] = 27;
              b[c5 >> 2] = b[7089];
              b[c5 + 4 >> 2] = b[7090];
              b[c5 + 8 >> 2] = b[7091];
              b[c5 + 12 >> 2] = b[7092];
              b[7089] = g3;
              b[7090] = h2;
              b[7092] = 0;
              b[7091] = c5;
              c5 = a3 + 24 | 0;
              do {
                u6 = c5;
                c5 = c5 + 4 | 0;
                b[c5 >> 2] = 7;
              } while ((u6 + 8 | 0) >>> 0 < v4 >>> 0);
              if ((a3 | 0) != (j2 | 0)) {
                g3 = a3 - j2 | 0;
                b[d3 >> 2] = b[d3 >> 2] & -2;
                b[j2 + 4 >> 2] = g3 | 1;
                b[a3 >> 2] = g3;
                c5 = g3 >>> 3;
                if (g3 >>> 0 < 256) {
                  d3 = 27948 + (c5 << 1 << 2) | 0;
                  a3 = b[6977] | 0;
                  c5 = 1 << c5;
                  if (!(a3 & c5)) {
                    b[6977] = a3 | c5;
                    c5 = d3;
                    a3 = d3 + 8 | 0;
                  } else {
                    a3 = d3 + 8 | 0;
                    c5 = b[a3 >> 2] | 0;
                  }
                  b[a3 >> 2] = j2;
                  b[c5 + 12 >> 2] = j2;
                  b[j2 + 8 >> 2] = c5;
                  b[j2 + 12 >> 2] = d3;
                  break;
                }
                c5 = g3 >>> 8;
                if (c5) {
                  if (g3 >>> 0 > 16777215) {
                    e4 = 31;
                  } else {
                    u6 = (c5 + 1048320 | 0) >>> 16 & 8;
                    v4 = c5 << u6;
                    t5 = (v4 + 520192 | 0) >>> 16 & 4;
                    v4 = v4 << t5;
                    e4 = (v4 + 245760 | 0) >>> 16 & 2;
                    e4 = 14 - (t5 | u6 | e4) + (v4 << e4 >>> 15) | 0;
                    e4 = g3 >>> (e4 + 7 | 0) & 1 | e4 << 1;
                  }
                } else {
                  e4 = 0;
                }
                d3 = 28212 + (e4 << 2) | 0;
                b[j2 + 28 >> 2] = e4;
                b[j2 + 20 >> 2] = 0;
                b[f3 >> 2] = 0;
                c5 = b[6978] | 0;
                a3 = 1 << e4;
                if (!(c5 & a3)) {
                  b[6978] = c5 | a3;
                  b[d3 >> 2] = j2;
                  b[j2 + 24 >> 2] = d3;
                  b[j2 + 12 >> 2] = j2;
                  b[j2 + 8 >> 2] = j2;
                  break;
                }
                c5 = b[d3 >> 2] | 0;
                j: do {
                  if ((b[c5 + 4 >> 2] & -8 | 0) != (g3 | 0)) {
                    e4 = g3 << ((e4 | 0) == 31 ? 0 : 25 - (e4 >>> 1) | 0);
                    while (1) {
                      d3 = c5 + 16 + (e4 >>> 31 << 2) | 0;
                      a3 = b[d3 >> 2] | 0;
                      if (!a3) {
                        break;
                      }
                      if ((b[a3 + 4 >> 2] & -8 | 0) == (g3 | 0)) {
                        c5 = a3;
                        break j;
                      } else {
                        e4 = e4 << 1;
                        c5 = a3;
                      }
                    }
                    b[d3 >> 2] = j2;
                    b[j2 + 24 >> 2] = c5;
                    b[j2 + 12 >> 2] = j2;
                    b[j2 + 8 >> 2] = j2;
                    break f;
                  }
                } while (0);
                u6 = c5 + 8 | 0;
                v4 = b[u6 >> 2] | 0;
                b[v4 + 12 >> 2] = j2;
                b[u6 >> 2] = j2;
                b[j2 + 8 >> 2] = v4;
                b[j2 + 12 >> 2] = c5;
                b[j2 + 24 >> 2] = 0;
              }
            } else {
              v4 = b[6981] | 0;
              if ((v4 | 0) == 0 | g3 >>> 0 < v4 >>> 0) {
                b[6981] = g3;
              }
              b[7089] = g3;
              b[7090] = h2;
              b[7092] = 0;
              b[6986] = b[7095];
              b[6985] = -1;
              b[6990] = 27948;
              b[6989] = 27948;
              b[6992] = 27956;
              b[6991] = 27956;
              b[6994] = 27964;
              b[6993] = 27964;
              b[6996] = 27972;
              b[6995] = 27972;
              b[6998] = 27980;
              b[6997] = 27980;
              b[7e3] = 27988;
              b[6999] = 27988;
              b[7002] = 27996;
              b[7001] = 27996;
              b[7004] = 28004;
              b[7003] = 28004;
              b[7006] = 28012;
              b[7005] = 28012;
              b[7008] = 28020;
              b[7007] = 28020;
              b[7010] = 28028;
              b[7009] = 28028;
              b[7012] = 28036;
              b[7011] = 28036;
              b[7014] = 28044;
              b[7013] = 28044;
              b[7016] = 28052;
              b[7015] = 28052;
              b[7018] = 28060;
              b[7017] = 28060;
              b[7020] = 28068;
              b[7019] = 28068;
              b[7022] = 28076;
              b[7021] = 28076;
              b[7024] = 28084;
              b[7023] = 28084;
              b[7026] = 28092;
              b[7025] = 28092;
              b[7028] = 28100;
              b[7027] = 28100;
              b[7030] = 28108;
              b[7029] = 28108;
              b[7032] = 28116;
              b[7031] = 28116;
              b[7034] = 28124;
              b[7033] = 28124;
              b[7036] = 28132;
              b[7035] = 28132;
              b[7038] = 28140;
              b[7037] = 28140;
              b[7040] = 28148;
              b[7039] = 28148;
              b[7042] = 28156;
              b[7041] = 28156;
              b[7044] = 28164;
              b[7043] = 28164;
              b[7046] = 28172;
              b[7045] = 28172;
              b[7048] = 28180;
              b[7047] = 28180;
              b[7050] = 28188;
              b[7049] = 28188;
              b[7052] = 28196;
              b[7051] = 28196;
              v4 = h2 + -40 | 0;
              t5 = g3 + 8 | 0;
              t5 = (t5 & 7 | 0) == 0 ? 0 : 0 - t5 & 7;
              u6 = g3 + t5 | 0;
              t5 = v4 - t5 | 0;
              b[6983] = u6;
              b[6980] = t5;
              b[u6 + 4 >> 2] = t5 | 1;
              b[g3 + v4 + 4 >> 2] = 40;
              b[6984] = b[7099];
            }
          } while (0);
          c5 = b[6980] | 0;
          if (c5 >>> 0 > m2 >>> 0) {
            t5 = c5 - m2 | 0;
            b[6980] = t5;
            v4 = b[6983] | 0;
            u6 = v4 + m2 | 0;
            b[6983] = u6;
            b[u6 + 4 >> 2] = t5 | 1;
            b[v4 + 4 >> 2] = m2 | 3;
            v4 = v4 + 8 | 0;
            T2 = w5;
            return v4 | 0;
          }
        }
        v4 = zd() | 0;
        b[v4 >> 2] = 12;
        v4 = 0;
        T2 = w5;
        return v4 | 0;
      }
      function Cd(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        if (!a3) {
          return;
        }
        d3 = a3 + -8 | 0;
        f3 = b[6981] | 0;
        a3 = b[a3 + -4 >> 2] | 0;
        c5 = a3 & -8;
        j2 = d3 + c5 | 0;
        do {
          if (!(a3 & 1)) {
            e4 = b[d3 >> 2] | 0;
            if (!(a3 & 3)) {
              return;
            }
            h2 = d3 + (0 - e4) | 0;
            g3 = e4 + c5 | 0;
            if (h2 >>> 0 < f3 >>> 0) {
              return;
            }
            if ((b[6982] | 0) == (h2 | 0)) {
              a3 = j2 + 4 | 0;
              c5 = b[a3 >> 2] | 0;
              if ((c5 & 3 | 0) != 3) {
                i2 = h2;
                c5 = g3;
                break;
              }
              b[6979] = g3;
              b[a3 >> 2] = c5 & -2;
              b[h2 + 4 >> 2] = g3 | 1;
              b[h2 + g3 >> 2] = g3;
              return;
            }
            d3 = e4 >>> 3;
            if (e4 >>> 0 < 256) {
              a3 = b[h2 + 8 >> 2] | 0;
              c5 = b[h2 + 12 >> 2] | 0;
              if ((c5 | 0) == (a3 | 0)) {
                b[6977] = b[6977] & ~(1 << d3);
                i2 = h2;
                c5 = g3;
                break;
              } else {
                b[a3 + 12 >> 2] = c5;
                b[c5 + 8 >> 2] = a3;
                i2 = h2;
                c5 = g3;
                break;
              }
            }
            f3 = b[h2 + 24 >> 2] | 0;
            a3 = b[h2 + 12 >> 2] | 0;
            do {
              if ((a3 | 0) == (h2 | 0)) {
                c5 = h2 + 16 | 0;
                d3 = c5 + 4 | 0;
                a3 = b[d3 >> 2] | 0;
                if (!a3) {
                  a3 = b[c5 >> 2] | 0;
                  if (!a3) {
                    a3 = 0;
                    break;
                  }
                } else {
                  c5 = d3;
                }
                while (1) {
                  e4 = a3 + 20 | 0;
                  d3 = b[e4 >> 2] | 0;
                  if (!d3) {
                    e4 = a3 + 16 | 0;
                    d3 = b[e4 >> 2] | 0;
                    if (!d3) {
                      break;
                    } else {
                      a3 = d3;
                      c5 = e4;
                    }
                  } else {
                    a3 = d3;
                    c5 = e4;
                  }
                }
                b[c5 >> 2] = 0;
              } else {
                i2 = b[h2 + 8 >> 2] | 0;
                b[i2 + 12 >> 2] = a3;
                b[a3 + 8 >> 2] = i2;
              }
            } while (0);
            if (f3) {
              c5 = b[h2 + 28 >> 2] | 0;
              d3 = 28212 + (c5 << 2) | 0;
              if ((b[d3 >> 2] | 0) == (h2 | 0)) {
                b[d3 >> 2] = a3;
                if (!a3) {
                  b[6978] = b[6978] & ~(1 << c5);
                  i2 = h2;
                  c5 = g3;
                  break;
                }
              } else {
                i2 = f3 + 16 | 0;
                b[((b[i2 >> 2] | 0) == (h2 | 0) ? i2 : f3 + 20 | 0) >> 2] = a3;
                if (!a3) {
                  i2 = h2;
                  c5 = g3;
                  break;
                }
              }
              b[a3 + 24 >> 2] = f3;
              c5 = h2 + 16 | 0;
              d3 = b[c5 >> 2] | 0;
              if (d3 | 0) {
                b[a3 + 16 >> 2] = d3;
                b[d3 + 24 >> 2] = a3;
              }
              c5 = b[c5 + 4 >> 2] | 0;
              if (c5) {
                b[a3 + 20 >> 2] = c5;
                b[c5 + 24 >> 2] = a3;
                i2 = h2;
                c5 = g3;
              } else {
                i2 = h2;
                c5 = g3;
              }
            } else {
              i2 = h2;
              c5 = g3;
            }
          } else {
            i2 = d3;
            h2 = d3;
          }
        } while (0);
        if (h2 >>> 0 >= j2 >>> 0) {
          return;
        }
        a3 = j2 + 4 | 0;
        e4 = b[a3 >> 2] | 0;
        if (!(e4 & 1)) {
          return;
        }
        if (!(e4 & 2)) {
          if ((b[6983] | 0) == (j2 | 0)) {
            j2 = (b[6980] | 0) + c5 | 0;
            b[6980] = j2;
            b[6983] = i2;
            b[i2 + 4 >> 2] = j2 | 1;
            if ((i2 | 0) != (b[6982] | 0)) {
              return;
            }
            b[6982] = 0;
            b[6979] = 0;
            return;
          }
          if ((b[6982] | 0) == (j2 | 0)) {
            j2 = (b[6979] | 0) + c5 | 0;
            b[6979] = j2;
            b[6982] = h2;
            b[i2 + 4 >> 2] = j2 | 1;
            b[h2 + j2 >> 2] = j2;
            return;
          }
          f3 = (e4 & -8) + c5 | 0;
          d3 = e4 >>> 3;
          do {
            if (e4 >>> 0 < 256) {
              c5 = b[j2 + 8 >> 2] | 0;
              a3 = b[j2 + 12 >> 2] | 0;
              if ((a3 | 0) == (c5 | 0)) {
                b[6977] = b[6977] & ~(1 << d3);
                break;
              } else {
                b[c5 + 12 >> 2] = a3;
                b[a3 + 8 >> 2] = c5;
                break;
              }
            } else {
              g3 = b[j2 + 24 >> 2] | 0;
              a3 = b[j2 + 12 >> 2] | 0;
              do {
                if ((a3 | 0) == (j2 | 0)) {
                  c5 = j2 + 16 | 0;
                  d3 = c5 + 4 | 0;
                  a3 = b[d3 >> 2] | 0;
                  if (!a3) {
                    a3 = b[c5 >> 2] | 0;
                    if (!a3) {
                      d3 = 0;
                      break;
                    }
                  } else {
                    c5 = d3;
                  }
                  while (1) {
                    e4 = a3 + 20 | 0;
                    d3 = b[e4 >> 2] | 0;
                    if (!d3) {
                      e4 = a3 + 16 | 0;
                      d3 = b[e4 >> 2] | 0;
                      if (!d3) {
                        break;
                      } else {
                        a3 = d3;
                        c5 = e4;
                      }
                    } else {
                      a3 = d3;
                      c5 = e4;
                    }
                  }
                  b[c5 >> 2] = 0;
                  d3 = a3;
                } else {
                  d3 = b[j2 + 8 >> 2] | 0;
                  b[d3 + 12 >> 2] = a3;
                  b[a3 + 8 >> 2] = d3;
                  d3 = a3;
                }
              } while (0);
              if (g3 | 0) {
                a3 = b[j2 + 28 >> 2] | 0;
                c5 = 28212 + (a3 << 2) | 0;
                if ((b[c5 >> 2] | 0) == (j2 | 0)) {
                  b[c5 >> 2] = d3;
                  if (!d3) {
                    b[6978] = b[6978] & ~(1 << a3);
                    break;
                  }
                } else {
                  e4 = g3 + 16 | 0;
                  b[((b[e4 >> 2] | 0) == (j2 | 0) ? e4 : g3 + 20 | 0) >> 2] = d3;
                  if (!d3) {
                    break;
                  }
                }
                b[d3 + 24 >> 2] = g3;
                a3 = j2 + 16 | 0;
                c5 = b[a3 >> 2] | 0;
                if (c5 | 0) {
                  b[d3 + 16 >> 2] = c5;
                  b[c5 + 24 >> 2] = d3;
                }
                a3 = b[a3 + 4 >> 2] | 0;
                if (a3 | 0) {
                  b[d3 + 20 >> 2] = a3;
                  b[a3 + 24 >> 2] = d3;
                }
              }
            }
          } while (0);
          b[i2 + 4 >> 2] = f3 | 1;
          b[h2 + f3 >> 2] = f3;
          if ((i2 | 0) == (b[6982] | 0)) {
            b[6979] = f3;
            return;
          }
        } else {
          b[a3 >> 2] = e4 & -2;
          b[i2 + 4 >> 2] = c5 | 1;
          b[h2 + c5 >> 2] = c5;
          f3 = c5;
        }
        a3 = f3 >>> 3;
        if (f3 >>> 0 < 256) {
          d3 = 27948 + (a3 << 1 << 2) | 0;
          c5 = b[6977] | 0;
          a3 = 1 << a3;
          if (!(c5 & a3)) {
            b[6977] = c5 | a3;
            a3 = d3;
            c5 = d3 + 8 | 0;
          } else {
            c5 = d3 + 8 | 0;
            a3 = b[c5 >> 2] | 0;
          }
          b[c5 >> 2] = i2;
          b[a3 + 12 >> 2] = i2;
          b[i2 + 8 >> 2] = a3;
          b[i2 + 12 >> 2] = d3;
          return;
        }
        a3 = f3 >>> 8;
        if (a3) {
          if (f3 >>> 0 > 16777215) {
            e4 = 31;
          } else {
            h2 = (a3 + 1048320 | 0) >>> 16 & 8;
            j2 = a3 << h2;
            g3 = (j2 + 520192 | 0) >>> 16 & 4;
            j2 = j2 << g3;
            e4 = (j2 + 245760 | 0) >>> 16 & 2;
            e4 = 14 - (g3 | h2 | e4) + (j2 << e4 >>> 15) | 0;
            e4 = f3 >>> (e4 + 7 | 0) & 1 | e4 << 1;
          }
        } else {
          e4 = 0;
        }
        a3 = 28212 + (e4 << 2) | 0;
        b[i2 + 28 >> 2] = e4;
        b[i2 + 20 >> 2] = 0;
        b[i2 + 16 >> 2] = 0;
        c5 = b[6978] | 0;
        d3 = 1 << e4;
        a: do {
          if (!(c5 & d3)) {
            b[6978] = c5 | d3;
            b[a3 >> 2] = i2;
            b[i2 + 24 >> 2] = a3;
            b[i2 + 12 >> 2] = i2;
            b[i2 + 8 >> 2] = i2;
          } else {
            a3 = b[a3 >> 2] | 0;
            b: do {
              if ((b[a3 + 4 >> 2] & -8 | 0) != (f3 | 0)) {
                e4 = f3 << ((e4 | 0) == 31 ? 0 : 25 - (e4 >>> 1) | 0);
                while (1) {
                  d3 = a3 + 16 + (e4 >>> 31 << 2) | 0;
                  c5 = b[d3 >> 2] | 0;
                  if (!c5) {
                    break;
                  }
                  if ((b[c5 + 4 >> 2] & -8 | 0) == (f3 | 0)) {
                    a3 = c5;
                    break b;
                  } else {
                    e4 = e4 << 1;
                    a3 = c5;
                  }
                }
                b[d3 >> 2] = i2;
                b[i2 + 24 >> 2] = a3;
                b[i2 + 12 >> 2] = i2;
                b[i2 + 8 >> 2] = i2;
                break a;
              }
            } while (0);
            h2 = a3 + 8 | 0;
            j2 = b[h2 >> 2] | 0;
            b[j2 + 12 >> 2] = i2;
            b[h2 >> 2] = i2;
            b[i2 + 8 >> 2] = j2;
            b[i2 + 12 >> 2] = a3;
            b[i2 + 24 >> 2] = 0;
          }
        } while (0);
        j2 = (b[6985] | 0) + -1 | 0;
        b[6985] = j2;
        if (j2 | 0) {
          return;
        }
        a3 = 28364;
        while (1) {
          a3 = b[a3 >> 2] | 0;
          if (!a3) {
            break;
          } else {
            a3 = a3 + 8 | 0;
          }
        }
        b[6985] = -1;
        return;
      }
      function Dd(a3, c5) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        var d3 = 0;
        if (a3) {
          d3 = B4(c5, a3) | 0;
          if ((c5 | a3) >>> 0 > 65535) {
            d3 = ((d3 >>> 0) / (a3 >>> 0) | 0 | 0) == (c5 | 0) ? d3 : -1;
          }
        } else {
          d3 = 0;
        }
        a3 = Bd(d3) | 0;
        if (!a3) {
          return a3 | 0;
        }
        if (!(b[a3 + -4 >> 2] & 3)) {
          return a3 | 0;
        }
        Vd(a3 | 0, 0, d3 | 0) | 0;
        return a3 | 0;
      }
      function Ed(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        c5 = a3 + c5 >>> 0;
        return (G2(b2 + d3 + (c5 >>> 0 < a3 >>> 0 | 0) >>> 0 | 0), c5 | 0) | 0;
      }
      function Fd(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        d3 = b2 - d3 - (c5 >>> 0 > a3 >>> 0 | 0) >>> 0;
        return (G2(d3 | 0), a3 - c5 >>> 0 | 0) | 0;
      }
      function Gd(a3) {
        a3 = a3 | 0;
        return (a3 ? 31 - (E3(a3 ^ a3 - 1) | 0) | 0 : 32) | 0;
      }
      function Hd(a3, c5, d3, e4, f3) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        f3 = f3 | 0;
        var g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0, l2 = 0, m2 = 0, n2 = 0, o2 = 0, p3 = 0;
        l2 = a3;
        j2 = c5;
        k2 = j2;
        h2 = d3;
        n2 = e4;
        i2 = n2;
        if (!k2) {
          g3 = (f3 | 0) != 0;
          if (!i2) {
            if (g3) {
              b[f3 >> 2] = (l2 >>> 0) % (h2 >>> 0);
              b[f3 + 4 >> 2] = 0;
            }
            n2 = 0;
            f3 = (l2 >>> 0) / (h2 >>> 0) >>> 0;
            return (G2(n2 | 0), f3) | 0;
          } else {
            if (!g3) {
              n2 = 0;
              f3 = 0;
              return (G2(n2 | 0), f3) | 0;
            }
            b[f3 >> 2] = a3 | 0;
            b[f3 + 4 >> 2] = c5 & 0;
            n2 = 0;
            f3 = 0;
            return (G2(n2 | 0), f3) | 0;
          }
        }
        g3 = (i2 | 0) == 0;
        do {
          if (h2) {
            if (!g3) {
              g3 = (E3(i2 | 0) | 0) - (E3(k2 | 0) | 0) | 0;
              if (g3 >>> 0 <= 31) {
                m2 = g3 + 1 | 0;
                i2 = 31 - g3 | 0;
                c5 = g3 - 31 >> 31;
                h2 = m2;
                a3 = l2 >>> (m2 >>> 0) & c5 | k2 << i2;
                c5 = k2 >>> (m2 >>> 0) & c5;
                g3 = 0;
                i2 = l2 << i2;
                break;
              }
              if (!f3) {
                n2 = 0;
                f3 = 0;
                return (G2(n2 | 0), f3) | 0;
              }
              b[f3 >> 2] = a3 | 0;
              b[f3 + 4 >> 2] = j2 | c5 & 0;
              n2 = 0;
              f3 = 0;
              return (G2(n2 | 0), f3) | 0;
            }
            g3 = h2 - 1 | 0;
            if (g3 & h2 | 0) {
              i2 = (E3(h2 | 0) | 0) + 33 - (E3(k2 | 0) | 0) | 0;
              p3 = 64 - i2 | 0;
              m2 = 32 - i2 | 0;
              j2 = m2 >> 31;
              o2 = i2 - 32 | 0;
              c5 = o2 >> 31;
              h2 = i2;
              a3 = m2 - 1 >> 31 & k2 >>> (o2 >>> 0) | (k2 << m2 | l2 >>> (i2 >>> 0)) & c5;
              c5 = c5 & k2 >>> (i2 >>> 0);
              g3 = l2 << p3 & j2;
              i2 = (k2 << p3 | l2 >>> (o2 >>> 0)) & j2 | l2 << m2 & i2 - 33 >> 31;
              break;
            }
            if (f3 | 0) {
              b[f3 >> 2] = g3 & l2;
              b[f3 + 4 >> 2] = 0;
            }
            if ((h2 | 0) == 1) {
              o2 = j2 | c5 & 0;
              p3 = a3 | 0 | 0;
              return (G2(o2 | 0), p3) | 0;
            } else {
              p3 = Gd(h2 | 0) | 0;
              o2 = k2 >>> (p3 >>> 0) | 0;
              p3 = k2 << 32 - p3 | l2 >>> (p3 >>> 0) | 0;
              return (G2(o2 | 0), p3) | 0;
            }
          } else {
            if (g3) {
              if (f3 | 0) {
                b[f3 >> 2] = (k2 >>> 0) % (h2 >>> 0);
                b[f3 + 4 >> 2] = 0;
              }
              o2 = 0;
              p3 = (k2 >>> 0) / (h2 >>> 0) >>> 0;
              return (G2(o2 | 0), p3) | 0;
            }
            if (!l2) {
              if (f3 | 0) {
                b[f3 >> 2] = 0;
                b[f3 + 4 >> 2] = (k2 >>> 0) % (i2 >>> 0);
              }
              o2 = 0;
              p3 = (k2 >>> 0) / (i2 >>> 0) >>> 0;
              return (G2(o2 | 0), p3) | 0;
            }
            g3 = i2 - 1 | 0;
            if (!(g3 & i2)) {
              if (f3 | 0) {
                b[f3 >> 2] = a3 | 0;
                b[f3 + 4 >> 2] = g3 & k2 | c5 & 0;
              }
              o2 = 0;
              p3 = k2 >>> ((Gd(i2 | 0) | 0) >>> 0);
              return (G2(o2 | 0), p3) | 0;
            }
            g3 = (E3(i2 | 0) | 0) - (E3(k2 | 0) | 0) | 0;
            if (g3 >>> 0 <= 30) {
              c5 = g3 + 1 | 0;
              i2 = 31 - g3 | 0;
              h2 = c5;
              a3 = k2 << i2 | l2 >>> (c5 >>> 0);
              c5 = k2 >>> (c5 >>> 0);
              g3 = 0;
              i2 = l2 << i2;
              break;
            }
            if (!f3) {
              o2 = 0;
              p3 = 0;
              return (G2(o2 | 0), p3) | 0;
            }
            b[f3 >> 2] = a3 | 0;
            b[f3 + 4 >> 2] = j2 | c5 & 0;
            o2 = 0;
            p3 = 0;
            return (G2(o2 | 0), p3) | 0;
          }
        } while (0);
        if (!h2) {
          k2 = i2;
          j2 = 0;
          i2 = 0;
        } else {
          m2 = d3 | 0 | 0;
          l2 = n2 | e4 & 0;
          k2 = Ed(m2 | 0, l2 | 0, -1, -1) | 0;
          d3 = H() | 0;
          j2 = i2;
          i2 = 0;
          do {
            e4 = j2;
            j2 = g3 >>> 31 | j2 << 1;
            g3 = i2 | g3 << 1;
            e4 = a3 << 1 | e4 >>> 31 | 0;
            n2 = a3 >>> 31 | c5 << 1 | 0;
            Fd(k2 | 0, d3 | 0, e4 | 0, n2 | 0) | 0;
            p3 = H() | 0;
            o2 = p3 >> 31 | ((p3 | 0) < 0 ? -1 : 0) << 1;
            i2 = o2 & 1;
            a3 = Fd(e4 | 0, n2 | 0, o2 & m2 | 0, (((p3 | 0) < 0 ? -1 : 0) >> 31 | ((p3 | 0) < 0 ? -1 : 0) << 1) & l2 | 0) | 0;
            c5 = H() | 0;
            h2 = h2 - 1 | 0;
          } while ((h2 | 0) != 0);
          k2 = j2;
          j2 = 0;
        }
        h2 = 0;
        if (f3 | 0) {
          b[f3 >> 2] = a3;
          b[f3 + 4 >> 2] = c5;
        }
        o2 = (g3 | 0) >>> 31 | (k2 | h2) << 1 | (h2 << 1 | g3 >>> 31) & 0 | j2;
        p3 = (g3 << 1 | 0 >>> 31) & -2 | i2;
        return (G2(o2 | 0), p3) | 0;
      }
      function Id(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0;
        j2 = b2 >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
        i2 = ((b2 | 0) < 0 ? -1 : 0) >> 31 | ((b2 | 0) < 0 ? -1 : 0) << 1;
        f3 = d3 >> 31 | ((d3 | 0) < 0 ? -1 : 0) << 1;
        e4 = ((d3 | 0) < 0 ? -1 : 0) >> 31 | ((d3 | 0) < 0 ? -1 : 0) << 1;
        h2 = Fd(j2 ^ a3 | 0, i2 ^ b2 | 0, j2 | 0, i2 | 0) | 0;
        g3 = H() | 0;
        a3 = f3 ^ j2;
        b2 = e4 ^ i2;
        return Fd((Hd(h2, g3, Fd(f3 ^ c5 | 0, e4 ^ d3 | 0, f3 | 0, e4 | 0) | 0, H() | 0, 0) | 0) ^ a3 | 0, (H() | 0) ^ b2 | 0, a3 | 0, b2 | 0) | 0;
      }
      function Jd(a3, b2) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        var c5 = 0, d3 = 0, e4 = 0, f3 = 0;
        f3 = a3 & 65535;
        e4 = b2 & 65535;
        c5 = B4(e4, f3) | 0;
        d3 = a3 >>> 16;
        a3 = (c5 >>> 16) + (B4(e4, d3) | 0) | 0;
        e4 = b2 >>> 16;
        b2 = B4(e4, f3) | 0;
        return (G2((a3 >>> 16) + (B4(e4, d3) | 0) + (((a3 & 65535) + b2 | 0) >>> 16) | 0), a3 + b2 << 16 | c5 & 65535 | 0) | 0;
      }
      function Kd(a3, b2, c5, d3) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        var e4 = 0, f3 = 0;
        e4 = a3;
        f3 = c5;
        c5 = Jd(e4, f3) | 0;
        a3 = H() | 0;
        return (G2((B4(b2, f3) | 0) + (B4(d3, e4) | 0) + a3 | a3 & 0 | 0), c5 | 0 | 0) | 0;
      }
      function Ld(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0, j2 = 0, k2 = 0;
        f3 = T2;
        T2 = T2 + 16 | 0;
        i2 = f3 | 0;
        h2 = c5 >> 31 | ((c5 | 0) < 0 ? -1 : 0) << 1;
        g3 = ((c5 | 0) < 0 ? -1 : 0) >> 31 | ((c5 | 0) < 0 ? -1 : 0) << 1;
        k2 = e4 >> 31 | ((e4 | 0) < 0 ? -1 : 0) << 1;
        j2 = ((e4 | 0) < 0 ? -1 : 0) >> 31 | ((e4 | 0) < 0 ? -1 : 0) << 1;
        a3 = Fd(h2 ^ a3 | 0, g3 ^ c5 | 0, h2 | 0, g3 | 0) | 0;
        c5 = H() | 0;
        Hd(a3, c5, Fd(k2 ^ d3 | 0, j2 ^ e4 | 0, k2 | 0, j2 | 0) | 0, H() | 0, i2) | 0;
        e4 = Fd(b[i2 >> 2] ^ h2 | 0, b[i2 + 4 >> 2] ^ g3 | 0, h2 | 0, g3 | 0) | 0;
        d3 = H() | 0;
        T2 = f3;
        return (G2(d3 | 0), e4) | 0;
      }
      function Md(a3, c5, d3, e4) {
        a3 = a3 | 0;
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0;
        g3 = T2;
        T2 = T2 + 16 | 0;
        f3 = g3 | 0;
        Hd(a3, c5, d3, e4, f3) | 0;
        T2 = g3;
        return (G2(b[f3 + 4 >> 2] | 0), b[f3 >> 2] | 0) | 0;
      }
      function Nd(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        if ((c5 | 0) < 32) {
          G2(b2 >> c5 | 0);
          return a3 >>> c5 | (b2 & (1 << c5) - 1) << 32 - c5;
        }
        G2(((b2 | 0) < 0 ? -1 : 0) | 0);
        return b2 >> c5 - 32 | 0;
      }
      function Od(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        if ((c5 | 0) < 32) {
          G2(b2 >>> c5 | 0);
          return a3 >>> c5 | (b2 & (1 << c5) - 1) << 32 - c5;
        }
        G2(0);
        return b2 >>> c5 - 32 | 0;
      }
      function Pd(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        if ((c5 | 0) < 32) {
          G2(b2 << c5 | (a3 & (1 << c5) - 1 << 32 - c5) >>> 32 - c5 | 0);
          return a3 << c5;
        }
        G2(a3 << c5 - 32 | 0);
        return 0;
      }
      function Qd(a3, b2, c5) {
        a3 = a3 | 0;
        b2 = b2 | 0;
        c5 = c5 | 0;
        b2 = E3(b2) | 0;
        if ((b2 | 0) == 32) {
          b2 = b2 + (E3(a3) | 0) | 0;
        }
        G2(0);
        return b2 | 0;
      }
      function Rd(a3, b2) {
        a3 = +a3;
        b2 = +b2;
        if (a3 != a3) {
          return +b2;
        }
        if (b2 != b2) {
          return +a3;
        }
        return +D4(+a3, +b2);
      }
      function Sd(a3, b2) {
        a3 = +a3;
        b2 = +b2;
        if (a3 != a3) {
          return +b2;
        }
        if (b2 != b2) {
          return +a3;
        }
        return +C4(+a3, +b2);
      }
      function Td(a3) {
        a3 = +a3;
        return a3 >= 0 ? +p2(a3 + 0.5) : +A6(a3 - 0.5);
      }
      function Ud(c5, d3, e4) {
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0;
        if ((e4 | 0) >= 8192) {
          L2(c5 | 0, d3 | 0, e4 | 0) | 0;
          return c5 | 0;
        }
        h2 = c5 | 0;
        g3 = c5 + e4 | 0;
        if ((c5 & 3) == (d3 & 3)) {
          while (c5 & 3) {
            if (!e4) {
              return h2 | 0;
            }
            a2[c5 >> 0] = a2[d3 >> 0] | 0;
            c5 = c5 + 1 | 0;
            d3 = d3 + 1 | 0;
            e4 = e4 - 1 | 0;
          }
          e4 = g3 & -4 | 0;
          f3 = e4 - 64 | 0;
          while ((c5 | 0) <= (f3 | 0)) {
            b[c5 >> 2] = b[d3 >> 2];
            b[c5 + 4 >> 2] = b[d3 + 4 >> 2];
            b[c5 + 8 >> 2] = b[d3 + 8 >> 2];
            b[c5 + 12 >> 2] = b[d3 + 12 >> 2];
            b[c5 + 16 >> 2] = b[d3 + 16 >> 2];
            b[c5 + 20 >> 2] = b[d3 + 20 >> 2];
            b[c5 + 24 >> 2] = b[d3 + 24 >> 2];
            b[c5 + 28 >> 2] = b[d3 + 28 >> 2];
            b[c5 + 32 >> 2] = b[d3 + 32 >> 2];
            b[c5 + 36 >> 2] = b[d3 + 36 >> 2];
            b[c5 + 40 >> 2] = b[d3 + 40 >> 2];
            b[c5 + 44 >> 2] = b[d3 + 44 >> 2];
            b[c5 + 48 >> 2] = b[d3 + 48 >> 2];
            b[c5 + 52 >> 2] = b[d3 + 52 >> 2];
            b[c5 + 56 >> 2] = b[d3 + 56 >> 2];
            b[c5 + 60 >> 2] = b[d3 + 60 >> 2];
            c5 = c5 + 64 | 0;
            d3 = d3 + 64 | 0;
          }
          while ((c5 | 0) < (e4 | 0)) {
            b[c5 >> 2] = b[d3 >> 2];
            c5 = c5 + 4 | 0;
            d3 = d3 + 4 | 0;
          }
        } else {
          e4 = g3 - 4 | 0;
          while ((c5 | 0) < (e4 | 0)) {
            a2[c5 >> 0] = a2[d3 >> 0] | 0;
            a2[c5 + 1 >> 0] = a2[d3 + 1 >> 0] | 0;
            a2[c5 + 2 >> 0] = a2[d3 + 2 >> 0] | 0;
            a2[c5 + 3 >> 0] = a2[d3 + 3 >> 0] | 0;
            c5 = c5 + 4 | 0;
            d3 = d3 + 4 | 0;
          }
        }
        while ((c5 | 0) < (g3 | 0)) {
          a2[c5 >> 0] = a2[d3 >> 0] | 0;
          c5 = c5 + 1 | 0;
          d3 = d3 + 1 | 0;
        }
        return h2 | 0;
      }
      function Vd(c5, d3, e4) {
        c5 = c5 | 0;
        d3 = d3 | 0;
        e4 = e4 | 0;
        var f3 = 0, g3 = 0, h2 = 0, i2 = 0;
        h2 = c5 + e4 | 0;
        d3 = d3 & 255;
        if ((e4 | 0) >= 67) {
          while (c5 & 3) {
            a2[c5 >> 0] = d3;
            c5 = c5 + 1 | 0;
          }
          f3 = h2 & -4 | 0;
          i2 = d3 | d3 << 8 | d3 << 16 | d3 << 24;
          g3 = f3 - 64 | 0;
          while ((c5 | 0) <= (g3 | 0)) {
            b[c5 >> 2] = i2;
            b[c5 + 4 >> 2] = i2;
            b[c5 + 8 >> 2] = i2;
            b[c5 + 12 >> 2] = i2;
            b[c5 + 16 >> 2] = i2;
            b[c5 + 20 >> 2] = i2;
            b[c5 + 24 >> 2] = i2;
            b[c5 + 28 >> 2] = i2;
            b[c5 + 32 >> 2] = i2;
            b[c5 + 36 >> 2] = i2;
            b[c5 + 40 >> 2] = i2;
            b[c5 + 44 >> 2] = i2;
            b[c5 + 48 >> 2] = i2;
            b[c5 + 52 >> 2] = i2;
            b[c5 + 56 >> 2] = i2;
            b[c5 + 60 >> 2] = i2;
            c5 = c5 + 64 | 0;
          }
          while ((c5 | 0) < (f3 | 0)) {
            b[c5 >> 2] = i2;
            c5 = c5 + 4 | 0;
          }
        }
        while ((c5 | 0) < (h2 | 0)) {
          a2[c5 >> 0] = d3;
          c5 = c5 + 1 | 0;
        }
        return h2 - e4 | 0;
      }
      function Wd(a3) {
        a3 = +a3;
        return a3 >= 0 ? +p2(a3 + 0.5) : +A6(a3 - 0.5);
      }
      function Xd(a3) {
        a3 = a3 | 0;
        var c5 = 0, d3 = 0, e4 = 0;
        e4 = K3() | 0;
        d3 = b[g2 >> 2] | 0;
        c5 = d3 + a3 | 0;
        if ((a3 | 0) > 0 & (c5 | 0) < (d3 | 0) | (c5 | 0) < 0) {
          N2(c5 | 0) | 0;
          J(12);
          return -1;
        }
        if ((c5 | 0) > (e4 | 0)) {
          if (!(M3(c5 | 0) | 0)) {
            J(12);
            return -1;
          }
        }
        b[g2 >> 2] = c5;
        return d3 | 0;
      }
      return {
        ___divdi3: Id,
        ___muldi3: Kd,
        ___remdi3: Ld,
        ___uremdi3: Md,
        _areNeighborCells: gb,
        _bitshift64Ashr: Nd,
        _bitshift64Lshr: Od,
        _bitshift64Shl: Pd,
        _calloc: Dd,
        _cellAreaKm2: vc,
        _cellAreaM2: wc,
        _cellAreaRads2: uc,
        _cellToBoundary: Yb,
        _cellToCenterChild: Ib,
        _cellToChildPos: bc4,
        _cellToChildren: Gb,
        _cellToChildrenSize: Eb,
        _cellToLatLng: Xb,
        _cellToLocalIj: Hc,
        _cellToParent: Db,
        _cellToVertex: od,
        _cellToVertexes: pd,
        _cellsToDirectedEdge: hb,
        _cellsToLinkedMultiPolygon: la,
        _childPosToCell: cc2,
        _compactCells: Jb,
        _destroyLinkedMultiPolygon: Cc,
        _directedEdgeToBoundary: nb,
        _directedEdgeToCells: lb,
        _edgeLengthKm: yc,
        _edgeLengthM: zc,
        _edgeLengthRads: xc,
        _emscripten_replace_memory: W,
        _free: Cd,
        _getBaseCellNumber: Ab,
        _getDirectedEdgeDestination: jb,
        _getDirectedEdgeOrigin: ib,
        _getHexagonAreaAvgKm2: oc,
        _getHexagonAreaAvgM2: pc,
        _getHexagonEdgeLengthAvgKm: qc,
        _getHexagonEdgeLengthAvgM: rc,
        _getIcosahedronFaces: _b2,
        _getNumCells: sc,
        _getPentagons: ac2,
        _getRes0Cells: wa,
        _getResolution: zb,
        _greatCircleDistanceKm: kc,
        _greatCircleDistanceM: lc,
        _greatCircleDistanceRads: jc,
        _gridDisk: aa2,
        _gridDiskDistances: ba,
        _gridDistance: Jc,
        _gridPathCells: Lc,
        _gridPathCellsSize: Kc,
        _gridRingUnsafe: ga,
        _i64Add: Ed,
        _i64Subtract: Fd,
        _isPentagon: Fb,
        _isResClassIII: Mb,
        _isValidCell: Bb,
        _isValidDirectedEdge: kb,
        _isValidVertex: rd,
        _latLngToCell: Ub,
        _llvm_ctlz_i64: Qd,
        _llvm_maxnum_f64: Rd,
        _llvm_minnum_f64: Sd,
        _llvm_round_f64: Td,
        _localIjToCell: Ic,
        _malloc: Bd,
        _maxFaceCount: Zb,
        _maxGridDiskSize: $2,
        _maxPolygonToCellsSize: ha,
        _maxPolygonToCellsSizeExperimental: Sc,
        _memcpy: Ud,
        _memset: Vd,
        _originToDirectedEdges: mb,
        _pentagonCount: $b,
        _polygonToCells: ja,
        _polygonToCellsExperimental: Rc,
        _readInt64AsDoubleFromPointer: gd,
        _res0CellCount: va,
        _round: Wd,
        _sbrk: Xd,
        _sizeOfCellBoundary: bd2,
        _sizeOfCoordIJ: fd,
        _sizeOfGeoLoop: cd2,
        _sizeOfGeoPolygon: dd,
        _sizeOfH3Index: $c,
        _sizeOfLatLng: ad,
        _sizeOfLinkedGeoPolygon: ed,
        _uncompactCells: Kb,
        _uncompactCellsSize: Lb,
        _vertexToLatLng: qd,
        establishStackSpace: _2,
        stackAlloc: X,
        stackRestore: Z,
        stackSave: Y
      };
    }(asmGlobalArg, asmLibraryArg, buffer2)
  );
  var ___divdi3 = Module["___divdi3"] = asm["___divdi3"];
  var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
  var ___remdi3 = Module["___remdi3"] = asm["___remdi3"];
  var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
  var _areNeighborCells = Module["_areNeighborCells"] = asm["_areNeighborCells"];
  var _bitshift64Ashr = Module["_bitshift64Ashr"] = asm["_bitshift64Ashr"];
  var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
  var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
  var _calloc = Module["_calloc"] = asm["_calloc"];
  var _cellAreaKm2 = Module["_cellAreaKm2"] = asm["_cellAreaKm2"];
  var _cellAreaM2 = Module["_cellAreaM2"] = asm["_cellAreaM2"];
  var _cellAreaRads2 = Module["_cellAreaRads2"] = asm["_cellAreaRads2"];
  var _cellToBoundary = Module["_cellToBoundary"] = asm["_cellToBoundary"];
  var _cellToCenterChild = Module["_cellToCenterChild"] = asm["_cellToCenterChild"];
  var _cellToChildPos = Module["_cellToChildPos"] = asm["_cellToChildPos"];
  var _cellToChildren = Module["_cellToChildren"] = asm["_cellToChildren"];
  var _cellToChildrenSize = Module["_cellToChildrenSize"] = asm["_cellToChildrenSize"];
  var _cellToLatLng = Module["_cellToLatLng"] = asm["_cellToLatLng"];
  var _cellToLocalIj = Module["_cellToLocalIj"] = asm["_cellToLocalIj"];
  var _cellToParent = Module["_cellToParent"] = asm["_cellToParent"];
  var _cellToVertex = Module["_cellToVertex"] = asm["_cellToVertex"];
  var _cellToVertexes = Module["_cellToVertexes"] = asm["_cellToVertexes"];
  var _cellsToDirectedEdge = Module["_cellsToDirectedEdge"] = asm["_cellsToDirectedEdge"];
  var _cellsToLinkedMultiPolygon = Module["_cellsToLinkedMultiPolygon"] = asm["_cellsToLinkedMultiPolygon"];
  var _childPosToCell = Module["_childPosToCell"] = asm["_childPosToCell"];
  var _compactCells = Module["_compactCells"] = asm["_compactCells"];
  var _destroyLinkedMultiPolygon = Module["_destroyLinkedMultiPolygon"] = asm["_destroyLinkedMultiPolygon"];
  var _directedEdgeToBoundary = Module["_directedEdgeToBoundary"] = asm["_directedEdgeToBoundary"];
  var _directedEdgeToCells = Module["_directedEdgeToCells"] = asm["_directedEdgeToCells"];
  var _edgeLengthKm = Module["_edgeLengthKm"] = asm["_edgeLengthKm"];
  var _edgeLengthM = Module["_edgeLengthM"] = asm["_edgeLengthM"];
  var _edgeLengthRads = Module["_edgeLengthRads"] = asm["_edgeLengthRads"];
  var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
  var _free = Module["_free"] = asm["_free"];
  var _getBaseCellNumber = Module["_getBaseCellNumber"] = asm["_getBaseCellNumber"];
  var _getDirectedEdgeDestination = Module["_getDirectedEdgeDestination"] = asm["_getDirectedEdgeDestination"];
  var _getDirectedEdgeOrigin = Module["_getDirectedEdgeOrigin"] = asm["_getDirectedEdgeOrigin"];
  var _getHexagonAreaAvgKm2 = Module["_getHexagonAreaAvgKm2"] = asm["_getHexagonAreaAvgKm2"];
  var _getHexagonAreaAvgM2 = Module["_getHexagonAreaAvgM2"] = asm["_getHexagonAreaAvgM2"];
  var _getHexagonEdgeLengthAvgKm = Module["_getHexagonEdgeLengthAvgKm"] = asm["_getHexagonEdgeLengthAvgKm"];
  var _getHexagonEdgeLengthAvgM = Module["_getHexagonEdgeLengthAvgM"] = asm["_getHexagonEdgeLengthAvgM"];
  var _getIcosahedronFaces = Module["_getIcosahedronFaces"] = asm["_getIcosahedronFaces"];
  var _getNumCells = Module["_getNumCells"] = asm["_getNumCells"];
  var _getPentagons = Module["_getPentagons"] = asm["_getPentagons"];
  var _getRes0Cells = Module["_getRes0Cells"] = asm["_getRes0Cells"];
  var _getResolution = Module["_getResolution"] = asm["_getResolution"];
  var _greatCircleDistanceKm = Module["_greatCircleDistanceKm"] = asm["_greatCircleDistanceKm"];
  var _greatCircleDistanceM = Module["_greatCircleDistanceM"] = asm["_greatCircleDistanceM"];
  var _greatCircleDistanceRads = Module["_greatCircleDistanceRads"] = asm["_greatCircleDistanceRads"];
  var _gridDisk = Module["_gridDisk"] = asm["_gridDisk"];
  var _gridDiskDistances = Module["_gridDiskDistances"] = asm["_gridDiskDistances"];
  var _gridDistance = Module["_gridDistance"] = asm["_gridDistance"];
  var _gridPathCells = Module["_gridPathCells"] = asm["_gridPathCells"];
  var _gridPathCellsSize = Module["_gridPathCellsSize"] = asm["_gridPathCellsSize"];
  var _gridRingUnsafe = Module["_gridRingUnsafe"] = asm["_gridRingUnsafe"];
  var _i64Add = Module["_i64Add"] = asm["_i64Add"];
  var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
  var _isPentagon = Module["_isPentagon"] = asm["_isPentagon"];
  var _isResClassIII = Module["_isResClassIII"] = asm["_isResClassIII"];
  var _isValidCell = Module["_isValidCell"] = asm["_isValidCell"];
  var _isValidDirectedEdge = Module["_isValidDirectedEdge"] = asm["_isValidDirectedEdge"];
  var _isValidVertex = Module["_isValidVertex"] = asm["_isValidVertex"];
  var _latLngToCell = Module["_latLngToCell"] = asm["_latLngToCell"];
  var _llvm_ctlz_i64 = Module["_llvm_ctlz_i64"] = asm["_llvm_ctlz_i64"];
  var _llvm_maxnum_f64 = Module["_llvm_maxnum_f64"] = asm["_llvm_maxnum_f64"];
  var _llvm_minnum_f64 = Module["_llvm_minnum_f64"] = asm["_llvm_minnum_f64"];
  var _llvm_round_f64 = Module["_llvm_round_f64"] = asm["_llvm_round_f64"];
  var _localIjToCell = Module["_localIjToCell"] = asm["_localIjToCell"];
  var _malloc = Module["_malloc"] = asm["_malloc"];
  var _maxFaceCount = Module["_maxFaceCount"] = asm["_maxFaceCount"];
  var _maxGridDiskSize = Module["_maxGridDiskSize"] = asm["_maxGridDiskSize"];
  var _maxPolygonToCellsSize = Module["_maxPolygonToCellsSize"] = asm["_maxPolygonToCellsSize"];
  var _maxPolygonToCellsSizeExperimental = Module["_maxPolygonToCellsSizeExperimental"] = asm["_maxPolygonToCellsSizeExperimental"];
  var _memcpy = Module["_memcpy"] = asm["_memcpy"];
  var _memset = Module["_memset"] = asm["_memset"];
  var _originToDirectedEdges = Module["_originToDirectedEdges"] = asm["_originToDirectedEdges"];
  var _pentagonCount = Module["_pentagonCount"] = asm["_pentagonCount"];
  var _polygonToCells = Module["_polygonToCells"] = asm["_polygonToCells"];
  var _polygonToCellsExperimental = Module["_polygonToCellsExperimental"] = asm["_polygonToCellsExperimental"];
  var _readInt64AsDoubleFromPointer = Module["_readInt64AsDoubleFromPointer"] = asm["_readInt64AsDoubleFromPointer"];
  var _res0CellCount = Module["_res0CellCount"] = asm["_res0CellCount"];
  var _round = Module["_round"] = asm["_round"];
  var _sbrk = Module["_sbrk"] = asm["_sbrk"];
  var _sizeOfCellBoundary = Module["_sizeOfCellBoundary"] = asm["_sizeOfCellBoundary"];
  var _sizeOfCoordIJ = Module["_sizeOfCoordIJ"] = asm["_sizeOfCoordIJ"];
  var _sizeOfGeoLoop = Module["_sizeOfGeoLoop"] = asm["_sizeOfGeoLoop"];
  var _sizeOfGeoPolygon = Module["_sizeOfGeoPolygon"] = asm["_sizeOfGeoPolygon"];
  var _sizeOfH3Index = Module["_sizeOfH3Index"] = asm["_sizeOfH3Index"];
  var _sizeOfLatLng = Module["_sizeOfLatLng"] = asm["_sizeOfLatLng"];
  var _sizeOfLinkedGeoPolygon = Module["_sizeOfLinkedGeoPolygon"] = asm["_sizeOfLinkedGeoPolygon"];
  var _uncompactCells = Module["_uncompactCells"] = asm["_uncompactCells"];
  var _uncompactCellsSize = Module["_uncompactCellsSize"] = asm["_uncompactCellsSize"];
  var _vertexToLatLng = Module["_vertexToLatLng"] = asm["_vertexToLatLng"];
  var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
  var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
  var stackRestore = Module["stackRestore"] = asm["stackRestore"];
  var stackSave = Module["stackSave"] = asm["stackSave"];
  Module["asm"] = asm;
  Module["cwrap"] = cwrap;
  Module["setValue"] = setValue;
  Module["getValue"] = getValue;
  if (memoryInitializer) {
    if (!isDataURI(memoryInitializer)) {
      memoryInitializer = locateFile(memoryInitializer);
    }
    {
      addRunDependency("memory initializer");
      var applyMemoryInitializer = function(data) {
        if (data.byteLength) {
          data = new Uint8Array(data);
        }
        HEAPU8.set(data, GLOBAL_BASE);
        if (Module["memoryInitializerRequest"]) {
          delete Module["memoryInitializerRequest"].response;
        }
        removeRunDependency("memory initializer");
      };
      var doBrowserLoad = function() {
        readAsync(memoryInitializer, applyMemoryInitializer, function() {
          throw "could not load memory initializer " + memoryInitializer;
        });
      };
      var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
      if (memoryInitializerBytes) {
        applyMemoryInitializer(memoryInitializerBytes.buffer);
      } else if (Module["memoryInitializerRequest"]) {
        var useRequest = function() {
          var request = Module["memoryInitializerRequest"];
          var response = request.response;
          if (request.status !== 200 && request.status !== 0) {
            var data = tryParseAsDataURI(Module["memoryInitializerRequestURL"]);
            if (data) {
              response = data.buffer;
            } else {
              console.warn("a problem seems to have happened with Module.memoryInitializerRequest, status: " + request.status + ", retrying " + memoryInitializer);
              doBrowserLoad();
              return;
            }
          }
          applyMemoryInitializer(response);
        };
        if (Module["memoryInitializerRequest"].response) {
          setTimeout(useRequest, 0);
        } else {
          Module["memoryInitializerRequest"].addEventListener("load", useRequest);
        }
      } else {
        doBrowserLoad();
      }
    }
  }
  var calledRun;
  dependenciesFulfilled = function runCaller() {
    if (!calledRun) {
      run();
    }
    if (!calledRun) {
      dependenciesFulfilled = runCaller;
    }
  };
  function run(args) {
    args = args || arguments_;
    if (runDependencies > 0) {
      return;
    }
    preRun();
    if (runDependencies > 0) {
      return;
    }
    function doRun() {
      if (calledRun) {
        return;
      }
      calledRun = true;
      if (ABORT) {
        return;
      }
      initRuntime();
      preMain();
      if (Module["onRuntimeInitialized"]) {
        Module["onRuntimeInitialized"]();
      }
      postRun();
    }
    if (Module["setStatus"]) {
      Module["setStatus"]("Running...");
      setTimeout(function() {
        setTimeout(function() {
          Module["setStatus"]("");
        }, 1);
        doRun();
      }, 1);
    } else {
      doRun();
    }
  }
  Module["run"] = run;
  function abort(what) {
    if (Module["onAbort"]) {
      Module["onAbort"](what);
    }
    what += "";
    out(what);
    err(what);
    ABORT = true;
    throw "abort(" + what + "). Build with -s ASSERTIONS=1 for more info.";
  }
  Module["abort"] = abort;
  if (Module["preInit"]) {
    if (typeof Module["preInit"] == "function") {
      Module["preInit"] = [Module["preInit"]];
    }
    while (Module["preInit"].length > 0) {
      Module["preInit"].pop()();
    }
  }
  run();
  return libh32;
}(typeof libh3 === "object" ? libh3 : {});
var NUMBER = "number";
var H3_ERROR = NUMBER;
var BOOLEAN = NUMBER;
var H3_LOWER = NUMBER;
var H3_UPPER = NUMBER;
var RESOLUTION = NUMBER;
var POINTER = NUMBER;
var BINDINGS = [
  // The size functions are inserted via build/sizes.h
  ["sizeOfH3Index", NUMBER],
  ["sizeOfLatLng", NUMBER],
  ["sizeOfCellBoundary", NUMBER],
  ["sizeOfGeoLoop", NUMBER],
  ["sizeOfGeoPolygon", NUMBER],
  ["sizeOfLinkedGeoPolygon", NUMBER],
  ["sizeOfCoordIJ", NUMBER],
  ["readInt64AsDoubleFromPointer", NUMBER],
  // The remaining functions are defined in the core lib in h3Api.h
  ["isValidCell", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["latLngToCell", H3_ERROR, [NUMBER, NUMBER, RESOLUTION, POINTER]],
  ["cellToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["maxGridDiskSize", H3_ERROR, [NUMBER, POINTER]],
  ["gridDisk", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["gridDiskDistances", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER, POINTER]],
  ["gridRingUnsafe", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["maxPolygonToCellsSize", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["polygonToCells", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["maxPolygonToCellsSizeExperimental", H3_ERROR, [POINTER, RESOLUTION, NUMBER, POINTER]],
  ["polygonToCellsExperimental", H3_ERROR, [POINTER, RESOLUTION, NUMBER, NUMBER, NUMBER, POINTER]],
  ["cellsToLinkedMultiPolygon", H3_ERROR, [POINTER, NUMBER, POINTER]],
  ["destroyLinkedMultiPolygon", null, [POINTER]],
  ["compactCells", H3_ERROR, [POINTER, POINTER, NUMBER, NUMBER]],
  ["uncompactCells", H3_ERROR, [POINTER, NUMBER, NUMBER, POINTER, NUMBER, RESOLUTION]],
  ["uncompactCellsSize", H3_ERROR, [POINTER, NUMBER, NUMBER, RESOLUTION, POINTER]],
  ["isPentagon", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["isResClassIII", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["getBaseCellNumber", NUMBER, [H3_LOWER, H3_UPPER]],
  ["getResolution", NUMBER, [H3_LOWER, H3_UPPER]],
  ["maxFaceCount", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getIcosahedronFaces", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellToParent", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildren", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToCenterChild", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildrenSize", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["cellToChildPos", H3_ERROR, [H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["childPosToCell", H3_ERROR, [NUMBER, NUMBER, H3_LOWER, H3_UPPER, RESOLUTION, POINTER]],
  ["areNeighborCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["cellsToDirectedEdge", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["getDirectedEdgeOrigin", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getDirectedEdgeDestination", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["isValidDirectedEdge", BOOLEAN, [H3_LOWER, H3_UPPER]],
  ["directedEdgeToCells", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["originToDirectedEdges", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["directedEdgeToBoundary", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["gridDistance", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["gridPathCells", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["gridPathCellsSize", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, POINTER]],
  ["cellToLocalIj", H3_ERROR, [H3_LOWER, H3_UPPER, H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["localIjToCell", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER, NUMBER, POINTER]],
  ["getHexagonAreaAvgM2", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonAreaAvgKm2", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonEdgeLengthAvgM", H3_ERROR, [RESOLUTION, POINTER]],
  ["getHexagonEdgeLengthAvgKm", H3_ERROR, [RESOLUTION, POINTER]],
  ["greatCircleDistanceM", NUMBER, [POINTER, POINTER]],
  ["greatCircleDistanceKm", NUMBER, [POINTER, POINTER]],
  ["greatCircleDistanceRads", NUMBER, [POINTER, POINTER]],
  ["cellAreaM2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellAreaKm2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["cellAreaRads2", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthM", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthKm", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["edgeLengthRads", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["getNumCells", H3_ERROR, [RESOLUTION, POINTER]],
  ["getRes0Cells", H3_ERROR, [POINTER]],
  ["res0CellCount", NUMBER],
  ["getPentagons", H3_ERROR, [NUMBER, POINTER]],
  ["pentagonCount", NUMBER],
  ["cellToVertex", H3_ERROR, [H3_LOWER, H3_UPPER, NUMBER, POINTER]],
  ["cellToVertexes", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["vertexToLatLng", H3_ERROR, [H3_LOWER, H3_UPPER, POINTER]],
  ["isValidVertex", BOOLEAN, [H3_LOWER, H3_UPPER]]
];
var E_SUCCESS = 0;
var E_FAILED = 1;
var E_DOMAIN = 2;
var E_LATLNG_DOMAIN = 3;
var E_RES_DOMAIN = 4;
var E_CELL_INVALID = 5;
var E_DIR_EDGE_INVALID = 6;
var E_UNDIR_EDGE_INVALID = 7;
var E_VERTEX_INVALID = 8;
var E_PENTAGON = 9;
var E_DUPLICATE_INPUT = 10;
var E_NOT_NEIGHBORS = 11;
var E_RES_MISMATCH = 12;
var E_MEMORY_ALLOC = 13;
var E_MEMORY_BOUNDS = 14;
var E_OPTION_INVALID = 15;
var H3_ERROR_MSGS = {};
H3_ERROR_MSGS[E_SUCCESS] = "Success";
H3_ERROR_MSGS[E_FAILED] = "The operation failed but a more specific error is not available";
H3_ERROR_MSGS[E_DOMAIN] = "Argument was outside of acceptable range";
H3_ERROR_MSGS[E_LATLNG_DOMAIN] = "Latitude or longitude arguments were outside of acceptable range";
H3_ERROR_MSGS[E_RES_DOMAIN] = "Resolution argument was outside of acceptable range";
H3_ERROR_MSGS[E_CELL_INVALID] = "Cell argument was not valid";
H3_ERROR_MSGS[E_DIR_EDGE_INVALID] = "Directed edge argument was not valid";
H3_ERROR_MSGS[E_UNDIR_EDGE_INVALID] = "Undirected edge argument was not valid";
H3_ERROR_MSGS[E_VERTEX_INVALID] = "Vertex argument was not valid";
H3_ERROR_MSGS[E_PENTAGON] = "Pentagon distortion was encountered";
H3_ERROR_MSGS[E_DUPLICATE_INPUT] = "Duplicate input";
H3_ERROR_MSGS[E_NOT_NEIGHBORS] = "Cell arguments were not neighbors";
H3_ERROR_MSGS[E_RES_MISMATCH] = "Cell arguments had incompatible resolutions";
H3_ERROR_MSGS[E_MEMORY_ALLOC] = "Memory allocation failed";
H3_ERROR_MSGS[E_MEMORY_BOUNDS] = "Bounds of provided memory were insufficient";
H3_ERROR_MSGS[E_OPTION_INVALID] = "Mode or flags argument was not valid";
var E_UNKNOWN_UNIT = 1e3;
var E_ARRAY_LENGTH = 1001;
var E_NULL_INDEX = 1002;
var JS_ERROR_MESSAGES = {};
JS_ERROR_MESSAGES[E_UNKNOWN_UNIT] = "Unknown unit";
JS_ERROR_MESSAGES[E_ARRAY_LENGTH] = "Array length out of bounds";
JS_ERROR_MESSAGES[E_NULL_INDEX] = "Got unexpected null value for H3 index";
var UNKNOWN_ERROR_MSG = "Unknown error";
function createError(messages, errCode, meta) {
  var hasValue = meta && "value" in meta;
  var err = new Error((messages[errCode] || UNKNOWN_ERROR_MSG) + " (code: " + errCode + (hasValue ? ", value: " + meta.value : "") + ")");
  err.code = errCode;
  return err;
}
function H3LibraryError(errCode, value) {
  var meta = arguments.length === 2 ? {
    value
  } : {};
  return createError(H3_ERROR_MSGS, errCode, meta);
}
function JSBindingError(errCode, value) {
  var meta = arguments.length === 2 ? {
    value
  } : {};
  return createError(JS_ERROR_MESSAGES, errCode, meta);
}
function throwIfError(errCode) {
  if (errCode !== 0) {
    throw H3LibraryError(errCode);
  }
}
var H3 = {};
BINDINGS.forEach(function bind(def) {
  H3[def[0]] = libh3.cwrap.apply(libh3, def);
});
var BASE_16 = 16;
var SZ_INT = 4;
var SZ_DBL = 8;
var SZ_INT64 = 8;
var SZ_H3INDEX = H3.sizeOfH3Index();
var SZ_LATLNG = H3.sizeOfLatLng();
var SZ_CELLBOUNDARY = H3.sizeOfCellBoundary();
var SZ_GEOPOLYGON = H3.sizeOfGeoPolygon();
var SZ_GEOLOOP = H3.sizeOfGeoLoop();
var SZ_LINKED_GEOPOLYGON = H3.sizeOfLinkedGeoPolygon();
var SZ_COORDIJ = H3.sizeOfCoordIJ();
function validateRes(res) {
  if (typeof res !== "number" || res < 0 || res > 15 || Math.floor(res) !== res) {
    throw H3LibraryError(E_RES_DOMAIN, res);
  }
  return res;
}
function validateH3Index(h3Index) {
  if (!h3Index) {
    throw JSBindingError(E_NULL_INDEX);
  }
  return h3Index;
}
var MAX_JS_ARRAY_LENGTH = Math.pow(2, 32) - 1;
function validateArrayLength(length2) {
  if (length2 > MAX_JS_ARRAY_LENGTH) {
    throw JSBindingError(E_ARRAY_LENGTH, length2);
  }
  return length2;
}
var INVALID_HEXIDECIMAL_CHAR = /[^0-9a-fA-F]/;
function h3IndexToSplitLong(h3Index) {
  if (Array.isArray(h3Index) && h3Index.length === 2 && Number.isInteger(h3Index[0]) && Number.isInteger(h3Index[1])) {
    return h3Index;
  }
  if (typeof h3Index !== "string" || INVALID_HEXIDECIMAL_CHAR.test(h3Index)) {
    return [0, 0];
  }
  var upper = parseInt(h3Index.substring(0, h3Index.length - 8), BASE_16);
  var lower2 = parseInt(h3Index.substring(h3Index.length - 8), BASE_16);
  return [lower2, upper];
}
function hexFrom32Bit(num) {
  if (num >= 0) {
    return num.toString(BASE_16);
  }
  num = num & 2147483647;
  var tempStr = zeroPad(8, num.toString(BASE_16));
  var topNum = (parseInt(tempStr[0], BASE_16) + 8).toString(BASE_16);
  tempStr = topNum + tempStr.substring(1);
  return tempStr;
}
function splitLongToH3Index(lower2, upper) {
  return hexFrom32Bit(upper) + zeroPad(8, hexFrom32Bit(lower2));
}
function zeroPad(fullLen, numStr) {
  var numZeroes = fullLen - numStr.length;
  var outStr = "";
  for (var i2 = 0; i2 < numZeroes; i2++) {
    outStr += "0";
  }
  outStr = outStr + numStr;
  return outStr;
}
var UPPER_BIT_DIVISOR = Math.pow(2, 32);
function polygonArrayToGeoLoop(polygonArray, geoLoop, isGeoJson) {
  var numVerts = polygonArray.length;
  var geoCoordArray = libh3._calloc(numVerts, SZ_LATLNG);
  var latIndex = isGeoJson ? 1 : 0;
  var lngIndex = isGeoJson ? 0 : 1;
  for (var i2 = 0; i2 < numVerts * 2; i2 += 2) {
    libh3.HEAPF64.set([polygonArray[i2 / 2][latIndex], polygonArray[i2 / 2][lngIndex]].map(degsToRads), geoCoordArray / SZ_DBL + i2);
  }
  libh3.HEAPU32.set([numVerts, geoCoordArray], geoLoop / SZ_INT);
  return geoLoop;
}
function coordinatesToGeoPolygon(coordinates2, isGeoJson) {
  var numHoles = coordinates2.length - 1;
  var geoPolygon = libh3._calloc(SZ_GEOPOLYGON);
  var geoLoopOffset = 0;
  var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
  var holesOffset = numHolesOffset + SZ_INT;
  polygonArrayToGeoLoop(coordinates2[0], geoPolygon + geoLoopOffset, isGeoJson);
  var holes;
  if (numHoles > 0) {
    holes = libh3._calloc(numHoles, SZ_GEOLOOP);
    for (var i2 = 0; i2 < numHoles; i2++) {
      polygonArrayToGeoLoop(coordinates2[i2 + 1], holes + SZ_GEOLOOP * i2, isGeoJson);
    }
  }
  libh3.setValue(geoPolygon + numHolesOffset, numHoles, "i32");
  libh3.setValue(geoPolygon + holesOffset, holes, "i32");
  return geoPolygon;
}
function destroyGeoPolygon(geoPolygon) {
  var geoLoopOffset = 0;
  var numHolesOffset = geoLoopOffset + SZ_GEOLOOP;
  var holesOffset = numHolesOffset + SZ_INT;
  var geoLoopArrayOffset = SZ_INT;
  libh3._free(libh3.getValue(geoPolygon + geoLoopOffset + geoLoopArrayOffset, "i8*"));
  var numHoles = libh3.getValue(geoPolygon + numHolesOffset, "i32");
  if (numHoles > 0) {
    var holes = libh3.getValue(geoPolygon + holesOffset, "i32");
    for (var i2 = 0; i2 < numHoles; i2++) {
      libh3._free(libh3.getValue(holes + SZ_GEOLOOP * i2 + geoLoopArrayOffset, "i8*"));
    }
    libh3._free(holes);
  }
  libh3._free(geoPolygon);
}
function readH3IndexFromPointer(cAddress, offset) {
  if (offset === void 0) offset = 0;
  var lower2 = libh3.getValue(cAddress + SZ_H3INDEX * offset, "i32");
  var upper = libh3.getValue(cAddress + SZ_H3INDEX * offset + SZ_INT, "i32");
  return upper ? splitLongToH3Index(lower2, upper) : null;
}
function readInt64AsDoubleFromPointer(cAddress) {
  return H3.readInt64AsDoubleFromPointer(cAddress);
}
function readArrayOfH3Indexes(cAddress, maxCount) {
  var out = [];
  for (var i2 = 0; i2 < maxCount; i2++) {
    var h3Index = readH3IndexFromPointer(cAddress, i2);
    if (h3Index !== null) {
      out.push(h3Index);
    }
  }
  return out;
}
function readSingleCoord(cAddress) {
  return radsToDegs(libh3.getValue(cAddress, "double"));
}
function readLatLng(cAddress) {
  return [readSingleCoord(cAddress), readSingleCoord(cAddress + SZ_DBL)];
}
function readLatLngGeoJson(cAddress) {
  return [readSingleCoord(cAddress + SZ_DBL), readSingleCoord(cAddress)];
}
function readCellBoundary(cellBoundary, geoJsonCoords, closedLoop) {
  var numVerts = libh3.getValue(cellBoundary, "i32");
  var vertsPos = cellBoundary + SZ_DBL;
  var out = [];
  var readCoord = geoJsonCoords ? readLatLngGeoJson : readLatLng;
  for (var i2 = 0; i2 < numVerts * 2; i2 += 2) {
    out.push(readCoord(vertsPos + SZ_DBL * i2));
  }
  if (closedLoop) {
    out.push(out[0]);
  }
  return out;
}
function latLngToCell(lat, lng, res) {
  var latLng = libh3._malloc(SZ_LATLNG);
  libh3.HEAPF64.set([lat, lng].map(degsToRads), latLng / SZ_DBL);
  var h3Index = libh3._malloc(SZ_H3INDEX);
  try {
    throwIfError(H3.latLngToCell(latLng, res, h3Index));
    return validateH3Index(readH3IndexFromPointer(h3Index));
  } finally {
    libh3._free(h3Index);
    libh3._free(latLng);
  }
}
function cellToLatLng(h3Index) {
  var latLng = libh3._malloc(SZ_LATLNG);
  var ref = h3IndexToSplitLong(h3Index);
  var lower2 = ref[0];
  var upper = ref[1];
  try {
    throwIfError(H3.cellToLatLng(lower2, upper, latLng));
    return readLatLng(latLng);
  } finally {
    libh3._free(latLng);
  }
}
function cellToBoundary(h3Index, formatAsGeoJson) {
  var cellBoundary = libh3._malloc(SZ_CELLBOUNDARY);
  var ref = h3IndexToSplitLong(h3Index);
  var lower2 = ref[0];
  var upper = ref[1];
  try {
    throwIfError(H3.cellToBoundary(lower2, upper, cellBoundary));
    return readCellBoundary(cellBoundary, formatAsGeoJson, formatAsGeoJson);
  } finally {
    libh3._free(cellBoundary);
  }
}
function polygonToCells(coordinates2, res, isGeoJson) {
  validateRes(res);
  isGeoJson = Boolean(isGeoJson);
  if (coordinates2.length === 0 || coordinates2[0].length === 0) {
    return [];
  }
  var polygon = typeof coordinates2[0][0] === "number" ? [coordinates2] : coordinates2;
  var geoPolygon = coordinatesToGeoPolygon(
    // @ts-expect-error - There's no way to convince TS that polygon is now number[][][]
    polygon,
    isGeoJson
  );
  var countPtr = libh3._malloc(SZ_INT64);
  try {
    throwIfError(H3.maxPolygonToCellsSize(geoPolygon, res, 0, countPtr));
    var count2 = validateArrayLength(readInt64AsDoubleFromPointer(countPtr));
    var hexagons = libh3._calloc(count2, SZ_H3INDEX);
    try {
      throwIfError(H3.polygonToCells(geoPolygon, res, 0, hexagons));
      return readArrayOfH3Indexes(hexagons, count2);
    } finally {
      libh3._free(hexagons);
    }
  } finally {
    libh3._free(countPtr);
    destroyGeoPolygon(geoPolygon);
  }
}
function degsToRads(deg) {
  return deg * Math.PI / 180;
}
function radsToDegs(rad) {
  return rad * 180 / Math.PI;
}

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n2 = specifier.length / 6 | 0, colors = new Array(n2), i2 = 0;
  while (i2 < n2) colors[i2] = "#" + specifier.slice(i2 * 6, ++i2 * 6);
  return colors;
}

// node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// node_modules/d3-scale-chromatic/src/categorical/observable10.js
var observable10_default = colors_default("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");

// node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();

// node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c2 = rgb();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;

// node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t4) {
  t4 = Math.max(0, Math.min(1, t4));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t4 * (1172.33 - t4 * (10793.56 - t4 * (33300.12 - t4 * (38394.49 - t4 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t4 * (557.33 + t4 * (1225.33 - t4 * (3574.96 - t4 * (1073.77 + t4 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t4 * (3211.1 - t4 * (15327.97 - t4 * (27814 - t4 * (22569.18 - t4 * 6838.66))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range4) {
  var n2 = range4.length;
  return function(t4) {
    return range4[Math.max(0, Math.min(n2 - 1, Math.floor(t4 * n2)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/three/build/three.webgpu.js
var REVISION2 = "168";
var CullFaceNone2 = 0;
var CullFaceBack2 = 1;
var CullFaceFront2 = 2;
var PCFShadowMap$1 = 1;
var FrontSide2 = 0;
var BackSide2 = 1;
var DoubleSide2 = 2;
var NoBlending2 = 0;
var NormalBlending2 = 1;
var AdditiveBlending2 = 2;
var SubtractiveBlending2 = 3;
var MultiplyBlending2 = 4;
var CustomBlending2 = 5;
var AddEquation2 = 100;
var SubtractEquation2 = 101;
var ReverseSubtractEquation2 = 102;
var MinEquation2 = 103;
var MaxEquation2 = 104;
var ZeroFactor2 = 200;
var OneFactor2 = 201;
var SrcColorFactor2 = 202;
var OneMinusSrcColorFactor2 = 203;
var SrcAlphaFactor2 = 204;
var OneMinusSrcAlphaFactor2 = 205;
var DstAlphaFactor2 = 206;
var OneMinusDstAlphaFactor2 = 207;
var DstColorFactor2 = 208;
var OneMinusDstColorFactor2 = 209;
var SrcAlphaSaturateFactor2 = 210;
var NeverDepth2 = 0;
var AlwaysDepth2 = 1;
var LessDepth2 = 2;
var LessEqualDepth2 = 3;
var EqualDepth2 = 4;
var GreaterEqualDepth2 = 5;
var GreaterDepth2 = 6;
var NotEqualDepth2 = 7;
var MultiplyOperation2 = 0;
var MixOperation2 = 1;
var AddOperation2 = 2;
var NoToneMapping2 = 0;
var LinearToneMapping$1 = 1;
var ReinhardToneMapping$1 = 2;
var CineonToneMapping$1 = 3;
var ACESFilmicToneMapping$1 = 4;
var AgXToneMapping$1 = 6;
var NeutralToneMapping$1 = 7;
var UVMapping2 = 300;
var CubeReflectionMapping2 = 301;
var CubeRefractionMapping2 = 302;
var EquirectangularReflectionMapping2 = 303;
var EquirectangularRefractionMapping2 = 304;
var CubeUVReflectionMapping2 = 306;
var RepeatWrapping2 = 1e3;
var ClampToEdgeWrapping2 = 1001;
var MirroredRepeatWrapping2 = 1002;
var NearestFilter2 = 1003;
var NearestMipmapNearestFilter2 = 1004;
var NearestMipmapLinearFilter2 = 1005;
var LinearFilter2 = 1006;
var LinearMipmapNearestFilter2 = 1007;
var LinearMipmapLinearFilter2 = 1008;
var LinearMipMapLinearFilter = 1008;
var UnsignedByteType2 = 1009;
var ByteType2 = 1010;
var ShortType2 = 1011;
var UnsignedShortType2 = 1012;
var IntType2 = 1013;
var UnsignedIntType2 = 1014;
var FloatType2 = 1015;
var HalfFloatType2 = 1016;
var UnsignedShort4444Type2 = 1017;
var UnsignedShort5551Type2 = 1018;
var UnsignedInt248Type2 = 1020;
var UnsignedInt5999Type2 = 35902;
var AlphaFormat2 = 1021;
var RGBFormat2 = 1022;
var RGBAFormat2 = 1023;
var LuminanceFormat2 = 1024;
var LuminanceAlphaFormat2 = 1025;
var DepthFormat2 = 1026;
var DepthStencilFormat2 = 1027;
var RedFormat2 = 1028;
var RedIntegerFormat2 = 1029;
var RGFormat2 = 1030;
var RGIntegerFormat2 = 1031;
var RGBIntegerFormat = 1032;
var RGBAIntegerFormat2 = 1033;
var RGB_S3TC_DXT1_Format2 = 33776;
var RGBA_S3TC_DXT1_Format2 = 33777;
var RGBA_S3TC_DXT3_Format2 = 33778;
var RGBA_S3TC_DXT5_Format2 = 33779;
var RGB_PVRTC_4BPPV1_Format2 = 35840;
var RGB_PVRTC_2BPPV1_Format2 = 35841;
var RGBA_PVRTC_4BPPV1_Format2 = 35842;
var RGBA_PVRTC_2BPPV1_Format2 = 35843;
var RGB_ETC1_Format2 = 36196;
var RGB_ETC2_Format2 = 37492;
var RGBA_ETC2_EAC_Format2 = 37496;
var RGBA_ASTC_4x4_Format2 = 37808;
var RGBA_ASTC_5x4_Format2 = 37809;
var RGBA_ASTC_5x5_Format2 = 37810;
var RGBA_ASTC_6x5_Format2 = 37811;
var RGBA_ASTC_6x6_Format2 = 37812;
var RGBA_ASTC_8x5_Format2 = 37813;
var RGBA_ASTC_8x6_Format2 = 37814;
var RGBA_ASTC_8x8_Format2 = 37815;
var RGBA_ASTC_10x5_Format2 = 37816;
var RGBA_ASTC_10x6_Format2 = 37817;
var RGBA_ASTC_10x8_Format2 = 37818;
var RGBA_ASTC_10x10_Format2 = 37819;
var RGBA_ASTC_12x10_Format2 = 37820;
var RGBA_ASTC_12x12_Format2 = 37821;
var RGBA_BPTC_Format2 = 36492;
var RED_RGTC1_Format2 = 36283;
var SIGNED_RED_RGTC1_Format2 = 36284;
var RED_GREEN_RGTC2_Format2 = 36285;
var SIGNED_RED_GREEN_RGTC2_Format2 = 36286;
var InterpolateDiscrete2 = 2300;
var InterpolateLinear2 = 2301;
var InterpolateSmooth2 = 2302;
var ZeroCurvatureEnding2 = 2400;
var ZeroSlopeEnding2 = 2401;
var WrapAroundEnding2 = 2402;
var BasicDepthPacking2 = 3200;
var TangentSpaceNormalMap2 = 0;
var ObjectSpaceNormalMap2 = 1;
var NoColorSpace2 = "";
var SRGBColorSpace2 = "srgb";
var LinearSRGBColorSpace2 = "srgb-linear";
var DisplayP3ColorSpace2 = "display-p3";
var LinearDisplayP3ColorSpace2 = "display-p3-linear";
var LinearTransfer2 = "linear";
var SRGBTransfer2 = "srgb";
var Rec709Primaries2 = "rec709";
var P3Primaries2 = "p3";
var ZeroStencilOp = 0;
var KeepStencilOp2 = 7680;
var ReplaceStencilOp = 7681;
var IncrementStencilOp = 7682;
var DecrementStencilOp = 7683;
var IncrementWrapStencilOp = 34055;
var DecrementWrapStencilOp = 34056;
var InvertStencilOp = 5386;
var NeverStencilFunc = 512;
var LessStencilFunc = 513;
var EqualStencilFunc = 514;
var LessEqualStencilFunc = 515;
var GreaterStencilFunc = 516;
var NotEqualStencilFunc = 517;
var GreaterEqualStencilFunc = 518;
var AlwaysStencilFunc2 = 519;
var NeverCompare2 = 512;
var LessCompare2 = 513;
var EqualCompare2 = 514;
var LessEqualCompare2 = 515;
var GreaterCompare2 = 516;
var NotEqualCompare2 = 517;
var GreaterEqualCompare2 = 518;
var AlwaysCompare2 = 519;
var StaticDrawUsage2 = 35044;
var DynamicDrawUsage = 35048;
var WebGLCoordinateSystem2 = 2e3;
var WebGPUCoordinateSystem2 = 2001;
var EventDispatcher2 = class {
  addEventListener(type, listener) {
    if (this._listeners === void 0) this._listeners = {};
    const listeners = this._listeners;
    if (listeners[type] === void 0) {
      listeners[type] = [];
    }
    if (listeners[type].indexOf(listener) === -1) {
      listeners[type].push(listener);
    }
  }
  hasEventListener(type, listener) {
    if (this._listeners === void 0) return false;
    const listeners = this._listeners;
    return listeners[type] !== void 0 && listeners[type].indexOf(listener) !== -1;
  }
  removeEventListener(type, listener) {
    if (this._listeners === void 0) return;
    const listeners = this._listeners;
    const listenerArray = listeners[type];
    if (listenerArray !== void 0) {
      const index7 = listenerArray.indexOf(listener);
      if (index7 !== -1) {
        listenerArray.splice(index7, 1);
      }
    }
  }
  dispatchEvent(event) {
    if (this._listeners === void 0) return;
    const listeners = this._listeners;
    const listenerArray = listeners[event.type];
    if (listenerArray !== void 0) {
      event.target = this;
      const array3 = listenerArray.slice(0);
      for (let i2 = 0, l2 = array3.length; i2 < l2; i2++) {
        array3[i2].call(this, event);
      }
      event.target = null;
    }
  }
};
var _lut2 = ["00", "01", "02", "03", "04", "05", "06", "07", "08", "09", "0a", "0b", "0c", "0d", "0e", "0f", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "1a", "1b", "1c", "1d", "1e", "1f", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "2a", "2b", "2c", "2d", "2e", "2f", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "3a", "3b", "3c", "3d", "3e", "3f", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "4a", "4b", "4c", "4d", "4e", "4f", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "5a", "5b", "5c", "5d", "5e", "5f", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "6a", "6b", "6c", "6d", "6e", "6f", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "7a", "7b", "7c", "7d", "7e", "7f", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "8a", "8b", "8c", "8d", "8e", "8f", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "9a", "9b", "9c", "9d", "9e", "9f", "a0", "a1", "a2", "a3", "a4", "a5", "a6", "a7", "a8", "a9", "aa", "ab", "ac", "ad", "ae", "af", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "b7", "b8", "b9", "ba", "bb", "bc", "bd", "be", "bf", "c0", "c1", "c2", "c3", "c4", "c5", "c6", "c7", "c8", "c9", "ca", "cb", "cc", "cd", "ce", "cf", "d0", "d1", "d2", "d3", "d4", "d5", "d6", "d7", "d8", "d9", "da", "db", "dc", "dd", "de", "df", "e0", "e1", "e2", "e3", "e4", "e5", "e6", "e7", "e8", "e9", "ea", "eb", "ec", "ed", "ee", "ef", "f0", "f1", "f2", "f3", "f4", "f5", "f6", "f7", "f8", "f9", "fa", "fb", "fc", "fd", "fe", "ff"];
var _seed2 = 1234567;
var DEG2RAD2 = Math.PI / 180;
var RAD2DEG2 = 180 / Math.PI;
function generateUUID2() {
  const d0 = Math.random() * 4294967295 | 0;
  const d1 = Math.random() * 4294967295 | 0;
  const d2 = Math.random() * 4294967295 | 0;
  const d3 = Math.random() * 4294967295 | 0;
  const uuid = _lut2[d0 & 255] + _lut2[d0 >> 8 & 255] + _lut2[d0 >> 16 & 255] + _lut2[d0 >> 24 & 255] + "-" + _lut2[d1 & 255] + _lut2[d1 >> 8 & 255] + "-" + _lut2[d1 >> 16 & 15 | 64] + _lut2[d1 >> 24 & 255] + "-" + _lut2[d2 & 63 | 128] + _lut2[d2 >> 8 & 255] + "-" + _lut2[d2 >> 16 & 255] + _lut2[d2 >> 24 & 255] + _lut2[d3 & 255] + _lut2[d3 >> 8 & 255] + _lut2[d3 >> 16 & 255] + _lut2[d3 >> 24 & 255];
  return uuid.toLowerCase();
}
function clamp$1(value, min4, max4) {
  return Math.max(min4, Math.min(max4, value));
}
function euclideanModulo2(n2, m2) {
  return (n2 % m2 + m2) % m2;
}
function mapLinear2(x2, a1, a2, b1, b2) {
  return b1 + (x2 - a1) * (b2 - b1) / (a2 - a1);
}
function inverseLerp2(x2, y2, value) {
  if (x2 !== y2) {
    return (value - x2) / (y2 - x2);
  } else {
    return 0;
  }
}
function lerp2(x2, y2, t4) {
  return (1 - t4) * x2 + t4 * y2;
}
function damp2(x2, y2, lambda, dt) {
  return lerp2(x2, y2, 1 - Math.exp(-lambda * dt));
}
function pingpong2(x2, length2 = 1) {
  return length2 - Math.abs(euclideanModulo2(x2, length2 * 2) - length2);
}
function smoothstep$1(x2, min4, max4) {
  if (x2 <= min4) return 0;
  if (x2 >= max4) return 1;
  x2 = (x2 - min4) / (max4 - min4);
  return x2 * x2 * (3 - 2 * x2);
}
function smootherstep2(x2, min4, max4) {
  if (x2 <= min4) return 0;
  if (x2 >= max4) return 1;
  x2 = (x2 - min4) / (max4 - min4);
  return x2 * x2 * x2 * (x2 * (x2 * 6 - 15) + 10);
}
function randInt2(low, high) {
  return low + Math.floor(Math.random() * (high - low + 1));
}
function randFloat2(low, high) {
  return low + Math.random() * (high - low);
}
function randFloatSpread2(range4) {
  return range4 * (0.5 - Math.random());
}
function seededRandom2(s2) {
  if (s2 !== void 0) _seed2 = s2;
  let t4 = _seed2 += 1831565813;
  t4 = Math.imul(t4 ^ t4 >>> 15, t4 | 1);
  t4 ^= t4 + Math.imul(t4 ^ t4 >>> 7, t4 | 61);
  return ((t4 ^ t4 >>> 14) >>> 0) / 4294967296;
}
function degToRad2(degrees6) {
  return degrees6 * DEG2RAD2;
}
function radToDeg2(radians5) {
  return radians5 * RAD2DEG2;
}
function isPowerOfTwo2(value) {
  return (value & value - 1) === 0 && value !== 0;
}
function ceilPowerOfTwo2(value) {
  return Math.pow(2, Math.ceil(Math.log(value) / Math.LN2));
}
function floorPowerOfTwo2(value) {
  return Math.pow(2, Math.floor(Math.log(value) / Math.LN2));
}
function setQuaternionFromProperEuler2(q2, a2, b, c4, order) {
  const cos4 = Math.cos;
  const sin4 = Math.sin;
  const c22 = cos4(b / 2);
  const s2 = sin4(b / 2);
  const c13 = cos4((a2 + c4) / 2);
  const s13 = sin4((a2 + c4) / 2);
  const c1_3 = cos4((a2 - c4) / 2);
  const s1_3 = sin4((a2 - c4) / 2);
  const c3_1 = cos4((c4 - a2) / 2);
  const s3_1 = sin4((c4 - a2) / 2);
  switch (order) {
    case "XYX":
      q2.set(c22 * s13, s2 * c1_3, s2 * s1_3, c22 * c13);
      break;
    case "YZY":
      q2.set(s2 * s1_3, c22 * s13, s2 * c1_3, c22 * c13);
      break;
    case "ZXZ":
      q2.set(s2 * c1_3, s2 * s1_3, c22 * s13, c22 * c13);
      break;
    case "XZX":
      q2.set(c22 * s13, s2 * s3_1, s2 * c3_1, c22 * c13);
      break;
    case "YXY":
      q2.set(s2 * c3_1, c22 * s13, s2 * s3_1, c22 * c13);
      break;
    case "ZYZ":
      q2.set(s2 * s3_1, s2 * c3_1, c22 * s13, c22 * c13);
      break;
    default:
      console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: " + order);
  }
}
function denormalize2(value, array3) {
  switch (array3.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return value / 4294967295;
    case Uint16Array:
      return value / 65535;
    case Uint8Array:
      return value / 255;
    case Int32Array:
      return Math.max(value / 2147483647, -1);
    case Int16Array:
      return Math.max(value / 32767, -1);
    case Int8Array:
      return Math.max(value / 127, -1);
    default:
      throw new Error("Invalid component type.");
  }
}
function normalize$1(value, array3) {
  switch (array3.constructor) {
    case Float32Array:
      return value;
    case Uint32Array:
      return Math.round(value * 4294967295);
    case Uint16Array:
      return Math.round(value * 65535);
    case Uint8Array:
      return Math.round(value * 255);
    case Int32Array:
      return Math.round(value * 2147483647);
    case Int16Array:
      return Math.round(value * 32767);
    case Int8Array:
      return Math.round(value * 127);
    default:
      throw new Error("Invalid component type.");
  }
}
var MathUtils2 = {
  DEG2RAD: DEG2RAD2,
  RAD2DEG: RAD2DEG2,
  generateUUID: generateUUID2,
  clamp: clamp$1,
  euclideanModulo: euclideanModulo2,
  mapLinear: mapLinear2,
  inverseLerp: inverseLerp2,
  lerp: lerp2,
  damp: damp2,
  pingpong: pingpong2,
  smoothstep: smoothstep$1,
  smootherstep: smootherstep2,
  randInt: randInt2,
  randFloat: randFloat2,
  randFloatSpread: randFloatSpread2,
  seededRandom: seededRandom2,
  degToRad: degToRad2,
  radToDeg: radToDeg2,
  isPowerOfTwo: isPowerOfTwo2,
  ceilPowerOfTwo: ceilPowerOfTwo2,
  floorPowerOfTwo: floorPowerOfTwo2,
  setQuaternionFromProperEuler: setQuaternionFromProperEuler2,
  normalize: normalize$1,
  denormalize: denormalize2
};
var Vector22 = class _Vector2 {
  constructor(x2 = 0, y2 = 0) {
    _Vector2.prototype.isVector2 = true;
    this.x = x2;
    this.y = y2;
  }
  get width() {
    return this.x;
  }
  set width(value) {
    this.x = value;
  }
  get height() {
    return this.y;
  }
  set height(value) {
    this.y = value;
  }
  set(x2, y2) {
    this.x = x2;
    this.y = y2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setComponent(index7, value) {
    switch (index7) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      default:
        throw new Error("index is out of range: " + index7);
    }
    return this;
  }
  getComponent(index7) {
    switch (index7) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      default:
        throw new Error("index is out of range: " + index7);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y);
  }
  copy(v3) {
    this.x = v3.x;
    this.y = v3.y;
    return this;
  }
  add(v3) {
    this.x += v3.x;
    this.y += v3.y;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    return this;
  }
  addVectors(a2, b) {
    this.x = a2.x + b.x;
    this.y = a2.y + b.y;
    return this;
  }
  addScaledVector(v3, s2) {
    this.x += v3.x * s2;
    this.y += v3.y * s2;
    return this;
  }
  sub(v3) {
    this.x -= v3.x;
    this.y -= v3.y;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    return this;
  }
  subVectors(a2, b) {
    this.x = a2.x - b.x;
    this.y = a2.y - b.y;
    return this;
  }
  multiply(v3) {
    this.x *= v3.x;
    this.y *= v3.y;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    return this;
  }
  divide(v3) {
    this.x /= v3.x;
    this.y /= v3.y;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  applyMatrix3(m2) {
    const x2 = this.x, y2 = this.y;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[3] * y2 + e3[6];
    this.y = e3[1] * x2 + e3[4] * y2 + e3[7];
    return this;
  }
  min(v3) {
    this.x = Math.min(this.x, v3.x);
    this.y = Math.min(this.y, v3.y);
    return this;
  }
  max(v3) {
    this.x = Math.max(this.x, v3.x);
    this.y = Math.max(this.y, v3.y);
    return this;
  }
  clamp(min4, max4) {
    this.x = Math.max(min4.x, Math.min(max4.x, this.x));
    this.y = Math.max(min4.y, Math.min(max4.y, this.y));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    return this;
  }
  clampLength(min4, max4) {
    const length2 = this.length();
    return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min4, Math.min(max4, length2)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    return this;
  }
  dot(v3) {
    return this.x * v3.x + this.y * v3.y;
  }
  cross(v3) {
    return this.x * v3.y - this.y * v3.x;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  angle() {
    const angle2 = Math.atan2(-this.y, -this.x) + Math.PI;
    return angle2;
  }
  angleTo(v3) {
    const denominator = Math.sqrt(this.lengthSq() * v3.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v3) / denominator;
    return Math.acos(clamp$1(theta, -1, 1));
  }
  distanceTo(v3) {
    return Math.sqrt(this.distanceToSquared(v3));
  }
  distanceToSquared(v3) {
    const dx = this.x - v3.x, dy = this.y - v3.y;
    return dx * dx + dy * dy;
  }
  manhattanDistanceTo(v3) {
    return Math.abs(this.x - v3.x) + Math.abs(this.y - v3.y);
  }
  setLength(length2) {
    return this.normalize().multiplyScalar(length2);
  }
  lerp(v3, alpha) {
    this.x += (v3.x - this.x) * alpha;
    this.y += (v3.y - this.y) * alpha;
    return this;
  }
  lerpVectors(v1, v22, alpha) {
    this.x = v1.x + (v22.x - v1.x) * alpha;
    this.y = v1.y + (v22.y - v1.y) * alpha;
    return this;
  }
  equals(v3) {
    return v3.x === this.x && v3.y === this.y;
  }
  fromArray(array3, offset = 0) {
    this.x = array3[offset];
    this.y = array3[offset + 1];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.x;
    array3[offset + 1] = this.y;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.x = attribute2.getX(index7);
    this.y = attribute2.getY(index7);
    return this;
  }
  rotateAround(center, angle2) {
    const c4 = Math.cos(angle2), s2 = Math.sin(angle2);
    const x2 = this.x - center.x;
    const y2 = this.y - center.y;
    this.x = x2 * c4 - y2 * s2 + center.x;
    this.y = x2 * s2 + y2 * c4 + center.y;
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
  }
};
var Matrix32 = class _Matrix3 {
  constructor(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    _Matrix3.prototype.isMatrix3 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n21, n22, n23, n31, n32, n33);
    }
  }
  set(n11, n12, n13, n21, n22, n23, n31, n32, n33) {
    const te = this.elements;
    te[0] = n11;
    te[1] = n21;
    te[2] = n31;
    te[3] = n12;
    te[4] = n22;
    te[5] = n32;
    te[6] = n13;
    te[7] = n23;
    te[8] = n33;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      1
    );
    return this;
  }
  copy(m2) {
    const te = this.elements;
    const me = m2.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrix3Column(this, 0);
    yAxis.setFromMatrix3Column(this, 1);
    zAxis.setFromMatrix3Column(this, 2);
    return this;
  }
  setFromMatrix4(m2) {
    const me = m2.elements;
    this.set(
      me[0],
      me[4],
      me[8],
      me[1],
      me[5],
      me[9],
      me[2],
      me[6],
      me[10]
    );
    return this;
  }
  multiply(m2) {
    return this.multiplyMatrices(this, m2);
  }
  premultiply(m2) {
    return this.multiplyMatrices(m2, this);
  }
  multiplyMatrices(a2, b) {
    const ae = a2.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[3], a13 = ae[6];
    const a21 = ae[1], a22 = ae[4], a23 = ae[7];
    const a31 = ae[2], a32 = ae[5], a33 = ae[8];
    const b11 = be[0], b12 = be[3], b13 = be[6];
    const b21 = be[1], b22 = be[4], b23 = be[7];
    const b31 = be[2], b32 = be[5], b33 = be[8];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31;
    te[3] = a11 * b12 + a12 * b22 + a13 * b32;
    te[6] = a11 * b13 + a12 * b23 + a13 * b33;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31;
    te[4] = a21 * b12 + a22 * b22 + a23 * b32;
    te[7] = a21 * b13 + a22 * b23 + a23 * b33;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31;
    te[5] = a31 * b12 + a32 * b22 + a33 * b32;
    te[8] = a31 * b13 + a32 * b23 + a33 * b33;
    return this;
  }
  multiplyScalar(s2) {
    const te = this.elements;
    te[0] *= s2;
    te[3] *= s2;
    te[6] *= s2;
    te[1] *= s2;
    te[4] *= s2;
    te[7] *= s2;
    te[2] *= s2;
    te[5] *= s2;
    te[8] *= s2;
    return this;
  }
  determinant() {
    const te = this.elements;
    const a2 = te[0], b = te[1], c4 = te[2], d2 = te[3], e3 = te[4], f2 = te[5], g2 = te[6], h2 = te[7], i2 = te[8];
    return a2 * e3 * i2 - a2 * f2 * h2 - b * d2 * i2 + b * f2 * g2 + c4 * d2 * h2 - c4 * e3 * g2;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n12 = te[3], n22 = te[4], n32 = te[5], n13 = te[6], n23 = te[7], n33 = te[8], t11 = n33 * n22 - n32 * n23, t122 = n32 * n13 - n33 * n12, t13 = n23 * n12 - n22 * n13, det = n11 * t11 + n21 * t122 + n31 * t13;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n31 * n23 - n33 * n21) * detInv;
    te[2] = (n32 * n21 - n31 * n22) * detInv;
    te[3] = t122 * detInv;
    te[4] = (n33 * n11 - n31 * n13) * detInv;
    te[5] = (n31 * n12 - n32 * n11) * detInv;
    te[6] = t13 * detInv;
    te[7] = (n21 * n13 - n23 * n11) * detInv;
    te[8] = (n22 * n11 - n21 * n12) * detInv;
    return this;
  }
  transpose() {
    let tmp3;
    const m2 = this.elements;
    tmp3 = m2[1];
    m2[1] = m2[3];
    m2[3] = tmp3;
    tmp3 = m2[2];
    m2[2] = m2[6];
    m2[6] = tmp3;
    tmp3 = m2[5];
    m2[5] = m2[7];
    m2[7] = tmp3;
    return this;
  }
  getNormalMatrix(matrix4) {
    return this.setFromMatrix4(matrix4).invert().transpose();
  }
  transposeIntoArray(r2) {
    const m2 = this.elements;
    r2[0] = m2[0];
    r2[1] = m2[3];
    r2[2] = m2[6];
    r2[3] = m2[1];
    r2[4] = m2[4];
    r2[5] = m2[7];
    r2[6] = m2[2];
    r2[7] = m2[5];
    r2[8] = m2[8];
    return this;
  }
  setUvTransform(tx, ty, sx, sy, rotation, cx, cy) {
    const c4 = Math.cos(rotation);
    const s2 = Math.sin(rotation);
    this.set(
      sx * c4,
      sx * s2,
      -sx * (c4 * cx + s2 * cy) + cx + tx,
      -sy * s2,
      sy * c4,
      -sy * (-s2 * cx + c4 * cy) + cy + ty,
      0,
      0,
      1
    );
    return this;
  }
  //
  scale(sx, sy) {
    this.premultiply(_m32.makeScale(sx, sy));
    return this;
  }
  rotate(theta) {
    this.premultiply(_m32.makeRotation(-theta));
    return this;
  }
  translate(tx, ty) {
    this.premultiply(_m32.makeTranslation(tx, ty));
    return this;
  }
  // for 2D Transforms
  makeTranslation(x2, y2) {
    if (x2.isVector2) {
      this.set(
        1,
        0,
        x2.x,
        0,
        1,
        x2.y,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        x2,
        0,
        1,
        y2,
        0,
        0,
        1
      );
    }
    return this;
  }
  makeRotation(theta) {
    const c4 = Math.cos(theta);
    const s2 = Math.sin(theta);
    this.set(
      c4,
      -s2,
      0,
      s2,
      c4,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(x2, y2) {
    this.set(
      x2,
      0,
      0,
      0,
      y2,
      0,
      0,
      0,
      1
    );
    return this;
  }
  //
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i2 = 0; i2 < 9; i2++) {
      if (te[i2] !== me[i2]) return false;
    }
    return true;
  }
  fromArray(array3, offset = 0) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.elements[i2] = array3[i2 + offset];
    }
    return this;
  }
  toArray(array3 = [], offset = 0) {
    const te = this.elements;
    array3[offset] = te[0];
    array3[offset + 1] = te[1];
    array3[offset + 2] = te[2];
    array3[offset + 3] = te[3];
    array3[offset + 4] = te[4];
    array3[offset + 5] = te[5];
    array3[offset + 6] = te[6];
    array3[offset + 7] = te[7];
    array3[offset + 8] = te[8];
    return array3;
  }
  clone() {
    return new this.constructor().fromArray(this.elements);
  }
};
var _m32 = new Matrix32();
function arrayNeedsUint32$1(array3) {
  for (let i2 = array3.length - 1; i2 >= 0; --i2) {
    if (array3[i2] >= 65535) return true;
  }
  return false;
}
function createElementNS2(name) {
  return document.createElementNS("http://www.w3.org/1999/xhtml", name);
}
function createCanvasElement2() {
  const canvas = createElementNS2("canvas");
  canvas.style.display = "block";
  return canvas;
}
var _cache$2 = {};
function warnOnce2(message) {
  if (message in _cache$2) return;
  _cache$2[message] = true;
  console.warn(message);
}
var LINEAR_SRGB_TO_LINEAR_DISPLAY_P32 = new Matrix32().set(
  0.8224621,
  0.177538,
  0,
  0.0331941,
  0.9668058,
  0,
  0.0170827,
  0.0723974,
  0.9105199
);
var LINEAR_DISPLAY_P3_TO_LINEAR_SRGB2 = new Matrix32().set(
  1.2249401,
  -0.2249404,
  0,
  -0.0420569,
  1.0420571,
  0,
  -0.0196376,
  -0.0786361,
  1.0982735
);
var COLOR_SPACES2 = {
  [LinearSRGBColorSpace2]: {
    transfer: LinearTransfer2,
    primaries: Rec709Primaries2,
    luminanceCoefficients: [0.2126, 0.7152, 0.0722],
    toReference: (color3) => color3,
    fromReference: (color3) => color3
  },
  [SRGBColorSpace2]: {
    transfer: SRGBTransfer2,
    primaries: Rec709Primaries2,
    luminanceCoefficients: [0.2126, 0.7152, 0.0722],
    toReference: (color3) => color3.convertSRGBToLinear(),
    fromReference: (color3) => color3.convertLinearToSRGB()
  },
  [LinearDisplayP3ColorSpace2]: {
    transfer: LinearTransfer2,
    primaries: P3Primaries2,
    luminanceCoefficients: [0.2289, 0.6917, 0.0793],
    toReference: (color3) => color3.applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB2),
    fromReference: (color3) => color3.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P32)
  },
  [DisplayP3ColorSpace2]: {
    transfer: SRGBTransfer2,
    primaries: P3Primaries2,
    luminanceCoefficients: [0.2289, 0.6917, 0.0793],
    toReference: (color3) => color3.convertSRGBToLinear().applyMatrix3(LINEAR_DISPLAY_P3_TO_LINEAR_SRGB2),
    fromReference: (color3) => color3.applyMatrix3(LINEAR_SRGB_TO_LINEAR_DISPLAY_P32).convertLinearToSRGB()
  }
};
var SUPPORTED_WORKING_COLOR_SPACES2 = /* @__PURE__ */ new Set([LinearSRGBColorSpace2, LinearDisplayP3ColorSpace2]);
var ColorManagement2 = {
  enabled: true,
  _workingColorSpace: LinearSRGBColorSpace2,
  get workingColorSpace() {
    return this._workingColorSpace;
  },
  set workingColorSpace(colorSpace) {
    if (!SUPPORTED_WORKING_COLOR_SPACES2.has(colorSpace)) {
      throw new Error(`Unsupported working color space, "${colorSpace}".`);
    }
    this._workingColorSpace = colorSpace;
  },
  convert: function(color3, sourceColorSpace, targetColorSpace) {
    if (this.enabled === false || sourceColorSpace === targetColorSpace || !sourceColorSpace || !targetColorSpace) {
      return color3;
    }
    const sourceToReference = COLOR_SPACES2[sourceColorSpace].toReference;
    const targetFromReference = COLOR_SPACES2[targetColorSpace].fromReference;
    return targetFromReference(sourceToReference(color3));
  },
  fromWorkingColorSpace: function(color3, targetColorSpace) {
    return this.convert(color3, this._workingColorSpace, targetColorSpace);
  },
  toWorkingColorSpace: function(color3, sourceColorSpace) {
    return this.convert(color3, sourceColorSpace, this._workingColorSpace);
  },
  getPrimaries: function(colorSpace) {
    return COLOR_SPACES2[colorSpace].primaries;
  },
  getTransfer: function(colorSpace) {
    if (colorSpace === NoColorSpace2) return LinearTransfer2;
    return COLOR_SPACES2[colorSpace].transfer;
  },
  getLuminanceCoefficients: function(target, colorSpace = this._workingColorSpace) {
    return target.fromArray(COLOR_SPACES2[colorSpace].luminanceCoefficients);
  }
};
function SRGBToLinear2(c4) {
  return c4 < 0.04045 ? c4 * 0.0773993808 : Math.pow(c4 * 0.9478672986 + 0.0521327014, 2.4);
}
function LinearToSRGB2(c4) {
  return c4 < 31308e-7 ? c4 * 12.92 : 1.055 * Math.pow(c4, 0.41666) - 0.055;
}
var _canvas2;
var ImageUtils2 = class {
  static getDataURL(image) {
    if (/^data:/i.test(image.src)) {
      return image.src;
    }
    if (typeof HTMLCanvasElement === "undefined") {
      return image.src;
    }
    let canvas;
    if (image instanceof HTMLCanvasElement) {
      canvas = image;
    } else {
      if (_canvas2 === void 0) _canvas2 = createElementNS2("canvas");
      _canvas2.width = image.width;
      _canvas2.height = image.height;
      const context2 = _canvas2.getContext("2d");
      if (image instanceof ImageData) {
        context2.putImageData(image, 0, 0);
      } else {
        context2.drawImage(image, 0, 0, image.width, image.height);
      }
      canvas = _canvas2;
    }
    if (canvas.width > 2048 || canvas.height > 2048) {
      console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons", image);
      return canvas.toDataURL("image/jpeg", 0.6);
    } else {
      return canvas.toDataURL("image/png");
    }
  }
  static sRGBToLinear(image) {
    if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
      const canvas = createElementNS2("canvas");
      canvas.width = image.width;
      canvas.height = image.height;
      const context2 = canvas.getContext("2d");
      context2.drawImage(image, 0, 0, image.width, image.height);
      const imageData = context2.getImageData(0, 0, image.width, image.height);
      const data = imageData.data;
      for (let i2 = 0; i2 < data.length; i2++) {
        data[i2] = SRGBToLinear2(data[i2] / 255) * 255;
      }
      context2.putImageData(imageData, 0, 0);
      return canvas;
    } else if (image.data) {
      const data = image.data.slice(0);
      for (let i2 = 0; i2 < data.length; i2++) {
        if (data instanceof Uint8Array || data instanceof Uint8ClampedArray) {
          data[i2] = Math.floor(SRGBToLinear2(data[i2] / 255) * 255);
        } else {
          data[i2] = SRGBToLinear2(data[i2]);
        }
      }
      return {
        data,
        width: image.width,
        height: image.height
      };
    } else {
      console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");
      return image;
    }
  }
};
var _sourceId2 = 0;
var Source2 = class {
  constructor(data = null) {
    this.isSource = true;
    Object.defineProperty(this, "id", { value: _sourceId2++ });
    this.uuid = generateUUID2();
    this.data = data;
    this.dataReady = true;
    this.version = 0;
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.images[this.uuid] !== void 0) {
      return meta.images[this.uuid];
    }
    const output2 = {
      uuid: this.uuid,
      url: ""
    };
    const data = this.data;
    if (data !== null) {
      let url;
      if (Array.isArray(data)) {
        url = [];
        for (let i2 = 0, l2 = data.length; i2 < l2; i2++) {
          if (data[i2].isDataTexture) {
            url.push(serializeImage2(data[i2].image));
          } else {
            url.push(serializeImage2(data[i2]));
          }
        }
      } else {
        url = serializeImage2(data);
      }
      output2.url = url;
    }
    if (!isRootObject) {
      meta.images[this.uuid] = output2;
    }
    return output2;
  }
};
function serializeImage2(image) {
  if (typeof HTMLImageElement !== "undefined" && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== "undefined" && image instanceof HTMLCanvasElement || typeof ImageBitmap !== "undefined" && image instanceof ImageBitmap) {
    return ImageUtils2.getDataURL(image);
  } else {
    if (image.data) {
      return {
        data: Array.from(image.data),
        width: image.width,
        height: image.height,
        type: image.data.constructor.name
      };
    } else {
      console.warn("THREE.Texture: Unable to serialize Texture.");
      return {};
    }
  }
}
var _textureId2 = 0;
var Texture2 = class _Texture extends EventDispatcher2 {
  constructor(image = _Texture.DEFAULT_IMAGE, mapping = _Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping2, wrapT = ClampToEdgeWrapping2, magFilter = LinearFilter2, minFilter = LinearMipmapLinearFilter2, format3 = RGBAFormat2, type = UnsignedByteType2, anisotropy2 = _Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace2) {
    super();
    this.isTexture = true;
    Object.defineProperty(this, "id", { value: _textureId2++ });
    this.uuid = generateUUID2();
    this.name = "";
    this.source = new Source2(image);
    this.mipmaps = [];
    this.mapping = mapping;
    this.channel = 0;
    this.wrapS = wrapS;
    this.wrapT = wrapT;
    this.magFilter = magFilter;
    this.minFilter = minFilter;
    this.anisotropy = anisotropy2;
    this.format = format3;
    this.internalFormat = null;
    this.type = type;
    this.offset = new Vector22(0, 0);
    this.repeat = new Vector22(1, 1);
    this.center = new Vector22(0, 0);
    this.rotation = 0;
    this.matrixAutoUpdate = true;
    this.matrix = new Matrix32();
    this.generateMipmaps = true;
    this.premultiplyAlpha = false;
    this.flipY = true;
    this.unpackAlignment = 4;
    this.colorSpace = colorSpace;
    this.userData = {};
    this.version = 0;
    this.onUpdate = null;
    this.isRenderTargetTexture = false;
    this.pmremVersion = 0;
  }
  get image() {
    return this.source.data;
  }
  set image(value = null) {
    this.source.data = value;
  }
  updateMatrix() {
    this.matrix.setUvTransform(this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.name = source.name;
    this.source = source.source;
    this.mipmaps = source.mipmaps.slice(0);
    this.mapping = source.mapping;
    this.channel = source.channel;
    this.wrapS = source.wrapS;
    this.wrapT = source.wrapT;
    this.magFilter = source.magFilter;
    this.minFilter = source.minFilter;
    this.anisotropy = source.anisotropy;
    this.format = source.format;
    this.internalFormat = source.internalFormat;
    this.type = source.type;
    this.offset.copy(source.offset);
    this.repeat.copy(source.repeat);
    this.center.copy(source.center);
    this.rotation = source.rotation;
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrix.copy(source.matrix);
    this.generateMipmaps = source.generateMipmaps;
    this.premultiplyAlpha = source.premultiplyAlpha;
    this.flipY = source.flipY;
    this.unpackAlignment = source.unpackAlignment;
    this.colorSpace = source.colorSpace;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    this.needsUpdate = true;
    return this;
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (!isRootObject && meta.textures[this.uuid] !== void 0) {
      return meta.textures[this.uuid];
    }
    const output2 = {
      metadata: {
        version: 4.6,
        type: "Texture",
        generator: "Texture.toJSON"
      },
      uuid: this.uuid,
      name: this.name,
      image: this.source.toJSON(meta).uuid,
      mapping: this.mapping,
      channel: this.channel,
      repeat: [this.repeat.x, this.repeat.y],
      offset: [this.offset.x, this.offset.y],
      center: [this.center.x, this.center.y],
      rotation: this.rotation,
      wrap: [this.wrapS, this.wrapT],
      format: this.format,
      internalFormat: this.internalFormat,
      type: this.type,
      colorSpace: this.colorSpace,
      minFilter: this.minFilter,
      magFilter: this.magFilter,
      anisotropy: this.anisotropy,
      flipY: this.flipY,
      generateMipmaps: this.generateMipmaps,
      premultiplyAlpha: this.premultiplyAlpha,
      unpackAlignment: this.unpackAlignment
    };
    if (Object.keys(this.userData).length > 0) output2.userData = this.userData;
    if (!isRootObject) {
      meta.textures[this.uuid] = output2;
    }
    return output2;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  transformUv(uv2) {
    if (this.mapping !== UVMapping2) return uv2;
    uv2.applyMatrix3(this.matrix);
    if (uv2.x < 0 || uv2.x > 1) {
      switch (this.wrapS) {
        case RepeatWrapping2:
          uv2.x = uv2.x - Math.floor(uv2.x);
          break;
        case ClampToEdgeWrapping2:
          uv2.x = uv2.x < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping2:
          if (Math.abs(Math.floor(uv2.x) % 2) === 1) {
            uv2.x = Math.ceil(uv2.x) - uv2.x;
          } else {
            uv2.x = uv2.x - Math.floor(uv2.x);
          }
          break;
      }
    }
    if (uv2.y < 0 || uv2.y > 1) {
      switch (this.wrapT) {
        case RepeatWrapping2:
          uv2.y = uv2.y - Math.floor(uv2.y);
          break;
        case ClampToEdgeWrapping2:
          uv2.y = uv2.y < 0 ? 0 : 1;
          break;
        case MirroredRepeatWrapping2:
          if (Math.abs(Math.floor(uv2.y) % 2) === 1) {
            uv2.y = Math.ceil(uv2.y) - uv2.y;
          } else {
            uv2.y = uv2.y - Math.floor(uv2.y);
          }
          break;
      }
    }
    if (this.flipY) {
      uv2.y = 1 - uv2.y;
    }
    return uv2;
  }
  set needsUpdate(value) {
    if (value === true) {
      this.version++;
      this.source.needsUpdate = true;
    }
  }
  set needsPMREMUpdate(value) {
    if (value === true) {
      this.pmremVersion++;
    }
  }
};
Texture2.DEFAULT_IMAGE = null;
Texture2.DEFAULT_MAPPING = UVMapping2;
Texture2.DEFAULT_ANISOTROPY = 1;
var Vector42 = class _Vector4 {
  constructor(x2 = 0, y2 = 0, z2 = 0, w4 = 1) {
    _Vector4.prototype.isVector4 = true;
    this.x = x2;
    this.y = y2;
    this.z = z2;
    this.w = w4;
  }
  get width() {
    return this.z;
  }
  set width(value) {
    this.z = value;
  }
  get height() {
    return this.w;
  }
  set height(value) {
    this.w = value;
  }
  set(x2, y2, z2, w4) {
    this.x = x2;
    this.y = y2;
    this.z = z2;
    this.w = w4;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    this.w = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setW(w4) {
    this.w = w4;
    return this;
  }
  setComponent(index7, value) {
    switch (index7) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      case 3:
        this.w = value;
        break;
      default:
        throw new Error("index is out of range: " + index7);
    }
    return this;
  }
  getComponent(index7) {
    switch (index7) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      case 3:
        return this.w;
      default:
        throw new Error("index is out of range: " + index7);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z, this.w);
  }
  copy(v3) {
    this.x = v3.x;
    this.y = v3.y;
    this.z = v3.z;
    this.w = v3.w !== void 0 ? v3.w : 1;
    return this;
  }
  add(v3) {
    this.x += v3.x;
    this.y += v3.y;
    this.z += v3.z;
    this.w += v3.w;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    this.z += s2;
    this.w += s2;
    return this;
  }
  addVectors(a2, b) {
    this.x = a2.x + b.x;
    this.y = a2.y + b.y;
    this.z = a2.z + b.z;
    this.w = a2.w + b.w;
    return this;
  }
  addScaledVector(v3, s2) {
    this.x += v3.x * s2;
    this.y += v3.y * s2;
    this.z += v3.z * s2;
    this.w += v3.w * s2;
    return this;
  }
  sub(v3) {
    this.x -= v3.x;
    this.y -= v3.y;
    this.z -= v3.z;
    this.w -= v3.w;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    this.z -= s2;
    this.w -= s2;
    return this;
  }
  subVectors(a2, b) {
    this.x = a2.x - b.x;
    this.y = a2.y - b.y;
    this.z = a2.z - b.z;
    this.w = a2.w - b.w;
    return this;
  }
  multiply(v3) {
    this.x *= v3.x;
    this.y *= v3.y;
    this.z *= v3.z;
    this.w *= v3.w;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    this.w *= scalar;
    return this;
  }
  applyMatrix4(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z, w4 = this.w;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[4] * y2 + e3[8] * z2 + e3[12] * w4;
    this.y = e3[1] * x2 + e3[5] * y2 + e3[9] * z2 + e3[13] * w4;
    this.z = e3[2] * x2 + e3[6] * y2 + e3[10] * z2 + e3[14] * w4;
    this.w = e3[3] * x2 + e3[7] * y2 + e3[11] * z2 + e3[15] * w4;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  setAxisAngleFromQuaternion(q2) {
    this.w = 2 * Math.acos(q2.w);
    const s2 = Math.sqrt(1 - q2.w * q2.w);
    if (s2 < 1e-4) {
      this.x = 1;
      this.y = 0;
      this.z = 0;
    } else {
      this.x = q2.x / s2;
      this.y = q2.y / s2;
      this.z = q2.z / s2;
    }
    return this;
  }
  setAxisAngleFromRotationMatrix(m2) {
    let angle2, x2, y2, z2;
    const epsilon5 = 0.01, epsilon23 = 0.1, te = m2.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10];
    if (Math.abs(m12 - m21) < epsilon5 && Math.abs(m13 - m31) < epsilon5 && Math.abs(m23 - m32) < epsilon5) {
      if (Math.abs(m12 + m21) < epsilon23 && Math.abs(m13 + m31) < epsilon23 && Math.abs(m23 + m32) < epsilon23 && Math.abs(m11 + m22 + m33 - 3) < epsilon23) {
        this.set(1, 0, 0, 0);
        return this;
      }
      angle2 = Math.PI;
      const xx = (m11 + 1) / 2;
      const yy = (m22 + 1) / 2;
      const zz = (m33 + 1) / 2;
      const xy = (m12 + m21) / 4;
      const xz = (m13 + m31) / 4;
      const yz = (m23 + m32) / 4;
      if (xx > yy && xx > zz) {
        if (xx < epsilon5) {
          x2 = 0;
          y2 = 0.707106781;
          z2 = 0.707106781;
        } else {
          x2 = Math.sqrt(xx);
          y2 = xy / x2;
          z2 = xz / x2;
        }
      } else if (yy > zz) {
        if (yy < epsilon5) {
          x2 = 0.707106781;
          y2 = 0;
          z2 = 0.707106781;
        } else {
          y2 = Math.sqrt(yy);
          x2 = xy / y2;
          z2 = yz / y2;
        }
      } else {
        if (zz < epsilon5) {
          x2 = 0.707106781;
          y2 = 0.707106781;
          z2 = 0;
        } else {
          z2 = Math.sqrt(zz);
          x2 = xz / z2;
          y2 = yz / z2;
        }
      }
      this.set(x2, y2, z2, angle2);
      return this;
    }
    let s2 = Math.sqrt((m32 - m23) * (m32 - m23) + (m13 - m31) * (m13 - m31) + (m21 - m12) * (m21 - m12));
    if (Math.abs(s2) < 1e-3) s2 = 1;
    this.x = (m32 - m23) / s2;
    this.y = (m13 - m31) / s2;
    this.z = (m21 - m12) / s2;
    this.w = Math.acos((m11 + m22 + m33 - 1) / 2);
    return this;
  }
  setFromMatrixPosition(m2) {
    const e3 = m2.elements;
    this.x = e3[12];
    this.y = e3[13];
    this.z = e3[14];
    this.w = e3[15];
    return this;
  }
  min(v3) {
    this.x = Math.min(this.x, v3.x);
    this.y = Math.min(this.y, v3.y);
    this.z = Math.min(this.z, v3.z);
    this.w = Math.min(this.w, v3.w);
    return this;
  }
  max(v3) {
    this.x = Math.max(this.x, v3.x);
    this.y = Math.max(this.y, v3.y);
    this.z = Math.max(this.z, v3.z);
    this.w = Math.max(this.w, v3.w);
    return this;
  }
  clamp(min4, max4) {
    this.x = Math.max(min4.x, Math.min(max4.x, this.x));
    this.y = Math.max(min4.y, Math.min(max4.y, this.y));
    this.z = Math.max(min4.z, Math.min(max4.z, this.z));
    this.w = Math.max(min4.w, Math.min(max4.w, this.w));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    this.w = Math.max(minVal, Math.min(maxVal, this.w));
    return this;
  }
  clampLength(min4, max4) {
    const length2 = this.length();
    return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min4, Math.min(max4, length2)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    this.w = Math.floor(this.w);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    this.w = Math.ceil(this.w);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    this.w = Math.round(this.w);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    this.w = Math.trunc(this.w);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    this.w = -this.w;
    return this;
  }
  dot(v3) {
    return this.x * v3.x + this.y * v3.y + this.z * v3.z + this.w * v3.w;
  }
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length2) {
    return this.normalize().multiplyScalar(length2);
  }
  lerp(v3, alpha) {
    this.x += (v3.x - this.x) * alpha;
    this.y += (v3.y - this.y) * alpha;
    this.z += (v3.z - this.z) * alpha;
    this.w += (v3.w - this.w) * alpha;
    return this;
  }
  lerpVectors(v1, v22, alpha) {
    this.x = v1.x + (v22.x - v1.x) * alpha;
    this.y = v1.y + (v22.y - v1.y) * alpha;
    this.z = v1.z + (v22.z - v1.z) * alpha;
    this.w = v1.w + (v22.w - v1.w) * alpha;
    return this;
  }
  equals(v3) {
    return v3.x === this.x && v3.y === this.y && v3.z === this.z && v3.w === this.w;
  }
  fromArray(array3, offset = 0) {
    this.x = array3[offset];
    this.y = array3[offset + 1];
    this.z = array3[offset + 2];
    this.w = array3[offset + 3];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.x;
    array3[offset + 1] = this.y;
    array3[offset + 2] = this.z;
    array3[offset + 3] = this.w;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.x = attribute2.getX(index7);
    this.y = attribute2.getY(index7);
    this.z = attribute2.getZ(index7);
    this.w = attribute2.getW(index7);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    this.w = Math.random();
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
    yield this.w;
  }
};
var RenderTarget2 = class extends EventDispatcher2 {
  constructor(width = 1, height = 1, options = {}) {
    super();
    this.isRenderTarget = true;
    this.width = width;
    this.height = height;
    this.depth = 1;
    this.scissor = new Vector42(0, 0, width, height);
    this.scissorTest = false;
    this.viewport = new Vector42(0, 0, width, height);
    const image = { width, height, depth: 1 };
    options = Object.assign({
      generateMipmaps: false,
      internalFormat: null,
      minFilter: LinearFilter2,
      depthBuffer: true,
      stencilBuffer: false,
      resolveDepthBuffer: true,
      resolveStencilBuffer: true,
      depthTexture: null,
      samples: 0,
      count: 1
    }, options);
    const texture2 = new Texture2(image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    texture2.flipY = false;
    texture2.generateMipmaps = options.generateMipmaps;
    texture2.internalFormat = options.internalFormat;
    this.textures = [];
    const count2 = options.count;
    for (let i2 = 0; i2 < count2; i2++) {
      this.textures[i2] = texture2.clone();
      this.textures[i2].isRenderTargetTexture = true;
    }
    this.depthBuffer = options.depthBuffer;
    this.stencilBuffer = options.stencilBuffer;
    this.resolveDepthBuffer = options.resolveDepthBuffer;
    this.resolveStencilBuffer = options.resolveStencilBuffer;
    this.depthTexture = options.depthTexture;
    this.samples = options.samples;
  }
  get texture() {
    return this.textures[0];
  }
  set texture(value) {
    this.textures[0] = value;
  }
  setSize(width, height, depth2 = 1) {
    if (this.width !== width || this.height !== height || this.depth !== depth2) {
      this.width = width;
      this.height = height;
      this.depth = depth2;
      for (let i2 = 0, il = this.textures.length; i2 < il; i2++) {
        this.textures[i2].image.width = width;
        this.textures[i2].image.height = height;
        this.textures[i2].image.depth = depth2;
      }
      this.dispose();
    }
    this.viewport.set(0, 0, width, height);
    this.scissor.set(0, 0, width, height);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.width = source.width;
    this.height = source.height;
    this.depth = source.depth;
    this.scissor.copy(source.scissor);
    this.scissorTest = source.scissorTest;
    this.viewport.copy(source.viewport);
    this.textures.length = 0;
    for (let i2 = 0, il = source.textures.length; i2 < il; i2++) {
      this.textures[i2] = source.textures[i2].clone();
      this.textures[i2].isRenderTargetTexture = true;
    }
    const image = Object.assign({}, source.texture.image);
    this.texture.source = new Source2(image);
    this.depthBuffer = source.depthBuffer;
    this.stencilBuffer = source.stencilBuffer;
    this.resolveDepthBuffer = source.resolveDepthBuffer;
    this.resolveStencilBuffer = source.resolveStencilBuffer;
    if (source.depthTexture !== null) this.depthTexture = source.depthTexture.clone();
    this.samples = source.samples;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var WebGLRenderTarget2 = class extends RenderTarget2 {
  constructor(width = 1, height = 1, options = {}) {
    super(width, height, options);
    this.isWebGLRenderTarget = true;
  }
};
var DataArrayTexture2 = class extends Texture2 {
  constructor(data = null, width = 1, height = 1, depth2 = 1) {
    super(null);
    this.isDataArrayTexture = true;
    this.image = { data, width, height, depth: depth2 };
    this.magFilter = NearestFilter2;
    this.minFilter = NearestFilter2;
    this.wrapR = ClampToEdgeWrapping2;
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
    this.layerUpdates = /* @__PURE__ */ new Set();
  }
  addLayerUpdate(layerIndex) {
    this.layerUpdates.add(layerIndex);
  }
  clearLayerUpdates() {
    this.layerUpdates.clear();
  }
};
var Quaternion2 = class {
  constructor(x2 = 0, y2 = 0, z2 = 0, w4 = 1) {
    this.isQuaternion = true;
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._w = w4;
  }
  static slerpFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t4) {
    let x03 = src0[srcOffset0 + 0], y03 = src0[srcOffset0 + 1], z02 = src0[srcOffset0 + 2], w02 = src0[srcOffset0 + 3];
    const x12 = src1[srcOffset1 + 0], y12 = src1[srcOffset1 + 1], z1 = src1[srcOffset1 + 2], w12 = src1[srcOffset1 + 3];
    if (t4 === 0) {
      dst[dstOffset + 0] = x03;
      dst[dstOffset + 1] = y03;
      dst[dstOffset + 2] = z02;
      dst[dstOffset + 3] = w02;
      return;
    }
    if (t4 === 1) {
      dst[dstOffset + 0] = x12;
      dst[dstOffset + 1] = y12;
      dst[dstOffset + 2] = z1;
      dst[dstOffset + 3] = w12;
      return;
    }
    if (w02 !== w12 || x03 !== x12 || y03 !== y12 || z02 !== z1) {
      let s2 = 1 - t4;
      const cos4 = x03 * x12 + y03 * y12 + z02 * z1 + w02 * w12, dir = cos4 >= 0 ? 1 : -1, sqrSin = 1 - cos4 * cos4;
      if (sqrSin > Number.EPSILON) {
        const sin4 = Math.sqrt(sqrSin), len = Math.atan2(sin4, cos4 * dir);
        s2 = Math.sin(s2 * len) / sin4;
        t4 = Math.sin(t4 * len) / sin4;
      }
      const tDir = t4 * dir;
      x03 = x03 * s2 + x12 * tDir;
      y03 = y03 * s2 + y12 * tDir;
      z02 = z02 * s2 + z1 * tDir;
      w02 = w02 * s2 + w12 * tDir;
      if (s2 === 1 - t4) {
        const f2 = 1 / Math.sqrt(x03 * x03 + y03 * y03 + z02 * z02 + w02 * w02);
        x03 *= f2;
        y03 *= f2;
        z02 *= f2;
        w02 *= f2;
      }
    }
    dst[dstOffset] = x03;
    dst[dstOffset + 1] = y03;
    dst[dstOffset + 2] = z02;
    dst[dstOffset + 3] = w02;
  }
  static multiplyQuaternionsFlat(dst, dstOffset, src0, srcOffset0, src1, srcOffset1) {
    const x03 = src0[srcOffset0];
    const y03 = src0[srcOffset0 + 1];
    const z02 = src0[srcOffset0 + 2];
    const w02 = src0[srcOffset0 + 3];
    const x12 = src1[srcOffset1];
    const y12 = src1[srcOffset1 + 1];
    const z1 = src1[srcOffset1 + 2];
    const w12 = src1[srcOffset1 + 3];
    dst[dstOffset] = x03 * w12 + w02 * x12 + y03 * z1 - z02 * y12;
    dst[dstOffset + 1] = y03 * w12 + w02 * y12 + z02 * x12 - x03 * z1;
    dst[dstOffset + 2] = z02 * w12 + w02 * z1 + x03 * y12 - y03 * x12;
    dst[dstOffset + 3] = w02 * w12 - x03 * x12 - y03 * y12 - z02 * z1;
    return dst;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get w() {
    return this._w;
  }
  set w(value) {
    this._w = value;
    this._onChangeCallback();
  }
  set(x2, y2, z2, w4) {
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._w = w4;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._w);
  }
  copy(quaternion) {
    this._x = quaternion.x;
    this._y = quaternion.y;
    this._z = quaternion.z;
    this._w = quaternion.w;
    this._onChangeCallback();
    return this;
  }
  setFromEuler(euler, update20 = true) {
    const x2 = euler._x, y2 = euler._y, z2 = euler._z, order = euler._order;
    const cos4 = Math.cos;
    const sin4 = Math.sin;
    const c1 = cos4(x2 / 2);
    const c22 = cos4(y2 / 2);
    const c32 = cos4(z2 / 2);
    const s1 = sin4(x2 / 2);
    const s2 = sin4(y2 / 2);
    const s3 = sin4(z2 / 2);
    switch (order) {
      case "XYZ":
        this._x = s1 * c22 * c32 + c1 * s2 * s3;
        this._y = c1 * s2 * c32 - s1 * c22 * s3;
        this._z = c1 * c22 * s3 + s1 * s2 * c32;
        this._w = c1 * c22 * c32 - s1 * s2 * s3;
        break;
      case "YXZ":
        this._x = s1 * c22 * c32 + c1 * s2 * s3;
        this._y = c1 * s2 * c32 - s1 * c22 * s3;
        this._z = c1 * c22 * s3 - s1 * s2 * c32;
        this._w = c1 * c22 * c32 + s1 * s2 * s3;
        break;
      case "ZXY":
        this._x = s1 * c22 * c32 - c1 * s2 * s3;
        this._y = c1 * s2 * c32 + s1 * c22 * s3;
        this._z = c1 * c22 * s3 + s1 * s2 * c32;
        this._w = c1 * c22 * c32 - s1 * s2 * s3;
        break;
      case "ZYX":
        this._x = s1 * c22 * c32 - c1 * s2 * s3;
        this._y = c1 * s2 * c32 + s1 * c22 * s3;
        this._z = c1 * c22 * s3 - s1 * s2 * c32;
        this._w = c1 * c22 * c32 + s1 * s2 * s3;
        break;
      case "YZX":
        this._x = s1 * c22 * c32 + c1 * s2 * s3;
        this._y = c1 * s2 * c32 + s1 * c22 * s3;
        this._z = c1 * c22 * s3 - s1 * s2 * c32;
        this._w = c1 * c22 * c32 - s1 * s2 * s3;
        break;
      case "XZY":
        this._x = s1 * c22 * c32 - c1 * s2 * s3;
        this._y = c1 * s2 * c32 - s1 * c22 * s3;
        this._z = c1 * c22 * s3 + s1 * s2 * c32;
        this._w = c1 * c22 * c32 + s1 * s2 * s3;
        break;
      default:
        console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: " + order);
    }
    if (update20 === true) this._onChangeCallback();
    return this;
  }
  setFromAxisAngle(axis, angle2) {
    const halfAngle = angle2 / 2, s2 = Math.sin(halfAngle);
    this._x = axis.x * s2;
    this._y = axis.y * s2;
    this._z = axis.z * s2;
    this._w = Math.cos(halfAngle);
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m2) {
    const te = m2.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s2 = 0.5 / Math.sqrt(trace + 1);
      this._w = 0.25 / s2;
      this._x = (m32 - m23) * s2;
      this._y = (m13 - m31) * s2;
      this._z = (m21 - m12) * s2;
    } else if (m11 > m22 && m11 > m33) {
      const s2 = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this._w = (m32 - m23) / s2;
      this._x = 0.25 * s2;
      this._y = (m12 + m21) / s2;
      this._z = (m13 + m31) / s2;
    } else if (m22 > m33) {
      const s2 = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this._w = (m13 - m31) / s2;
      this._x = (m12 + m21) / s2;
      this._y = 0.25 * s2;
      this._z = (m23 + m32) / s2;
    } else {
      const s2 = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this._w = (m21 - m12) / s2;
      this._x = (m13 + m31) / s2;
      this._y = (m23 + m32) / s2;
      this._z = 0.25 * s2;
    }
    this._onChangeCallback();
    return this;
  }
  setFromUnitVectors(vFrom, vTo) {
    let r2 = vFrom.dot(vTo) + 1;
    if (r2 < Number.EPSILON) {
      r2 = 0;
      if (Math.abs(vFrom.x) > Math.abs(vFrom.z)) {
        this._x = -vFrom.y;
        this._y = vFrom.x;
        this._z = 0;
        this._w = r2;
      } else {
        this._x = 0;
        this._y = -vFrom.z;
        this._z = vFrom.y;
        this._w = r2;
      }
    } else {
      this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
      this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
      this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
      this._w = r2;
    }
    return this.normalize();
  }
  angleTo(q2) {
    return 2 * Math.acos(Math.abs(clamp$1(this.dot(q2), -1, 1)));
  }
  rotateTowards(q2, step2) {
    const angle2 = this.angleTo(q2);
    if (angle2 === 0) return this;
    const t4 = Math.min(1, step2 / angle2);
    this.slerp(q2, t4);
    return this;
  }
  identity() {
    return this.set(0, 0, 0, 1);
  }
  invert() {
    return this.conjugate();
  }
  conjugate() {
    this._x *= -1;
    this._y *= -1;
    this._z *= -1;
    this._onChangeCallback();
    return this;
  }
  dot(v3) {
    return this._x * v3._x + this._y * v3._y + this._z * v3._z + this._w * v3._w;
  }
  lengthSq() {
    return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;
  }
  length() {
    return Math.sqrt(this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w);
  }
  normalize() {
    let l2 = this.length();
    if (l2 === 0) {
      this._x = 0;
      this._y = 0;
      this._z = 0;
      this._w = 1;
    } else {
      l2 = 1 / l2;
      this._x = this._x * l2;
      this._y = this._y * l2;
      this._z = this._z * l2;
      this._w = this._w * l2;
    }
    this._onChangeCallback();
    return this;
  }
  multiply(q2) {
    return this.multiplyQuaternions(this, q2);
  }
  premultiply(q2) {
    return this.multiplyQuaternions(q2, this);
  }
  multiplyQuaternions(a2, b) {
    const qax = a2._x, qay = a2._y, qaz = a2._z, qaw = a2._w;
    const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;
    this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
    this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
    this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
    this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;
    this._onChangeCallback();
    return this;
  }
  slerp(qb, t4) {
    if (t4 === 0) return this;
    if (t4 === 1) return this.copy(qb);
    const x2 = this._x, y2 = this._y, z2 = this._z, w4 = this._w;
    let cosHalfTheta = w4 * qb._w + x2 * qb._x + y2 * qb._y + z2 * qb._z;
    if (cosHalfTheta < 0) {
      this._w = -qb._w;
      this._x = -qb._x;
      this._y = -qb._y;
      this._z = -qb._z;
      cosHalfTheta = -cosHalfTheta;
    } else {
      this.copy(qb);
    }
    if (cosHalfTheta >= 1) {
      this._w = w4;
      this._x = x2;
      this._y = y2;
      this._z = z2;
      return this;
    }
    const sqrSinHalfTheta = 1 - cosHalfTheta * cosHalfTheta;
    if (sqrSinHalfTheta <= Number.EPSILON) {
      const s2 = 1 - t4;
      this._w = s2 * w4 + t4 * this._w;
      this._x = s2 * x2 + t4 * this._x;
      this._y = s2 * y2 + t4 * this._y;
      this._z = s2 * z2 + t4 * this._z;
      this.normalize();
      return this;
    }
    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta);
    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta);
    const ratioA = Math.sin((1 - t4) * halfTheta) / sinHalfTheta, ratioB = Math.sin(t4 * halfTheta) / sinHalfTheta;
    this._w = w4 * ratioA + this._w * ratioB;
    this._x = x2 * ratioA + this._x * ratioB;
    this._y = y2 * ratioA + this._y * ratioB;
    this._z = z2 * ratioA + this._z * ratioB;
    this._onChangeCallback();
    return this;
  }
  slerpQuaternions(qa, qb, t4) {
    return this.copy(qa).slerp(qb, t4);
  }
  random() {
    const theta1 = 2 * Math.PI * Math.random();
    const theta2 = 2 * Math.PI * Math.random();
    const x03 = Math.random();
    const r1 = Math.sqrt(1 - x03);
    const r2 = Math.sqrt(x03);
    return this.set(
      r1 * Math.sin(theta1),
      r1 * Math.cos(theta1),
      r2 * Math.sin(theta2),
      r2 * Math.cos(theta2)
    );
  }
  equals(quaternion) {
    return quaternion._x === this._x && quaternion._y === this._y && quaternion._z === this._z && quaternion._w === this._w;
  }
  fromArray(array3, offset = 0) {
    this._x = array3[offset];
    this._y = array3[offset + 1];
    this._z = array3[offset + 2];
    this._w = array3[offset + 3];
    this._onChangeCallback();
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this._x;
    array3[offset + 1] = this._y;
    array3[offset + 2] = this._z;
    array3[offset + 3] = this._w;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this._x = attribute2.getX(index7);
    this._y = attribute2.getY(index7);
    this._z = attribute2.getZ(index7);
    this._w = attribute2.getW(index7);
    this._onChangeCallback();
    return this;
  }
  toJSON() {
    return this.toArray();
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._w;
  }
};
var Vector32 = class _Vector3 {
  constructor(x2 = 0, y2 = 0, z2 = 0) {
    _Vector3.prototype.isVector3 = true;
    this.x = x2;
    this.y = y2;
    this.z = z2;
  }
  set(x2, y2, z2) {
    if (z2 === void 0) z2 = this.z;
    this.x = x2;
    this.y = y2;
    this.z = z2;
    return this;
  }
  setScalar(scalar) {
    this.x = scalar;
    this.y = scalar;
    this.z = scalar;
    return this;
  }
  setX(x2) {
    this.x = x2;
    return this;
  }
  setY(y2) {
    this.y = y2;
    return this;
  }
  setZ(z2) {
    this.z = z2;
    return this;
  }
  setComponent(index7, value) {
    switch (index7) {
      case 0:
        this.x = value;
        break;
      case 1:
        this.y = value;
        break;
      case 2:
        this.z = value;
        break;
      default:
        throw new Error("index is out of range: " + index7);
    }
    return this;
  }
  getComponent(index7) {
    switch (index7) {
      case 0:
        return this.x;
      case 1:
        return this.y;
      case 2:
        return this.z;
      default:
        throw new Error("index is out of range: " + index7);
    }
  }
  clone() {
    return new this.constructor(this.x, this.y, this.z);
  }
  copy(v3) {
    this.x = v3.x;
    this.y = v3.y;
    this.z = v3.z;
    return this;
  }
  add(v3) {
    this.x += v3.x;
    this.y += v3.y;
    this.z += v3.z;
    return this;
  }
  addScalar(s2) {
    this.x += s2;
    this.y += s2;
    this.z += s2;
    return this;
  }
  addVectors(a2, b) {
    this.x = a2.x + b.x;
    this.y = a2.y + b.y;
    this.z = a2.z + b.z;
    return this;
  }
  addScaledVector(v3, s2) {
    this.x += v3.x * s2;
    this.y += v3.y * s2;
    this.z += v3.z * s2;
    return this;
  }
  sub(v3) {
    this.x -= v3.x;
    this.y -= v3.y;
    this.z -= v3.z;
    return this;
  }
  subScalar(s2) {
    this.x -= s2;
    this.y -= s2;
    this.z -= s2;
    return this;
  }
  subVectors(a2, b) {
    this.x = a2.x - b.x;
    this.y = a2.y - b.y;
    this.z = a2.z - b.z;
    return this;
  }
  multiply(v3) {
    this.x *= v3.x;
    this.y *= v3.y;
    this.z *= v3.z;
    return this;
  }
  multiplyScalar(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    return this;
  }
  multiplyVectors(a2, b) {
    this.x = a2.x * b.x;
    this.y = a2.y * b.y;
    this.z = a2.z * b.z;
    return this;
  }
  applyEuler(euler) {
    return this.applyQuaternion(_quaternion$42.setFromEuler(euler));
  }
  applyAxisAngle(axis, angle2) {
    return this.applyQuaternion(_quaternion$42.setFromAxisAngle(axis, angle2));
  }
  applyMatrix3(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[3] * y2 + e3[6] * z2;
    this.y = e3[1] * x2 + e3[4] * y2 + e3[7] * z2;
    this.z = e3[2] * x2 + e3[5] * y2 + e3[8] * z2;
    return this;
  }
  applyNormalMatrix(m2) {
    return this.applyMatrix3(m2).normalize();
  }
  applyMatrix4(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e3 = m2.elements;
    const w4 = 1 / (e3[3] * x2 + e3[7] * y2 + e3[11] * z2 + e3[15]);
    this.x = (e3[0] * x2 + e3[4] * y2 + e3[8] * z2 + e3[12]) * w4;
    this.y = (e3[1] * x2 + e3[5] * y2 + e3[9] * z2 + e3[13]) * w4;
    this.z = (e3[2] * x2 + e3[6] * y2 + e3[10] * z2 + e3[14]) * w4;
    return this;
  }
  applyQuaternion(q2) {
    const vx = this.x, vy = this.y, vz = this.z;
    const qx = q2.x, qy = q2.y, qz = q2.z, qw = q2.w;
    const tx = 2 * (qy * vz - qz * vy);
    const ty = 2 * (qz * vx - qx * vz);
    const tz = 2 * (qx * vy - qy * vx);
    this.x = vx + qw * tx + qy * tz - qz * ty;
    this.y = vy + qw * ty + qz * tx - qx * tz;
    this.z = vz + qw * tz + qx * ty - qy * tx;
    return this;
  }
  project(camera3) {
    return this.applyMatrix4(camera3.matrixWorldInverse).applyMatrix4(camera3.projectionMatrix);
  }
  unproject(camera3) {
    return this.applyMatrix4(camera3.projectionMatrixInverse).applyMatrix4(camera3.matrixWorld);
  }
  transformDirection(m2) {
    const x2 = this.x, y2 = this.y, z2 = this.z;
    const e3 = m2.elements;
    this.x = e3[0] * x2 + e3[4] * y2 + e3[8] * z2;
    this.y = e3[1] * x2 + e3[5] * y2 + e3[9] * z2;
    this.z = e3[2] * x2 + e3[6] * y2 + e3[10] * z2;
    return this.normalize();
  }
  divide(v3) {
    this.x /= v3.x;
    this.y /= v3.y;
    this.z /= v3.z;
    return this;
  }
  divideScalar(scalar) {
    return this.multiplyScalar(1 / scalar);
  }
  min(v3) {
    this.x = Math.min(this.x, v3.x);
    this.y = Math.min(this.y, v3.y);
    this.z = Math.min(this.z, v3.z);
    return this;
  }
  max(v3) {
    this.x = Math.max(this.x, v3.x);
    this.y = Math.max(this.y, v3.y);
    this.z = Math.max(this.z, v3.z);
    return this;
  }
  clamp(min4, max4) {
    this.x = Math.max(min4.x, Math.min(max4.x, this.x));
    this.y = Math.max(min4.y, Math.min(max4.y, this.y));
    this.z = Math.max(min4.z, Math.min(max4.z, this.z));
    return this;
  }
  clampScalar(minVal, maxVal) {
    this.x = Math.max(minVal, Math.min(maxVal, this.x));
    this.y = Math.max(minVal, Math.min(maxVal, this.y));
    this.z = Math.max(minVal, Math.min(maxVal, this.z));
    return this;
  }
  clampLength(min4, max4) {
    const length2 = this.length();
    return this.divideScalar(length2 || 1).multiplyScalar(Math.max(min4, Math.min(max4, length2)));
  }
  floor() {
    this.x = Math.floor(this.x);
    this.y = Math.floor(this.y);
    this.z = Math.floor(this.z);
    return this;
  }
  ceil() {
    this.x = Math.ceil(this.x);
    this.y = Math.ceil(this.y);
    this.z = Math.ceil(this.z);
    return this;
  }
  round() {
    this.x = Math.round(this.x);
    this.y = Math.round(this.y);
    this.z = Math.round(this.z);
    return this;
  }
  roundToZero() {
    this.x = Math.trunc(this.x);
    this.y = Math.trunc(this.y);
    this.z = Math.trunc(this.z);
    return this;
  }
  negate() {
    this.x = -this.x;
    this.y = -this.y;
    this.z = -this.z;
    return this;
  }
  dot(v3) {
    return this.x * v3.x + this.y * v3.y + this.z * v3.z;
  }
  // TODO lengthSquared?
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  length() {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
  }
  manhattanLength() {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);
  }
  normalize() {
    return this.divideScalar(this.length() || 1);
  }
  setLength(length2) {
    return this.normalize().multiplyScalar(length2);
  }
  lerp(v3, alpha) {
    this.x += (v3.x - this.x) * alpha;
    this.y += (v3.y - this.y) * alpha;
    this.z += (v3.z - this.z) * alpha;
    return this;
  }
  lerpVectors(v1, v22, alpha) {
    this.x = v1.x + (v22.x - v1.x) * alpha;
    this.y = v1.y + (v22.y - v1.y) * alpha;
    this.z = v1.z + (v22.z - v1.z) * alpha;
    return this;
  }
  cross(v3) {
    return this.crossVectors(this, v3);
  }
  crossVectors(a2, b) {
    const ax = a2.x, ay = a2.y, az = a2.z;
    const bx = b.x, by = b.y, bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  projectOnVector(v3) {
    const denominator = v3.lengthSq();
    if (denominator === 0) return this.set(0, 0, 0);
    const scalar = v3.dot(this) / denominator;
    return this.copy(v3).multiplyScalar(scalar);
  }
  projectOnPlane(planeNormal) {
    _vector$c2.copy(this).projectOnVector(planeNormal);
    return this.sub(_vector$c2);
  }
  reflect(normal2) {
    return this.sub(_vector$c2.copy(normal2).multiplyScalar(2 * this.dot(normal2)));
  }
  angleTo(v3) {
    const denominator = Math.sqrt(this.lengthSq() * v3.lengthSq());
    if (denominator === 0) return Math.PI / 2;
    const theta = this.dot(v3) / denominator;
    return Math.acos(clamp$1(theta, -1, 1));
  }
  distanceTo(v3) {
    return Math.sqrt(this.distanceToSquared(v3));
  }
  distanceToSquared(v3) {
    const dx = this.x - v3.x, dy = this.y - v3.y, dz = this.z - v3.z;
    return dx * dx + dy * dy + dz * dz;
  }
  manhattanDistanceTo(v3) {
    return Math.abs(this.x - v3.x) + Math.abs(this.y - v3.y) + Math.abs(this.z - v3.z);
  }
  setFromSpherical(s2) {
    return this.setFromSphericalCoords(s2.radius, s2.phi, s2.theta);
  }
  setFromSphericalCoords(radius, phi, theta) {
    const sinPhiRadius = Math.sin(phi) * radius;
    this.x = sinPhiRadius * Math.sin(theta);
    this.y = Math.cos(phi) * radius;
    this.z = sinPhiRadius * Math.cos(theta);
    return this;
  }
  setFromCylindrical(c4) {
    return this.setFromCylindricalCoords(c4.radius, c4.theta, c4.y);
  }
  setFromCylindricalCoords(radius, theta, y2) {
    this.x = radius * Math.sin(theta);
    this.y = y2;
    this.z = radius * Math.cos(theta);
    return this;
  }
  setFromMatrixPosition(m2) {
    const e3 = m2.elements;
    this.x = e3[12];
    this.y = e3[13];
    this.z = e3[14];
    return this;
  }
  setFromMatrixScale(m2) {
    const sx = this.setFromMatrixColumn(m2, 0).length();
    const sy = this.setFromMatrixColumn(m2, 1).length();
    const sz = this.setFromMatrixColumn(m2, 2).length();
    this.x = sx;
    this.y = sy;
    this.z = sz;
    return this;
  }
  setFromMatrixColumn(m2, index7) {
    return this.fromArray(m2.elements, index7 * 4);
  }
  setFromMatrix3Column(m2, index7) {
    return this.fromArray(m2.elements, index7 * 3);
  }
  setFromEuler(e3) {
    this.x = e3._x;
    this.y = e3._y;
    this.z = e3._z;
    return this;
  }
  setFromColor(c4) {
    this.x = c4.r;
    this.y = c4.g;
    this.z = c4.b;
    return this;
  }
  equals(v3) {
    return v3.x === this.x && v3.y === this.y && v3.z === this.z;
  }
  fromArray(array3, offset = 0) {
    this.x = array3[offset];
    this.y = array3[offset + 1];
    this.z = array3[offset + 2];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.x;
    array3[offset + 1] = this.y;
    array3[offset + 2] = this.z;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.x = attribute2.getX(index7);
    this.y = attribute2.getY(index7);
    this.z = attribute2.getZ(index7);
    return this;
  }
  random() {
    this.x = Math.random();
    this.y = Math.random();
    this.z = Math.random();
    return this;
  }
  randomDirection() {
    const theta = Math.random() * Math.PI * 2;
    const u5 = Math.random() * 2 - 1;
    const c4 = Math.sqrt(1 - u5 * u5);
    this.x = c4 * Math.cos(theta);
    this.y = u5;
    this.z = c4 * Math.sin(theta);
    return this;
  }
  *[Symbol.iterator]() {
    yield this.x;
    yield this.y;
    yield this.z;
  }
};
var _vector$c2 = new Vector32();
var _quaternion$42 = new Quaternion2();
var Box32 = class {
  constructor(min4 = new Vector32(Infinity, Infinity, Infinity), max4 = new Vector32(-Infinity, -Infinity, -Infinity)) {
    this.isBox3 = true;
    this.min = min4;
    this.max = max4;
  }
  set(min4, max4) {
    this.min.copy(min4);
    this.max.copy(max4);
    return this;
  }
  setFromArray(array3) {
    this.makeEmpty();
    for (let i2 = 0, il = array3.length; i2 < il; i2 += 3) {
      this.expandByPoint(_vector$b2.fromArray(array3, i2));
    }
    return this;
  }
  setFromBufferAttribute(attribute2) {
    this.makeEmpty();
    for (let i2 = 0, il = attribute2.count; i2 < il; i2++) {
      this.expandByPoint(_vector$b2.fromBufferAttribute(attribute2, i2));
    }
    return this;
  }
  setFromPoints(points) {
    this.makeEmpty();
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      this.expandByPoint(points[i2]);
    }
    return this;
  }
  setFromCenterAndSize(center, size) {
    const halfSize = _vector$b2.copy(size).multiplyScalar(0.5);
    this.min.copy(center).sub(halfSize);
    this.max.copy(center).add(halfSize);
    return this;
  }
  setFromObject(object2, precise = false) {
    this.makeEmpty();
    return this.expandByObject(object2, precise);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(box) {
    this.min.copy(box.min);
    this.max.copy(box.max);
    return this;
  }
  makeEmpty() {
    this.min.x = this.min.y = this.min.z = Infinity;
    this.max.x = this.max.y = this.max.z = -Infinity;
    return this;
  }
  isEmpty() {
    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;
  }
  getCenter(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.addVectors(this.min, this.max).multiplyScalar(0.5);
  }
  getSize(target) {
    return this.isEmpty() ? target.set(0, 0, 0) : target.subVectors(this.max, this.min);
  }
  expandByPoint(point2) {
    this.min.min(point2);
    this.max.max(point2);
    return this;
  }
  expandByVector(vector) {
    this.min.sub(vector);
    this.max.add(vector);
    return this;
  }
  expandByScalar(scalar) {
    this.min.addScalar(-scalar);
    this.max.addScalar(scalar);
    return this;
  }
  expandByObject(object2, precise = false) {
    object2.updateWorldMatrix(false, false);
    const geometry = object2.geometry;
    if (geometry !== void 0) {
      const positionAttribute = geometry.getAttribute("position");
      if (precise === true && positionAttribute !== void 0 && object2.isInstancedMesh !== true) {
        for (let i2 = 0, l2 = positionAttribute.count; i2 < l2; i2++) {
          if (object2.isMesh === true) {
            object2.getVertexPosition(i2, _vector$b2);
          } else {
            _vector$b2.fromBufferAttribute(positionAttribute, i2);
          }
          _vector$b2.applyMatrix4(object2.matrixWorld);
          this.expandByPoint(_vector$b2);
        }
      } else {
        if (object2.boundingBox !== void 0) {
          if (object2.boundingBox === null) {
            object2.computeBoundingBox();
          }
          _box$42.copy(object2.boundingBox);
        } else {
          if (geometry.boundingBox === null) {
            geometry.computeBoundingBox();
          }
          _box$42.copy(geometry.boundingBox);
        }
        _box$42.applyMatrix4(object2.matrixWorld);
        this.union(_box$42);
      }
    }
    const children2 = object2.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      this.expandByObject(children2[i2], precise);
    }
    return this;
  }
  containsPoint(point2) {
    return point2.x >= this.min.x && point2.x <= this.max.x && point2.y >= this.min.y && point2.y <= this.max.y && point2.z >= this.min.z && point2.z <= this.max.z;
  }
  containsBox(box) {
    return this.min.x <= box.min.x && box.max.x <= this.max.x && this.min.y <= box.min.y && box.max.y <= this.max.y && this.min.z <= box.min.z && box.max.z <= this.max.z;
  }
  getParameter(point2, target) {
    return target.set(
      (point2.x - this.min.x) / (this.max.x - this.min.x),
      (point2.y - this.min.y) / (this.max.y - this.min.y),
      (point2.z - this.min.z) / (this.max.z - this.min.z)
    );
  }
  intersectsBox(box) {
    return box.max.x >= this.min.x && box.min.x <= this.max.x && box.max.y >= this.min.y && box.min.y <= this.max.y && box.max.z >= this.min.z && box.min.z <= this.max.z;
  }
  intersectsSphere(sphere) {
    this.clampPoint(sphere.center, _vector$b2);
    return _vector$b2.distanceToSquared(sphere.center) <= sphere.radius * sphere.radius;
  }
  intersectsPlane(plane) {
    let min4, max4;
    if (plane.normal.x > 0) {
      min4 = plane.normal.x * this.min.x;
      max4 = plane.normal.x * this.max.x;
    } else {
      min4 = plane.normal.x * this.max.x;
      max4 = plane.normal.x * this.min.x;
    }
    if (plane.normal.y > 0) {
      min4 += plane.normal.y * this.min.y;
      max4 += plane.normal.y * this.max.y;
    } else {
      min4 += plane.normal.y * this.max.y;
      max4 += plane.normal.y * this.min.y;
    }
    if (plane.normal.z > 0) {
      min4 += plane.normal.z * this.min.z;
      max4 += plane.normal.z * this.max.z;
    } else {
      min4 += plane.normal.z * this.max.z;
      max4 += plane.normal.z * this.min.z;
    }
    return min4 <= -plane.constant && max4 >= -plane.constant;
  }
  intersectsTriangle(triangle) {
    if (this.isEmpty()) {
      return false;
    }
    this.getCenter(_center2);
    _extents2.subVectors(this.max, _center2);
    _v0$22.subVectors(triangle.a, _center2);
    _v1$72.subVectors(triangle.b, _center2);
    _v2$42.subVectors(triangle.c, _center2);
    _f02.subVectors(_v1$72, _v0$22);
    _f12.subVectors(_v2$42, _v1$72);
    _f22.subVectors(_v0$22, _v2$42);
    let axes = [
      0,
      -_f02.z,
      _f02.y,
      0,
      -_f12.z,
      _f12.y,
      0,
      -_f22.z,
      _f22.y,
      _f02.z,
      0,
      -_f02.x,
      _f12.z,
      0,
      -_f12.x,
      _f22.z,
      0,
      -_f22.x,
      -_f02.y,
      _f02.x,
      0,
      -_f12.y,
      _f12.x,
      0,
      -_f22.y,
      _f22.x,
      0
    ];
    if (!satForAxes2(axes, _v0$22, _v1$72, _v2$42, _extents2)) {
      return false;
    }
    axes = [1, 0, 0, 0, 1, 0, 0, 0, 1];
    if (!satForAxes2(axes, _v0$22, _v1$72, _v2$42, _extents2)) {
      return false;
    }
    _triangleNormal2.crossVectors(_f02, _f12);
    axes = [_triangleNormal2.x, _triangleNormal2.y, _triangleNormal2.z];
    return satForAxes2(axes, _v0$22, _v1$72, _v2$42, _extents2);
  }
  clampPoint(point2, target) {
    return target.copy(point2).clamp(this.min, this.max);
  }
  distanceToPoint(point2) {
    return this.clampPoint(point2, _vector$b2).distanceTo(point2);
  }
  getBoundingSphere(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
    } else {
      this.getCenter(target.center);
      target.radius = this.getSize(_vector$b2).length() * 0.5;
    }
    return target;
  }
  intersect(box) {
    this.min.max(box.min);
    this.max.min(box.max);
    if (this.isEmpty()) this.makeEmpty();
    return this;
  }
  union(box) {
    this.min.min(box.min);
    this.max.max(box.max);
    return this;
  }
  applyMatrix4(matrix) {
    if (this.isEmpty()) return this;
    _points2[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points2[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points2[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points2[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix);
    _points2[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix);
    _points2[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix);
    _points2[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix);
    _points2[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix);
    this.setFromPoints(_points2);
    return this;
  }
  translate(offset) {
    this.min.add(offset);
    this.max.add(offset);
    return this;
  }
  equals(box) {
    return box.min.equals(this.min) && box.max.equals(this.max);
  }
};
var _points2 = [
  new Vector32(),
  new Vector32(),
  new Vector32(),
  new Vector32(),
  new Vector32(),
  new Vector32(),
  new Vector32(),
  new Vector32()
];
var _vector$b2 = new Vector32();
var _box$42 = new Box32();
var _v0$22 = new Vector32();
var _v1$72 = new Vector32();
var _v2$42 = new Vector32();
var _f02 = new Vector32();
var _f12 = new Vector32();
var _f22 = new Vector32();
var _center2 = new Vector32();
var _extents2 = new Vector32();
var _triangleNormal2 = new Vector32();
var _testAxis2 = new Vector32();
function satForAxes2(axes, v0, v1, v22, extents) {
  for (let i2 = 0, j2 = axes.length - 3; i2 <= j2; i2 += 3) {
    _testAxis2.fromArray(axes, i2);
    const r2 = extents.x * Math.abs(_testAxis2.x) + extents.y * Math.abs(_testAxis2.y) + extents.z * Math.abs(_testAxis2.z);
    const p02 = v0.dot(_testAxis2);
    const p1 = v1.dot(_testAxis2);
    const p2 = v22.dot(_testAxis2);
    if (Math.max(-Math.max(p02, p1, p2), Math.min(p02, p1, p2)) > r2) {
      return false;
    }
  }
  return true;
}
var _box$32 = new Box32();
var _v1$62 = new Vector32();
var _v2$32 = new Vector32();
var Sphere2 = class {
  constructor(center = new Vector32(), radius = -1) {
    this.isSphere = true;
    this.center = center;
    this.radius = radius;
  }
  set(center, radius) {
    this.center.copy(center);
    this.radius = radius;
    return this;
  }
  setFromPoints(points, optionalCenter) {
    const center = this.center;
    if (optionalCenter !== void 0) {
      center.copy(optionalCenter);
    } else {
      _box$32.setFromPoints(points).getCenter(center);
    }
    let maxRadiusSq = 0;
    for (let i2 = 0, il = points.length; i2 < il; i2++) {
      maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(points[i2]));
    }
    this.radius = Math.sqrt(maxRadiusSq);
    return this;
  }
  copy(sphere) {
    this.center.copy(sphere.center);
    this.radius = sphere.radius;
    return this;
  }
  isEmpty() {
    return this.radius < 0;
  }
  makeEmpty() {
    this.center.set(0, 0, 0);
    this.radius = -1;
    return this;
  }
  containsPoint(point2) {
    return point2.distanceToSquared(this.center) <= this.radius * this.radius;
  }
  distanceToPoint(point2) {
    return point2.distanceTo(this.center) - this.radius;
  }
  intersectsSphere(sphere) {
    const radiusSum = this.radius + sphere.radius;
    return sphere.center.distanceToSquared(this.center) <= radiusSum * radiusSum;
  }
  intersectsBox(box) {
    return box.intersectsSphere(this);
  }
  intersectsPlane(plane) {
    return Math.abs(plane.distanceToPoint(this.center)) <= this.radius;
  }
  clampPoint(point2, target) {
    const deltaLengthSq = this.center.distanceToSquared(point2);
    target.copy(point2);
    if (deltaLengthSq > this.radius * this.radius) {
      target.sub(this.center).normalize();
      target.multiplyScalar(this.radius).add(this.center);
    }
    return target;
  }
  getBoundingBox(target) {
    if (this.isEmpty()) {
      target.makeEmpty();
      return target;
    }
    target.set(this.center, this.center);
    target.expandByScalar(this.radius);
    return target;
  }
  applyMatrix4(matrix) {
    this.center.applyMatrix4(matrix);
    this.radius = this.radius * matrix.getMaxScaleOnAxis();
    return this;
  }
  translate(offset) {
    this.center.add(offset);
    return this;
  }
  expandByPoint(point2) {
    if (this.isEmpty()) {
      this.center.copy(point2);
      this.radius = 0;
      return this;
    }
    _v1$62.subVectors(point2, this.center);
    const lengthSq2 = _v1$62.lengthSq();
    if (lengthSq2 > this.radius * this.radius) {
      const length2 = Math.sqrt(lengthSq2);
      const delta = (length2 - this.radius) * 0.5;
      this.center.addScaledVector(_v1$62, delta / length2);
      this.radius += delta;
    }
    return this;
  }
  union(sphere) {
    if (sphere.isEmpty()) {
      return this;
    }
    if (this.isEmpty()) {
      this.copy(sphere);
      return this;
    }
    if (this.center.equals(sphere.center) === true) {
      this.radius = Math.max(this.radius, sphere.radius);
    } else {
      _v2$32.subVectors(sphere.center, this.center).setLength(sphere.radius);
      this.expandByPoint(_v1$62.copy(sphere.center).add(_v2$32));
      this.expandByPoint(_v1$62.copy(sphere.center).sub(_v2$32));
    }
    return this;
  }
  equals(sphere) {
    return sphere.center.equals(this.center) && sphere.radius === this.radius;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _vector$a2 = new Vector32();
var _segCenter2 = new Vector32();
var _segDir2 = new Vector32();
var _diff2 = new Vector32();
var _edge12 = new Vector32();
var _edge22 = new Vector32();
var _normal$2 = new Vector32();
var Ray2 = class {
  constructor(origin = new Vector32(), direction2 = new Vector32(0, 0, -1)) {
    this.origin = origin;
    this.direction = direction2;
  }
  set(origin, direction2) {
    this.origin.copy(origin);
    this.direction.copy(direction2);
    return this;
  }
  copy(ray) {
    this.origin.copy(ray.origin);
    this.direction.copy(ray.direction);
    return this;
  }
  at(t4, target) {
    return target.copy(this.origin).addScaledVector(this.direction, t4);
  }
  lookAt(v3) {
    this.direction.copy(v3).sub(this.origin).normalize();
    return this;
  }
  recast(t4) {
    this.origin.copy(this.at(t4, _vector$a2));
    return this;
  }
  closestPointToPoint(point2, target) {
    target.subVectors(point2, this.origin);
    const directionDistance = target.dot(this.direction);
    if (directionDistance < 0) {
      return target.copy(this.origin);
    }
    return target.copy(this.origin).addScaledVector(this.direction, directionDistance);
  }
  distanceToPoint(point2) {
    return Math.sqrt(this.distanceSqToPoint(point2));
  }
  distanceSqToPoint(point2) {
    const directionDistance = _vector$a2.subVectors(point2, this.origin).dot(this.direction);
    if (directionDistance < 0) {
      return this.origin.distanceToSquared(point2);
    }
    _vector$a2.copy(this.origin).addScaledVector(this.direction, directionDistance);
    return _vector$a2.distanceToSquared(point2);
  }
  distanceSqToSegment(v0, v1, optionalPointOnRay, optionalPointOnSegment) {
    _segCenter2.copy(v0).add(v1).multiplyScalar(0.5);
    _segDir2.copy(v1).sub(v0).normalize();
    _diff2.copy(this.origin).sub(_segCenter2);
    const segExtent = v0.distanceTo(v1) * 0.5;
    const a01 = -this.direction.dot(_segDir2);
    const b0 = _diff2.dot(this.direction);
    const b1 = -_diff2.dot(_segDir2);
    const c4 = _diff2.lengthSq();
    const det = Math.abs(1 - a01 * a01);
    let s0, s1, sqrDist, extDet;
    if (det > 0) {
      s0 = a01 * b1 - b0;
      s1 = a01 * b0 - b1;
      extDet = segExtent * det;
      if (s0 >= 0) {
        if (s1 >= -extDet) {
          if (s1 <= extDet) {
            const invDet = 1 / det;
            s0 *= invDet;
            s1 *= invDet;
            sqrDist = s0 * (s0 + a01 * s1 + 2 * b0) + s1 * (a01 * s0 + s1 + 2 * b1) + c4;
          } else {
            s1 = segExtent;
            s0 = Math.max(0, -(a01 * s1 + b0));
            sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
          }
        } else {
          s1 = -segExtent;
          s0 = Math.max(0, -(a01 * s1 + b0));
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
        }
      } else {
        if (s1 <= -extDet) {
          s0 = Math.max(0, -(-a01 * segExtent + b0));
          s1 = s0 > 0 ? -segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
        } else if (s1 <= extDet) {
          s0 = 0;
          s1 = Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = s1 * (s1 + 2 * b1) + c4;
        } else {
          s0 = Math.max(0, -(a01 * segExtent + b0));
          s1 = s0 > 0 ? segExtent : Math.min(Math.max(-segExtent, -b1), segExtent);
          sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
        }
      }
    } else {
      s1 = a01 > 0 ? -segExtent : segExtent;
      s0 = Math.max(0, -(a01 * s1 + b0));
      sqrDist = -s0 * s0 + s1 * (s1 + 2 * b1) + c4;
    }
    if (optionalPointOnRay) {
      optionalPointOnRay.copy(this.origin).addScaledVector(this.direction, s0);
    }
    if (optionalPointOnSegment) {
      optionalPointOnSegment.copy(_segCenter2).addScaledVector(_segDir2, s1);
    }
    return sqrDist;
  }
  intersectSphere(sphere, target) {
    _vector$a2.subVectors(sphere.center, this.origin);
    const tca = _vector$a2.dot(this.direction);
    const d2 = _vector$a2.dot(_vector$a2) - tca * tca;
    const radius2 = sphere.radius * sphere.radius;
    if (d2 > radius2) return null;
    const thc = Math.sqrt(radius2 - d2);
    const t03 = tca - thc;
    const t13 = tca + thc;
    if (t13 < 0) return null;
    if (t03 < 0) return this.at(t13, target);
    return this.at(t03, target);
  }
  intersectsSphere(sphere) {
    return this.distanceSqToPoint(sphere.center) <= sphere.radius * sphere.radius;
  }
  distanceToPlane(plane) {
    const denominator = plane.normal.dot(this.direction);
    if (denominator === 0) {
      if (plane.distanceToPoint(this.origin) === 0) {
        return 0;
      }
      return null;
    }
    const t4 = -(this.origin.dot(plane.normal) + plane.constant) / denominator;
    return t4 >= 0 ? t4 : null;
  }
  intersectPlane(plane, target) {
    const t4 = this.distanceToPlane(plane);
    if (t4 === null) {
      return null;
    }
    return this.at(t4, target);
  }
  intersectsPlane(plane) {
    const distToPoint = plane.distanceToPoint(this.origin);
    if (distToPoint === 0) {
      return true;
    }
    const denominator = plane.normal.dot(this.direction);
    if (denominator * distToPoint < 0) {
      return true;
    }
    return false;
  }
  intersectBox(box, target) {
    let tmin, tmax, tymin, tymax, tzmin, tzmax;
    const invdirx = 1 / this.direction.x, invdiry = 1 / this.direction.y, invdirz = 1 / this.direction.z;
    const origin = this.origin;
    if (invdirx >= 0) {
      tmin = (box.min.x - origin.x) * invdirx;
      tmax = (box.max.x - origin.x) * invdirx;
    } else {
      tmin = (box.max.x - origin.x) * invdirx;
      tmax = (box.min.x - origin.x) * invdirx;
    }
    if (invdiry >= 0) {
      tymin = (box.min.y - origin.y) * invdiry;
      tymax = (box.max.y - origin.y) * invdiry;
    } else {
      tymin = (box.max.y - origin.y) * invdiry;
      tymax = (box.min.y - origin.y) * invdiry;
    }
    if (tmin > tymax || tymin > tmax) return null;
    if (tymin > tmin || isNaN(tmin)) tmin = tymin;
    if (tymax < tmax || isNaN(tmax)) tmax = tymax;
    if (invdirz >= 0) {
      tzmin = (box.min.z - origin.z) * invdirz;
      tzmax = (box.max.z - origin.z) * invdirz;
    } else {
      tzmin = (box.max.z - origin.z) * invdirz;
      tzmax = (box.min.z - origin.z) * invdirz;
    }
    if (tmin > tzmax || tzmin > tmax) return null;
    if (tzmin > tmin || tmin !== tmin) tmin = tzmin;
    if (tzmax < tmax || tmax !== tmax) tmax = tzmax;
    if (tmax < 0) return null;
    return this.at(tmin >= 0 ? tmin : tmax, target);
  }
  intersectsBox(box) {
    return this.intersectBox(box, _vector$a2) !== null;
  }
  intersectTriangle(a2, b, c4, backfaceCulling, target) {
    _edge12.subVectors(b, a2);
    _edge22.subVectors(c4, a2);
    _normal$2.crossVectors(_edge12, _edge22);
    let DdN = this.direction.dot(_normal$2);
    let sign6;
    if (DdN > 0) {
      if (backfaceCulling) return null;
      sign6 = 1;
    } else if (DdN < 0) {
      sign6 = -1;
      DdN = -DdN;
    } else {
      return null;
    }
    _diff2.subVectors(this.origin, a2);
    const DdQxE2 = sign6 * this.direction.dot(_edge22.crossVectors(_diff2, _edge22));
    if (DdQxE2 < 0) {
      return null;
    }
    const DdE1xQ = sign6 * this.direction.dot(_edge12.cross(_diff2));
    if (DdE1xQ < 0) {
      return null;
    }
    if (DdQxE2 + DdE1xQ > DdN) {
      return null;
    }
    const QdN = -sign6 * _diff2.dot(_normal$2);
    if (QdN < 0) {
      return null;
    }
    return this.at(QdN / DdN, target);
  }
  applyMatrix4(matrix4) {
    this.origin.applyMatrix4(matrix4);
    this.direction.transformDirection(matrix4);
    return this;
  }
  equals(ray) {
    return ray.origin.equals(this.origin) && ray.direction.equals(this.direction);
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var Matrix42 = class _Matrix4 {
  constructor(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    _Matrix4.prototype.isMatrix4 = true;
    this.elements = [
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ];
    if (n11 !== void 0) {
      this.set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44);
    }
  }
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te = this.elements;
    te[0] = n11;
    te[4] = n12;
    te[8] = n13;
    te[12] = n14;
    te[1] = n21;
    te[5] = n22;
    te[9] = n23;
    te[13] = n24;
    te[2] = n31;
    te[6] = n32;
    te[10] = n33;
    te[14] = n34;
    te[3] = n41;
    te[7] = n42;
    te[11] = n43;
    te[15] = n44;
    return this;
  }
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  clone() {
    return new _Matrix4().fromArray(this.elements);
  }
  copy(m2) {
    const te = this.elements;
    const me = m2.elements;
    te[0] = me[0];
    te[1] = me[1];
    te[2] = me[2];
    te[3] = me[3];
    te[4] = me[4];
    te[5] = me[5];
    te[6] = me[6];
    te[7] = me[7];
    te[8] = me[8];
    te[9] = me[9];
    te[10] = me[10];
    te[11] = me[11];
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    te[15] = me[15];
    return this;
  }
  copyPosition(m2) {
    const te = this.elements, me = m2.elements;
    te[12] = me[12];
    te[13] = me[13];
    te[14] = me[14];
    return this;
  }
  setFromMatrix3(m2) {
    const me = m2.elements;
    this.set(
      me[0],
      me[3],
      me[6],
      0,
      me[1],
      me[4],
      me[7],
      0,
      me[2],
      me[5],
      me[8],
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractBasis(xAxis, yAxis, zAxis) {
    xAxis.setFromMatrixColumn(this, 0);
    yAxis.setFromMatrixColumn(this, 1);
    zAxis.setFromMatrixColumn(this, 2);
    return this;
  }
  makeBasis(xAxis, yAxis, zAxis) {
    this.set(
      xAxis.x,
      yAxis.x,
      zAxis.x,
      0,
      xAxis.y,
      yAxis.y,
      zAxis.y,
      0,
      xAxis.z,
      yAxis.z,
      zAxis.z,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  extractRotation(m2) {
    const te = this.elements;
    const me = m2.elements;
    const scaleX = 1 / _v1$52.setFromMatrixColumn(m2, 0).length();
    const scaleY = 1 / _v1$52.setFromMatrixColumn(m2, 1).length();
    const scaleZ = 1 / _v1$52.setFromMatrixColumn(m2, 2).length();
    te[0] = me[0] * scaleX;
    te[1] = me[1] * scaleX;
    te[2] = me[2] * scaleX;
    te[3] = 0;
    te[4] = me[4] * scaleY;
    te[5] = me[5] * scaleY;
    te[6] = me[6] * scaleY;
    te[7] = 0;
    te[8] = me[8] * scaleZ;
    te[9] = me[9] * scaleZ;
    te[10] = me[10] * scaleZ;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromEuler(euler) {
    const te = this.elements;
    const x2 = euler.x, y2 = euler.y, z2 = euler.z;
    const a2 = Math.cos(x2), b = Math.sin(x2);
    const c4 = Math.cos(y2), d2 = Math.sin(y2);
    const e3 = Math.cos(z2), f2 = Math.sin(z2);
    if (euler.order === "XYZ") {
      const ae = a2 * e3, af = a2 * f2, be = b * e3, bf = b * f2;
      te[0] = c4 * e3;
      te[4] = -c4 * f2;
      te[8] = d2;
      te[1] = af + be * d2;
      te[5] = ae - bf * d2;
      te[9] = -b * c4;
      te[2] = bf - ae * d2;
      te[6] = be + af * d2;
      te[10] = a2 * c4;
    } else if (euler.order === "YXZ") {
      const ce2 = c4 * e3, cf = c4 * f2, de2 = d2 * e3, df = d2 * f2;
      te[0] = ce2 + df * b;
      te[4] = de2 * b - cf;
      te[8] = a2 * d2;
      te[1] = a2 * f2;
      te[5] = a2 * e3;
      te[9] = -b;
      te[2] = cf * b - de2;
      te[6] = df + ce2 * b;
      te[10] = a2 * c4;
    } else if (euler.order === "ZXY") {
      const ce2 = c4 * e3, cf = c4 * f2, de2 = d2 * e3, df = d2 * f2;
      te[0] = ce2 - df * b;
      te[4] = -a2 * f2;
      te[8] = de2 + cf * b;
      te[1] = cf + de2 * b;
      te[5] = a2 * e3;
      te[9] = df - ce2 * b;
      te[2] = -a2 * d2;
      te[6] = b;
      te[10] = a2 * c4;
    } else if (euler.order === "ZYX") {
      const ae = a2 * e3, af = a2 * f2, be = b * e3, bf = b * f2;
      te[0] = c4 * e3;
      te[4] = be * d2 - af;
      te[8] = ae * d2 + bf;
      te[1] = c4 * f2;
      te[5] = bf * d2 + ae;
      te[9] = af * d2 - be;
      te[2] = -d2;
      te[6] = b * c4;
      te[10] = a2 * c4;
    } else if (euler.order === "YZX") {
      const ac2 = a2 * c4, ad = a2 * d2, bc4 = b * c4, bd2 = b * d2;
      te[0] = c4 * e3;
      te[4] = bd2 - ac2 * f2;
      te[8] = bc4 * f2 + ad;
      te[1] = f2;
      te[5] = a2 * e3;
      te[9] = -b * e3;
      te[2] = -d2 * e3;
      te[6] = ad * f2 + bc4;
      te[10] = ac2 - bd2 * f2;
    } else if (euler.order === "XZY") {
      const ac2 = a2 * c4, ad = a2 * d2, bc4 = b * c4, bd2 = b * d2;
      te[0] = c4 * e3;
      te[4] = -f2;
      te[8] = d2 * e3;
      te[1] = ac2 * f2 + bd2;
      te[5] = a2 * e3;
      te[9] = ad * f2 - bc4;
      te[2] = bc4 * f2 - ad;
      te[6] = b * e3;
      te[10] = bd2 * f2 + ac2;
    }
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[12] = 0;
    te[13] = 0;
    te[14] = 0;
    te[15] = 1;
    return this;
  }
  makeRotationFromQuaternion(q2) {
    return this.compose(_zero2, q2, _one2);
  }
  lookAt(eye, target, up) {
    const te = this.elements;
    _z2.subVectors(eye, target);
    if (_z2.lengthSq() === 0) {
      _z2.z = 1;
    }
    _z2.normalize();
    _x2.crossVectors(up, _z2);
    if (_x2.lengthSq() === 0) {
      if (Math.abs(up.z) === 1) {
        _z2.x += 1e-4;
      } else {
        _z2.z += 1e-4;
      }
      _z2.normalize();
      _x2.crossVectors(up, _z2);
    }
    _x2.normalize();
    _y2.crossVectors(_z2, _x2);
    te[0] = _x2.x;
    te[4] = _y2.x;
    te[8] = _z2.x;
    te[1] = _x2.y;
    te[5] = _y2.y;
    te[9] = _z2.y;
    te[2] = _x2.z;
    te[6] = _y2.z;
    te[10] = _z2.z;
    return this;
  }
  multiply(m2) {
    return this.multiplyMatrices(this, m2);
  }
  premultiply(m2) {
    return this.multiplyMatrices(m2, this);
  }
  multiplyMatrices(a2, b) {
    const ae = a2.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  multiplyScalar(s2) {
    const te = this.elements;
    te[0] *= s2;
    te[4] *= s2;
    te[8] *= s2;
    te[12] *= s2;
    te[1] *= s2;
    te[5] *= s2;
    te[9] *= s2;
    te[13] *= s2;
    te[2] *= s2;
    te[6] *= s2;
    te[10] *= s2;
    te[14] *= s2;
    te[3] *= s2;
    te[7] *= s2;
    te[11] *= s2;
    te[15] *= s2;
    return this;
  }
  determinant() {
    const te = this.elements;
    const n11 = te[0], n12 = te[4], n13 = te[8], n14 = te[12];
    const n21 = te[1], n22 = te[5], n23 = te[9], n24 = te[13];
    const n31 = te[2], n32 = te[6], n33 = te[10], n34 = te[14];
    const n41 = te[3], n42 = te[7], n43 = te[11], n44 = te[15];
    return n41 * (+n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34) + n42 * (+n11 * n23 * n34 - n11 * n24 * n33 + n14 * n21 * n33 - n13 * n21 * n34 + n13 * n24 * n31 - n14 * n23 * n31) + n43 * (+n11 * n24 * n32 - n11 * n22 * n34 - n14 * n21 * n32 + n12 * n21 * n34 + n14 * n22 * n31 - n12 * n24 * n31) + n44 * (-n13 * n22 * n31 - n11 * n23 * n32 + n11 * n22 * n33 + n13 * n21 * n32 - n12 * n21 * n33 + n12 * n23 * n31);
  }
  transpose() {
    const te = this.elements;
    let tmp3;
    tmp3 = te[1];
    te[1] = te[4];
    te[4] = tmp3;
    tmp3 = te[2];
    te[2] = te[8];
    te[8] = tmp3;
    tmp3 = te[6];
    te[6] = te[9];
    te[9] = tmp3;
    tmp3 = te[3];
    te[3] = te[12];
    te[12] = tmp3;
    tmp3 = te[7];
    te[7] = te[13];
    te[13] = tmp3;
    tmp3 = te[11];
    te[11] = te[14];
    te[14] = tmp3;
    return this;
  }
  setPosition(x2, y2, z2) {
    const te = this.elements;
    if (x2.isVector3) {
      te[12] = x2.x;
      te[13] = x2.y;
      te[14] = x2.z;
    } else {
      te[12] = x2;
      te[13] = y2;
      te[14] = z2;
    }
    return this;
  }
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t122 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t122 + n31 * t13 + n41 * t14;
    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t122 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  scale(v3) {
    const te = this.elements;
    const x2 = v3.x, y2 = v3.y, z2 = v3.z;
    te[0] *= x2;
    te[4] *= y2;
    te[8] *= z2;
    te[1] *= x2;
    te[5] *= y2;
    te[9] *= z2;
    te[2] *= x2;
    te[6] *= y2;
    te[10] *= z2;
    te[3] *= x2;
    te[7] *= y2;
    te[11] *= z2;
    return this;
  }
  getMaxScaleOnAxis() {
    const te = this.elements;
    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];
    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];
    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];
    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq));
  }
  makeTranslation(x2, y2, z2) {
    if (x2.isVector3) {
      this.set(
        1,
        0,
        0,
        x2.x,
        0,
        1,
        0,
        x2.y,
        0,
        0,
        1,
        x2.z,
        0,
        0,
        0,
        1
      );
    } else {
      this.set(
        1,
        0,
        0,
        x2,
        0,
        1,
        0,
        y2,
        0,
        0,
        1,
        z2,
        0,
        0,
        0,
        1
      );
    }
    return this;
  }
  makeRotationX(theta) {
    const c4 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(
      1,
      0,
      0,
      0,
      0,
      c4,
      -s2,
      0,
      0,
      s2,
      c4,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationY(theta) {
    const c4 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(
      c4,
      0,
      s2,
      0,
      0,
      1,
      0,
      0,
      -s2,
      0,
      c4,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationZ(theta) {
    const c4 = Math.cos(theta), s2 = Math.sin(theta);
    this.set(
      c4,
      -s2,
      0,
      0,
      s2,
      c4,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeRotationAxis(axis, angle2) {
    const c4 = Math.cos(angle2);
    const s2 = Math.sin(angle2);
    const t4 = 1 - c4;
    const x2 = axis.x, y2 = axis.y, z2 = axis.z;
    const tx = t4 * x2, ty = t4 * y2;
    this.set(
      tx * x2 + c4,
      tx * y2 - s2 * z2,
      tx * z2 + s2 * y2,
      0,
      tx * y2 + s2 * z2,
      ty * y2 + c4,
      ty * z2 - s2 * x2,
      0,
      tx * z2 - s2 * y2,
      ty * z2 + s2 * x2,
      t4 * z2 * z2 + c4,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeScale(x2, y2, z2) {
    this.set(
      x2,
      0,
      0,
      0,
      0,
      y2,
      0,
      0,
      0,
      0,
      z2,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  makeShear(xy, xz, yx, yz, zx, zy) {
    this.set(
      1,
      yx,
      zx,
      0,
      xy,
      1,
      zy,
      0,
      xz,
      yz,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  compose(position, quaternion, scale2) {
    const te = this.elements;
    const x2 = quaternion._x, y2 = quaternion._y, z2 = quaternion._z, w4 = quaternion._w;
    const x22 = x2 + x2, y22 = y2 + y2, z22 = z2 + z2;
    const xx = x2 * x22, xy = x2 * y22, xz = x2 * z22;
    const yy = y2 * y22, yz = y2 * z22, zz = z2 * z22;
    const wx = w4 * x22, wy = w4 * y22, wz = w4 * z22;
    const sx = scale2.x, sy = scale2.y, sz = scale2.z;
    te[0] = (1 - (yy + zz)) * sx;
    te[1] = (xy + wz) * sx;
    te[2] = (xz - wy) * sx;
    te[3] = 0;
    te[4] = (xy - wz) * sy;
    te[5] = (1 - (xx + zz)) * sy;
    te[6] = (yz + wx) * sy;
    te[7] = 0;
    te[8] = (xz + wy) * sz;
    te[9] = (yz - wx) * sz;
    te[10] = (1 - (xx + yy)) * sz;
    te[11] = 0;
    te[12] = position.x;
    te[13] = position.y;
    te[14] = position.z;
    te[15] = 1;
    return this;
  }
  decompose(position, quaternion, scale2) {
    const te = this.elements;
    let sx = _v1$52.set(te[0], te[1], te[2]).length();
    const sy = _v1$52.set(te[4], te[5], te[6]).length();
    const sz = _v1$52.set(te[8], te[9], te[10]).length();
    const det = this.determinant();
    if (det < 0) sx = -sx;
    position.x = te[12];
    position.y = te[13];
    position.z = te[14];
    _m1$22.copy(this);
    const invSX = 1 / sx;
    const invSY = 1 / sy;
    const invSZ = 1 / sz;
    _m1$22.elements[0] *= invSX;
    _m1$22.elements[1] *= invSX;
    _m1$22.elements[2] *= invSX;
    _m1$22.elements[4] *= invSY;
    _m1$22.elements[5] *= invSY;
    _m1$22.elements[6] *= invSY;
    _m1$22.elements[8] *= invSZ;
    _m1$22.elements[9] *= invSZ;
    _m1$22.elements[10] *= invSZ;
    quaternion.setFromRotationMatrix(_m1$22);
    scale2.x = sx;
    scale2.y = sy;
    scale2.z = sz;
    return this;
  }
  makePerspective(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem2) {
    const te = this.elements;
    const x2 = 2 * near / (right - left);
    const y2 = 2 * near / (top - bottom);
    const a2 = (right + left) / (right - left);
    const b = (top + bottom) / (top - bottom);
    let c4, d2;
    if (coordinateSystem === WebGLCoordinateSystem2) {
      c4 = -(far + near) / (far - near);
      d2 = -2 * far * near / (far - near);
    } else if (coordinateSystem === WebGPUCoordinateSystem2) {
      c4 = -far / (far - near);
      d2 = -far * near / (far - near);
    } else {
      throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = x2;
    te[4] = 0;
    te[8] = a2;
    te[12] = 0;
    te[1] = 0;
    te[5] = y2;
    te[9] = b;
    te[13] = 0;
    te[2] = 0;
    te[6] = 0;
    te[10] = c4;
    te[14] = d2;
    te[3] = 0;
    te[7] = 0;
    te[11] = -1;
    te[15] = 0;
    return this;
  }
  makeOrthographic(left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem2) {
    const te = this.elements;
    const w4 = 1 / (right - left);
    const h2 = 1 / (top - bottom);
    const p2 = 1 / (far - near);
    const x2 = (right + left) * w4;
    const y2 = (top + bottom) * h2;
    let z2, zInv;
    if (coordinateSystem === WebGLCoordinateSystem2) {
      z2 = (far + near) * p2;
      zInv = -2 * p2;
    } else if (coordinateSystem === WebGPUCoordinateSystem2) {
      z2 = near * p2;
      zInv = -1 * p2;
    } else {
      throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: " + coordinateSystem);
    }
    te[0] = 2 * w4;
    te[4] = 0;
    te[8] = 0;
    te[12] = -x2;
    te[1] = 0;
    te[5] = 2 * h2;
    te[9] = 0;
    te[13] = -y2;
    te[2] = 0;
    te[6] = 0;
    te[10] = zInv;
    te[14] = -z2;
    te[3] = 0;
    te[7] = 0;
    te[11] = 0;
    te[15] = 1;
    return this;
  }
  equals(matrix) {
    const te = this.elements;
    const me = matrix.elements;
    for (let i2 = 0; i2 < 16; i2++) {
      if (te[i2] !== me[i2]) return false;
    }
    return true;
  }
  fromArray(array3, offset = 0) {
    for (let i2 = 0; i2 < 16; i2++) {
      this.elements[i2] = array3[i2 + offset];
    }
    return this;
  }
  toArray(array3 = [], offset = 0) {
    const te = this.elements;
    array3[offset] = te[0];
    array3[offset + 1] = te[1];
    array3[offset + 2] = te[2];
    array3[offset + 3] = te[3];
    array3[offset + 4] = te[4];
    array3[offset + 5] = te[5];
    array3[offset + 6] = te[6];
    array3[offset + 7] = te[7];
    array3[offset + 8] = te[8];
    array3[offset + 9] = te[9];
    array3[offset + 10] = te[10];
    array3[offset + 11] = te[11];
    array3[offset + 12] = te[12];
    array3[offset + 13] = te[13];
    array3[offset + 14] = te[14];
    array3[offset + 15] = te[15];
    return array3;
  }
};
var _v1$52 = new Vector32();
var _m1$22 = new Matrix42();
var _zero2 = new Vector32(0, 0, 0);
var _one2 = new Vector32(1, 1, 1);
var _x2 = new Vector32();
var _y2 = new Vector32();
var _z2 = new Vector32();
var _matrix$22 = new Matrix42();
var _quaternion$32 = new Quaternion2();
var Euler2 = class _Euler {
  constructor(x2 = 0, y2 = 0, z2 = 0, order = _Euler.DEFAULT_ORDER) {
    this.isEuler = true;
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._order = order;
  }
  get x() {
    return this._x;
  }
  set x(value) {
    this._x = value;
    this._onChangeCallback();
  }
  get y() {
    return this._y;
  }
  set y(value) {
    this._y = value;
    this._onChangeCallback();
  }
  get z() {
    return this._z;
  }
  set z(value) {
    this._z = value;
    this._onChangeCallback();
  }
  get order() {
    return this._order;
  }
  set order(value) {
    this._order = value;
    this._onChangeCallback();
  }
  set(x2, y2, z2, order = this._order) {
    this._x = x2;
    this._y = y2;
    this._z = z2;
    this._order = order;
    this._onChangeCallback();
    return this;
  }
  clone() {
    return new this.constructor(this._x, this._y, this._z, this._order);
  }
  copy(euler) {
    this._x = euler._x;
    this._y = euler._y;
    this._z = euler._z;
    this._order = euler._order;
    this._onChangeCallback();
    return this;
  }
  setFromRotationMatrix(m2, order = this._order, update20 = true) {
    const te = m2.elements;
    const m11 = te[0], m12 = te[4], m13 = te[8];
    const m21 = te[1], m22 = te[5], m23 = te[9];
    const m31 = te[2], m32 = te[6], m33 = te[10];
    switch (order) {
      case "XYZ":
        this._y = Math.asin(clamp$1(m13, -1, 1));
        if (Math.abs(m13) < 0.9999999) {
          this._x = Math.atan2(-m23, m33);
          this._z = Math.atan2(-m12, m11);
        } else {
          this._x = Math.atan2(m32, m22);
          this._z = 0;
        }
        break;
      case "YXZ":
        this._x = Math.asin(-clamp$1(m23, -1, 1));
        if (Math.abs(m23) < 0.9999999) {
          this._y = Math.atan2(m13, m33);
          this._z = Math.atan2(m21, m22);
        } else {
          this._y = Math.atan2(-m31, m11);
          this._z = 0;
        }
        break;
      case "ZXY":
        this._x = Math.asin(clamp$1(m32, -1, 1));
        if (Math.abs(m32) < 0.9999999) {
          this._y = Math.atan2(-m31, m33);
          this._z = Math.atan2(-m12, m22);
        } else {
          this._y = 0;
          this._z = Math.atan2(m21, m11);
        }
        break;
      case "ZYX":
        this._y = Math.asin(-clamp$1(m31, -1, 1));
        if (Math.abs(m31) < 0.9999999) {
          this._x = Math.atan2(m32, m33);
          this._z = Math.atan2(m21, m11);
        } else {
          this._x = 0;
          this._z = Math.atan2(-m12, m22);
        }
        break;
      case "YZX":
        this._z = Math.asin(clamp$1(m21, -1, 1));
        if (Math.abs(m21) < 0.9999999) {
          this._x = Math.atan2(-m23, m22);
          this._y = Math.atan2(-m31, m11);
        } else {
          this._x = 0;
          this._y = Math.atan2(m13, m33);
        }
        break;
      case "XZY":
        this._z = Math.asin(-clamp$1(m12, -1, 1));
        if (Math.abs(m12) < 0.9999999) {
          this._x = Math.atan2(m32, m22);
          this._y = Math.atan2(m13, m11);
        } else {
          this._x = Math.atan2(-m23, m33);
          this._y = 0;
        }
        break;
      default:
        console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: " + order);
    }
    this._order = order;
    if (update20 === true) this._onChangeCallback();
    return this;
  }
  setFromQuaternion(q2, order, update20) {
    _matrix$22.makeRotationFromQuaternion(q2);
    return this.setFromRotationMatrix(_matrix$22, order, update20);
  }
  setFromVector3(v3, order = this._order) {
    return this.set(v3.x, v3.y, v3.z, order);
  }
  reorder(newOrder) {
    _quaternion$32.setFromEuler(this);
    return this.setFromQuaternion(_quaternion$32, newOrder);
  }
  equals(euler) {
    return euler._x === this._x && euler._y === this._y && euler._z === this._z && euler._order === this._order;
  }
  fromArray(array3) {
    this._x = array3[0];
    this._y = array3[1];
    this._z = array3[2];
    if (array3[3] !== void 0) this._order = array3[3];
    this._onChangeCallback();
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this._x;
    array3[offset + 1] = this._y;
    array3[offset + 2] = this._z;
    array3[offset + 3] = this._order;
    return array3;
  }
  _onChange(callback) {
    this._onChangeCallback = callback;
    return this;
  }
  _onChangeCallback() {
  }
  *[Symbol.iterator]() {
    yield this._x;
    yield this._y;
    yield this._z;
    yield this._order;
  }
};
Euler2.DEFAULT_ORDER = "XYZ";
var Layers2 = class {
  constructor() {
    this.mask = 1 | 0;
  }
  set(channel) {
    this.mask = (1 << channel | 0) >>> 0;
  }
  enable(channel) {
    this.mask |= 1 << channel | 0;
  }
  enableAll() {
    this.mask = 4294967295 | 0;
  }
  toggle(channel) {
    this.mask ^= 1 << channel | 0;
  }
  disable(channel) {
    this.mask &= ~(1 << channel | 0);
  }
  disableAll() {
    this.mask = 0;
  }
  test(layers2) {
    return (this.mask & layers2.mask) !== 0;
  }
  isEnabled(channel) {
    return (this.mask & (1 << channel | 0)) !== 0;
  }
};
var _object3DId2 = 0;
var _v1$42 = new Vector32();
var _q12 = new Quaternion2();
var _m1$12 = new Matrix42();
var _target$1 = new Vector32();
var _position$32 = new Vector32();
var _scale$22 = new Vector32();
var _quaternion$22 = new Quaternion2();
var _xAxis2 = new Vector32(1, 0, 0);
var _yAxis2 = new Vector32(0, 1, 0);
var _zAxis2 = new Vector32(0, 0, 1);
var _addedEvent2 = { type: "added" };
var _removedEvent2 = { type: "removed" };
var _childaddedEvent2 = { type: "childadded", child: null };
var _childremovedEvent2 = { type: "childremoved", child: null };
var Object3D2 = class _Object3D extends EventDispatcher2 {
  constructor() {
    super();
    this.isObject3D = true;
    Object.defineProperty(this, "id", { value: _object3DId2++ });
    this.uuid = generateUUID2();
    this.name = "";
    this.type = "Object3D";
    this.parent = null;
    this.children = [];
    this.up = _Object3D.DEFAULT_UP.clone();
    const position = new Vector32();
    const rotation = new Euler2();
    const quaternion = new Quaternion2();
    const scale2 = new Vector32(1, 1, 1);
    function onRotationChange() {
      quaternion.setFromEuler(rotation, false);
    }
    function onQuaternionChange() {
      rotation.setFromQuaternion(quaternion, void 0, false);
    }
    rotation._onChange(onRotationChange);
    quaternion._onChange(onQuaternionChange);
    Object.defineProperties(this, {
      position: {
        configurable: true,
        enumerable: true,
        value: position
      },
      rotation: {
        configurable: true,
        enumerable: true,
        value: rotation
      },
      quaternion: {
        configurable: true,
        enumerable: true,
        value: quaternion
      },
      scale: {
        configurable: true,
        enumerable: true,
        value: scale2
      },
      modelViewMatrix: {
        value: new Matrix42()
      },
      normalMatrix: {
        value: new Matrix32()
      }
    });
    this.matrix = new Matrix42();
    this.matrixWorld = new Matrix42();
    this.matrixAutoUpdate = _Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
    this.matrixWorldAutoUpdate = _Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE;
    this.matrixWorldNeedsUpdate = false;
    this.layers = new Layers2();
    this.visible = true;
    this.castShadow = false;
    this.receiveShadow = false;
    this.frustumCulled = true;
    this.renderOrder = 0;
    this.animations = [];
    this.userData = {};
  }
  onBeforeShadow() {
  }
  onAfterShadow() {
  }
  onBeforeRender() {
  }
  onAfterRender() {
  }
  applyMatrix4(matrix) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    this.matrix.premultiply(matrix);
    this.matrix.decompose(this.position, this.quaternion, this.scale);
  }
  applyQuaternion(q2) {
    this.quaternion.premultiply(q2);
    return this;
  }
  setRotationFromAxisAngle(axis, angle2) {
    this.quaternion.setFromAxisAngle(axis, angle2);
  }
  setRotationFromEuler(euler) {
    this.quaternion.setFromEuler(euler, true);
  }
  setRotationFromMatrix(m2) {
    this.quaternion.setFromRotationMatrix(m2);
  }
  setRotationFromQuaternion(q2) {
    this.quaternion.copy(q2);
  }
  rotateOnAxis(axis, angle2) {
    _q12.setFromAxisAngle(axis, angle2);
    this.quaternion.multiply(_q12);
    return this;
  }
  rotateOnWorldAxis(axis, angle2) {
    _q12.setFromAxisAngle(axis, angle2);
    this.quaternion.premultiply(_q12);
    return this;
  }
  rotateX(angle2) {
    return this.rotateOnAxis(_xAxis2, angle2);
  }
  rotateY(angle2) {
    return this.rotateOnAxis(_yAxis2, angle2);
  }
  rotateZ(angle2) {
    return this.rotateOnAxis(_zAxis2, angle2);
  }
  translateOnAxis(axis, distance3) {
    _v1$42.copy(axis).applyQuaternion(this.quaternion);
    this.position.add(_v1$42.multiplyScalar(distance3));
    return this;
  }
  translateX(distance3) {
    return this.translateOnAxis(_xAxis2, distance3);
  }
  translateY(distance3) {
    return this.translateOnAxis(_yAxis2, distance3);
  }
  translateZ(distance3) {
    return this.translateOnAxis(_zAxis2, distance3);
  }
  localToWorld(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(this.matrixWorld);
  }
  worldToLocal(vector) {
    this.updateWorldMatrix(true, false);
    return vector.applyMatrix4(_m1$12.copy(this.matrixWorld).invert());
  }
  lookAt(x2, y2, z2) {
    if (x2.isVector3) {
      _target$1.copy(x2);
    } else {
      _target$1.set(x2, y2, z2);
    }
    const parent2 = this.parent;
    this.updateWorldMatrix(true, false);
    _position$32.setFromMatrixPosition(this.matrixWorld);
    if (this.isCamera || this.isLight) {
      _m1$12.lookAt(_position$32, _target$1, this.up);
    } else {
      _m1$12.lookAt(_target$1, _position$32, this.up);
    }
    this.quaternion.setFromRotationMatrix(_m1$12);
    if (parent2) {
      _m1$12.extractRotation(parent2.matrixWorld);
      _q12.setFromRotationMatrix(_m1$12);
      this.quaternion.premultiply(_q12.invert());
    }
  }
  add(object2) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.add(arguments[i2]);
      }
      return this;
    }
    if (object2 === this) {
      console.error("THREE.Object3D.add: object can't be added as a child of itself.", object2);
      return this;
    }
    if (object2 && object2.isObject3D) {
      object2.removeFromParent();
      object2.parent = this;
      this.children.push(object2);
      object2.dispatchEvent(_addedEvent2);
      _childaddedEvent2.child = object2;
      this.dispatchEvent(_childaddedEvent2);
      _childaddedEvent2.child = null;
    } else {
      console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.", object2);
    }
    return this;
  }
  remove(object2) {
    if (arguments.length > 1) {
      for (let i2 = 0; i2 < arguments.length; i2++) {
        this.remove(arguments[i2]);
      }
      return this;
    }
    const index7 = this.children.indexOf(object2);
    if (index7 !== -1) {
      object2.parent = null;
      this.children.splice(index7, 1);
      object2.dispatchEvent(_removedEvent2);
      _childremovedEvent2.child = object2;
      this.dispatchEvent(_childremovedEvent2);
      _childremovedEvent2.child = null;
    }
    return this;
  }
  removeFromParent() {
    const parent2 = this.parent;
    if (parent2 !== null) {
      parent2.remove(this);
    }
    return this;
  }
  clear() {
    return this.remove(...this.children);
  }
  attach(object2) {
    this.updateWorldMatrix(true, false);
    _m1$12.copy(this.matrixWorld).invert();
    if (object2.parent !== null) {
      object2.parent.updateWorldMatrix(true, false);
      _m1$12.multiply(object2.parent.matrixWorld);
    }
    object2.applyMatrix4(_m1$12);
    object2.removeFromParent();
    object2.parent = this;
    this.children.push(object2);
    object2.updateWorldMatrix(false, true);
    object2.dispatchEvent(_addedEvent2);
    _childaddedEvent2.child = object2;
    this.dispatchEvent(_childaddedEvent2);
    _childaddedEvent2.child = null;
    return this;
  }
  getObjectById(id2) {
    return this.getObjectByProperty("id", id2);
  }
  getObjectByName(name) {
    return this.getObjectByProperty("name", name);
  }
  getObjectByProperty(name, value) {
    if (this[name] === value) return this;
    for (let i2 = 0, l2 = this.children.length; i2 < l2; i2++) {
      const child = this.children[i2];
      const object2 = child.getObjectByProperty(name, value);
      if (object2 !== void 0) {
        return object2;
      }
    }
    return void 0;
  }
  getObjectsByProperty(name, value, result = []) {
    if (this[name] === value) result.push(this);
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      children2[i2].getObjectsByProperty(name, value, result);
    }
    return result;
  }
  getWorldPosition(target) {
    this.updateWorldMatrix(true, false);
    return target.setFromMatrixPosition(this.matrixWorld);
  }
  getWorldQuaternion(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$32, target, _scale$22);
    return target;
  }
  getWorldScale(target) {
    this.updateWorldMatrix(true, false);
    this.matrixWorld.decompose(_position$32, _quaternion$22, target);
    return target;
  }
  getWorldDirection(target) {
    this.updateWorldMatrix(true, false);
    const e3 = this.matrixWorld.elements;
    return target.set(e3[8], e3[9], e3[10]).normalize();
  }
  raycast() {
  }
  traverse(callback) {
    callback(this);
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      children2[i2].traverse(callback);
    }
  }
  traverseVisible(callback) {
    if (this.visible === false) return;
    callback(this);
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      children2[i2].traverseVisible(callback);
    }
  }
  traverseAncestors(callback) {
    const parent2 = this.parent;
    if (parent2 !== null) {
      callback(parent2);
      parent2.traverseAncestors(callback);
    }
  }
  updateMatrix() {
    this.matrix.compose(this.position, this.quaternion, this.scale);
    this.matrixWorldNeedsUpdate = true;
  }
  updateMatrixWorld(force) {
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldNeedsUpdate || force) {
      if (this.matrixWorldAutoUpdate === true) {
        if (this.parent === null) {
          this.matrixWorld.copy(this.matrix);
        } else {
          this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
        }
      }
      this.matrixWorldNeedsUpdate = false;
      force = true;
    }
    const children2 = this.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      const child = children2[i2];
      child.updateMatrixWorld(force);
    }
  }
  updateWorldMatrix(updateParents, updateChildren) {
    const parent2 = this.parent;
    if (updateParents === true && parent2 !== null) {
      parent2.updateWorldMatrix(true, false);
    }
    if (this.matrixAutoUpdate) this.updateMatrix();
    if (this.matrixWorldAutoUpdate === true) {
      if (this.parent === null) {
        this.matrixWorld.copy(this.matrix);
      } else {
        this.matrixWorld.multiplyMatrices(this.parent.matrixWorld, this.matrix);
      }
    }
    if (updateChildren === true) {
      const children2 = this.children;
      for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
        const child = children2[i2];
        child.updateWorldMatrix(false, true);
      }
    }
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    const output2 = {};
    if (isRootObject) {
      meta = {
        geometries: {},
        materials: {},
        textures: {},
        images: {},
        shapes: {},
        skeletons: {},
        animations: {},
        nodes: {}
      };
      output2.metadata = {
        version: 4.6,
        type: "Object",
        generator: "Object3D.toJSON"
      };
    }
    const object2 = {};
    object2.uuid = this.uuid;
    object2.type = this.type;
    if (this.name !== "") object2.name = this.name;
    if (this.castShadow === true) object2.castShadow = true;
    if (this.receiveShadow === true) object2.receiveShadow = true;
    if (this.visible === false) object2.visible = false;
    if (this.frustumCulled === false) object2.frustumCulled = false;
    if (this.renderOrder !== 0) object2.renderOrder = this.renderOrder;
    if (Object.keys(this.userData).length > 0) object2.userData = this.userData;
    object2.layers = this.layers.mask;
    object2.matrix = this.matrix.toArray();
    object2.up = this.up.toArray();
    if (this.matrixAutoUpdate === false) object2.matrixAutoUpdate = false;
    if (this.isInstancedMesh) {
      object2.type = "InstancedMesh";
      object2.count = this.count;
      object2.instanceMatrix = this.instanceMatrix.toJSON();
      if (this.instanceColor !== null) object2.instanceColor = this.instanceColor.toJSON();
    }
    if (this.isBatchedMesh) {
      object2.type = "BatchedMesh";
      object2.perObjectFrustumCulled = this.perObjectFrustumCulled;
      object2.sortObjects = this.sortObjects;
      object2.drawRanges = this._drawRanges;
      object2.reservedRanges = this._reservedRanges;
      object2.visibility = this._visibility;
      object2.active = this._active;
      object2.bounds = this._bounds.map((bound) => ({
        boxInitialized: bound.boxInitialized,
        boxMin: bound.box.min.toArray(),
        boxMax: bound.box.max.toArray(),
        sphereInitialized: bound.sphereInitialized,
        sphereRadius: bound.sphere.radius,
        sphereCenter: bound.sphere.center.toArray()
      }));
      object2.maxInstanceCount = this._maxInstanceCount;
      object2.maxVertexCount = this._maxVertexCount;
      object2.maxIndexCount = this._maxIndexCount;
      object2.geometryInitialized = this._geometryInitialized;
      object2.geometryCount = this._geometryCount;
      object2.matricesTexture = this._matricesTexture.toJSON(meta);
      if (this._colorsTexture !== null) object2.colorsTexture = this._colorsTexture.toJSON(meta);
      if (this.boundingSphere !== null) {
        object2.boundingSphere = {
          center: object2.boundingSphere.center.toArray(),
          radius: object2.boundingSphere.radius
        };
      }
      if (this.boundingBox !== null) {
        object2.boundingBox = {
          min: object2.boundingBox.min.toArray(),
          max: object2.boundingBox.max.toArray()
        };
      }
    }
    function serialize(library, element2) {
      if (library[element2.uuid] === void 0) {
        library[element2.uuid] = element2.toJSON(meta);
      }
      return element2.uuid;
    }
    if (this.isScene) {
      if (this.background) {
        if (this.background.isColor) {
          object2.background = this.background.toJSON();
        } else if (this.background.isTexture) {
          object2.background = this.background.toJSON(meta).uuid;
        }
      }
      if (this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true) {
        object2.environment = this.environment.toJSON(meta).uuid;
      }
    } else if (this.isMesh || this.isLine || this.isPoints) {
      object2.geometry = serialize(meta.geometries, this.geometry);
      const parameters = this.geometry.parameters;
      if (parameters !== void 0 && parameters.shapes !== void 0) {
        const shapes = parameters.shapes;
        if (Array.isArray(shapes)) {
          for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
            const shape = shapes[i2];
            serialize(meta.shapes, shape);
          }
        } else {
          serialize(meta.shapes, shapes);
        }
      }
    }
    if (this.isSkinnedMesh) {
      object2.bindMode = this.bindMode;
      object2.bindMatrix = this.bindMatrix.toArray();
      if (this.skeleton !== void 0) {
        serialize(meta.skeletons, this.skeleton);
        object2.skeleton = this.skeleton.uuid;
      }
    }
    if (this.material !== void 0) {
      if (Array.isArray(this.material)) {
        const uuids = [];
        for (let i2 = 0, l2 = this.material.length; i2 < l2; i2++) {
          uuids.push(serialize(meta.materials, this.material[i2]));
        }
        object2.material = uuids;
      } else {
        object2.material = serialize(meta.materials, this.material);
      }
    }
    if (this.children.length > 0) {
      object2.children = [];
      for (let i2 = 0; i2 < this.children.length; i2++) {
        object2.children.push(this.children[i2].toJSON(meta).object);
      }
    }
    if (this.animations.length > 0) {
      object2.animations = [];
      for (let i2 = 0; i2 < this.animations.length; i2++) {
        const animation = this.animations[i2];
        object2.animations.push(serialize(meta.animations, animation));
      }
    }
    if (isRootObject) {
      const geometries = extractFromCache(meta.geometries);
      const materials = extractFromCache(meta.materials);
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const shapes = extractFromCache(meta.shapes);
      const skeletons = extractFromCache(meta.skeletons);
      const animations = extractFromCache(meta.animations);
      const nodes = extractFromCache(meta.nodes);
      if (geometries.length > 0) output2.geometries = geometries;
      if (materials.length > 0) output2.materials = materials;
      if (textures.length > 0) output2.textures = textures;
      if (images.length > 0) output2.images = images;
      if (shapes.length > 0) output2.shapes = shapes;
      if (skeletons.length > 0) output2.skeletons = skeletons;
      if (animations.length > 0) output2.animations = animations;
      if (nodes.length > 0) output2.nodes = nodes;
    }
    output2.object = object2;
    return output2;
    function extractFromCache(cache2) {
      const values = [];
      for (const key in cache2) {
        const data = cache2[key];
        delete data.metadata;
        values.push(data);
      }
      return values;
    }
  }
  clone(recursive) {
    return new this.constructor().copy(this, recursive);
  }
  copy(source, recursive = true) {
    this.name = source.name;
    this.up.copy(source.up);
    this.position.copy(source.position);
    this.rotation.order = source.rotation.order;
    this.quaternion.copy(source.quaternion);
    this.scale.copy(source.scale);
    this.matrix.copy(source.matrix);
    this.matrixWorld.copy(source.matrixWorld);
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;
    this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;
    this.layers.mask = source.layers.mask;
    this.visible = source.visible;
    this.castShadow = source.castShadow;
    this.receiveShadow = source.receiveShadow;
    this.frustumCulled = source.frustumCulled;
    this.renderOrder = source.renderOrder;
    this.animations = source.animations.slice();
    this.userData = JSON.parse(JSON.stringify(source.userData));
    if (recursive === true) {
      for (let i2 = 0; i2 < source.children.length; i2++) {
        const child = source.children[i2];
        this.add(child.clone());
      }
    }
    return this;
  }
};
Object3D2.DEFAULT_UP = new Vector32(0, 1, 0);
Object3D2.DEFAULT_MATRIX_AUTO_UPDATE = true;
Object3D2.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;
var _v0$12 = new Vector32();
var _v1$32 = new Vector32();
var _v2$22 = new Vector32();
var _v3$22 = new Vector32();
var _vab2 = new Vector32();
var _vac2 = new Vector32();
var _vbc2 = new Vector32();
var _vap2 = new Vector32();
var _vbp2 = new Vector32();
var _vcp2 = new Vector32();
var Triangle2 = class _Triangle {
  constructor(a2 = new Vector32(), b = new Vector32(), c4 = new Vector32()) {
    this.a = a2;
    this.b = b;
    this.c = c4;
  }
  static getNormal(a2, b, c4, target) {
    target.subVectors(c4, b);
    _v0$12.subVectors(a2, b);
    target.cross(_v0$12);
    const targetLengthSq = target.lengthSq();
    if (targetLengthSq > 0) {
      return target.multiplyScalar(1 / Math.sqrt(targetLengthSq));
    }
    return target.set(0, 0, 0);
  }
  // static/instance method to calculate barycentric coordinates
  // based on: http://www.blackpawn.com/texts/pointinpoly/default.html
  static getBarycoord(point2, a2, b, c4, target) {
    _v0$12.subVectors(c4, a2);
    _v1$32.subVectors(b, a2);
    _v2$22.subVectors(point2, a2);
    const dot00 = _v0$12.dot(_v0$12);
    const dot01 = _v0$12.dot(_v1$32);
    const dot02 = _v0$12.dot(_v2$22);
    const dot11 = _v1$32.dot(_v1$32);
    const dot12 = _v1$32.dot(_v2$22);
    const denom = dot00 * dot11 - dot01 * dot01;
    if (denom === 0) {
      target.set(0, 0, 0);
      return null;
    }
    const invDenom = 1 / denom;
    const u5 = (dot11 * dot02 - dot01 * dot12) * invDenom;
    const v3 = (dot00 * dot12 - dot01 * dot02) * invDenom;
    return target.set(1 - u5 - v3, v3, u5);
  }
  static containsPoint(point2, a2, b, c4) {
    if (this.getBarycoord(point2, a2, b, c4, _v3$22) === null) {
      return false;
    }
    return _v3$22.x >= 0 && _v3$22.y >= 0 && _v3$22.x + _v3$22.y <= 1;
  }
  static getInterpolation(point2, p1, p2, p3, v1, v22, v3, target) {
    if (this.getBarycoord(point2, p1, p2, p3, _v3$22) === null) {
      target.x = 0;
      target.y = 0;
      if ("z" in target) target.z = 0;
      if ("w" in target) target.w = 0;
      return null;
    }
    target.setScalar(0);
    target.addScaledVector(v1, _v3$22.x);
    target.addScaledVector(v22, _v3$22.y);
    target.addScaledVector(v3, _v3$22.z);
    return target;
  }
  static isFrontFacing(a2, b, c4, direction2) {
    _v0$12.subVectors(c4, b);
    _v1$32.subVectors(a2, b);
    return _v0$12.cross(_v1$32).dot(direction2) < 0 ? true : false;
  }
  set(a2, b, c4) {
    this.a.copy(a2);
    this.b.copy(b);
    this.c.copy(c4);
    return this;
  }
  setFromPointsAndIndices(points, i0, i1, i2) {
    this.a.copy(points[i0]);
    this.b.copy(points[i1]);
    this.c.copy(points[i2]);
    return this;
  }
  setFromAttributeAndIndices(attribute2, i0, i1, i2) {
    this.a.fromBufferAttribute(attribute2, i0);
    this.b.fromBufferAttribute(attribute2, i1);
    this.c.fromBufferAttribute(attribute2, i2);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(triangle) {
    this.a.copy(triangle.a);
    this.b.copy(triangle.b);
    this.c.copy(triangle.c);
    return this;
  }
  getArea() {
    _v0$12.subVectors(this.c, this.b);
    _v1$32.subVectors(this.a, this.b);
    return _v0$12.cross(_v1$32).length() * 0.5;
  }
  getMidpoint(target) {
    return target.addVectors(this.a, this.b).add(this.c).multiplyScalar(1 / 3);
  }
  getNormal(target) {
    return _Triangle.getNormal(this.a, this.b, this.c, target);
  }
  getPlane(target) {
    return target.setFromCoplanarPoints(this.a, this.b, this.c);
  }
  getBarycoord(point2, target) {
    return _Triangle.getBarycoord(point2, this.a, this.b, this.c, target);
  }
  getInterpolation(point2, v1, v22, v3, target) {
    return _Triangle.getInterpolation(point2, this.a, this.b, this.c, v1, v22, v3, target);
  }
  containsPoint(point2) {
    return _Triangle.containsPoint(point2, this.a, this.b, this.c);
  }
  isFrontFacing(direction2) {
    return _Triangle.isFrontFacing(this.a, this.b, this.c, direction2);
  }
  intersectsBox(box) {
    return box.intersectsTriangle(this);
  }
  closestPointToPoint(p2, target) {
    const a2 = this.a, b = this.b, c4 = this.c;
    let v3, w4;
    _vab2.subVectors(b, a2);
    _vac2.subVectors(c4, a2);
    _vap2.subVectors(p2, a2);
    const d1 = _vab2.dot(_vap2);
    const d2 = _vac2.dot(_vap2);
    if (d1 <= 0 && d2 <= 0) {
      return target.copy(a2);
    }
    _vbp2.subVectors(p2, b);
    const d3 = _vab2.dot(_vbp2);
    const d4 = _vac2.dot(_vbp2);
    if (d3 >= 0 && d4 <= d3) {
      return target.copy(b);
    }
    const vc = d1 * d4 - d3 * d2;
    if (vc <= 0 && d1 >= 0 && d3 <= 0) {
      v3 = d1 / (d1 - d3);
      return target.copy(a2).addScaledVector(_vab2, v3);
    }
    _vcp2.subVectors(p2, c4);
    const d5 = _vab2.dot(_vcp2);
    const d6 = _vac2.dot(_vcp2);
    if (d6 >= 0 && d5 <= d6) {
      return target.copy(c4);
    }
    const vb = d5 * d2 - d1 * d6;
    if (vb <= 0 && d2 >= 0 && d6 <= 0) {
      w4 = d2 / (d2 - d6);
      return target.copy(a2).addScaledVector(_vac2, w4);
    }
    const va = d3 * d6 - d5 * d4;
    if (va <= 0 && d4 - d3 >= 0 && d5 - d6 >= 0) {
      _vbc2.subVectors(c4, b);
      w4 = (d4 - d3) / (d4 - d3 + (d5 - d6));
      return target.copy(b).addScaledVector(_vbc2, w4);
    }
    const denom = 1 / (va + vb + vc);
    v3 = vb * denom;
    w4 = vc * denom;
    return target.copy(a2).addScaledVector(_vab2, v3).addScaledVector(_vac2, w4);
  }
  equals(triangle) {
    return triangle.a.equals(this.a) && triangle.b.equals(this.b) && triangle.c.equals(this.c);
  }
};
var _colorKeywords2 = {
  "aliceblue": 15792383,
  "antiquewhite": 16444375,
  "aqua": 65535,
  "aquamarine": 8388564,
  "azure": 15794175,
  "beige": 16119260,
  "bisque": 16770244,
  "black": 0,
  "blanchedalmond": 16772045,
  "blue": 255,
  "blueviolet": 9055202,
  "brown": 10824234,
  "burlywood": 14596231,
  "cadetblue": 6266528,
  "chartreuse": 8388352,
  "chocolate": 13789470,
  "coral": 16744272,
  "cornflowerblue": 6591981,
  "cornsilk": 16775388,
  "crimson": 14423100,
  "cyan": 65535,
  "darkblue": 139,
  "darkcyan": 35723,
  "darkgoldenrod": 12092939,
  "darkgray": 11119017,
  "darkgreen": 25600,
  "darkgrey": 11119017,
  "darkkhaki": 12433259,
  "darkmagenta": 9109643,
  "darkolivegreen": 5597999,
  "darkorange": 16747520,
  "darkorchid": 10040012,
  "darkred": 9109504,
  "darksalmon": 15308410,
  "darkseagreen": 9419919,
  "darkslateblue": 4734347,
  "darkslategray": 3100495,
  "darkslategrey": 3100495,
  "darkturquoise": 52945,
  "darkviolet": 9699539,
  "deeppink": 16716947,
  "deepskyblue": 49151,
  "dimgray": 6908265,
  "dimgrey": 6908265,
  "dodgerblue": 2003199,
  "firebrick": 11674146,
  "floralwhite": 16775920,
  "forestgreen": 2263842,
  "fuchsia": 16711935,
  "gainsboro": 14474460,
  "ghostwhite": 16316671,
  "gold": 16766720,
  "goldenrod": 14329120,
  "gray": 8421504,
  "green": 32768,
  "greenyellow": 11403055,
  "grey": 8421504,
  "honeydew": 15794160,
  "hotpink": 16738740,
  "indianred": 13458524,
  "indigo": 4915330,
  "ivory": 16777200,
  "khaki": 15787660,
  "lavender": 15132410,
  "lavenderblush": 16773365,
  "lawngreen": 8190976,
  "lemonchiffon": 16775885,
  "lightblue": 11393254,
  "lightcoral": 15761536,
  "lightcyan": 14745599,
  "lightgoldenrodyellow": 16448210,
  "lightgray": 13882323,
  "lightgreen": 9498256,
  "lightgrey": 13882323,
  "lightpink": 16758465,
  "lightsalmon": 16752762,
  "lightseagreen": 2142890,
  "lightskyblue": 8900346,
  "lightslategray": 7833753,
  "lightslategrey": 7833753,
  "lightsteelblue": 11584734,
  "lightyellow": 16777184,
  "lime": 65280,
  "limegreen": 3329330,
  "linen": 16445670,
  "magenta": 16711935,
  "maroon": 8388608,
  "mediumaquamarine": 6737322,
  "mediumblue": 205,
  "mediumorchid": 12211667,
  "mediumpurple": 9662683,
  "mediumseagreen": 3978097,
  "mediumslateblue": 8087790,
  "mediumspringgreen": 64154,
  "mediumturquoise": 4772300,
  "mediumvioletred": 13047173,
  "midnightblue": 1644912,
  "mintcream": 16121850,
  "mistyrose": 16770273,
  "moccasin": 16770229,
  "navajowhite": 16768685,
  "navy": 128,
  "oldlace": 16643558,
  "olive": 8421376,
  "olivedrab": 7048739,
  "orange": 16753920,
  "orangered": 16729344,
  "orchid": 14315734,
  "palegoldenrod": 15657130,
  "palegreen": 10025880,
  "paleturquoise": 11529966,
  "palevioletred": 14381203,
  "papayawhip": 16773077,
  "peachpuff": 16767673,
  "peru": 13468991,
  "pink": 16761035,
  "plum": 14524637,
  "powderblue": 11591910,
  "purple": 8388736,
  "rebeccapurple": 6697881,
  "red": 16711680,
  "rosybrown": 12357519,
  "royalblue": 4286945,
  "saddlebrown": 9127187,
  "salmon": 16416882,
  "sandybrown": 16032864,
  "seagreen": 3050327,
  "seashell": 16774638,
  "sienna": 10506797,
  "silver": 12632256,
  "skyblue": 8900331,
  "slateblue": 6970061,
  "slategray": 7372944,
  "slategrey": 7372944,
  "snow": 16775930,
  "springgreen": 65407,
  "steelblue": 4620980,
  "tan": 13808780,
  "teal": 32896,
  "thistle": 14204888,
  "tomato": 16737095,
  "turquoise": 4251856,
  "violet": 15631086,
  "wheat": 16113331,
  "white": 16777215,
  "whitesmoke": 16119285,
  "yellow": 16776960,
  "yellowgreen": 10145074
};
var _hslA2 = { h: 0, s: 0, l: 0 };
var _hslB2 = { h: 0, s: 0, l: 0 };
function hue2rgb2(p2, q2, t4) {
  if (t4 < 0) t4 += 1;
  if (t4 > 1) t4 -= 1;
  if (t4 < 1 / 6) return p2 + (q2 - p2) * 6 * t4;
  if (t4 < 1 / 2) return q2;
  if (t4 < 2 / 3) return p2 + (q2 - p2) * 6 * (2 / 3 - t4);
  return p2;
}
var Color3 = class {
  constructor(r2, g2, b) {
    this.isColor = true;
    this.r = 1;
    this.g = 1;
    this.b = 1;
    return this.set(r2, g2, b);
  }
  set(r2, g2, b) {
    if (g2 === void 0 && b === void 0) {
      const value = r2;
      if (value && value.isColor) {
        this.copy(value);
      } else if (typeof value === "number") {
        this.setHex(value);
      } else if (typeof value === "string") {
        this.setStyle(value);
      }
    } else {
      this.setRGB(r2, g2, b);
    }
    return this;
  }
  setScalar(scalar) {
    this.r = scalar;
    this.g = scalar;
    this.b = scalar;
    return this;
  }
  setHex(hex2, colorSpace = SRGBColorSpace2) {
    hex2 = Math.floor(hex2);
    this.r = (hex2 >> 16 & 255) / 255;
    this.g = (hex2 >> 8 & 255) / 255;
    this.b = (hex2 & 255) / 255;
    ColorManagement2.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setRGB(r2, g2, b, colorSpace = ColorManagement2.workingColorSpace) {
    this.r = r2;
    this.g = g2;
    this.b = b;
    ColorManagement2.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setHSL(h2, s2, l2, colorSpace = ColorManagement2.workingColorSpace) {
    h2 = euclideanModulo2(h2, 1);
    s2 = clamp$1(s2, 0, 1);
    l2 = clamp$1(l2, 0, 1);
    if (s2 === 0) {
      this.r = this.g = this.b = l2;
    } else {
      const p2 = l2 <= 0.5 ? l2 * (1 + s2) : l2 + s2 - l2 * s2;
      const q2 = 2 * l2 - p2;
      this.r = hue2rgb2(q2, p2, h2 + 1 / 3);
      this.g = hue2rgb2(q2, p2, h2);
      this.b = hue2rgb2(q2, p2, h2 - 1 / 3);
    }
    ColorManagement2.toWorkingColorSpace(this, colorSpace);
    return this;
  }
  setStyle(style, colorSpace = SRGBColorSpace2) {
    function handleAlpha(string) {
      if (string === void 0) return;
      if (parseFloat(string) < 1) {
        console.warn("THREE.Color: Alpha component of " + style + " will be ignored.");
      }
    }
    let m2;
    if (m2 = /^(\w+)\(([^\)]*)\)/.exec(style)) {
      let color3;
      const name = m2[1];
      const components = m2[2];
      switch (name) {
        case "rgb":
        case "rgba":
          if (color3 = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color3[4]);
            return this.setRGB(
              Math.min(255, parseInt(color3[1], 10)) / 255,
              Math.min(255, parseInt(color3[2], 10)) / 255,
              Math.min(255, parseInt(color3[3], 10)) / 255,
              colorSpace
            );
          }
          if (color3 = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color3[4]);
            return this.setRGB(
              Math.min(100, parseInt(color3[1], 10)) / 100,
              Math.min(100, parseInt(color3[2], 10)) / 100,
              Math.min(100, parseInt(color3[3], 10)) / 100,
              colorSpace
            );
          }
          break;
        case "hsl":
        case "hsla":
          if (color3 = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(components)) {
            handleAlpha(color3[4]);
            return this.setHSL(
              parseFloat(color3[1]) / 360,
              parseFloat(color3[2]) / 100,
              parseFloat(color3[3]) / 100,
              colorSpace
            );
          }
          break;
        default:
          console.warn("THREE.Color: Unknown color model " + style);
      }
    } else if (m2 = /^\#([A-Fa-f\d]+)$/.exec(style)) {
      const hex2 = m2[1];
      const size = hex2.length;
      if (size === 3) {
        return this.setRGB(
          parseInt(hex2.charAt(0), 16) / 15,
          parseInt(hex2.charAt(1), 16) / 15,
          parseInt(hex2.charAt(2), 16) / 15,
          colorSpace
        );
      } else if (size === 6) {
        return this.setHex(parseInt(hex2, 16), colorSpace);
      } else {
        console.warn("THREE.Color: Invalid hex color " + style);
      }
    } else if (style && style.length > 0) {
      return this.setColorName(style, colorSpace);
    }
    return this;
  }
  setColorName(style, colorSpace = SRGBColorSpace2) {
    const hex2 = _colorKeywords2[style.toLowerCase()];
    if (hex2 !== void 0) {
      this.setHex(hex2, colorSpace);
    } else {
      console.warn("THREE.Color: Unknown color " + style);
    }
    return this;
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b);
  }
  copy(color3) {
    this.r = color3.r;
    this.g = color3.g;
    this.b = color3.b;
    return this;
  }
  copySRGBToLinear(color3) {
    this.r = SRGBToLinear2(color3.r);
    this.g = SRGBToLinear2(color3.g);
    this.b = SRGBToLinear2(color3.b);
    return this;
  }
  copyLinearToSRGB(color3) {
    this.r = LinearToSRGB2(color3.r);
    this.g = LinearToSRGB2(color3.g);
    this.b = LinearToSRGB2(color3.b);
    return this;
  }
  convertSRGBToLinear() {
    this.copySRGBToLinear(this);
    return this;
  }
  convertLinearToSRGB() {
    this.copyLinearToSRGB(this);
    return this;
  }
  getHex(colorSpace = SRGBColorSpace2) {
    ColorManagement2.fromWorkingColorSpace(_color3.copy(this), colorSpace);
    return Math.round(clamp$1(_color3.r * 255, 0, 255)) * 65536 + Math.round(clamp$1(_color3.g * 255, 0, 255)) * 256 + Math.round(clamp$1(_color3.b * 255, 0, 255));
  }
  getHexString(colorSpace = SRGBColorSpace2) {
    return ("000000" + this.getHex(colorSpace).toString(16)).slice(-6);
  }
  getHSL(target, colorSpace = ColorManagement2.workingColorSpace) {
    ColorManagement2.fromWorkingColorSpace(_color3.copy(this), colorSpace);
    const r2 = _color3.r, g2 = _color3.g, b = _color3.b;
    const max4 = Math.max(r2, g2, b);
    const min4 = Math.min(r2, g2, b);
    let hue3, saturation2;
    const lightness = (min4 + max4) / 2;
    if (min4 === max4) {
      hue3 = 0;
      saturation2 = 0;
    } else {
      const delta = max4 - min4;
      saturation2 = lightness <= 0.5 ? delta / (max4 + min4) : delta / (2 - max4 - min4);
      switch (max4) {
        case r2:
          hue3 = (g2 - b) / delta + (g2 < b ? 6 : 0);
          break;
        case g2:
          hue3 = (b - r2) / delta + 2;
          break;
        case b:
          hue3 = (r2 - g2) / delta + 4;
          break;
      }
      hue3 /= 6;
    }
    target.h = hue3;
    target.s = saturation2;
    target.l = lightness;
    return target;
  }
  getRGB(target, colorSpace = ColorManagement2.workingColorSpace) {
    ColorManagement2.fromWorkingColorSpace(_color3.copy(this), colorSpace);
    target.r = _color3.r;
    target.g = _color3.g;
    target.b = _color3.b;
    return target;
  }
  getStyle(colorSpace = SRGBColorSpace2) {
    ColorManagement2.fromWorkingColorSpace(_color3.copy(this), colorSpace);
    const r2 = _color3.r, g2 = _color3.g, b = _color3.b;
    if (colorSpace !== SRGBColorSpace2) {
      return `color(${colorSpace} ${r2.toFixed(3)} ${g2.toFixed(3)} ${b.toFixed(3)})`;
    }
    return `rgb(${Math.round(r2 * 255)},${Math.round(g2 * 255)},${Math.round(b * 255)})`;
  }
  offsetHSL(h2, s2, l2) {
    this.getHSL(_hslA2);
    return this.setHSL(_hslA2.h + h2, _hslA2.s + s2, _hslA2.l + l2);
  }
  add(color3) {
    this.r += color3.r;
    this.g += color3.g;
    this.b += color3.b;
    return this;
  }
  addColors(color1, color22) {
    this.r = color1.r + color22.r;
    this.g = color1.g + color22.g;
    this.b = color1.b + color22.b;
    return this;
  }
  addScalar(s2) {
    this.r += s2;
    this.g += s2;
    this.b += s2;
    return this;
  }
  sub(color3) {
    this.r = Math.max(0, this.r - color3.r);
    this.g = Math.max(0, this.g - color3.g);
    this.b = Math.max(0, this.b - color3.b);
    return this;
  }
  multiply(color3) {
    this.r *= color3.r;
    this.g *= color3.g;
    this.b *= color3.b;
    return this;
  }
  multiplyScalar(s2) {
    this.r *= s2;
    this.g *= s2;
    this.b *= s2;
    return this;
  }
  lerp(color3, alpha) {
    this.r += (color3.r - this.r) * alpha;
    this.g += (color3.g - this.g) * alpha;
    this.b += (color3.b - this.b) * alpha;
    return this;
  }
  lerpColors(color1, color22, alpha) {
    this.r = color1.r + (color22.r - color1.r) * alpha;
    this.g = color1.g + (color22.g - color1.g) * alpha;
    this.b = color1.b + (color22.b - color1.b) * alpha;
    return this;
  }
  lerpHSL(color3, alpha) {
    this.getHSL(_hslA2);
    color3.getHSL(_hslB2);
    const h2 = lerp2(_hslA2.h, _hslB2.h, alpha);
    const s2 = lerp2(_hslA2.s, _hslB2.s, alpha);
    const l2 = lerp2(_hslA2.l, _hslB2.l, alpha);
    this.setHSL(h2, s2, l2);
    return this;
  }
  setFromVector3(v3) {
    this.r = v3.x;
    this.g = v3.y;
    this.b = v3.z;
    return this;
  }
  applyMatrix3(m2) {
    const r2 = this.r, g2 = this.g, b = this.b;
    const e3 = m2.elements;
    this.r = e3[0] * r2 + e3[3] * g2 + e3[6] * b;
    this.g = e3[1] * r2 + e3[4] * g2 + e3[7] * b;
    this.b = e3[2] * r2 + e3[5] * g2 + e3[8] * b;
    return this;
  }
  equals(c4) {
    return c4.r === this.r && c4.g === this.g && c4.b === this.b;
  }
  fromArray(array3, offset = 0) {
    this.r = array3[offset];
    this.g = array3[offset + 1];
    this.b = array3[offset + 2];
    return this;
  }
  toArray(array3 = [], offset = 0) {
    array3[offset] = this.r;
    array3[offset + 1] = this.g;
    array3[offset + 2] = this.b;
    return array3;
  }
  fromBufferAttribute(attribute2, index7) {
    this.r = attribute2.getX(index7);
    this.g = attribute2.getY(index7);
    this.b = attribute2.getZ(index7);
    return this;
  }
  toJSON() {
    return this.getHex();
  }
  *[Symbol.iterator]() {
    yield this.r;
    yield this.g;
    yield this.b;
  }
};
var _color3 = new Color3();
Color3.NAMES = _colorKeywords2;
var _materialId2 = 0;
var Material2 = class extends EventDispatcher2 {
  constructor() {
    super();
    this.isMaterial = true;
    Object.defineProperty(this, "id", { value: _materialId2++ });
    this.uuid = generateUUID2();
    this.name = "";
    this.type = "Material";
    this.blending = NormalBlending2;
    this.side = FrontSide2;
    this.vertexColors = false;
    this.opacity = 1;
    this.transparent = false;
    this.alphaHash = false;
    this.blendSrc = SrcAlphaFactor2;
    this.blendDst = OneMinusSrcAlphaFactor2;
    this.blendEquation = AddEquation2;
    this.blendSrcAlpha = null;
    this.blendDstAlpha = null;
    this.blendEquationAlpha = null;
    this.blendColor = new Color3(0, 0, 0);
    this.blendAlpha = 0;
    this.depthFunc = LessEqualDepth2;
    this.depthTest = true;
    this.depthWrite = true;
    this.stencilWriteMask = 255;
    this.stencilFunc = AlwaysStencilFunc2;
    this.stencilRef = 0;
    this.stencilFuncMask = 255;
    this.stencilFail = KeepStencilOp2;
    this.stencilZFail = KeepStencilOp2;
    this.stencilZPass = KeepStencilOp2;
    this.stencilWrite = false;
    this.clippingPlanes = null;
    this.clipIntersection = false;
    this.clipShadows = false;
    this.shadowSide = null;
    this.colorWrite = true;
    this.precision = null;
    this.polygonOffset = false;
    this.polygonOffsetFactor = 0;
    this.polygonOffsetUnits = 0;
    this.dithering = false;
    this.alphaToCoverage = false;
    this.premultipliedAlpha = false;
    this.forceSinglePass = false;
    this.visible = true;
    this.toneMapped = true;
    this.userData = {};
    this.version = 0;
    this._alphaTest = 0;
  }
  get alphaTest() {
    return this._alphaTest;
  }
  set alphaTest(value) {
    if (this._alphaTest > 0 !== value > 0) {
      this.version++;
    }
    this._alphaTest = value;
  }
  // onBeforeRender and onBeforeCompile only supported in WebGLRenderer
  onBeforeRender() {
  }
  onBeforeCompile() {
  }
  customProgramCacheKey() {
    return this.onBeforeCompile.toString();
  }
  setValues(values) {
    if (values === void 0) return;
    for (const key in values) {
      const newValue = values[key];
      if (newValue === void 0) {
        console.warn(`THREE.Material: parameter '${key}' has value of undefined.`);
        continue;
      }
      const currentValue = this[key];
      if (currentValue === void 0) {
        console.warn(`THREE.Material: '${key}' is not a property of THREE.${this.type}.`);
        continue;
      }
      if (currentValue && currentValue.isColor) {
        currentValue.set(newValue);
      } else if (currentValue && currentValue.isVector3 && (newValue && newValue.isVector3)) {
        currentValue.copy(newValue);
      } else {
        this[key] = newValue;
      }
    }
  }
  toJSON(meta) {
    const isRootObject = meta === void 0 || typeof meta === "string";
    if (isRootObject) {
      meta = {
        textures: {},
        images: {}
      };
    }
    const data = {
      metadata: {
        version: 4.6,
        type: "Material",
        generator: "Material.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (this.color && this.color.isColor) data.color = this.color.getHex();
    if (this.roughness !== void 0) data.roughness = this.roughness;
    if (this.metalness !== void 0) data.metalness = this.metalness;
    if (this.sheen !== void 0) data.sheen = this.sheen;
    if (this.sheenColor && this.sheenColor.isColor) data.sheenColor = this.sheenColor.getHex();
    if (this.sheenRoughness !== void 0) data.sheenRoughness = this.sheenRoughness;
    if (this.emissive && this.emissive.isColor) data.emissive = this.emissive.getHex();
    if (this.emissiveIntensity !== void 0 && this.emissiveIntensity !== 1) data.emissiveIntensity = this.emissiveIntensity;
    if (this.specular && this.specular.isColor) data.specular = this.specular.getHex();
    if (this.specularIntensity !== void 0) data.specularIntensity = this.specularIntensity;
    if (this.specularColor && this.specularColor.isColor) data.specularColor = this.specularColor.getHex();
    if (this.shininess !== void 0) data.shininess = this.shininess;
    if (this.clearcoat !== void 0) data.clearcoat = this.clearcoat;
    if (this.clearcoatRoughness !== void 0) data.clearcoatRoughness = this.clearcoatRoughness;
    if (this.clearcoatMap && this.clearcoatMap.isTexture) {
      data.clearcoatMap = this.clearcoatMap.toJSON(meta).uuid;
    }
    if (this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture) {
      data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(meta).uuid;
    }
    if (this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture) {
      data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(meta).uuid;
      data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();
    }
    if (this.dispersion !== void 0) data.dispersion = this.dispersion;
    if (this.iridescence !== void 0) data.iridescence = this.iridescence;
    if (this.iridescenceIOR !== void 0) data.iridescenceIOR = this.iridescenceIOR;
    if (this.iridescenceThicknessRange !== void 0) data.iridescenceThicknessRange = this.iridescenceThicknessRange;
    if (this.iridescenceMap && this.iridescenceMap.isTexture) {
      data.iridescenceMap = this.iridescenceMap.toJSON(meta).uuid;
    }
    if (this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture) {
      data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON(meta).uuid;
    }
    if (this.anisotropy !== void 0) data.anisotropy = this.anisotropy;
    if (this.anisotropyRotation !== void 0) data.anisotropyRotation = this.anisotropyRotation;
    if (this.anisotropyMap && this.anisotropyMap.isTexture) {
      data.anisotropyMap = this.anisotropyMap.toJSON(meta).uuid;
    }
    if (this.map && this.map.isTexture) data.map = this.map.toJSON(meta).uuid;
    if (this.matcap && this.matcap.isTexture) data.matcap = this.matcap.toJSON(meta).uuid;
    if (this.alphaMap && this.alphaMap.isTexture) data.alphaMap = this.alphaMap.toJSON(meta).uuid;
    if (this.lightMap && this.lightMap.isTexture) {
      data.lightMap = this.lightMap.toJSON(meta).uuid;
      data.lightMapIntensity = this.lightMapIntensity;
    }
    if (this.aoMap && this.aoMap.isTexture) {
      data.aoMap = this.aoMap.toJSON(meta).uuid;
      data.aoMapIntensity = this.aoMapIntensity;
    }
    if (this.bumpMap && this.bumpMap.isTexture) {
      data.bumpMap = this.bumpMap.toJSON(meta).uuid;
      data.bumpScale = this.bumpScale;
    }
    if (this.normalMap && this.normalMap.isTexture) {
      data.normalMap = this.normalMap.toJSON(meta).uuid;
      data.normalMapType = this.normalMapType;
      data.normalScale = this.normalScale.toArray();
    }
    if (this.displacementMap && this.displacementMap.isTexture) {
      data.displacementMap = this.displacementMap.toJSON(meta).uuid;
      data.displacementScale = this.displacementScale;
      data.displacementBias = this.displacementBias;
    }
    if (this.roughnessMap && this.roughnessMap.isTexture) data.roughnessMap = this.roughnessMap.toJSON(meta).uuid;
    if (this.metalnessMap && this.metalnessMap.isTexture) data.metalnessMap = this.metalnessMap.toJSON(meta).uuid;
    if (this.emissiveMap && this.emissiveMap.isTexture) data.emissiveMap = this.emissiveMap.toJSON(meta).uuid;
    if (this.specularMap && this.specularMap.isTexture) data.specularMap = this.specularMap.toJSON(meta).uuid;
    if (this.specularIntensityMap && this.specularIntensityMap.isTexture) data.specularIntensityMap = this.specularIntensityMap.toJSON(meta).uuid;
    if (this.specularColorMap && this.specularColorMap.isTexture) data.specularColorMap = this.specularColorMap.toJSON(meta).uuid;
    if (this.envMap && this.envMap.isTexture) {
      data.envMap = this.envMap.toJSON(meta).uuid;
      if (this.combine !== void 0) data.combine = this.combine;
    }
    if (this.envMapRotation !== void 0) data.envMapRotation = this.envMapRotation.toArray();
    if (this.envMapIntensity !== void 0) data.envMapIntensity = this.envMapIntensity;
    if (this.reflectivity !== void 0) data.reflectivity = this.reflectivity;
    if (this.refractionRatio !== void 0) data.refractionRatio = this.refractionRatio;
    if (this.gradientMap && this.gradientMap.isTexture) {
      data.gradientMap = this.gradientMap.toJSON(meta).uuid;
    }
    if (this.transmission !== void 0) data.transmission = this.transmission;
    if (this.transmissionMap && this.transmissionMap.isTexture) data.transmissionMap = this.transmissionMap.toJSON(meta).uuid;
    if (this.thickness !== void 0) data.thickness = this.thickness;
    if (this.thicknessMap && this.thicknessMap.isTexture) data.thicknessMap = this.thicknessMap.toJSON(meta).uuid;
    if (this.attenuationDistance !== void 0 && this.attenuationDistance !== Infinity) data.attenuationDistance = this.attenuationDistance;
    if (this.attenuationColor !== void 0) data.attenuationColor = this.attenuationColor.getHex();
    if (this.size !== void 0) data.size = this.size;
    if (this.shadowSide !== null) data.shadowSide = this.shadowSide;
    if (this.sizeAttenuation !== void 0) data.sizeAttenuation = this.sizeAttenuation;
    if (this.blending !== NormalBlending2) data.blending = this.blending;
    if (this.side !== FrontSide2) data.side = this.side;
    if (this.vertexColors === true) data.vertexColors = true;
    if (this.opacity < 1) data.opacity = this.opacity;
    if (this.transparent === true) data.transparent = true;
    if (this.blendSrc !== SrcAlphaFactor2) data.blendSrc = this.blendSrc;
    if (this.blendDst !== OneMinusSrcAlphaFactor2) data.blendDst = this.blendDst;
    if (this.blendEquation !== AddEquation2) data.blendEquation = this.blendEquation;
    if (this.blendSrcAlpha !== null) data.blendSrcAlpha = this.blendSrcAlpha;
    if (this.blendDstAlpha !== null) data.blendDstAlpha = this.blendDstAlpha;
    if (this.blendEquationAlpha !== null) data.blendEquationAlpha = this.blendEquationAlpha;
    if (this.blendColor && this.blendColor.isColor) data.blendColor = this.blendColor.getHex();
    if (this.blendAlpha !== 0) data.blendAlpha = this.blendAlpha;
    if (this.depthFunc !== LessEqualDepth2) data.depthFunc = this.depthFunc;
    if (this.depthTest === false) data.depthTest = this.depthTest;
    if (this.depthWrite === false) data.depthWrite = this.depthWrite;
    if (this.colorWrite === false) data.colorWrite = this.colorWrite;
    if (this.stencilWriteMask !== 255) data.stencilWriteMask = this.stencilWriteMask;
    if (this.stencilFunc !== AlwaysStencilFunc2) data.stencilFunc = this.stencilFunc;
    if (this.stencilRef !== 0) data.stencilRef = this.stencilRef;
    if (this.stencilFuncMask !== 255) data.stencilFuncMask = this.stencilFuncMask;
    if (this.stencilFail !== KeepStencilOp2) data.stencilFail = this.stencilFail;
    if (this.stencilZFail !== KeepStencilOp2) data.stencilZFail = this.stencilZFail;
    if (this.stencilZPass !== KeepStencilOp2) data.stencilZPass = this.stencilZPass;
    if (this.stencilWrite === true) data.stencilWrite = this.stencilWrite;
    if (this.rotation !== void 0 && this.rotation !== 0) data.rotation = this.rotation;
    if (this.polygonOffset === true) data.polygonOffset = true;
    if (this.polygonOffsetFactor !== 0) data.polygonOffsetFactor = this.polygonOffsetFactor;
    if (this.polygonOffsetUnits !== 0) data.polygonOffsetUnits = this.polygonOffsetUnits;
    if (this.linewidth !== void 0 && this.linewidth !== 1) data.linewidth = this.linewidth;
    if (this.dashSize !== void 0) data.dashSize = this.dashSize;
    if (this.gapSize !== void 0) data.gapSize = this.gapSize;
    if (this.scale !== void 0) data.scale = this.scale;
    if (this.dithering === true) data.dithering = true;
    if (this.alphaTest > 0) data.alphaTest = this.alphaTest;
    if (this.alphaHash === true) data.alphaHash = true;
    if (this.alphaToCoverage === true) data.alphaToCoverage = true;
    if (this.premultipliedAlpha === true) data.premultipliedAlpha = true;
    if (this.forceSinglePass === true) data.forceSinglePass = true;
    if (this.wireframe === true) data.wireframe = true;
    if (this.wireframeLinewidth > 1) data.wireframeLinewidth = this.wireframeLinewidth;
    if (this.wireframeLinecap !== "round") data.wireframeLinecap = this.wireframeLinecap;
    if (this.wireframeLinejoin !== "round") data.wireframeLinejoin = this.wireframeLinejoin;
    if (this.flatShading === true) data.flatShading = true;
    if (this.visible === false) data.visible = false;
    if (this.toneMapped === false) data.toneMapped = false;
    if (this.fog === false) data.fog = false;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    function extractFromCache(cache2) {
      const values = [];
      for (const key in cache2) {
        const data2 = cache2[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRootObject) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
    }
    return data;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.name = source.name;
    this.blending = source.blending;
    this.side = source.side;
    this.vertexColors = source.vertexColors;
    this.opacity = source.opacity;
    this.transparent = source.transparent;
    this.blendSrc = source.blendSrc;
    this.blendDst = source.blendDst;
    this.blendEquation = source.blendEquation;
    this.blendSrcAlpha = source.blendSrcAlpha;
    this.blendDstAlpha = source.blendDstAlpha;
    this.blendEquationAlpha = source.blendEquationAlpha;
    this.blendColor.copy(source.blendColor);
    this.blendAlpha = source.blendAlpha;
    this.depthFunc = source.depthFunc;
    this.depthTest = source.depthTest;
    this.depthWrite = source.depthWrite;
    this.stencilWriteMask = source.stencilWriteMask;
    this.stencilFunc = source.stencilFunc;
    this.stencilRef = source.stencilRef;
    this.stencilFuncMask = source.stencilFuncMask;
    this.stencilFail = source.stencilFail;
    this.stencilZFail = source.stencilZFail;
    this.stencilZPass = source.stencilZPass;
    this.stencilWrite = source.stencilWrite;
    const srcPlanes = source.clippingPlanes;
    let dstPlanes = null;
    if (srcPlanes !== null) {
      const n2 = srcPlanes.length;
      dstPlanes = new Array(n2);
      for (let i2 = 0; i2 !== n2; ++i2) {
        dstPlanes[i2] = srcPlanes[i2].clone();
      }
    }
    this.clippingPlanes = dstPlanes;
    this.clipIntersection = source.clipIntersection;
    this.clipShadows = source.clipShadows;
    this.shadowSide = source.shadowSide;
    this.colorWrite = source.colorWrite;
    this.precision = source.precision;
    this.polygonOffset = source.polygonOffset;
    this.polygonOffsetFactor = source.polygonOffsetFactor;
    this.polygonOffsetUnits = source.polygonOffsetUnits;
    this.dithering = source.dithering;
    this.alphaTest = source.alphaTest;
    this.alphaHash = source.alphaHash;
    this.alphaToCoverage = source.alphaToCoverage;
    this.premultipliedAlpha = source.premultipliedAlpha;
    this.forceSinglePass = source.forceSinglePass;
    this.visible = source.visible;
    this.toneMapped = source.toneMapped;
    this.userData = JSON.parse(JSON.stringify(source.userData));
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  onBuild() {
    console.warn("Material: onBuild() has been removed.");
  }
};
var MeshBasicMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshBasicMaterial = true;
    this.type = "MeshBasicMaterial";
    this.color = new Color3(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler2();
    this.combine = MultiplyOperation2;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.fog = source.fog;
    return this;
  }
};
var _tables2 = _generateTables2();
function _generateTables2() {
  const buffer2 = new ArrayBuffer(4);
  const floatView = new Float32Array(buffer2);
  const uint32View = new Uint32Array(buffer2);
  const baseTable = new Uint32Array(512);
  const shiftTable = new Uint32Array(512);
  for (let i2 = 0; i2 < 256; ++i2) {
    const e3 = i2 - 127;
    if (e3 < -27) {
      baseTable[i2] = 0;
      baseTable[i2 | 256] = 32768;
      shiftTable[i2] = 24;
      shiftTable[i2 | 256] = 24;
    } else if (e3 < -14) {
      baseTable[i2] = 1024 >> -e3 - 14;
      baseTable[i2 | 256] = 1024 >> -e3 - 14 | 32768;
      shiftTable[i2] = -e3 - 1;
      shiftTable[i2 | 256] = -e3 - 1;
    } else if (e3 <= 15) {
      baseTable[i2] = e3 + 15 << 10;
      baseTable[i2 | 256] = e3 + 15 << 10 | 32768;
      shiftTable[i2] = 13;
      shiftTable[i2 | 256] = 13;
    } else if (e3 < 128) {
      baseTable[i2] = 31744;
      baseTable[i2 | 256] = 64512;
      shiftTable[i2] = 24;
      shiftTable[i2 | 256] = 24;
    } else {
      baseTable[i2] = 31744;
      baseTable[i2 | 256] = 64512;
      shiftTable[i2] = 13;
      shiftTable[i2 | 256] = 13;
    }
  }
  const mantissaTable = new Uint32Array(2048);
  const exponentTable = new Uint32Array(64);
  const offsetTable = new Uint32Array(64);
  for (let i2 = 1; i2 < 1024; ++i2) {
    let m2 = i2 << 13;
    let e3 = 0;
    while ((m2 & 8388608) === 0) {
      m2 <<= 1;
      e3 -= 8388608;
    }
    m2 &= ~8388608;
    e3 += 947912704;
    mantissaTable[i2] = m2 | e3;
  }
  for (let i2 = 1024; i2 < 2048; ++i2) {
    mantissaTable[i2] = 939524096 + (i2 - 1024 << 13);
  }
  for (let i2 = 1; i2 < 31; ++i2) {
    exponentTable[i2] = i2 << 23;
  }
  exponentTable[31] = 1199570944;
  exponentTable[32] = 2147483648;
  for (let i2 = 33; i2 < 63; ++i2) {
    exponentTable[i2] = 2147483648 + (i2 - 32 << 23);
  }
  exponentTable[63] = 3347054592;
  for (let i2 = 1; i2 < 64; ++i2) {
    if (i2 !== 32) {
      offsetTable[i2] = 1024;
    }
  }
  return {
    floatView,
    uint32View,
    baseTable,
    shiftTable,
    mantissaTable,
    exponentTable,
    offsetTable
  };
}
function toHalfFloat(val) {
  if (Math.abs(val) > 65504) console.warn("THREE.DataUtils.toHalfFloat(): Value out of range.");
  val = clamp$1(val, -65504, 65504);
  _tables2.floatView[0] = val;
  const f2 = _tables2.uint32View[0];
  const e3 = f2 >> 23 & 511;
  return _tables2.baseTable[e3] + ((f2 & 8388607) >> _tables2.shiftTable[e3]);
}
function fromHalfFloat(val) {
  const m2 = val >> 10;
  _tables2.uint32View[0] = _tables2.mantissaTable[_tables2.offsetTable[m2] + (val & 1023)] + _tables2.exponentTable[m2];
  return _tables2.floatView[0];
}
var _vector$92 = new Vector32();
var _vector2$12 = new Vector22();
var BufferAttribute2 = class {
  constructor(array3, itemSize, normalized = false) {
    if (Array.isArray(array3)) {
      throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");
    }
    this.isBufferAttribute = true;
    this.name = "";
    this.array = array3;
    this.itemSize = itemSize;
    this.count = array3 !== void 0 ? array3.length / itemSize : 0;
    this.normalized = normalized;
    this.usage = StaticDrawUsage2;
    this._updateRange = { offset: 0, count: -1 };
    this.updateRanges = [];
    this.gpuType = FloatType2;
    this.version = 0;
  }
  onUploadCallback() {
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  get updateRange() {
    warnOnce2("THREE.BufferAttribute: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");
    return this._updateRange;
  }
  setUsage(value) {
    this.usage = value;
    return this;
  }
  addUpdateRange(start, count2) {
    this.updateRanges.push({ start, count: count2 });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(source) {
    this.name = source.name;
    this.array = new source.array.constructor(source.array);
    this.itemSize = source.itemSize;
    this.count = source.count;
    this.normalized = source.normalized;
    this.usage = source.usage;
    this.gpuType = source.gpuType;
    return this;
  }
  copyAt(index1, attribute2, index22) {
    index1 *= this.itemSize;
    index22 *= attribute2.itemSize;
    for (let i2 = 0, l2 = this.itemSize; i2 < l2; i2++) {
      this.array[index1 + i2] = attribute2.array[index22 + i2];
    }
    return this;
  }
  copyArray(array3) {
    this.array.set(array3);
    return this;
  }
  applyMatrix3(m2) {
    if (this.itemSize === 2) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector2$12.fromBufferAttribute(this, i2);
        _vector2$12.applyMatrix3(m2);
        this.setXY(i2, _vector2$12.x, _vector2$12.y);
      }
    } else if (this.itemSize === 3) {
      for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
        _vector$92.fromBufferAttribute(this, i2);
        _vector$92.applyMatrix3(m2);
        this.setXYZ(i2, _vector$92.x, _vector$92.y, _vector$92.z);
      }
    }
    return this;
  }
  applyMatrix4(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$92.fromBufferAttribute(this, i2);
      _vector$92.applyMatrix4(m2);
      this.setXYZ(i2, _vector$92.x, _vector$92.y, _vector$92.z);
    }
    return this;
  }
  applyNormalMatrix(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$92.fromBufferAttribute(this, i2);
      _vector$92.applyNormalMatrix(m2);
      this.setXYZ(i2, _vector$92.x, _vector$92.y, _vector$92.z);
    }
    return this;
  }
  transformDirection(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$92.fromBufferAttribute(this, i2);
      _vector$92.transformDirection(m2);
      this.setXYZ(i2, _vector$92.x, _vector$92.y, _vector$92.z);
    }
    return this;
  }
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  getComponent(index7, component) {
    let value = this.array[index7 * this.itemSize + component];
    if (this.normalized) value = denormalize2(value, this.array);
    return value;
  }
  setComponent(index7, component, value) {
    if (this.normalized) value = normalize$1(value, this.array);
    this.array[index7 * this.itemSize + component] = value;
    return this;
  }
  getX(index7) {
    let x2 = this.array[index7 * this.itemSize];
    if (this.normalized) x2 = denormalize2(x2, this.array);
    return x2;
  }
  setX(index7, x2) {
    if (this.normalized) x2 = normalize$1(x2, this.array);
    this.array[index7 * this.itemSize] = x2;
    return this;
  }
  getY(index7) {
    let y2 = this.array[index7 * this.itemSize + 1];
    if (this.normalized) y2 = denormalize2(y2, this.array);
    return y2;
  }
  setY(index7, y2) {
    if (this.normalized) y2 = normalize$1(y2, this.array);
    this.array[index7 * this.itemSize + 1] = y2;
    return this;
  }
  getZ(index7) {
    let z2 = this.array[index7 * this.itemSize + 2];
    if (this.normalized) z2 = denormalize2(z2, this.array);
    return z2;
  }
  setZ(index7, z2) {
    if (this.normalized) z2 = normalize$1(z2, this.array);
    this.array[index7 * this.itemSize + 2] = z2;
    return this;
  }
  getW(index7) {
    let w4 = this.array[index7 * this.itemSize + 3];
    if (this.normalized) w4 = denormalize2(w4, this.array);
    return w4;
  }
  setW(index7, w4) {
    if (this.normalized) w4 = normalize$1(w4, this.array);
    this.array[index7 * this.itemSize + 3] = w4;
    return this;
  }
  setXY(index7, x2, y2) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
    }
    this.array[index7 + 0] = x2;
    this.array[index7 + 1] = y2;
    return this;
  }
  setXYZ(index7, x2, y2, z2) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
      z2 = normalize$1(z2, this.array);
    }
    this.array[index7 + 0] = x2;
    this.array[index7 + 1] = y2;
    this.array[index7 + 2] = z2;
    return this;
  }
  setXYZW(index7, x2, y2, z2, w4) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
      z2 = normalize$1(z2, this.array);
      w4 = normalize$1(w4, this.array);
    }
    this.array[index7 + 0] = x2;
    this.array[index7 + 1] = y2;
    this.array[index7 + 2] = z2;
    this.array[index7 + 3] = w4;
    return this;
  }
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  clone() {
    return new this.constructor(this.array, this.itemSize).copy(this);
  }
  toJSON() {
    const data = {
      itemSize: this.itemSize,
      type: this.array.constructor.name,
      array: Array.from(this.array),
      normalized: this.normalized
    };
    if (this.name !== "") data.name = this.name;
    if (this.usage !== StaticDrawUsage2) data.usage = this.usage;
    return data;
  }
};
var Uint16BufferAttribute2 = class extends BufferAttribute2 {
  constructor(array3, itemSize, normalized) {
    super(new Uint16Array(array3), itemSize, normalized);
  }
};
var Uint32BufferAttribute2 = class extends BufferAttribute2 {
  constructor(array3, itemSize, normalized) {
    super(new Uint32Array(array3), itemSize, normalized);
  }
};
var Float16BufferAttribute = class extends BufferAttribute2 {
  constructor(array3, itemSize, normalized) {
    super(new Uint16Array(array3), itemSize, normalized);
    this.isFloat16BufferAttribute = true;
  }
  getX(index7) {
    let x2 = fromHalfFloat(this.array[index7 * this.itemSize]);
    if (this.normalized) x2 = denormalize2(x2, this.array);
    return x2;
  }
  setX(index7, x2) {
    if (this.normalized) x2 = normalize$1(x2, this.array);
    this.array[index7 * this.itemSize] = toHalfFloat(x2);
    return this;
  }
  getY(index7) {
    let y2 = fromHalfFloat(this.array[index7 * this.itemSize + 1]);
    if (this.normalized) y2 = denormalize2(y2, this.array);
    return y2;
  }
  setY(index7, y2) {
    if (this.normalized) y2 = normalize$1(y2, this.array);
    this.array[index7 * this.itemSize + 1] = toHalfFloat(y2);
    return this;
  }
  getZ(index7) {
    let z2 = fromHalfFloat(this.array[index7 * this.itemSize + 2]);
    if (this.normalized) z2 = denormalize2(z2, this.array);
    return z2;
  }
  setZ(index7, z2) {
    if (this.normalized) z2 = normalize$1(z2, this.array);
    this.array[index7 * this.itemSize + 2] = toHalfFloat(z2);
    return this;
  }
  getW(index7) {
    let w4 = fromHalfFloat(this.array[index7 * this.itemSize + 3]);
    if (this.normalized) w4 = denormalize2(w4, this.array);
    return w4;
  }
  setW(index7, w4) {
    if (this.normalized) w4 = normalize$1(w4, this.array);
    this.array[index7 * this.itemSize + 3] = toHalfFloat(w4);
    return this;
  }
  setXY(index7, x2, y2) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
    }
    this.array[index7 + 0] = toHalfFloat(x2);
    this.array[index7 + 1] = toHalfFloat(y2);
    return this;
  }
  setXYZ(index7, x2, y2, z2) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
      z2 = normalize$1(z2, this.array);
    }
    this.array[index7 + 0] = toHalfFloat(x2);
    this.array[index7 + 1] = toHalfFloat(y2);
    this.array[index7 + 2] = toHalfFloat(z2);
    return this;
  }
  setXYZW(index7, x2, y2, z2, w4) {
    index7 *= this.itemSize;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
      z2 = normalize$1(z2, this.array);
      w4 = normalize$1(w4, this.array);
    }
    this.array[index7 + 0] = toHalfFloat(x2);
    this.array[index7 + 1] = toHalfFloat(y2);
    this.array[index7 + 2] = toHalfFloat(z2);
    this.array[index7 + 3] = toHalfFloat(w4);
    return this;
  }
};
var Float32BufferAttribute2 = class extends BufferAttribute2 {
  constructor(array3, itemSize, normalized) {
    super(new Float32Array(array3), itemSize, normalized);
  }
};
var _id$9 = 0;
var _m12 = new Matrix42();
var _obj2 = new Object3D2();
var _offset2 = new Vector32();
var _box$22 = new Box32();
var _boxMorphTargets2 = new Box32();
var _vector$82 = new Vector32();
var BufferGeometry2 = class _BufferGeometry extends EventDispatcher2 {
  constructor() {
    super();
    this.isBufferGeometry = true;
    Object.defineProperty(this, "id", { value: _id$9++ });
    this.uuid = generateUUID2();
    this.name = "";
    this.type = "BufferGeometry";
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.morphTargetsRelative = false;
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    this.drawRange = { start: 0, count: Infinity };
    this.userData = {};
  }
  getIndex() {
    return this.index;
  }
  setIndex(index7) {
    if (Array.isArray(index7)) {
      this.index = new (arrayNeedsUint32$1(index7) ? Uint32BufferAttribute2 : Uint16BufferAttribute2)(index7, 1);
    } else {
      this.index = index7;
    }
    return this;
  }
  getAttribute(name) {
    return this.attributes[name];
  }
  setAttribute(name, attribute2) {
    this.attributes[name] = attribute2;
    return this;
  }
  deleteAttribute(name) {
    delete this.attributes[name];
    return this;
  }
  hasAttribute(name) {
    return this.attributes[name] !== void 0;
  }
  addGroup(start, count2, materialIndex = 0) {
    this.groups.push({
      start,
      count: count2,
      materialIndex
    });
  }
  clearGroups() {
    this.groups = [];
  }
  setDrawRange(start, count2) {
    this.drawRange.start = start;
    this.drawRange.count = count2;
  }
  applyMatrix4(matrix) {
    const position = this.attributes.position;
    if (position !== void 0) {
      position.applyMatrix4(matrix);
      position.needsUpdate = true;
    }
    const normal2 = this.attributes.normal;
    if (normal2 !== void 0) {
      const normalMatrix = new Matrix32().getNormalMatrix(matrix);
      normal2.applyNormalMatrix(normalMatrix);
      normal2.needsUpdate = true;
    }
    const tangent = this.attributes.tangent;
    if (tangent !== void 0) {
      tangent.transformDirection(matrix);
      tangent.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  applyQuaternion(q2) {
    _m12.makeRotationFromQuaternion(q2);
    this.applyMatrix4(_m12);
    return this;
  }
  rotateX(angle2) {
    _m12.makeRotationX(angle2);
    this.applyMatrix4(_m12);
    return this;
  }
  rotateY(angle2) {
    _m12.makeRotationY(angle2);
    this.applyMatrix4(_m12);
    return this;
  }
  rotateZ(angle2) {
    _m12.makeRotationZ(angle2);
    this.applyMatrix4(_m12);
    return this;
  }
  translate(x2, y2, z2) {
    _m12.makeTranslation(x2, y2, z2);
    this.applyMatrix4(_m12);
    return this;
  }
  scale(x2, y2, z2) {
    _m12.makeScale(x2, y2, z2);
    this.applyMatrix4(_m12);
    return this;
  }
  lookAt(vector) {
    _obj2.lookAt(vector);
    _obj2.updateMatrix();
    this.applyMatrix4(_obj2.matrix);
    return this;
  }
  center() {
    this.computeBoundingBox();
    this.boundingBox.getCenter(_offset2).negate();
    this.translate(_offset2.x, _offset2.y, _offset2.z);
    return this;
  }
  setFromPoints(points) {
    const position = [];
    for (let i2 = 0, l2 = points.length; i2 < l2; i2++) {
      const point2 = points[i2];
      position.push(point2.x, point2.y, point2.z || 0);
    }
    this.setAttribute("position", new Float32BufferAttribute2(position, 3));
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box32();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.", this);
      this.boundingBox.set(
        new Vector32(-Infinity, -Infinity, -Infinity),
        new Vector32(Infinity, Infinity, Infinity)
      );
      return;
    }
    if (position !== void 0) {
      this.boundingBox.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _box$22.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$82.addVectors(this.boundingBox.min, _box$22.min);
            this.boundingBox.expandByPoint(_vector$82);
            _vector$82.addVectors(this.boundingBox.max, _box$22.max);
            this.boundingBox.expandByPoint(_vector$82);
          } else {
            this.boundingBox.expandByPoint(_box$22.min);
            this.boundingBox.expandByPoint(_box$22.max);
          }
        }
      }
    } else {
      this.boundingBox.makeEmpty();
    }
    if (isNaN(this.boundingBox.min.x) || isNaN(this.boundingBox.min.y) || isNaN(this.boundingBox.min.z)) {
      console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere2();
    }
    const position = this.attributes.position;
    const morphAttributesPosition = this.morphAttributes.position;
    if (position && position.isGLBufferAttribute) {
      console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.", this);
      this.boundingSphere.set(new Vector32(), Infinity);
      return;
    }
    if (position) {
      const center = this.boundingSphere.center;
      _box$22.setFromBufferAttribute(position);
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          _boxMorphTargets2.setFromBufferAttribute(morphAttribute);
          if (this.morphTargetsRelative) {
            _vector$82.addVectors(_box$22.min, _boxMorphTargets2.min);
            _box$22.expandByPoint(_vector$82);
            _vector$82.addVectors(_box$22.max, _boxMorphTargets2.max);
            _box$22.expandByPoint(_vector$82);
          } else {
            _box$22.expandByPoint(_boxMorphTargets2.min);
            _box$22.expandByPoint(_boxMorphTargets2.max);
          }
        }
      }
      _box$22.getCenter(center);
      let maxRadiusSq = 0;
      for (let i2 = 0, il = position.count; i2 < il; i2++) {
        _vector$82.fromBufferAttribute(position, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$82));
      }
      if (morphAttributesPosition) {
        for (let i2 = 0, il = morphAttributesPosition.length; i2 < il; i2++) {
          const morphAttribute = morphAttributesPosition[i2];
          const morphTargetsRelative = this.morphTargetsRelative;
          for (let j2 = 0, jl = morphAttribute.count; j2 < jl; j2++) {
            _vector$82.fromBufferAttribute(morphAttribute, j2);
            if (morphTargetsRelative) {
              _offset2.fromBufferAttribute(position, j2);
              _vector$82.add(_offset2);
            }
            maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector$82));
          }
        }
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this);
      }
    }
  }
  computeTangents() {
    const index7 = this.index;
    const attributes = this.attributes;
    if (index7 === null || attributes.position === void 0 || attributes.normal === void 0 || attributes.uv === void 0) {
      console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");
      return;
    }
    const positionAttribute = attributes.position;
    const normalAttribute = attributes.normal;
    const uvAttribute = attributes.uv;
    if (this.hasAttribute("tangent") === false) {
      this.setAttribute("tangent", new BufferAttribute2(new Float32Array(4 * positionAttribute.count), 4));
    }
    const tangentAttribute = this.getAttribute("tangent");
    const tan1 = [], tan22 = [];
    for (let i2 = 0; i2 < positionAttribute.count; i2++) {
      tan1[i2] = new Vector32();
      tan22[i2] = new Vector32();
    }
    const vA = new Vector32(), vB = new Vector32(), vC = new Vector32(), uvA = new Vector22(), uvB = new Vector22(), uvC = new Vector22(), sdir = new Vector32(), tdir = new Vector32();
    function handleTriangle(a2, b, c4) {
      vA.fromBufferAttribute(positionAttribute, a2);
      vB.fromBufferAttribute(positionAttribute, b);
      vC.fromBufferAttribute(positionAttribute, c4);
      uvA.fromBufferAttribute(uvAttribute, a2);
      uvB.fromBufferAttribute(uvAttribute, b);
      uvC.fromBufferAttribute(uvAttribute, c4);
      vB.sub(vA);
      vC.sub(vA);
      uvB.sub(uvA);
      uvC.sub(uvA);
      const r2 = 1 / (uvB.x * uvC.y - uvC.x * uvB.y);
      if (!isFinite(r2)) return;
      sdir.copy(vB).multiplyScalar(uvC.y).addScaledVector(vC, -uvB.y).multiplyScalar(r2);
      tdir.copy(vC).multiplyScalar(uvB.x).addScaledVector(vB, -uvC.x).multiplyScalar(r2);
      tan1[a2].add(sdir);
      tan1[b].add(sdir);
      tan1[c4].add(sdir);
      tan22[a2].add(tdir);
      tan22[b].add(tdir);
      tan22[c4].add(tdir);
    }
    let groups2 = this.groups;
    if (groups2.length === 0) {
      groups2 = [{
        start: 0,
        count: index7.count
      }];
    }
    for (let i2 = 0, il = groups2.length; i2 < il; ++i2) {
      const group2 = groups2[i2];
      const start = group2.start;
      const count2 = group2.count;
      for (let j2 = start, jl = start + count2; j2 < jl; j2 += 3) {
        handleTriangle(
          index7.getX(j2 + 0),
          index7.getX(j2 + 1),
          index7.getX(j2 + 2)
        );
      }
    }
    const tmp3 = new Vector32(), tmp22 = new Vector32();
    const n2 = new Vector32(), n22 = new Vector32();
    function handleVertex(v3) {
      n2.fromBufferAttribute(normalAttribute, v3);
      n22.copy(n2);
      const t4 = tan1[v3];
      tmp3.copy(t4);
      tmp3.sub(n2.multiplyScalar(n2.dot(t4))).normalize();
      tmp22.crossVectors(n22, t4);
      const test = tmp22.dot(tan22[v3]);
      const w4 = test < 0 ? -1 : 1;
      tangentAttribute.setXYZW(v3, tmp3.x, tmp3.y, tmp3.z, w4);
    }
    for (let i2 = 0, il = groups2.length; i2 < il; ++i2) {
      const group2 = groups2[i2];
      const start = group2.start;
      const count2 = group2.count;
      for (let j2 = start, jl = start + count2; j2 < jl; j2 += 3) {
        handleVertex(index7.getX(j2 + 0));
        handleVertex(index7.getX(j2 + 1));
        handleVertex(index7.getX(j2 + 2));
      }
    }
  }
  computeVertexNormals() {
    const index7 = this.index;
    const positionAttribute = this.getAttribute("position");
    if (positionAttribute !== void 0) {
      let normalAttribute = this.getAttribute("normal");
      if (normalAttribute === void 0) {
        normalAttribute = new BufferAttribute2(new Float32Array(positionAttribute.count * 3), 3);
        this.setAttribute("normal", normalAttribute);
      } else {
        for (let i2 = 0, il = normalAttribute.count; i2 < il; i2++) {
          normalAttribute.setXYZ(i2, 0, 0, 0);
        }
      }
      const pA = new Vector32(), pB = new Vector32(), pC = new Vector32();
      const nA = new Vector32(), nB = new Vector32(), nC = new Vector32();
      const cb = new Vector32(), ab4 = new Vector32();
      if (index7) {
        for (let i2 = 0, il = index7.count; i2 < il; i2 += 3) {
          const vA = index7.getX(i2 + 0);
          const vB = index7.getX(i2 + 1);
          const vC = index7.getX(i2 + 2);
          pA.fromBufferAttribute(positionAttribute, vA);
          pB.fromBufferAttribute(positionAttribute, vB);
          pC.fromBufferAttribute(positionAttribute, vC);
          cb.subVectors(pC, pB);
          ab4.subVectors(pA, pB);
          cb.cross(ab4);
          nA.fromBufferAttribute(normalAttribute, vA);
          nB.fromBufferAttribute(normalAttribute, vB);
          nC.fromBufferAttribute(normalAttribute, vC);
          nA.add(cb);
          nB.add(cb);
          nC.add(cb);
          normalAttribute.setXYZ(vA, nA.x, nA.y, nA.z);
          normalAttribute.setXYZ(vB, nB.x, nB.y, nB.z);
          normalAttribute.setXYZ(vC, nC.x, nC.y, nC.z);
        }
      } else {
        for (let i2 = 0, il = positionAttribute.count; i2 < il; i2 += 3) {
          pA.fromBufferAttribute(positionAttribute, i2 + 0);
          pB.fromBufferAttribute(positionAttribute, i2 + 1);
          pC.fromBufferAttribute(positionAttribute, i2 + 2);
          cb.subVectors(pC, pB);
          ab4.subVectors(pA, pB);
          cb.cross(ab4);
          normalAttribute.setXYZ(i2 + 0, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 1, cb.x, cb.y, cb.z);
          normalAttribute.setXYZ(i2 + 2, cb.x, cb.y, cb.z);
        }
      }
      this.normalizeNormals();
      normalAttribute.needsUpdate = true;
    }
  }
  normalizeNormals() {
    const normals = this.attributes.normal;
    for (let i2 = 0, il = normals.count; i2 < il; i2++) {
      _vector$82.fromBufferAttribute(normals, i2);
      _vector$82.normalize();
      normals.setXYZ(i2, _vector$82.x, _vector$82.y, _vector$82.z);
    }
  }
  toNonIndexed() {
    function convertBufferAttribute(attribute2, indices2) {
      const array3 = attribute2.array;
      const itemSize = attribute2.itemSize;
      const normalized = attribute2.normalized;
      const array22 = new array3.constructor(indices2.length * itemSize);
      let index7 = 0, index22 = 0;
      for (let i2 = 0, l2 = indices2.length; i2 < l2; i2++) {
        if (attribute2.isInterleavedBufferAttribute) {
          index7 = indices2[i2] * attribute2.data.stride + attribute2.offset;
        } else {
          index7 = indices2[i2] * itemSize;
        }
        for (let j2 = 0; j2 < itemSize; j2++) {
          array22[index22++] = array3[index7++];
        }
      }
      return new BufferAttribute2(array22, itemSize, normalized);
    }
    if (this.index === null) {
      console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");
      return this;
    }
    const geometry2 = new _BufferGeometry();
    const indices = this.index.array;
    const attributes = this.attributes;
    for (const name in attributes) {
      const attribute2 = attributes[name];
      const newAttribute = convertBufferAttribute(attribute2, indices);
      geometry2.setAttribute(name, newAttribute);
    }
    const morphAttributes = this.morphAttributes;
    for (const name in morphAttributes) {
      const morphArray = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, il = morphAttribute.length; i2 < il; i2++) {
        const attribute2 = morphAttribute[i2];
        const newAttribute = convertBufferAttribute(attribute2, indices);
        morphArray.push(newAttribute);
      }
      geometry2.morphAttributes[name] = morphArray;
    }
    geometry2.morphTargetsRelative = this.morphTargetsRelative;
    const groups2 = this.groups;
    for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
      const group2 = groups2[i2];
      geometry2.addGroup(group2.start, group2.count, group2.materialIndex);
    }
    return geometry2;
  }
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "BufferGeometry",
        generator: "BufferGeometry.toJSON"
      }
    };
    data.uuid = this.uuid;
    data.type = this.type;
    if (this.name !== "") data.name = this.name;
    if (Object.keys(this.userData).length > 0) data.userData = this.userData;
    if (this.parameters !== void 0) {
      const parameters = this.parameters;
      for (const key in parameters) {
        if (parameters[key] !== void 0) data[key] = parameters[key];
      }
      return data;
    }
    data.data = { attributes: {} };
    const index7 = this.index;
    if (index7 !== null) {
      data.data.index = {
        type: index7.array.constructor.name,
        array: Array.prototype.slice.call(index7.array)
      };
    }
    const attributes = this.attributes;
    for (const key in attributes) {
      const attribute2 = attributes[key];
      data.data.attributes[key] = attribute2.toJSON(data.data);
    }
    const morphAttributes = {};
    let hasMorphAttributes = false;
    for (const key in this.morphAttributes) {
      const attributeArray = this.morphAttributes[key];
      const array3 = [];
      for (let i2 = 0, il = attributeArray.length; i2 < il; i2++) {
        const attribute2 = attributeArray[i2];
        array3.push(attribute2.toJSON(data.data));
      }
      if (array3.length > 0) {
        morphAttributes[key] = array3;
        hasMorphAttributes = true;
      }
    }
    if (hasMorphAttributes) {
      data.data.morphAttributes = morphAttributes;
      data.data.morphTargetsRelative = this.morphTargetsRelative;
    }
    const groups2 = this.groups;
    if (groups2.length > 0) {
      data.data.groups = JSON.parse(JSON.stringify(groups2));
    }
    const boundingSphere = this.boundingSphere;
    if (boundingSphere !== null) {
      data.data.boundingSphere = {
        center: boundingSphere.center.toArray(),
        radius: boundingSphere.radius
      };
    }
    return data;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.index = null;
    this.attributes = {};
    this.morphAttributes = {};
    this.groups = [];
    this.boundingBox = null;
    this.boundingSphere = null;
    const data = {};
    this.name = source.name;
    const index7 = source.index;
    if (index7 !== null) {
      this.setIndex(index7.clone(data));
    }
    const attributes = source.attributes;
    for (const name in attributes) {
      const attribute2 = attributes[name];
      this.setAttribute(name, attribute2.clone(data));
    }
    const morphAttributes = source.morphAttributes;
    for (const name in morphAttributes) {
      const array3 = [];
      const morphAttribute = morphAttributes[name];
      for (let i2 = 0, l2 = morphAttribute.length; i2 < l2; i2++) {
        array3.push(morphAttribute[i2].clone(data));
      }
      this.morphAttributes[name] = array3;
    }
    this.morphTargetsRelative = source.morphTargetsRelative;
    const groups2 = source.groups;
    for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
      const group2 = groups2[i2];
      this.addGroup(group2.start, group2.count, group2.materialIndex);
    }
    const boundingBox2 = source.boundingBox;
    if (boundingBox2 !== null) {
      this.boundingBox = boundingBox2.clone();
    }
    const boundingSphere = source.boundingSphere;
    if (boundingSphere !== null) {
      this.boundingSphere = boundingSphere.clone();
    }
    this.drawRange.start = source.drawRange.start;
    this.drawRange.count = source.drawRange.count;
    this.userData = source.userData;
    return this;
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
};
var _inverseMatrix$32 = new Matrix42();
var _ray$32 = new Ray2();
var _sphere$62 = new Sphere2();
var _sphereHitAt2 = new Vector32();
var _vA$12 = new Vector32();
var _vB$12 = new Vector32();
var _vC$12 = new Vector32();
var _tempA2 = new Vector32();
var _morphA2 = new Vector32();
var _uvA$12 = new Vector22();
var _uvB$12 = new Vector22();
var _uvC$12 = new Vector22();
var _normalA2 = new Vector32();
var _normalB2 = new Vector32();
var _normalC2 = new Vector32();
var _intersectionPoint2 = new Vector32();
var _intersectionPointWorld2 = new Vector32();
var Mesh2 = class extends Object3D2 {
  constructor(geometry = new BufferGeometry2(), material = new MeshBasicMaterial2()) {
    super();
    this.isMesh = true;
    this.type = "Mesh";
    this.geometry = geometry;
    this.material = material;
    this.updateMorphTargets();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.morphTargetInfluences !== void 0) {
      this.morphTargetInfluences = source.morphTargetInfluences.slice();
    }
    if (source.morphTargetDictionary !== void 0) {
      this.morphTargetDictionary = Object.assign({}, source.morphTargetDictionary);
    }
    this.material = Array.isArray(source.material) ? source.material.slice() : source.material;
    this.geometry = source.geometry;
    return this;
  }
  updateMorphTargets() {
    const geometry = this.geometry;
    const morphAttributes = geometry.morphAttributes;
    const keys = Object.keys(morphAttributes);
    if (keys.length > 0) {
      const morphAttribute = morphAttributes[keys[0]];
      if (morphAttribute !== void 0) {
        this.morphTargetInfluences = [];
        this.morphTargetDictionary = {};
        for (let m2 = 0, ml = morphAttribute.length; m2 < ml; m2++) {
          const name = morphAttribute[m2].name || String(m2);
          this.morphTargetInfluences.push(0);
          this.morphTargetDictionary[name] = m2;
        }
      }
    }
  }
  getVertexPosition(index7, target) {
    const geometry = this.geometry;
    const position = geometry.attributes.position;
    const morphPosition = geometry.morphAttributes.position;
    const morphTargetsRelative = geometry.morphTargetsRelative;
    target.fromBufferAttribute(position, index7);
    const morphInfluences = this.morphTargetInfluences;
    if (morphPosition && morphInfluences) {
      _morphA2.set(0, 0, 0);
      for (let i2 = 0, il = morphPosition.length; i2 < il; i2++) {
        const influence = morphInfluences[i2];
        const morphAttribute = morphPosition[i2];
        if (influence === 0) continue;
        _tempA2.fromBufferAttribute(morphAttribute, index7);
        if (morphTargetsRelative) {
          _morphA2.addScaledVector(_tempA2, influence);
        } else {
          _morphA2.addScaledVector(_tempA2.sub(target), influence);
        }
      }
      target.add(_morphA2);
    }
    return target;
  }
  raycast(raycaster, intersects4) {
    const geometry = this.geometry;
    const material = this.material;
    const matrixWorld = this.matrixWorld;
    if (material === void 0) return;
    if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
    _sphere$62.copy(geometry.boundingSphere);
    _sphere$62.applyMatrix4(matrixWorld);
    _ray$32.copy(raycaster.ray).recast(raycaster.near);
    if (_sphere$62.containsPoint(_ray$32.origin) === false) {
      if (_ray$32.intersectSphere(_sphere$62, _sphereHitAt2) === null) return;
      if (_ray$32.origin.distanceToSquared(_sphereHitAt2) > (raycaster.far - raycaster.near) ** 2) return;
    }
    _inverseMatrix$32.copy(matrixWorld).invert();
    _ray$32.copy(raycaster.ray).applyMatrix4(_inverseMatrix$32);
    if (geometry.boundingBox !== null) {
      if (_ray$32.intersectsBox(geometry.boundingBox) === false) return;
    }
    this._computeIntersections(raycaster, intersects4, _ray$32);
  }
  _computeIntersections(raycaster, intersects4, rayLocalSpace) {
    let intersection2;
    const geometry = this.geometry;
    const material = this.material;
    const index7 = geometry.index;
    const position = geometry.attributes.position;
    const uv2 = geometry.attributes.uv;
    const uv1 = geometry.attributes.uv1;
    const normal2 = geometry.attributes.normal;
    const groups2 = geometry.groups;
    const drawRange = geometry.drawRange;
    if (index7 !== null) {
      if (Array.isArray(material)) {
        for (let i2 = 0, il = groups2.length; i2 < il; i2++) {
          const group2 = groups2[i2];
          const groupMaterial = material[group2.materialIndex];
          const start = Math.max(group2.start, drawRange.start);
          const end = Math.min(index7.count, Math.min(group2.start + group2.count, drawRange.start + drawRange.count));
          for (let j2 = start, jl = end; j2 < jl; j2 += 3) {
            const a2 = index7.getX(j2);
            const b = index7.getX(j2 + 1);
            const c4 = index7.getX(j2 + 2);
            intersection2 = checkGeometryIntersection2(this, groupMaterial, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
            if (intersection2) {
              intersection2.faceIndex = Math.floor(j2 / 3);
              intersection2.face.materialIndex = group2.materialIndex;
              intersects4.push(intersection2);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(index7.count, drawRange.start + drawRange.count);
        for (let i2 = start, il = end; i2 < il; i2 += 3) {
          const a2 = index7.getX(i2);
          const b = index7.getX(i2 + 1);
          const c4 = index7.getX(i2 + 2);
          intersection2 = checkGeometryIntersection2(this, material, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
          if (intersection2) {
            intersection2.faceIndex = Math.floor(i2 / 3);
            intersects4.push(intersection2);
          }
        }
      }
    } else if (position !== void 0) {
      if (Array.isArray(material)) {
        for (let i2 = 0, il = groups2.length; i2 < il; i2++) {
          const group2 = groups2[i2];
          const groupMaterial = material[group2.materialIndex];
          const start = Math.max(group2.start, drawRange.start);
          const end = Math.min(position.count, Math.min(group2.start + group2.count, drawRange.start + drawRange.count));
          for (let j2 = start, jl = end; j2 < jl; j2 += 3) {
            const a2 = j2;
            const b = j2 + 1;
            const c4 = j2 + 2;
            intersection2 = checkGeometryIntersection2(this, groupMaterial, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
            if (intersection2) {
              intersection2.faceIndex = Math.floor(j2 / 3);
              intersection2.face.materialIndex = group2.materialIndex;
              intersects4.push(intersection2);
            }
          }
        }
      } else {
        const start = Math.max(0, drawRange.start);
        const end = Math.min(position.count, drawRange.start + drawRange.count);
        for (let i2 = start, il = end; i2 < il; i2 += 3) {
          const a2 = i2;
          const b = i2 + 1;
          const c4 = i2 + 2;
          intersection2 = checkGeometryIntersection2(this, material, raycaster, rayLocalSpace, uv2, uv1, normal2, a2, b, c4);
          if (intersection2) {
            intersection2.faceIndex = Math.floor(i2 / 3);
            intersects4.push(intersection2);
          }
        }
      }
    }
  }
};
function checkIntersection$12(object2, material, raycaster, ray, pA, pB, pC, point2) {
  let intersect2;
  if (material.side === BackSide2) {
    intersect2 = ray.intersectTriangle(pC, pB, pA, true, point2);
  } else {
    intersect2 = ray.intersectTriangle(pA, pB, pC, material.side === FrontSide2, point2);
  }
  if (intersect2 === null) return null;
  _intersectionPointWorld2.copy(point2);
  _intersectionPointWorld2.applyMatrix4(object2.matrixWorld);
  const distance3 = raycaster.ray.origin.distanceTo(_intersectionPointWorld2);
  if (distance3 < raycaster.near || distance3 > raycaster.far) return null;
  return {
    distance: distance3,
    point: _intersectionPointWorld2.clone(),
    object: object2
  };
}
function checkGeometryIntersection2(object2, material, raycaster, ray, uv2, uv1, normal2, a2, b, c4) {
  object2.getVertexPosition(a2, _vA$12);
  object2.getVertexPosition(b, _vB$12);
  object2.getVertexPosition(c4, _vC$12);
  const intersection2 = checkIntersection$12(object2, material, raycaster, ray, _vA$12, _vB$12, _vC$12, _intersectionPoint2);
  if (intersection2) {
    if (uv2) {
      _uvA$12.fromBufferAttribute(uv2, a2);
      _uvB$12.fromBufferAttribute(uv2, b);
      _uvC$12.fromBufferAttribute(uv2, c4);
      intersection2.uv = Triangle2.getInterpolation(_intersectionPoint2, _vA$12, _vB$12, _vC$12, _uvA$12, _uvB$12, _uvC$12, new Vector22());
    }
    if (uv1) {
      _uvA$12.fromBufferAttribute(uv1, a2);
      _uvB$12.fromBufferAttribute(uv1, b);
      _uvC$12.fromBufferAttribute(uv1, c4);
      intersection2.uv1 = Triangle2.getInterpolation(_intersectionPoint2, _vA$12, _vB$12, _vC$12, _uvA$12, _uvB$12, _uvC$12, new Vector22());
    }
    if (normal2) {
      _normalA2.fromBufferAttribute(normal2, a2);
      _normalB2.fromBufferAttribute(normal2, b);
      _normalC2.fromBufferAttribute(normal2, c4);
      intersection2.normal = Triangle2.getInterpolation(_intersectionPoint2, _vA$12, _vB$12, _vC$12, _normalA2, _normalB2, _normalC2, new Vector32());
      if (intersection2.normal.dot(ray.direction) > 0) {
        intersection2.normal.multiplyScalar(-1);
      }
    }
    const face = {
      a: a2,
      b,
      c: c4,
      normal: new Vector32(),
      materialIndex: 0
    };
    Triangle2.getNormal(_vA$12, _vB$12, _vC$12, face.normal);
    intersection2.face = face;
  }
  return intersection2;
}
var BoxGeometry2 = class _BoxGeometry extends BufferGeometry2 {
  constructor(width = 1, height = 1, depth2 = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1) {
    super();
    this.type = "BoxGeometry";
    this.parameters = {
      width,
      height,
      depth: depth2,
      widthSegments,
      heightSegments,
      depthSegments
    };
    const scope = this;
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let numberOfVertices = 0;
    let groupStart = 0;
    buildPlane("z", "y", "x", -1, -1, depth2, height, width, depthSegments, heightSegments, 0);
    buildPlane("z", "y", "x", 1, -1, depth2, height, -width, depthSegments, heightSegments, 1);
    buildPlane("x", "z", "y", 1, 1, width, depth2, height, widthSegments, depthSegments, 2);
    buildPlane("x", "z", "y", 1, -1, width, depth2, -height, widthSegments, depthSegments, 3);
    buildPlane("x", "y", "z", 1, -1, width, height, depth2, widthSegments, heightSegments, 4);
    buildPlane("x", "y", "z", -1, -1, width, height, -depth2, widthSegments, heightSegments, 5);
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
    function buildPlane(u5, v3, w4, udir, vdir, width2, height2, depth3, gridX, gridY, materialIndex) {
      const segmentWidth = width2 / gridX;
      const segmentHeight = height2 / gridY;
      const widthHalf = width2 / 2;
      const heightHalf = height2 / 2;
      const depthHalf = depth3 / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      let groupCount = 0;
      const vector = new Vector32();
      for (let iy = 0; iy < gridY1; iy++) {
        const y2 = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x2 = ix * segmentWidth - widthHalf;
          vector[u5] = x2 * udir;
          vector[v3] = y2 * vdir;
          vector[w4] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u5] = 0;
          vector[v3] = 0;
          vector[w4] = depth3 > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(1 - iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a2 = numberOfVertices + ix + gridX1 * iy;
          const b = numberOfVertices + ix + gridX1 * (iy + 1);
          const c4 = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d2 = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a2, b, d2);
          indices.push(b, c4, d2);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, materialIndex);
      groupStart += groupCount;
      numberOfVertices += vertexCounter;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _BoxGeometry(data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments);
  }
};
function cloneUniforms2(src) {
  const dst = {};
  for (const u5 in src) {
    dst[u5] = {};
    for (const p2 in src[u5]) {
      const property2 = src[u5][p2];
      if (property2 && (property2.isColor || property2.isMatrix3 || property2.isMatrix4 || property2.isVector2 || property2.isVector3 || property2.isVector4 || property2.isTexture || property2.isQuaternion)) {
        if (property2.isRenderTargetTexture) {
          console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().");
          dst[u5][p2] = null;
        } else {
          dst[u5][p2] = property2.clone();
        }
      } else if (Array.isArray(property2)) {
        dst[u5][p2] = property2.slice();
      } else {
        dst[u5][p2] = property2;
      }
    }
  }
  return dst;
}
function cloneUniformsGroups2(src) {
  const dst = [];
  for (let u5 = 0; u5 < src.length; u5++) {
    dst.push(src[u5].clone());
  }
  return dst;
}
var default_vertex2 = (
  /* glsl */
  `
void main() {
	gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`
);
var default_fragment2 = (
  /* glsl */
  `
void main() {
	gl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );
}
`
);
var ShaderMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isShaderMaterial = true;
    this.type = "ShaderMaterial";
    this.defines = {};
    this.uniforms = {};
    this.uniformsGroups = [];
    this.vertexShader = default_vertex2;
    this.fragmentShader = default_fragment2;
    this.linewidth = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.fog = false;
    this.lights = false;
    this.clipping = false;
    this.forceSinglePass = true;
    this.extensions = {
      clipCullDistance: false,
      // set to use vertex shader clipping
      multiDraw: false
      // set to use vertex shader multi_draw / enable gl_DrawID
    };
    this.defaultAttributeValues = {
      "color": [1, 1, 1],
      "uv": [0, 0],
      "uv1": [0, 0]
    };
    this.index0AttributeName = void 0;
    this.uniformsNeedUpdate = false;
    this.glslVersion = null;
    if (parameters !== void 0) {
      this.setValues(parameters);
    }
  }
  copy(source) {
    super.copy(source);
    this.fragmentShader = source.fragmentShader;
    this.vertexShader = source.vertexShader;
    this.uniforms = cloneUniforms2(source.uniforms);
    this.uniformsGroups = cloneUniformsGroups2(source.uniformsGroups);
    this.defines = Object.assign({}, source.defines);
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.fog = source.fog;
    this.lights = source.lights;
    this.clipping = source.clipping;
    this.extensions = Object.assign({}, source.extensions);
    this.glslVersion = source.glslVersion;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.glslVersion = this.glslVersion;
    data.uniforms = {};
    for (const name in this.uniforms) {
      const uniform2 = this.uniforms[name];
      const value = uniform2.value;
      if (value && value.isTexture) {
        data.uniforms[name] = {
          type: "t",
          value: value.toJSON(meta).uuid
        };
      } else if (value && value.isColor) {
        data.uniforms[name] = {
          type: "c",
          value: value.getHex()
        };
      } else if (value && value.isVector2) {
        data.uniforms[name] = {
          type: "v2",
          value: value.toArray()
        };
      } else if (value && value.isVector3) {
        data.uniforms[name] = {
          type: "v3",
          value: value.toArray()
        };
      } else if (value && value.isVector4) {
        data.uniforms[name] = {
          type: "v4",
          value: value.toArray()
        };
      } else if (value && value.isMatrix3) {
        data.uniforms[name] = {
          type: "m3",
          value: value.toArray()
        };
      } else if (value && value.isMatrix4) {
        data.uniforms[name] = {
          type: "m4",
          value: value.toArray()
        };
      } else {
        data.uniforms[name] = {
          value
        };
      }
    }
    if (Object.keys(this.defines).length > 0) data.defines = this.defines;
    data.vertexShader = this.vertexShader;
    data.fragmentShader = this.fragmentShader;
    data.lights = this.lights;
    data.clipping = this.clipping;
    const extensions = {};
    for (const key in this.extensions) {
      if (this.extensions[key] === true) extensions[key] = true;
    }
    if (Object.keys(extensions).length > 0) data.extensions = extensions;
    return data;
  }
};
var Camera2 = class extends Object3D2 {
  constructor() {
    super();
    this.isCamera = true;
    this.type = "Camera";
    this.matrixWorldInverse = new Matrix42();
    this.projectionMatrix = new Matrix42();
    this.projectionMatrixInverse = new Matrix42();
    this.coordinateSystem = WebGLCoordinateSystem2;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.matrixWorldInverse.copy(source.matrixWorldInverse);
    this.projectionMatrix.copy(source.projectionMatrix);
    this.projectionMatrixInverse.copy(source.projectionMatrixInverse);
    this.coordinateSystem = source.coordinateSystem;
    return this;
  }
  getWorldDirection(target) {
    return super.getWorldDirection(target).negate();
  }
  updateMatrixWorld(force) {
    super.updateMatrixWorld(force);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  updateWorldMatrix(updateParents, updateChildren) {
    super.updateWorldMatrix(updateParents, updateChildren);
    this.matrixWorldInverse.copy(this.matrixWorld).invert();
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _v3$12 = new Vector32();
var _minTarget2 = new Vector22();
var _maxTarget2 = new Vector22();
var PerspectiveCamera2 = class extends Camera2 {
  constructor(fov3 = 50, aspect3 = 1, near = 0.1, far = 2e3) {
    super();
    this.isPerspectiveCamera = true;
    this.type = "PerspectiveCamera";
    this.fov = fov3;
    this.zoom = 1;
    this.near = near;
    this.far = far;
    this.focus = 10;
    this.aspect = aspect3;
    this.view = null;
    this.filmGauge = 35;
    this.filmOffset = 0;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.fov = source.fov;
    this.zoom = source.zoom;
    this.near = source.near;
    this.far = source.far;
    this.focus = source.focus;
    this.aspect = source.aspect;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    this.filmGauge = source.filmGauge;
    this.filmOffset = source.filmOffset;
    return this;
  }
  /**
   * Sets the FOV by focal length in respect to the current .filmGauge.
   *
   * The default film gauge is 35, so that the focal length can be specified for
   * a 35mm (full frame) camera.
   *
   * Values for focal length and film gauge must have the same unit.
   */
  setFocalLength(focalLength) {
    const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;
    this.fov = RAD2DEG2 * 2 * Math.atan(vExtentSlope);
    this.updateProjectionMatrix();
  }
  /**
   * Calculates the focal length from the current .fov and .filmGauge.
   */
  getFocalLength() {
    const vExtentSlope = Math.tan(DEG2RAD2 * 0.5 * this.fov);
    return 0.5 * this.getFilmHeight() / vExtentSlope;
  }
  getEffectiveFOV() {
    return RAD2DEG2 * 2 * Math.atan(
      Math.tan(DEG2RAD2 * 0.5 * this.fov) / this.zoom
    );
  }
  getFilmWidth() {
    return this.filmGauge * Math.min(this.aspect, 1);
  }
  getFilmHeight() {
    return this.filmGauge / Math.max(this.aspect, 1);
  }
  /**
   * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.
   * Sets minTarget and maxTarget to the coordinates of the lower-left and upper-right corners of the view rectangle.
   */
  getViewBounds(distance3, minTarget, maxTarget) {
    _v3$12.set(-1, -1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    minTarget.set(_v3$12.x, _v3$12.y).multiplyScalar(-distance3 / _v3$12.z);
    _v3$12.set(1, 1, 0.5).applyMatrix4(this.projectionMatrixInverse);
    maxTarget.set(_v3$12.x, _v3$12.y).multiplyScalar(-distance3 / _v3$12.z);
  }
  /**
   * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.
   * Copies the result into the target Vector2, where x is width and y is height.
   */
  getViewSize(distance3, target) {
    this.getViewBounds(distance3, _minTarget2, _maxTarget2);
    return target.subVectors(_maxTarget2, _minTarget2);
  }
  /**
   * Sets an offset in a larger frustum. This is useful for multi-window or
   * multi-monitor/multi-machine setups.
   *
   * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
   * the monitors are in grid like this
   *
   *   +---+---+---+
   *   | A | B | C |
   *   +---+---+---+
   *   | D | E | F |
   *   +---+---+---+
   *
   * then for each monitor you would call it like this
   *
   *   const w = 1920;
   *   const h = 1080;
   *   const fullWidth = w * 3;
   *   const fullHeight = h * 2;
   *
   *   --A--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
   *   --B--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
   *   --C--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
   *   --D--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
   *   --E--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
   *   --F--
   *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
   *
   *   Note there is no reason monitors have to be the same size or in a grid.
   */
  setViewOffset(fullWidth, fullHeight, x2, y2, width, height) {
    this.aspect = fullWidth / fullHeight;
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x2;
    this.view.offsetY = y2;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const near = this.near;
    let top = near * Math.tan(DEG2RAD2 * 0.5 * this.fov) / this.zoom;
    let height = 2 * top;
    let width = this.aspect * height;
    let left = -0.5 * width;
    const view = this.view;
    if (this.view !== null && this.view.enabled) {
      const fullWidth = view.fullWidth, fullHeight = view.fullHeight;
      left += view.offsetX * width / fullWidth;
      top -= view.offsetY * height / fullHeight;
      width *= view.width / fullWidth;
      height *= view.height / fullHeight;
    }
    const skew = this.filmOffset;
    if (skew !== 0) left += near * skew / this.getFilmWidth();
    this.projectionMatrix.makePerspective(left, left + width, top, top - height, near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.fov = this.fov;
    data.object.zoom = this.zoom;
    data.object.near = this.near;
    data.object.far = this.far;
    data.object.focus = this.focus;
    data.object.aspect = this.aspect;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    data.object.filmGauge = this.filmGauge;
    data.object.filmOffset = this.filmOffset;
    return data;
  }
};
var fov2 = -90;
var aspect2 = 1;
var CubeCamera2 = class extends Object3D2 {
  constructor(near, far, renderTarget) {
    super();
    this.type = "CubeCamera";
    this.renderTarget = renderTarget;
    this.coordinateSystem = null;
    this.activeMipmapLevel = 0;
    const cameraPX = new PerspectiveCamera2(fov2, aspect2, near, far);
    cameraPX.layers = this.layers;
    this.add(cameraPX);
    const cameraNX = new PerspectiveCamera2(fov2, aspect2, near, far);
    cameraNX.layers = this.layers;
    this.add(cameraNX);
    const cameraPY = new PerspectiveCamera2(fov2, aspect2, near, far);
    cameraPY.layers = this.layers;
    this.add(cameraPY);
    const cameraNY = new PerspectiveCamera2(fov2, aspect2, near, far);
    cameraNY.layers = this.layers;
    this.add(cameraNY);
    const cameraPZ = new PerspectiveCamera2(fov2, aspect2, near, far);
    cameraPZ.layers = this.layers;
    this.add(cameraPZ);
    const cameraNZ = new PerspectiveCamera2(fov2, aspect2, near, far);
    cameraNZ.layers = this.layers;
    this.add(cameraNZ);
  }
  updateCoordinateSystem() {
    const coordinateSystem = this.coordinateSystem;
    const cameras = this.children.concat();
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = cameras;
    for (const camera3 of cameras) this.remove(camera3);
    if (coordinateSystem === WebGLCoordinateSystem2) {
      cameraPX.up.set(0, 1, 0);
      cameraPX.lookAt(1, 0, 0);
      cameraNX.up.set(0, 1, 0);
      cameraNX.lookAt(-1, 0, 0);
      cameraPY.up.set(0, 0, -1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, 1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, 1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, 1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else if (coordinateSystem === WebGPUCoordinateSystem2) {
      cameraPX.up.set(0, -1, 0);
      cameraPX.lookAt(-1, 0, 0);
      cameraNX.up.set(0, -1, 0);
      cameraNX.lookAt(1, 0, 0);
      cameraPY.up.set(0, 0, 1);
      cameraPY.lookAt(0, 1, 0);
      cameraNY.up.set(0, 0, -1);
      cameraNY.lookAt(0, -1, 0);
      cameraPZ.up.set(0, -1, 0);
      cameraPZ.lookAt(0, 0, 1);
      cameraNZ.up.set(0, -1, 0);
      cameraNZ.lookAt(0, 0, -1);
    } else {
      throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: " + coordinateSystem);
    }
    for (const camera3 of cameras) {
      this.add(camera3);
      camera3.updateMatrixWorld();
    }
  }
  update(renderer3, scene3) {
    if (this.parent === null) this.updateMatrixWorld();
    const { renderTarget, activeMipmapLevel } = this;
    if (this.coordinateSystem !== renderer3.coordinateSystem) {
      this.coordinateSystem = renderer3.coordinateSystem;
      this.updateCoordinateSystem();
    }
    const [cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ] = this.children;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentActiveCubeFace = renderer3.getActiveCubeFace();
    const currentActiveMipmapLevel = renderer3.getActiveMipmapLevel();
    const currentXrEnabled = renderer3.xr.enabled;
    renderer3.xr.enabled = false;
    const generateMipmaps = renderTarget.texture.generateMipmaps;
    renderTarget.texture.generateMipmaps = false;
    renderer3.setRenderTarget(renderTarget, 0, activeMipmapLevel);
    renderer3.render(scene3, cameraPX);
    renderer3.setRenderTarget(renderTarget, 1, activeMipmapLevel);
    renderer3.render(scene3, cameraNX);
    renderer3.setRenderTarget(renderTarget, 2, activeMipmapLevel);
    renderer3.render(scene3, cameraPY);
    renderer3.setRenderTarget(renderTarget, 3, activeMipmapLevel);
    renderer3.render(scene3, cameraNY);
    renderer3.setRenderTarget(renderTarget, 4, activeMipmapLevel);
    renderer3.render(scene3, cameraPZ);
    renderTarget.texture.generateMipmaps = generateMipmaps;
    renderer3.setRenderTarget(renderTarget, 5, activeMipmapLevel);
    renderer3.render(scene3, cameraNZ);
    renderer3.setRenderTarget(currentRenderTarget, currentActiveCubeFace, currentActiveMipmapLevel);
    renderer3.xr.enabled = currentXrEnabled;
    renderTarget.texture.needsPMREMUpdate = true;
  }
};
var CubeTexture2 = class extends Texture2 {
  constructor(images, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2, colorSpace) {
    images = images !== void 0 ? images : [];
    mapping = mapping !== void 0 ? mapping : CubeReflectionMapping2;
    super(images, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2, colorSpace);
    this.isCubeTexture = true;
    this.flipY = false;
  }
  get images() {
    return this.image;
  }
  set images(value) {
    this.image = value;
  }
};
var WebGLCubeRenderTarget2 = class extends WebGLRenderTarget2 {
  constructor(size = 1, options = {}) {
    super(size, size, options);
    this.isWebGLCubeRenderTarget = true;
    const image = { width: size, height: size, depth: 1 };
    const images = [image, image, image, image, image, image];
    this.texture = new CubeTexture2(images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace);
    this.texture.isRenderTargetTexture = true;
    this.texture.generateMipmaps = options.generateMipmaps !== void 0 ? options.generateMipmaps : false;
    this.texture.minFilter = options.minFilter !== void 0 ? options.minFilter : LinearFilter2;
  }
  fromEquirectangularTexture(renderer3, texture2) {
    this.texture.type = texture2.type;
    this.texture.colorSpace = texture2.colorSpace;
    this.texture.generateMipmaps = texture2.generateMipmaps;
    this.texture.minFilter = texture2.minFilter;
    this.texture.magFilter = texture2.magFilter;
    const shader = {
      uniforms: {
        tEquirect: { value: null }
      },
      vertexShader: (
        /* glsl */
        `

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`
      ),
      fragmentShader: (
        /* glsl */
        `

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
      )
    };
    const geometry = new BoxGeometry2(5, 5, 5);
    const material = new ShaderMaterial2({
      name: "CubemapFromEquirect",
      uniforms: cloneUniforms2(shader.uniforms),
      vertexShader: shader.vertexShader,
      fragmentShader: shader.fragmentShader,
      side: BackSide2,
      blending: NoBlending2
    });
    material.uniforms.tEquirect.value = texture2;
    const mesh = new Mesh2(geometry, material);
    const currentMinFilter = texture2.minFilter;
    if (texture2.minFilter === LinearMipmapLinearFilter2) texture2.minFilter = LinearFilter2;
    const camera3 = new CubeCamera2(1, 10, this);
    camera3.update(renderer3, mesh);
    texture2.minFilter = currentMinFilter;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  }
  clear(renderer3, color3, depth2, stencil) {
    const currentRenderTarget = renderer3.getRenderTarget();
    for (let i2 = 0; i2 < 6; i2++) {
      renderer3.setRenderTarget(this, i2);
      renderer3.clear(color3, depth2, stencil);
    }
    renderer3.setRenderTarget(currentRenderTarget);
  }
};
var Scene2 = class extends Object3D2 {
  constructor() {
    super();
    this.isScene = true;
    this.type = "Scene";
    this.background = null;
    this.environment = null;
    this.fog = null;
    this.backgroundBlurriness = 0;
    this.backgroundIntensity = 1;
    this.backgroundRotation = new Euler2();
    this.environmentIntensity = 1;
    this.environmentRotation = new Euler2();
    this.overrideMaterial = null;
    if (typeof __THREE_DEVTOOLS__ !== "undefined") {
      __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe", { detail: this }));
    }
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    if (source.background !== null) this.background = source.background.clone();
    if (source.environment !== null) this.environment = source.environment.clone();
    if (source.fog !== null) this.fog = source.fog.clone();
    this.backgroundBlurriness = source.backgroundBlurriness;
    this.backgroundIntensity = source.backgroundIntensity;
    this.backgroundRotation.copy(source.backgroundRotation);
    this.environmentIntensity = source.environmentIntensity;
    this.environmentRotation.copy(source.environmentRotation);
    if (source.overrideMaterial !== null) this.overrideMaterial = source.overrideMaterial.clone();
    this.matrixAutoUpdate = source.matrixAutoUpdate;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.fog !== null) data.object.fog = this.fog.toJSON();
    if (this.backgroundBlurriness > 0) data.object.backgroundBlurriness = this.backgroundBlurriness;
    if (this.backgroundIntensity !== 1) data.object.backgroundIntensity = this.backgroundIntensity;
    data.object.backgroundRotation = this.backgroundRotation.toArray();
    if (this.environmentIntensity !== 1) data.object.environmentIntensity = this.environmentIntensity;
    data.object.environmentRotation = this.environmentRotation.toArray();
    return data;
  }
};
var InterleavedBuffer2 = class {
  constructor(array3, stride) {
    this.isInterleavedBuffer = true;
    this.array = array3;
    this.stride = stride;
    this.count = array3 !== void 0 ? array3.length / stride : 0;
    this.usage = StaticDrawUsage2;
    this._updateRange = { offset: 0, count: -1 };
    this.updateRanges = [];
    this.version = 0;
    this.uuid = generateUUID2();
  }
  onUploadCallback() {
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  get updateRange() {
    warnOnce2("THREE.InterleavedBuffer: updateRange() is deprecated and will be removed in r169. Use addUpdateRange() instead.");
    return this._updateRange;
  }
  setUsage(value) {
    this.usage = value;
    return this;
  }
  addUpdateRange(start, count2) {
    this.updateRanges.push({ start, count: count2 });
  }
  clearUpdateRanges() {
    this.updateRanges.length = 0;
  }
  copy(source) {
    this.array = new source.array.constructor(source.array);
    this.count = source.count;
    this.stride = source.stride;
    this.usage = source.usage;
    return this;
  }
  copyAt(index1, attribute2, index22) {
    index1 *= this.stride;
    index22 *= attribute2.stride;
    for (let i2 = 0, l2 = this.stride; i2 < l2; i2++) {
      this.array[index1 + i2] = attribute2.array[index22 + i2];
    }
    return this;
  }
  set(value, offset = 0) {
    this.array.set(value, offset);
    return this;
  }
  clone(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID2();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer;
    }
    const array3 = new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]);
    const ib = new this.constructor(array3, this.stride);
    ib.setUsage(this.usage);
    return ib;
  }
  onUpload(callback) {
    this.onUploadCallback = callback;
    return this;
  }
  toJSON(data) {
    if (data.arrayBuffers === void 0) {
      data.arrayBuffers = {};
    }
    if (this.array.buffer._uuid === void 0) {
      this.array.buffer._uuid = generateUUID2();
    }
    if (data.arrayBuffers[this.array.buffer._uuid] === void 0) {
      data.arrayBuffers[this.array.buffer._uuid] = Array.from(new Uint32Array(this.array.buffer));
    }
    return {
      uuid: this.uuid,
      buffer: this.array.buffer._uuid,
      type: this.array.constructor.name,
      stride: this.stride
    };
  }
};
var _vector$72 = new Vector32();
var InterleavedBufferAttribute2 = class _InterleavedBufferAttribute {
  constructor(interleavedBuffer, itemSize, offset, normalized = false) {
    this.isInterleavedBufferAttribute = true;
    this.name = "";
    this.data = interleavedBuffer;
    this.itemSize = itemSize;
    this.offset = offset;
    this.normalized = normalized;
  }
  get count() {
    return this.data.count;
  }
  get array() {
    return this.data.array;
  }
  set needsUpdate(value) {
    this.data.needsUpdate = value;
  }
  applyMatrix4(m2) {
    for (let i2 = 0, l2 = this.data.count; i2 < l2; i2++) {
      _vector$72.fromBufferAttribute(this, i2);
      _vector$72.applyMatrix4(m2);
      this.setXYZ(i2, _vector$72.x, _vector$72.y, _vector$72.z);
    }
    return this;
  }
  applyNormalMatrix(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$72.fromBufferAttribute(this, i2);
      _vector$72.applyNormalMatrix(m2);
      this.setXYZ(i2, _vector$72.x, _vector$72.y, _vector$72.z);
    }
    return this;
  }
  transformDirection(m2) {
    for (let i2 = 0, l2 = this.count; i2 < l2; i2++) {
      _vector$72.fromBufferAttribute(this, i2);
      _vector$72.transformDirection(m2);
      this.setXYZ(i2, _vector$72.x, _vector$72.y, _vector$72.z);
    }
    return this;
  }
  getComponent(index7, component) {
    let value = this.array[index7 * this.data.stride + this.offset + component];
    if (this.normalized) value = denormalize2(value, this.array);
    return value;
  }
  setComponent(index7, component, value) {
    if (this.normalized) value = normalize$1(value, this.array);
    this.data.array[index7 * this.data.stride + this.offset + component] = value;
    return this;
  }
  setX(index7, x2) {
    if (this.normalized) x2 = normalize$1(x2, this.array);
    this.data.array[index7 * this.data.stride + this.offset] = x2;
    return this;
  }
  setY(index7, y2) {
    if (this.normalized) y2 = normalize$1(y2, this.array);
    this.data.array[index7 * this.data.stride + this.offset + 1] = y2;
    return this;
  }
  setZ(index7, z2) {
    if (this.normalized) z2 = normalize$1(z2, this.array);
    this.data.array[index7 * this.data.stride + this.offset + 2] = z2;
    return this;
  }
  setW(index7, w4) {
    if (this.normalized) w4 = normalize$1(w4, this.array);
    this.data.array[index7 * this.data.stride + this.offset + 3] = w4;
    return this;
  }
  getX(index7) {
    let x2 = this.data.array[index7 * this.data.stride + this.offset];
    if (this.normalized) x2 = denormalize2(x2, this.array);
    return x2;
  }
  getY(index7) {
    let y2 = this.data.array[index7 * this.data.stride + this.offset + 1];
    if (this.normalized) y2 = denormalize2(y2, this.array);
    return y2;
  }
  getZ(index7) {
    let z2 = this.data.array[index7 * this.data.stride + this.offset + 2];
    if (this.normalized) z2 = denormalize2(z2, this.array);
    return z2;
  }
  getW(index7) {
    let w4 = this.data.array[index7 * this.data.stride + this.offset + 3];
    if (this.normalized) w4 = denormalize2(w4, this.array);
    return w4;
  }
  setXY(index7, x2, y2) {
    index7 = index7 * this.data.stride + this.offset;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
    }
    this.data.array[index7 + 0] = x2;
    this.data.array[index7 + 1] = y2;
    return this;
  }
  setXYZ(index7, x2, y2, z2) {
    index7 = index7 * this.data.stride + this.offset;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
      z2 = normalize$1(z2, this.array);
    }
    this.data.array[index7 + 0] = x2;
    this.data.array[index7 + 1] = y2;
    this.data.array[index7 + 2] = z2;
    return this;
  }
  setXYZW(index7, x2, y2, z2, w4) {
    index7 = index7 * this.data.stride + this.offset;
    if (this.normalized) {
      x2 = normalize$1(x2, this.array);
      y2 = normalize$1(y2, this.array);
      z2 = normalize$1(z2, this.array);
      w4 = normalize$1(w4, this.array);
    }
    this.data.array[index7 + 0] = x2;
    this.data.array[index7 + 1] = y2;
    this.data.array[index7 + 2] = z2;
    this.data.array[index7 + 3] = w4;
    return this;
  }
  clone(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");
      const array3 = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index7 = i2 * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array3.push(this.data.array[index7 + j2]);
        }
      }
      return new BufferAttribute2(new this.array.constructor(array3), this.itemSize, this.normalized);
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.clone(data);
      }
      return new _InterleavedBufferAttribute(data.interleavedBuffers[this.data.uuid], this.itemSize, this.offset, this.normalized);
    }
  }
  toJSON(data) {
    if (data === void 0) {
      console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");
      const array3 = [];
      for (let i2 = 0; i2 < this.count; i2++) {
        const index7 = i2 * this.data.stride + this.offset;
        for (let j2 = 0; j2 < this.itemSize; j2++) {
          array3.push(this.data.array[index7 + j2]);
        }
      }
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: array3,
        normalized: this.normalized
      };
    } else {
      if (data.interleavedBuffers === void 0) {
        data.interleavedBuffers = {};
      }
      if (data.interleavedBuffers[this.data.uuid] === void 0) {
        data.interleavedBuffers[this.data.uuid] = this.data.toJSON(data);
      }
      return {
        isInterleavedBufferAttribute: true,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized
      };
    }
  }
};
var SpriteMaterial = class extends Material2 {
  constructor(parameters) {
    super();
    this.isSpriteMaterial = true;
    this.type = "SpriteMaterial";
    this.color = new Color3(16777215);
    this.map = null;
    this.alphaMap = null;
    this.rotation = 0;
    this.sizeAttenuation = true;
    this.transparent = true;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.rotation = source.rotation;
    this.sizeAttenuation = source.sizeAttenuation;
    this.fog = source.fog;
    return this;
  }
};
var _intersectPoint2 = new Vector32();
var _worldScale2 = new Vector32();
var _mvPosition2 = new Vector32();
var _alignedPosition2 = new Vector22();
var _rotatedPosition2 = new Vector22();
var _viewWorldMatrix2 = new Matrix42();
var _vA2 = new Vector32();
var _vB2 = new Vector32();
var _vC2 = new Vector32();
var _uvA2 = new Vector22();
var _uvB2 = new Vector22();
var _uvC2 = new Vector22();
var _v1$22 = new Vector32();
var _v2$12 = new Vector32();
var _basePosition2 = new Vector32();
var _skinIndex2 = new Vector42();
var _skinWeight2 = new Vector42();
var _vector3$1 = new Vector32();
var _matrix42 = new Matrix42();
var _vertex2 = new Vector32();
var _sphere$52 = new Sphere2();
var _inverseMatrix$22 = new Matrix42();
var _ray$22 = new Ray2();
var DataTexture = class extends Texture2 {
  constructor(data = null, width = 1, height = 1, format3, type, mapping, wrapS, wrapT, magFilter = NearestFilter2, minFilter = NearestFilter2, anisotropy2, colorSpace) {
    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2, colorSpace);
    this.isDataTexture = true;
    this.image = { data, width, height };
    this.generateMipmaps = false;
    this.flipY = false;
    this.unpackAlignment = 1;
  }
};
var _offsetMatrix2 = new Matrix42();
var _identityMatrix$12 = new Matrix42();
var InstancedBufferAttribute2 = class extends BufferAttribute2 {
  constructor(array3, itemSize, normalized, meshPerAttribute = 1) {
    super(array3, itemSize, normalized);
    this.isInstancedBufferAttribute = true;
    this.meshPerAttribute = meshPerAttribute;
  }
  copy(source) {
    super.copy(source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.meshPerAttribute = this.meshPerAttribute;
    data.isInstancedBufferAttribute = true;
    return data;
  }
};
var _instanceLocalMatrix2 = new Matrix42();
var _instanceWorldMatrix2 = new Matrix42();
var _box32 = new Box32();
var _identity2 = new Matrix42();
var _mesh$12 = new Mesh2();
var _sphere$42 = new Sphere2();
var _vector12 = new Vector32();
var _vector22 = new Vector32();
var _normalMatrix2 = new Matrix32();
var Plane2 = class {
  constructor(normal2 = new Vector32(1, 0, 0), constant2 = 0) {
    this.isPlane = true;
    this.normal = normal2;
    this.constant = constant2;
  }
  set(normal2, constant2) {
    this.normal.copy(normal2);
    this.constant = constant2;
    return this;
  }
  setComponents(x2, y2, z2, w4) {
    this.normal.set(x2, y2, z2);
    this.constant = w4;
    return this;
  }
  setFromNormalAndCoplanarPoint(normal2, point2) {
    this.normal.copy(normal2);
    this.constant = -point2.dot(this.normal);
    return this;
  }
  setFromCoplanarPoints(a2, b, c4) {
    const normal2 = _vector12.subVectors(c4, b).cross(_vector22.subVectors(a2, b)).normalize();
    this.setFromNormalAndCoplanarPoint(normal2, a2);
    return this;
  }
  copy(plane) {
    this.normal.copy(plane.normal);
    this.constant = plane.constant;
    return this;
  }
  normalize() {
    const inverseNormalLength = 1 / this.normal.length();
    this.normal.multiplyScalar(inverseNormalLength);
    this.constant *= inverseNormalLength;
    return this;
  }
  negate() {
    this.constant *= -1;
    this.normal.negate();
    return this;
  }
  distanceToPoint(point2) {
    return this.normal.dot(point2) + this.constant;
  }
  distanceToSphere(sphere) {
    return this.distanceToPoint(sphere.center) - sphere.radius;
  }
  projectPoint(point2, target) {
    return target.copy(point2).addScaledVector(this.normal, -this.distanceToPoint(point2));
  }
  intersectLine(line, target) {
    const direction2 = line.delta(_vector12);
    const denominator = this.normal.dot(direction2);
    if (denominator === 0) {
      if (this.distanceToPoint(line.start) === 0) {
        return target.copy(line.start);
      }
      return null;
    }
    const t4 = -(line.start.dot(this.normal) + this.constant) / denominator;
    if (t4 < 0 || t4 > 1) {
      return null;
    }
    return target.copy(line.start).addScaledVector(direction2, t4);
  }
  intersectsLine(line) {
    const startSign = this.distanceToPoint(line.start);
    const endSign = this.distanceToPoint(line.end);
    return startSign < 0 && endSign > 0 || endSign < 0 && startSign > 0;
  }
  intersectsBox(box) {
    return box.intersectsPlane(this);
  }
  intersectsSphere(sphere) {
    return sphere.intersectsPlane(this);
  }
  coplanarPoint(target) {
    return target.copy(this.normal).multiplyScalar(-this.constant);
  }
  applyMatrix4(matrix, optionalNormalMatrix) {
    const normalMatrix = optionalNormalMatrix || _normalMatrix2.getNormalMatrix(matrix);
    const referencePoint = this.coplanarPoint(_vector12).applyMatrix4(matrix);
    const normal2 = this.normal.applyMatrix3(normalMatrix).normalize();
    this.constant = -referencePoint.dot(normal2);
    return this;
  }
  translate(offset) {
    this.constant -= offset.dot(this.normal);
    return this;
  }
  equals(plane) {
    return plane.normal.equals(this.normal) && plane.constant === this.constant;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var _sphere$32 = new Sphere2();
var _vector$62 = new Vector32();
var Frustum2 = class {
  constructor(p02 = new Plane2(), p1 = new Plane2(), p2 = new Plane2(), p3 = new Plane2(), p4 = new Plane2(), p5 = new Plane2()) {
    this.planes = [p02, p1, p2, p3, p4, p5];
  }
  set(p02, p1, p2, p3, p4, p5) {
    const planes = this.planes;
    planes[0].copy(p02);
    planes[1].copy(p1);
    planes[2].copy(p2);
    planes[3].copy(p3);
    planes[4].copy(p4);
    planes[5].copy(p5);
    return this;
  }
  copy(frustum) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      planes[i2].copy(frustum.planes[i2]);
    }
    return this;
  }
  setFromProjectionMatrix(m2, coordinateSystem = WebGLCoordinateSystem2) {
    const planes = this.planes;
    const me = m2.elements;
    const me0 = me[0], me1 = me[1], me2 = me[2], me3 = me[3];
    const me4 = me[4], me5 = me[5], me6 = me[6], me7 = me[7];
    const me8 = me[8], me9 = me[9], me10 = me[10], me11 = me[11];
    const me12 = me[12], me13 = me[13], me14 = me[14], me15 = me[15];
    planes[0].setComponents(me3 - me0, me7 - me4, me11 - me8, me15 - me12).normalize();
    planes[1].setComponents(me3 + me0, me7 + me4, me11 + me8, me15 + me12).normalize();
    planes[2].setComponents(me3 + me1, me7 + me5, me11 + me9, me15 + me13).normalize();
    planes[3].setComponents(me3 - me1, me7 - me5, me11 - me9, me15 - me13).normalize();
    planes[4].setComponents(me3 - me2, me7 - me6, me11 - me10, me15 - me14).normalize();
    if (coordinateSystem === WebGLCoordinateSystem2) {
      planes[5].setComponents(me3 + me2, me7 + me6, me11 + me10, me15 + me14).normalize();
    } else if (coordinateSystem === WebGPUCoordinateSystem2) {
      planes[5].setComponents(me2, me6, me10, me14).normalize();
    } else {
      throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: " + coordinateSystem);
    }
    return this;
  }
  intersectsObject(object2) {
    if (object2.boundingSphere !== void 0) {
      if (object2.boundingSphere === null) object2.computeBoundingSphere();
      _sphere$32.copy(object2.boundingSphere).applyMatrix4(object2.matrixWorld);
    } else {
      const geometry = object2.geometry;
      if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
      _sphere$32.copy(geometry.boundingSphere).applyMatrix4(object2.matrixWorld);
    }
    return this.intersectsSphere(_sphere$32);
  }
  intersectsSprite(sprite) {
    _sphere$32.center.set(0, 0, 0);
    _sphere$32.radius = 0.7071067811865476;
    _sphere$32.applyMatrix4(sprite.matrixWorld);
    return this.intersectsSphere(_sphere$32);
  }
  intersectsSphere(sphere) {
    const planes = this.planes;
    const center = sphere.center;
    const negRadius = -sphere.radius;
    for (let i2 = 0; i2 < 6; i2++) {
      const distance3 = planes[i2].distanceToPoint(center);
      if (distance3 < negRadius) {
        return false;
      }
    }
    return true;
  }
  intersectsBox(box) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      const plane = planes[i2];
      _vector$62.x = plane.normal.x > 0 ? box.max.x : box.min.x;
      _vector$62.y = plane.normal.y > 0 ? box.max.y : box.min.y;
      _vector$62.z = plane.normal.z > 0 ? box.max.z : box.min.z;
      if (plane.distanceToPoint(_vector$62) < 0) {
        return false;
      }
    }
    return true;
  }
  containsPoint(point2) {
    const planes = this.planes;
    for (let i2 = 0; i2 < 6; i2++) {
      if (planes[i2].distanceToPoint(point2) < 0) {
        return false;
      }
    }
    return true;
  }
  clone() {
    return new this.constructor().copy(this);
  }
};
var MultiDrawRenderList2 = class {
  constructor() {
    this.index = 0;
    this.pool = [];
    this.list = [];
  }
  push(drawRange, z2, index7) {
    const pool = this.pool;
    const list = this.list;
    if (this.index >= pool.length) {
      pool.push({
        start: -1,
        count: -1,
        z: -1,
        index: -1
      });
    }
    const item = pool[this.index];
    list.push(item);
    this.index++;
    item.start = drawRange.start;
    item.count = drawRange.count;
    item.z = z2;
    item.index = index7;
  }
  reset() {
    this.list.length = 0;
    this.index = 0;
  }
};
var _matrix$12 = new Matrix42();
var _invMatrixWorld2 = new Matrix42();
var _identityMatrix2 = new Matrix42();
var _whiteColor2 = new Color3(1, 1, 1);
var _projScreenMatrix$3 = new Matrix42();
var _frustum$1 = new Frustum2();
var _box$12 = new Box32();
var _sphere$22 = new Sphere2();
var _vector$52 = new Vector32();
var _forward2 = new Vector32();
var _temp2 = new Vector32();
var _renderList2 = new MultiDrawRenderList2();
var _mesh2 = new Mesh2();
var LineBasicMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isLineBasicMaterial = true;
    this.type = "LineBasicMaterial";
    this.color = new Color3(16777215);
    this.map = null;
    this.linewidth = 1;
    this.linecap = "round";
    this.linejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.linewidth = source.linewidth;
    this.linecap = source.linecap;
    this.linejoin = source.linejoin;
    this.fog = source.fog;
    return this;
  }
};
var _vStart2 = new Vector32();
var _vEnd2 = new Vector32();
var _inverseMatrix$12 = new Matrix42();
var _ray$12 = new Ray2();
var _sphere$12 = new Sphere2();
var _intersectPointOnRay2 = new Vector32();
var _intersectPointOnSegment2 = new Vector32();
var _start2 = new Vector32();
var _end2 = new Vector32();
var PointsMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isPointsMaterial = true;
    this.type = "PointsMaterial";
    this.color = new Color3(16777215);
    this.map = null;
    this.alphaMap = null;
    this.size = 1;
    this.sizeAttenuation = true;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.size = source.size;
    this.sizeAttenuation = source.sizeAttenuation;
    this.fog = source.fog;
    return this;
  }
};
var _inverseMatrix2 = new Matrix42();
var _ray2 = new Ray2();
var _sphere2 = new Sphere2();
var _position$22 = new Vector32();
var FramebufferTexture = class extends Texture2 {
  constructor(width, height) {
    super({ width, height });
    this.isFramebufferTexture = true;
    this.magFilter = NearestFilter2;
    this.minFilter = NearestFilter2;
    this.generateMipmaps = false;
    this.needsUpdate = true;
  }
};
var DepthTexture2 = class extends Texture2 {
  constructor(width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy2, format3 = DepthFormat2) {
    if (format3 !== DepthFormat2 && format3 !== DepthStencilFormat2) {
      throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");
    }
    if (type === void 0 && format3 === DepthFormat2) type = UnsignedIntType2;
    if (type === void 0 && format3 === DepthStencilFormat2) type = UnsignedInt248Type2;
    super(null, mapping, wrapS, wrapT, magFilter, minFilter, format3, type, anisotropy2);
    this.isDepthTexture = true;
    this.image = { width, height };
    this.magFilter = magFilter !== void 0 ? magFilter : NearestFilter2;
    this.minFilter = minFilter !== void 0 ? minFilter : NearestFilter2;
    this.flipY = false;
    this.generateMipmaps = false;
    this.compareFunction = null;
  }
  copy(source) {
    super.copy(source);
    this.compareFunction = source.compareFunction;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    if (this.compareFunction !== null) data.compareFunction = this.compareFunction;
    return data;
  }
};
var Curve2 = class {
  constructor() {
    this.type = "Curve";
    this.arcLengthDivisions = 200;
  }
  // Virtual base class method to overwrite and implement in subclasses
  //	- t [0 .. 1]
  getPoint() {
    console.warn("THREE.Curve: .getPoint() not implemented.");
    return null;
  }
  // Get point at relative position in curve according to arc length
  // - u [0 .. 1]
  getPointAt(u5, optionalTarget) {
    const t4 = this.getUtoTmapping(u5);
    return this.getPoint(t4, optionalTarget);
  }
  // Get sequence of points using getPoint( t )
  getPoints(divisions = 5) {
    const points = [];
    for (let d2 = 0; d2 <= divisions; d2++) {
      points.push(this.getPoint(d2 / divisions));
    }
    return points;
  }
  // Get sequence of points using getPointAt( u )
  getSpacedPoints(divisions = 5) {
    const points = [];
    for (let d2 = 0; d2 <= divisions; d2++) {
      points.push(this.getPointAt(d2 / divisions));
    }
    return points;
  }
  // Get total curve arc length
  getLength() {
    const lengths = this.getLengths();
    return lengths[lengths.length - 1];
  }
  // Get list of cumulative segment lengths
  getLengths(divisions = this.arcLengthDivisions) {
    if (this.cacheArcLengths && this.cacheArcLengths.length === divisions + 1 && !this.needsUpdate) {
      return this.cacheArcLengths;
    }
    this.needsUpdate = false;
    const cache2 = [];
    let current, last = this.getPoint(0);
    let sum3 = 0;
    cache2.push(0);
    for (let p2 = 1; p2 <= divisions; p2++) {
      current = this.getPoint(p2 / divisions);
      sum3 += current.distanceTo(last);
      cache2.push(sum3);
      last = current;
    }
    this.cacheArcLengths = cache2;
    return cache2;
  }
  updateArcLengths() {
    this.needsUpdate = true;
    this.getLengths();
  }
  // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equidistant
  getUtoTmapping(u5, distance3) {
    const arcLengths = this.getLengths();
    let i2 = 0;
    const il = arcLengths.length;
    let targetArcLength;
    if (distance3) {
      targetArcLength = distance3;
    } else {
      targetArcLength = u5 * arcLengths[il - 1];
    }
    let low = 0, high = il - 1, comparison;
    while (low <= high) {
      i2 = Math.floor(low + (high - low) / 2);
      comparison = arcLengths[i2] - targetArcLength;
      if (comparison < 0) {
        low = i2 + 1;
      } else if (comparison > 0) {
        high = i2 - 1;
      } else {
        high = i2;
        break;
      }
    }
    i2 = high;
    if (arcLengths[i2] === targetArcLength) {
      return i2 / (il - 1);
    }
    const lengthBefore = arcLengths[i2];
    const lengthAfter = arcLengths[i2 + 1];
    const segmentLength = lengthAfter - lengthBefore;
    const segmentFraction = (targetArcLength - lengthBefore) / segmentLength;
    const t4 = (i2 + segmentFraction) / (il - 1);
    return t4;
  }
  // Returns a unit vector tangent at t
  // In case any sub curve does not implement its tangent derivation,
  // 2 points a small delta apart will be used to find its gradient
  // which seems to give a reasonable approximation
  getTangent(t4, optionalTarget) {
    const delta = 1e-4;
    let t13 = t4 - delta;
    let t22 = t4 + delta;
    if (t13 < 0) t13 = 0;
    if (t22 > 1) t22 = 1;
    const pt1 = this.getPoint(t13);
    const pt2 = this.getPoint(t22);
    const tangent = optionalTarget || (pt1.isVector2 ? new Vector22() : new Vector32());
    tangent.copy(pt2).sub(pt1).normalize();
    return tangent;
  }
  getTangentAt(u5, optionalTarget) {
    const t4 = this.getUtoTmapping(u5);
    return this.getTangent(t4, optionalTarget);
  }
  computeFrenetFrames(segments, closed) {
    const normal2 = new Vector32();
    const tangents = [];
    const normals = [];
    const binormals = [];
    const vec5 = new Vector32();
    const mat = new Matrix42();
    for (let i2 = 0; i2 <= segments; i2++) {
      const u5 = i2 / segments;
      tangents[i2] = this.getTangentAt(u5, new Vector32());
    }
    normals[0] = new Vector32();
    binormals[0] = new Vector32();
    let min4 = Number.MAX_VALUE;
    const tx = Math.abs(tangents[0].x);
    const ty = Math.abs(tangents[0].y);
    const tz = Math.abs(tangents[0].z);
    if (tx <= min4) {
      min4 = tx;
      normal2.set(1, 0, 0);
    }
    if (ty <= min4) {
      min4 = ty;
      normal2.set(0, 1, 0);
    }
    if (tz <= min4) {
      normal2.set(0, 0, 1);
    }
    vec5.crossVectors(tangents[0], normal2).normalize();
    normals[0].crossVectors(tangents[0], vec5);
    binormals[0].crossVectors(tangents[0], normals[0]);
    for (let i2 = 1; i2 <= segments; i2++) {
      normals[i2] = normals[i2 - 1].clone();
      binormals[i2] = binormals[i2 - 1].clone();
      vec5.crossVectors(tangents[i2 - 1], tangents[i2]);
      if (vec5.length() > Number.EPSILON) {
        vec5.normalize();
        const theta = Math.acos(clamp$1(tangents[i2 - 1].dot(tangents[i2]), -1, 1));
        normals[i2].applyMatrix4(mat.makeRotationAxis(vec5, theta));
      }
      binormals[i2].crossVectors(tangents[i2], normals[i2]);
    }
    if (closed === true) {
      let theta = Math.acos(clamp$1(normals[0].dot(normals[segments]), -1, 1));
      theta /= segments;
      if (tangents[0].dot(vec5.crossVectors(normals[0], normals[segments])) > 0) {
        theta = -theta;
      }
      for (let i2 = 1; i2 <= segments; i2++) {
        normals[i2].applyMatrix4(mat.makeRotationAxis(tangents[i2], theta * i2));
        binormals[i2].crossVectors(tangents[i2], normals[i2]);
      }
    }
    return {
      tangents,
      normals,
      binormals
    };
  }
  clone() {
    return new this.constructor().copy(this);
  }
  copy(source) {
    this.arcLengthDivisions = source.arcLengthDivisions;
    return this;
  }
  toJSON() {
    const data = {
      metadata: {
        version: 4.6,
        type: "Curve",
        generator: "Curve.toJSON"
      }
    };
    data.arcLengthDivisions = this.arcLengthDivisions;
    data.type = this.type;
    return data;
  }
  fromJSON(json) {
    this.arcLengthDivisions = json.arcLengthDivisions;
    return this;
  }
};
var EllipseCurve2 = class extends Curve2 {
  constructor(aX = 0, aY = 0, xRadius = 1, yRadius = 1, aStartAngle = 0, aEndAngle = Math.PI * 2, aClockwise = false, aRotation = 0) {
    super();
    this.isEllipseCurve = true;
    this.type = "EllipseCurve";
    this.aX = aX;
    this.aY = aY;
    this.xRadius = xRadius;
    this.yRadius = yRadius;
    this.aStartAngle = aStartAngle;
    this.aEndAngle = aEndAngle;
    this.aClockwise = aClockwise;
    this.aRotation = aRotation;
  }
  getPoint(t4, optionalTarget = new Vector22()) {
    const point2 = optionalTarget;
    const twoPi = Math.PI * 2;
    let deltaAngle = this.aEndAngle - this.aStartAngle;
    const samePoints = Math.abs(deltaAngle) < Number.EPSILON;
    while (deltaAngle < 0) deltaAngle += twoPi;
    while (deltaAngle > twoPi) deltaAngle -= twoPi;
    if (deltaAngle < Number.EPSILON) {
      if (samePoints) {
        deltaAngle = 0;
      } else {
        deltaAngle = twoPi;
      }
    }
    if (this.aClockwise === true && !samePoints) {
      if (deltaAngle === twoPi) {
        deltaAngle = -twoPi;
      } else {
        deltaAngle = deltaAngle - twoPi;
      }
    }
    const angle2 = this.aStartAngle + t4 * deltaAngle;
    let x2 = this.aX + this.xRadius * Math.cos(angle2);
    let y2 = this.aY + this.yRadius * Math.sin(angle2);
    if (this.aRotation !== 0) {
      const cos4 = Math.cos(this.aRotation);
      const sin4 = Math.sin(this.aRotation);
      const tx = x2 - this.aX;
      const ty = y2 - this.aY;
      x2 = tx * cos4 - ty * sin4 + this.aX;
      y2 = tx * sin4 + ty * cos4 + this.aY;
    }
    return point2.set(x2, y2);
  }
  copy(source) {
    super.copy(source);
    this.aX = source.aX;
    this.aY = source.aY;
    this.xRadius = source.xRadius;
    this.yRadius = source.yRadius;
    this.aStartAngle = source.aStartAngle;
    this.aEndAngle = source.aEndAngle;
    this.aClockwise = source.aClockwise;
    this.aRotation = source.aRotation;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.aX = this.aX;
    data.aY = this.aY;
    data.xRadius = this.xRadius;
    data.yRadius = this.yRadius;
    data.aStartAngle = this.aStartAngle;
    data.aEndAngle = this.aEndAngle;
    data.aClockwise = this.aClockwise;
    data.aRotation = this.aRotation;
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.aX = json.aX;
    this.aY = json.aY;
    this.xRadius = json.xRadius;
    this.yRadius = json.yRadius;
    this.aStartAngle = json.aStartAngle;
    this.aEndAngle = json.aEndAngle;
    this.aClockwise = json.aClockwise;
    this.aRotation = json.aRotation;
    return this;
  }
};
var ArcCurve2 = class extends EllipseCurve2 {
  constructor(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    super(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    this.isArcCurve = true;
    this.type = "ArcCurve";
  }
};
function CubicPoly2() {
  let c0 = 0, c1 = 0, c22 = 0, c32 = 0;
  function init20(x03, x12, t03, t13) {
    c0 = x03;
    c1 = t03;
    c22 = -3 * x03 + 3 * x12 - 2 * t03 - t13;
    c32 = 2 * x03 - 2 * x12 + t03 + t13;
  }
  return {
    initCatmullRom: function(x03, x12, x2, x3, tension) {
      init20(x12, x2, tension * (x2 - x03), tension * (x3 - x12));
    },
    initNonuniformCatmullRom: function(x03, x12, x2, x3, dt0, dt1, dt2) {
      let t13 = (x12 - x03) / dt0 - (x2 - x03) / (dt0 + dt1) + (x2 - x12) / dt1;
      let t22 = (x2 - x12) / dt1 - (x3 - x12) / (dt1 + dt2) + (x3 - x2) / dt2;
      t13 *= dt1;
      t22 *= dt1;
      init20(x12, x2, t13, t22);
    },
    calc: function(t4) {
      const t22 = t4 * t4;
      const t32 = t22 * t4;
      return c0 + c1 * t4 + c22 * t22 + c32 * t32;
    }
  };
}
var tmp2 = new Vector32();
var px2 = new CubicPoly2();
var py2 = new CubicPoly2();
var pz2 = new CubicPoly2();
var CatmullRomCurve32 = class extends Curve2 {
  constructor(points = [], closed = false, curveType = "centripetal", tension = 0.5) {
    super();
    this.isCatmullRomCurve3 = true;
    this.type = "CatmullRomCurve3";
    this.points = points;
    this.closed = closed;
    this.curveType = curveType;
    this.tension = tension;
  }
  getPoint(t4, optionalTarget = new Vector32()) {
    const point2 = optionalTarget;
    const points = this.points;
    const l2 = points.length;
    const p2 = (l2 - (this.closed ? 0 : 1)) * t4;
    let intPoint = Math.floor(p2);
    let weight = p2 - intPoint;
    if (this.closed) {
      intPoint += intPoint > 0 ? 0 : (Math.floor(Math.abs(intPoint) / l2) + 1) * l2;
    } else if (weight === 0 && intPoint === l2 - 1) {
      intPoint = l2 - 2;
      weight = 1;
    }
    let p02, p3;
    if (this.closed || intPoint > 0) {
      p02 = points[(intPoint - 1) % l2];
    } else {
      tmp2.subVectors(points[0], points[1]).add(points[0]);
      p02 = tmp2;
    }
    const p1 = points[intPoint % l2];
    const p22 = points[(intPoint + 1) % l2];
    if (this.closed || intPoint + 2 < l2) {
      p3 = points[(intPoint + 2) % l2];
    } else {
      tmp2.subVectors(points[l2 - 1], points[l2 - 2]).add(points[l2 - 1]);
      p3 = tmp2;
    }
    if (this.curveType === "centripetal" || this.curveType === "chordal") {
      const pow5 = this.curveType === "chordal" ? 0.5 : 0.25;
      let dt0 = Math.pow(p02.distanceToSquared(p1), pow5);
      let dt1 = Math.pow(p1.distanceToSquared(p22), pow5);
      let dt2 = Math.pow(p22.distanceToSquared(p3), pow5);
      if (dt1 < 1e-4) dt1 = 1;
      if (dt0 < 1e-4) dt0 = dt1;
      if (dt2 < 1e-4) dt2 = dt1;
      px2.initNonuniformCatmullRom(p02.x, p1.x, p22.x, p3.x, dt0, dt1, dt2);
      py2.initNonuniformCatmullRom(p02.y, p1.y, p22.y, p3.y, dt0, dt1, dt2);
      pz2.initNonuniformCatmullRom(p02.z, p1.z, p22.z, p3.z, dt0, dt1, dt2);
    } else if (this.curveType === "catmullrom") {
      px2.initCatmullRom(p02.x, p1.x, p22.x, p3.x, this.tension);
      py2.initCatmullRom(p02.y, p1.y, p22.y, p3.y, this.tension);
      pz2.initCatmullRom(p02.z, p1.z, p22.z, p3.z, this.tension);
    }
    point2.set(
      px2.calc(weight),
      py2.calc(weight),
      pz2.calc(weight)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.points = [];
    for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
      const point2 = source.points[i2];
      this.points.push(point2.clone());
    }
    this.closed = source.closed;
    this.curveType = source.curveType;
    this.tension = source.tension;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.points = [];
    for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
      const point2 = this.points[i2];
      data.points.push(point2.toArray());
    }
    data.closed = this.closed;
    data.curveType = this.curveType;
    data.tension = this.tension;
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.points = [];
    for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
      const point2 = json.points[i2];
      this.points.push(new Vector32().fromArray(point2));
    }
    this.closed = json.closed;
    this.curveType = json.curveType;
    this.tension = json.tension;
    return this;
  }
};
function CatmullRom2(t4, p02, p1, p2, p3) {
  const v0 = (p2 - p02) * 0.5;
  const v1 = (p3 - p1) * 0.5;
  const t22 = t4 * t4;
  const t32 = t4 * t22;
  return (2 * p1 - 2 * p2 + v0 + v1) * t32 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t22 + v0 * t4 + p1;
}
function QuadraticBezierP02(t4, p2) {
  const k2 = 1 - t4;
  return k2 * k2 * p2;
}
function QuadraticBezierP12(t4, p2) {
  return 2 * (1 - t4) * t4 * p2;
}
function QuadraticBezierP22(t4, p2) {
  return t4 * t4 * p2;
}
function QuadraticBezier2(t4, p02, p1, p2) {
  return QuadraticBezierP02(t4, p02) + QuadraticBezierP12(t4, p1) + QuadraticBezierP22(t4, p2);
}
function CubicBezierP02(t4, p2) {
  const k2 = 1 - t4;
  return k2 * k2 * k2 * p2;
}
function CubicBezierP12(t4, p2) {
  const k2 = 1 - t4;
  return 3 * k2 * k2 * t4 * p2;
}
function CubicBezierP22(t4, p2) {
  return 3 * (1 - t4) * t4 * t4 * p2;
}
function CubicBezierP32(t4, p2) {
  return t4 * t4 * t4 * p2;
}
function CubicBezier2(t4, p02, p1, p2, p3) {
  return CubicBezierP02(t4, p02) + CubicBezierP12(t4, p1) + CubicBezierP22(t4, p2) + CubicBezierP32(t4, p3);
}
var CubicBezierCurve2 = class extends Curve2 {
  constructor(v0 = new Vector22(), v1 = new Vector22(), v22 = new Vector22(), v3 = new Vector22()) {
    super();
    this.isCubicBezierCurve = true;
    this.type = "CubicBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
    this.v3 = v3;
  }
  getPoint(t4, optionalTarget = new Vector22()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2, v3 = this.v3;
    point2.set(
      CubicBezier2(t4, v0.x, v1.x, v22.x, v3.x),
      CubicBezier2(t4, v0.y, v1.y, v22.y, v3.y)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  }
};
var CubicBezierCurve32 = class extends Curve2 {
  constructor(v0 = new Vector32(), v1 = new Vector32(), v22 = new Vector32(), v3 = new Vector32()) {
    super();
    this.isCubicBezierCurve3 = true;
    this.type = "CubicBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
    this.v3 = v3;
  }
  getPoint(t4, optionalTarget = new Vector32()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2, v3 = this.v3;
    point2.set(
      CubicBezier2(t4, v0.x, v1.x, v22.x, v3.x),
      CubicBezier2(t4, v0.y, v1.y, v22.y, v3.y),
      CubicBezier2(t4, v0.z, v1.z, v22.z, v3.z)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    this.v3.copy(source.v3);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    data.v3 = this.v3.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    this.v3.fromArray(json.v3);
    return this;
  }
};
var LineCurve2 = class extends Curve2 {
  constructor(v1 = new Vector22(), v22 = new Vector22()) {
    super();
    this.isLineCurve = true;
    this.type = "LineCurve";
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector22()) {
    const point2 = optionalTarget;
    if (t4 === 1) {
      point2.copy(this.v2);
    } else {
      point2.copy(this.v2).sub(this.v1);
      point2.multiplyScalar(t4).add(this.v1);
    }
    return point2;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(u5, optionalTarget) {
    return this.getPoint(u5, optionalTarget);
  }
  getTangent(t4, optionalTarget = new Vector22()) {
    return optionalTarget.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(u5, optionalTarget) {
    return this.getTangent(u5, optionalTarget);
  }
  copy(source) {
    super.copy(source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var LineCurve32 = class extends Curve2 {
  constructor(v1 = new Vector32(), v22 = new Vector32()) {
    super();
    this.isLineCurve3 = true;
    this.type = "LineCurve3";
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector32()) {
    const point2 = optionalTarget;
    if (t4 === 1) {
      point2.copy(this.v2);
    } else {
      point2.copy(this.v2).sub(this.v1);
      point2.multiplyScalar(t4).add(this.v1);
    }
    return point2;
  }
  // Line curve is linear, so we can overwrite default getPointAt
  getPointAt(u5, optionalTarget) {
    return this.getPoint(u5, optionalTarget);
  }
  getTangent(t4, optionalTarget = new Vector32()) {
    return optionalTarget.subVectors(this.v2, this.v1).normalize();
  }
  getTangentAt(u5, optionalTarget) {
    return this.getTangent(u5, optionalTarget);
  }
  copy(source) {
    super.copy(source);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var QuadraticBezierCurve2 = class extends Curve2 {
  constructor(v0 = new Vector22(), v1 = new Vector22(), v22 = new Vector22()) {
    super();
    this.isQuadraticBezierCurve = true;
    this.type = "QuadraticBezierCurve";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector22()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2;
    point2.set(
      QuadraticBezier2(t4, v0.x, v1.x, v22.x),
      QuadraticBezier2(t4, v0.y, v1.y, v22.y)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var QuadraticBezierCurve32 = class extends Curve2 {
  constructor(v0 = new Vector32(), v1 = new Vector32(), v22 = new Vector32()) {
    super();
    this.isQuadraticBezierCurve3 = true;
    this.type = "QuadraticBezierCurve3";
    this.v0 = v0;
    this.v1 = v1;
    this.v2 = v22;
  }
  getPoint(t4, optionalTarget = new Vector32()) {
    const point2 = optionalTarget;
    const v0 = this.v0, v1 = this.v1, v22 = this.v2;
    point2.set(
      QuadraticBezier2(t4, v0.x, v1.x, v22.x),
      QuadraticBezier2(t4, v0.y, v1.y, v22.y),
      QuadraticBezier2(t4, v0.z, v1.z, v22.z)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.v0.copy(source.v0);
    this.v1.copy(source.v1);
    this.v2.copy(source.v2);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.v0 = this.v0.toArray();
    data.v1 = this.v1.toArray();
    data.v2 = this.v2.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.v0.fromArray(json.v0);
    this.v1.fromArray(json.v1);
    this.v2.fromArray(json.v2);
    return this;
  }
};
var SplineCurve2 = class extends Curve2 {
  constructor(points = []) {
    super();
    this.isSplineCurve = true;
    this.type = "SplineCurve";
    this.points = points;
  }
  getPoint(t4, optionalTarget = new Vector22()) {
    const point2 = optionalTarget;
    const points = this.points;
    const p2 = (points.length - 1) * t4;
    const intPoint = Math.floor(p2);
    const weight = p2 - intPoint;
    const p02 = points[intPoint === 0 ? intPoint : intPoint - 1];
    const p1 = points[intPoint];
    const p22 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];
    const p3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];
    point2.set(
      CatmullRom2(weight, p02.x, p1.x, p22.x, p3.x),
      CatmullRom2(weight, p02.y, p1.y, p22.y, p3.y)
    );
    return point2;
  }
  copy(source) {
    super.copy(source);
    this.points = [];
    for (let i2 = 0, l2 = source.points.length; i2 < l2; i2++) {
      const point2 = source.points[i2];
      this.points.push(point2.clone());
    }
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.points = [];
    for (let i2 = 0, l2 = this.points.length; i2 < l2; i2++) {
      const point2 = this.points[i2];
      data.points.push(point2.toArray());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.points = [];
    for (let i2 = 0, l2 = json.points.length; i2 < l2; i2++) {
      const point2 = json.points[i2];
      this.points.push(new Vector22().fromArray(point2));
    }
    return this;
  }
};
var Curves2 = Object.freeze({
  __proto__: null,
  ArcCurve: ArcCurve2,
  CatmullRomCurve3: CatmullRomCurve32,
  CubicBezierCurve: CubicBezierCurve2,
  CubicBezierCurve3: CubicBezierCurve32,
  EllipseCurve: EllipseCurve2,
  LineCurve: LineCurve2,
  LineCurve3: LineCurve32,
  QuadraticBezierCurve: QuadraticBezierCurve2,
  QuadraticBezierCurve3: QuadraticBezierCurve32,
  SplineCurve: SplineCurve2
});
var CurvePath2 = class extends Curve2 {
  constructor() {
    super();
    this.type = "CurvePath";
    this.curves = [];
    this.autoClose = false;
  }
  add(curve) {
    this.curves.push(curve);
  }
  closePath() {
    const startPoint = this.curves[0].getPoint(0);
    const endPoint = this.curves[this.curves.length - 1].getPoint(1);
    if (!startPoint.equals(endPoint)) {
      const lineType = startPoint.isVector2 === true ? "LineCurve" : "LineCurve3";
      this.curves.push(new Curves2[lineType](endPoint, startPoint));
    }
    return this;
  }
  // To get accurate point with reference to
  // entire path distance at time t,
  // following has to be done:
  // 1. Length of each sub path have to be known
  // 2. Locate and identify type of curve
  // 3. Get t for the curve
  // 4. Return curve.getPointAt(t')
  getPoint(t4, optionalTarget) {
    const d2 = t4 * this.getLength();
    const curveLengths = this.getCurveLengths();
    let i2 = 0;
    while (i2 < curveLengths.length) {
      if (curveLengths[i2] >= d2) {
        const diff = curveLengths[i2] - d2;
        const curve = this.curves[i2];
        const segmentLength = curve.getLength();
        const u5 = segmentLength === 0 ? 0 : 1 - diff / segmentLength;
        return curve.getPointAt(u5, optionalTarget);
      }
      i2++;
    }
    return null;
  }
  // We cannot use the default THREE.Curve getPoint() with getLength() because in
  // THREE.Curve, getLength() depends on getPoint() but in THREE.CurvePath
  // getPoint() depends on getLength
  getLength() {
    const lens = this.getCurveLengths();
    return lens[lens.length - 1];
  }
  // cacheLengths must be recalculated.
  updateArcLengths() {
    this.needsUpdate = true;
    this.cacheLengths = null;
    this.getCurveLengths();
  }
  // Compute lengths and cache them
  // We cannot overwrite getLengths() because UtoT mapping uses it.
  getCurveLengths() {
    if (this.cacheLengths && this.cacheLengths.length === this.curves.length) {
      return this.cacheLengths;
    }
    const lengths = [];
    let sums = 0;
    for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
      sums += this.curves[i2].getLength();
      lengths.push(sums);
    }
    this.cacheLengths = lengths;
    return lengths;
  }
  getSpacedPoints(divisions = 40) {
    const points = [];
    for (let i2 = 0; i2 <= divisions; i2++) {
      points.push(this.getPoint(i2 / divisions));
    }
    if (this.autoClose) {
      points.push(points[0]);
    }
    return points;
  }
  getPoints(divisions = 12) {
    const points = [];
    let last;
    for (let i2 = 0, curves = this.curves; i2 < curves.length; i2++) {
      const curve = curves[i2];
      const resolution3 = curve.isEllipseCurve ? divisions * 2 : curve.isLineCurve || curve.isLineCurve3 ? 1 : curve.isSplineCurve ? divisions * curve.points.length : divisions;
      const pts = curve.getPoints(resolution3);
      for (let j2 = 0; j2 < pts.length; j2++) {
        const point2 = pts[j2];
        if (last && last.equals(point2)) continue;
        points.push(point2);
        last = point2;
      }
    }
    if (this.autoClose && points.length > 1 && !points[points.length - 1].equals(points[0])) {
      points.push(points[0]);
    }
    return points;
  }
  copy(source) {
    super.copy(source);
    this.curves = [];
    for (let i2 = 0, l2 = source.curves.length; i2 < l2; i2++) {
      const curve = source.curves[i2];
      this.curves.push(curve.clone());
    }
    this.autoClose = source.autoClose;
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.autoClose = this.autoClose;
    data.curves = [];
    for (let i2 = 0, l2 = this.curves.length; i2 < l2; i2++) {
      const curve = this.curves[i2];
      data.curves.push(curve.toJSON());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.autoClose = json.autoClose;
    this.curves = [];
    for (let i2 = 0, l2 = json.curves.length; i2 < l2; i2++) {
      const curve = json.curves[i2];
      this.curves.push(new Curves2[curve.type]().fromJSON(curve));
    }
    return this;
  }
};
var Path3 = class extends CurvePath2 {
  constructor(points) {
    super();
    this.type = "Path";
    this.currentPoint = new Vector22();
    if (points) {
      this.setFromPoints(points);
    }
  }
  setFromPoints(points) {
    this.moveTo(points[0].x, points[0].y);
    for (let i2 = 1, l2 = points.length; i2 < l2; i2++) {
      this.lineTo(points[i2].x, points[i2].y);
    }
    return this;
  }
  moveTo(x2, y2) {
    this.currentPoint.set(x2, y2);
    return this;
  }
  lineTo(x2, y2) {
    const curve = new LineCurve2(this.currentPoint.clone(), new Vector22(x2, y2));
    this.curves.push(curve);
    this.currentPoint.set(x2, y2);
    return this;
  }
  quadraticCurveTo(aCPx, aCPy, aX, aY) {
    const curve = new QuadraticBezierCurve2(
      this.currentPoint.clone(),
      new Vector22(aCPx, aCPy),
      new Vector22(aX, aY)
    );
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  }
  bezierCurveTo(aCP1x, aCP1y, aCP2x, aCP2y, aX, aY) {
    const curve = new CubicBezierCurve2(
      this.currentPoint.clone(),
      new Vector22(aCP1x, aCP1y),
      new Vector22(aCP2x, aCP2y),
      new Vector22(aX, aY)
    );
    this.curves.push(curve);
    this.currentPoint.set(aX, aY);
    return this;
  }
  splineThru(pts) {
    const npts = [this.currentPoint.clone()].concat(pts);
    const curve = new SplineCurve2(npts);
    this.curves.push(curve);
    this.currentPoint.copy(pts[pts.length - 1]);
    return this;
  }
  arc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    const x03 = this.currentPoint.x;
    const y03 = this.currentPoint.y;
    this.absarc(
      aX + x03,
      aY + y03,
      aRadius,
      aStartAngle,
      aEndAngle,
      aClockwise
    );
    return this;
  }
  absarc(aX, aY, aRadius, aStartAngle, aEndAngle, aClockwise) {
    this.absellipse(aX, aY, aRadius, aRadius, aStartAngle, aEndAngle, aClockwise);
    return this;
  }
  ellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const x03 = this.currentPoint.x;
    const y03 = this.currentPoint.y;
    this.absellipse(aX + x03, aY + y03, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    return this;
  }
  absellipse(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation) {
    const curve = new EllipseCurve2(aX, aY, xRadius, yRadius, aStartAngle, aEndAngle, aClockwise, aRotation);
    if (this.curves.length > 0) {
      const firstPoint = curve.getPoint(0);
      if (!firstPoint.equals(this.currentPoint)) {
        this.lineTo(firstPoint.x, firstPoint.y);
      }
    }
    this.curves.push(curve);
    const lastPoint = curve.getPoint(1);
    this.currentPoint.copy(lastPoint);
    return this;
  }
  copy(source) {
    super.copy(source);
    this.currentPoint.copy(source.currentPoint);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.currentPoint = this.currentPoint.toArray();
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.currentPoint.fromArray(json.currentPoint);
    return this;
  }
};
var LatheGeometry2 = class _LatheGeometry extends BufferGeometry2 {
  constructor(points = [new Vector22(0, -0.5), new Vector22(0.5, 0), new Vector22(0, 0.5)], segments = 12, phiStart = 0, phiLength = Math.PI * 2) {
    super();
    this.type = "LatheGeometry";
    this.parameters = {
      points,
      segments,
      phiStart,
      phiLength
    };
    segments = Math.floor(segments);
    phiLength = clamp$1(phiLength, 0, Math.PI * 2);
    const indices = [];
    const vertices = [];
    const uvs = [];
    const initNormals = [];
    const normals = [];
    const inverseSegments = 1 / segments;
    const vertex2 = new Vector32();
    const uv2 = new Vector22();
    const normal2 = new Vector32();
    const curNormal = new Vector32();
    const prevNormal = new Vector32();
    let dx = 0;
    let dy = 0;
    for (let j2 = 0; j2 <= points.length - 1; j2++) {
      switch (j2) {
        case 0:
          dx = points[j2 + 1].x - points[j2].x;
          dy = points[j2 + 1].y - points[j2].y;
          normal2.x = dy * 1;
          normal2.y = -dx;
          normal2.z = dy * 0;
          prevNormal.copy(normal2);
          normal2.normalize();
          initNormals.push(normal2.x, normal2.y, normal2.z);
          break;
        case points.length - 1:
          initNormals.push(prevNormal.x, prevNormal.y, prevNormal.z);
          break;
        default:
          dx = points[j2 + 1].x - points[j2].x;
          dy = points[j2 + 1].y - points[j2].y;
          normal2.x = dy * 1;
          normal2.y = -dx;
          normal2.z = dy * 0;
          curNormal.copy(normal2);
          normal2.x += prevNormal.x;
          normal2.y += prevNormal.y;
          normal2.z += prevNormal.z;
          normal2.normalize();
          initNormals.push(normal2.x, normal2.y, normal2.z);
          prevNormal.copy(curNormal);
      }
    }
    for (let i2 = 0; i2 <= segments; i2++) {
      const phi = phiStart + i2 * inverseSegments * phiLength;
      const sin4 = Math.sin(phi);
      const cos4 = Math.cos(phi);
      for (let j2 = 0; j2 <= points.length - 1; j2++) {
        vertex2.x = points[j2].x * sin4;
        vertex2.y = points[j2].y;
        vertex2.z = points[j2].x * cos4;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        uv2.x = i2 / segments;
        uv2.y = j2 / (points.length - 1);
        uvs.push(uv2.x, uv2.y);
        const x2 = initNormals[3 * j2 + 0] * sin4;
        const y2 = initNormals[3 * j2 + 1];
        const z2 = initNormals[3 * j2 + 0] * cos4;
        normals.push(x2, y2, z2);
      }
    }
    for (let i2 = 0; i2 < segments; i2++) {
      for (let j2 = 0; j2 < points.length - 1; j2++) {
        const base = j2 + i2 * points.length;
        const a2 = base;
        const b = base + points.length;
        const c4 = base + points.length + 1;
        const d2 = base + 1;
        indices.push(a2, b, d2);
        indices.push(c4, d2, b);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _LatheGeometry(data.points, data.segments, data.phiStart, data.phiLength);
  }
};
var CapsuleGeometry2 = class _CapsuleGeometry extends LatheGeometry2 {
  constructor(radius = 1, length2 = 1, capSegments = 4, radialSegments = 8) {
    const path = new Path3();
    path.absarc(0, -length2 / 2, radius, Math.PI * 1.5, 0);
    path.absarc(0, length2 / 2, radius, 0, Math.PI * 0.5);
    super(path.getPoints(capSegments), radialSegments);
    this.type = "CapsuleGeometry";
    this.parameters = {
      radius,
      length: length2,
      capSegments,
      radialSegments
    };
  }
  static fromJSON(data) {
    return new _CapsuleGeometry(data.radius, data.length, data.capSegments, data.radialSegments);
  }
};
var CircleGeometry2 = class _CircleGeometry extends BufferGeometry2 {
  constructor(radius = 1, segments = 32, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CircleGeometry";
    this.parameters = {
      radius,
      segments,
      thetaStart,
      thetaLength
    };
    segments = Math.max(3, segments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex2 = new Vector32();
    const uv2 = new Vector22();
    vertices.push(0, 0, 0);
    normals.push(0, 0, 1);
    uvs.push(0.5, 0.5);
    for (let s2 = 0, i2 = 3; s2 <= segments; s2++, i2 += 3) {
      const segment = thetaStart + s2 / segments * thetaLength;
      vertex2.x = radius * Math.cos(segment);
      vertex2.y = radius * Math.sin(segment);
      vertices.push(vertex2.x, vertex2.y, vertex2.z);
      normals.push(0, 0, 1);
      uv2.x = (vertices[i2] / radius + 1) / 2;
      uv2.y = (vertices[i2 + 1] / radius + 1) / 2;
      uvs.push(uv2.x, uv2.y);
    }
    for (let i2 = 1; i2 <= segments; i2++) {
      indices.push(i2, i2 + 1, 0);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _CircleGeometry(data.radius, data.segments, data.thetaStart, data.thetaLength);
  }
};
var CylinderGeometry2 = class _CylinderGeometry extends BufferGeometry2 {
  constructor(radiusTop = 1, radiusBottom = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "CylinderGeometry";
    this.parameters = {
      radiusTop,
      radiusBottom,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
    const scope = this;
    radialSegments = Math.floor(radialSegments);
    heightSegments = Math.floor(heightSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let index7 = 0;
    const indexArray = [];
    const halfHeight = height / 2;
    let groupStart = 0;
    generateTorso();
    if (openEnded === false) {
      if (radiusTop > 0) generateCap(true);
      if (radiusBottom > 0) generateCap(false);
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
    function generateTorso() {
      const normal2 = new Vector32();
      const vertex2 = new Vector32();
      let groupCount = 0;
      const slope = (radiusBottom - radiusTop) / height;
      for (let y2 = 0; y2 <= heightSegments; y2++) {
        const indexRow = [];
        const v3 = y2 / heightSegments;
        const radius = v3 * (radiusBottom - radiusTop) + radiusTop;
        for (let x2 = 0; x2 <= radialSegments; x2++) {
          const u5 = x2 / radialSegments;
          const theta = u5 * thetaLength + thetaStart;
          const sinTheta = Math.sin(theta);
          const cosTheta = Math.cos(theta);
          vertex2.x = radius * sinTheta;
          vertex2.y = -v3 * height + halfHeight;
          vertex2.z = radius * cosTheta;
          vertices.push(vertex2.x, vertex2.y, vertex2.z);
          normal2.set(sinTheta, slope, cosTheta).normalize();
          normals.push(normal2.x, normal2.y, normal2.z);
          uvs.push(u5, 1 - v3);
          indexRow.push(index7++);
        }
        indexArray.push(indexRow);
      }
      for (let x2 = 0; x2 < radialSegments; x2++) {
        for (let y2 = 0; y2 < heightSegments; y2++) {
          const a2 = indexArray[y2][x2];
          const b = indexArray[y2 + 1][x2];
          const c4 = indexArray[y2 + 1][x2 + 1];
          const d2 = indexArray[y2][x2 + 1];
          indices.push(a2, b, d2);
          indices.push(b, c4, d2);
          groupCount += 6;
        }
      }
      scope.addGroup(groupStart, groupCount, 0);
      groupStart += groupCount;
    }
    function generateCap(top) {
      const centerIndexStart = index7;
      const uv2 = new Vector22();
      const vertex2 = new Vector32();
      let groupCount = 0;
      const radius = top === true ? radiusTop : radiusBottom;
      const sign6 = top === true ? 1 : -1;
      for (let x2 = 1; x2 <= radialSegments; x2++) {
        vertices.push(0, halfHeight * sign6, 0);
        normals.push(0, sign6, 0);
        uvs.push(0.5, 0.5);
        index7++;
      }
      const centerIndexEnd = index7;
      for (let x2 = 0; x2 <= radialSegments; x2++) {
        const u5 = x2 / radialSegments;
        const theta = u5 * thetaLength + thetaStart;
        const cosTheta = Math.cos(theta);
        const sinTheta = Math.sin(theta);
        vertex2.x = radius * sinTheta;
        vertex2.y = halfHeight * sign6;
        vertex2.z = radius * cosTheta;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, sign6, 0);
        uv2.x = cosTheta * 0.5 + 0.5;
        uv2.y = sinTheta * 0.5 * sign6 + 0.5;
        uvs.push(uv2.x, uv2.y);
        index7++;
      }
      for (let x2 = 0; x2 < radialSegments; x2++) {
        const c4 = centerIndexStart + x2;
        const i2 = centerIndexEnd + x2;
        if (top === true) {
          indices.push(i2, i2 + 1, c4);
        } else {
          indices.push(i2 + 1, i2, c4);
        }
        groupCount += 3;
      }
      scope.addGroup(groupStart, groupCount, top === true ? 1 : 2);
      groupStart += groupCount;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _CylinderGeometry(data.radiusTop, data.radiusBottom, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
};
var ConeGeometry2 = class _ConeGeometry extends CylinderGeometry2 {
  constructor(radius = 1, height = 1, radialSegments = 32, heightSegments = 1, openEnded = false, thetaStart = 0, thetaLength = Math.PI * 2) {
    super(0, radius, height, radialSegments, heightSegments, openEnded, thetaStart, thetaLength);
    this.type = "ConeGeometry";
    this.parameters = {
      radius,
      height,
      radialSegments,
      heightSegments,
      openEnded,
      thetaStart,
      thetaLength
    };
  }
  static fromJSON(data) {
    return new _ConeGeometry(data.radius, data.height, data.radialSegments, data.heightSegments, data.openEnded, data.thetaStart, data.thetaLength);
  }
};
var PolyhedronGeometry2 = class _PolyhedronGeometry extends BufferGeometry2 {
  constructor(vertices = [], indices = [], radius = 1, detail = 0) {
    super();
    this.type = "PolyhedronGeometry";
    this.parameters = {
      vertices,
      indices,
      radius,
      detail
    };
    const vertexBuffer = [];
    const uvBuffer = [];
    subdivide(detail);
    applyRadius(radius);
    generateUVs();
    this.setAttribute("position", new Float32BufferAttribute2(vertexBuffer, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(vertexBuffer.slice(), 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvBuffer, 2));
    if (detail === 0) {
      this.computeVertexNormals();
    } else {
      this.normalizeNormals();
    }
    function subdivide(detail2) {
      const a2 = new Vector32();
      const b = new Vector32();
      const c4 = new Vector32();
      for (let i2 = 0; i2 < indices.length; i2 += 3) {
        getVertexByIndex(indices[i2 + 0], a2);
        getVertexByIndex(indices[i2 + 1], b);
        getVertexByIndex(indices[i2 + 2], c4);
        subdivideFace(a2, b, c4, detail2);
      }
    }
    function subdivideFace(a2, b, c4, detail2) {
      const cols = detail2 + 1;
      const v3 = [];
      for (let i2 = 0; i2 <= cols; i2++) {
        v3[i2] = [];
        const aj = a2.clone().lerp(c4, i2 / cols);
        const bj = b.clone().lerp(c4, i2 / cols);
        const rows = cols - i2;
        for (let j2 = 0; j2 <= rows; j2++) {
          if (j2 === 0 && i2 === cols) {
            v3[i2][j2] = aj;
          } else {
            v3[i2][j2] = aj.clone().lerp(bj, j2 / rows);
          }
        }
      }
      for (let i2 = 0; i2 < cols; i2++) {
        for (let j2 = 0; j2 < 2 * (cols - i2) - 1; j2++) {
          const k2 = Math.floor(j2 / 2);
          if (j2 % 2 === 0) {
            pushVertex(v3[i2][k2 + 1]);
            pushVertex(v3[i2 + 1][k2]);
            pushVertex(v3[i2][k2]);
          } else {
            pushVertex(v3[i2][k2 + 1]);
            pushVertex(v3[i2 + 1][k2 + 1]);
            pushVertex(v3[i2 + 1][k2]);
          }
        }
      }
    }
    function applyRadius(radius2) {
      const vertex2 = new Vector32();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex2.x = vertexBuffer[i2 + 0];
        vertex2.y = vertexBuffer[i2 + 1];
        vertex2.z = vertexBuffer[i2 + 2];
        vertex2.normalize().multiplyScalar(radius2);
        vertexBuffer[i2 + 0] = vertex2.x;
        vertexBuffer[i2 + 1] = vertex2.y;
        vertexBuffer[i2 + 2] = vertex2.z;
      }
    }
    function generateUVs() {
      const vertex2 = new Vector32();
      for (let i2 = 0; i2 < vertexBuffer.length; i2 += 3) {
        vertex2.x = vertexBuffer[i2 + 0];
        vertex2.y = vertexBuffer[i2 + 1];
        vertex2.z = vertexBuffer[i2 + 2];
        const u5 = azimuth(vertex2) / 2 / Math.PI + 0.5;
        const v3 = inclination(vertex2) / Math.PI + 0.5;
        uvBuffer.push(u5, 1 - v3);
      }
      correctUVs();
      correctSeam();
    }
    function correctSeam() {
      for (let i2 = 0; i2 < uvBuffer.length; i2 += 6) {
        const x03 = uvBuffer[i2 + 0];
        const x12 = uvBuffer[i2 + 2];
        const x2 = uvBuffer[i2 + 4];
        const max4 = Math.max(x03, x12, x2);
        const min4 = Math.min(x03, x12, x2);
        if (max4 > 0.9 && min4 < 0.1) {
          if (x03 < 0.2) uvBuffer[i2 + 0] += 1;
          if (x12 < 0.2) uvBuffer[i2 + 2] += 1;
          if (x2 < 0.2) uvBuffer[i2 + 4] += 1;
        }
      }
    }
    function pushVertex(vertex2) {
      vertexBuffer.push(vertex2.x, vertex2.y, vertex2.z);
    }
    function getVertexByIndex(index7, vertex2) {
      const stride = index7 * 3;
      vertex2.x = vertices[stride + 0];
      vertex2.y = vertices[stride + 1];
      vertex2.z = vertices[stride + 2];
    }
    function correctUVs() {
      const a2 = new Vector32();
      const b = new Vector32();
      const c4 = new Vector32();
      const centroid = new Vector32();
      const uvA = new Vector22();
      const uvB = new Vector22();
      const uvC = new Vector22();
      for (let i2 = 0, j2 = 0; i2 < vertexBuffer.length; i2 += 9, j2 += 6) {
        a2.set(vertexBuffer[i2 + 0], vertexBuffer[i2 + 1], vertexBuffer[i2 + 2]);
        b.set(vertexBuffer[i2 + 3], vertexBuffer[i2 + 4], vertexBuffer[i2 + 5]);
        c4.set(vertexBuffer[i2 + 6], vertexBuffer[i2 + 7], vertexBuffer[i2 + 8]);
        uvA.set(uvBuffer[j2 + 0], uvBuffer[j2 + 1]);
        uvB.set(uvBuffer[j2 + 2], uvBuffer[j2 + 3]);
        uvC.set(uvBuffer[j2 + 4], uvBuffer[j2 + 5]);
        centroid.copy(a2).add(b).add(c4).divideScalar(3);
        const azi = azimuth(centroid);
        correctUV(uvA, j2 + 0, a2, azi);
        correctUV(uvB, j2 + 2, b, azi);
        correctUV(uvC, j2 + 4, c4, azi);
      }
    }
    function correctUV(uv2, stride, vector, azimuth2) {
      if (azimuth2 < 0 && uv2.x === 1) {
        uvBuffer[stride] = uv2.x - 1;
      }
      if (vector.x === 0 && vector.z === 0) {
        uvBuffer[stride] = azimuth2 / 2 / Math.PI + 0.5;
      }
    }
    function azimuth(vector) {
      return Math.atan2(vector.z, -vector.x);
    }
    function inclination(vector) {
      return Math.atan2(-vector.y, Math.sqrt(vector.x * vector.x + vector.z * vector.z));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _PolyhedronGeometry(data.vertices, data.indices, data.radius, data.details);
  }
};
var DodecahedronGeometry2 = class _DodecahedronGeometry extends PolyhedronGeometry2 {
  constructor(radius = 1, detail = 0) {
    const t4 = (1 + Math.sqrt(5)) / 2;
    const r2 = 1 / t4;
    const vertices = [
      // (±1, ±1, ±1)
      -1,
      -1,
      -1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      -1,
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      1,
      1,
      -1,
      1,
      1,
      1,
      // (0, ±1/φ, ±φ)
      0,
      -r2,
      -t4,
      0,
      -r2,
      t4,
      0,
      r2,
      -t4,
      0,
      r2,
      t4,
      // (±1/φ, ±φ, 0)
      -r2,
      -t4,
      0,
      -r2,
      t4,
      0,
      r2,
      -t4,
      0,
      r2,
      t4,
      0,
      // (±φ, 0, ±1/φ)
      -t4,
      0,
      -r2,
      t4,
      0,
      -r2,
      -t4,
      0,
      r2,
      t4,
      0,
      r2
    ];
    const indices = [
      3,
      11,
      7,
      3,
      7,
      15,
      3,
      15,
      13,
      7,
      19,
      17,
      7,
      17,
      6,
      7,
      6,
      15,
      17,
      4,
      8,
      17,
      8,
      10,
      17,
      10,
      6,
      8,
      0,
      16,
      8,
      16,
      2,
      8,
      2,
      10,
      0,
      12,
      1,
      0,
      1,
      18,
      0,
      18,
      16,
      6,
      10,
      2,
      6,
      2,
      13,
      6,
      13,
      15,
      2,
      16,
      18,
      2,
      18,
      3,
      2,
      3,
      13,
      18,
      1,
      9,
      18,
      9,
      11,
      18,
      11,
      3,
      4,
      14,
      12,
      4,
      12,
      0,
      4,
      0,
      8,
      11,
      9,
      5,
      11,
      5,
      19,
      11,
      19,
      7,
      19,
      5,
      14,
      19,
      14,
      4,
      19,
      4,
      17,
      1,
      12,
      14,
      1,
      14,
      5,
      1,
      5,
      9
    ];
    super(vertices, indices, radius, detail);
    this.type = "DodecahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _DodecahedronGeometry(data.radius, data.detail);
  }
};
var _v02 = new Vector32();
var _v1$12 = new Vector32();
var _normal$12 = new Vector32();
var _triangle2 = new Triangle2();
var EdgesGeometry2 = class extends BufferGeometry2 {
  constructor(geometry = null, thresholdAngle = 1) {
    super();
    this.type = "EdgesGeometry";
    this.parameters = {
      geometry,
      thresholdAngle
    };
    if (geometry !== null) {
      const precisionPoints = 4;
      const precision = Math.pow(10, precisionPoints);
      const thresholdDot = Math.cos(DEG2RAD2 * thresholdAngle);
      const indexAttr = geometry.getIndex();
      const positionAttr = geometry.getAttribute("position");
      const indexCount = indexAttr ? indexAttr.count : positionAttr.count;
      const indexArr = [0, 0, 0];
      const vertKeys = ["a", "b", "c"];
      const hashes = new Array(3);
      const edgeData = {};
      const vertices = [];
      for (let i2 = 0; i2 < indexCount; i2 += 3) {
        if (indexAttr) {
          indexArr[0] = indexAttr.getX(i2);
          indexArr[1] = indexAttr.getX(i2 + 1);
          indexArr[2] = indexAttr.getX(i2 + 2);
        } else {
          indexArr[0] = i2;
          indexArr[1] = i2 + 1;
          indexArr[2] = i2 + 2;
        }
        const { a: a2, b, c: c4 } = _triangle2;
        a2.fromBufferAttribute(positionAttr, indexArr[0]);
        b.fromBufferAttribute(positionAttr, indexArr[1]);
        c4.fromBufferAttribute(positionAttr, indexArr[2]);
        _triangle2.getNormal(_normal$12);
        hashes[0] = `${Math.round(a2.x * precision)},${Math.round(a2.y * precision)},${Math.round(a2.z * precision)}`;
        hashes[1] = `${Math.round(b.x * precision)},${Math.round(b.y * precision)},${Math.round(b.z * precision)}`;
        hashes[2] = `${Math.round(c4.x * precision)},${Math.round(c4.y * precision)},${Math.round(c4.z * precision)}`;
        if (hashes[0] === hashes[1] || hashes[1] === hashes[2] || hashes[2] === hashes[0]) {
          continue;
        }
        for (let j2 = 0; j2 < 3; j2++) {
          const jNext = (j2 + 1) % 3;
          const vecHash0 = hashes[j2];
          const vecHash1 = hashes[jNext];
          const v0 = _triangle2[vertKeys[j2]];
          const v1 = _triangle2[vertKeys[jNext]];
          const hash2 = `${vecHash0}_${vecHash1}`;
          const reverseHash = `${vecHash1}_${vecHash0}`;
          if (reverseHash in edgeData && edgeData[reverseHash]) {
            if (_normal$12.dot(edgeData[reverseHash].normal) <= thresholdDot) {
              vertices.push(v0.x, v0.y, v0.z);
              vertices.push(v1.x, v1.y, v1.z);
            }
            edgeData[reverseHash] = null;
          } else if (!(hash2 in edgeData)) {
            edgeData[hash2] = {
              index0: indexArr[j2],
              index1: indexArr[jNext],
              normal: _normal$12.clone()
            };
          }
        }
      }
      for (const key in edgeData) {
        if (edgeData[key]) {
          const { index0, index1 } = edgeData[key];
          _v02.fromBufferAttribute(positionAttr, index0);
          _v1$12.fromBufferAttribute(positionAttr, index1);
          vertices.push(_v02.x, _v02.y, _v02.z);
          vertices.push(_v1$12.x, _v1$12.y, _v1$12.z);
        }
      }
      this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
};
var Shape2 = class extends Path3 {
  constructor(points) {
    super(points);
    this.uuid = generateUUID2();
    this.type = "Shape";
    this.holes = [];
  }
  getPointsHoles(divisions) {
    const holesPts = [];
    for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
      holesPts[i2] = this.holes[i2].getPoints(divisions);
    }
    return holesPts;
  }
  // get points of shape and holes (keypoints based on segments parameter)
  extractPoints(divisions) {
    return {
      shape: this.getPoints(divisions),
      holes: this.getPointsHoles(divisions)
    };
  }
  copy(source) {
    super.copy(source);
    this.holes = [];
    for (let i2 = 0, l2 = source.holes.length; i2 < l2; i2++) {
      const hole = source.holes[i2];
      this.holes.push(hole.clone());
    }
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.uuid = this.uuid;
    data.holes = [];
    for (let i2 = 0, l2 = this.holes.length; i2 < l2; i2++) {
      const hole = this.holes[i2];
      data.holes.push(hole.toJSON());
    }
    return data;
  }
  fromJSON(json) {
    super.fromJSON(json);
    this.uuid = json.uuid;
    this.holes = [];
    for (let i2 = 0, l2 = json.holes.length; i2 < l2; i2++) {
      const hole = json.holes[i2];
      this.holes.push(new Path3().fromJSON(hole));
    }
    return this;
  }
};
var Earcut2 = {
  triangulate: function(data, holeIndices, dim = 2) {
    const hasHoles = holeIndices && holeIndices.length;
    const outerLen = hasHoles ? holeIndices[0] * dim : data.length;
    let outerNode = linkedList3(data, 0, outerLen, dim, true);
    const triangles = [];
    if (!outerNode || outerNode.next === outerNode.prev) return triangles;
    let minX, minY, maxX, maxY, x2, y2, invSize;
    if (hasHoles) outerNode = eliminateHoles3(data, holeIndices, outerNode, dim);
    if (data.length > 80 * dim) {
      minX = maxX = data[0];
      minY = maxY = data[1];
      for (let i2 = dim; i2 < outerLen; i2 += dim) {
        x2 = data[i2];
        y2 = data[i2 + 1];
        if (x2 < minX) minX = x2;
        if (y2 < minY) minY = y2;
        if (x2 > maxX) maxX = x2;
        if (y2 > maxY) maxY = y2;
      }
      invSize = Math.max(maxX - minX, maxY - minY);
      invSize = invSize !== 0 ? 32767 / invSize : 0;
    }
    earcutLinked3(outerNode, triangles, dim, minX, minY, invSize, 0);
    return triangles;
  }
};
function linkedList3(data, start, end, dim, clockwise) {
  let i2, last;
  if (clockwise === signedArea3(data, start, end, dim) > 0) {
    for (i2 = start; i2 < end; i2 += dim) last = insertNode3(i2, data[i2], data[i2 + 1], last);
  } else {
    for (i2 = end - dim; i2 >= start; i2 -= dim) last = insertNode3(i2, data[i2], data[i2 + 1], last);
  }
  if (last && equals$1(last, last.next)) {
    removeNode3(last);
    last = last.next;
  }
  return last;
}
function filterPoints3(start, end) {
  if (!start) return start;
  if (!end) end = start;
  let p2 = start, again;
  do {
    again = false;
    if (!p2.steiner && (equals$1(p2, p2.next) || area3(p2.prev, p2, p2.next) === 0)) {
      removeNode3(p2);
      p2 = end = p2.prev;
      if (p2 === p2.next) break;
      again = true;
    } else {
      p2 = p2.next;
    }
  } while (again || p2 !== end);
  return end;
}
function earcutLinked3(ear, triangles, dim, minX, minY, invSize, pass) {
  if (!ear) return;
  if (!pass && invSize) indexCurve3(ear, minX, minY, invSize);
  let stop = ear, prev, next;
  while (ear.prev !== ear.next) {
    prev = ear.prev;
    next = ear.next;
    if (invSize ? isEarHashed3(ear, minX, minY, invSize) : isEar3(ear)) {
      triangles.push(prev.i / dim | 0);
      triangles.push(ear.i / dim | 0);
      triangles.push(next.i / dim | 0);
      removeNode3(ear);
      ear = next.next;
      stop = next.next;
      continue;
    }
    ear = next;
    if (ear === stop) {
      if (!pass) {
        earcutLinked3(filterPoints3(ear), triangles, dim, minX, minY, invSize, 1);
      } else if (pass === 1) {
        ear = cureLocalIntersections3(filterPoints3(ear), triangles, dim);
        earcutLinked3(ear, triangles, dim, minX, minY, invSize, 2);
      } else if (pass === 2) {
        splitEarcut3(ear, triangles, dim, minX, minY, invSize);
      }
      break;
    }
  }
}
function isEar3(ear) {
  const a2 = ear.prev, b = ear, c4 = ear.next;
  if (area3(a2, b, c4) >= 0) return false;
  const ax = a2.x, bx = b.x, cx = c4.x, ay = a2.y, by = b.y, cy = c4.y;
  const x03 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y03 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x12 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y12 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  let p2 = c4.next;
  while (p2 !== a2) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && pointInTriangle3(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area3(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.next;
  }
  return true;
}
function isEarHashed3(ear, minX, minY, invSize) {
  const a2 = ear.prev, b = ear, c4 = ear.next;
  if (area3(a2, b, c4) >= 0) return false;
  const ax = a2.x, bx = b.x, cx = c4.x, ay = a2.y, by = b.y, cy = c4.y;
  const x03 = ax < bx ? ax < cx ? ax : cx : bx < cx ? bx : cx, y03 = ay < by ? ay < cy ? ay : cy : by < cy ? by : cy, x12 = ax > bx ? ax > cx ? ax : cx : bx > cx ? bx : cx, y12 = ay > by ? ay > cy ? ay : cy : by > cy ? by : cy;
  const minZ = zOrder3(x03, y03, minX, minY, invSize), maxZ = zOrder3(x12, y12, minX, minY, invSize);
  let p2 = ear.prevZ, n2 = ear.nextZ;
  while (p2 && p2.z >= minZ && n2 && n2.z <= maxZ) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && p2 !== a2 && p2 !== c4 && pointInTriangle3(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area3(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
    if (n2.x >= x03 && n2.x <= x12 && n2.y >= y03 && n2.y <= y12 && n2 !== a2 && n2 !== c4 && pointInTriangle3(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area3(n2.prev, n2, n2.next) >= 0) return false;
    n2 = n2.nextZ;
  }
  while (p2 && p2.z >= minZ) {
    if (p2.x >= x03 && p2.x <= x12 && p2.y >= y03 && p2.y <= y12 && p2 !== a2 && p2 !== c4 && pointInTriangle3(ax, ay, bx, by, cx, cy, p2.x, p2.y) && area3(p2.prev, p2, p2.next) >= 0) return false;
    p2 = p2.prevZ;
  }
  while (n2 && n2.z <= maxZ) {
    if (n2.x >= x03 && n2.x <= x12 && n2.y >= y03 && n2.y <= y12 && n2 !== a2 && n2 !== c4 && pointInTriangle3(ax, ay, bx, by, cx, cy, n2.x, n2.y) && area3(n2.prev, n2, n2.next) >= 0) return false;
    n2 = n2.nextZ;
  }
  return true;
}
function cureLocalIntersections3(start, triangles, dim) {
  let p2 = start;
  do {
    const a2 = p2.prev, b = p2.next.next;
    if (!equals$1(a2, b) && intersects3(a2, p2, p2.next, b) && locallyInside3(a2, b) && locallyInside3(b, a2)) {
      triangles.push(a2.i / dim | 0);
      triangles.push(p2.i / dim | 0);
      triangles.push(b.i / dim | 0);
      removeNode3(p2);
      removeNode3(p2.next);
      p2 = start = b;
    }
    p2 = p2.next;
  } while (p2 !== start);
  return filterPoints3(p2);
}
function splitEarcut3(start, triangles, dim, minX, minY, invSize) {
  let a2 = start;
  do {
    let b = a2.next.next;
    while (b !== a2.prev) {
      if (a2.i !== b.i && isValidDiagonal3(a2, b)) {
        let c4 = splitPolygon3(a2, b);
        a2 = filterPoints3(a2, a2.next);
        c4 = filterPoints3(c4, c4.next);
        earcutLinked3(a2, triangles, dim, minX, minY, invSize, 0);
        earcutLinked3(c4, triangles, dim, minX, minY, invSize, 0);
        return;
      }
      b = b.next;
    }
    a2 = a2.next;
  } while (a2 !== start);
}
function eliminateHoles3(data, holeIndices, outerNode, dim) {
  const queue = [];
  let i2, len, start, end, list;
  for (i2 = 0, len = holeIndices.length; i2 < len; i2++) {
    start = holeIndices[i2] * dim;
    end = i2 < len - 1 ? holeIndices[i2 + 1] * dim : data.length;
    list = linkedList3(data, start, end, dim, false);
    if (list === list.next) list.steiner = true;
    queue.push(getLeftmost3(list));
  }
  queue.sort(compareX2);
  for (i2 = 0; i2 < queue.length; i2++) {
    outerNode = eliminateHole3(queue[i2], outerNode);
  }
  return outerNode;
}
function compareX2(a2, b) {
  return a2.x - b.x;
}
function eliminateHole3(hole, outerNode) {
  const bridge = findHoleBridge3(hole, outerNode);
  if (!bridge) {
    return outerNode;
  }
  const bridgeReverse = splitPolygon3(bridge, hole);
  filterPoints3(bridgeReverse, bridgeReverse.next);
  return filterPoints3(bridge, bridge.next);
}
function findHoleBridge3(hole, outerNode) {
  let p2 = outerNode, qx = -Infinity, m2;
  const hx = hole.x, hy = hole.y;
  do {
    if (hy <= p2.y && hy >= p2.next.y && p2.next.y !== p2.y) {
      const x2 = p2.x + (hy - p2.y) * (p2.next.x - p2.x) / (p2.next.y - p2.y);
      if (x2 <= hx && x2 > qx) {
        qx = x2;
        m2 = p2.x < p2.next.x ? p2 : p2.next;
        if (x2 === hx) return m2;
      }
    }
    p2 = p2.next;
  } while (p2 !== outerNode);
  if (!m2) return null;
  const stop = m2, mx = m2.x, my = m2.y;
  let tanMin = Infinity, tan3;
  p2 = m2;
  do {
    if (hx >= p2.x && p2.x >= mx && hx !== p2.x && pointInTriangle3(hy < my ? hx : qx, hy, mx, my, hy < my ? qx : hx, hy, p2.x, p2.y)) {
      tan3 = Math.abs(hy - p2.y) / (hx - p2.x);
      if (locallyInside3(p2, hole) && (tan3 < tanMin || tan3 === tanMin && (p2.x > m2.x || p2.x === m2.x && sectorContainsSector3(m2, p2)))) {
        m2 = p2;
        tanMin = tan3;
      }
    }
    p2 = p2.next;
  } while (p2 !== stop);
  return m2;
}
function sectorContainsSector3(m2, p2) {
  return area3(m2.prev, m2, p2.prev) < 0 && area3(p2.next, m2, m2.next) < 0;
}
function indexCurve3(start, minX, minY, invSize) {
  let p2 = start;
  do {
    if (p2.z === 0) p2.z = zOrder3(p2.x, p2.y, minX, minY, invSize);
    p2.prevZ = p2.prev;
    p2.nextZ = p2.next;
    p2 = p2.next;
  } while (p2 !== start);
  p2.prevZ.nextZ = null;
  p2.prevZ = null;
  sortLinked3(p2);
}
function sortLinked3(list) {
  let i2, p2, q2, e3, tail, numMerges, pSize, qSize, inSize = 1;
  do {
    p2 = list;
    list = null;
    tail = null;
    numMerges = 0;
    while (p2) {
      numMerges++;
      q2 = p2;
      pSize = 0;
      for (i2 = 0; i2 < inSize; i2++) {
        pSize++;
        q2 = q2.nextZ;
        if (!q2) break;
      }
      qSize = inSize;
      while (pSize > 0 || qSize > 0 && q2) {
        if (pSize !== 0 && (qSize === 0 || !q2 || p2.z <= q2.z)) {
          e3 = p2;
          p2 = p2.nextZ;
          pSize--;
        } else {
          e3 = q2;
          q2 = q2.nextZ;
          qSize--;
        }
        if (tail) tail.nextZ = e3;
        else list = e3;
        e3.prevZ = tail;
        tail = e3;
      }
      p2 = q2;
    }
    tail.nextZ = null;
    inSize *= 2;
  } while (numMerges > 1);
  return list;
}
function zOrder3(x2, y2, minX, minY, invSize) {
  x2 = (x2 - minX) * invSize | 0;
  y2 = (y2 - minY) * invSize | 0;
  x2 = (x2 | x2 << 8) & 16711935;
  x2 = (x2 | x2 << 4) & 252645135;
  x2 = (x2 | x2 << 2) & 858993459;
  x2 = (x2 | x2 << 1) & 1431655765;
  y2 = (y2 | y2 << 8) & 16711935;
  y2 = (y2 | y2 << 4) & 252645135;
  y2 = (y2 | y2 << 2) & 858993459;
  y2 = (y2 | y2 << 1) & 1431655765;
  return x2 | y2 << 1;
}
function getLeftmost3(start) {
  let p2 = start, leftmost = start;
  do {
    if (p2.x < leftmost.x || p2.x === leftmost.x && p2.y < leftmost.y) leftmost = p2;
    p2 = p2.next;
  } while (p2 !== start);
  return leftmost;
}
function pointInTriangle3(ax, ay, bx, by, cx, cy, px3, py3) {
  return (cx - px3) * (ay - py3) >= (ax - px3) * (cy - py3) && (ax - px3) * (by - py3) >= (bx - px3) * (ay - py3) && (bx - px3) * (cy - py3) >= (cx - px3) * (by - py3);
}
function isValidDiagonal3(a2, b) {
  return a2.next.i !== b.i && a2.prev.i !== b.i && !intersectsPolygon3(a2, b) && // dones't intersect other edges
  (locallyInside3(a2, b) && locallyInside3(b, a2) && middleInside3(a2, b) && // locally visible
  (area3(a2.prev, a2, b.prev) || area3(a2, b.prev, b)) || // does not create opposite-facing sectors
  equals$1(a2, b) && area3(a2.prev, a2, a2.next) > 0 && area3(b.prev, b, b.next) > 0);
}
function area3(p2, q2, r2) {
  return (q2.y - p2.y) * (r2.x - q2.x) - (q2.x - p2.x) * (r2.y - q2.y);
}
function equals$1(p1, p2) {
  return p1.x === p2.x && p1.y === p2.y;
}
function intersects3(p1, q1, p2, q2) {
  const o1 = sign$1(area3(p1, q1, p2));
  const o2 = sign$1(area3(p1, q1, q2));
  const o3 = sign$1(area3(p2, q2, p1));
  const o4 = sign$1(area3(p2, q2, q1));
  if (o1 !== o2 && o3 !== o4) return true;
  if (o1 === 0 && onSegment3(p1, p2, q1)) return true;
  if (o2 === 0 && onSegment3(p1, q2, q1)) return true;
  if (o3 === 0 && onSegment3(p2, p1, q2)) return true;
  if (o4 === 0 && onSegment3(p2, q1, q2)) return true;
  return false;
}
function onSegment3(p2, q2, r2) {
  return q2.x <= Math.max(p2.x, r2.x) && q2.x >= Math.min(p2.x, r2.x) && q2.y <= Math.max(p2.y, r2.y) && q2.y >= Math.min(p2.y, r2.y);
}
function sign$1(num) {
  return num > 0 ? 1 : num < 0 ? -1 : 0;
}
function intersectsPolygon3(a2, b) {
  let p2 = a2;
  do {
    if (p2.i !== a2.i && p2.next.i !== a2.i && p2.i !== b.i && p2.next.i !== b.i && intersects3(p2, p2.next, a2, b)) return true;
    p2 = p2.next;
  } while (p2 !== a2);
  return false;
}
function locallyInside3(a2, b) {
  return area3(a2.prev, a2, a2.next) < 0 ? area3(a2, b, a2.next) >= 0 && area3(a2, a2.prev, b) >= 0 : area3(a2, b, a2.prev) < 0 || area3(a2, a2.next, b) < 0;
}
function middleInside3(a2, b) {
  let p2 = a2, inside = false;
  const px3 = (a2.x + b.x) / 2, py3 = (a2.y + b.y) / 2;
  do {
    if (p2.y > py3 !== p2.next.y > py3 && p2.next.y !== p2.y && px3 < (p2.next.x - p2.x) * (py3 - p2.y) / (p2.next.y - p2.y) + p2.x)
      inside = !inside;
    p2 = p2.next;
  } while (p2 !== a2);
  return inside;
}
function splitPolygon3(a2, b) {
  const a22 = new Node$1(a2.i, a2.x, a2.y), b2 = new Node$1(b.i, b.x, b.y), an = a2.next, bp = b.prev;
  a2.next = b;
  b.prev = a2;
  a22.next = an;
  an.prev = a22;
  b2.next = a22;
  a22.prev = b2;
  bp.next = b2;
  b2.prev = bp;
  return b2;
}
function insertNode3(i2, x2, y2, last) {
  const p2 = new Node$1(i2, x2, y2);
  if (!last) {
    p2.prev = p2;
    p2.next = p2;
  } else {
    p2.next = last.next;
    p2.prev = last;
    last.next.prev = p2;
    last.next = p2;
  }
  return p2;
}
function removeNode3(p2) {
  p2.next.prev = p2.prev;
  p2.prev.next = p2.next;
  if (p2.prevZ) p2.prevZ.nextZ = p2.nextZ;
  if (p2.nextZ) p2.nextZ.prevZ = p2.prevZ;
}
function Node$1(i2, x2, y2) {
  this.i = i2;
  this.x = x2;
  this.y = y2;
  this.prev = null;
  this.next = null;
  this.z = 0;
  this.prevZ = null;
  this.nextZ = null;
  this.steiner = false;
}
function signedArea3(data, start, end, dim) {
  let sum3 = 0;
  for (let i2 = start, j2 = end - dim; i2 < end; i2 += dim) {
    sum3 += (data[j2] - data[i2]) * (data[i2 + 1] + data[j2 + 1]);
    j2 = i2;
  }
  return sum3;
}
var ShapeUtils2 = class _ShapeUtils {
  // calculate area of the contour polygon
  static area(contour) {
    const n2 = contour.length;
    let a2 = 0;
    for (let p2 = n2 - 1, q2 = 0; q2 < n2; p2 = q2++) {
      a2 += contour[p2].x * contour[q2].y - contour[q2].x * contour[p2].y;
    }
    return a2 * 0.5;
  }
  static isClockWise(pts) {
    return _ShapeUtils.area(pts) < 0;
  }
  static triangulateShape(contour, holes) {
    const vertices = [];
    const holeIndices = [];
    const faces = [];
    removeDupEndPts2(contour);
    addContour2(vertices, contour);
    let holeIndex = contour.length;
    holes.forEach(removeDupEndPts2);
    for (let i2 = 0; i2 < holes.length; i2++) {
      holeIndices.push(holeIndex);
      holeIndex += holes[i2].length;
      addContour2(vertices, holes[i2]);
    }
    const triangles = Earcut2.triangulate(vertices, holeIndices);
    for (let i2 = 0; i2 < triangles.length; i2 += 3) {
      faces.push(triangles.slice(i2, i2 + 3));
    }
    return faces;
  }
};
function removeDupEndPts2(points) {
  const l2 = points.length;
  if (l2 > 2 && points[l2 - 1].equals(points[0])) {
    points.pop();
  }
}
function addContour2(vertices, contour) {
  for (let i2 = 0; i2 < contour.length; i2++) {
    vertices.push(contour[i2].x);
    vertices.push(contour[i2].y);
  }
}
var ExtrudeGeometry2 = class _ExtrudeGeometry extends BufferGeometry2 {
  constructor(shapes = new Shape2([new Vector22(0.5, 0.5), new Vector22(-0.5, 0.5), new Vector22(-0.5, -0.5), new Vector22(0.5, -0.5)]), options = {}) {
    super();
    this.type = "ExtrudeGeometry";
    this.parameters = {
      shapes,
      options
    };
    shapes = Array.isArray(shapes) ? shapes : [shapes];
    const scope = this;
    const verticesArray = [];
    const uvArray = [];
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      addShape(shape);
    }
    this.setAttribute("position", new Float32BufferAttribute2(verticesArray, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvArray, 2));
    this.computeVertexNormals();
    function addShape(shape) {
      const placeholder = [];
      const curveSegments = options.curveSegments !== void 0 ? options.curveSegments : 12;
      const steps = options.steps !== void 0 ? options.steps : 1;
      const depth2 = options.depth !== void 0 ? options.depth : 1;
      let bevelEnabled = options.bevelEnabled !== void 0 ? options.bevelEnabled : true;
      let bevelThickness = options.bevelThickness !== void 0 ? options.bevelThickness : 0.2;
      let bevelSize = options.bevelSize !== void 0 ? options.bevelSize : bevelThickness - 0.1;
      let bevelOffset = options.bevelOffset !== void 0 ? options.bevelOffset : 0;
      let bevelSegments = options.bevelSegments !== void 0 ? options.bevelSegments : 3;
      const extrudePath = options.extrudePath;
      const uvgen = options.UVGenerator !== void 0 ? options.UVGenerator : WorldUVGenerator2;
      let extrudePts, extrudeByPath = false;
      let splineTube, binormal, normal2, position2;
      if (extrudePath) {
        extrudePts = extrudePath.getSpacedPoints(steps);
        extrudeByPath = true;
        bevelEnabled = false;
        splineTube = extrudePath.computeFrenetFrames(steps, false);
        binormal = new Vector32();
        normal2 = new Vector32();
        position2 = new Vector32();
      }
      if (!bevelEnabled) {
        bevelSegments = 0;
        bevelThickness = 0;
        bevelSize = 0;
        bevelOffset = 0;
      }
      const shapePoints = shape.extractPoints(curveSegments);
      let vertices = shapePoints.shape;
      const holes = shapePoints.holes;
      const reverse2 = !ShapeUtils2.isClockWise(vertices);
      if (reverse2) {
        vertices = vertices.reverse();
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          if (ShapeUtils2.isClockWise(ahole)) {
            holes[h2] = ahole.reverse();
          }
        }
      }
      const faces = ShapeUtils2.triangulateShape(vertices, holes);
      const contour = vertices;
      for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
        const ahole = holes[h2];
        vertices = vertices.concat(ahole);
      }
      function scalePt2(pt, vec5, size) {
        if (!vec5) console.error("THREE.ExtrudeGeometry: vec does not exist");
        return pt.clone().addScaledVector(vec5, size);
      }
      const vlen = vertices.length, flen = faces.length;
      function getBevelVec(inPt, inPrev, inNext) {
        let v_trans_x, v_trans_y, shrink_by;
        const v_prev_x = inPt.x - inPrev.x, v_prev_y = inPt.y - inPrev.y;
        const v_next_x = inNext.x - inPt.x, v_next_y = inNext.y - inPt.y;
        const v_prev_lensq = v_prev_x * v_prev_x + v_prev_y * v_prev_y;
        const collinear0 = v_prev_x * v_next_y - v_prev_y * v_next_x;
        if (Math.abs(collinear0) > Number.EPSILON) {
          const v_prev_len = Math.sqrt(v_prev_lensq);
          const v_next_len = Math.sqrt(v_next_x * v_next_x + v_next_y * v_next_y);
          const ptPrevShift_x = inPrev.x - v_prev_y / v_prev_len;
          const ptPrevShift_y = inPrev.y + v_prev_x / v_prev_len;
          const ptNextShift_x = inNext.x - v_next_y / v_next_len;
          const ptNextShift_y = inNext.y + v_next_x / v_next_len;
          const sf = ((ptNextShift_x - ptPrevShift_x) * v_next_y - (ptNextShift_y - ptPrevShift_y) * v_next_x) / (v_prev_x * v_next_y - v_prev_y * v_next_x);
          v_trans_x = ptPrevShift_x + v_prev_x * sf - inPt.x;
          v_trans_y = ptPrevShift_y + v_prev_y * sf - inPt.y;
          const v_trans_lensq = v_trans_x * v_trans_x + v_trans_y * v_trans_y;
          if (v_trans_lensq <= 2) {
            return new Vector22(v_trans_x, v_trans_y);
          } else {
            shrink_by = Math.sqrt(v_trans_lensq / 2);
          }
        } else {
          let direction_eq = false;
          if (v_prev_x > Number.EPSILON) {
            if (v_next_x > Number.EPSILON) {
              direction_eq = true;
            }
          } else {
            if (v_prev_x < -Number.EPSILON) {
              if (v_next_x < -Number.EPSILON) {
                direction_eq = true;
              }
            } else {
              if (Math.sign(v_prev_y) === Math.sign(v_next_y)) {
                direction_eq = true;
              }
            }
          }
          if (direction_eq) {
            v_trans_x = -v_prev_y;
            v_trans_y = v_prev_x;
            shrink_by = Math.sqrt(v_prev_lensq);
          } else {
            v_trans_x = v_prev_x;
            v_trans_y = v_prev_y;
            shrink_by = Math.sqrt(v_prev_lensq / 2);
          }
        }
        return new Vector22(v_trans_x / shrink_by, v_trans_y / shrink_by);
      }
      const contourMovements = [];
      for (let i2 = 0, il = contour.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
        if (j2 === il) j2 = 0;
        if (k2 === il) k2 = 0;
        contourMovements[i2] = getBevelVec(contour[i2], contour[j2], contour[k2]);
      }
      const holesMovements = [];
      let oneHoleMovements, verticesMovements = contourMovements.concat();
      for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
        const ahole = holes[h2];
        oneHoleMovements = [];
        for (let i2 = 0, il = ahole.length, j2 = il - 1, k2 = i2 + 1; i2 < il; i2++, j2++, k2++) {
          if (j2 === il) j2 = 0;
          if (k2 === il) k2 = 0;
          oneHoleMovements[i2] = getBevelVec(ahole[i2], ahole[j2], ahole[k2]);
        }
        holesMovements.push(oneHoleMovements);
        verticesMovements = verticesMovements.concat(oneHoleMovements);
      }
      for (let b = 0; b < bevelSegments; b++) {
        const t4 = b / bevelSegments;
        const z2 = bevelThickness * Math.cos(t4 * Math.PI / 2);
        const bs2 = bevelSize * Math.sin(t4 * Math.PI / 2) + bevelOffset;
        for (let i2 = 0, il = contour.length; i2 < il; i2++) {
          const vert = scalePt2(contour[i2], contourMovements[i2], bs2);
          v3(vert.x, vert.y, -z2);
        }
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = holesMovements[h2];
          for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
            const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs2);
            v3(vert.x, vert.y, -z2);
          }
        }
      }
      const bs = bevelSize + bevelOffset;
      for (let i2 = 0; i2 < vlen; i2++) {
        const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs) : vertices[i2];
        if (!extrudeByPath) {
          v3(vert.x, vert.y, 0);
        } else {
          normal2.copy(splineTube.normals[0]).multiplyScalar(vert.x);
          binormal.copy(splineTube.binormals[0]).multiplyScalar(vert.y);
          position2.copy(extrudePts[0]).add(normal2).add(binormal);
          v3(position2.x, position2.y, position2.z);
        }
      }
      for (let s2 = 1; s2 <= steps; s2++) {
        for (let i2 = 0; i2 < vlen; i2++) {
          const vert = bevelEnabled ? scalePt2(vertices[i2], verticesMovements[i2], bs) : vertices[i2];
          if (!extrudeByPath) {
            v3(vert.x, vert.y, depth2 / steps * s2);
          } else {
            normal2.copy(splineTube.normals[s2]).multiplyScalar(vert.x);
            binormal.copy(splineTube.binormals[s2]).multiplyScalar(vert.y);
            position2.copy(extrudePts[s2]).add(normal2).add(binormal);
            v3(position2.x, position2.y, position2.z);
          }
        }
      }
      for (let b = bevelSegments - 1; b >= 0; b--) {
        const t4 = b / bevelSegments;
        const z2 = bevelThickness * Math.cos(t4 * Math.PI / 2);
        const bs2 = bevelSize * Math.sin(t4 * Math.PI / 2) + bevelOffset;
        for (let i2 = 0, il = contour.length; i2 < il; i2++) {
          const vert = scalePt2(contour[i2], contourMovements[i2], bs2);
          v3(vert.x, vert.y, depth2 + z2);
        }
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          oneHoleMovements = holesMovements[h2];
          for (let i2 = 0, il = ahole.length; i2 < il; i2++) {
            const vert = scalePt2(ahole[i2], oneHoleMovements[i2], bs2);
            if (!extrudeByPath) {
              v3(vert.x, vert.y, depth2 + z2);
            } else {
              v3(vert.x, vert.y + extrudePts[steps - 1].y, extrudePts[steps - 1].x + z2);
            }
          }
        }
      }
      buildLidFaces();
      buildSideFaces();
      function buildLidFaces() {
        const start = verticesArray.length / 3;
        if (bevelEnabled) {
          let layer = 0;
          let offset = vlen * layer;
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[2] + offset, face[1] + offset, face[0] + offset);
          }
          layer = steps + bevelSegments * 2;
          offset = vlen * layer;
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[0] + offset, face[1] + offset, face[2] + offset);
          }
        } else {
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[2], face[1], face[0]);
          }
          for (let i2 = 0; i2 < flen; i2++) {
            const face = faces[i2];
            f3(face[0] + vlen * steps, face[1] + vlen * steps, face[2] + vlen * steps);
          }
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 0);
      }
      function buildSideFaces() {
        const start = verticesArray.length / 3;
        let layeroffset = 0;
        sidewalls(contour, layeroffset);
        layeroffset += contour.length;
        for (let h2 = 0, hl = holes.length; h2 < hl; h2++) {
          const ahole = holes[h2];
          sidewalls(ahole, layeroffset);
          layeroffset += ahole.length;
        }
        scope.addGroup(start, verticesArray.length / 3 - start, 1);
      }
      function sidewalls(contour2, layeroffset) {
        let i2 = contour2.length;
        while (--i2 >= 0) {
          const j2 = i2;
          let k2 = i2 - 1;
          if (k2 < 0) k2 = contour2.length - 1;
          for (let s2 = 0, sl = steps + bevelSegments * 2; s2 < sl; s2++) {
            const slen1 = vlen * s2;
            const slen2 = vlen * (s2 + 1);
            const a2 = layeroffset + j2 + slen1, b = layeroffset + k2 + slen1, c4 = layeroffset + k2 + slen2, d2 = layeroffset + j2 + slen2;
            f4(a2, b, c4, d2);
          }
        }
      }
      function v3(x2, y2, z2) {
        placeholder.push(x2);
        placeholder.push(y2);
        placeholder.push(z2);
      }
      function f3(a2, b, c4) {
        addVertex(a2);
        addVertex(b);
        addVertex(c4);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateTopUV(scope, verticesArray, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[2]);
      }
      function f4(a2, b, c4, d2) {
        addVertex(a2);
        addVertex(b);
        addVertex(d2);
        addVertex(b);
        addVertex(c4);
        addVertex(d2);
        const nextIndex = verticesArray.length / 3;
        const uvs = uvgen.generateSideWallUV(scope, verticesArray, nextIndex - 6, nextIndex - 3, nextIndex - 2, nextIndex - 1);
        addUV(uvs[0]);
        addUV(uvs[1]);
        addUV(uvs[3]);
        addUV(uvs[1]);
        addUV(uvs[2]);
        addUV(uvs[3]);
      }
      function addVertex(index7) {
        verticesArray.push(placeholder[index7 * 3 + 0]);
        verticesArray.push(placeholder[index7 * 3 + 1]);
        verticesArray.push(placeholder[index7 * 3 + 2]);
      }
      function addUV(vector22) {
        uvArray.push(vector22.x);
        uvArray.push(vector22.y);
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    const options = this.parameters.options;
    return toJSON$12(shapes, options, data);
  }
  static fromJSON(data, shapes) {
    const geometryShapes = [];
    for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
      const shape = shapes[data.shapes[j2]];
      geometryShapes.push(shape);
    }
    const extrudePath = data.options.extrudePath;
    if (extrudePath !== void 0) {
      data.options.extrudePath = new Curves2[extrudePath.type]().fromJSON(extrudePath);
    }
    return new _ExtrudeGeometry(geometryShapes, data.options);
  }
};
var WorldUVGenerator2 = {
  generateTopUV: function(geometry, vertices, indexA, indexB, indexC) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    return [
      new Vector22(a_x, a_y),
      new Vector22(b_x, b_y),
      new Vector22(c_x, c_y)
    ];
  },
  generateSideWallUV: function(geometry, vertices, indexA, indexB, indexC, indexD) {
    const a_x = vertices[indexA * 3];
    const a_y = vertices[indexA * 3 + 1];
    const a_z = vertices[indexA * 3 + 2];
    const b_x = vertices[indexB * 3];
    const b_y = vertices[indexB * 3 + 1];
    const b_z = vertices[indexB * 3 + 2];
    const c_x = vertices[indexC * 3];
    const c_y = vertices[indexC * 3 + 1];
    const c_z = vertices[indexC * 3 + 2];
    const d_x = vertices[indexD * 3];
    const d_y = vertices[indexD * 3 + 1];
    const d_z = vertices[indexD * 3 + 2];
    if (Math.abs(a_y - b_y) < Math.abs(a_x - b_x)) {
      return [
        new Vector22(a_x, 1 - a_z),
        new Vector22(b_x, 1 - b_z),
        new Vector22(c_x, 1 - c_z),
        new Vector22(d_x, 1 - d_z)
      ];
    } else {
      return [
        new Vector22(a_y, 1 - a_z),
        new Vector22(b_y, 1 - b_z),
        new Vector22(c_y, 1 - c_z),
        new Vector22(d_y, 1 - d_z)
      ];
    }
  }
};
function toJSON$12(shapes, options, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  data.options = Object.assign({}, options);
  if (options.extrudePath !== void 0) data.options.extrudePath = options.extrudePath.toJSON();
  return data;
}
var IcosahedronGeometry2 = class _IcosahedronGeometry extends PolyhedronGeometry2 {
  constructor(radius = 1, detail = 0) {
    const t4 = (1 + Math.sqrt(5)) / 2;
    const vertices = [
      -1,
      t4,
      0,
      1,
      t4,
      0,
      -1,
      -t4,
      0,
      1,
      -t4,
      0,
      0,
      -1,
      t4,
      0,
      1,
      t4,
      0,
      -1,
      -t4,
      0,
      1,
      -t4,
      t4,
      0,
      -1,
      t4,
      0,
      1,
      -t4,
      0,
      -1,
      -t4,
      0,
      1
    ];
    const indices = [
      0,
      11,
      5,
      0,
      5,
      1,
      0,
      1,
      7,
      0,
      7,
      10,
      0,
      10,
      11,
      1,
      5,
      9,
      5,
      11,
      4,
      11,
      10,
      2,
      10,
      7,
      6,
      7,
      1,
      8,
      3,
      9,
      4,
      3,
      4,
      2,
      3,
      2,
      6,
      3,
      6,
      8,
      3,
      8,
      9,
      4,
      9,
      5,
      2,
      4,
      11,
      6,
      2,
      10,
      8,
      6,
      7,
      9,
      8,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "IcosahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _IcosahedronGeometry(data.radius, data.detail);
  }
};
var OctahedronGeometry2 = class _OctahedronGeometry extends PolyhedronGeometry2 {
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1,
      0,
      0,
      0,
      1,
      0,
      0,
      -1
    ];
    const indices = [
      0,
      2,
      4,
      0,
      4,
      3,
      0,
      3,
      5,
      0,
      5,
      2,
      1,
      2,
      5,
      1,
      5,
      3,
      1,
      3,
      4,
      1,
      4,
      2
    ];
    super(vertices, indices, radius, detail);
    this.type = "OctahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _OctahedronGeometry(data.radius, data.detail);
  }
};
var PlaneGeometry2 = class _PlaneGeometry extends BufferGeometry2 {
  constructor(width = 1, height = 1, widthSegments = 1, heightSegments = 1) {
    super();
    this.type = "PlaneGeometry";
    this.parameters = {
      width,
      height,
      widthSegments,
      heightSegments
    };
    const width_half = width / 2;
    const height_half = height / 2;
    const gridX = Math.floor(widthSegments);
    const gridY = Math.floor(heightSegments);
    const gridX1 = gridX + 1;
    const gridY1 = gridY + 1;
    const segment_width = width / gridX;
    const segment_height = height / gridY;
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy < gridY1; iy++) {
      const y2 = iy * segment_height - height_half;
      for (let ix = 0; ix < gridX1; ix++) {
        const x2 = ix * segment_width - width_half;
        vertices.push(x2, -y2, 0);
        normals.push(0, 0, 1);
        uvs.push(ix / gridX);
        uvs.push(1 - iy / gridY);
      }
    }
    for (let iy = 0; iy < gridY; iy++) {
      for (let ix = 0; ix < gridX; ix++) {
        const a2 = ix + gridX1 * iy;
        const b = ix + gridX1 * (iy + 1);
        const c4 = ix + 1 + gridX1 * (iy + 1);
        const d2 = ix + 1 + gridX1 * iy;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _PlaneGeometry(data.width, data.height, data.widthSegments, data.heightSegments);
  }
};
var RingGeometry2 = class _RingGeometry extends BufferGeometry2 {
  constructor(innerRadius = 0.5, outerRadius = 1, thetaSegments = 32, phiSegments = 1, thetaStart = 0, thetaLength = Math.PI * 2) {
    super();
    this.type = "RingGeometry";
    this.parameters = {
      innerRadius,
      outerRadius,
      thetaSegments,
      phiSegments,
      thetaStart,
      thetaLength
    };
    thetaSegments = Math.max(3, thetaSegments);
    phiSegments = Math.max(1, phiSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let radius = innerRadius;
    const radiusStep = (outerRadius - innerRadius) / phiSegments;
    const vertex2 = new Vector32();
    const uv2 = new Vector22();
    for (let j2 = 0; j2 <= phiSegments; j2++) {
      for (let i2 = 0; i2 <= thetaSegments; i2++) {
        const segment = thetaStart + i2 / thetaSegments * thetaLength;
        vertex2.x = radius * Math.cos(segment);
        vertex2.y = radius * Math.sin(segment);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normals.push(0, 0, 1);
        uv2.x = (vertex2.x / outerRadius + 1) / 2;
        uv2.y = (vertex2.y / outerRadius + 1) / 2;
        uvs.push(uv2.x, uv2.y);
      }
      radius += radiusStep;
    }
    for (let j2 = 0; j2 < phiSegments; j2++) {
      const thetaSegmentLevel = j2 * (thetaSegments + 1);
      for (let i2 = 0; i2 < thetaSegments; i2++) {
        const segment = i2 + thetaSegmentLevel;
        const a2 = segment;
        const b = segment + thetaSegments + 1;
        const c4 = segment + thetaSegments + 2;
        const d2 = segment + 1;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _RingGeometry(data.innerRadius, data.outerRadius, data.thetaSegments, data.phiSegments, data.thetaStart, data.thetaLength);
  }
};
var ShapeGeometry2 = class _ShapeGeometry extends BufferGeometry2 {
  constructor(shapes = new Shape2([new Vector22(0, 0.5), new Vector22(-0.5, -0.5), new Vector22(0.5, -0.5)]), curveSegments = 12) {
    super();
    this.type = "ShapeGeometry";
    this.parameters = {
      shapes,
      curveSegments
    };
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    let groupStart = 0;
    let groupCount = 0;
    if (Array.isArray(shapes) === false) {
      addShape(shapes);
    } else {
      for (let i2 = 0; i2 < shapes.length; i2++) {
        addShape(shapes[i2]);
        this.addGroup(groupStart, groupCount, i2);
        groupStart += groupCount;
        groupCount = 0;
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
    function addShape(shape) {
      const indexOffset = vertices.length / 3;
      const points = shape.extractPoints(curveSegments);
      let shapeVertices = points.shape;
      const shapeHoles = points.holes;
      if (ShapeUtils2.isClockWise(shapeVertices) === false) {
        shapeVertices = shapeVertices.reverse();
      }
      for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
        const shapeHole = shapeHoles[i2];
        if (ShapeUtils2.isClockWise(shapeHole) === true) {
          shapeHoles[i2] = shapeHole.reverse();
        }
      }
      const faces = ShapeUtils2.triangulateShape(shapeVertices, shapeHoles);
      for (let i2 = 0, l2 = shapeHoles.length; i2 < l2; i2++) {
        const shapeHole = shapeHoles[i2];
        shapeVertices = shapeVertices.concat(shapeHole);
      }
      for (let i2 = 0, l2 = shapeVertices.length; i2 < l2; i2++) {
        const vertex2 = shapeVertices[i2];
        vertices.push(vertex2.x, vertex2.y, 0);
        normals.push(0, 0, 1);
        uvs.push(vertex2.x, vertex2.y);
      }
      for (let i2 = 0, l2 = faces.length; i2 < l2; i2++) {
        const face = faces[i2];
        const a2 = face[0] + indexOffset;
        const b = face[1] + indexOffset;
        const c4 = face[2] + indexOffset;
        indices.push(a2, b, c4);
        groupCount += 3;
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    const shapes = this.parameters.shapes;
    return toJSON2(shapes, data);
  }
  static fromJSON(data, shapes) {
    const geometryShapes = [];
    for (let j2 = 0, jl = data.shapes.length; j2 < jl; j2++) {
      const shape = shapes[data.shapes[j2]];
      geometryShapes.push(shape);
    }
    return new _ShapeGeometry(geometryShapes, data.curveSegments);
  }
};
function toJSON2(shapes, data) {
  data.shapes = [];
  if (Array.isArray(shapes)) {
    for (let i2 = 0, l2 = shapes.length; i2 < l2; i2++) {
      const shape = shapes[i2];
      data.shapes.push(shape.uuid);
    }
  } else {
    data.shapes.push(shapes.uuid);
  }
  return data;
}
var SphereGeometry2 = class _SphereGeometry extends BufferGeometry2 {
  constructor(radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI) {
    super();
    this.type = "SphereGeometry";
    this.parameters = {
      radius,
      widthSegments,
      heightSegments,
      phiStart,
      phiLength,
      thetaStart,
      thetaLength
    };
    widthSegments = Math.max(3, Math.floor(widthSegments));
    heightSegments = Math.max(2, Math.floor(heightSegments));
    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    let index7 = 0;
    const grid = [];
    const vertex2 = new Vector32();
    const normal2 = new Vector32();
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy <= heightSegments; iy++) {
      const verticesRow = [];
      const v3 = iy / heightSegments;
      let uOffset = 0;
      if (iy === 0 && thetaStart === 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy === heightSegments && thetaEnd === Math.PI) {
        uOffset = -0.5 / widthSegments;
      }
      for (let ix = 0; ix <= widthSegments; ix++) {
        const u5 = ix / widthSegments;
        vertex2.x = -radius * Math.cos(phiStart + u5 * phiLength) * Math.sin(thetaStart + v3 * thetaLength);
        vertex2.y = radius * Math.cos(thetaStart + v3 * thetaLength);
        vertex2.z = radius * Math.sin(phiStart + u5 * phiLength) * Math.sin(thetaStart + v3 * thetaLength);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normal2.copy(vertex2).normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        uvs.push(u5 + uOffset, 1 - v3);
        verticesRow.push(index7++);
      }
      grid.push(verticesRow);
    }
    for (let iy = 0; iy < heightSegments; iy++) {
      for (let ix = 0; ix < widthSegments; ix++) {
        const a2 = grid[iy][ix + 1];
        const b = grid[iy][ix];
        const c4 = grid[iy + 1][ix];
        const d2 = grid[iy + 1][ix + 1];
        if (iy !== 0 || thetaStart > 0) indices.push(a2, b, d2);
        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _SphereGeometry(data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength);
  }
};
var TetrahedronGeometry2 = class _TetrahedronGeometry extends PolyhedronGeometry2 {
  constructor(radius = 1, detail = 0) {
    const vertices = [
      1,
      1,
      1,
      -1,
      -1,
      1,
      -1,
      1,
      -1,
      1,
      -1,
      -1
    ];
    const indices = [
      2,
      1,
      0,
      0,
      3,
      2,
      1,
      3,
      0,
      2,
      3,
      1
    ];
    super(vertices, indices, radius, detail);
    this.type = "TetrahedronGeometry";
    this.parameters = {
      radius,
      detail
    };
  }
  static fromJSON(data) {
    return new _TetrahedronGeometry(data.radius, data.detail);
  }
};
var TorusGeometry2 = class _TorusGeometry extends BufferGeometry2 {
  constructor(radius = 1, tube = 0.4, radialSegments = 12, tubularSegments = 48, arc = Math.PI * 2) {
    super();
    this.type = "TorusGeometry";
    this.parameters = {
      radius,
      tube,
      radialSegments,
      tubularSegments,
      arc
    };
    radialSegments = Math.floor(radialSegments);
    tubularSegments = Math.floor(tubularSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const center = new Vector32();
    const vertex2 = new Vector32();
    const normal2 = new Vector32();
    for (let j2 = 0; j2 <= radialSegments; j2++) {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        const u5 = i2 / tubularSegments * arc;
        const v3 = j2 / radialSegments * Math.PI * 2;
        vertex2.x = (radius + tube * Math.cos(v3)) * Math.cos(u5);
        vertex2.y = (radius + tube * Math.cos(v3)) * Math.sin(u5);
        vertex2.z = tube * Math.sin(v3);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        center.x = radius * Math.cos(u5);
        center.y = radius * Math.sin(u5);
        normal2.subVectors(vertex2, center).normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j2 / radialSegments);
      }
    }
    for (let j2 = 1; j2 <= radialSegments; j2++) {
      for (let i2 = 1; i2 <= tubularSegments; i2++) {
        const a2 = (tubularSegments + 1) * j2 + i2 - 1;
        const b = (tubularSegments + 1) * (j2 - 1) + i2 - 1;
        const c4 = (tubularSegments + 1) * (j2 - 1) + i2;
        const d2 = (tubularSegments + 1) * j2 + i2;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _TorusGeometry(data.radius, data.tube, data.radialSegments, data.tubularSegments, data.arc);
  }
};
var TorusKnotGeometry2 = class _TorusKnotGeometry extends BufferGeometry2 {
  constructor(radius = 1, tube = 0.4, tubularSegments = 64, radialSegments = 8, p2 = 2, q2 = 3) {
    super();
    this.type = "TorusKnotGeometry";
    this.parameters = {
      radius,
      tube,
      tubularSegments,
      radialSegments,
      p: p2,
      q: q2
    };
    tubularSegments = Math.floor(tubularSegments);
    radialSegments = Math.floor(radialSegments);
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    const vertex2 = new Vector32();
    const normal2 = new Vector32();
    const P1 = new Vector32();
    const P2 = new Vector32();
    const B4 = new Vector32();
    const T2 = new Vector32();
    const N2 = new Vector32();
    for (let i2 = 0; i2 <= tubularSegments; ++i2) {
      const u5 = i2 / tubularSegments * p2 * Math.PI * 2;
      calculatePositionOnCurve(u5, p2, q2, radius, P1);
      calculatePositionOnCurve(u5 + 0.01, p2, q2, radius, P2);
      T2.subVectors(P2, P1);
      N2.addVectors(P2, P1);
      B4.crossVectors(T2, N2);
      N2.crossVectors(B4, T2);
      B4.normalize();
      N2.normalize();
      for (let j2 = 0; j2 <= radialSegments; ++j2) {
        const v3 = j2 / radialSegments * Math.PI * 2;
        const cx = -tube * Math.cos(v3);
        const cy = tube * Math.sin(v3);
        vertex2.x = P1.x + (cx * N2.x + cy * B4.x);
        vertex2.y = P1.y + (cx * N2.y + cy * B4.y);
        vertex2.z = P1.z + (cx * N2.z + cy * B4.z);
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
        normal2.subVectors(vertex2, P1).normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        uvs.push(i2 / tubularSegments);
        uvs.push(j2 / radialSegments);
      }
    }
    for (let j2 = 1; j2 <= tubularSegments; j2++) {
      for (let i2 = 1; i2 <= radialSegments; i2++) {
        const a2 = (radialSegments + 1) * (j2 - 1) + (i2 - 1);
        const b = (radialSegments + 1) * j2 + (i2 - 1);
        const c4 = (radialSegments + 1) * j2 + i2;
        const d2 = (radialSegments + 1) * (j2 - 1) + i2;
        indices.push(a2, b, d2);
        indices.push(b, c4, d2);
      }
    }
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
    function calculatePositionOnCurve(u5, p3, q3, radius2, position) {
      const cu = Math.cos(u5);
      const su = Math.sin(u5);
      const quOverP = q3 / p3 * u5;
      const cs = Math.cos(quOverP);
      position.x = radius2 * (2 + cs) * 0.5 * cu;
      position.y = radius2 * (2 + cs) * su * 0.5;
      position.z = radius2 * Math.sin(quOverP) * 0.5;
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  static fromJSON(data) {
    return new _TorusKnotGeometry(data.radius, data.tube, data.tubularSegments, data.radialSegments, data.p, data.q);
  }
};
var TubeGeometry2 = class _TubeGeometry extends BufferGeometry2 {
  constructor(path = new QuadraticBezierCurve32(new Vector32(-1, -1, 0), new Vector32(-1, 1, 0), new Vector32(1, 1, 0)), tubularSegments = 64, radius = 1, radialSegments = 8, closed = false) {
    super();
    this.type = "TubeGeometry";
    this.parameters = {
      path,
      tubularSegments,
      radius,
      radialSegments,
      closed
    };
    const frames = path.computeFrenetFrames(tubularSegments, closed);
    this.tangents = frames.tangents;
    this.normals = frames.normals;
    this.binormals = frames.binormals;
    const vertex2 = new Vector32();
    const normal2 = new Vector32();
    const uv2 = new Vector22();
    let P2 = new Vector32();
    const vertices = [];
    const normals = [];
    const uvs = [];
    const indices = [];
    generateBufferData();
    this.setIndex(indices);
    this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    this.setAttribute("normal", new Float32BufferAttribute2(normals, 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uvs, 2));
    function generateBufferData() {
      for (let i2 = 0; i2 < tubularSegments; i2++) {
        generateSegment(i2);
      }
      generateSegment(closed === false ? tubularSegments : 0);
      generateUVs();
      generateIndices();
    }
    function generateSegment(i2) {
      P2 = path.getPointAt(i2 / tubularSegments, P2);
      const N2 = frames.normals[i2];
      const B4 = frames.binormals[i2];
      for (let j2 = 0; j2 <= radialSegments; j2++) {
        const v3 = j2 / radialSegments * Math.PI * 2;
        const sin4 = Math.sin(v3);
        const cos4 = -Math.cos(v3);
        normal2.x = cos4 * N2.x + sin4 * B4.x;
        normal2.y = cos4 * N2.y + sin4 * B4.y;
        normal2.z = cos4 * N2.z + sin4 * B4.z;
        normal2.normalize();
        normals.push(normal2.x, normal2.y, normal2.z);
        vertex2.x = P2.x + radius * normal2.x;
        vertex2.y = P2.y + radius * normal2.y;
        vertex2.z = P2.z + radius * normal2.z;
        vertices.push(vertex2.x, vertex2.y, vertex2.z);
      }
    }
    function generateIndices() {
      for (let j2 = 1; j2 <= tubularSegments; j2++) {
        for (let i2 = 1; i2 <= radialSegments; i2++) {
          const a2 = (radialSegments + 1) * (j2 - 1) + (i2 - 1);
          const b = (radialSegments + 1) * j2 + (i2 - 1);
          const c4 = (radialSegments + 1) * j2 + i2;
          const d2 = (radialSegments + 1) * (j2 - 1) + i2;
          indices.push(a2, b, d2);
          indices.push(b, c4, d2);
        }
      }
    }
    function generateUVs() {
      for (let i2 = 0; i2 <= tubularSegments; i2++) {
        for (let j2 = 0; j2 <= radialSegments; j2++) {
          uv2.x = i2 / tubularSegments;
          uv2.y = j2 / radialSegments;
          uvs.push(uv2.x, uv2.y);
        }
      }
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
  toJSON() {
    const data = super.toJSON();
    data.path = this.parameters.path.toJSON();
    return data;
  }
  static fromJSON(data) {
    return new _TubeGeometry(
      new Curves2[data.path.type]().fromJSON(data.path),
      data.tubularSegments,
      data.radius,
      data.radialSegments,
      data.closed
    );
  }
};
var WireframeGeometry2 = class extends BufferGeometry2 {
  constructor(geometry = null) {
    super();
    this.type = "WireframeGeometry";
    this.parameters = {
      geometry
    };
    if (geometry !== null) {
      const vertices = [];
      const edges = /* @__PURE__ */ new Set();
      const start = new Vector32();
      const end = new Vector32();
      if (geometry.index !== null) {
        const position = geometry.attributes.position;
        const indices = geometry.index;
        let groups2 = geometry.groups;
        if (groups2.length === 0) {
          groups2 = [{ start: 0, count: indices.count, materialIndex: 0 }];
        }
        for (let o2 = 0, ol = groups2.length; o2 < ol; ++o2) {
          const group2 = groups2[o2];
          const groupStart = group2.start;
          const groupCount = group2.count;
          for (let i2 = groupStart, l2 = groupStart + groupCount; i2 < l2; i2 += 3) {
            for (let j2 = 0; j2 < 3; j2++) {
              const index1 = indices.getX(i2 + j2);
              const index22 = indices.getX(i2 + (j2 + 1) % 3);
              start.fromBufferAttribute(position, index1);
              end.fromBufferAttribute(position, index22);
              if (isUniqueEdge2(start, end, edges) === true) {
                vertices.push(start.x, start.y, start.z);
                vertices.push(end.x, end.y, end.z);
              }
            }
          }
        }
      } else {
        const position = geometry.attributes.position;
        for (let i2 = 0, l2 = position.count / 3; i2 < l2; i2++) {
          for (let j2 = 0; j2 < 3; j2++) {
            const index1 = 3 * i2 + j2;
            const index22 = 3 * i2 + (j2 + 1) % 3;
            start.fromBufferAttribute(position, index1);
            end.fromBufferAttribute(position, index22);
            if (isUniqueEdge2(start, end, edges) === true) {
              vertices.push(start.x, start.y, start.z);
              vertices.push(end.x, end.y, end.z);
            }
          }
        }
      }
      this.setAttribute("position", new Float32BufferAttribute2(vertices, 3));
    }
  }
  copy(source) {
    super.copy(source);
    this.parameters = Object.assign({}, source.parameters);
    return this;
  }
};
function isUniqueEdge2(start, end, edges) {
  const hash1 = `${start.x},${start.y},${start.z}-${end.x},${end.y},${end.z}`;
  const hash2 = `${end.x},${end.y},${end.z}-${start.x},${start.y},${start.z}`;
  if (edges.has(hash1) === true || edges.has(hash2) === true) {
    return false;
  } else {
    edges.add(hash1);
    edges.add(hash2);
    return true;
  }
}
var Geometries$1 = Object.freeze({
  __proto__: null,
  BoxGeometry: BoxGeometry2,
  CapsuleGeometry: CapsuleGeometry2,
  CircleGeometry: CircleGeometry2,
  ConeGeometry: ConeGeometry2,
  CylinderGeometry: CylinderGeometry2,
  DodecahedronGeometry: DodecahedronGeometry2,
  EdgesGeometry: EdgesGeometry2,
  ExtrudeGeometry: ExtrudeGeometry2,
  IcosahedronGeometry: IcosahedronGeometry2,
  LatheGeometry: LatheGeometry2,
  OctahedronGeometry: OctahedronGeometry2,
  PlaneGeometry: PlaneGeometry2,
  PolyhedronGeometry: PolyhedronGeometry2,
  RingGeometry: RingGeometry2,
  ShapeGeometry: ShapeGeometry2,
  SphereGeometry: SphereGeometry2,
  TetrahedronGeometry: TetrahedronGeometry2,
  TorusGeometry: TorusGeometry2,
  TorusKnotGeometry: TorusKnotGeometry2,
  TubeGeometry: TubeGeometry2,
  WireframeGeometry: WireframeGeometry2
});
var ShadowMaterial = class extends Material2 {
  constructor(parameters) {
    super();
    this.isShadowMaterial = true;
    this.type = "ShadowMaterial";
    this.color = new Color3(0);
    this.transparent = true;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.fog = source.fog;
    return this;
  }
};
var RawShaderMaterial = class extends ShaderMaterial2 {
  constructor(parameters) {
    super(parameters);
    this.isRawShaderMaterial = true;
    this.type = "RawShaderMaterial";
  }
};
var MeshStandardMaterial = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshStandardMaterial = true;
    this.defines = { "STANDARD": "" };
    this.type = "MeshStandardMaterial";
    this.color = new Color3(16777215);
    this.roughness = 1;
    this.metalness = 0;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color3(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap2;
    this.normalScale = new Vector22(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.roughnessMap = null;
    this.metalnessMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler2();
    this.envMapIntensity = 1;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.defines = { "STANDARD": "" };
    this.color.copy(source.color);
    this.roughness = source.roughness;
    this.metalness = source.metalness;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.roughnessMap = source.roughnessMap;
    this.metalnessMap = source.metalnessMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.envMapIntensity = source.envMapIntensity;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
};
var MeshPhysicalMaterial = class extends MeshStandardMaterial {
  constructor(parameters) {
    super();
    this.isMeshPhysicalMaterial = true;
    this.defines = {
      "STANDARD": "",
      "PHYSICAL": ""
    };
    this.type = "MeshPhysicalMaterial";
    this.anisotropyRotation = 0;
    this.anisotropyMap = null;
    this.clearcoatMap = null;
    this.clearcoatRoughness = 0;
    this.clearcoatRoughnessMap = null;
    this.clearcoatNormalScale = new Vector22(1, 1);
    this.clearcoatNormalMap = null;
    this.ior = 1.5;
    Object.defineProperty(this, "reflectivity", {
      get: function() {
        return clamp$1(2.5 * (this.ior - 1) / (this.ior + 1), 0, 1);
      },
      set: function(reflectivity) {
        this.ior = (1 + 0.4 * reflectivity) / (1 - 0.4 * reflectivity);
      }
    });
    this.iridescenceMap = null;
    this.iridescenceIOR = 1.3;
    this.iridescenceThicknessRange = [100, 400];
    this.iridescenceThicknessMap = null;
    this.sheenColor = new Color3(0);
    this.sheenColorMap = null;
    this.sheenRoughness = 1;
    this.sheenRoughnessMap = null;
    this.transmissionMap = null;
    this.thickness = 0;
    this.thicknessMap = null;
    this.attenuationDistance = Infinity;
    this.attenuationColor = new Color3(1, 1, 1);
    this.specularIntensity = 1;
    this.specularIntensityMap = null;
    this.specularColor = new Color3(1, 1, 1);
    this.specularColorMap = null;
    this._anisotropy = 0;
    this._clearcoat = 0;
    this._dispersion = 0;
    this._iridescence = 0;
    this._sheen = 0;
    this._transmission = 0;
    this.setValues(parameters);
  }
  get anisotropy() {
    return this._anisotropy;
  }
  set anisotropy(value) {
    if (this._anisotropy > 0 !== value > 0) {
      this.version++;
    }
    this._anisotropy = value;
  }
  get clearcoat() {
    return this._clearcoat;
  }
  set clearcoat(value) {
    if (this._clearcoat > 0 !== value > 0) {
      this.version++;
    }
    this._clearcoat = value;
  }
  get iridescence() {
    return this._iridescence;
  }
  set iridescence(value) {
    if (this._iridescence > 0 !== value > 0) {
      this.version++;
    }
    this._iridescence = value;
  }
  get dispersion() {
    return this._dispersion;
  }
  set dispersion(value) {
    if (this._dispersion > 0 !== value > 0) {
      this.version++;
    }
    this._dispersion = value;
  }
  get sheen() {
    return this._sheen;
  }
  set sheen(value) {
    if (this._sheen > 0 !== value > 0) {
      this.version++;
    }
    this._sheen = value;
  }
  get transmission() {
    return this._transmission;
  }
  set transmission(value) {
    if (this._transmission > 0 !== value > 0) {
      this.version++;
    }
    this._transmission = value;
  }
  copy(source) {
    super.copy(source);
    this.defines = {
      "STANDARD": "",
      "PHYSICAL": ""
    };
    this.anisotropy = source.anisotropy;
    this.anisotropyRotation = source.anisotropyRotation;
    this.anisotropyMap = source.anisotropyMap;
    this.clearcoat = source.clearcoat;
    this.clearcoatMap = source.clearcoatMap;
    this.clearcoatRoughness = source.clearcoatRoughness;
    this.clearcoatRoughnessMap = source.clearcoatRoughnessMap;
    this.clearcoatNormalMap = source.clearcoatNormalMap;
    this.clearcoatNormalScale.copy(source.clearcoatNormalScale);
    this.dispersion = source.dispersion;
    this.ior = source.ior;
    this.iridescence = source.iridescence;
    this.iridescenceMap = source.iridescenceMap;
    this.iridescenceIOR = source.iridescenceIOR;
    this.iridescenceThicknessRange = [...source.iridescenceThicknessRange];
    this.iridescenceThicknessMap = source.iridescenceThicknessMap;
    this.sheen = source.sheen;
    this.sheenColor.copy(source.sheenColor);
    this.sheenColorMap = source.sheenColorMap;
    this.sheenRoughness = source.sheenRoughness;
    this.sheenRoughnessMap = source.sheenRoughnessMap;
    this.transmission = source.transmission;
    this.transmissionMap = source.transmissionMap;
    this.thickness = source.thickness;
    this.thicknessMap = source.thicknessMap;
    this.attenuationDistance = source.attenuationDistance;
    this.attenuationColor.copy(source.attenuationColor);
    this.specularIntensity = source.specularIntensity;
    this.specularIntensityMap = source.specularIntensityMap;
    this.specularColor.copy(source.specularColor);
    this.specularColorMap = source.specularColorMap;
    return this;
  }
};
var MeshPhongMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshPhongMaterial = true;
    this.type = "MeshPhongMaterial";
    this.color = new Color3(16777215);
    this.specular = new Color3(1118481);
    this.shininess = 30;
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color3(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap2;
    this.normalScale = new Vector22(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler2();
    this.combine = MultiplyOperation2;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.specular.copy(source.specular);
    this.shininess = source.shininess;
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
};
var MeshToonMaterial = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshToonMaterial = true;
    this.defines = { "TOON": "" };
    this.type = "MeshToonMaterial";
    this.color = new Color3(16777215);
    this.map = null;
    this.gradientMap = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color3(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap2;
    this.normalScale = new Vector22(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.gradientMap = source.gradientMap;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.alphaMap = source.alphaMap;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.fog = source.fog;
    return this;
  }
};
var MeshNormalMaterial = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshNormalMaterial = true;
    this.type = "MeshNormalMaterial";
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap2;
    this.normalScale = new Vector22(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.flatShading = false;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.flatShading = source.flatShading;
    return this;
  }
};
var MeshLambertMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshLambertMaterial = true;
    this.type = "MeshLambertMaterial";
    this.color = new Color3(16777215);
    this.map = null;
    this.lightMap = null;
    this.lightMapIntensity = 1;
    this.aoMap = null;
    this.aoMapIntensity = 1;
    this.emissive = new Color3(0);
    this.emissiveIntensity = 1;
    this.emissiveMap = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap2;
    this.normalScale = new Vector22(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.specularMap = null;
    this.alphaMap = null;
    this.envMap = null;
    this.envMapRotation = new Euler2();
    this.combine = MultiplyOperation2;
    this.reflectivity = 1;
    this.refractionRatio = 0.98;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.wireframeLinecap = "round";
    this.wireframeLinejoin = "round";
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.color.copy(source.color);
    this.map = source.map;
    this.lightMap = source.lightMap;
    this.lightMapIntensity = source.lightMapIntensity;
    this.aoMap = source.aoMap;
    this.aoMapIntensity = source.aoMapIntensity;
    this.emissive.copy(source.emissive);
    this.emissiveMap = source.emissiveMap;
    this.emissiveIntensity = source.emissiveIntensity;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.specularMap = source.specularMap;
    this.alphaMap = source.alphaMap;
    this.envMap = source.envMap;
    this.envMapRotation.copy(source.envMapRotation);
    this.combine = source.combine;
    this.reflectivity = source.reflectivity;
    this.refractionRatio = source.refractionRatio;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    this.wireframeLinecap = source.wireframeLinecap;
    this.wireframeLinejoin = source.wireframeLinejoin;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
};
var MeshDepthMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshDepthMaterial = true;
    this.type = "MeshDepthMaterial";
    this.depthPacking = BasicDepthPacking2;
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.wireframe = false;
    this.wireframeLinewidth = 1;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.depthPacking = source.depthPacking;
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.wireframe = source.wireframe;
    this.wireframeLinewidth = source.wireframeLinewidth;
    return this;
  }
};
var MeshDistanceMaterial2 = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshDistanceMaterial = true;
    this.type = "MeshDistanceMaterial";
    this.map = null;
    this.alphaMap = null;
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.map = source.map;
    this.alphaMap = source.alphaMap;
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    return this;
  }
};
var MeshMatcapMaterial = class extends Material2 {
  constructor(parameters) {
    super();
    this.isMeshMatcapMaterial = true;
    this.defines = { "MATCAP": "" };
    this.type = "MeshMatcapMaterial";
    this.color = new Color3(16777215);
    this.matcap = null;
    this.map = null;
    this.bumpMap = null;
    this.bumpScale = 1;
    this.normalMap = null;
    this.normalMapType = TangentSpaceNormalMap2;
    this.normalScale = new Vector22(1, 1);
    this.displacementMap = null;
    this.displacementScale = 1;
    this.displacementBias = 0;
    this.alphaMap = null;
    this.flatShading = false;
    this.fog = true;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.defines = { "MATCAP": "" };
    this.color.copy(source.color);
    this.matcap = source.matcap;
    this.map = source.map;
    this.bumpMap = source.bumpMap;
    this.bumpScale = source.bumpScale;
    this.normalMap = source.normalMap;
    this.normalMapType = source.normalMapType;
    this.normalScale.copy(source.normalScale);
    this.displacementMap = source.displacementMap;
    this.displacementScale = source.displacementScale;
    this.displacementBias = source.displacementBias;
    this.alphaMap = source.alphaMap;
    this.flatShading = source.flatShading;
    this.fog = source.fog;
    return this;
  }
};
var LineDashedMaterial = class extends LineBasicMaterial2 {
  constructor(parameters) {
    super();
    this.isLineDashedMaterial = true;
    this.type = "LineDashedMaterial";
    this.scale = 1;
    this.dashSize = 3;
    this.gapSize = 1;
    this.setValues(parameters);
  }
  copy(source) {
    super.copy(source);
    this.scale = source.scale;
    this.dashSize = source.dashSize;
    this.gapSize = source.gapSize;
    return this;
  }
};
function getCacheKey$1(object2, force = false) {
  let cacheKey = "{";
  if (object2.isNode === true) {
    cacheKey += object2.id;
    object2 = object2.getSelf();
  }
  for (const { property: property2, childNode } of getNodeChildren(object2)) {
    cacheKey += "," + property2.slice(0, -4) + ":" + childNode.getCacheKey(force);
  }
  cacheKey += "}";
  return cacheKey;
}
function* getNodeChildren(node, toJSON3 = false) {
  for (const property2 in node) {
    if (property2.startsWith("_") === true) continue;
    const object2 = node[property2];
    if (Array.isArray(object2) === true) {
      for (let i2 = 0; i2 < object2.length; i2++) {
        const child = object2[i2];
        if (child && (child.isNode === true || toJSON3 && typeof child.toJSON === "function")) {
          yield { property: property2, index: i2, childNode: child };
        }
      }
    } else if (object2 && object2.isNode === true) {
      yield { property: property2, childNode: object2 };
    } else if (typeof object2 === "object") {
      for (const subProperty in object2) {
        const child = object2[subProperty];
        if (child && (child.isNode === true || toJSON3 && typeof child.toJSON === "function")) {
          yield { property: property2, index: subProperty, childNode: child };
        }
      }
    }
  }
}
function getValueType(value) {
  if (value === void 0 || value === null) return null;
  const typeOf = typeof value;
  if (value.isNode === true) {
    return "node";
  } else if (typeOf === "number") {
    return "float";
  } else if (typeOf === "boolean") {
    return "bool";
  } else if (typeOf === "string") {
    return "string";
  } else if (typeOf === "function") {
    return "shader";
  } else if (value.isVector2 === true) {
    return "vec2";
  } else if (value.isVector3 === true) {
    return "vec3";
  } else if (value.isVector4 === true) {
    return "vec4";
  } else if (value.isMatrix3 === true) {
    return "mat3";
  } else if (value.isMatrix4 === true) {
    return "mat4";
  } else if (value.isColor === true) {
    return "color";
  } else if (value instanceof ArrayBuffer) {
    return "ArrayBuffer";
  }
  return null;
}
function getValueFromType(type, ...params) {
  const last4 = type ? type.slice(-4) : void 0;
  if (params.length === 1) {
    if (last4 === "vec2") params = [params[0], params[0]];
    else if (last4 === "vec3") params = [params[0], params[0], params[0]];
    else if (last4 === "vec4") params = [params[0], params[0], params[0], params[0]];
  }
  if (type === "color") {
    return new Color3(...params);
  } else if (last4 === "vec2") {
    return new Vector22(...params);
  } else if (last4 === "vec3") {
    return new Vector32(...params);
  } else if (last4 === "vec4") {
    return new Vector42(...params);
  } else if (last4 === "mat3") {
    return new Matrix32(...params);
  } else if (last4 === "mat4") {
    return new Matrix42(...params);
  } else if (type === "bool") {
    return params[0] || false;
  } else if (type === "float" || type === "int" || type === "uint") {
    return params[0] || 0;
  } else if (type === "string") {
    return params[0] || "";
  } else if (type === "ArrayBuffer") {
    return base64ToArrayBuffer(params[0]);
  }
  return null;
}
function arrayBufferToBase64(arrayBuffer) {
  let chars = "";
  const array3 = new Uint8Array(arrayBuffer);
  for (let i2 = 0; i2 < array3.length; i2++) {
    chars += String.fromCharCode(array3[i2]);
  }
  return btoa(chars);
}
function base64ToArrayBuffer(base64) {
  return Uint8Array.from(atob(base64), (c4) => c4.charCodeAt(0)).buffer;
}
var NodeUtils = Object.freeze({
  __proto__: null,
  arrayBufferToBase64,
  base64ToArrayBuffer,
  getCacheKey: getCacheKey$1,
  getNodeChildren,
  getValueFromType,
  getValueType
});
var NodeShaderStage = {
  VERTEX: "vertex",
  FRAGMENT: "fragment"
};
var NodeUpdateType = {
  NONE: "none",
  FRAME: "frame",
  RENDER: "render",
  OBJECT: "object"
};
var defaultShaderStages = ["fragment", "vertex"];
var defaultBuildStages = ["setup", "analyze", "generate"];
var shaderStages = [...defaultShaderStages, "compute"];
var vectorComponents = ["x", "y", "z", "w"];
var Nodes$1 = /* @__PURE__ */ new Map();
var _nodeId = 0;
var Node2 = class extends EventDispatcher2 {
  constructor(nodeType = null) {
    super();
    this.nodeType = nodeType;
    this.updateType = NodeUpdateType.NONE;
    this.updateBeforeType = NodeUpdateType.NONE;
    this.updateAfterType = NodeUpdateType.NONE;
    this.uuid = MathUtils2.generateUUID();
    this.version = 0;
    this._cacheKey = null;
    this._cacheKeyVersion = 0;
    this.global = false;
    this.isNode = true;
    Object.defineProperty(this, "id", { value: _nodeId++ });
  }
  set needsUpdate(value) {
    if (value === true) {
      this.version++;
    }
  }
  get type() {
    return this.constructor.type;
  }
  onUpdate(callback, updateType) {
    this.updateType = updateType;
    this.update = callback.bind(this.getSelf());
    return this;
  }
  onFrameUpdate(callback) {
    return this.onUpdate(callback, NodeUpdateType.FRAME);
  }
  onRenderUpdate(callback) {
    return this.onUpdate(callback, NodeUpdateType.RENDER);
  }
  onObjectUpdate(callback) {
    return this.onUpdate(callback, NodeUpdateType.OBJECT);
  }
  onReference(callback) {
    this.updateReference = callback.bind(this.getSelf());
    return this;
  }
  getSelf() {
    return this.self || this;
  }
  updateReference() {
    return this;
  }
  isGlobal() {
    return this.global;
  }
  *getChildren() {
    for (const { childNode } of getNodeChildren(this)) {
      yield childNode;
    }
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  traverse(callback) {
    callback(this);
    for (const childNode of this.getChildren()) {
      childNode.traverse(callback);
    }
  }
  getCacheKey(force = false) {
    force = force || this.version !== this._cacheKeyVersion;
    if (force === true || this._cacheKey === null) {
      this._cacheKey = getCacheKey$1(this, force);
      this._cacheKeyVersion = this.version;
    }
    return this._cacheKey;
  }
  getScope() {
    return this;
  }
  getHash() {
    return this.uuid;
  }
  getUpdateType() {
    return this.updateType;
  }
  getUpdateBeforeType() {
    return this.updateBeforeType;
  }
  getUpdateAfterType() {
    return this.updateAfterType;
  }
  getElementType(builder) {
    const type = this.getNodeType(builder);
    const elementType = builder.getElementType(type);
    return elementType;
  }
  getNodeType(builder) {
    const nodeProperties = builder.getNodeProperties(this);
    if (nodeProperties.outputNode) {
      return nodeProperties.outputNode.getNodeType(builder);
    }
    return this.nodeType;
  }
  getShared(builder) {
    const hash2 = this.getHash(builder);
    const nodeFromHash = builder.getNodeFromHash(hash2);
    return nodeFromHash || this;
  }
  setup(builder) {
    const nodeProperties = builder.getNodeProperties(this);
    let index7 = 0;
    for (const childNode of this.getChildren()) {
      nodeProperties["node" + index7++] = childNode;
    }
    return null;
  }
  analyze(builder) {
    const usageCount = builder.increaseUsage(this);
    if (usageCount === 1) {
      const nodeProperties = builder.getNodeProperties(this);
      for (const childNode of Object.values(nodeProperties)) {
        if (childNode && childNode.isNode === true) {
          childNode.build(builder);
        }
      }
    }
  }
  generate(builder, output2) {
    const { outputNode } = builder.getNodeProperties(this);
    if (outputNode && outputNode.isNode === true) {
      return outputNode.build(builder, output2);
    }
  }
  updateBefore() {
    console.warn("Abstract function.");
  }
  updateAfter() {
    console.warn("Abstract function.");
  }
  update() {
    console.warn("Abstract function.");
  }
  build(builder, output2 = null) {
    const refNode = this.getShared(builder);
    if (this !== refNode) {
      return refNode.build(builder, output2);
    }
    builder.addNode(this);
    builder.addChain(this);
    let result = null;
    const buildStage = builder.getBuildStage();
    if (buildStage === "setup") {
      this.updateReference(builder);
      const properties = builder.getNodeProperties(this);
      if (properties.initialized !== true) {
        const stackNodesBeforeSetup = builder.stack.nodes.length;
        properties.initialized = true;
        properties.outputNode = this.setup(builder);
        if (properties.outputNode !== null && builder.stack.nodes.length !== stackNodesBeforeSetup) ;
        for (const childNode of Object.values(properties)) {
          if (childNode && childNode.isNode === true) {
            childNode.build(builder);
          }
        }
      }
    } else if (buildStage === "analyze") {
      this.analyze(builder);
    } else if (buildStage === "generate") {
      const isGenerateOnce = this.generate.length === 1;
      if (isGenerateOnce) {
        const type = this.getNodeType(builder);
        const nodeData = builder.getDataFromNode(this);
        result = nodeData.snippet;
        if (result === void 0) {
          result = this.generate(builder) || "";
          nodeData.snippet = result;
        }
        result = builder.format(result, type, output2);
      } else {
        result = this.generate(builder, output2) || "";
      }
    }
    builder.removeChain(this);
    return result;
  }
  getSerializeChildren() {
    return getNodeChildren(this);
  }
  serialize(json) {
    const nodeChildren = this.getSerializeChildren();
    const inputNodes = {};
    for (const { property: property2, index: index7, childNode } of nodeChildren) {
      if (index7 !== void 0) {
        if (inputNodes[property2] === void 0) {
          inputNodes[property2] = Number.isInteger(index7) ? [] : {};
        }
        inputNodes[property2][index7] = childNode.toJSON(json.meta).uuid;
      } else {
        inputNodes[property2] = childNode.toJSON(json.meta).uuid;
      }
    }
    if (Object.keys(inputNodes).length > 0) {
      json.inputNodes = inputNodes;
    }
  }
  deserialize(json) {
    if (json.inputNodes !== void 0) {
      const nodes = json.meta.nodes;
      for (const property2 in json.inputNodes) {
        if (Array.isArray(json.inputNodes[property2])) {
          const inputArray = [];
          for (const uuid of json.inputNodes[property2]) {
            inputArray.push(nodes[uuid]);
          }
          this[property2] = inputArray;
        } else if (typeof json.inputNodes[property2] === "object") {
          const inputObject = {};
          for (const subProperty in json.inputNodes[property2]) {
            const uuid = json.inputNodes[property2][subProperty];
            inputObject[subProperty] = nodes[uuid];
          }
          this[property2] = inputObject;
        } else {
          const uuid = json.inputNodes[property2];
          this[property2] = nodes[uuid];
        }
      }
    }
  }
  toJSON(meta) {
    const { uuid, type } = this;
    const isRoot = meta === void 0 || typeof meta === "string";
    if (isRoot) {
      meta = {
        textures: {},
        images: {},
        nodes: {}
      };
    }
    let data = meta.nodes[uuid];
    if (data === void 0) {
      data = {
        uuid,
        type,
        meta,
        metadata: {
          version: 4.6,
          type: "Node",
          generator: "Node.toJSON"
        }
      };
      if (isRoot !== true) meta.nodes[data.uuid] = data;
      this.serialize(data);
      delete data.meta;
    }
    function extractFromCache(cache2) {
      const values = [];
      for (const key in cache2) {
        const data2 = cache2[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRoot) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const nodes = extractFromCache(meta.nodes);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
      if (nodes.length > 0) data.nodes = nodes;
    }
    return data;
  }
};
Node2.type = registerNode("", Node2);
function registerNode(type, nodeClass) {
  const suffix = "Node";
  const nodeType = type + suffix;
  if (typeof nodeClass !== "function") throw new Error(`TSL.Node: Node class ${type} is not a class`);
  if (Nodes$1.has(nodeType)) {
    console.warn(`TSL.Node: Redefinition of node class ${nodeType}`);
    return;
  }
  if (type.slice(-suffix.length) === suffix) {
    console.warn(`TSL.Node: Node class ${nodeType} should not have '${suffix}' suffix.`);
    return;
  }
  Nodes$1.set(nodeType, nodeClass);
  nodeClass.type = nodeType;
  return nodeType;
}
var ArrayElementNode = class extends Node2 {
  // @TODO: If extending from TempNode it breaks webgpu_compute
  constructor(node, indexNode) {
    super();
    this.node = node;
    this.indexNode = indexNode;
    this.isArrayElementNode = true;
  }
  getNodeType(builder) {
    return this.node.getElementType(builder);
  }
  generate(builder) {
    const nodeSnippet = this.node.build(builder);
    const indexSnippet = this.indexNode.build(builder, "uint");
    return `${nodeSnippet}[ ${indexSnippet} ]`;
  }
};
ArrayElementNode.type = registerNode("ArrayElement", ArrayElementNode);
var ConvertNode = class extends Node2 {
  constructor(node, convertTo) {
    super();
    this.node = node;
    this.convertTo = convertTo;
  }
  getNodeType(builder) {
    const requestType = this.node.getNodeType(builder);
    let convertTo = null;
    for (const overloadingType of this.convertTo.split("|")) {
      if (convertTo === null || builder.getTypeLength(requestType) === builder.getTypeLength(overloadingType)) {
        convertTo = overloadingType;
      }
    }
    return convertTo;
  }
  serialize(data) {
    super.serialize(data);
    data.convertTo = this.convertTo;
  }
  deserialize(data) {
    super.deserialize(data);
    this.convertTo = data.convertTo;
  }
  generate(builder, output2) {
    const node = this.node;
    const type = this.getNodeType(builder);
    const snippet = node.build(builder, type);
    return builder.format(snippet, type, output2);
  }
};
ConvertNode.type = registerNode("Convert", ConvertNode);
var TempNode = class extends Node2 {
  constructor(type) {
    super(type);
    this.isTempNode = true;
  }
  hasDependencies(builder) {
    return builder.getDataFromNode(this).usageCount > 1;
  }
  build(builder, output2) {
    const buildStage = builder.getBuildStage();
    if (buildStage === "generate") {
      const type = builder.getVectorType(this.getNodeType(builder, output2));
      const nodeData = builder.getDataFromNode(this);
      if (nodeData.propertyName !== void 0) {
        return builder.format(nodeData.propertyName, type, output2);
      } else if (type !== "void" && output2 !== "void" && this.hasDependencies(builder)) {
        const snippet = super.build(builder, type);
        const nodeVar = builder.getVarFromNode(this, null, type);
        const propertyName = builder.getPropertyName(nodeVar);
        builder.addLineFlowCode(`${propertyName} = ${snippet}`);
        nodeData.snippet = snippet;
        nodeData.propertyName = propertyName;
        return builder.format(nodeData.propertyName, type, output2);
      }
    }
    return super.build(builder, output2);
  }
};
TempNode.type = registerNode("Temp", TempNode);
var JoinNode = class extends TempNode {
  constructor(nodes = [], nodeType = null) {
    super(nodeType);
    this.nodes = nodes;
  }
  getNodeType(builder) {
    if (this.nodeType !== null) {
      return builder.getVectorType(this.nodeType);
    }
    return builder.getTypeFromLength(this.nodes.reduce((count2, cur) => count2 + builder.getTypeLength(cur.getNodeType(builder)), 0));
  }
  generate(builder, output2) {
    const type = this.getNodeType(builder);
    const nodes = this.nodes;
    const primitiveType = builder.getComponentType(type);
    const snippetValues = [];
    for (const input of nodes) {
      let inputSnippet = input.build(builder);
      const inputPrimitiveType = builder.getComponentType(input.getNodeType(builder));
      if (inputPrimitiveType !== primitiveType) {
        inputSnippet = builder.format(inputSnippet, inputPrimitiveType, primitiveType);
      }
      snippetValues.push(inputSnippet);
    }
    const snippet = `${builder.getType(type)}( ${snippetValues.join(", ")} )`;
    return builder.format(snippet, type, output2);
  }
};
JoinNode.type = registerNode("Join", JoinNode);
var stringVectorComponents = vectorComponents.join("");
var SplitNode = class extends Node2 {
  constructor(node, components = "x") {
    super();
    this.node = node;
    this.components = components;
    this.isSplitNode = true;
  }
  getVectorLength() {
    let vectorLength = this.components.length;
    for (const c4 of this.components) {
      vectorLength = Math.max(vectorComponents.indexOf(c4) + 1, vectorLength);
    }
    return vectorLength;
  }
  getComponentType(builder) {
    return builder.getComponentType(this.node.getNodeType(builder));
  }
  getNodeType(builder) {
    return builder.getTypeFromLength(this.components.length, this.getComponentType(builder));
  }
  generate(builder, output2) {
    const node = this.node;
    const nodeTypeLength = builder.getTypeLength(node.getNodeType(builder));
    let snippet = null;
    if (nodeTypeLength > 1) {
      let type = null;
      const componentsLength = this.getVectorLength();
      if (componentsLength >= nodeTypeLength) {
        type = builder.getTypeFromLength(this.getVectorLength(), this.getComponentType(builder));
      }
      const nodeSnippet = node.build(builder, type);
      if (this.components.length === nodeTypeLength && this.components === stringVectorComponents.slice(0, this.components.length)) {
        snippet = builder.format(nodeSnippet, type, output2);
      } else {
        snippet = builder.format(`${nodeSnippet}.${this.components}`, this.getNodeType(builder), output2);
      }
    } else {
      snippet = node.build(builder, output2);
    }
    return snippet;
  }
  serialize(data) {
    super.serialize(data);
    data.components = this.components;
  }
  deserialize(data) {
    super.deserialize(data);
    this.components = data.components;
  }
};
SplitNode.type = registerNode("Split", SplitNode);
var SetNode = class extends TempNode {
  constructor(sourceNode, components, targetNode) {
    super();
    this.sourceNode = sourceNode;
    this.components = components;
    this.targetNode = targetNode;
  }
  getNodeType(builder) {
    return this.sourceNode.getNodeType(builder);
  }
  generate(builder) {
    const { sourceNode, components, targetNode } = this;
    const sourceType = this.getNodeType(builder);
    const targetType = builder.getTypeFromLength(components.length);
    const targetSnippet = targetNode.build(builder, targetType);
    const sourceSnippet = sourceNode.build(builder, sourceType);
    const length2 = builder.getTypeLength(sourceType);
    const snippetValues = [];
    for (let i2 = 0; i2 < length2; i2++) {
      const component = vectorComponents[i2];
      if (component === components[0]) {
        snippetValues.push(targetSnippet);
        i2 += components.length - 1;
      } else {
        snippetValues.push(sourceSnippet + "." + component);
      }
    }
    return `${builder.getType(sourceType)}( ${snippetValues.join(", ")} )`;
  }
};
SetNode.type = registerNode("Set", SetNode);
var FlipNode = class extends TempNode {
  constructor(sourceNode, components) {
    super();
    this.sourceNode = sourceNode;
    this.components = components;
  }
  getNodeType(builder) {
    return this.sourceNode.getNodeType(builder);
  }
  generate(builder) {
    const { components, sourceNode } = this;
    const sourceType = this.getNodeType(builder);
    const sourceSnippet = sourceNode.build(builder);
    const sourceCache = builder.getVarFromNode(this);
    const sourceProperty = builder.getPropertyName(sourceCache);
    builder.addLineFlowCode(sourceProperty + " = " + sourceSnippet);
    const length2 = builder.getTypeLength(sourceType);
    const snippetValues = [];
    let componentIndex = 0;
    for (let i2 = 0; i2 < length2; i2++) {
      const component = vectorComponents[i2];
      if (component === components[componentIndex]) {
        snippetValues.push("1.0 - " + (sourceProperty + "." + component));
        componentIndex++;
      } else {
        snippetValues.push(sourceProperty + "." + component);
      }
    }
    return `${builder.getType(sourceType)}( ${snippetValues.join(", ")} )`;
  }
};
FlipNode.type = registerNode("Flip", FlipNode);
var InputNode = class extends Node2 {
  constructor(value, nodeType = null) {
    super(nodeType);
    this.isInputNode = true;
    this.value = value;
    this.precision = null;
  }
  getNodeType() {
    if (this.nodeType === null) {
      return getValueType(this.value);
    }
    return this.nodeType;
  }
  getInputType(builder) {
    return this.getNodeType(builder);
  }
  setPrecision(precision) {
    this.precision = precision;
    return this;
  }
  serialize(data) {
    super.serialize(data);
    data.value = this.value;
    if (this.value && this.value.toArray) data.value = this.value.toArray();
    data.valueType = getValueType(this.value);
    data.nodeType = this.nodeType;
    if (data.valueType === "ArrayBuffer") data.value = arrayBufferToBase64(data.value);
    data.precision = this.precision;
  }
  deserialize(data) {
    super.deserialize(data);
    this.nodeType = data.nodeType;
    this.value = Array.isArray(data.value) ? getValueFromType(data.valueType, ...data.value) : data.value;
    this.precision = data.precision || null;
    if (this.value && this.value.fromArray) this.value = this.value.fromArray(data.value);
  }
  generate() {
    console.warn("Abstract function.");
  }
};
InputNode.type = registerNode("Input", InputNode);
var ConstNode = class extends InputNode {
  constructor(value, nodeType = null) {
    super(value, nodeType);
    this.isConstNode = true;
  }
  generateConst(builder) {
    return builder.generateConst(this.getNodeType(builder), this.value);
  }
  generate(builder, output2) {
    const type = this.getNodeType(builder);
    return builder.format(this.generateConst(builder), type, output2);
  }
};
ConstNode.type = registerNode("Const", ConstNode);
var currentStack = null;
var NodeElements = /* @__PURE__ */ new Map();
function addMethodChaining(name, nodeElement) {
  if (NodeElements.has(name)) {
    console.warn(`Redefinition of method chaining ${name}`);
    return;
  }
  if (typeof nodeElement !== "function") throw new Error(`Node element ${name} is not a function`);
  NodeElements.set(name, nodeElement);
}
var parseSwizzle = (props) => props.replace(/r|s/g, "x").replace(/g|t/g, "y").replace(/b|p/g, "z").replace(/a|q/g, "w");
var parseSwizzleAndSort = (props) => parseSwizzle(props).split("").sort().join("");
var shaderNodeHandler = {
  setup(NodeClosure, params) {
    const inputs = params.shift();
    return NodeClosure(nodeObjects(inputs), ...params);
  },
  get(node, prop, nodeObj) {
    if (typeof prop === "string" && node[prop] === void 0) {
      if (node.isStackNode !== true && prop === "assign") {
        return (...params) => {
          currentStack.assign(nodeObj, ...params);
          return nodeObj;
        };
      } else if (NodeElements.has(prop)) {
        const nodeElement = NodeElements.get(prop);
        return node.isStackNode ? (...params) => nodeObj.add(nodeElement(...params)) : (...params) => nodeElement(nodeObj, ...params);
      } else if (prop === "self") {
        return node;
      } else if (prop.endsWith("Assign") && NodeElements.has(prop.slice(0, prop.length - "Assign".length))) {
        const nodeElement = NodeElements.get(prop.slice(0, prop.length - "Assign".length));
        return node.isStackNode ? (...params) => nodeObj.assign(params[0], nodeElement(...params)) : (...params) => nodeObj.assign(nodeElement(nodeObj, ...params));
      } else if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true) {
        prop = parseSwizzle(prop);
        return nodeObject(new SplitNode(nodeObj, prop));
      } else if (/^set[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {
        prop = parseSwizzleAndSort(prop.slice(3).toLowerCase());
        return (value) => nodeObject(new SetNode(node, prop, value));
      } else if (/^flip[XYZWRGBASTPQ]{1,4}$/.test(prop) === true) {
        prop = parseSwizzleAndSort(prop.slice(4).toLowerCase());
        return () => nodeObject(new FlipNode(nodeObject(node), prop));
      } else if (prop === "width" || prop === "height" || prop === "depth") {
        if (prop === "width") prop = "x";
        else if (prop === "height") prop = "y";
        else if (prop === "depth") prop = "z";
        return nodeObject(new SplitNode(node, prop));
      } else if (/^\d+$/.test(prop) === true) {
        return nodeObject(new ArrayElementNode(nodeObj, new ConstNode(Number(prop), "uint")));
      }
    }
    return Reflect.get(node, prop, nodeObj);
  },
  set(node, prop, value, nodeObj) {
    if (typeof prop === "string" && node[prop] === void 0) {
      if (/^[xyzwrgbastpq]{1,4}$/.test(prop) === true || prop === "width" || prop === "height" || prop === "depth" || /^\d+$/.test(prop) === true) {
        nodeObj[prop].assign(value);
        return true;
      }
    }
    return Reflect.set(node, prop, value, nodeObj);
  }
};
var nodeObjectsCacheMap = /* @__PURE__ */ new WeakMap();
var nodeBuilderFunctionsCacheMap = /* @__PURE__ */ new WeakMap();
var ShaderNodeObject = function(obj, altType = null) {
  const type = getValueType(obj);
  if (type === "node") {
    let nodeObject2 = nodeObjectsCacheMap.get(obj);
    if (nodeObject2 === void 0) {
      nodeObject2 = new Proxy(obj, shaderNodeHandler);
      nodeObjectsCacheMap.set(obj, nodeObject2);
      nodeObjectsCacheMap.set(nodeObject2, nodeObject2);
    }
    return nodeObject2;
  } else if (altType === null && (type === "float" || type === "boolean") || type && type !== "shader" && type !== "string") {
    return nodeObject(getConstNode(obj, altType));
  } else if (type === "shader") {
    return Fn(obj);
  }
  return obj;
};
var ShaderNodeObjects = function(objects, altType = null) {
  for (const name in objects) {
    objects[name] = nodeObject(objects[name], altType);
  }
  return objects;
};
var ShaderNodeArray = function(array3, altType = null) {
  const len = array3.length;
  for (let i2 = 0; i2 < len; i2++) {
    array3[i2] = nodeObject(array3[i2], altType);
  }
  return array3;
};
var ShaderNodeProxy = function(NodeClass, scope = null, factor = null, settings = null) {
  const assignNode = (node) => nodeObject(settings !== null ? Object.assign(node, settings) : node);
  if (scope === null) {
    return (...params) => {
      return assignNode(new NodeClass(...nodeArray(params)));
    };
  } else if (factor !== null) {
    factor = nodeObject(factor);
    return (...params) => {
      return assignNode(new NodeClass(scope, ...nodeArray(params), factor));
    };
  } else {
    return (...params) => {
      return assignNode(new NodeClass(scope, ...nodeArray(params)));
    };
  }
};
var ShaderNodeImmutable = function(NodeClass, ...params) {
  return nodeObject(new NodeClass(...nodeArray(params)));
};
var ShaderCallNodeInternal = class extends Node2 {
  constructor(shaderNode, inputNodes) {
    super();
    this.shaderNode = shaderNode;
    this.inputNodes = inputNodes;
  }
  getNodeType(builder) {
    return this.shaderNode.nodeType || this.getOutputNode(builder).getNodeType(builder);
  }
  call(builder) {
    const { shaderNode, inputNodes } = this;
    const properties = builder.getNodeProperties(shaderNode);
    if (properties.onceOutput) return properties.onceOutput;
    let result = null;
    if (shaderNode.layout) {
      let functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get(builder.constructor);
      if (functionNodesCacheMap === void 0) {
        functionNodesCacheMap = /* @__PURE__ */ new WeakMap();
        nodeBuilderFunctionsCacheMap.set(builder.constructor, functionNodesCacheMap);
      }
      let functionNode = functionNodesCacheMap.get(shaderNode);
      if (functionNode === void 0) {
        functionNode = nodeObject(builder.buildFunctionNode(shaderNode));
        functionNodesCacheMap.set(shaderNode, functionNode);
      }
      if (builder.currentFunctionNode !== null) {
        builder.currentFunctionNode.includes.push(functionNode);
      }
      result = nodeObject(functionNode.call(inputNodes));
    } else {
      const jsFunc = shaderNode.jsFunc;
      const outputNode = inputNodes !== null ? jsFunc(inputNodes, builder) : jsFunc(builder);
      result = nodeObject(outputNode);
    }
    if (shaderNode.once) {
      properties.onceOutput = result;
    }
    return result;
  }
  getOutputNode(builder) {
    const properties = builder.getNodeProperties(this);
    if (properties.outputNode === null) {
      properties.outputNode = this.setupOutput(builder);
    }
    return properties.outputNode;
  }
  setup(builder) {
    return this.getOutputNode(builder);
  }
  setupOutput(builder) {
    builder.addStack();
    builder.stack.outputNode = this.call(builder);
    return builder.removeStack();
  }
  generate(builder, output2) {
    const outputNode = this.getOutputNode(builder);
    return outputNode.build(builder, output2);
  }
};
var ShaderNodeInternal = class extends Node2 {
  constructor(jsFunc, nodeType) {
    super(nodeType);
    this.jsFunc = jsFunc;
    this.layout = null;
    this.global = true;
    this.once = false;
  }
  setLayout(layout) {
    this.layout = layout;
    return this;
  }
  call(inputs = null) {
    nodeObjects(inputs);
    return nodeObject(new ShaderCallNodeInternal(this, inputs));
  }
  setup() {
    return this.call();
  }
};
var bools = [false, true];
var uints = [0, 1, 2, 3];
var ints = [-1, -2];
var floats = [0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / (Math.PI * 2), Math.PI / 2];
var boolsCacheMap = /* @__PURE__ */ new Map();
for (const bool2 of bools) boolsCacheMap.set(bool2, new ConstNode(bool2));
var uintsCacheMap = /* @__PURE__ */ new Map();
for (const uint2 of uints) uintsCacheMap.set(uint2, new ConstNode(uint2, "uint"));
var intsCacheMap = new Map([...uintsCacheMap].map((el) => new ConstNode(el.value, "int")));
for (const int2 of ints) intsCacheMap.set(int2, new ConstNode(int2, "int"));
var floatsCacheMap = new Map([...intsCacheMap].map((el) => new ConstNode(el.value)));
for (const float2 of floats) floatsCacheMap.set(float2, new ConstNode(float2));
for (const float2 of floats) floatsCacheMap.set(-float2, new ConstNode(-float2));
var cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };
var constNodesCacheMap = new Map([...boolsCacheMap, ...floatsCacheMap]);
var getConstNode = (value, type) => {
  if (constNodesCacheMap.has(value)) {
    return constNodesCacheMap.get(value);
  } else if (value.isNode === true) {
    return value;
  } else {
    return new ConstNode(value, type);
  }
};
var safeGetNodeType = (node) => {
  try {
    return node.getNodeType();
  } catch (_2) {
    return void 0;
  }
};
var ConvertType = function(type, cacheMap = null) {
  return (...params) => {
    if (params.length === 0 || !["bool", "float", "int", "uint"].includes(type) && params.every((param) => typeof param !== "object")) {
      params = [getValueFromType(type, ...params)];
    }
    if (params.length === 1 && cacheMap !== null && cacheMap.has(params[0])) {
      return nodeObject(cacheMap.get(params[0]));
    }
    if (params.length === 1) {
      const node = getConstNode(params[0], type);
      if (safeGetNodeType(node) === type) return nodeObject(node);
      return nodeObject(new ConvertNode(node, type));
    }
    const nodes = params.map((param) => getConstNode(param));
    return nodeObject(new JoinNode(nodes, type));
  };
};
var defined = (v3) => typeof v3 === "object" && v3 !== null ? v3.value : v3;
var getConstNodeType = (value) => value !== void 0 && value !== null ? value.nodeType || value.convertTo || (typeof value === "string" ? value : null) : null;
function ShaderNode(jsFunc, nodeType) {
  return new Proxy(new ShaderNodeInternal(jsFunc, nodeType), shaderNodeHandler);
}
var nodeObject = (val, altType = null) => (
  /* new */
  ShaderNodeObject(val, altType)
);
var nodeObjects = (val, altType = null) => new ShaderNodeObjects(val, altType);
var nodeArray = (val, altType = null) => new ShaderNodeArray(val, altType);
var nodeProxy = (...params) => new ShaderNodeProxy(...params);
var nodeImmutable = (...params) => new ShaderNodeImmutable(...params);
var Fn = (jsFunc, nodeType) => {
  const shaderNode = new ShaderNode(jsFunc, nodeType);
  const fn = (...params) => {
    let inputs;
    nodeObjects(params);
    if (params[0] && params[0].isNode) {
      inputs = [...params];
    } else {
      inputs = params[0];
    }
    return shaderNode.call(inputs);
  };
  fn.shaderNode = shaderNode;
  fn.setLayout = (layout) => {
    shaderNode.setLayout(layout);
    return fn;
  };
  fn.once = () => {
    shaderNode.once = true;
    return fn;
  };
  return fn;
};
addMethodChaining("toGlobal", (node) => {
  node.global = true;
  return node;
});
var setCurrentStack = (stack2) => {
  currentStack = stack2;
};
var getCurrentStack = () => currentStack;
var If = (...params) => currentStack.If(...params);
function append(node) {
  if (currentStack) currentStack.add(node);
  return node;
}
addMethodChaining("append", append);
var color2 = new ConvertType("color");
var float = new ConvertType("float", cacheMaps.float);
var int = new ConvertType("int", cacheMaps.ints);
var uint = new ConvertType("uint", cacheMaps.uint);
var bool = new ConvertType("bool", cacheMaps.bool);
var vec2 = new ConvertType("vec2");
var ivec2 = new ConvertType("ivec2");
var uvec2 = new ConvertType("uvec2");
var bvec2 = new ConvertType("bvec2");
var vec3 = new ConvertType("vec3");
var ivec3 = new ConvertType("ivec3");
var uvec3 = new ConvertType("uvec3");
var bvec3 = new ConvertType("bvec3");
var vec4 = new ConvertType("vec4");
var ivec4 = new ConvertType("ivec4");
var uvec4 = new ConvertType("uvec4");
var bvec4 = new ConvertType("bvec4");
var mat2 = new ConvertType("mat2");
var mat3 = new ConvertType("mat3");
var mat4 = new ConvertType("mat4");
addMethodChaining("toColor", color2);
addMethodChaining("toFloat", float);
addMethodChaining("toInt", int);
addMethodChaining("toUint", uint);
addMethodChaining("toBool", bool);
addMethodChaining("toVec2", vec2);
addMethodChaining("toIVec2", ivec2);
addMethodChaining("toUVec2", uvec2);
addMethodChaining("toBVec2", bvec2);
addMethodChaining("toVec3", vec3);
addMethodChaining("toIVec3", ivec3);
addMethodChaining("toUVec3", uvec3);
addMethodChaining("toBVec3", bvec3);
addMethodChaining("toVec4", vec4);
addMethodChaining("toIVec4", ivec4);
addMethodChaining("toUVec4", uvec4);
addMethodChaining("toBVec4", bvec4);
addMethodChaining("toMat2", mat2);
addMethodChaining("toMat3", mat3);
addMethodChaining("toMat4", mat4);
var element = nodeProxy(ArrayElementNode);
var convert = (node, types) => nodeObject(new ConvertNode(nodeObject(node), types));
addMethodChaining("element", element);
addMethodChaining("convert", convert);
var UniformGroupNode = class extends Node2 {
  constructor(name, shared = false) {
    super("string");
    this.name = name;
    this.version = 0;
    this.shared = shared;
    this.isUniformGroup = true;
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  serialize(data) {
    super.serialize(data);
    data.name = this.name;
    data.version = this.version;
    data.shared = this.shared;
  }
  deserialize(data) {
    super.deserialize(data);
    this.name = data.name;
    this.version = data.version;
    this.shared = data.shared;
  }
};
UniformGroupNode.type = registerNode("UniformGroup", UniformGroupNode);
var uniformGroup = (name) => new UniformGroupNode(name);
var sharedUniformGroup = (name) => new UniformGroupNode(name, true);
var frameGroup = sharedUniformGroup("frame");
var renderGroup = sharedUniformGroup("render");
var objectGroup = uniformGroup("object");
var UniformNode = class extends InputNode {
  constructor(value, nodeType = null) {
    super(value, nodeType);
    this.isUniformNode = true;
    this.name = "";
    this.groupNode = objectGroup;
  }
  label(name) {
    this.name = name;
    return this;
  }
  setGroup(group2) {
    this.groupNode = group2;
    return this;
  }
  getGroup() {
    return this.groupNode;
  }
  getUniformHash(builder) {
    return this.getHash(builder);
  }
  onUpdate(callback, updateType) {
    const self2 = this.getSelf();
    callback = callback.bind(self2);
    return super.onUpdate((frame) => {
      const value = callback(frame, self2);
      if (value !== void 0) {
        this.value = value;
      }
    }, updateType);
  }
  generate(builder, output2) {
    const type = this.getNodeType(builder);
    const hash2 = this.getUniformHash(builder);
    let sharedNode = builder.getNodeFromHash(hash2);
    if (sharedNode === void 0) {
      builder.setHashNode(this, hash2);
      sharedNode = this;
    }
    const sharedNodeType = sharedNode.getInputType(builder);
    const nodeUniform = builder.getUniformFromNode(sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label);
    const propertyName = builder.getPropertyName(nodeUniform);
    if (builder.context.label !== void 0) delete builder.context.label;
    return builder.format(propertyName, type, output2);
  }
};
UniformNode.type = registerNode("Uniform", UniformNode);
var uniform = (arg1, arg2) => {
  const nodeType = getConstNodeType(arg2 || arg1);
  const value = arg1 && arg1.isNode === true ? arg1.node && arg1.node.value || arg1.value : arg1;
  return nodeObject(new UniformNode(value, nodeType));
};
var PropertyNode = class extends Node2 {
  constructor(nodeType, name = null, varying2 = false) {
    super(nodeType);
    this.name = name;
    this.varying = varying2;
    this.isPropertyNode = true;
  }
  getHash(builder) {
    return this.name || super.getHash(builder);
  }
  isGlobal() {
    return true;
  }
  generate(builder) {
    let nodeVar;
    if (this.varying === true) {
      nodeVar = builder.getVaryingFromNode(this, this.name);
      nodeVar.needsInterpolation = true;
    } else {
      nodeVar = builder.getVarFromNode(this, this.name);
    }
    return builder.getPropertyName(nodeVar);
  }
};
PropertyNode.type = registerNode("Property", PropertyNode);
var property = (type, name) => nodeObject(new PropertyNode(type, name));
var varyingProperty = (type, name) => nodeObject(new PropertyNode(type, name, true));
var diffuseColor = nodeImmutable(PropertyNode, "vec4", "DiffuseColor");
var emissive = nodeImmutable(PropertyNode, "vec3", "EmissiveColor");
var roughness = nodeImmutable(PropertyNode, "float", "Roughness");
var metalness = nodeImmutable(PropertyNode, "float", "Metalness");
var clearcoat = nodeImmutable(PropertyNode, "float", "Clearcoat");
var clearcoatRoughness = nodeImmutable(PropertyNode, "float", "ClearcoatRoughness");
var sheen = nodeImmutable(PropertyNode, "vec3", "Sheen");
var sheenRoughness = nodeImmutable(PropertyNode, "float", "SheenRoughness");
var iridescence = nodeImmutable(PropertyNode, "float", "Iridescence");
var iridescenceIOR = nodeImmutable(PropertyNode, "float", "IridescenceIOR");
var iridescenceThickness = nodeImmutable(PropertyNode, "float", "IridescenceThickness");
var alphaT = nodeImmutable(PropertyNode, "float", "AlphaT");
var anisotropy = nodeImmutable(PropertyNode, "float", "Anisotropy");
var anisotropyT = nodeImmutable(PropertyNode, "vec3", "AnisotropyT");
var anisotropyB = nodeImmutable(PropertyNode, "vec3", "AnisotropyB");
var specularColor = nodeImmutable(PropertyNode, "color", "SpecularColor");
var specularF90 = nodeImmutable(PropertyNode, "float", "SpecularF90");
var shininess = nodeImmutable(PropertyNode, "float", "Shininess");
var output = nodeImmutable(PropertyNode, "vec4", "Output");
var dashSize = nodeImmutable(PropertyNode, "float", "dashSize");
var gapSize = nodeImmutable(PropertyNode, "float", "gapSize");
var pointWidth = nodeImmutable(PropertyNode, "float", "pointWidth");
var ior = nodeImmutable(PropertyNode, "float", "IOR");
var transmission = nodeImmutable(PropertyNode, "float", "Transmission");
var thickness = nodeImmutable(PropertyNode, "float", "Thickness");
var attenuationDistance = nodeImmutable(PropertyNode, "float", "AttenuationDistance");
var attenuationColor = nodeImmutable(PropertyNode, "color", "AttenuationColor");
var dispersion = nodeImmutable(PropertyNode, "float", "Dispersion");
var AssignNode = class extends TempNode {
  constructor(targetNode, sourceNode) {
    super();
    this.targetNode = targetNode;
    this.sourceNode = sourceNode;
  }
  hasDependencies() {
    return false;
  }
  getNodeType(builder, output2) {
    return output2 !== "void" ? this.targetNode.getNodeType(builder) : "void";
  }
  needsSplitAssign(builder) {
    const { targetNode } = this;
    if (builder.isAvailable("swizzleAssign") === false && targetNode.isSplitNode && targetNode.components.length > 1) {
      const targetLength = builder.getTypeLength(targetNode.node.getNodeType(builder));
      const assignDiferentVector = vectorComponents.join("").slice(0, targetLength) !== targetNode.components;
      return assignDiferentVector;
    }
    return false;
  }
  generate(builder, output2) {
    const { targetNode, sourceNode } = this;
    const needsSplitAssign = this.needsSplitAssign(builder);
    const targetType = targetNode.getNodeType(builder);
    const target = targetNode.context({ assign: true }).build(builder);
    const source = sourceNode.build(builder, targetType);
    const sourceType = sourceNode.getNodeType(builder);
    const nodeData = builder.getDataFromNode(this);
    let snippet;
    if (nodeData.initialized === true) {
      if (output2 !== "void") {
        snippet = target;
      }
    } else if (needsSplitAssign) {
      const sourceVar = builder.getVarFromNode(this, null, targetType);
      const sourceProperty = builder.getPropertyName(sourceVar);
      builder.addLineFlowCode(`${sourceProperty} = ${source}`);
      const targetRoot = targetNode.node.context({ assign: true }).build(builder);
      for (let i2 = 0; i2 < targetNode.components.length; i2++) {
        const component = targetNode.components[i2];
        builder.addLineFlowCode(`${targetRoot}.${component} = ${sourceProperty}[ ${i2} ]`);
      }
      if (output2 !== "void") {
        snippet = target;
      }
    } else {
      snippet = `${target} = ${source}`;
      if (output2 === "void" || sourceType === "void") {
        builder.addLineFlowCode(snippet);
        if (output2 !== "void") {
          snippet = target;
        }
      }
    }
    nodeData.initialized = true;
    return builder.format(snippet, targetType, output2);
  }
};
AssignNode.type = registerNode("Assign", AssignNode);
var assign = nodeProxy(AssignNode);
addMethodChaining("assign", assign);
var FunctionCallNode = class extends TempNode {
  constructor(functionNode = null, parameters = {}) {
    super();
    this.functionNode = functionNode;
    this.parameters = parameters;
  }
  setParameters(parameters) {
    this.parameters = parameters;
    return this;
  }
  getParameters() {
    return this.parameters;
  }
  getNodeType(builder) {
    return this.functionNode.getNodeType(builder);
  }
  generate(builder) {
    const params = [];
    const functionNode = this.functionNode;
    const inputs = functionNode.getInputs(builder);
    const parameters = this.parameters;
    if (Array.isArray(parameters)) {
      for (let i2 = 0; i2 < parameters.length; i2++) {
        const inputNode = inputs[i2];
        const node = parameters[i2];
        params.push(node.build(builder, inputNode.type));
      }
    } else {
      for (const inputNode of inputs) {
        const node = parameters[inputNode.name];
        if (node !== void 0) {
          params.push(node.build(builder, inputNode.type));
        } else {
          throw new Error(`FunctionCallNode: Input '${inputNode.name}' not found in FunctionNode.`);
        }
      }
    }
    const functionName = functionNode.build(builder, "property");
    return `${functionName}( ${params.join(", ")} )`;
  }
};
FunctionCallNode.type = registerNode("FunctionCall", FunctionCallNode);
var call = (func, ...params) => {
  params = params.length > 1 || params[0] && params[0].isNode === true ? nodeArray(params) : nodeObjects(params[0]);
  return nodeObject(new FunctionCallNode(nodeObject(func), params));
};
addMethodChaining("call", call);
var OperatorNode = class _OperatorNode extends TempNode {
  constructor(op, aNode, bNode, ...params) {
    super();
    if (params.length > 0) {
      let finalOp = new _OperatorNode(op, aNode, bNode);
      for (let i2 = 0; i2 < params.length - 1; i2++) {
        finalOp = new _OperatorNode(op, finalOp, params[i2]);
      }
      aNode = finalOp;
      bNode = params[params.length - 1];
    }
    this.op = op;
    this.aNode = aNode;
    this.bNode = bNode;
  }
  getNodeType(builder, output2) {
    const op = this.op;
    const aNode = this.aNode;
    const bNode = this.bNode;
    const typeA = aNode.getNodeType(builder);
    const typeB = typeof bNode !== "undefined" ? bNode.getNodeType(builder) : null;
    if (typeA === "void" || typeB === "void") {
      return "void";
    } else if (op === "%") {
      return typeA;
    } else if (op === "~" || op === "&" || op === "|" || op === "^" || op === ">>" || op === "<<") {
      return builder.getIntegerType(typeA);
    } else if (op === "!" || op === "==" || op === "&&" || op === "||" || op === "^^") {
      return "bool";
    } else if (op === "<" || op === ">" || op === "<=" || op === ">=") {
      const typeLength = output2 ? builder.getTypeLength(output2) : Math.max(builder.getTypeLength(typeA), builder.getTypeLength(typeB));
      return typeLength > 1 ? `bvec${typeLength}` : "bool";
    } else {
      if (typeA === "float" && builder.isMatrix(typeB)) {
        return typeB;
      } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {
        return builder.getVectorFromMatrix(typeA);
      } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {
        return builder.getVectorFromMatrix(typeB);
      } else if (builder.getTypeLength(typeB) > builder.getTypeLength(typeA)) {
        return typeB;
      }
      return typeA;
    }
  }
  generate(builder, output2) {
    const op = this.op;
    const aNode = this.aNode;
    const bNode = this.bNode;
    const type = this.getNodeType(builder, output2);
    let typeA = null;
    let typeB = null;
    if (type !== "void") {
      typeA = aNode.getNodeType(builder);
      typeB = typeof bNode !== "undefined" ? bNode.getNodeType(builder) : null;
      if (op === "<" || op === ">" || op === "<=" || op === ">=" || op === "==") {
        if (builder.isVector(typeA)) {
          typeB = typeA;
        } else if (typeA !== typeB) {
          typeA = typeB = "float";
        }
      } else if (op === ">>" || op === "<<") {
        typeA = type;
        typeB = builder.changeComponentType(typeB, "uint");
      } else if (builder.isMatrix(typeA) && builder.isVector(typeB)) {
        typeB = builder.getVectorFromMatrix(typeA);
      } else if (builder.isVector(typeA) && builder.isMatrix(typeB)) {
        typeA = builder.getVectorFromMatrix(typeB);
      } else {
        typeA = typeB = type;
      }
    } else {
      typeA = typeB = type;
    }
    const a2 = aNode.build(builder, typeA);
    const b = typeof bNode !== "undefined" ? bNode.build(builder, typeB) : null;
    const outputLength = builder.getTypeLength(output2);
    const fnOpSnippet = builder.getFunctionOperator(op);
    if (output2 !== "void") {
      if (op === "<" && outputLength > 1) {
        if (builder.useComparisonMethod) {
          return builder.format(`${builder.getMethod("lessThan", output2)}( ${a2}, ${b} )`, type, output2);
        } else {
          return builder.format(`( ${a2} < ${b} )`, type, output2);
        }
      } else if (op === "<=" && outputLength > 1) {
        if (builder.useComparisonMethod) {
          return builder.format(`${builder.getMethod("lessThanEqual", output2)}( ${a2}, ${b} )`, type, output2);
        } else {
          return builder.format(`( ${a2} <= ${b} )`, type, output2);
        }
      } else if (op === ">" && outputLength > 1) {
        if (builder.useComparisonMethod) {
          return builder.format(`${builder.getMethod("greaterThan", output2)}( ${a2}, ${b} )`, type, output2);
        } else {
          return builder.format(`( ${a2} > ${b} )`, type, output2);
        }
      } else if (op === ">=" && outputLength > 1) {
        if (builder.useComparisonMethod) {
          return builder.format(`${builder.getMethod("greaterThanEqual", output2)}( ${a2}, ${b} )`, type, output2);
        } else {
          return builder.format(`( ${a2} >= ${b} )`, type, output2);
        }
      } else if (op === "!" || op === "~") {
        return builder.format(`(${op}${a2})`, typeA, output2);
      } else if (fnOpSnippet) {
        return builder.format(`${fnOpSnippet}( ${a2}, ${b} )`, type, output2);
      } else {
        return builder.format(`( ${a2} ${op} ${b} )`, type, output2);
      }
    } else if (typeA !== "void") {
      if (fnOpSnippet) {
        return builder.format(`${fnOpSnippet}( ${a2}, ${b} )`, type, output2);
      } else {
        return builder.format(`${a2} ${op} ${b}`, type, output2);
      }
    }
  }
  serialize(data) {
    super.serialize(data);
    data.op = this.op;
  }
  deserialize(data) {
    super.deserialize(data);
    this.op = data.op;
  }
};
OperatorNode.type = registerNode("Operator", OperatorNode);
var add3 = nodeProxy(OperatorNode, "+");
var sub = nodeProxy(OperatorNode, "-");
var mul = nodeProxy(OperatorNode, "*");
var div = nodeProxy(OperatorNode, "/");
var modInt = nodeProxy(OperatorNode, "%");
var equal = nodeProxy(OperatorNode, "==");
var notEqual = nodeProxy(OperatorNode, "!=");
var lessThan = nodeProxy(OperatorNode, "<");
var greaterThan = nodeProxy(OperatorNode, ">");
var lessThanEqual = nodeProxy(OperatorNode, "<=");
var greaterThanEqual = nodeProxy(OperatorNode, ">=");
var and = nodeProxy(OperatorNode, "&&");
var or = nodeProxy(OperatorNode, "||");
var not = nodeProxy(OperatorNode, "!");
var xor = nodeProxy(OperatorNode, "^^");
var bitAnd = nodeProxy(OperatorNode, "&");
var bitNot = nodeProxy(OperatorNode, "~");
var bitOr = nodeProxy(OperatorNode, "|");
var bitXor = nodeProxy(OperatorNode, "^");
var shiftLeft = nodeProxy(OperatorNode, "<<");
var shiftRight = nodeProxy(OperatorNode, ">>");
addMethodChaining("add", add3);
addMethodChaining("sub", sub);
addMethodChaining("mul", mul);
addMethodChaining("div", div);
addMethodChaining("modInt", modInt);
addMethodChaining("equal", equal);
addMethodChaining("notEqual", notEqual);
addMethodChaining("lessThan", lessThan);
addMethodChaining("greaterThan", greaterThan);
addMethodChaining("lessThanEqual", lessThanEqual);
addMethodChaining("greaterThanEqual", greaterThanEqual);
addMethodChaining("and", and);
addMethodChaining("or", or);
addMethodChaining("not", not);
addMethodChaining("xor", xor);
addMethodChaining("bitAnd", bitAnd);
addMethodChaining("bitNot", bitNot);
addMethodChaining("bitOr", bitOr);
addMethodChaining("bitXor", bitXor);
addMethodChaining("shiftLeft", shiftLeft);
addMethodChaining("shiftRight", shiftRight);
var remainder = (...params) => {
  console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt().");
  return modInt(...params);
};
addMethodChaining("remainder", remainder);
var MathNode = class _MathNode extends TempNode {
  constructor(method, aNode, bNode = null, cNode = null) {
    super();
    this.method = method;
    this.aNode = aNode;
    this.bNode = bNode;
    this.cNode = cNode;
  }
  getInputType(builder) {
    const aType = this.aNode.getNodeType(builder);
    const bType = this.bNode ? this.bNode.getNodeType(builder) : null;
    const cType = this.cNode ? this.cNode.getNodeType(builder) : null;
    const aLen = builder.isMatrix(aType) ? 0 : builder.getTypeLength(aType);
    const bLen = builder.isMatrix(bType) ? 0 : builder.getTypeLength(bType);
    const cLen = builder.isMatrix(cType) ? 0 : builder.getTypeLength(cType);
    if (aLen > bLen && aLen > cLen) {
      return aType;
    } else if (bLen > cLen) {
      return bType;
    } else if (cLen > aLen) {
      return cType;
    }
    return aType;
  }
  getNodeType(builder) {
    const method = this.method;
    if (method === _MathNode.LENGTH || method === _MathNode.DISTANCE || method === _MathNode.DOT) {
      return "float";
    } else if (method === _MathNode.CROSS) {
      return "vec3";
    } else if (method === _MathNode.ALL) {
      return "bool";
    } else if (method === _MathNode.EQUALS) {
      return builder.changeComponentType(this.aNode.getNodeType(builder), "bool");
    } else if (method === _MathNode.MOD) {
      return this.aNode.getNodeType(builder);
    } else {
      return this.getInputType(builder);
    }
  }
  generate(builder, output2) {
    const method = this.method;
    const type = this.getNodeType(builder);
    const inputType = this.getInputType(builder);
    const a2 = this.aNode;
    const b = this.bNode;
    const c4 = this.cNode;
    const isWebGL = builder.renderer.isWebGLRenderer === true;
    if (method === _MathNode.TRANSFORM_DIRECTION) {
      let tA = a2;
      let tB = b;
      if (builder.isMatrix(tA.getNodeType(builder))) {
        tB = vec4(vec3(tB), 0);
      } else {
        tA = vec4(vec3(tA), 0);
      }
      const mulNode = mul(tA, tB).xyz;
      return normalize3(mulNode).build(builder, output2);
    } else if (method === _MathNode.NEGATE) {
      return builder.format("( - " + a2.build(builder, inputType) + " )", type, output2);
    } else if (method === _MathNode.ONE_MINUS) {
      return sub(1, a2).build(builder, output2);
    } else if (method === _MathNode.RECIPROCAL) {
      return div(1, a2).build(builder, output2);
    } else if (method === _MathNode.DIFFERENCE) {
      return abs2(sub(a2, b)).build(builder, output2);
    } else {
      const params = [];
      if (method === _MathNode.CROSS || method === _MathNode.MOD) {
        params.push(
          a2.build(builder, type),
          b.build(builder, type)
        );
      } else if (isWebGL && method === _MathNode.STEP) {
        params.push(
          a2.build(builder, builder.getTypeLength(a2.getNodeType(builder)) === 1 ? "float" : inputType),
          b.build(builder, inputType)
        );
      } else if (isWebGL && (method === _MathNode.MIN || method === _MathNode.MAX) || method === _MathNode.MOD) {
        params.push(
          a2.build(builder, inputType),
          b.build(builder, builder.getTypeLength(b.getNodeType(builder)) === 1 ? "float" : inputType)
        );
      } else if (method === _MathNode.REFRACT) {
        params.push(
          a2.build(builder, inputType),
          b.build(builder, inputType),
          c4.build(builder, "float")
        );
      } else if (method === _MathNode.MIX) {
        params.push(
          a2.build(builder, inputType),
          b.build(builder, inputType),
          c4.build(builder, builder.getTypeLength(c4.getNodeType(builder)) === 1 ? "float" : inputType)
        );
      } else {
        params.push(a2.build(builder, inputType));
        if (b !== null) params.push(b.build(builder, inputType));
        if (c4 !== null) params.push(c4.build(builder, inputType));
      }
      return builder.format(`${builder.getMethod(method, type)}( ${params.join(", ")} )`, type, output2);
    }
  }
  serialize(data) {
    super.serialize(data);
    data.method = this.method;
  }
  deserialize(data) {
    super.deserialize(data);
    this.method = data.method;
  }
};
MathNode.ALL = "all";
MathNode.ANY = "any";
MathNode.EQUALS = "equals";
MathNode.RADIANS = "radians";
MathNode.DEGREES = "degrees";
MathNode.EXP = "exp";
MathNode.EXP2 = "exp2";
MathNode.LOG = "log";
MathNode.LOG2 = "log2";
MathNode.SQRT = "sqrt";
MathNode.INVERSE_SQRT = "inversesqrt";
MathNode.FLOOR = "floor";
MathNode.CEIL = "ceil";
MathNode.NORMALIZE = "normalize";
MathNode.FRACT = "fract";
MathNode.SIN = "sin";
MathNode.COS = "cos";
MathNode.TAN = "tan";
MathNode.ASIN = "asin";
MathNode.ACOS = "acos";
MathNode.ATAN = "atan";
MathNode.ABS = "abs";
MathNode.SIGN = "sign";
MathNode.LENGTH = "length";
MathNode.NEGATE = "negate";
MathNode.ONE_MINUS = "oneMinus";
MathNode.DFDX = "dFdx";
MathNode.DFDY = "dFdy";
MathNode.ROUND = "round";
MathNode.RECIPROCAL = "reciprocal";
MathNode.TRUNC = "trunc";
MathNode.FWIDTH = "fwidth";
MathNode.BITCAST = "bitcast";
MathNode.TRANSPOSE = "transpose";
MathNode.ATAN2 = "atan2";
MathNode.MIN = "min";
MathNode.MAX = "max";
MathNode.MOD = "mod";
MathNode.STEP = "step";
MathNode.REFLECT = "reflect";
MathNode.DISTANCE = "distance";
MathNode.DIFFERENCE = "difference";
MathNode.DOT = "dot";
MathNode.CROSS = "cross";
MathNode.POW = "pow";
MathNode.TRANSFORM_DIRECTION = "transformDirection";
MathNode.MIX = "mix";
MathNode.CLAMP = "clamp";
MathNode.REFRACT = "refract";
MathNode.SMOOTHSTEP = "smoothstep";
MathNode.FACEFORWARD = "faceforward";
MathNode.type = registerNode("Math", MathNode);
var EPSILON2 = float(1e-6);
var INFINITY = float(1e6);
var PI = float(Math.PI);
var PI2 = float(Math.PI * 2);
var all = nodeProxy(MathNode, MathNode.ALL);
var any = nodeProxy(MathNode, MathNode.ANY);
var equals3 = nodeProxy(MathNode, MathNode.EQUALS);
var radians4 = nodeProxy(MathNode, MathNode.RADIANS);
var degrees5 = nodeProxy(MathNode, MathNode.DEGREES);
var exp2 = nodeProxy(MathNode, MathNode.EXP);
var exp22 = nodeProxy(MathNode, MathNode.EXP2);
var log3 = nodeProxy(MathNode, MathNode.LOG);
var log22 = nodeProxy(MathNode, MathNode.LOG2);
var sqrt4 = nodeProxy(MathNode, MathNode.SQRT);
var inverseSqrt = nodeProxy(MathNode, MathNode.INVERSE_SQRT);
var floor = nodeProxy(MathNode, MathNode.FLOOR);
var ceil2 = nodeProxy(MathNode, MathNode.CEIL);
var normalize3 = nodeProxy(MathNode, MathNode.NORMALIZE);
var fract = nodeProxy(MathNode, MathNode.FRACT);
var sin3 = nodeProxy(MathNode, MathNode.SIN);
var cos3 = nodeProxy(MathNode, MathNode.COS);
var tan2 = nodeProxy(MathNode, MathNode.TAN);
var asin3 = nodeProxy(MathNode, MathNode.ASIN);
var acos2 = nodeProxy(MathNode, MathNode.ACOS);
var atan3 = nodeProxy(MathNode, MathNode.ATAN);
var abs2 = nodeProxy(MathNode, MathNode.ABS);
var sign5 = nodeProxy(MathNode, MathNode.SIGN);
var length = nodeProxy(MathNode, MathNode.LENGTH);
var negate2 = nodeProxy(MathNode, MathNode.NEGATE);
var oneMinus = nodeProxy(MathNode, MathNode.ONE_MINUS);
var dFdx = nodeProxy(MathNode, MathNode.DFDX);
var dFdy = nodeProxy(MathNode, MathNode.DFDY);
var round = nodeProxy(MathNode, MathNode.ROUND);
var reciprocal = nodeProxy(MathNode, MathNode.RECIPROCAL);
var trunc = nodeProxy(MathNode, MathNode.TRUNC);
var fwidth = nodeProxy(MathNode, MathNode.FWIDTH);
var bitcast = nodeProxy(MathNode, MathNode.BITCAST);
var transpose2 = nodeProxy(MathNode, MathNode.TRANSPOSE);
var atan23 = nodeProxy(MathNode, MathNode.ATAN2);
var min$1 = nodeProxy(MathNode, MathNode.MIN);
var max$1 = nodeProxy(MathNode, MathNode.MAX);
var mod = nodeProxy(MathNode, MathNode.MOD);
var step = nodeProxy(MathNode, MathNode.STEP);
var reflect = nodeProxy(MathNode, MathNode.REFLECT);
var distance2 = nodeProxy(MathNode, MathNode.DISTANCE);
var difference2 = nodeProxy(MathNode, MathNode.DIFFERENCE);
var dot = nodeProxy(MathNode, MathNode.DOT);
var cross2 = nodeProxy(MathNode, MathNode.CROSS);
var pow4 = nodeProxy(MathNode, MathNode.POW);
var pow22 = nodeProxy(MathNode, MathNode.POW, 2);
var pow32 = nodeProxy(MathNode, MathNode.POW, 3);
var pow42 = nodeProxy(MathNode, MathNode.POW, 4);
var transformDirection = nodeProxy(MathNode, MathNode.TRANSFORM_DIRECTION);
var cbrt = (a2) => mul(sign5(a2), pow4(abs2(a2), 1 / 3));
var lengthSq = (a2) => dot(a2, a2);
var mix = nodeProxy(MathNode, MathNode.MIX);
var clamp2 = (value, low = 0, high = 1) => nodeObject(new MathNode(MathNode.CLAMP, nodeObject(value), nodeObject(low), nodeObject(high)));
var saturate2 = (value) => clamp2(value);
var refract = nodeProxy(MathNode, MathNode.REFRACT);
var smoothstep2 = nodeProxy(MathNode, MathNode.SMOOTHSTEP);
var faceForward = nodeProxy(MathNode, MathNode.FACEFORWARD);
var rand = Fn(([uv2]) => {
  const a2 = 12.9898, b = 78.233, c4 = 43758.5453;
  const dt = dot(uv2.xy, vec2(a2, b)), sn = mod(dt, PI);
  return fract(sin3(sn).mul(c4));
});
var mixElement = (t4, e1, e22) => mix(e1, e22, t4);
var smoothstepElement = (x2, low, high) => smoothstep2(low, high, x2);
addMethodChaining("all", all);
addMethodChaining("any", any);
addMethodChaining("equals", equals3);
addMethodChaining("radians", radians4);
addMethodChaining("degrees", degrees5);
addMethodChaining("exp", exp2);
addMethodChaining("exp2", exp22);
addMethodChaining("log", log3);
addMethodChaining("log2", log22);
addMethodChaining("sqrt", sqrt4);
addMethodChaining("inverseSqrt", inverseSqrt);
addMethodChaining("floor", floor);
addMethodChaining("ceil", ceil2);
addMethodChaining("normalize", normalize3);
addMethodChaining("fract", fract);
addMethodChaining("sin", sin3);
addMethodChaining("cos", cos3);
addMethodChaining("tan", tan2);
addMethodChaining("asin", asin3);
addMethodChaining("acos", acos2);
addMethodChaining("atan", atan3);
addMethodChaining("abs", abs2);
addMethodChaining("sign", sign5);
addMethodChaining("length", length);
addMethodChaining("lengthSq", lengthSq);
addMethodChaining("negate", negate2);
addMethodChaining("oneMinus", oneMinus);
addMethodChaining("dFdx", dFdx);
addMethodChaining("dFdy", dFdy);
addMethodChaining("round", round);
addMethodChaining("reciprocal", reciprocal);
addMethodChaining("trunc", trunc);
addMethodChaining("fwidth", fwidth);
addMethodChaining("atan2", atan23);
addMethodChaining("min", min$1);
addMethodChaining("max", max$1);
addMethodChaining("mod", mod);
addMethodChaining("step", step);
addMethodChaining("reflect", reflect);
addMethodChaining("distance", distance2);
addMethodChaining("dot", dot);
addMethodChaining("cross", cross2);
addMethodChaining("pow", pow4);
addMethodChaining("pow2", pow22);
addMethodChaining("pow3", pow32);
addMethodChaining("pow4", pow42);
addMethodChaining("transformDirection", transformDirection);
addMethodChaining("mix", mixElement);
addMethodChaining("clamp", clamp2);
addMethodChaining("refract", refract);
addMethodChaining("smoothstep", smoothstepElement);
addMethodChaining("faceForward", faceForward);
addMethodChaining("difference", difference2);
addMethodChaining("saturate", saturate2);
addMethodChaining("cbrt", cbrt);
addMethodChaining("transpose", transpose2);
addMethodChaining("rand", rand);
var ConditionalNode = class extends Node2 {
  constructor(condNode, ifNode, elseNode = null) {
    super();
    this.condNode = condNode;
    this.ifNode = ifNode;
    this.elseNode = elseNode;
  }
  getNodeType(builder) {
    const ifType = this.ifNode.getNodeType(builder);
    if (this.elseNode !== null) {
      const elseType = this.elseNode.getNodeType(builder);
      if (builder.getTypeLength(elseType) > builder.getTypeLength(ifType)) {
        return elseType;
      }
    }
    return ifType;
  }
  setup(builder) {
    const properties = builder.getNodeProperties(this);
    properties.condNode = this.condNode.cache();
    properties.ifNode = this.ifNode.cache();
    properties.elseNode = this.elseNode ? this.elseNode.cache() : null;
  }
  generate(builder, output2) {
    const type = this.getNodeType(builder);
    const nodeData = builder.getDataFromNode(this);
    if (nodeData.nodeProperty !== void 0) {
      return nodeData.nodeProperty;
    }
    const { condNode, ifNode, elseNode } = builder.getNodeProperties(this);
    const needsOutput = output2 !== "void";
    const nodeProperty = needsOutput ? property(type).build(builder) : "";
    nodeData.nodeProperty = nodeProperty;
    const nodeSnippet = condNode.build(builder, "bool");
    builder.addFlowCode(`
${builder.tab}if ( ${nodeSnippet} ) {

`).addFlowTab();
    let ifSnippet = ifNode.build(builder, type);
    if (ifSnippet) {
      if (needsOutput) {
        ifSnippet = nodeProperty + " = " + ifSnippet + ";";
      } else {
        ifSnippet = "return " + ifSnippet + ";";
      }
    }
    builder.removeFlowTab().addFlowCode(builder.tab + "	" + ifSnippet + "\n\n" + builder.tab + "}");
    if (elseNode !== null) {
      builder.addFlowCode(" else {\n\n").addFlowTab();
      let elseSnippet = elseNode.build(builder, type);
      if (elseSnippet) {
        if (needsOutput) {
          elseSnippet = nodeProperty + " = " + elseSnippet + ";";
        } else {
          elseSnippet = "return " + elseSnippet + ";";
        }
      }
      builder.removeFlowTab().addFlowCode(builder.tab + "	" + elseSnippet + "\n\n" + builder.tab + "}\n\n");
    } else {
      builder.addFlowCode("\n\n");
    }
    return builder.format(nodeProperty, type, output2);
  }
};
ConditionalNode.type = registerNode("Conditional", ConditionalNode);
var select = nodeProxy(ConditionalNode);
addMethodChaining("select", select);
var cond = (...params) => {
  console.warn("TSL.ConditionalNode: cond() has been renamed to select().");
  return select(...params);
};
addMethodChaining("cond", cond);
var ContextNode = class extends Node2 {
  constructor(node, value = {}) {
    super();
    this.isContextNode = true;
    this.node = node;
    this.value = value;
  }
  getScope() {
    return this.node.getScope();
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  analyze(builder) {
    this.node.build(builder);
  }
  setup(builder) {
    const previousContext = builder.getContext();
    builder.setContext({ ...builder.context, ...this.value });
    const node = this.node.build(builder);
    builder.setContext(previousContext);
    return node;
  }
  generate(builder, output2) {
    const previousContext = builder.getContext();
    builder.setContext({ ...builder.context, ...this.value });
    const snippet = this.node.build(builder, output2);
    builder.setContext(previousContext);
    return snippet;
  }
};
ContextNode.type = registerNode("Context", ContextNode);
var context = nodeProxy(ContextNode);
var label = (node, name) => context(node, { label: name });
addMethodChaining("context", context);
addMethodChaining("label", label);
var VarNode = class extends Node2 {
  constructor(node, name = null) {
    super();
    this.node = node;
    this.name = name;
    this.global = true;
    this.isVarNode = true;
  }
  getHash(builder) {
    return this.name || super.getHash(builder);
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  generate(builder) {
    const { node, name } = this;
    const nodeVar = builder.getVarFromNode(this, name, builder.getVectorType(this.getNodeType(builder)));
    const propertyName = builder.getPropertyName(nodeVar);
    const snippet = node.build(builder, nodeVar.type);
    builder.addLineFlowCode(`${propertyName} = ${snippet}`);
    return propertyName;
  }
};
VarNode.type = registerNode("Var", VarNode);
var temp = nodeProxy(VarNode);
addMethodChaining("temp", temp);
addMethodChaining("toVar", (...params) => temp(...params).append());
var VaryingNode = class extends Node2 {
  constructor(node, name = null) {
    super();
    this.node = node;
    this.name = name;
    this.isVaryingNode = true;
  }
  isGlobal() {
    return true;
  }
  getHash(builder) {
    return this.name || super.getHash(builder);
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  setupVarying(builder) {
    const properties = builder.getNodeProperties(this);
    let varying2 = properties.varying;
    if (varying2 === void 0) {
      const name = this.name;
      const type = this.getNodeType(builder);
      properties.varying = varying2 = builder.getVaryingFromNode(this, name, type);
      properties.node = this.node;
    }
    varying2.needsInterpolation || (varying2.needsInterpolation = builder.shaderStage === "fragment");
    return varying2;
  }
  setup(builder) {
    this.setupVarying(builder);
  }
  analyze(builder) {
    this.setupVarying(builder);
    return this.node.analyze(builder);
  }
  generate(builder) {
    const properties = builder.getNodeProperties(this);
    const varying2 = this.setupVarying(builder);
    if (properties.propertyName === void 0) {
      const type = this.getNodeType(builder);
      const propertyName = builder.getPropertyName(varying2, NodeShaderStage.VERTEX);
      builder.flowNodeFromShaderStage(NodeShaderStage.VERTEX, this.node, type, propertyName);
      properties.propertyName = propertyName;
    }
    return builder.getPropertyName(varying2);
  }
};
VaryingNode.type = registerNode("Varying", VaryingNode);
var varying = nodeProxy(VaryingNode);
addMethodChaining("varying", varying);
var getColorSpaceName = (colorSpace) => {
  let method = null;
  if (colorSpace === LinearSRGBColorSpace2) {
    method = "Linear";
  } else if (colorSpace === SRGBColorSpace2) {
    method = "sRGB";
  }
  return method;
};
var getColorSpaceMethod = (source, target) => {
  return getColorSpaceName(source) + "To" + getColorSpaceName(target);
};
var ColorSpaceNode = class extends TempNode {
  constructor(colorNode, target = null, source = null) {
    super("vec4");
    this.colorNode = colorNode;
    this.target = target;
    this.source = source;
  }
  setup(builder) {
    const { renderer: renderer3, context: context2 } = builder;
    const source = this.source || context2.outputColorSpace || renderer3.outputColorSpace;
    const target = this.target || context2.outputColorSpace || renderer3.outputColorSpace;
    const colorNode = this.colorNode;
    if (source === target) return colorNode;
    const colorSpace = getColorSpaceMethod(source, target);
    let outputNode = null;
    const colorSpaceFn = renderer3.nodes.library.getColorSpaceFunction(colorSpace);
    if (colorSpaceFn !== null) {
      outputNode = vec4(colorSpaceFn(colorNode.rgb), colorNode.a);
    } else {
      console.error("ColorSpaceNode: Unsupported Color Space configuration.", colorSpace);
      outputNode = colorNode;
    }
    return outputNode;
  }
};
ColorSpaceNode.type = registerNode("ColorSpace", ColorSpaceNode);
var toOutputColorSpace = (node, colorSpace = null) => nodeObject(new ColorSpaceNode(nodeObject(node), colorSpace, LinearSRGBColorSpace2));
var toWorkingColorSpace = (node, colorSpace = null) => nodeObject(new ColorSpaceNode(nodeObject(node), LinearSRGBColorSpace2, colorSpace));
addMethodChaining("toOutputColorSpace", toOutputColorSpace);
addMethodChaining("toWorkingColorSpace", toWorkingColorSpace);
var ReferenceElementNode$1 = class ReferenceElementNode extends ArrayElementNode {
  constructor(referenceNode, indexNode) {
    super(referenceNode, indexNode);
    this.referenceNode = referenceNode;
    this.isReferenceElementNode = true;
  }
  getNodeType() {
    return this.referenceNode.uniformType;
  }
  generate(builder) {
    const snippet = super.generate(builder);
    const arrayType = this.referenceNode.getNodeType();
    const elementType = this.getNodeType();
    return builder.format(snippet, arrayType, elementType);
  }
};
var ReferenceBaseNode = class extends Node2 {
  constructor(property2, uniformType, object2 = null, count2 = null) {
    super();
    this.property = property2;
    this.uniformType = uniformType;
    this.object = object2;
    this.count = count2;
    this.properties = property2.split(".");
    this.reference = object2;
    this.node = null;
    this.updateType = NodeUpdateType.OBJECT;
  }
  element(indexNode) {
    return nodeObject(new ReferenceElementNode$1(this, nodeObject(indexNode)));
  }
  setNodeType(uniformType) {
    this.node = uniform(null, uniformType).getSelf();
  }
  getNodeType(builder) {
    if (this.node === null) {
      this.updateValue();
    }
    return this.node.getNodeType(builder);
  }
  getValueFromReference(object2 = this.reference) {
    const { properties } = this;
    let value = object2[properties[0]];
    for (let i2 = 1; i2 < properties.length; i2++) {
      value = value[properties[i2]];
    }
    return value;
  }
  updateReference(state) {
    this.reference = this.object !== null ? this.object : state.object;
    return this.reference;
  }
  setup() {
    this.updateValue();
    return this.node;
  }
  update() {
    this.updateValue();
  }
  updateValue() {
    if (this.node === null) this.setNodeType(this.uniformType);
    const value = this.getValueFromReference();
    if (Array.isArray(value)) {
      this.node.array = value;
    } else {
      this.node.value = value;
    }
  }
};
ReferenceBaseNode.type = registerNode("ReferenceBase", ReferenceBaseNode);
var RendererReferenceNode = class extends ReferenceBaseNode {
  constructor(property2, inputType, renderer3 = null) {
    super(property2, inputType, renderer3);
    this.renderer = renderer3;
  }
  updateReference(state) {
    this.reference = this.renderer !== null ? this.renderer : state.renderer;
    return this.reference;
  }
};
RendererReferenceNode.type = registerNode("RendererReference", RendererReferenceNode);
var rendererReference = (name, type, renderer3) => nodeObject(new RendererReferenceNode(name, type, renderer3));
var ToneMappingNode = class extends TempNode {
  constructor(toneMapping2, exposureNode = toneMappingExposure, colorNode = null) {
    super("vec3");
    this.toneMapping = toneMapping2;
    this.exposureNode = exposureNode;
    this.colorNode = colorNode;
  }
  getCacheKey() {
    let cacheKey = super.getCacheKey();
    cacheKey = "{toneMapping:" + this.toneMapping + ",nodes:" + cacheKey + "}";
    return cacheKey;
  }
  setup(builder) {
    const colorNode = this.colorNode || builder.context.color;
    const toneMapping2 = this.toneMapping;
    if (toneMapping2 === NoToneMapping2) return colorNode;
    let outputNode = null;
    const toneMappingFn = builder.renderer.nodes.library.getToneMappingFunction(toneMapping2);
    if (toneMappingFn !== null) {
      outputNode = vec4(toneMappingFn(colorNode.rgb, this.exposureNode), colorNode.a);
    } else {
      console.error("ToneMappingNode: Unsupported Tone Mapping configuration.", toneMapping2);
      outputNode = colorNode;
    }
    return outputNode;
  }
};
ToneMappingNode.type = registerNode("ToneMapping", ToneMappingNode);
var toneMapping = (mapping, exposure, color3) => nodeObject(new ToneMappingNode(mapping, nodeObject(exposure), nodeObject(color3)));
var toneMappingExposure = rendererReference("toneMappingExposure", "float");
addMethodChaining("toneMapping", (color3, mapping, exposure) => toneMapping(mapping, exposure, color3));
var BufferAttributeNode = class extends InputNode {
  constructor(value, bufferType = null, bufferStride = 0, bufferOffset = 0) {
    super(value, bufferType);
    this.isBufferNode = true;
    this.bufferType = bufferType;
    this.bufferStride = bufferStride;
    this.bufferOffset = bufferOffset;
    this.usage = StaticDrawUsage2;
    this.instanced = false;
    this.attribute = null;
    this.global = true;
    if (value && value.isBufferAttribute === true) {
      this.attribute = value;
      this.usage = value.usage;
      this.instanced = value.isInstancedBufferAttribute;
    }
  }
  getHash(builder) {
    if (this.bufferStride === 0 && this.bufferOffset === 0) {
      let bufferData = builder.globalCache.getData(this.value);
      if (bufferData === void 0) {
        bufferData = {
          node: this
        };
        builder.globalCache.setData(this.value, bufferData);
      }
      return bufferData.node.uuid;
    }
    return this.uuid;
  }
  getNodeType(builder) {
    if (this.bufferType === null) {
      this.bufferType = builder.getTypeFromAttribute(this.attribute);
    }
    return this.bufferType;
  }
  setup(builder) {
    if (this.attribute !== null) return;
    const type = this.getNodeType(builder);
    const array3 = this.value;
    const itemSize = builder.getTypeLength(type);
    const stride = this.bufferStride || itemSize;
    const offset = this.bufferOffset;
    const buffer2 = array3.isInterleavedBuffer === true ? array3 : new InterleavedBuffer2(array3, stride);
    const bufferAttribute2 = new InterleavedBufferAttribute2(buffer2, itemSize, offset);
    buffer2.setUsage(this.usage);
    this.attribute = bufferAttribute2;
    this.attribute.isInstancedBufferAttribute = this.instanced;
  }
  generate(builder) {
    const nodeType = this.getNodeType(builder);
    const nodeAttribute = builder.getBufferAttributeFromNode(this, nodeType);
    const propertyName = builder.getPropertyName(nodeAttribute);
    let output2 = null;
    if (builder.shaderStage === "vertex" || builder.shaderStage === "compute") {
      this.name = propertyName;
      output2 = propertyName;
    } else {
      const nodeVarying = varying(this);
      output2 = nodeVarying.build(builder, nodeType);
    }
    return output2;
  }
  getInputType() {
    return "bufferAttribute";
  }
  setUsage(value) {
    this.usage = value;
    if (this.attribute && this.attribute.isBufferAttribute === true) {
      this.attribute.usage = value;
    }
    return this;
  }
  setInstanced(value) {
    this.instanced = value;
    return this;
  }
};
BufferAttributeNode.type = registerNode("BufferAttribute", BufferAttributeNode);
var bufferAttribute = (array3, type, stride, offset) => nodeObject(new BufferAttributeNode(array3, type, stride, offset));
var dynamicBufferAttribute = (array3, type, stride, offset) => bufferAttribute(array3, type, stride, offset).setUsage(DynamicDrawUsage);
var instancedBufferAttribute = (array3, type, stride, offset) => bufferAttribute(array3, type, stride, offset).setInstanced(true);
var instancedDynamicBufferAttribute = (array3, type, stride, offset) => dynamicBufferAttribute(array3, type, stride, offset).setInstanced(true);
addMethodChaining("toAttribute", (bufferNode) => bufferAttribute(bufferNode.value));
var ComputeNode = class extends Node2 {
  constructor(computeNode, count2, workgroupSize = [64]) {
    super("void");
    this.isComputeNode = true;
    this.computeNode = computeNode;
    this.count = count2;
    this.workgroupSize = workgroupSize;
    this.dispatchCount = 0;
    this.version = 1;
    this.updateBeforeType = NodeUpdateType.OBJECT;
    this.updateDispatchCount();
  }
  dispose() {
    this.dispatchEvent({ type: "dispose" });
  }
  set needsUpdate(value) {
    if (value === true) this.version++;
  }
  updateDispatchCount() {
    const { count: count2, workgroupSize } = this;
    let size = workgroupSize[0];
    for (let i2 = 1; i2 < workgroupSize.length; i2++)
      size *= workgroupSize[i2];
    this.dispatchCount = Math.ceil(count2 / size);
  }
  onInit() {
  }
  updateBefore({ renderer: renderer3 }) {
    renderer3.compute(this);
  }
  generate(builder) {
    const { shaderStage } = builder;
    if (shaderStage === "compute") {
      const snippet = this.computeNode.build(builder, "void");
      if (snippet !== "") {
        builder.addLineFlowCode(snippet);
      }
    }
  }
};
ComputeNode.type = registerNode("Compute", ComputeNode);
var compute = (node, count2, workgroupSize) => nodeObject(new ComputeNode(nodeObject(node), count2, workgroupSize));
addMethodChaining("compute", compute);
var CacheNode = class extends Node2 {
  constructor(node, parent2 = true) {
    super();
    this.node = node;
    this.parent = parent2;
    this.isCacheNode = true;
  }
  getNodeType(builder) {
    return this.node.getNodeType(builder);
  }
  build(builder, ...params) {
    const previousCache = builder.getCache();
    const cache2 = builder.getCacheFromNode(this, parent);
    builder.setCache(cache2);
    const data = this.node.build(builder, ...params);
    builder.setCache(previousCache);
    return data;
  }
};
CacheNode.type = registerNode("Cache", CacheNode);
var cache = (node, ...params) => nodeObject(new CacheNode(nodeObject(node), ...params));
addMethodChaining("cache", cache);
var BypassNode = class extends Node2 {
  constructor(returnNode, callNode) {
    super();
    this.isBypassNode = true;
    this.outputNode = returnNode;
    this.callNode = callNode;
  }
  getNodeType(builder) {
    return this.outputNode.getNodeType(builder);
  }
  generate(builder) {
    const snippet = this.callNode.build(builder, "void");
    if (snippet !== "") {
      builder.addLineFlowCode(snippet);
    }
    return this.outputNode.build(builder);
  }
};
BypassNode.type = registerNode("Bypass", BypassNode);
var bypass = nodeProxy(BypassNode);
addMethodChaining("bypass", bypass);
var RemapNode = class extends Node2 {
  constructor(node, inLowNode, inHighNode, outLowNode = float(0), outHighNode = float(1)) {
    super();
    this.node = node;
    this.inLowNode = inLowNode;
    this.inHighNode = inHighNode;
    this.outLowNode = outLowNode;
    this.outHighNode = outHighNode;
    this.doClamp = true;
  }
  setup() {
    const { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;
    let t4 = node.sub(inLowNode).div(inHighNode.sub(inLowNode));
    if (doClamp === true) t4 = t4.clamp();
    return t4.mul(outHighNode.sub(outLowNode)).add(outLowNode);
  }
};
RemapNode.type = registerNode("Remap", RemapNode);
var remap = nodeProxy(RemapNode, null, null, { doClamp: false });
var remapClamp = nodeProxy(RemapNode);
addMethodChaining("remap", remap);
addMethodChaining("remapClamp", remapClamp);
var ExpressionNode = class extends Node2 {
  constructor(snippet = "", nodeType = "void") {
    super(nodeType);
    this.snippet = snippet;
  }
  generate(builder, output2) {
    const type = this.getNodeType(builder);
    const snippet = this.snippet;
    if (type === "void") {
      builder.addLineFlowCode(snippet);
    } else {
      return builder.format(`( ${snippet} )`, type, output2);
    }
  }
};
ExpressionNode.type = registerNode("Expression", ExpressionNode);
var expression = nodeProxy(ExpressionNode);
var Discard = (conditional) => (conditional ? select(conditional, expression("discard")) : expression("discard")).append();
addMethodChaining("discard", Discard);
var RenderOutputNode = class extends TempNode {
  constructor(colorNode, toneMapping2, outputColorSpace) {
    super("vec4");
    this.colorNode = colorNode;
    this.toneMapping = toneMapping2;
    this.outputColorSpace = outputColorSpace;
    this.isRenderOutput = true;
  }
  setup({ context: context2 }) {
    let outputNode = this.colorNode || context2.color;
    const toneMapping2 = (this.toneMapping !== null ? this.toneMapping : context2.toneMapping) || NoToneMapping2;
    const outputColorSpace = (this.outputColorSpace !== null ? this.outputColorSpace : context2.outputColorSpace) || LinearSRGBColorSpace2;
    if (toneMapping2 !== NoToneMapping2) {
      outputNode = outputNode.toneMapping(toneMapping2);
    }
    if (outputColorSpace === SRGBColorSpace2) {
      outputNode = outputNode.toOutputColorSpace(outputColorSpace);
    }
    return outputNode;
  }
};
RenderOutputNode.type = registerNode("RenderOutput", RenderOutputNode);
var renderOutput = (color3, toneMapping2 = null, outputColorSpace = null) => nodeObject(new RenderOutputNode(nodeObject(color3), toneMapping2, outputColorSpace));
addMethodChaining("renderOutput", renderOutput);
var AttributeNode = class extends Node2 {
  constructor(attributeName, nodeType = null) {
    super(nodeType);
    this.global = true;
    this._attributeName = attributeName;
  }
  getHash(builder) {
    return this.getAttributeName(builder);
  }
  getNodeType(builder) {
    let nodeType = this.nodeType;
    if (nodeType === null) {
      const attributeName = this.getAttributeName(builder);
      if (builder.hasGeometryAttribute(attributeName)) {
        const attribute2 = builder.geometry.getAttribute(attributeName);
        nodeType = builder.getTypeFromAttribute(attribute2);
      } else {
        nodeType = "float";
      }
    }
    return nodeType;
  }
  setAttributeName(attributeName) {
    this._attributeName = attributeName;
    return this;
  }
  getAttributeName() {
    return this._attributeName;
  }
  generate(builder) {
    const attributeName = this.getAttributeName(builder);
    const nodeType = this.getNodeType(builder);
    const geometryAttribute = builder.hasGeometryAttribute(attributeName);
    if (geometryAttribute === true) {
      const attribute2 = builder.geometry.getAttribute(attributeName);
      const attributeType = builder.getTypeFromAttribute(attribute2);
      const nodeAttribute = builder.getAttribute(attributeName, attributeType);
      if (builder.shaderStage === "vertex") {
        return builder.format(nodeAttribute.name, attributeType, nodeType);
      } else {
        const nodeVarying = varying(this);
        return nodeVarying.build(builder, nodeType);
      }
    } else {
      console.warn(`AttributeNode: Vertex attribute "${attributeName}" not found on geometry.`);
      return builder.generateConst(nodeType);
    }
  }
  serialize(data) {
    super.serialize(data);
    data.global = this.global;
    data._attributeName = this._attributeName;
  }
  deserialize(data) {
    super.deserialize(data);
    this.global = data.global;
    this._attributeName = data._attributeName;
  }
};
AttributeNode.type = registerNode("Attribute", AttributeNode);
var attribute = (name, nodeType) => nodeObject(new AttributeNode(name, nodeType));
var uv = (index7) => attribute("uv" + (index7 > 0 ? index7 : ""), "vec2");
var TextureSizeNode = class extends Node2 {
  constructor(textureNode, levelNode = null) {
    super("uvec2");
    this.isTextureSizeNode = true;
    this.textureNode = textureNode;
    this.levelNode = levelNode;
  }
  generate(builder, output2) {
    const textureProperty = this.textureNode.build(builder, "property");
    const levelNode = this.levelNode.build(builder, "int");
    return builder.format(`${builder.getMethod("textureDimensions")}( ${textureProperty}, ${levelNode} )`, this.getNodeType(builder), output2);
  }
};
TextureSizeNode.type = registerNode("TextureSize", TextureSizeNode);
var textureSize = nodeProxy(TextureSizeNode);
var MaxMipLevelNode = class extends UniformNode {
  constructor(textureNode) {
    super(0);
    this._textureNode = textureNode;
    this.updateType = NodeUpdateType.FRAME;
  }
  get textureNode() {
    return this._textureNode;
  }
  get texture() {
    return this._textureNode.value;
  }
  update() {
    const texture2 = this.texture;
    const images = texture2.images;
    const image = images && images.length > 0 ? images[0] && images[0].image || images[0] : texture2.image;
    if (image && image.width !== void 0) {
      const { width, height } = image;
      this.value = Math.log2(Math.max(width, height));
    }
  }
};
MaxMipLevelNode.type = registerNode("MaxMipLevel", MaxMipLevelNode);
var maxMipLevel = nodeProxy(MaxMipLevelNode);
var TextureNode = class extends UniformNode {
  constructor(value, uvNode = null, levelNode = null, biasNode = null) {
    super(value);
    this.isTextureNode = true;
    this.uvNode = uvNode;
    this.levelNode = levelNode;
    this.biasNode = biasNode;
    this.compareNode = null;
    this.depthNode = null;
    this.gradNode = null;
    this.sampler = true;
    this.updateMatrix = false;
    this.updateType = NodeUpdateType.NONE;
    this.referenceNode = null;
    this._value = value;
    this._matrixUniform = null;
    this.setUpdateMatrix(uvNode === null);
  }
  set value(value) {
    if (this.referenceNode) {
      this.referenceNode.value = value;
    } else {
      this._value = value;
    }
  }
  get value() {
    return this.referenceNode ? this.referenceNode.value : this._value;
  }
  getUniformHash() {
    return this.value.uuid;
  }
  getNodeType() {
    if (this.value.isDepthTexture === true) return "float";
    if (this.value.type === UnsignedIntType2) {
      return "uvec4";
    } else if (this.value.type === IntType2) {
      return "ivec4";
    }
    return "vec4";
  }
  getInputType() {
    return "texture";
  }
  getDefaultUV() {
    return uv(this.value.channel);
  }
  updateReference() {
    return this.value;
  }
  getTransformedUV(uvNode) {
    if (this._matrixUniform === null) this._matrixUniform = uniform(this.value.matrix);
    return this._matrixUniform.mul(vec3(uvNode, 1)).xy;
  }
  setUpdateMatrix(value) {
    this.updateMatrix = value;
    this.updateType = value ? NodeUpdateType.FRAME : NodeUpdateType.NONE;
    return this;
  }
  setupUV(builder, uvNode) {
    const texture2 = this.value;
    if (builder.isFlipY() && (texture2.isRenderTargetTexture === true || texture2.isFramebufferTexture === true || texture2.isDepthTexture === true)) {
      uvNode = uvNode.setY(uvNode.y.oneMinus());
    }
    return uvNode;
  }
  setup(builder) {
    const properties = builder.getNodeProperties(this);
    properties.referenceNode = this.referenceNode;
    let uvNode = this.uvNode;
    if ((uvNode === null || builder.context.forceUVContext === true) && builder.context.getUV) {
      uvNode = builder.context.getUV(this);
    }
    if (!uvNode) uvNode = this.getDefaultUV();
    if (this.updateMatrix === true) {
      uvNode = this.getTransformedUV(uvNode);
    }
    uvNode = this.setupUV(builder, uvNode);
    let levelNode = this.levelNode;
    if (levelNode === null && builder.context.getTextureLevel) {
      levelNode = builder.context.getTextureLevel(this);
    }
    properties.uvNode = uvNode;
    properties.levelNode = levelNode;
    properties.biasNode = this.biasNode;
    properties.compareNode = this.compareNode;
    properties.gradNode = this.gradNode;
    properties.depthNode = this.depthNode;
  }
  generateUV(builder, uvNode) {
    return uvNode.build(builder, this.sampler === true ? "vec2" : "ivec2");
  }
  generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet) {
    const texture2 = this.value;
    let snippet;
    if (levelSnippet) {
      snippet = builder.generateTextureLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet);
    } else if (biasSnippet) {
      snippet = builder.generateTextureBias(texture2, textureProperty, uvSnippet, biasSnippet, depthSnippet);
    } else if (gradSnippet) {
      snippet = builder.generateTextureGrad(texture2, textureProperty, uvSnippet, gradSnippet, depthSnippet);
    } else if (compareSnippet) {
      snippet = builder.generateTextureCompare(texture2, textureProperty, uvSnippet, compareSnippet, depthSnippet);
    } else if (this.sampler === false) {
      snippet = builder.generateTextureLoad(texture2, textureProperty, uvSnippet, depthSnippet);
    } else {
      snippet = builder.generateTexture(texture2, textureProperty, uvSnippet, depthSnippet);
    }
    return snippet;
  }
  generate(builder, output2) {
    const properties = builder.getNodeProperties(this);
    const texture2 = this.value;
    if (!texture2 || texture2.isTexture !== true) {
      throw new Error("TextureNode: Need a three.js texture.");
    }
    const textureProperty = super.generate(builder, "property");
    if (output2 === "sampler") {
      return textureProperty + "_sampler";
    } else if (builder.isReference(output2)) {
      return textureProperty;
    } else {
      const nodeData = builder.getDataFromNode(this);
      let propertyName = nodeData.propertyName;
      if (propertyName === void 0) {
        const { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;
        const uvSnippet = this.generateUV(builder, uvNode);
        const levelSnippet = levelNode ? levelNode.build(builder, "float") : null;
        const biasSnippet = biasNode ? biasNode.build(builder, "float") : null;
        const depthSnippet = depthNode ? depthNode.build(builder, "int") : null;
        const compareSnippet = compareNode ? compareNode.build(builder, "float") : null;
        const gradSnippet = gradNode ? [gradNode[0].build(builder, "vec2"), gradNode[1].build(builder, "vec2")] : null;
        const nodeVar = builder.getVarFromNode(this);
        propertyName = builder.getPropertyName(nodeVar);
        const snippet2 = this.generateSnippet(builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet);
        builder.addLineFlowCode(`${propertyName} = ${snippet2}`);
        nodeData.snippet = snippet2;
        nodeData.propertyName = propertyName;
      }
      let snippet = propertyName;
      const nodeType = this.getNodeType(builder);
      if (builder.needsToWorkingColorSpace(texture2)) {
        snippet = toWorkingColorSpace(expression(snippet, nodeType), texture2.colorSpace).setup(builder).build(builder, nodeType);
      }
      return builder.format(snippet, nodeType, output2);
    }
  }
  setSampler(value) {
    this.sampler = value;
    return this;
  }
  getSampler() {
    return this.sampler;
  }
  // @TODO: Move to TSL
  uv(uvNode) {
    const textureNode = this.clone();
    textureNode.uvNode = nodeObject(uvNode);
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  blur(amountNode) {
    const textureNode = this.clone();
    textureNode.biasNode = nodeObject(amountNode).mul(maxMipLevel(textureNode));
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  level(levelNode) {
    const textureNode = this.clone();
    textureNode.levelNode = nodeObject(levelNode);
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  size(levelNode) {
    return textureSize(this, levelNode);
  }
  bias(biasNode) {
    const textureNode = this.clone();
    textureNode.biasNode = nodeObject(biasNode);
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  compare(compareNode) {
    const textureNode = this.clone();
    textureNode.compareNode = nodeObject(compareNode);
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  grad(gradNodeX, gradNodeY) {
    const textureNode = this.clone();
    textureNode.gradNode = [nodeObject(gradNodeX), nodeObject(gradNodeY)];
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  depth(depthNode) {
    const textureNode = this.clone();
    textureNode.depthNode = nodeObject(depthNode);
    textureNode.referenceNode = this.getSelf();
    return nodeObject(textureNode);
  }
  // --
  serialize(data) {
    super.serialize(data);
    data.value = this.value.toJSON(data.meta).uuid;
    data.sampler = this.sampler;
    data.updateMatrix = this.updateMatrix;
    data.updateType = this.updateType;
  }
  deserialize(data) {
    super.deserialize(data);
    this.value = data.meta.textures[data.value];
    this.sampler = data.sampler;
    this.updateMatrix = data.updateMatrix;
    this.updateType = data.updateType;
  }
  update() {
    const texture2 = this.value;
    const matrixUniform = this._matrixUniform;
    if (matrixUniform !== null) matrixUniform.value = texture2.matrix;
    if (texture2.matrixAutoUpdate === true) {
      texture2.updateMatrix();
    }
  }
  clone() {
    const newNode = new this.constructor(this.value, this.uvNode, this.levelNode, this.biasNode);
    newNode.sampler = this.sampler;
    return newNode;
  }
};
TextureNode.type = registerNode("Texture", TextureNode);
var texture = nodeProxy(TextureNode);
var textureLoad = (...params) => texture(...params).setSampler(false);
var cameraGroup = sharedUniformGroup("camera").onRenderUpdate(() => {
  cameraGroup.needsUpdate = true;
});
var cameraNear = uniform("float").label("cameraNear").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.near);
var cameraFar = uniform("float").label("cameraFar").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.far);
var cameraLogDepth = uniform("float").label("cameraLogDepth").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => 2 / (Math.log(camera3.far + 1) / Math.LN2));
var cameraProjectionMatrix = uniform("mat4").label("cameraProjectionMatrix").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.projectionMatrix);
var cameraProjectionMatrixInverse = uniform("mat4").label("cameraProjectionMatrixInverse").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.projectionMatrixInverse);
var cameraViewMatrix = uniform("mat4").label("cameraViewMatrix").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.matrixWorldInverse);
var cameraWorldMatrix = uniform("mat4").label("cameraWorldMatrix").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.matrixWorld);
var cameraNormalMatrix = uniform("mat3").label("cameraNormalMatrix").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }) => camera3.normalMatrix);
var cameraPosition = uniform(new Vector32()).label("cameraPosition").setGroup(cameraGroup).onRenderUpdate(({ camera: camera3 }, self2) => self2.value.setFromMatrixPosition(camera3.matrixWorld));
var Object3DNode = class _Object3DNode extends Node2 {
  constructor(scope = _Object3DNode.VIEW_MATRIX, object3d = null) {
    super();
    this.scope = scope;
    this.object3d = object3d;
    this.updateType = NodeUpdateType.OBJECT;
    this._uniformNode = new UniformNode(null);
  }
  getNodeType() {
    const scope = this.scope;
    if (scope === _Object3DNode.WORLD_MATRIX || scope === _Object3DNode.VIEW_MATRIX) {
      return "mat4";
    } else if (scope === _Object3DNode.NORMAL_MATRIX) {
      return "mat3";
    } else if (scope === _Object3DNode.POSITION || scope === _Object3DNode.VIEW_POSITION || scope === _Object3DNode.DIRECTION || scope === _Object3DNode.SCALE) {
      return "vec3";
    }
  }
  update(frame) {
    const object2 = this.object3d;
    const uniformNode = this._uniformNode;
    const scope = this.scope;
    if (scope === _Object3DNode.VIEW_MATRIX) {
      uniformNode.value = object2.modelViewMatrix;
    } else if (scope === _Object3DNode.NORMAL_MATRIX) {
      uniformNode.value = object2.normalMatrix;
    } else if (scope === _Object3DNode.WORLD_MATRIX) {
      uniformNode.value = object2.matrixWorld;
    } else if (scope === _Object3DNode.POSITION) {
      uniformNode.value = uniformNode.value || new Vector32();
      uniformNode.value.setFromMatrixPosition(object2.matrixWorld);
    } else if (scope === _Object3DNode.SCALE) {
      uniformNode.value = uniformNode.value || new Vector32();
      uniformNode.value.setFromMatrixScale(object2.matrixWorld);
    } else if (scope === _Object3DNode.DIRECTION) {
      uniformNode.value = uniformNode.value || new Vector32();
      object2.getWorldDirection(uniformNode.value);
    } else if (scope === _Object3DNode.VIEW_POSITION) {
      const camera3 = frame.camera;
      uniformNode.value = uniformNode.value || new Vector32();
      uniformNode.value.setFromMatrixPosition(object2.matrixWorld);
      uniformNode.value.applyMatrix4(camera3.matrixWorldInverse);
    }
  }
  generate(builder) {
    const scope = this.scope;
    if (scope === _Object3DNode.WORLD_MATRIX || scope === _Object3DNode.VIEW_MATRIX) {
      this._uniformNode.nodeType = "mat4";
    } else if (scope === _Object3DNode.NORMAL_MATRIX) {
      this._uniformNode.nodeType = "mat3";
    } else if (scope === _Object3DNode.POSITION || scope === _Object3DNode.VIEW_POSITION || scope === _Object3DNode.DIRECTION || scope === _Object3DNode.SCALE) {
      this._uniformNode.nodeType = "vec3";
    }
    return this._uniformNode.build(builder);
  }
  serialize(data) {
    super.serialize(data);
    data.scope = this.scope;
  }
  deserialize(data) {
    super.deserialize(data);
    this.scope = data.scope;
  }
};
Object3DNode.VIEW_MATRIX = "viewMatrix";
Object3DNode.NORMAL_MATRIX = "normalMatrix";
Object3DNode.WORLD_MATRIX = "worldMatrix";
Object3DNode.POSITION = "position";
Object3DNode.SCALE = "scale";
Object3DNode.VIEW_POSITION = "viewPosition";
Object3DNode.DIRECTION = "direction";
Object3DNode.type = registerNode("Object3D", Object3DNode);
var objectDirection = nodeProxy(Object3DNode, Object3DNode.DIRECTION);
var objectViewMatrix = nodeProxy(Object3DNode, Object3DNode.VIEW_MATRIX);
var objectNormalMatrix = nodeProxy(Object3DNode, Object3DNode.NORMAL_MATRIX);
var objectWorldMatrix = nodeProxy(Object3DNode, Object3DNode.WORLD_MATRIX);
var objectPosition = nodeProxy(Object3DNode, Object3DNode.POSITION);
var objectScale = nodeProxy(Object3DNode, Object3DNode.SCALE);
var objectViewPosition = nodeProxy(Object3DNode, Object3DNode.VIEW_POSITION);
var ModelNode = class _ModelNode extends Object3DNode {
  constructor(scope = _ModelNode.VIEW_MATRIX) {
    super(scope);
  }
  update(frame) {
    this.object3d = frame.object;
    super.update(frame);
  }
};
ModelNode.type = registerNode("Model", ModelNode);
var modelDirection = nodeImmutable(ModelNode, ModelNode.DIRECTION);
var modelViewMatrix = nodeImmutable(ModelNode, ModelNode.VIEW_MATRIX).label("modelViewMatrix").toVar("ModelViewMatrix");
var modelNormalMatrix = nodeImmutable(ModelNode, ModelNode.NORMAL_MATRIX);
var modelWorldMatrix = nodeImmutable(ModelNode, ModelNode.WORLD_MATRIX);
var modelPosition = nodeImmutable(ModelNode, ModelNode.POSITION);
var modelScale = nodeImmutable(ModelNode, ModelNode.SCALE);
var modelViewPosition = nodeImmutable(ModelNode, ModelNode.VIEW_POSITION);
var modelWorldMatrixInverse = uniform(new Matrix42()).onObjectUpdate(({ object: object2 }, self2) => self2.value.copy(object2.matrixWorld).invert());
var positionGeometry = attribute("position", "vec3");
var positionLocal = positionGeometry.varying("positionLocal");
var positionPrevious = positionGeometry.varying("positionPrevious");
var positionWorld = modelWorldMatrix.mul(positionLocal).xyz.varying("v_positionWorld");
var positionWorldDirection = positionLocal.transformDirection(modelWorldMatrix).varying("v_positionWorldDirection").normalize().toVar("positionWorldDirection");
var positionView = modelViewMatrix.mul(positionLocal).xyz.varying("v_positionView");
var positionViewDirection = positionView.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");
var FrontFacingNode = class extends Node2 {
  constructor() {
    super("bool");
    this.isFrontFacingNode = true;
  }
  generate(builder) {
    const { renderer: renderer3, material } = builder;
    if (renderer3.coordinateSystem === WebGLCoordinateSystem2) {
      if (material.side === BackSide2) {
        return "false";
      }
    }
    return builder.getFrontFacing();
  }
};
FrontFacingNode.type = registerNode("FrontFacing", FrontFacingNode);
var frontFacing = nodeImmutable(FrontFacingNode);
var faceDirection = float(frontFacing).mul(2).sub(1);
var normalGeometry = attribute("normal", "vec3");
var normalLocal = Fn((builder) => {
  if (builder.geometry.hasAttribute("normal") === false) {
    console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.');
    return vec3(0, 1, 0);
  }
  return normalGeometry;
}, "vec3").once()().toVar("normalLocal");
var normalFlat = positionView.dFdx().cross(positionView.dFdy()).normalize().toVar("normalFlat");
var normalViewVarying = null;
var normalView = Fn((builder) => {
  let node;
  if (builder.material.flatShading === true) {
    node = normalFlat;
  } else {
    node = normalViewVarying || (normalViewVarying = varying(modelNormalMatrix.mul(normalLocal), "v_normalView").normalize());
  }
  return node;
}, "vec3").once()().toVar("normalView");
var normalWorld = varying(normalView.transformDirection(cameraViewMatrix), "v_normalWorld").normalize().toVar("normalWorld");
var transformedNormalView = Fn((builder) => {
  return builder.context.setupNormal();
}, "vec3").once()().mul(faceDirection).toVar("transformedNormalView");
var transformedNormalWorld = transformedNormalView.transformDirection(cameraViewMatrix).normalize().toVar("transformedNormalWorld");
var transformedClearcoatNormalView = Fn((builder) => {
  return builder.context.setupClearcoatNormal();
}, "vec3").once()().mul(faceDirection).toVar("transformedClearcoatNormalView");
var materialRefractionRatio = uniform(0).onReference(({ material }) => material).onRenderUpdate(({ material }) => material.refractionRatio);
var reflectView = positionViewDirection.negate().reflect(transformedNormalView);
var refractView = positionViewDirection.negate().refract(transformedNormalView, materialRefractionRatio);
var reflectVector = reflectView.transformDirection(cameraViewMatrix).toVar("reflectVector");
var refractVector = refractView.transformDirection(cameraViewMatrix).toVar("reflectVector");
var CubeTextureNode = class extends TextureNode {
  constructor(value, uvNode = null, levelNode = null, biasNode = null) {
    super(value, uvNode, levelNode, biasNode);
    this.isCubeTextureNode = true;
  }
  getInputType() {
    return "cubeTexture";
  }
  getDefaultUV() {
    const texture2 = this.value;
    if (texture2.mapping === CubeReflectionMapping2) {
      return reflectVector;
    } else if (texture2.mapping === CubeRefractionMapping2) {
      return refractVector;
    } else {
      console.error('THREE.CubeTextureNode: Mapping "%s" not supported.', texture2.mapping);
      return vec3(0, 0, 0);
    }
  }
  setUpdateMatrix() {
  }
  // Ignore .updateMatrix for CubeTextureNode
  setupUV(builder, uvNode) {
    const texture2 = this.value;
    if (builder.renderer.coordinateSystem === WebGPUCoordinateSystem2 || !texture2.isRenderTargetTexture) {
      return vec3(uvNode.x.negate(), uvNode.yz);
    } else {
      return uvNode;
    }
  }
  generateUV(builder, cubeUV) {
    return cubeUV.build(builder, "vec3");
  }
};
CubeTextureNode.type = registerNode("CubeTexture", CubeTextureNode);
var cubeTexture = nodeProxy(CubeTextureNode);
var BufferNode = class extends UniformNode {
  constructor(value, bufferType, bufferCount = 0) {
    super(value, bufferType);
    this.isBufferNode = true;
    this.bufferType = bufferType;
    this.bufferCount = bufferCount;
  }
  getElementType(builder) {
    return this.getNodeType(builder);
  }
  getInputType() {
    return "buffer";
  }
};
BufferNode.type = registerNode("Buffer", BufferNode);
var buffer = (value, type, count2) => nodeObject(new BufferNode(value, type, count2));
var UniformArrayElementNode = class extends ArrayElementNode {
  constructor(arrayBuffer, indexNode) {
    super(arrayBuffer, indexNode);
    this.isArrayBufferElementNode = true;
  }
  getNodeType(builder) {
    return this.node.getElementType(builder);
  }
  generate(builder) {
    const snippet = super.generate(builder);
    const type = this.getNodeType();
    return builder.format(snippet, "vec4", type);
  }
};
var UniformArrayNode = class extends BufferNode {
  constructor(value, elementType = null) {
    super(null, "vec4");
    this.array = value;
    this.elementType = elementType;
    this._elementType = null;
    this._elementLength = 0;
    this.updateType = NodeUpdateType.RENDER;
    this.isArrayBufferNode = true;
  }
  getElementType() {
    return this.elementType || this._elementType;
  }
  getElementLength() {
    return this._elementLength;
  }
  update() {
    const { array: array3, value } = this;
    const elementLength = this.getElementLength();
    const elementType = this.getElementType();
    if (elementLength === 1) {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index7 = i2 * 4;
        value[index7] = array3[i2];
      }
    } else if (elementType === "color") {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index7 = i2 * 4;
        const vector = array3[i2];
        value[index7] = vector.r;
        value[index7 + 1] = vector.g;
        value[index7 + 2] = vector.b || 0;
      }
    } else {
      for (let i2 = 0; i2 < array3.length; i2++) {
        const index7 = i2 * 4;
        const vector = array3[i2];
        value[index7] = vector.x;
        value[index7 + 1] = vector.y;
        value[index7 + 2] = vector.z || 0;
        value[index7 + 3] = vector.w || 0;
      }
    }
  }
  setup(builder) {
    const length2 = this.array.length;
    this._elementType = this.elementType === null ? getValueType(this.array[0]) : this.elementType;
    this._elementLength = builder.getTypeLength(this._elementType);
    let arrayType = Float32Array;
    if (this._elementType.charAt(0) === "i") arrayType = Int32Array;
    else if (this._elementType.charAt(0) === "u") arrayType = Uint32Array;
    this.value = new arrayType(length2 * 4);
    this.bufferCount = length2;
    this.bufferType = builder.changeComponentType("vec4", builder.getComponentType(this._elementType));
    return super.setup(builder);
  }
  element(indexNode) {
    return nodeObject(new UniformArrayElementNode(this, nodeObject(indexNode)));
  }
};
UniformArrayNode.type = registerNode("UniformArray", UniformArrayNode);
var uniformArray = (values, nodeType) => nodeObject(new UniformArrayNode(values, nodeType));
var ReferenceElementNode2 = class extends ArrayElementNode {
  constructor(referenceNode, indexNode) {
    super(referenceNode, indexNode);
    this.referenceNode = referenceNode;
    this.isReferenceElementNode = true;
  }
  getNodeType() {
    return this.referenceNode.uniformType;
  }
  generate(builder) {
    const snippet = super.generate(builder);
    const arrayType = this.referenceNode.getNodeType();
    const elementType = this.getNodeType();
    return builder.format(snippet, arrayType, elementType);
  }
};
var ReferenceNode = class extends Node2 {
  constructor(property2, uniformType, object2 = null, count2 = null) {
    super();
    this.property = property2;
    this.uniformType = uniformType;
    this.object = object2;
    this.count = count2;
    this.properties = property2.split(".");
    this.reference = object2;
    this.node = null;
    this.updateType = NodeUpdateType.OBJECT;
  }
  element(indexNode) {
    return nodeObject(new ReferenceElementNode2(this, nodeObject(indexNode)));
  }
  setNodeType(uniformType) {
    let node = null;
    if (this.count !== null) {
      node = buffer(null, uniformType, this.count);
    } else if (Array.isArray(this.getValueFromReference())) {
      node = uniformArray(null, uniformType);
    } else if (uniformType === "texture") {
      node = texture(null);
    } else if (uniformType === "cubeTexture") {
      node = cubeTexture(null);
    } else {
      node = uniform(null, uniformType);
    }
    this.node = node.getSelf();
  }
  getNodeType(builder) {
    if (this.node === null) {
      this.updateValue();
    }
    return this.node.getNodeType(builder);
  }
  getValueFromReference(object2 = this.reference) {
    const { properties } = this;
    let value = object2[properties[0]];
    for (let i2 = 1; i2 < properties.length; i2++) {
      value = value[properties[i2]];
    }
    return value;
  }
  updateReference(state) {
    this.reference = this.object !== null ? this.object : state.object;
    return this.reference;
  }
  setup() {
    this.updateValue();
    return this.node;
  }
  update() {
    this.updateValue();
  }
  updateValue() {
    if (this.node === null) this.setNodeType(this.uniformType);
    const value = this.getValueFromReference();
    if (Array.isArray(value)) {
      this.node.array = value;
    } else {
      this.node.value = value;
    }
  }
};
ReferenceNode.type = registerNode("Reference", ReferenceNode);
var reference = (name, type, object2) => nodeObject(new ReferenceNode(name, type, object2));
var referenceBuffer = (name, type, count2, object2) => nodeObject(new ReferenceNode(name, type, object2, count2));
var MaterialReferenceNode = class extends ReferenceNode {
  constructor(property2, inputType, material = null) {
    super(property2, inputType, material);
    this.material = material;
    this.isMaterialReferenceNode = true;
  }
  /*setNodeType( node ) {
  
  		super.setNodeType( node );
  
  		this.node.groupNode = renderGroup;
  
  	}*/
  updateReference(state) {
    this.reference = this.material !== null ? this.material : state.material;
    return this.reference;
  }
};
MaterialReferenceNode.type = registerNode("MaterialReference", MaterialReferenceNode);
var materialReference = (name, type, material) => nodeObject(new MaterialReferenceNode(name, type, material));
var tangentGeometry = Fn((builder) => {
  if (builder.geometry.hasAttribute("tangent") === false) {
    builder.geometry.computeTangents();
  }
  return attribute("tangent", "vec4");
})();
var tangentLocal = tangentGeometry.xyz.toVar("tangentLocal");
var tangentView = modelViewMatrix.mul(vec4(tangentLocal, 0)).xyz.varying("v_tangentView").normalize().toVar("tangentView");
var tangentWorld = tangentView.transformDirection(cameraViewMatrix).varying("v_tangentWorld").normalize().toVar("tangentWorld");
var transformedTangentView = tangentView.toVar("transformedTangentView");
var transformedTangentWorld = transformedTangentView.transformDirection(cameraViewMatrix).normalize().toVar("transformedTangentWorld");
var getBitangent = (crossNormalTangent) => crossNormalTangent.mul(tangentGeometry.w).xyz;
var bitangentGeometry = varying(getBitangent(normalGeometry.cross(tangentGeometry)), "v_bitangentGeometry").normalize().toVar("bitangentGeometry");
var bitangentLocal = varying(getBitangent(normalLocal.cross(tangentLocal)), "v_bitangentLocal").normalize().toVar("bitangentLocal");
var bitangentView = varying(getBitangent(normalView.cross(tangentView)), "v_bitangentView").normalize().toVar("bitangentView");
var bitangentWorld = varying(getBitangent(normalWorld.cross(tangentWorld)), "v_bitangentWorld").normalize().toVar("bitangentWorld");
var transformedBitangentView = getBitangent(transformedNormalView.cross(transformedTangentView)).normalize().toVar("transformedBitangentView");
var transformedBitangentWorld = transformedBitangentView.transformDirection(cameraViewMatrix).normalize().toVar("transformedBitangentWorld");
var TBNViewMatrix = mat3(tangentView, bitangentView, normalView);
var parallaxDirection = positionViewDirection.mul(TBNViewMatrix);
var transformedBentNormalView = (() => {
  let bentNormal = anisotropyB.cross(positionViewDirection);
  bentNormal = bentNormal.cross(anisotropyB).normalize();
  bentNormal = mix(bentNormal, transformedNormalView, anisotropy.mul(roughness.oneMinus()).oneMinus().pow2().pow2()).normalize();
  return bentNormal;
})();
var perturbNormal2Arb = Fn((inputs) => {
  const { eye_pos, surf_norm, mapN, uv: uv2 } = inputs;
  const q0 = eye_pos.dFdx();
  const q1 = eye_pos.dFdy();
  const st0 = uv2.dFdx();
  const st1 = uv2.dFdy();
  const N2 = surf_norm;
  const q1perp = q1.cross(N2);
  const q0perp = N2.cross(q0);
  const T2 = q1perp.mul(st0.x).add(q0perp.mul(st1.x));
  const B4 = q1perp.mul(st0.y).add(q0perp.mul(st1.y));
  const det = T2.dot(T2).max(B4.dot(B4));
  const scale2 = faceDirection.mul(det.inverseSqrt());
  return add3(T2.mul(mapN.x, scale2), B4.mul(mapN.y, scale2), N2.mul(mapN.z)).normalize();
});
var NormalMapNode = class extends TempNode {
  constructor(node, scaleNode = null) {
    super("vec3");
    this.node = node;
    this.scaleNode = scaleNode;
    this.normalMapType = TangentSpaceNormalMap2;
  }
  setup(builder) {
    const { normalMapType, scaleNode } = this;
    let normalMap2 = this.node.mul(2).sub(1);
    if (scaleNode !== null) {
      normalMap2 = vec3(normalMap2.xy.mul(scaleNode), normalMap2.z);
    }
    let outputNode = null;
    if (normalMapType === ObjectSpaceNormalMap2) {
      outputNode = modelNormalMatrix.mul(normalMap2).normalize();
    } else if (normalMapType === TangentSpaceNormalMap2) {
      const tangent = builder.hasGeometryAttribute("tangent");
      if (tangent === true) {
        outputNode = TBNViewMatrix.mul(normalMap2).normalize();
      } else {
        outputNode = perturbNormal2Arb({
          eye_pos: positionView,
          surf_norm: normalView,
          mapN: normalMap2,
          uv: uv()
        });
      }
    }
    return outputNode;
  }
};
NormalMapNode.type = registerNode("NormalMap", NormalMapNode);
var normalMap = nodeProxy(NormalMapNode);
var dHdxy_fwd = Fn(({ textureNode, bumpScale }) => {
  const sampleTexture = (callback) => textureNode.cache().context({ getUV: (texNode) => callback(texNode.uvNode || uv()), forceUVContext: true });
  const Hll = float(sampleTexture((uvNode) => uvNode));
  return vec2(
    float(sampleTexture((uvNode) => uvNode.add(uvNode.dFdx()))).sub(Hll),
    float(sampleTexture((uvNode) => uvNode.add(uvNode.dFdy()))).sub(Hll)
  ).mul(bumpScale);
});
var perturbNormalArb = Fn((inputs) => {
  const { surf_pos, surf_norm, dHdxy } = inputs;
  const vSigmaX = surf_pos.dFdx().normalize();
  const vSigmaY = surf_pos.dFdy().normalize();
  const vN = surf_norm;
  const R1 = vSigmaY.cross(vN);
  const R2 = vN.cross(vSigmaX);
  const fDet = vSigmaX.dot(R1).mul(faceDirection);
  const vGrad = fDet.sign().mul(dHdxy.x.mul(R1).add(dHdxy.y.mul(R2)));
  return fDet.abs().mul(surf_norm).sub(vGrad).normalize();
});
var BumpMapNode = class extends TempNode {
  constructor(textureNode, scaleNode = null) {
    super("vec3");
    this.textureNode = textureNode;
    this.scaleNode = scaleNode;
  }
  setup() {
    const bumpScale = this.scaleNode !== null ? this.scaleNode : 1;
    const dHdxy = dHdxy_fwd({ textureNode: this.textureNode, bumpScale });
    return perturbNormalArb({
      surf_pos: positionView,
      surf_norm: normalView,
      dHdxy
    });
  }
};
var bumpMap = nodeProxy(BumpMapNode);
var _propertyCache = /* @__PURE__ */ new Map();
var MaterialNode = class _MaterialNode extends Node2 {
  constructor(scope) {
    super();
    this.scope = scope;
  }
  getCache(property2, type) {
    let node = _propertyCache.get(property2);
    if (node === void 0) {
      node = materialReference(property2, type);
      _propertyCache.set(property2, node);
    }
    return node;
  }
  getFloat(property2) {
    return this.getCache(property2, "float");
  }
  getColor(property2) {
    return this.getCache(property2, "color");
  }
  getTexture(property2) {
    return this.getCache(property2 === "map" ? "map" : property2 + "Map", "texture");
  }
  setup(builder) {
    const material = builder.context.material;
    const scope = this.scope;
    let node = null;
    if (scope === _MaterialNode.COLOR) {
      const colorNode = material.color !== void 0 ? this.getColor(scope) : vec3();
      if (material.map && material.map.isTexture === true) {
        node = colorNode.mul(this.getTexture("map"));
      } else {
        node = colorNode;
      }
    } else if (scope === _MaterialNode.OPACITY) {
      const opacityNode = this.getFloat(scope);
      if (material.alphaMap && material.alphaMap.isTexture === true) {
        node = opacityNode.mul(this.getTexture("alpha"));
      } else {
        node = opacityNode;
      }
    } else if (scope === _MaterialNode.SPECULAR_STRENGTH) {
      if (material.specularMap && material.specularMap.isTexture === true) {
        node = this.getTexture("specular").r;
      } else {
        node = float(1);
      }
    } else if (scope === _MaterialNode.SPECULAR_INTENSITY) {
      const specularIntensity = this.getFloat(scope);
      if (material.specularMap) {
        node = specularIntensity.mul(this.getTexture(scope).a);
      } else {
        node = specularIntensity;
      }
    } else if (scope === _MaterialNode.SPECULAR_COLOR) {
      const specularColorNode = this.getColor(scope);
      if (material.specularColorMap && material.specularColorMap.isTexture === true) {
        node = specularColorNode.mul(this.getTexture(scope).rgb);
      } else {
        node = specularColorNode;
      }
    } else if (scope === _MaterialNode.ROUGHNESS) {
      const roughnessNode = this.getFloat(scope);
      if (material.roughnessMap && material.roughnessMap.isTexture === true) {
        node = roughnessNode.mul(this.getTexture(scope).g);
      } else {
        node = roughnessNode;
      }
    } else if (scope === _MaterialNode.METALNESS) {
      const metalnessNode = this.getFloat(scope);
      if (material.metalnessMap && material.metalnessMap.isTexture === true) {
        node = metalnessNode.mul(this.getTexture(scope).b);
      } else {
        node = metalnessNode;
      }
    } else if (scope === _MaterialNode.EMISSIVE) {
      const emissiveIntensityNode = this.getFloat("emissiveIntensity");
      const emissiveNode = this.getColor(scope).mul(emissiveIntensityNode);
      if (material.emissiveMap && material.emissiveMap.isTexture === true) {
        node = emissiveNode.mul(this.getTexture(scope));
      } else {
        node = emissiveNode;
      }
    } else if (scope === _MaterialNode.NORMAL) {
      if (material.normalMap) {
        node = normalMap(this.getTexture("normal"), this.getCache("normalScale", "vec2"));
      } else if (material.bumpMap) {
        node = bumpMap(this.getTexture("bump").r, this.getFloat("bumpScale"));
      } else {
        node = normalView;
      }
    } else if (scope === _MaterialNode.CLEARCOAT) {
      const clearcoatNode = this.getFloat(scope);
      if (material.clearcoatMap && material.clearcoatMap.isTexture === true) {
        node = clearcoatNode.mul(this.getTexture(scope).r);
      } else {
        node = clearcoatNode;
      }
    } else if (scope === _MaterialNode.CLEARCOAT_ROUGHNESS) {
      const clearcoatRoughnessNode = this.getFloat(scope);
      if (material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true) {
        node = clearcoatRoughnessNode.mul(this.getTexture(scope).r);
      } else {
        node = clearcoatRoughnessNode;
      }
    } else if (scope === _MaterialNode.CLEARCOAT_NORMAL) {
      if (material.clearcoatNormalMap) {
        node = normalMap(this.getTexture(scope), this.getCache(scope + "Scale", "vec2"));
      } else {
        node = normalView;
      }
    } else if (scope === _MaterialNode.SHEEN) {
      const sheenNode = this.getColor("sheenColor").mul(this.getFloat("sheen"));
      if (material.sheenColorMap && material.sheenColorMap.isTexture === true) {
        node = sheenNode.mul(this.getTexture("sheenColor").rgb);
      } else {
        node = sheenNode;
      }
    } else if (scope === _MaterialNode.SHEEN_ROUGHNESS) {
      const sheenRoughnessNode = this.getFloat(scope);
      if (material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true) {
        node = sheenRoughnessNode.mul(this.getTexture(scope).a);
      } else {
        node = sheenRoughnessNode;
      }
      node = node.clamp(0.07, 1);
    } else if (scope === _MaterialNode.ANISOTROPY) {
      if (material.anisotropyMap && material.anisotropyMap.isTexture === true) {
        const anisotropyPolar = this.getTexture(scope);
        const anisotropyMat = mat2(materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x);
        node = anisotropyMat.mul(anisotropyPolar.rg.mul(2).sub(vec2(1)).normalize().mul(anisotropyPolar.b));
      } else {
        node = materialAnisotropyVector;
      }
    } else if (scope === _MaterialNode.IRIDESCENCE_THICKNESS) {
      const iridescenceThicknessMaximum = reference("1", "float", material.iridescenceThicknessRange);
      if (material.iridescenceThicknessMap) {
        const iridescenceThicknessMinimum = reference("0", "float", material.iridescenceThicknessRange);
        node = iridescenceThicknessMaximum.sub(iridescenceThicknessMinimum).mul(this.getTexture(scope).g).add(iridescenceThicknessMinimum);
      } else {
        node = iridescenceThicknessMaximum;
      }
    } else if (scope === _MaterialNode.TRANSMISSION) {
      const transmissionNode = this.getFloat(scope);
      if (material.transmissionMap) {
        node = transmissionNode.mul(this.getTexture(scope).r);
      } else {
        node = transmissionNode;
      }
    } else if (scope === _MaterialNode.THICKNESS) {
      const thicknessNode = this.getFloat(scope);
      if (material.thicknessMap) {
        node = thicknessNode.mul(this.getTexture(scope).g);
      } else {
        node = thicknessNode;
      }
    } else if (scope === _MaterialNode.IOR) {
      node = this.getFloat(scope);
    } else if (scope === _MaterialNode.LIGHT_MAP) {
      node = this.getTexture(scope).rgb.mul(this.getFloat("lightMapIntensity"));
    } else if (scope === _MaterialNode.AO_MAP) {
      node = this.getTexture(scope).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);
    } else {
      const outputType = this.getNodeType(builder);
      node = this.getCache(scope, outputType);
    }
    return node;
  }
};
MaterialNode.ALPHA_TEST = "alphaTest";
MaterialNode.COLOR = "color";
MaterialNode.OPACITY = "opacity";
MaterialNode.SHININESS = "shininess";
MaterialNode.SPECULAR = "specular";
MaterialNode.SPECULAR_STRENGTH = "specularStrength";
MaterialNode.SPECULAR_INTENSITY = "specularIntensity";
MaterialNode.SPECULAR_COLOR = "specularColor";
MaterialNode.REFLECTIVITY = "reflectivity";
MaterialNode.ROUGHNESS = "roughness";
MaterialNode.METALNESS = "metalness";
MaterialNode.NORMAL = "normal";
MaterialNode.CLEARCOAT = "clearcoat";
MaterialNode.CLEARCOAT_ROUGHNESS = "clearcoatRoughness";
MaterialNode.CLEARCOAT_NORMAL = "clearcoatNormal";
MaterialNode.EMISSIVE = "emissive";
MaterialNode.ROTATION = "rotation";
MaterialNode.SHEEN = "sheen";
MaterialNode.SHEEN_ROUGHNESS = "sheenRoughness";
MaterialNode.ANISOTROPY = "anisotropy";
MaterialNode.IRIDESCENCE = "iridescence";
MaterialNode.IRIDESCENCE_IOR = "iridescenceIOR";
MaterialNode.IRIDESCENCE_THICKNESS = "iridescenceThickness";
MaterialNode.IOR = "ior";
MaterialNode.TRANSMISSION = "transmission";
MaterialNode.THICKNESS = "thickness";
MaterialNode.ATTENUATION_DISTANCE = "attenuationDistance";
MaterialNode.ATTENUATION_COLOR = "attenuationColor";
MaterialNode.LINE_SCALE = "scale";
MaterialNode.LINE_DASH_SIZE = "dashSize";
MaterialNode.LINE_GAP_SIZE = "gapSize";
MaterialNode.LINE_WIDTH = "linewidth";
MaterialNode.LINE_DASH_OFFSET = "dashOffset";
MaterialNode.POINT_WIDTH = "pointWidth";
MaterialNode.DISPERSION = "dispersion";
MaterialNode.LIGHT_MAP = "light";
MaterialNode.AO_MAP = "ao";
MaterialNode.type = registerNode("Material", MaterialNode);
var materialAlphaTest = nodeImmutable(MaterialNode, MaterialNode.ALPHA_TEST);
var materialColor = nodeImmutable(MaterialNode, MaterialNode.COLOR);
var materialShininess = nodeImmutable(MaterialNode, MaterialNode.SHININESS);
var materialEmissive = nodeImmutable(MaterialNode, MaterialNode.EMISSIVE);
var materialOpacity = nodeImmutable(MaterialNode, MaterialNode.OPACITY);
var materialSpecular = nodeImmutable(MaterialNode, MaterialNode.SPECULAR);
var materialSpecularIntensity = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_INTENSITY);
var materialSpecularColor = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_COLOR);
var materialSpecularStrength = nodeImmutable(MaterialNode, MaterialNode.SPECULAR_STRENGTH);
var materialReflectivity = nodeImmutable(MaterialNode, MaterialNode.REFLECTIVITY);
var materialRoughness = nodeImmutable(MaterialNode, MaterialNode.ROUGHNESS);
var materialMetalness = nodeImmutable(MaterialNode, MaterialNode.METALNESS);
var materialNormal = nodeImmutable(MaterialNode, MaterialNode.NORMAL).context({ getUV: null });
var materialClearcoat = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT);
var materialClearcoatRoughness = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS);
var materialClearcoatNormal = nodeImmutable(MaterialNode, MaterialNode.CLEARCOAT_NORMAL).context({ getUV: null });
var materialRotation = nodeImmutable(MaterialNode, MaterialNode.ROTATION);
var materialSheen = nodeImmutable(MaterialNode, MaterialNode.SHEEN);
var materialSheenRoughness = nodeImmutable(MaterialNode, MaterialNode.SHEEN_ROUGHNESS);
var materialAnisotropy = nodeImmutable(MaterialNode, MaterialNode.ANISOTROPY);
var materialIridescence = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE);
var materialIridescenceIOR = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_IOR);
var materialIridescenceThickness = nodeImmutable(MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS);
var materialTransmission = nodeImmutable(MaterialNode, MaterialNode.TRANSMISSION);
var materialThickness = nodeImmutable(MaterialNode, MaterialNode.THICKNESS);
var materialIOR = nodeImmutable(MaterialNode, MaterialNode.IOR);
var materialAttenuationDistance = nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_DISTANCE);
var materialAttenuationColor = nodeImmutable(MaterialNode, MaterialNode.ATTENUATION_COLOR);
var materialLineScale = nodeImmutable(MaterialNode, MaterialNode.LINE_SCALE);
var materialLineDashSize = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_SIZE);
var materialLineGapSize = nodeImmutable(MaterialNode, MaterialNode.LINE_GAP_SIZE);
var materialLineWidth = nodeImmutable(MaterialNode, MaterialNode.LINE_WIDTH);
var materialLineDashOffset = nodeImmutable(MaterialNode, MaterialNode.LINE_DASH_OFFSET);
var materialPointWidth = nodeImmutable(MaterialNode, MaterialNode.POINT_WIDTH);
var materialDispersion = nodeImmutable(MaterialNode, MaterialNode.DISPERSION);
var materialLightMap = nodeImmutable(MaterialNode, MaterialNode.LIGHT_MAP);
var materialAOMap = nodeImmutable(MaterialNode, MaterialNode.AO_MAP);
nodeImmutable(MaterialNode, MaterialNode.REFRACTION_RATIO);
var materialAnisotropyVector = uniform(new Vector22()).onReference(function(frame) {
  return frame.material;
}).onRenderUpdate(function({ material }) {
  this.value.set(material.anisotropy * Math.cos(material.anisotropyRotation), material.anisotropy * Math.sin(material.anisotropyRotation));
});
var ModelViewProjectionNode = class extends TempNode {
  constructor(positionNode = null) {
    super("vec4");
    this.positionNode = positionNode;
  }
  setup(builder) {
    if (builder.shaderStage === "fragment") {
      return varying(builder.context.mvp);
    }
    const position = this.positionNode || positionLocal;
    return cameraProjectionMatrix.mul(modelViewMatrix).mul(position);
  }
};
ModelViewProjectionNode.type = registerNode("ModelViewProjection", ModelViewProjectionNode);
var modelViewProjection = nodeProxy(ModelViewProjectionNode);
var IndexNode = class _IndexNode extends Node2 {
  constructor(scope) {
    super("uint");
    this.scope = scope;
    this.isInstanceIndexNode = true;
  }
  generate(builder) {
    const nodeType = this.getNodeType(builder);
    const scope = this.scope;
    let propertyName;
    if (scope === _IndexNode.VERTEX) {
      propertyName = builder.getVertexIndex();
    } else if (scope === _IndexNode.INSTANCE) {
      propertyName = builder.getInstanceIndex();
    } else if (scope === _IndexNode.DRAW) {
      propertyName = builder.getDrawIndex();
    } else if (scope === _IndexNode.INVOCATION_LOCAL) {
      propertyName = builder.getInvocationLocalIndex();
    } else {
      throw new Error("THREE.IndexNode: Unknown scope: " + scope);
    }
    let output2;
    if (builder.shaderStage === "vertex" || builder.shaderStage === "compute") {
      output2 = propertyName;
    } else {
      const nodeVarying = varying(this);
      output2 = nodeVarying.build(builder, nodeType);
    }
    return output2;
  }
};
IndexNode.VERTEX = "vertex";
IndexNode.INSTANCE = "instance";
IndexNode.INVOCATION_LOCAL = "invocationLocal";
IndexNode.DRAW = "draw";
IndexNode.type = registerNode("Index", IndexNode);
var vertexIndex = nodeImmutable(IndexNode, IndexNode.VERTEX);
var instanceIndex = nodeImmutable(IndexNode, IndexNode.INSTANCE);
var invocationLocalIndex = nodeImmutable(IndexNode, IndexNode.INVOCATION_LOCAL);
var drawIndex = nodeImmutable(IndexNode, IndexNode.DRAW);
var InstancedInterleavedBuffer2 = class extends InterleavedBuffer2 {
  constructor(array3, stride, meshPerAttribute = 1) {
    super(array3, stride);
    this.isInstancedInterleavedBuffer = true;
    this.meshPerAttribute = meshPerAttribute;
  }
  copy(source) {
    super.copy(source);
    this.meshPerAttribute = source.meshPerAttribute;
    return this;
  }
  clone(data) {
    const ib = super.clone(data);
    ib.meshPerAttribute = this.meshPerAttribute;
    return ib;
  }
  toJSON(data) {
    const json = super.toJSON(data);
    json.isInstancedInterleavedBuffer = true;
    json.meshPerAttribute = this.meshPerAttribute;
    return json;
  }
};
var InstanceNode = class extends Node2 {
  constructor(instanceMesh) {
    super("void");
    this.instanceMesh = instanceMesh;
    this.instanceMatrixNode = null;
    this.instanceColorNode = null;
    this.updateType = NodeUpdateType.FRAME;
    this.buffer = null;
    this.bufferColor = null;
  }
  setup(builder) {
    let instanceMatrixNode = this.instanceMatrixNode;
    let instanceColorNode = this.instanceColorNode;
    const instanceMesh = this.instanceMesh;
    if (instanceMatrixNode === null) {
      const instanceAttribute = instanceMesh.instanceMatrix;
      if (instanceMesh.count <= 1e3) {
        instanceMatrixNode = buffer(instanceAttribute.array, "mat4", instanceMesh.count).element(instanceIndex);
      } else {
        const buffer2 = new InstancedInterleavedBuffer2(instanceAttribute.array, 16, 1);
        this.buffer = buffer2;
        const bufferFn = instanceAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;
        const instanceBuffers = [
          // F.Signature -> bufferAttribute( array, type, stride, offset )
          bufferFn(buffer2, "vec4", 16, 0),
          bufferFn(buffer2, "vec4", 16, 4),
          bufferFn(buffer2, "vec4", 16, 8),
          bufferFn(buffer2, "vec4", 16, 12)
        ];
        instanceMatrixNode = mat4(...instanceBuffers);
      }
      this.instanceMatrixNode = instanceMatrixNode;
    }
    const instanceColorAttribute = instanceMesh.instanceColor;
    if (instanceColorAttribute && instanceColorNode === null) {
      const buffer2 = new InstancedBufferAttribute2(instanceColorAttribute.array, 3);
      const bufferFn = instanceColorAttribute.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;
      this.bufferColor = buffer2;
      instanceColorNode = vec3(bufferFn(buffer2, "vec3", 3, 0));
      this.instanceColorNode = instanceColorNode;
    }
    const instancePosition = instanceMatrixNode.mul(positionLocal).xyz;
    positionLocal.assign(instancePosition);
    if (builder.hasGeometryAttribute("normal")) {
      const m2 = mat3(instanceMatrixNode);
      const transformedNormal = normalLocal.div(vec3(m2[0].dot(m2[0]), m2[1].dot(m2[1]), m2[2].dot(m2[2])));
      const instanceNormal = m2.mul(transformedNormal).xyz;
      normalLocal.assign(instanceNormal);
    }
    if (this.instanceColorNode !== null) {
      varyingProperty("vec3", "vInstanceColor").assign(this.instanceColorNode);
    }
  }
  update() {
    if (this.instanceMesh.instanceMatrix.usage !== DynamicDrawUsage && this.buffer != null && this.instanceMesh.instanceMatrix.version !== this.buffer.version) {
      this.buffer.version = this.instanceMesh.instanceMatrix.version;
    }
    if (this.instanceMesh.instanceColor && this.instanceMesh.instanceColor.usage !== DynamicDrawUsage && this.bufferColor != null && this.instanceMesh.instanceColor.version !== this.bufferColor.version) {
      this.bufferColor.version = this.instanceMesh.instanceColor.version;
    }
  }
};
InstanceNode.type = registerNode("Instance", InstanceNode);
var instance = nodeProxy(InstanceNode);
var BatchNode = class extends Node2 {
  constructor(batchMesh) {
    super("void");
    this.batchMesh = batchMesh;
    this.batchingIdNode = null;
  }
  setup(builder) {
    if (this.batchingIdNode === null) {
      if (builder.getDrawIndex() === null) {
        this.batchingIdNode = instanceIndex;
      } else {
        this.batchingIdNode = drawIndex;
      }
    }
    const getIndirectIndex = Fn(([id2]) => {
      const size2 = textureSize(textureLoad(this.batchMesh._indirectTexture), 0);
      const x3 = int(id2).modInt(int(size2));
      const y3 = int(id2).div(int(size2));
      return textureLoad(this.batchMesh._indirectTexture, ivec2(x3, y3)).x;
    }).setLayout({
      name: "getIndirectIndex",
      type: "uint",
      inputs: [
        { name: "id", type: "int" }
      ]
    });
    const indirectId = getIndirectIndex(int(this.batchingIdNode));
    const matricesTexture = this.batchMesh._matricesTexture;
    const size = textureSize(textureLoad(matricesTexture), 0);
    const j2 = float(indirectId).mul(4).toInt().toVar();
    const x2 = j2.modInt(size);
    const y2 = j2.div(int(size));
    const batchingMatrix = mat4(
      textureLoad(matricesTexture, ivec2(x2, y2)),
      textureLoad(matricesTexture, ivec2(x2.add(1), y2)),
      textureLoad(matricesTexture, ivec2(x2.add(2), y2)),
      textureLoad(matricesTexture, ivec2(x2.add(3), y2))
    );
    const colorsTexture = this.batchMesh._colorsTexture;
    if (colorsTexture !== null) {
      const getBatchingColor = Fn(([id2]) => {
        const size2 = textureSize(textureLoad(colorsTexture), 0).x;
        const j3 = id2;
        const x3 = j3.modInt(size2);
        const y3 = j3.div(size2);
        return textureLoad(colorsTexture, ivec2(x3, y3)).rgb;
      }).setLayout({
        name: "getBatchingColor",
        type: "vec3",
        inputs: [
          { name: "id", type: "int" }
        ]
      });
      const color3 = getBatchingColor(indirectId);
      varyingProperty("vec3", "vBatchColor").assign(color3);
    }
    const bm = mat3(batchingMatrix);
    positionLocal.assign(batchingMatrix.mul(positionLocal));
    const transformedNormal = normalLocal.div(vec3(bm[0].dot(bm[0]), bm[1].dot(bm[1]), bm[2].dot(bm[2])));
    const batchingNormal = bm.mul(transformedNormal).xyz;
    normalLocal.assign(batchingNormal);
    if (builder.hasGeometryAttribute("tangent")) {
      tangentLocal.mulAssign(bm);
    }
  }
};
BatchNode.type = registerNode("Batch", BatchNode);
var batch = nodeProxy(BatchNode);
var _frameId = /* @__PURE__ */ new WeakMap();
var SkinningNode = class extends Node2 {
  constructor(skinnedMesh, useReference = false) {
    super("void");
    this.skinnedMesh = skinnedMesh;
    this.useReference = useReference;
    this.updateType = NodeUpdateType.OBJECT;
    this.skinIndexNode = attribute("skinIndex", "uvec4");
    this.skinWeightNode = attribute("skinWeight", "vec4");
    let bindMatrixNode, bindMatrixInverseNode, boneMatricesNode;
    if (useReference) {
      bindMatrixNode = reference("bindMatrix", "mat4");
      bindMatrixInverseNode = reference("bindMatrixInverse", "mat4");
      boneMatricesNode = referenceBuffer("skeleton.boneMatrices", "mat4", skinnedMesh.skeleton.bones.length);
    } else {
      bindMatrixNode = uniform(skinnedMesh.bindMatrix, "mat4");
      bindMatrixInverseNode = uniform(skinnedMesh.bindMatrixInverse, "mat4");
      boneMatricesNode = buffer(skinnedMesh.skeleton.boneMatrices, "mat4", skinnedMesh.skeleton.bones.length);
    }
    this.bindMatrixNode = bindMatrixNode;
    this.bindMatrixInverseNode = bindMatrixInverseNode;
    this.boneMatricesNode = boneMatricesNode;
    this.previousBoneMatricesNode = null;
  }
  getSkinnedPosition(boneMatrices = this.boneMatricesNode, position = positionLocal) {
    const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;
    const boneMatX = boneMatrices.element(skinIndexNode.x);
    const boneMatY = boneMatrices.element(skinIndexNode.y);
    const boneMatZ = boneMatrices.element(skinIndexNode.z);
    const boneMatW = boneMatrices.element(skinIndexNode.w);
    const skinVertex = bindMatrixNode.mul(position);
    const skinned = add3(
      boneMatX.mul(skinWeightNode.x).mul(skinVertex),
      boneMatY.mul(skinWeightNode.y).mul(skinVertex),
      boneMatZ.mul(skinWeightNode.z).mul(skinVertex),
      boneMatW.mul(skinWeightNode.w).mul(skinVertex)
    );
    return bindMatrixInverseNode.mul(skinned).xyz;
  }
  getSkinnedNormal(boneMatrices = this.boneMatricesNode, normal2 = normalLocal) {
    const { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;
    const boneMatX = boneMatrices.element(skinIndexNode.x);
    const boneMatY = boneMatrices.element(skinIndexNode.y);
    const boneMatZ = boneMatrices.element(skinIndexNode.z);
    const boneMatW = boneMatrices.element(skinIndexNode.w);
    let skinMatrix = add3(
      skinWeightNode.x.mul(boneMatX),
      skinWeightNode.y.mul(boneMatY),
      skinWeightNode.z.mul(boneMatZ),
      skinWeightNode.w.mul(boneMatW)
    );
    skinMatrix = bindMatrixInverseNode.mul(skinMatrix).mul(bindMatrixNode);
    return skinMatrix.transformDirection(normal2).xyz;
  }
  getPreviousSkinnedPosition(builder) {
    const skinnedMesh = builder.object;
    if (this.previousBoneMatricesNode === null) {
      skinnedMesh.skeleton.previousBoneMatrices = new Float32Array(skinnedMesh.skeleton.boneMatrices);
      this.previousBoneMatricesNode = referenceBuffer("skeleton.previousBoneMatrices", "mat4", skinnedMesh.skeleton.bones.length);
    }
    return this.getSkinnedPosition(this.previousBoneMatricesNode, positionPrevious);
  }
  needsPreviousBoneMatrices(builder) {
    const mrt2 = builder.renderer.getMRT();
    return mrt2 && mrt2.has("velocity");
  }
  setup(builder) {
    if (this.needsPreviousBoneMatrices(builder)) {
      positionPrevious.assign(this.getPreviousSkinnedPosition(builder));
    }
    const skinPosition = this.getSkinnedPosition();
    positionLocal.assign(skinPosition);
    if (builder.hasGeometryAttribute("normal")) {
      const skinNormal = this.getSkinnedNormal();
      normalLocal.assign(skinNormal);
      if (builder.hasGeometryAttribute("tangent")) {
        tangentLocal.assign(skinNormal);
      }
    }
  }
  generate(builder, output2) {
    if (output2 !== "void") {
      return positionLocal.build(builder, output2);
    }
  }
  update(frame) {
    const object2 = this.useReference ? frame.object : this.skinnedMesh;
    const skeleton = object2.skeleton;
    if (_frameId.get(skeleton) === frame.frameId) return;
    _frameId.set(skeleton, frame.frameId);
    if (this.previousBoneMatricesNode !== null) skeleton.previousBoneMatrices.set(skeleton.boneMatrices);
    skeleton.update();
  }
};
SkinningNode.type = registerNode("Skinning", SkinningNode);
var skinningReference = (skinnedMesh) => nodeObject(new SkinningNode(skinnedMesh, true));
var LoopNode = class extends Node2 {
  constructor(params = []) {
    super();
    this.params = params;
  }
  getVarName(index7) {
    return String.fromCharCode("i".charCodeAt() + index7);
  }
  getProperties(builder) {
    const properties = builder.getNodeProperties(this);
    if (properties.stackNode !== void 0) return properties;
    const inputs = {};
    for (let i2 = 0, l2 = this.params.length - 1; i2 < l2; i2++) {
      const param = this.params[i2];
      const name = param.isNode !== true && param.name || this.getVarName(i2);
      const type = param.isNode !== true && param.type || "int";
      inputs[name] = expression(name, type);
    }
    const stack2 = builder.addStack();
    properties.returnsNode = this.params[this.params.length - 1](inputs, stack2, builder);
    properties.stackNode = stack2;
    builder.removeStack();
    return properties;
  }
  getNodeType(builder) {
    const { returnsNode } = this.getProperties(builder);
    return returnsNode ? returnsNode.getNodeType(builder) : "void";
  }
  setup(builder) {
    this.getProperties(builder);
  }
  generate(builder) {
    const properties = this.getProperties(builder);
    const params = this.params;
    const stackNode = properties.stackNode;
    for (let i2 = 0, l2 = params.length - 1; i2 < l2; i2++) {
      const param = params[i2];
      let start = null, end = null, name = null, type = null, condition = null, update20 = null;
      if (param.isNode) {
        type = "int";
        name = this.getVarName(i2);
        start = "0";
        end = param.build(builder, type);
        condition = "<";
      } else {
        type = param.type || "int";
        name = param.name || this.getVarName(i2);
        start = param.start;
        end = param.end;
        condition = param.condition;
        update20 = param.update;
        if (typeof start === "number") start = start.toString();
        else if (start && start.isNode) start = start.build(builder, type);
        if (typeof end === "number") end = end.toString();
        else if (end && end.isNode) end = end.build(builder, type);
        if (start !== void 0 && end === void 0) {
          start = start + " - 1";
          end = "0";
          condition = ">=";
        } else if (end !== void 0 && start === void 0) {
          start = "0";
          condition = "<";
        }
        if (condition === void 0) {
          if (Number(start) > Number(end)) {
            condition = ">=";
          } else {
            condition = "<";
          }
        }
      }
      const internalParam = { start, end, condition };
      const startSnippet = internalParam.start;
      const endSnippet = internalParam.end;
      let declarationSnippet = "";
      let conditionalSnippet = "";
      let updateSnippet = "";
      if (!update20) {
        if (type === "int" || type === "uint") {
          if (condition.includes("<")) update20 = "++";
          else update20 = "--";
        } else {
          if (condition.includes("<")) update20 = "+= 1.";
          else update20 = "-= 1.";
        }
      }
      declarationSnippet += builder.getVar(type, name) + " = " + startSnippet;
      conditionalSnippet += name + " " + condition + " " + endSnippet;
      updateSnippet += name + " " + update20;
      const forSnippet = `for ( ${declarationSnippet}; ${conditionalSnippet}; ${updateSnippet} )`;
      builder.addFlowCode((i2 === 0 ? "\n" : "") + builder.tab + forSnippet + " {\n\n").addFlowTab();
    }
    const stackSnippet = stackNode.build(builder, "void");
    const returnsSnippet = properties.returnsNode ? properties.returnsNode.build(builder) : "";
    builder.removeFlowTab().addFlowCode("\n" + builder.tab + stackSnippet);
    for (let i2 = 0, l2 = this.params.length - 1; i2 < l2; i2++) {
      builder.addFlowCode((i2 === 0 ? "" : builder.tab) + "}\n\n").removeFlowTab();
    }
    builder.addFlowTab();
    return returnsSnippet;
  }
};
LoopNode.type = registerNode("Loop", LoopNode);
var Loop = (...params) => nodeObject(new LoopNode(nodeArray(params, "int"))).append();
var Break = () => expression("break").append();
var _morphTextures = /* @__PURE__ */ new WeakMap();
var _morphVec4 = new Vector42();
var getMorph = Fn(({ bufferMap, influence, stride, width, depth: depth2, offset }) => {
  const texelIndex = int(vertexIndex).mul(stride).add(offset);
  const y2 = texelIndex.div(width);
  const x2 = texelIndex.sub(y2.mul(width));
  const bufferAttrib = textureLoad(bufferMap, ivec2(x2, y2)).depth(depth2);
  return bufferAttrib.mul(influence);
});
function getEntry(geometry) {
  const hasMorphPosition = geometry.morphAttributes.position !== void 0;
  const hasMorphNormals = geometry.morphAttributes.normal !== void 0;
  const hasMorphColors = geometry.morphAttributes.color !== void 0;
  const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
  const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
  let entry = _morphTextures.get(geometry);
  if (entry === void 0 || entry.count !== morphTargetsCount) {
    let disposeTexture = function() {
      bufferTexture.dispose();
      _morphTextures.delete(geometry);
      geometry.removeEventListener("dispose", disposeTexture);
    };
    if (entry !== void 0) entry.texture.dispose();
    const morphTargets = geometry.morphAttributes.position || [];
    const morphNormals = geometry.morphAttributes.normal || [];
    const morphColors = geometry.morphAttributes.color || [];
    let vertexDataCount = 0;
    if (hasMorphPosition === true) vertexDataCount = 1;
    if (hasMorphNormals === true) vertexDataCount = 2;
    if (hasMorphColors === true) vertexDataCount = 3;
    let width = geometry.attributes.position.count * vertexDataCount;
    let height = 1;
    const maxTextureSize = 4096;
    if (width > maxTextureSize) {
      height = Math.ceil(width / maxTextureSize);
      width = maxTextureSize;
    }
    const buffer2 = new Float32Array(width * height * 4 * morphTargetsCount);
    const bufferTexture = new DataArrayTexture2(buffer2, width, height, morphTargetsCount);
    bufferTexture.type = FloatType2;
    bufferTexture.needsUpdate = true;
    const vertexDataStride = vertexDataCount * 4;
    for (let i2 = 0; i2 < morphTargetsCount; i2++) {
      const morphTarget = morphTargets[i2];
      const morphNormal = morphNormals[i2];
      const morphColor = morphColors[i2];
      const offset = width * height * 4 * i2;
      for (let j2 = 0; j2 < morphTarget.count; j2++) {
        const stride = j2 * vertexDataStride;
        if (hasMorphPosition === true) {
          _morphVec4.fromBufferAttribute(morphTarget, j2);
          buffer2[offset + stride + 0] = _morphVec4.x;
          buffer2[offset + stride + 1] = _morphVec4.y;
          buffer2[offset + stride + 2] = _morphVec4.z;
          buffer2[offset + stride + 3] = 0;
        }
        if (hasMorphNormals === true) {
          _morphVec4.fromBufferAttribute(morphNormal, j2);
          buffer2[offset + stride + 4] = _morphVec4.x;
          buffer2[offset + stride + 5] = _morphVec4.y;
          buffer2[offset + stride + 6] = _morphVec4.z;
          buffer2[offset + stride + 7] = 0;
        }
        if (hasMorphColors === true) {
          _morphVec4.fromBufferAttribute(morphColor, j2);
          buffer2[offset + stride + 8] = _morphVec4.x;
          buffer2[offset + stride + 9] = _morphVec4.y;
          buffer2[offset + stride + 10] = _morphVec4.z;
          buffer2[offset + stride + 11] = morphColor.itemSize === 4 ? _morphVec4.w : 1;
        }
      }
    }
    entry = {
      count: morphTargetsCount,
      texture: bufferTexture,
      stride: vertexDataCount,
      size: new Vector22(width, height)
    };
    _morphTextures.set(geometry, entry);
    geometry.addEventListener("dispose", disposeTexture);
  }
  return entry;
}
var MorphNode = class extends Node2 {
  constructor(mesh) {
    super("void");
    this.mesh = mesh;
    this.morphBaseInfluence = uniform(1);
    this.updateType = NodeUpdateType.OBJECT;
  }
  setup(builder) {
    const { geometry } = builder;
    const hasMorphPosition = geometry.morphAttributes.position !== void 0;
    const hasMorphNormals = geometry.hasAttribute("normal") && geometry.morphAttributes.normal !== void 0;
    const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
    const morphTargetsCount = morphAttribute !== void 0 ? morphAttribute.length : 0;
    const { texture: bufferMap, stride, size } = getEntry(geometry);
    if (hasMorphPosition === true) positionLocal.mulAssign(this.morphBaseInfluence);
    if (hasMorphNormals === true) normalLocal.mulAssign(this.morphBaseInfluence);
    const width = int(size.width);
    Loop(morphTargetsCount, ({ i: i2 }) => {
      const influence = float(0).toVar();
      if (this.mesh.count > 1 && (this.mesh.morphTexture !== null && this.mesh.morphTexture !== void 0)) {
        influence.assign(textureLoad(this.mesh.morphTexture, ivec2(int(i2).add(1), int(instanceIndex))).r);
      } else {
        influence.assign(reference("morphTargetInfluences", "float").element(i2).toVar());
      }
      if (hasMorphPosition === true) {
        positionLocal.addAssign(getMorph({
          bufferMap,
          influence,
          stride,
          width,
          depth: i2,
          offset: int(0)
        }));
      }
      if (hasMorphNormals === true) {
        normalLocal.addAssign(getMorph({
          bufferMap,
          influence,
          stride,
          width,
          depth: i2,
          offset: int(1)
        }));
      }
    });
  }
  update() {
    const morphBaseInfluence = this.morphBaseInfluence;
    if (this.mesh.geometry.morphTargetsRelative) {
      morphBaseInfluence.value = 1;
    } else {
      morphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce((a2, b) => a2 + b, 0);
    }
  }
};
MorphNode.type = registerNode("Morph", MorphNode);
var morphReference = nodeProxy(MorphNode);
var sortLights = (lights2) => {
  return lights2.sort((a2, b) => a2.id - b.id);
};
var getLightNodeById = (id2, lightNodes) => {
  for (const lightNode of lightNodes) {
    if (lightNode.isAnalyticLightNode && lightNode.light.id === id2) {
      return lightNode;
    }
  }
  return null;
};
var LightsNode = class extends Node2 {
  constructor(lights2 = []) {
    super("vec3");
    this.totalDiffuseNode = vec3().toVar("totalDiffuse");
    this.totalSpecularNode = vec3().toVar("totalSpecular");
    this.outgoingLightNode = vec3().toVar("outgoingLight");
    this._lights = lights2;
    this._lightNodes = null;
    this._lightNodesHash = null;
    this.global = true;
  }
  getHash(builder) {
    if (this._lightNodesHash === null) {
      if (this._lightNodes === null) this.setupLightsNode(builder);
      const hash2 = [];
      for (const lightNode of this._lightNodes) {
        hash2.push(lightNode.getHash());
      }
      this._lightNodesHash = "lights-" + hash2.join(",");
    }
    return this._lightNodesHash;
  }
  analyze(builder) {
    const properties = builder.getDataFromNode(this);
    for (const node of properties.nodes) {
      node.build(builder);
    }
  }
  setupLightsNode(builder) {
    const lightNodes = [];
    const previousLightNodes = this._lightNodes;
    const lights2 = sortLights(this._lights);
    const nodeLibrary = builder.renderer.nodes.library;
    for (const light of lights2) {
      if (light.isNode) {
        lightNodes.push(nodeObject(light));
      } else {
        let lightNode = null;
        if (previousLightNodes !== null) {
          lightNode = getLightNodeById(light.id, previousLightNodes);
        }
        if (lightNode === null) {
          const lightNodeClass = nodeLibrary.getLightNodeClass(light.constructor);
          if (lightNodeClass === void 0) {
            console.warn(`LightsNode.setupNodeLights: Light node not found for ${light.constructor.name}`);
            continue;
          }
          lightNodes.push(nodeObject(new lightNodeClass(light)));
        }
      }
    }
    this._lightNodes = lightNodes;
  }
  setup(builder) {
    if (this._lightNodes === null) this.setupLightsNode(builder);
    const context2 = builder.context;
    const lightingModel = context2.lightingModel;
    let outgoingLightNode = this.outgoingLightNode;
    if (lightingModel) {
      const { _lightNodes, totalDiffuseNode, totalSpecularNode } = this;
      context2.outgoingLight = outgoingLightNode;
      const stack2 = builder.addStack();
      const properties = builder.getDataFromNode(this);
      properties.nodes = stack2.nodes;
      lightingModel.start(context2, stack2, builder);
      for (const lightNode of _lightNodes) {
        lightNode.build(builder);
      }
      lightingModel.indirect(context2, stack2, builder);
      const { backdrop, backdropAlpha } = context2;
      const { directDiffuse, directSpecular, indirectDiffuse, indirectSpecular } = context2.reflectedLight;
      let totalDiffuse = directDiffuse.add(indirectDiffuse);
      if (backdrop !== null) {
        if (backdropAlpha !== null) {
          totalDiffuse = vec3(backdropAlpha.mix(totalDiffuse, backdrop));
        } else {
          totalDiffuse = vec3(backdrop);
        }
        context2.material.transparent = true;
      }
      totalDiffuseNode.assign(totalDiffuse);
      totalSpecularNode.assign(directSpecular.add(indirectSpecular));
      outgoingLightNode.assign(totalDiffuseNode.add(totalSpecularNode));
      lightingModel.finish(context2, stack2, builder);
      outgoingLightNode = outgoingLightNode.bypass(builder.removeStack());
    }
    return outgoingLightNode;
  }
  setLights(lights2) {
    this._lights = lights2;
    this._lightNodes = null;
    this._lightNodesHash = null;
    return this;
  }
  getLights() {
    return this._lights;
  }
};
LightsNode.type = registerNode("Lights", LightsNode);
var lights = nodeProxy(LightsNode);
var LightingNode = class extends Node2 {
  constructor() {
    super("vec3");
    this.isLightingNode = true;
  }
  generate() {
    console.warn("Abstract function.");
  }
};
LightingNode.type = registerNode("Lighting", LightingNode);
var AONode = class extends LightingNode {
  constructor(aoNode = null) {
    super();
    this.aoNode = aoNode;
  }
  setup(builder) {
    builder.context.ambientOcclusion.mulAssign(this.aoNode);
  }
};
AONode.type = registerNode("AO", AONode);
var LightingContextNode = class extends ContextNode {
  constructor(node, lightingModel = null, backdropNode = null, backdropAlphaNode = null) {
    super(node);
    this.lightingModel = lightingModel;
    this.backdropNode = backdropNode;
    this.backdropAlphaNode = backdropAlphaNode;
    this._value = null;
  }
  getContext() {
    const { backdropNode, backdropAlphaNode } = this;
    const directDiffuse = vec3().toVar("directDiffuse"), directSpecular = vec3().toVar("directSpecular"), indirectDiffuse = vec3().toVar("indirectDiffuse"), indirectSpecular = vec3().toVar("indirectSpecular");
    const reflectedLight = {
      directDiffuse,
      directSpecular,
      indirectDiffuse,
      indirectSpecular
    };
    const context2 = {
      radiance: vec3().toVar("radiance"),
      irradiance: vec3().toVar("irradiance"),
      iblIrradiance: vec3().toVar("iblIrradiance"),
      ambientOcclusion: float(1).toVar("ambientOcclusion"),
      reflectedLight,
      backdrop: backdropNode,
      backdropAlpha: backdropAlphaNode
    };
    return context2;
  }
  setup(builder) {
    this.value = this._value || (this._value = this.getContext());
    this.value.lightingModel = this.lightingModel || builder.context.lightingModel;
    return super.setup(builder);
  }
};
LightingContextNode.type = registerNode("LightingContext", LightingContextNode);
var lightingContext = nodeProxy(LightingContextNode);
var IrradianceNode = class extends LightingNode {
  constructor(node) {
    super();
    this.node = node;
  }
  setup(builder) {
    builder.context.irradiance.addAssign(this.node);
  }
};
IrradianceNode.type = registerNode("Irradiance", IrradianceNode);
var resolution;
var viewportResult;
var ViewportNode = class _ViewportNode extends Node2 {
  constructor(scope) {
    super();
    this.scope = scope;
    this.isViewportNode = true;
  }
  getNodeType() {
    if (this.scope === _ViewportNode.VIEWPORT) return "vec4";
    else return "vec2";
  }
  getUpdateType() {
    let updateType = NodeUpdateType.NONE;
    if (this.scope === _ViewportNode.RESOLUTION || this.scope === _ViewportNode.VIEWPORT) {
      updateType = NodeUpdateType.RENDER;
    }
    this.updateType = updateType;
    return updateType;
  }
  update({ renderer: renderer3 }) {
    if (this.scope === _ViewportNode.VIEWPORT) {
      renderer3.getViewport(viewportResult);
    } else {
      renderer3.getDrawingBufferSize(resolution);
    }
  }
  setup() {
    const scope = this.scope;
    let output2 = null;
    if (scope === _ViewportNode.RESOLUTION) {
      output2 = uniform(resolution || (resolution = new Vector22()));
    } else if (scope === _ViewportNode.VIEWPORT) {
      output2 = uniform(viewportResult || (viewportResult = new Vector42()));
    } else {
      output2 = vec2(viewportCoordinate.div(viewportResolution));
    }
    return output2;
  }
  generate(builder) {
    if (this.scope === _ViewportNode.COORDINATE) {
      let coord = builder.getFragCoord();
      if (builder.isFlipY()) {
        const resolution3 = builder.getNodeProperties(viewportResolution).outputNode.build(builder);
        coord = `${builder.getType("vec2")}( ${coord}.x, ${resolution3}.y - ${coord}.y )`;
      }
      return coord;
    }
    return super.generate(builder);
  }
};
ViewportNode.COORDINATE = "coordinate";
ViewportNode.RESOLUTION = "resolution";
ViewportNode.VIEWPORT = "viewport";
ViewportNode.UV = "uv";
ViewportNode.type = registerNode("Viewport", ViewportNode);
var viewportCoordinate = nodeImmutable(ViewportNode, ViewportNode.COORDINATE);
var viewportResolution = nodeImmutable(ViewportNode, ViewportNode.RESOLUTION);
var viewport = nodeImmutable(ViewportNode, ViewportNode.VIEWPORT);
var viewportUV = nodeImmutable(ViewportNode, ViewportNode.UV);
var viewportTopLeft = Fn(() => {
  console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "viewportUV" instead.');
  return viewportUV;
}, "vec2").once()();
var viewportBottomLeft = Fn(() => {
  console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "viewportUV.flipY()" instead.');
  return viewportUV.flipY();
}, "vec2").once()();
var _size$a = new Vector22();
var ViewportTextureNode = class extends TextureNode {
  constructor(uvNode = viewportUV, levelNode = null, framebufferTexture = null) {
    if (framebufferTexture === null) {
      framebufferTexture = new FramebufferTexture();
      framebufferTexture.minFilter = LinearMipmapLinearFilter2;
    }
    super(framebufferTexture, uvNode, levelNode);
    this.generateMipmaps = false;
    this.isOutputTextureNode = true;
    this.updateBeforeType = NodeUpdateType.FRAME;
  }
  updateBefore(frame) {
    const renderer3 = frame.renderer;
    renderer3.getDrawingBufferSize(_size$a);
    const framebufferTexture = this.value;
    if (framebufferTexture.image.width !== _size$a.width || framebufferTexture.image.height !== _size$a.height) {
      framebufferTexture.image.width = _size$a.width;
      framebufferTexture.image.height = _size$a.height;
      framebufferTexture.needsUpdate = true;
    }
    const currentGenerateMipmaps = framebufferTexture.generateMipmaps;
    framebufferTexture.generateMipmaps = this.generateMipmaps;
    renderer3.copyFramebufferToTexture(framebufferTexture);
    framebufferTexture.generateMipmaps = currentGenerateMipmaps;
  }
  clone() {
    const viewportTextureNode = new this.constructor(this.uvNode, this.levelNode, this.value);
    viewportTextureNode.generateMipmaps = this.generateMipmaps;
    return viewportTextureNode;
  }
};
ViewportTextureNode.type = registerNode("ViewportTexture", ViewportTextureNode);
var viewportTexture = nodeProxy(ViewportTextureNode);
var viewportMipTexture = nodeProxy(ViewportTextureNode, null, null, { generateMipmaps: true });
var sharedDepthbuffer = null;
var ViewportDepthTextureNode = class extends ViewportTextureNode {
  constructor(uvNode = viewportUV, levelNode = null) {
    if (sharedDepthbuffer === null) {
      sharedDepthbuffer = new DepthTexture2();
    }
    super(uvNode, levelNode, sharedDepthbuffer);
  }
};
ViewportDepthTextureNode.type = registerNode("ViewportDepthTexture", ViewportDepthTextureNode);
var viewportDepthTexture = nodeProxy(ViewportDepthTextureNode);
var ViewportDepthNode = class _ViewportDepthNode extends Node2 {
  constructor(scope, valueNode = null) {
    super("float");
    this.scope = scope;
    this.valueNode = valueNode;
    this.isViewportDepthNode = true;
  }
  generate(builder) {
    const { scope } = this;
    if (scope === _ViewportDepthNode.DEPTH_BASE) {
      return builder.getFragDepth();
    }
    return super.generate(builder);
  }
  setup({ camera: camera3 }) {
    const { scope } = this;
    const value = this.valueNode;
    let node = null;
    if (scope === _ViewportDepthNode.DEPTH_BASE) {
      if (value !== null) {
        node = depthBase().assign(value);
      }
    } else if (scope === _ViewportDepthNode.DEPTH) {
      if (camera3.isPerspectiveCamera) {
        node = viewZToPerspectiveDepth(positionView.z, cameraNear, cameraFar);
      } else {
        node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
      }
    } else if (scope === _ViewportDepthNode.LINEAR_DEPTH) {
      if (value !== null) {
        if (camera3.isPerspectiveCamera) {
          const viewZ = perspectiveDepthToViewZ(value, cameraNear, cameraFar);
          node = viewZToOrthographicDepth(viewZ, cameraNear, cameraFar);
        } else {
          node = value;
        }
      } else {
        node = viewZToOrthographicDepth(positionView.z, cameraNear, cameraFar);
      }
    }
    return node;
  }
};
ViewportDepthNode.DEPTH_BASE = "depthBase";
ViewportDepthNode.DEPTH = "depth";
ViewportDepthNode.LINEAR_DEPTH = "linearDepth";
ViewportDepthNode.type = registerNode("ViewportDepth", ViewportDepthNode);
var viewZToOrthographicDepth = (viewZ, near, far) => viewZ.add(near).div(near.sub(far));
var viewZToPerspectiveDepth = (viewZ, near, far) => near.add(viewZ).mul(far).div(far.sub(near).mul(viewZ));
var perspectiveDepthToViewZ = (depth2, near, far) => near.mul(far).div(far.sub(near).mul(depth2).sub(far));
var depthBase = nodeProxy(ViewportDepthNode, ViewportDepthNode.DEPTH_BASE);
var depth = nodeImmutable(ViewportDepthNode, ViewportDepthNode.DEPTH);
var linearDepth = nodeProxy(ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH);
var viewportLinearDepth = linearDepth(viewportDepthTexture());
depth.assign = (value) => depthBase(value);
var ClippingNode = class _ClippingNode extends Node2 {
  constructor(scope = _ClippingNode.DEFAULT) {
    super();
    this.scope = scope;
  }
  setup(builder) {
    super.setup(builder);
    const clippingContext = builder.clippingContext;
    const { localClipIntersection, localClippingCount, globalClippingCount } = clippingContext;
    const numClippingPlanes = globalClippingCount + localClippingCount;
    const numUnionClippingPlanes = localClipIntersection ? numClippingPlanes - localClippingCount : numClippingPlanes;
    if (this.scope === _ClippingNode.ALPHA_TO_COVERAGE) {
      return this.setupAlphaToCoverage(clippingContext.planes, numClippingPlanes, numUnionClippingPlanes);
    } else {
      return this.setupDefault(clippingContext.planes, numClippingPlanes, numUnionClippingPlanes);
    }
  }
  setupAlphaToCoverage(planes, numClippingPlanes, numUnionClippingPlanes) {
    return Fn(() => {
      const clippingPlanes = uniformArray(planes);
      const distanceToPlane = property("float", "distanceToPlane");
      const distanceGradient = property("float", "distanceToGradient");
      const clipOpacity = property("float", "clipOpacity");
      clipOpacity.assign(1);
      let plane;
      Loop(numUnionClippingPlanes, ({ i: i2 }) => {
        plane = clippingPlanes.element(i2);
        distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));
        distanceGradient.assign(distanceToPlane.fwidth().div(2));
        clipOpacity.mulAssign(smoothstep2(distanceGradient.negate(), distanceGradient, distanceToPlane));
        clipOpacity.equal(0).discard();
      });
      if (numUnionClippingPlanes < numClippingPlanes) {
        const unionClipOpacity = property("float", "unionclipOpacity");
        unionClipOpacity.assign(1);
        Loop({ start: numUnionClippingPlanes, end: numClippingPlanes }, ({ i: i2 }) => {
          plane = clippingPlanes.element(i2);
          distanceToPlane.assign(positionView.dot(plane.xyz).negate().add(plane.w));
          distanceGradient.assign(distanceToPlane.fwidth().div(2));
          unionClipOpacity.mulAssign(smoothstep2(distanceGradient.negate(), distanceGradient, distanceToPlane).oneMinus());
        });
        clipOpacity.mulAssign(unionClipOpacity.oneMinus());
      }
      diffuseColor.a.mulAssign(clipOpacity);
      diffuseColor.a.equal(0).discard();
    })();
  }
  setupDefault(planes, numClippingPlanes, numUnionClippingPlanes) {
    return Fn(() => {
      const clippingPlanes = uniformArray(planes);
      let plane;
      Loop(numUnionClippingPlanes, ({ i: i2 }) => {
        plane = clippingPlanes.element(i2);
        positionView.dot(plane.xyz).greaterThan(plane.w).discard();
      });
      if (numUnionClippingPlanes < numClippingPlanes) {
        const clipped = property("bool", "clipped");
        clipped.assign(true);
        Loop({ start: numUnionClippingPlanes, end: numClippingPlanes }, ({ i: i2 }) => {
          plane = clippingPlanes.element(i2);
          clipped.assign(positionView.dot(plane.xyz).greaterThan(plane.w).and(clipped));
        });
        clipped.discard();
      }
    })();
  }
};
ClippingNode.ALPHA_TO_COVERAGE = "alphaToCoverage";
ClippingNode.DEFAULT = "default";
ClippingNode.type = registerNode("Clipping", ClippingNode);
var clipping = () => nodeObject(new ClippingNode());
var clippingAlpha = () => nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE));
var NodeMaterials = /* @__PURE__ */ new Map();
var NodeMaterial = class extends Material2 {
  constructor() {
    super();
    this.isNodeMaterial = true;
    this.type = this.constructor.type;
    this.forceSinglePass = false;
    this.fog = true;
    this.lights = false;
    this.lightsNode = null;
    this.envNode = null;
    this.aoNode = null;
    this.colorNode = null;
    this.normalNode = null;
    this.opacityNode = null;
    this.backdropNode = null;
    this.backdropAlphaNode = null;
    this.alphaTestNode = null;
    this.positionNode = null;
    this.depthNode = null;
    this.shadowNode = null;
    this.shadowPositionNode = null;
    this.outputNode = null;
    this.mrtNode = null;
    this.fragmentNode = null;
    this.vertexNode = null;
  }
  customProgramCacheKey() {
    return this.type + getCacheKey$1(this);
  }
  build(builder) {
    this.setup(builder);
  }
  setup(builder) {
    builder.context.setupNormal = () => this.setupNormal(builder);
    builder.addStack();
    builder.stack.outputNode = this.vertexNode || this.setupPosition(builder);
    builder.addFlow("vertex", builder.removeStack());
    builder.addStack();
    let resultNode;
    const clippingNode = this.setupClipping(builder);
    if (this.depthWrite === true) this.setupDepth(builder);
    if (this.fragmentNode === null) {
      this.setupDiffuseColor(builder);
      this.setupVariants(builder);
      const outgoingLightNode = this.setupLighting(builder);
      if (clippingNode !== null) builder.stack.add(clippingNode);
      const basicOutput = vec4(outgoingLightNode, diffuseColor.a).max(0);
      resultNode = this.setupOutput(builder, basicOutput);
      output.assign(resultNode);
      if (this.outputNode !== null) resultNode = this.outputNode;
      const renderTarget = builder.renderer.getRenderTarget();
      if (renderTarget !== null) {
        const mrt2 = builder.renderer.getMRT();
        const materialMRT = this.mrtNode;
        if (mrt2 !== null) {
          resultNode = mrt2;
          if (materialMRT !== null) {
            resultNode = mrt2.merge(materialMRT);
          }
        } else if (materialMRT !== null) {
          resultNode = materialMRT;
        }
      }
    } else {
      let fragmentNode = this.fragmentNode;
      if (fragmentNode.isOutputStructNode !== true) {
        fragmentNode = vec4(fragmentNode);
      }
      resultNode = this.setupOutput(builder, fragmentNode);
    }
    builder.stack.outputNode = resultNode;
    builder.addFlow("fragment", builder.removeStack());
  }
  setupClipping(builder) {
    if (builder.clippingContext === null) return null;
    const { globalClippingCount, localClippingCount } = builder.clippingContext;
    let result = null;
    if (globalClippingCount || localClippingCount) {
      if (this.alphaToCoverage) {
        result = clippingAlpha();
      } else {
        builder.stack.add(clipping());
      }
    }
    return result;
  }
  setupDepth(builder) {
    const { renderer: renderer3 } = builder;
    let depthNode = this.depthNode;
    if (depthNode === null) {
      const mrt2 = renderer3.getMRT();
      if (mrt2 && mrt2.has("depth")) {
        depthNode = mrt2.get("depth");
      } else if (renderer3.logarithmicDepthBuffer === true) {
        const fragDepth = modelViewProjection().w.add(1);
        depthNode = fragDepth.log2().mul(cameraLogDepth).mul(0.5);
      }
    }
    if (depthNode !== null) {
      depth.assign(depthNode).append();
    }
  }
  setupPosition(builder) {
    const { object: object2 } = builder;
    const geometry = object2.geometry;
    builder.addStack();
    if (geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color) {
      morphReference(object2).append();
    }
    if (object2.isSkinnedMesh === true) {
      skinningReference(object2).append();
    }
    if (this.displacementMap) {
      const displacementMap = materialReference("displacementMap", "texture");
      const displacementScale = materialReference("displacementScale", "float");
      const displacementBias = materialReference("displacementBias", "float");
      positionLocal.addAssign(normalLocal.normalize().mul(displacementMap.x.mul(displacementScale).add(displacementBias)));
    }
    if (object2.isBatchedMesh) {
      batch(object2).append();
    }
    if (object2.instanceMatrix && object2.instanceMatrix.isInstancedBufferAttribute === true) {
      instance(object2).append();
    }
    if (this.positionNode !== null) {
      positionLocal.assign(this.positionNode);
    }
    const mvp = modelViewProjection();
    builder.context.vertex = builder.removeStack();
    builder.context.mvp = mvp;
    return mvp;
  }
  setupDiffuseColor({ object: object2, geometry }) {
    let colorNode = this.colorNode ? vec4(this.colorNode) : materialColor;
    if (this.vertexColors === true && geometry.hasAttribute("color")) {
      colorNode = vec4(colorNode.xyz.mul(attribute("color", "vec3")), colorNode.a);
    }
    if (object2.instanceColor) {
      const instanceColor = varyingProperty("vec3", "vInstanceColor");
      colorNode = instanceColor.mul(colorNode);
    }
    if (object2.isBatchedMesh && object2._colorsTexture) {
      const batchColor = varyingProperty("vec3", "vBatchColor");
      colorNode = batchColor.mul(colorNode);
    }
    diffuseColor.assign(colorNode);
    const opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;
    diffuseColor.a.assign(diffuseColor.a.mul(opacityNode));
    if (this.alphaTestNode !== null || this.alphaTest > 0) {
      const alphaTestNode = this.alphaTestNode !== null ? float(this.alphaTestNode) : materialAlphaTest;
      diffuseColor.a.lessThanEqual(alphaTestNode).discard();
    }
    if (this.transparent === false && this.blending === NormalBlending2 && this.alphaToCoverage === false) {
      diffuseColor.a.assign(1);
    }
  }
  setupVariants() {
  }
  setupOutgoingLight() {
    return this.lights === true ? vec3(0) : diffuseColor.rgb;
  }
  setupNormal() {
    return this.normalNode ? vec3(this.normalNode) : materialNormal;
  }
  setupEnvironment() {
    let node = null;
    if (this.envNode) {
      node = this.envNode;
    } else if (this.envMap) {
      node = this.envMap.isCubeTexture ? materialReference("envMap", "cubeTexture") : materialReference("envMap", "texture");
    }
    return node;
  }
  setupLightMap(builder) {
    let node = null;
    if (builder.material.lightMap) {
      node = new IrradianceNode(materialLightMap);
    }
    return node;
  }
  setupLights(builder) {
    const materialLightsNode = [];
    const envNode = this.setupEnvironment(builder);
    if (envNode && envNode.isLightingNode) {
      materialLightsNode.push(envNode);
    }
    const lightMapNode = this.setupLightMap(builder);
    if (lightMapNode && lightMapNode.isLightingNode) {
      materialLightsNode.push(lightMapNode);
    }
    if (this.aoNode !== null || builder.material.aoMap) {
      const aoNode = this.aoNode !== null ? this.aoNode : materialAOMap;
      materialLightsNode.push(new AONode(aoNode));
    }
    let lightsN = this.lightsNode || builder.lightsNode;
    if (materialLightsNode.length > 0) {
      lightsN = lights([...lightsN.getLights(), ...materialLightsNode]);
    }
    return lightsN;
  }
  setupLightingModel() {
  }
  setupLighting(builder) {
    const { material } = builder;
    const { backdropNode, backdropAlphaNode, emissiveNode } = this;
    const lights2 = this.lights === true || this.lightsNode !== null;
    const lightsNode = lights2 ? this.setupLights(builder) : null;
    let outgoingLightNode = this.setupOutgoingLight(builder);
    if (lightsNode && lightsNode.getScope().getLights().length > 0) {
      const lightingModel = this.setupLightingModel(builder);
      outgoingLightNode = lightingContext(lightsNode, lightingModel, backdropNode, backdropAlphaNode);
    } else if (backdropNode !== null) {
      outgoingLightNode = vec3(backdropAlphaNode !== null ? mix(outgoingLightNode, backdropNode, backdropAlphaNode) : backdropNode);
    }
    if (emissiveNode && emissiveNode.isNode === true || material.emissive && material.emissive.isColor === true) {
      emissive.assign(vec3(emissiveNode ? emissiveNode : materialEmissive));
      outgoingLightNode = outgoingLightNode.add(emissive);
    }
    return outgoingLightNode;
  }
  setupOutput(builder, outputNode) {
    if (this.fog === true) {
      const fogNode = builder.fogNode;
      if (fogNode) outputNode = vec4(fogNode.mix(outputNode.rgb, fogNode.colorNode), outputNode.a);
    }
    return outputNode;
  }
  setDefaultValues(material) {
    for (const property2 in material) {
      const value = material[property2];
      if (this[property2] === void 0) {
        this[property2] = value;
        if (value && value.clone) this[property2] = value.clone();
      }
    }
    const descriptors = Object.getOwnPropertyDescriptors(material.constructor.prototype);
    for (const key in descriptors) {
      if (Object.getOwnPropertyDescriptor(this.constructor.prototype, key) === void 0 && descriptors[key].get !== void 0) {
        Object.defineProperty(this.constructor.prototype, key, descriptors[key]);
      }
    }
  }
  toJSON(meta) {
    const isRoot = meta === void 0 || typeof meta === "string";
    if (isRoot) {
      meta = {
        textures: {},
        images: {},
        nodes: {}
      };
    }
    const data = Material2.prototype.toJSON.call(this, meta);
    const nodeChildren = getNodeChildren(this);
    data.inputNodes = {};
    for (const { property: property2, childNode } of nodeChildren) {
      data.inputNodes[property2] = childNode.toJSON(meta).uuid;
    }
    function extractFromCache(cache2) {
      const values = [];
      for (const key in cache2) {
        const data2 = cache2[key];
        delete data2.metadata;
        values.push(data2);
      }
      return values;
    }
    if (isRoot) {
      const textures = extractFromCache(meta.textures);
      const images = extractFromCache(meta.images);
      const nodes = extractFromCache(meta.nodes);
      if (textures.length > 0) data.textures = textures;
      if (images.length > 0) data.images = images;
      if (nodes.length > 0) data.nodes = nodes;
    }
    return data;
  }
  copy(source) {
    this.lightsNode = source.lightsNode;
    this.envNode = source.envNode;
    this.colorNode = source.colorNode;
    this.normalNode = source.normalNode;
    this.opacityNode = source.opacityNode;
    this.backdropNode = source.backdropNode;
    this.backdropAlphaNode = source.backdropAlphaNode;
    this.alphaTestNode = source.alphaTestNode;
    this.positionNode = source.positionNode;
    this.depthNode = source.depthNode;
    this.shadowNode = source.shadowNode;
    this.shadowPositionNode = source.shadowPositionNode;
    this.outputNode = source.outputNode;
    this.mrtNode = source.mrtNode;
    this.fragmentNode = source.fragmentNode;
    this.vertexNode = source.vertexNode;
    return super.copy(source);
  }
};
NodeMaterial.type = registerNodeMaterial("", NodeMaterial);
function registerNodeMaterial(type, nodeMaterialClass) {
  const suffix = "NodeMaterial";
  const nodeMaterialType = type + suffix;
  if (typeof nodeMaterialClass !== "function") throw new Error(`THREE.Node: NodeMaterial class "${type}" is not a class.`);
  if (NodeMaterials.has(nodeMaterialType)) {
    console.warn(`THREE.Node: Redefinition of NodeMaterial class "${nodeMaterialType}".`);
    return;
  }
  if (type.slice(-suffix.length) === suffix) {
    console.warn(`THREE.NodeMaterial: NodeMaterial class ${nodeMaterialType} should not have '${suffix}' suffix.`);
    return;
  }
  NodeMaterials.set(nodeMaterialType, nodeMaterialClass);
  nodeMaterialClass.type = nodeMaterialType;
  return nodeMaterialType;
}
function createNodeMaterialFromType(type) {
  const Material3 = NodeMaterials.get(type);
  if (Material3 !== void 0) {
    return new Material3();
  }
}
var _defaultValues$e = new PointsMaterial2();
var InstancedPointsNodeMaterial = class extends NodeMaterial {
  constructor(params = {}) {
    super();
    this.lights = false;
    this.useAlphaToCoverage = true;
    this.useColor = params.vertexColors;
    this.pointWidth = 1;
    this.pointColorNode = null;
    this.pointWidthNode = null;
    this.setDefaultValues(_defaultValues$e);
    this.setupShaders();
    this.setValues(params);
  }
  setup(builder) {
    this.setupShaders();
    super.setup(builder);
  }
  setupShaders() {
    const useAlphaToCoverage = this.alphaToCoverage;
    const useColor = this.useColor;
    this.vertexNode = Fn(() => {
      varying(vec2(), "vUv").assign(uv());
      const instancePosition = attribute("instancePosition").xyz;
      const mvPos = property("vec4", "mvPos");
      mvPos.assign(modelViewMatrix.mul(vec4(instancePosition, 1)));
      const aspect3 = viewport.z.div(viewport.w);
      const clipPos = cameraProjectionMatrix.mul(mvPos);
      const offset = property("vec2", "offset");
      offset.assign(positionGeometry.xy);
      offset.mulAssign(this.pointWidthNode ? this.pointWidthNode : materialPointWidth);
      offset.assign(offset.div(viewport.z));
      offset.y.assign(offset.y.mul(aspect3));
      offset.assign(offset.mul(clipPos.w));
      clipPos.assign(clipPos.add(vec4(offset, 0, 0)));
      return clipPos;
    })();
    this.fragmentNode = Fn(() => {
      const vUv = varying(vec2(), "vUv");
      const alpha = property("float", "alpha");
      alpha.assign(1);
      const a2 = vUv.x;
      const b = vUv.y;
      const len2 = a2.mul(a2).add(b.mul(b));
      if (useAlphaToCoverage) {
        const dlen = property("float", "dlen");
        dlen.assign(len2.fwidth());
        alpha.assign(smoothstep2(dlen.oneMinus(), dlen.add(1), len2).oneMinus());
      } else {
        len2.greaterThan(1).discard();
      }
      let pointColorNode;
      if (this.pointColorNode) {
        pointColorNode = this.pointColorNode;
      } else {
        if (useColor) {
          const instanceColor = attribute("instanceColor");
          pointColorNode = instanceColor.mul(materialColor);
        } else {
          pointColorNode = materialColor;
        }
      }
      alpha.mulAssign(materialOpacity);
      return vec4(pointColorNode, alpha);
    })();
  }
  get alphaToCoverage() {
    return this.useAlphaToCoverage;
  }
  set alphaToCoverage(value) {
    if (this.useAlphaToCoverage !== value) {
      this.useAlphaToCoverage = value;
      this.needsUpdate = true;
    }
  }
};
InstancedPointsNodeMaterial.type = registerNodeMaterial("InstancedPoints", InstancedPointsNodeMaterial);
var _defaultValues$d = new LineBasicMaterial2();
var LineBasicNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isLineBasicNodeMaterial = true;
    this.lights = false;
    this.setDefaultValues(_defaultValues$d);
    this.setValues(parameters);
  }
};
LineBasicNodeMaterial.type = registerNodeMaterial("LineBasic", LineBasicNodeMaterial);
var _defaultValues$c = new LineDashedMaterial();
var LineDashedNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isLineDashedNodeMaterial = true;
    this.lights = false;
    this.setDefaultValues(_defaultValues$c);
    this.offsetNode = null;
    this.dashScaleNode = null;
    this.dashSizeNode = null;
    this.gapSizeNode = null;
    this.setValues(parameters);
  }
  setupVariants() {
    const offsetNode = this.offsetNode;
    const dashScaleNode = this.dashScaleNode ? float(this.dashScaleNode) : materialLineScale;
    const dashSizeNode = this.dashSizeNode ? float(this.dashSizeNode) : materialLineDashSize;
    const gapSizeNode = this.dashSizeNode ? float(this.dashGapNode) : materialLineGapSize;
    dashSize.assign(dashSizeNode);
    gapSize.assign(gapSizeNode);
    const vLineDistance = varying(attribute("lineDistance").mul(dashScaleNode));
    const vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;
    vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard();
  }
};
LineDashedNodeMaterial.type = registerNodeMaterial("LineDashed", LineDashedNodeMaterial);
var _defaultValues$b = new LineDashedMaterial();
var Line2NodeMaterial = class extends NodeMaterial {
  constructor(params = {}) {
    super();
    this.lights = false;
    this.setDefaultValues(_defaultValues$b);
    this.useAlphaToCoverage = true;
    this.useColor = params.vertexColors;
    this.useDash = params.dashed;
    this.useWorldUnits = false;
    this.dashOffset = 0;
    this.lineWidth = 1;
    this.lineColorNode = null;
    this.offsetNode = null;
    this.dashScaleNode = null;
    this.dashSizeNode = null;
    this.gapSizeNode = null;
    this.setValues(params);
  }
  setup(builder) {
    this.setupShaders();
    super.setup(builder);
  }
  setupShaders() {
    const useAlphaToCoverage = this.alphaToCoverage;
    const useColor = this.useColor;
    const useDash = this.dashed;
    const useWorldUnits = this.worldUnits;
    const trimSegment = Fn(({ start, end }) => {
      const a2 = cameraProjectionMatrix.element(2).element(2);
      const b = cameraProjectionMatrix.element(3).element(2);
      const nearEstimate = b.mul(-0.5).div(a2);
      const alpha = nearEstimate.sub(start.z).div(end.z.sub(start.z));
      return vec4(mix(start.xyz, end.xyz, alpha), end.w);
    });
    this.vertexNode = Fn(() => {
      varyingProperty("vec2", "vUv").assign(uv());
      const instanceStart = attribute("instanceStart");
      const instanceEnd = attribute("instanceEnd");
      const start = property("vec4", "start");
      const end = property("vec4", "end");
      start.assign(modelViewMatrix.mul(vec4(instanceStart, 1)));
      end.assign(modelViewMatrix.mul(vec4(instanceEnd, 1)));
      if (useWorldUnits) {
        varyingProperty("vec3", "worldStart").assign(start.xyz);
        varyingProperty("vec3", "worldEnd").assign(end.xyz);
      }
      const aspect3 = viewport.z.div(viewport.w);
      const perspective = cameraProjectionMatrix.element(2).element(3).equal(-1);
      If(perspective, () => {
        If(start.z.lessThan(0).and(end.z.greaterThan(0)), () => {
          end.assign(trimSegment({ start, end }));
        }).ElseIf(end.z.lessThan(0).and(start.z.greaterThanEqual(0)), () => {
          start.assign(trimSegment({ start: end, end: start }));
        });
      });
      const clipStart = cameraProjectionMatrix.mul(start);
      const clipEnd = cameraProjectionMatrix.mul(end);
      const ndcStart = clipStart.xyz.div(clipStart.w);
      const ndcEnd = clipEnd.xyz.div(clipEnd.w);
      const dir = ndcEnd.xy.sub(ndcStart.xy).toVar();
      dir.x.assign(dir.x.mul(aspect3));
      dir.assign(dir.normalize());
      const clip = vec4().toVar();
      if (useWorldUnits) {
        const worldDir = end.xyz.sub(start.xyz).normalize();
        const tmpFwd = mix(start.xyz, end.xyz, 0.5).normalize();
        const worldUp = worldDir.cross(tmpFwd).normalize();
        const worldFwd = worldDir.cross(worldUp);
        const worldPos = varyingProperty("vec4", "worldPos");
        worldPos.assign(positionGeometry.y.lessThan(0.5).select(start, end));
        const hw = materialLineWidth.mul(0.5);
        worldPos.addAssign(vec4(positionGeometry.x.lessThan(0).select(worldUp.mul(hw), worldUp.mul(hw).negate()), 0));
        if (!useDash) {
          worldPos.addAssign(vec4(positionGeometry.y.lessThan(0.5).select(worldDir.mul(hw).negate(), worldDir.mul(hw)), 0));
          worldPos.addAssign(vec4(worldFwd.mul(hw), 0));
          If(positionGeometry.y.greaterThan(1).or(positionGeometry.y.lessThan(0)), () => {
            worldPos.subAssign(vec4(worldFwd.mul(2).mul(hw), 0));
          });
        }
        clip.assign(cameraProjectionMatrix.mul(worldPos));
        const clipPose = vec3().toVar();
        clipPose.assign(positionGeometry.y.lessThan(0.5).select(ndcStart, ndcEnd));
        clip.z.assign(clipPose.z.mul(clip.w));
      } else {
        const offset = property("vec2", "offset");
        offset.assign(vec2(dir.y, dir.x.negate()));
        dir.x.assign(dir.x.div(aspect3));
        offset.x.assign(offset.x.div(aspect3));
        offset.assign(positionGeometry.x.lessThan(0).select(offset.negate(), offset));
        If(positionGeometry.y.lessThan(0), () => {
          offset.assign(offset.sub(dir));
        }).ElseIf(positionGeometry.y.greaterThan(1), () => {
          offset.assign(offset.add(dir));
        });
        offset.assign(offset.mul(materialLineWidth));
        offset.assign(offset.div(viewport.w));
        clip.assign(positionGeometry.y.lessThan(0.5).select(clipStart, clipEnd));
        offset.assign(offset.mul(clip.w));
        clip.assign(clip.add(vec4(offset, 0, 0)));
      }
      return clip;
    })();
    const closestLineToLine = Fn(({ p1, p2, p3, p4 }) => {
      const p13 = p1.sub(p3);
      const p43 = p4.sub(p3);
      const p21 = p2.sub(p1);
      const d1343 = p13.dot(p43);
      const d4321 = p43.dot(p21);
      const d1321 = p13.dot(p21);
      const d4343 = p43.dot(p43);
      const d2121 = p21.dot(p21);
      const denom = d2121.mul(d4343).sub(d4321.mul(d4321));
      const numer = d1343.mul(d4321).sub(d1321.mul(d4343));
      const mua = numer.div(denom).clamp();
      const mub = d1343.add(d4321.mul(mua)).div(d4343).clamp();
      return vec2(mua, mub);
    });
    this.fragmentNode = Fn(() => {
      const vUv = varyingProperty("vec2", "vUv");
      if (useDash) {
        const offsetNode = this.offsetNode ? float(this.offsetNodeNode) : materialLineDashOffset;
        const dashScaleNode = this.dashScaleNode ? float(this.dashScaleNode) : materialLineScale;
        const dashSizeNode = this.dashSizeNode ? float(this.dashSizeNode) : materialLineDashSize;
        const gapSizeNode = this.dashSizeNode ? float(this.dashGapNode) : materialLineGapSize;
        dashSize.assign(dashSizeNode);
        gapSize.assign(gapSizeNode);
        const instanceDistanceStart = attribute("instanceDistanceStart");
        const instanceDistanceEnd = attribute("instanceDistanceEnd");
        const lineDistance = positionGeometry.y.lessThan(0.5).select(dashScaleNode.mul(instanceDistanceStart), materialLineScale.mul(instanceDistanceEnd));
        const vLineDistance = varying(lineDistance.add(materialLineDashOffset));
        const vLineDistanceOffset = offsetNode ? vLineDistance.add(offsetNode) : vLineDistance;
        vUv.y.lessThan(-1).or(vUv.y.greaterThan(1)).discard();
        vLineDistanceOffset.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard();
      }
      const alpha = property("float", "alpha");
      alpha.assign(1);
      if (useWorldUnits) {
        const worldStart = varyingProperty("vec3", "worldStart");
        const worldEnd = varyingProperty("vec3", "worldEnd");
        const rayEnd = varyingProperty("vec4", "worldPos").xyz.normalize().mul(1e5);
        const lineDir = worldEnd.sub(worldStart);
        const params = closestLineToLine({ p1: worldStart, p2: worldEnd, p3: vec3(0, 0, 0), p4: rayEnd });
        const p1 = worldStart.add(lineDir.mul(params.x));
        const p2 = rayEnd.mul(params.y);
        const delta = p1.sub(p2);
        const len = delta.length();
        const norm = len.div(materialLineWidth);
        if (!useDash) {
          if (useAlphaToCoverage) {
            const dnorm = norm.fwidth();
            alpha.assign(smoothstep2(dnorm.negate().add(0.5), dnorm.add(0.5), norm).oneMinus());
          } else {
            norm.greaterThan(0.5).discard();
          }
        }
      } else {
        if (useAlphaToCoverage) {
          const a2 = vUv.x;
          const b = vUv.y.greaterThan(0).select(vUv.y.sub(1), vUv.y.add(1));
          const len2 = a2.mul(a2).add(b.mul(b));
          const dlen = property("float", "dlen");
          dlen.assign(len2.fwidth());
          If(vUv.y.abs().greaterThan(1), () => {
            alpha.assign(smoothstep2(dlen.oneMinus(), dlen.add(1), len2).oneMinus());
          });
        } else {
          If(vUv.y.abs().greaterThan(1), () => {
            const a2 = vUv.x;
            const b = vUv.y.greaterThan(0).select(vUv.y.sub(1), vUv.y.add(1));
            const len2 = a2.mul(a2).add(b.mul(b));
            len2.greaterThan(1).discard();
          });
        }
      }
      let lineColorNode;
      if (this.lineColorNode) {
        lineColorNode = this.lineColorNode;
      } else {
        if (useColor) {
          const instanceColorStart = attribute("instanceColorStart");
          const instanceColorEnd = attribute("instanceColorEnd");
          const instanceColor = positionGeometry.y.lessThan(0.5).select(instanceColorStart, instanceColorEnd);
          lineColorNode = instanceColor.mul(materialColor);
        } else {
          lineColorNode = materialColor;
        }
      }
      return vec4(lineColorNode, alpha);
    })();
  }
  get worldUnits() {
    return this.useWorldUnits;
  }
  set worldUnits(value) {
    if (this.useWorldUnits !== value) {
      this.useWorldUnits = value;
      this.needsUpdate = true;
    }
  }
  get dashed() {
    return this.useDash;
  }
  set dashed(value) {
    if (this.useDash !== value) {
      this.useDash = value;
      this.needsUpdate = true;
    }
  }
  get alphaToCoverage() {
    return this.useAlphaToCoverage;
  }
  set alphaToCoverage(value) {
    if (this.useAlphaToCoverage !== value) {
      this.useAlphaToCoverage = value;
      this.needsUpdate = true;
    }
  }
};
Line2NodeMaterial.type = registerNodeMaterial("Line2", Line2NodeMaterial);
var directionToColor = (node) => nodeObject(node).mul(0.5).add(0.5);
var _defaultValues$a = new MeshNormalMaterial();
var MeshNormalNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.lights = false;
    this.isMeshNormalNodeMaterial = true;
    this.setDefaultValues(_defaultValues$a);
    this.setValues(parameters);
  }
  setupDiffuseColor() {
    const opacityNode = this.opacityNode ? float(this.opacityNode) : materialOpacity;
    diffuseColor.assign(vec4(directionToColor(transformedNormalView), opacityNode));
  }
};
MeshNormalNodeMaterial.type = registerNodeMaterial("MeshNormal", MeshNormalNodeMaterial);
var EquirectUVNode = class extends TempNode {
  constructor(dirNode = positionWorldDirection) {
    super("vec2");
    this.dirNode = dirNode;
  }
  setup() {
    const dir = this.dirNode;
    const u5 = dir.z.atan2(dir.x).mul(1 / (Math.PI * 2)).add(0.5);
    const v3 = dir.y.clamp(-1, 1).asin().mul(1 / Math.PI).add(0.5);
    return vec2(u5, v3);
  }
};
EquirectUVNode.type = registerNode("EquirectUV", EquirectUVNode);
var equirectUV = nodeProxy(EquirectUVNode);
var CubeRenderTarget = class extends WebGLCubeRenderTarget2 {
  constructor(size = 1, options = {}) {
    super(size, options);
    this.isCubeRenderTarget = true;
  }
  fromEquirectangularTexture(renderer3, texture$1) {
    const currentMinFilter = texture$1.minFilter;
    const currentGenerateMipmaps = texture$1.generateMipmaps;
    texture$1.generateMipmaps = true;
    this.texture.type = texture$1.type;
    this.texture.colorSpace = texture$1.colorSpace;
    this.texture.generateMipmaps = texture$1.generateMipmaps;
    this.texture.minFilter = texture$1.minFilter;
    this.texture.magFilter = texture$1.magFilter;
    const geometry = new BoxGeometry2(5, 5, 5);
    const uvNode = equirectUV(positionWorldDirection);
    const material = new NodeMaterial();
    material.colorNode = texture(texture$1, uvNode, 0);
    material.side = BackSide2;
    material.blending = NoBlending2;
    const mesh = new Mesh2(geometry, material);
    const scene3 = new Scene2();
    scene3.add(mesh);
    if (texture$1.minFilter === LinearMipmapLinearFilter2) texture$1.minFilter = LinearFilter2;
    const camera3 = new CubeCamera2(1, 10, this);
    const currentMRT = renderer3.getMRT();
    renderer3.setMRT(null);
    camera3.update(renderer3, scene3);
    renderer3.setMRT(currentMRT);
    texture$1.minFilter = currentMinFilter;
    texture$1.currentGenerateMipmaps = currentGenerateMipmaps;
    mesh.geometry.dispose();
    mesh.material.dispose();
    return this;
  }
};
var _cache$1 = /* @__PURE__ */ new WeakMap();
var CubeMapNode = class extends TempNode {
  constructor(envNode) {
    super("vec3");
    this.envNode = envNode;
    this._cubeTexture = null;
    this._cubeTextureNode = cubeTexture();
    const defaultTexture = new CubeTexture2();
    defaultTexture.isRenderTargetTexture = true;
    this._defaultTexture = defaultTexture;
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  updateBefore(frame) {
    const { renderer: renderer3, material } = frame;
    const envNode = this.envNode;
    if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {
      const texture2 = envNode.isTextureNode ? envNode.value : material[envNode.property];
      if (texture2 && texture2.isTexture) {
        const mapping = texture2.mapping;
        if (mapping === EquirectangularReflectionMapping2 || mapping === EquirectangularRefractionMapping2) {
          if (_cache$1.has(texture2)) {
            const cubeMap = _cache$1.get(texture2);
            mapTextureMapping(cubeMap, texture2.mapping);
            this._cubeTexture = cubeMap;
          } else {
            const image = texture2.image;
            if (isEquirectangularMapReady$1(image)) {
              const renderTarget = new CubeRenderTarget(image.height);
              renderTarget.fromEquirectangularTexture(renderer3, texture2);
              mapTextureMapping(renderTarget.texture, texture2.mapping);
              this._cubeTexture = renderTarget.texture;
              _cache$1.set(texture2, renderTarget.texture);
              texture2.addEventListener("dispose", onTextureDispose);
            } else {
              this._cubeTexture = this._defaultTexture;
            }
          }
          this._cubeTextureNode.value = this._cubeTexture;
        } else {
          this._cubeTextureNode = this.envNode;
        }
      }
    }
  }
  setup(builder) {
    this.updateBefore(builder);
    return this._cubeTextureNode;
  }
};
CubeMapNode.type = registerNode("CubeMap", CubeMapNode);
function isEquirectangularMapReady$1(image) {
  if (image === null || image === void 0) return false;
  return image.height > 0;
}
function onTextureDispose(event) {
  const texture2 = event.target;
  texture2.removeEventListener("dispose", onTextureDispose);
  const renderTarget = _cache$1.get(texture2);
  if (renderTarget !== void 0) {
    _cache$1.delete(texture2);
    renderTarget.dispose();
  }
}
function mapTextureMapping(texture2, mapping) {
  if (mapping === EquirectangularReflectionMapping2) {
    texture2.mapping = CubeReflectionMapping2;
  } else if (mapping === EquirectangularRefractionMapping2) {
    texture2.mapping = CubeRefractionMapping2;
  }
}
var cubeMapNode = nodeProxy(CubeMapNode);
var BasicEnvironmentNode = class extends LightingNode {
  constructor(envNode = null) {
    super();
    this.envNode = envNode;
  }
  setup(builder) {
    builder.context.environment = cubeMapNode(this.envNode);
  }
};
BasicEnvironmentNode.type = registerNode("BasicEnvironment", BasicEnvironmentNode);
var BasicLightMapNode = class extends LightingNode {
  constructor(lightMapNode = null) {
    super();
    this.lightMapNode = lightMapNode;
  }
  setup(builder) {
    const RECIPROCAL_PI2 = float(1 / Math.PI);
    builder.context.irradianceLightMap = this.lightMapNode.mul(RECIPROCAL_PI2);
  }
};
BasicLightMapNode.type = registerNode("BasicLightMap", BasicLightMapNode);
var LightingModel = class {
  start() {
  }
  finish() {
  }
  direct() {
  }
  directRectArea() {
  }
  indirect() {
  }
  ambientOcclusion() {
  }
};
var BasicLightingModel = class extends LightingModel {
  constructor() {
    super();
  }
  indirect(context2, stack2, builder) {
    const ambientOcclusion = context2.ambientOcclusion;
    const reflectedLight = context2.reflectedLight;
    const irradianceLightMap = builder.context.irradianceLightMap;
    reflectedLight.indirectDiffuse.assign(vec4(0));
    if (irradianceLightMap) {
      reflectedLight.indirectDiffuse.addAssign(irradianceLightMap);
    } else {
      reflectedLight.indirectDiffuse.addAssign(vec4(1, 1, 1, 0));
    }
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
    reflectedLight.indirectDiffuse.mulAssign(diffuseColor.rgb);
  }
  finish(context2, stack2, builder) {
    const material = builder.material;
    const outgoingLight = context2.outgoingLight;
    const envNode = builder.context.environment;
    if (envNode) {
      switch (material.combine) {
        case MultiplyOperation2:
          outgoingLight.rgb.assign(mix(outgoingLight.rgb, outgoingLight.rgb.mul(envNode.rgb), materialSpecularStrength.mul(materialReflectivity)));
          break;
        case MixOperation2:
          outgoingLight.rgb.assign(mix(outgoingLight.rgb, envNode.rgb, materialSpecularStrength.mul(materialReflectivity)));
          break;
        case AddOperation2:
          outgoingLight.rgb.addAssign(envNode.rgb.mul(materialSpecularStrength.mul(materialReflectivity)));
          break;
        default:
          console.warn("THREE.BasicLightingModel: Unsupported .combine value:", material.combine);
          break;
      }
    }
  }
};
var _defaultValues$9 = new MeshBasicMaterial2();
var MeshBasicNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isMeshBasicNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues$9);
    this.setValues(parameters);
  }
  setupNormal() {
    return normalView;
  }
  setupEnvironment(builder) {
    const envNode = super.setupEnvironment(builder);
    return envNode ? new BasicEnvironmentNode(envNode) : null;
  }
  setupLightMap(builder) {
    let node = null;
    if (builder.material.lightMap) {
      node = new BasicLightMapNode(materialLightMap);
    }
    return node;
  }
  setupOutgoingLight() {
    return diffuseColor.rgb;
  }
  setupLightingModel() {
    return new BasicLightingModel();
  }
};
MeshBasicNodeMaterial.type = registerNodeMaterial("MeshBasic", MeshBasicNodeMaterial);
var F_Schlick = Fn(({ f0, f90, dotVH }) => {
  const fresnel = dotVH.mul(-5.55473).sub(6.98316).mul(dotVH).exp2();
  return f0.mul(fresnel.oneMinus()).add(f90.mul(fresnel));
});
var BRDF_Lambert = Fn((inputs) => {
  return inputs.diffuseColor.mul(1 / Math.PI);
});
var G_BlinnPhong_Implicit = () => float(0.25);
var D_BlinnPhong = Fn(({ dotNH }) => {
  return shininess.mul(float(0.5)).add(1).mul(float(1 / Math.PI)).mul(dotNH.pow(shininess));
});
var BRDF_BlinnPhong = Fn(({ lightDirection }) => {
  const halfDir = lightDirection.add(positionViewDirection).normalize();
  const dotNH = transformedNormalView.dot(halfDir).clamp();
  const dotVH = positionViewDirection.dot(halfDir).clamp();
  const F2 = F_Schlick({ f0: specularColor, f90: 1, dotVH });
  const G2 = G_BlinnPhong_Implicit();
  const D4 = D_BlinnPhong({ dotNH });
  return F2.mul(G2).mul(D4);
});
var PhongLightingModel = class extends BasicLightingModel {
  constructor(specular = true) {
    super();
    this.specular = specular;
  }
  direct({ lightDirection, lightColor, reflectedLight }) {
    const dotNL = transformedNormalView.dot(lightDirection).clamp();
    const irradiance = dotNL.mul(lightColor);
    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
    if (this.specular === true) {
      reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_BlinnPhong({ lightDirection })).mul(materialSpecularStrength));
    }
  }
  indirect({ ambientOcclusion, irradiance, reflectedLight }) {
    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
  }
};
var _defaultValues$8 = new MeshLambertMaterial2();
var MeshLambertNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isMeshLambertNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues$8);
    this.setValues(parameters);
  }
  setupEnvironment(builder) {
    const envNode = super.setupEnvironment(builder);
    return envNode ? new BasicEnvironmentNode(envNode) : null;
  }
  setupLightingModel() {
    return new PhongLightingModel(false);
  }
};
MeshLambertNodeMaterial.type = registerNodeMaterial("MeshLambert", MeshLambertNodeMaterial);
var _defaultValues$7 = new MeshPhongMaterial2();
var MeshPhongNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isMeshPhongNodeMaterial = true;
    this.lights = true;
    this.shininessNode = null;
    this.specularNode = null;
    this.setDefaultValues(_defaultValues$7);
    this.setValues(parameters);
  }
  setupEnvironment(builder) {
    const envNode = super.setupEnvironment(builder);
    return envNode ? new BasicEnvironmentNode(envNode) : null;
  }
  setupLightingModel() {
    return new PhongLightingModel();
  }
  setupVariants() {
    const shininessNode = (this.shininessNode ? float(this.shininessNode) : materialShininess).max(1e-4);
    shininess.assign(shininessNode);
    const specularNode = this.specularNode || materialSpecular;
    specularColor.assign(specularNode);
  }
  copy(source) {
    this.shininessNode = source.shininessNode;
    this.specularNode = source.specularNode;
    return super.copy(source);
  }
};
MeshPhongNodeMaterial.type = registerNodeMaterial("MeshPhong", MeshPhongNodeMaterial);
var getGeometryRoughness = Fn(() => {
  const dxy = normalView.dFdx().abs().max(normalView.dFdy().abs());
  const geometryRoughness = dxy.x.max(dxy.y).max(dxy.z);
  return geometryRoughness;
});
var getRoughness = Fn((inputs) => {
  const { roughness: roughness2 } = inputs;
  const geometryRoughness = getGeometryRoughness();
  let roughnessFactor = roughness2.max(0.0525);
  roughnessFactor = roughnessFactor.add(geometryRoughness);
  roughnessFactor = roughnessFactor.min(1);
  return roughnessFactor;
});
var V_GGX_SmithCorrelated = Fn(({ alpha, dotNL, dotNV }) => {
  const a2 = alpha.pow2();
  const gv = dotNL.mul(a2.add(a2.oneMinus().mul(dotNV.pow2())).sqrt());
  const gl = dotNV.mul(a2.add(a2.oneMinus().mul(dotNL.pow2())).sqrt());
  return div(0.5, gv.add(gl).max(EPSILON2));
}).setLayout({
  name: "V_GGX_SmithCorrelated",
  type: "float",
  inputs: [
    { name: "alpha", type: "float" },
    { name: "dotNL", type: "float" },
    { name: "dotNV", type: "float" }
  ]
});
var V_GGX_SmithCorrelated_Anisotropic = Fn(({ alphaT: alphaT2, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL }) => {
  const gv = dotNL.mul(vec3(alphaT2.mul(dotTV), alphaB.mul(dotBV), dotNV).length());
  const gl = dotNV.mul(vec3(alphaT2.mul(dotTL), alphaB.mul(dotBL), dotNL).length());
  const v3 = div(0.5, gv.add(gl));
  return v3.saturate();
}).setLayout({
  name: "V_GGX_SmithCorrelated_Anisotropic",
  type: "float",
  inputs: [
    { name: "alphaT", type: "float", qualifier: "in" },
    { name: "alphaB", type: "float", qualifier: "in" },
    { name: "dotTV", type: "float", qualifier: "in" },
    { name: "dotBV", type: "float", qualifier: "in" },
    { name: "dotTL", type: "float", qualifier: "in" },
    { name: "dotBL", type: "float", qualifier: "in" },
    { name: "dotNV", type: "float", qualifier: "in" },
    { name: "dotNL", type: "float", qualifier: "in" }
  ]
});
var D_GGX = Fn(({ alpha, dotNH }) => {
  const a2 = alpha.pow2();
  const denom = dotNH.pow2().mul(a2.oneMinus()).oneMinus();
  return a2.div(denom.pow2()).mul(1 / Math.PI);
}).setLayout({
  name: "D_GGX",
  type: "float",
  inputs: [
    { name: "alpha", type: "float" },
    { name: "dotNH", type: "float" }
  ]
});
var RECIPROCAL_PI = float(1 / Math.PI);
var D_GGX_Anisotropic = Fn(({ alphaT: alphaT2, alphaB, dotNH, dotTH, dotBH }) => {
  const a2 = alphaT2.mul(alphaB);
  const v3 = vec3(alphaB.mul(dotTH), alphaT2.mul(dotBH), a2.mul(dotNH));
  const v22 = v3.dot(v3);
  const w22 = a2.div(v22);
  return RECIPROCAL_PI.mul(a2.mul(w22.pow2()));
}).setLayout({
  name: "D_GGX_Anisotropic",
  type: "float",
  inputs: [
    { name: "alphaT", type: "float", qualifier: "in" },
    { name: "alphaB", type: "float", qualifier: "in" },
    { name: "dotNH", type: "float", qualifier: "in" },
    { name: "dotTH", type: "float", qualifier: "in" },
    { name: "dotBH", type: "float", qualifier: "in" }
  ]
});
var BRDF_GGX = Fn((inputs) => {
  const { lightDirection, f0, f90, roughness: roughness2, f: f2, USE_IRIDESCENCE, USE_ANISOTROPY } = inputs;
  const normalView2 = inputs.normalView || transformedNormalView;
  const alpha = roughness2.pow2();
  const halfDir = lightDirection.add(positionViewDirection).normalize();
  const dotNL = normalView2.dot(lightDirection).clamp();
  const dotNV = normalView2.dot(positionViewDirection).clamp();
  const dotNH = normalView2.dot(halfDir).clamp();
  const dotVH = positionViewDirection.dot(halfDir).clamp();
  let F2 = F_Schlick({ f0, f90, dotVH });
  let V2, D4;
  if (defined(USE_IRIDESCENCE)) {
    F2 = iridescence.mix(F2, f2);
  }
  if (defined(USE_ANISOTROPY)) {
    const dotTL = anisotropyT.dot(lightDirection);
    const dotTV = anisotropyT.dot(positionViewDirection);
    const dotTH = anisotropyT.dot(halfDir);
    const dotBL = anisotropyB.dot(lightDirection);
    const dotBV = anisotropyB.dot(positionViewDirection);
    const dotBH = anisotropyB.dot(halfDir);
    V2 = V_GGX_SmithCorrelated_Anisotropic({ alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL });
    D4 = D_GGX_Anisotropic({ alphaT, alphaB: alpha, dotNH, dotTH, dotBH });
  } else {
    V2 = V_GGX_SmithCorrelated({ alpha, dotNL, dotNV });
    D4 = D_GGX({ alpha, dotNH });
  }
  return F2.mul(V2).mul(D4);
});
var DFGApprox = Fn(({ roughness: roughness2, dotNV }) => {
  const c0 = vec4(-1, -0.0275, -0.572, 0.022);
  const c1 = vec4(1, 0.0425, 1.04, -0.04);
  const r2 = roughness2.mul(c0).add(c1);
  const a004 = r2.x.mul(r2.x).min(dotNV.mul(-9.28).exp2()).mul(r2.x).add(r2.y);
  const fab = vec2(-1.04, 1.04).mul(a004).add(r2.zw);
  return fab;
}).setLayout({
  name: "DFGApprox",
  type: "vec2",
  inputs: [
    { name: "roughness", type: "float" },
    { name: "dotNV", type: "vec3" }
  ]
});
var EnvironmentBRDF = Fn((inputs) => {
  const { dotNV, specularColor: specularColor2, specularF90: specularF902, roughness: roughness2 } = inputs;
  const fab = DFGApprox({ dotNV, roughness: roughness2 });
  return specularColor2.mul(fab.x).add(specularF902.mul(fab.y));
});
var Schlick_to_F0 = Fn(({ f: f2, f90, dotVH }) => {
  const x2 = dotVH.oneMinus().saturate();
  const x22 = x2.mul(x2);
  const x5 = x2.mul(x22, x22).clamp(0, 0.9999);
  return f2.sub(vec3(f90).mul(x5)).div(x5.oneMinus());
}).setLayout({
  name: "Schlick_to_F0",
  type: "vec3",
  inputs: [
    { name: "f", type: "vec3" },
    { name: "f90", type: "float" },
    { name: "dotVH", type: "float" }
  ]
});
var D_Charlie = Fn(({ roughness: roughness2, dotNH }) => {
  const alpha = roughness2.pow2();
  const invAlpha = float(1).div(alpha);
  const cos2h = dotNH.pow2();
  const sin2h = cos2h.oneMinus().max(78125e-7);
  return float(2).add(invAlpha).mul(sin2h.pow(invAlpha.mul(0.5))).div(2 * Math.PI);
}).setLayout({
  name: "D_Charlie",
  type: "float",
  inputs: [
    { name: "roughness", type: "float" },
    { name: "dotNH", type: "float" }
  ]
});
var V_Neubelt = Fn(({ dotNV, dotNL }) => {
  return float(1).div(float(4).mul(dotNL.add(dotNV).sub(dotNL.mul(dotNV))));
}).setLayout({
  name: "V_Neubelt",
  type: "float",
  inputs: [
    { name: "dotNV", type: "float" },
    { name: "dotNL", type: "float" }
  ]
});
var BRDF_Sheen = Fn(({ lightDirection }) => {
  const halfDir = lightDirection.add(positionViewDirection).normalize();
  const dotNL = transformedNormalView.dot(lightDirection).clamp();
  const dotNV = transformedNormalView.dot(positionViewDirection).clamp();
  const dotNH = transformedNormalView.dot(halfDir).clamp();
  const D4 = D_Charlie({ roughness: sheenRoughness, dotNH });
  const V2 = V_Neubelt({ dotNV, dotNL });
  return sheen.mul(D4).mul(V2);
});
var LTC_Uv = Fn(({ N: N2, V: V2, roughness: roughness2 }) => {
  const LUT_SIZE = 64;
  const LUT_SCALE = (LUT_SIZE - 1) / LUT_SIZE;
  const LUT_BIAS = 0.5 / LUT_SIZE;
  const dotNV = N2.dot(V2).saturate();
  const uv2 = vec2(roughness2, dotNV.oneMinus().sqrt());
  uv2.assign(uv2.mul(LUT_SCALE).add(LUT_BIAS));
  return uv2;
}).setLayout({
  name: "LTC_Uv",
  type: "vec2",
  inputs: [
    { name: "N", type: "vec3" },
    { name: "V", type: "vec3" },
    { name: "roughness", type: "float" }
  ]
});
var LTC_ClippedSphereFormFactor = Fn(({ f: f2 }) => {
  const l2 = f2.length();
  return max$1(l2.mul(l2).add(f2.z).div(l2.add(1)), 0);
}).setLayout({
  name: "LTC_ClippedSphereFormFactor",
  type: "float",
  inputs: [
    { name: "f", type: "vec3" }
  ]
});
var LTC_EdgeVectorFormFactor = Fn(({ v1, v2: v22 }) => {
  const x2 = v1.dot(v22);
  const y2 = x2.abs().toVar();
  const a2 = y2.mul(0.0145206).add(0.4965155).mul(y2).add(0.8543985).toVar();
  const b = y2.add(4.1616724).mul(y2).add(3.417594).toVar();
  const v3 = a2.div(b);
  const theta_sintheta = x2.greaterThan(0).select(v3, max$1(x2.mul(x2).oneMinus(), 1e-7).inverseSqrt().mul(0.5).sub(v3));
  return v1.cross(v22).mul(theta_sintheta);
}).setLayout({
  name: "LTC_EdgeVectorFormFactor",
  type: "vec3",
  inputs: [
    { name: "v1", type: "vec3" },
    { name: "v2", type: "vec3" }
  ]
});
var LTC_Evaluate = Fn(({ N: N2, V: V2, P: P2, mInv, p0: p02, p1, p2, p3 }) => {
  const v1 = p1.sub(p02).toVar();
  const v22 = p3.sub(p02).toVar();
  const lightNormal = v1.cross(v22);
  const result = vec3().toVar();
  If(lightNormal.dot(P2.sub(p02)).greaterThanEqual(0), () => {
    const T1 = V2.sub(N2.mul(V2.dot(N2))).normalize();
    const T2 = N2.cross(T1).negate();
    const mat = mInv.mul(mat3(T1, T2, N2).transpose()).toVar();
    const coords0 = mat.mul(p02.sub(P2)).normalize().toVar();
    const coords1 = mat.mul(p1.sub(P2)).normalize().toVar();
    const coords2 = mat.mul(p2.sub(P2)).normalize().toVar();
    const coords3 = mat.mul(p3.sub(P2)).normalize().toVar();
    const vectorFormFactor = vec3(0).toVar();
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords0, v2: coords1 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords1, v2: coords2 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords2, v2: coords3 }));
    vectorFormFactor.addAssign(LTC_EdgeVectorFormFactor({ v1: coords3, v2: coords0 }));
    result.assign(vec3(LTC_ClippedSphereFormFactor({ f: vectorFormFactor })));
  });
  return result;
}).setLayout({
  name: "LTC_Evaluate",
  type: "vec3",
  inputs: [
    { name: "N", type: "vec3" },
    { name: "V", type: "vec3" },
    { name: "P", type: "vec3" },
    { name: "mInv", type: "mat3" },
    { name: "p0", type: "vec3" },
    { name: "p1", type: "vec3" },
    { name: "p2", type: "vec3" },
    { name: "p3", type: "vec3" }
  ]
});
var bC = 1 / 6;
var w0 = (a2) => mul(bC, mul(a2, mul(a2, a2.negate().add(3)).sub(3)).add(1));
var w1 = (a2) => mul(bC, mul(a2, mul(a2, mul(3, a2).sub(6))).add(4));
var w2 = (a2) => mul(bC, mul(a2, mul(a2, mul(-3, a2).add(3)).add(3)).add(1));
var w3 = (a2) => mul(bC, pow4(a2, 3));
var g0 = (a2) => w0(a2).add(w1(a2));
var g1 = (a2) => w2(a2).add(w3(a2));
var h0 = (a2) => add3(-1, w1(a2).div(w0(a2).add(w1(a2))));
var h1 = (a2) => add3(1, w3(a2).div(w2(a2).add(w3(a2))));
var bicubic = (textureNode, texelSize, lod) => {
  const uv2 = textureNode.uvNode;
  const uvScaled = mul(uv2, texelSize.zw).add(0.5);
  const iuv = floor(uvScaled);
  const fuv = fract(uvScaled);
  const g0x = g0(fuv.x);
  const g1x = g1(fuv.x);
  const h0x = h0(fuv.x);
  const h1x = h1(fuv.x);
  const h0y = h0(fuv.y);
  const h1y = h1(fuv.y);
  const p02 = vec2(iuv.x.add(h0x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);
  const p1 = vec2(iuv.x.add(h1x), iuv.y.add(h0y)).sub(0.5).mul(texelSize.xy);
  const p2 = vec2(iuv.x.add(h0x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);
  const p3 = vec2(iuv.x.add(h1x), iuv.y.add(h1y)).sub(0.5).mul(texelSize.xy);
  const a2 = g0(fuv.y).mul(add3(g0x.mul(textureNode.uv(p02).level(lod)), g1x.mul(textureNode.uv(p1).level(lod))));
  const b = g1(fuv.y).mul(add3(g0x.mul(textureNode.uv(p2).level(lod)), g1x.mul(textureNode.uv(p3).level(lod))));
  return a2.add(b);
};
var textureBicubic = Fn(([textureNode, lodNode = float(3)]) => {
  const fLodSize = vec2(textureNode.size(int(lodNode)));
  const cLodSize = vec2(textureNode.size(int(lodNode.add(1))));
  const fLodSizeInv = div(1, fLodSize);
  const cLodSizeInv = div(1, cLodSize);
  const fSample = bicubic(textureNode, vec4(fLodSizeInv, fLodSize), floor(lodNode));
  const cSample = bicubic(textureNode, vec4(cLodSizeInv, cLodSize), ceil2(lodNode));
  return fract(lodNode).mix(fSample, cSample);
});
var getVolumeTransmissionRay = Fn(([n2, v3, thickness2, ior2, modelMatrix]) => {
  const refractionVector = vec3(refract(v3.negate(), normalize3(n2), div(1, ior2)));
  const modelScale2 = vec3(
    length(modelMatrix[0].xyz),
    length(modelMatrix[1].xyz),
    length(modelMatrix[2].xyz)
  );
  return normalize3(refractionVector).mul(thickness2.mul(modelScale2));
}).setLayout({
  name: "getVolumeTransmissionRay",
  type: "vec3",
  inputs: [
    { name: "n", type: "vec3" },
    { name: "v", type: "vec3" },
    { name: "thickness", type: "float" },
    { name: "ior", type: "float" },
    { name: "modelMatrix", type: "mat4" }
  ]
});
var applyIorToRoughness = Fn(([roughness2, ior2]) => {
  return roughness2.mul(clamp2(ior2.mul(2).sub(2), 0, 1));
}).setLayout({
  name: "applyIorToRoughness",
  type: "float",
  inputs: [
    { name: "roughness", type: "float" },
    { name: "ior", type: "float" }
  ]
});
var singleViewportMipTexture = viewportMipTexture();
var getTransmissionSample = Fn(([fragCoord, roughness2, ior2]) => {
  const transmissionSample = singleViewportMipTexture.uv(fragCoord);
  const lod = log22(float(viewportResolution.x)).mul(applyIorToRoughness(roughness2, ior2));
  return textureBicubic(transmissionSample, lod);
});
var volumeAttenuation = Fn(([transmissionDistance, attenuationColor2, attenuationDistance2]) => {
  If(attenuationDistance2.notEqual(0), () => {
    const attenuationCoefficient = log3(attenuationColor2).negate().div(attenuationDistance2);
    const transmittance = exp2(attenuationCoefficient.negate().mul(transmissionDistance));
    return transmittance;
  });
  return vec3(1);
}).setLayout({
  name: "volumeAttenuation",
  type: "vec3",
  inputs: [
    { name: "transmissionDistance", type: "float" },
    { name: "attenuationColor", type: "vec3" },
    { name: "attenuationDistance", type: "float" }
  ]
});
var getIBLVolumeRefraction = Fn(([n2, v3, roughness2, diffuseColor2, specularColor2, specularF902, position, modelMatrix, viewMatrix, projMatrix, ior2, thickness2, attenuationColor2, attenuationDistance2, dispersion2]) => {
  let transmittedLight, transmittance;
  if (dispersion2) {
    transmittedLight = vec4().toVar();
    transmittance = vec3().toVar();
    const halfSpread = ior2.sub(1).mul(dispersion2.mul(0.025));
    const iors = vec3(ior2.sub(halfSpread), ior2, ior2.add(halfSpread));
    Loop({ start: 0, end: 3 }, ({ i: i2 }) => {
      const ior3 = iors.element(i2);
      const transmissionRay = getVolumeTransmissionRay(n2, v3, thickness2, ior3, modelMatrix);
      const refractedRayExit = position.add(transmissionRay);
      const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1)));
      const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();
      refractionCoords.addAssign(1);
      refractionCoords.divAssign(2);
      refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus()));
      const transmissionSample = getTransmissionSample(refractionCoords, roughness2, ior3);
      transmittedLight.element(i2).assign(transmissionSample.element(i2));
      transmittedLight.a.addAssign(transmissionSample.a);
      transmittance.element(i2).assign(diffuseColor2.element(i2).mul(volumeAttenuation(length(transmissionRay), attenuationColor2, attenuationDistance2).element(i2)));
    });
    transmittedLight.a.divAssign(3);
  } else {
    const transmissionRay = getVolumeTransmissionRay(n2, v3, thickness2, ior2, modelMatrix);
    const refractedRayExit = position.add(transmissionRay);
    const ndcPos = projMatrix.mul(viewMatrix.mul(vec4(refractedRayExit, 1)));
    const refractionCoords = vec2(ndcPos.xy.div(ndcPos.w)).toVar();
    refractionCoords.addAssign(1);
    refractionCoords.divAssign(2);
    refractionCoords.assign(vec2(refractionCoords.x, refractionCoords.y.oneMinus()));
    transmittedLight = getTransmissionSample(refractionCoords, roughness2, ior2);
    transmittance = diffuseColor2.mul(volumeAttenuation(length(transmissionRay), attenuationColor2, attenuationDistance2));
  }
  const attenuatedColor = transmittance.rgb.mul(transmittedLight.rgb);
  const dotNV = n2.dot(v3).clamp();
  const F2 = vec3(EnvironmentBRDF({
    // n, v, specularColor, specularF90, roughness
    dotNV,
    specularColor: specularColor2,
    specularF90: specularF902,
    roughness: roughness2
  }));
  const transmittanceFactor = transmittance.r.add(transmittance.g, transmittance.b).div(3);
  return vec4(F2.oneMinus().mul(attenuatedColor), transmittedLight.a.oneMinus().mul(transmittanceFactor).oneMinus());
});
var XYZ_TO_REC709 = mat3(
  3.2404542,
  -0.969266,
  0.0556434,
  -1.5371385,
  1.8760108,
  -0.2040259,
  -0.4985314,
  0.041556,
  1.0572252
);
var Fresnel0ToIor = (fresnel0) => {
  const sqrtF0 = fresnel0.sqrt();
  return vec3(1).add(sqrtF0).div(vec3(1).sub(sqrtF0));
};
var IorToFresnel0 = (transmittedIor, incidentIor) => {
  return transmittedIor.sub(incidentIor).div(transmittedIor.add(incidentIor)).pow2();
};
var evalSensitivity = (OPD, shift) => {
  const phase = OPD.mul(2 * Math.PI * 1e-9);
  const val = vec3(54856e-17, 44201e-17, 52481e-17);
  const pos = vec3(1681e3, 1795300, 2208400);
  const VAR = vec3(43278e5, 93046e5, 66121e5);
  const x2 = float(9747e-17 * Math.sqrt(2 * Math.PI * 45282e5)).mul(phase.mul(2239900).add(shift.x).cos()).mul(phase.pow2().mul(-45282e5).exp());
  let xyz = val.mul(VAR.mul(2 * Math.PI).sqrt()).mul(pos.mul(phase).add(shift).cos()).mul(phase.pow2().negate().mul(VAR).exp());
  xyz = vec3(xyz.x.add(x2), xyz.y, xyz.z).div(10685e-11);
  const rgb3 = XYZ_TO_REC709.mul(xyz);
  return rgb3;
};
var evalIridescence = Fn(({ outsideIOR, eta2, cosTheta1, thinFilmThickness, baseF0 }) => {
  const iridescenceIOR2 = mix(outsideIOR, eta2, smoothstep2(0, 0.03, thinFilmThickness));
  const sinTheta2Sq = outsideIOR.div(iridescenceIOR2).pow2().mul(float(1).sub(cosTheta1.pow2()));
  const cosTheta2Sq = float(1).sub(sinTheta2Sq);
  const cosTheta2 = cosTheta2Sq.sqrt();
  const R0 = IorToFresnel0(iridescenceIOR2, outsideIOR);
  const R12 = F_Schlick({ f0: R0, f90: 1, dotVH: cosTheta1 });
  const T121 = R12.oneMinus();
  const phi12 = iridescenceIOR2.lessThan(outsideIOR).select(Math.PI, 0);
  const phi21 = float(Math.PI).sub(phi12);
  const baseIOR = Fresnel0ToIor(baseF0.clamp(0, 0.9999));
  const R1 = IorToFresnel0(baseIOR, iridescenceIOR2.toVec3());
  const R23 = F_Schlick({ f0: R1, f90: 1, dotVH: cosTheta2 });
  const phi23 = vec3(
    baseIOR.x.lessThan(iridescenceIOR2).select(Math.PI, 0),
    baseIOR.y.lessThan(iridescenceIOR2).select(Math.PI, 0),
    baseIOR.z.lessThan(iridescenceIOR2).select(Math.PI, 0)
  );
  const OPD = iridescenceIOR2.mul(thinFilmThickness, cosTheta2, 2);
  const phi = vec3(phi21).add(phi23);
  const R123 = R12.mul(R23).clamp(1e-5, 0.9999);
  const r123 = R123.sqrt();
  const Rs = T121.pow2().mul(R23).div(vec3(1).sub(R123));
  const C0 = R12.add(Rs);
  let I2 = C0;
  let Cm = Rs.sub(T121);
  for (let m2 = 1; m2 <= 2; ++m2) {
    Cm = Cm.mul(r123);
    const Sm = evalSensitivity(float(m2).mul(OPD), float(m2).mul(phi)).mul(2);
    I2 = I2.add(Cm.mul(Sm));
  }
  return I2.max(vec3(0));
}).setLayout({
  name: "evalIridescence",
  type: "vec3",
  inputs: [
    { name: "outsideIOR", type: "float" },
    { name: "eta2", type: "float" },
    { name: "cosTheta1", type: "float" },
    { name: "thinFilmThickness", type: "float" },
    { name: "baseF0", type: "vec3" }
  ]
});
var IBLSheenBRDF = Fn(({ normal: normal2, viewDir, roughness: roughness2 }) => {
  const dotNV = normal2.dot(viewDir).saturate();
  const r2 = roughness2.pow2();
  const a2 = select(
    roughness2.lessThan(0.25),
    float(-339.2).mul(r2).add(float(161.4).mul(roughness2)).sub(25.9),
    float(-8.48).mul(r2).add(float(14.3).mul(roughness2)).sub(9.95)
  );
  const b = select(
    roughness2.lessThan(0.25),
    float(44).mul(r2).sub(float(23.7).mul(roughness2)).add(3.26),
    float(1.97).mul(r2).sub(float(3.27).mul(roughness2)).add(0.72)
  );
  const DG = select(roughness2.lessThan(0.25), 0, float(0.1).mul(roughness2).sub(0.025)).add(a2.mul(dotNV).add(b).exp());
  return DG.mul(1 / Math.PI).saturate();
});
var clearcoatF0 = vec3(0.04);
var clearcoatF90 = float(1);
var PhysicalLightingModel = class extends LightingModel {
  constructor(clearcoat2 = false, sheen2 = false, iridescence2 = false, anisotropy2 = false, transmission2 = false, dispersion2 = false) {
    super();
    this.clearcoat = clearcoat2;
    this.sheen = sheen2;
    this.iridescence = iridescence2;
    this.anisotropy = anisotropy2;
    this.transmission = transmission2;
    this.dispersion = dispersion2;
    this.clearcoatRadiance = null;
    this.clearcoatSpecularDirect = null;
    this.clearcoatSpecularIndirect = null;
    this.sheenSpecularDirect = null;
    this.sheenSpecularIndirect = null;
    this.iridescenceFresnel = null;
    this.iridescenceF0 = null;
  }
  start(context2) {
    if (this.clearcoat === true) {
      this.clearcoatRadiance = vec3().toVar("clearcoatRadiance");
      this.clearcoatSpecularDirect = vec3().toVar("clearcoatSpecularDirect");
      this.clearcoatSpecularIndirect = vec3().toVar("clearcoatSpecularIndirect");
    }
    if (this.sheen === true) {
      this.sheenSpecularDirect = vec3().toVar("sheenSpecularDirect");
      this.sheenSpecularIndirect = vec3().toVar("sheenSpecularIndirect");
    }
    if (this.iridescence === true) {
      const dotNVi = transformedNormalView.dot(positionViewDirection).clamp();
      this.iridescenceFresnel = evalIridescence({
        outsideIOR: float(1),
        eta2: iridescenceIOR,
        cosTheta1: dotNVi,
        thinFilmThickness: iridescenceThickness,
        baseF0: specularColor
      });
      this.iridescenceF0 = Schlick_to_F0({ f: this.iridescenceFresnel, f90: 1, dotVH: dotNVi });
    }
    if (this.transmission === true) {
      const position = positionWorld;
      const v3 = cameraPosition.sub(positionWorld).normalize();
      const n2 = transformedNormalWorld;
      context2.backdrop = getIBLVolumeRefraction(
        n2,
        v3,
        roughness,
        diffuseColor,
        specularColor,
        specularF90,
        // specularF90
        position,
        // positionWorld
        modelWorldMatrix,
        // modelMatrix
        cameraViewMatrix,
        // viewMatrix
        cameraProjectionMatrix,
        // projMatrix
        ior,
        thickness,
        attenuationColor,
        attenuationDistance,
        this.dispersion ? dispersion : null
      );
      context2.backdropAlpha = transmission;
      diffuseColor.a.mulAssign(mix(1, context2.backdrop.a, transmission));
    }
  }
  // Fdez-Agüera's "Multiple-Scattering Microfacet Model for Real-Time Image Based Lighting"
  // Approximates multiscattering in order to preserve energy.
  // http://www.jcgt.org/published/0008/01/03/
  computeMultiscattering(singleScatter, multiScatter, specularF902) {
    const dotNV = transformedNormalView.dot(positionViewDirection).clamp();
    const fab = DFGApprox({ roughness, dotNV });
    const Fr = this.iridescenceF0 ? iridescence.mix(specularColor, this.iridescenceF0) : specularColor;
    const FssEss = Fr.mul(fab.x).add(specularF902.mul(fab.y));
    const Ess = fab.x.add(fab.y);
    const Ems = Ess.oneMinus();
    const Favg = specularColor.add(specularColor.oneMinus().mul(0.047619));
    const Fms = FssEss.mul(Favg).div(Ems.mul(Favg).oneMinus());
    singleScatter.addAssign(FssEss);
    multiScatter.addAssign(Fms.mul(Ems));
  }
  direct({ lightDirection, lightColor, reflectedLight }) {
    const dotNL = transformedNormalView.dot(lightDirection).clamp();
    const irradiance = dotNL.mul(lightColor);
    if (this.sheen === true) {
      this.sheenSpecularDirect.addAssign(irradiance.mul(BRDF_Sheen({ lightDirection })));
    }
    if (this.clearcoat === true) {
      const dotNLcc = transformedClearcoatNormalView.dot(lightDirection).clamp();
      const ccIrradiance = dotNLcc.mul(lightColor);
      this.clearcoatSpecularDirect.addAssign(ccIrradiance.mul(BRDF_GGX({ lightDirection, f0: clearcoatF0, f90: clearcoatF90, roughness: clearcoatRoughness, normalView: transformedClearcoatNormalView })));
    }
    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
    reflectedLight.directSpecular.addAssign(irradiance.mul(BRDF_GGX({ lightDirection, f0: specularColor, f90: 1, roughness, iridescence: this.iridescence, f: this.iridescenceFresnel, USE_IRIDESCENCE: this.iridescence, USE_ANISOTROPY: this.anisotropy })));
  }
  directRectArea({ lightColor, lightPosition, halfWidth, halfHeight, reflectedLight, ltc_1, ltc_2 }) {
    const p02 = lightPosition.add(halfWidth).sub(halfHeight);
    const p1 = lightPosition.sub(halfWidth).sub(halfHeight);
    const p2 = lightPosition.sub(halfWidth).add(halfHeight);
    const p3 = lightPosition.add(halfWidth).add(halfHeight);
    const N2 = transformedNormalView;
    const V2 = positionViewDirection;
    const P2 = positionView.toVar();
    const uv2 = LTC_Uv({ N: N2, V: V2, roughness });
    const t13 = ltc_1.uv(uv2).toVar();
    const t22 = ltc_2.uv(uv2).toVar();
    const mInv = mat3(
      vec3(t13.x, 0, t13.y),
      vec3(0, 1, 0),
      vec3(t13.z, 0, t13.w)
    ).toVar();
    const fresnel = specularColor.mul(t22.x).add(specularColor.oneMinus().mul(t22.y)).toVar();
    reflectedLight.directSpecular.addAssign(lightColor.mul(fresnel).mul(LTC_Evaluate({ N: N2, V: V2, P: P2, mInv, p0: p02, p1, p2, p3 })));
    reflectedLight.directDiffuse.addAssign(lightColor.mul(diffuseColor).mul(LTC_Evaluate({ N: N2, V: V2, P: P2, mInv: mat3(1, 0, 0, 0, 1, 0, 0, 0, 1), p0: p02, p1, p2, p3 })));
  }
  indirect(context2, stack2, builder) {
    this.indirectDiffuse(context2, stack2, builder);
    this.indirectSpecular(context2, stack2, builder);
    this.ambientOcclusion(context2, stack2, builder);
  }
  indirectDiffuse({ irradiance, reflectedLight }) {
    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
  }
  indirectSpecular({ radiance, iblIrradiance, reflectedLight }) {
    if (this.sheen === true) {
      this.sheenSpecularIndirect.addAssign(iblIrradiance.mul(
        sheen,
        IBLSheenBRDF({
          normal: transformedNormalView,
          viewDir: positionViewDirection,
          roughness: sheenRoughness
        })
      ));
    }
    if (this.clearcoat === true) {
      const dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();
      const clearcoatEnv = EnvironmentBRDF({
        dotNV: dotNVcc,
        specularColor: clearcoatF0,
        specularF90: clearcoatF90,
        roughness: clearcoatRoughness
      });
      this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(clearcoatEnv));
    }
    const singleScattering = vec3().toVar("singleScattering");
    const multiScattering = vec3().toVar("multiScattering");
    const cosineWeightedIrradiance = iblIrradiance.mul(1 / Math.PI);
    this.computeMultiscattering(singleScattering, multiScattering, specularF90);
    const totalScattering = singleScattering.add(multiScattering);
    const diffuse = diffuseColor.mul(totalScattering.r.max(totalScattering.g).max(totalScattering.b).oneMinus());
    reflectedLight.indirectSpecular.addAssign(radiance.mul(singleScattering));
    reflectedLight.indirectSpecular.addAssign(multiScattering.mul(cosineWeightedIrradiance));
    reflectedLight.indirectDiffuse.addAssign(diffuse.mul(cosineWeightedIrradiance));
  }
  ambientOcclusion({ ambientOcclusion, reflectedLight }) {
    const dotNV = transformedNormalView.dot(positionViewDirection).clamp();
    const aoNV = dotNV.add(ambientOcclusion);
    const aoExp = roughness.mul(-16).oneMinus().negate().exp2();
    const aoNode = ambientOcclusion.sub(aoNV.pow(aoExp).oneMinus()).clamp();
    if (this.clearcoat === true) {
      this.clearcoatSpecularIndirect.mulAssign(ambientOcclusion);
    }
    if (this.sheen === true) {
      this.sheenSpecularIndirect.mulAssign(ambientOcclusion);
    }
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
    reflectedLight.indirectSpecular.mulAssign(aoNode);
  }
  finish(context2) {
    const { outgoingLight } = context2;
    if (this.clearcoat === true) {
      const dotNVcc = transformedClearcoatNormalView.dot(positionViewDirection).clamp();
      const Fcc = F_Schlick({
        dotVH: dotNVcc,
        f0: clearcoatF0,
        f90: clearcoatF90
      });
      const clearcoatLight = outgoingLight.mul(clearcoat.mul(Fcc).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(clearcoat));
      outgoingLight.assign(clearcoatLight);
    }
    if (this.sheen === true) {
      const sheenEnergyComp = sheen.r.max(sheen.g).max(sheen.b).mul(0.157).oneMinus();
      const sheenLight = outgoingLight.mul(sheenEnergyComp).add(this.sheenSpecularDirect, this.sheenSpecularIndirect);
      outgoingLight.assign(sheenLight);
    }
  }
};
var cubeUV_r0 = float(1);
var cubeUV_m0 = float(-2);
var cubeUV_r1 = float(0.8);
var cubeUV_m1 = float(-1);
var cubeUV_r4 = float(0.4);
var cubeUV_m4 = float(2);
var cubeUV_r5 = float(0.305);
var cubeUV_m5 = float(3);
var cubeUV_r6 = float(0.21);
var cubeUV_m6 = float(4);
var cubeUV_minMipLevel = float(4);
var cubeUV_minTileSize = float(16);
var getFace = Fn(([direction2]) => {
  const absDirection = vec3(abs2(direction2)).toVar();
  const face = float(-1).toVar();
  If(absDirection.x.greaterThan(absDirection.z), () => {
    If(absDirection.x.greaterThan(absDirection.y), () => {
      face.assign(select(direction2.x.greaterThan(0), 0, 3));
    }).Else(() => {
      face.assign(select(direction2.y.greaterThan(0), 1, 4));
    });
  }).Else(() => {
    If(absDirection.z.greaterThan(absDirection.y), () => {
      face.assign(select(direction2.z.greaterThan(0), 2, 5));
    }).Else(() => {
      face.assign(select(direction2.y.greaterThan(0), 1, 4));
    });
  });
  return face;
}).setLayout({
  name: "getFace",
  type: "float",
  inputs: [
    { name: "direction", type: "vec3" }
  ]
});
var getUV = Fn(([direction2, face]) => {
  const uv2 = vec2().toVar();
  If(face.equal(0), () => {
    uv2.assign(vec2(direction2.z, direction2.y).div(abs2(direction2.x)));
  }).ElseIf(face.equal(1), () => {
    uv2.assign(vec2(direction2.x.negate(), direction2.z.negate()).div(abs2(direction2.y)));
  }).ElseIf(face.equal(2), () => {
    uv2.assign(vec2(direction2.x.negate(), direction2.y).div(abs2(direction2.z)));
  }).ElseIf(face.equal(3), () => {
    uv2.assign(vec2(direction2.z.negate(), direction2.y).div(abs2(direction2.x)));
  }).ElseIf(face.equal(4), () => {
    uv2.assign(vec2(direction2.x.negate(), direction2.z).div(abs2(direction2.y)));
  }).Else(() => {
    uv2.assign(vec2(direction2.x, direction2.y).div(abs2(direction2.z)));
  });
  return mul(0.5, uv2.add(1));
}).setLayout({
  name: "getUV",
  type: "vec2",
  inputs: [
    { name: "direction", type: "vec3" },
    { name: "face", type: "float" }
  ]
});
var roughnessToMip = Fn(([roughness2]) => {
  const mip = float(0).toVar();
  If(roughness2.greaterThanEqual(cubeUV_r1), () => {
    mip.assign(cubeUV_r0.sub(roughness2).mul(cubeUV_m1.sub(cubeUV_m0)).div(cubeUV_r0.sub(cubeUV_r1)).add(cubeUV_m0));
  }).ElseIf(roughness2.greaterThanEqual(cubeUV_r4), () => {
    mip.assign(cubeUV_r1.sub(roughness2).mul(cubeUV_m4.sub(cubeUV_m1)).div(cubeUV_r1.sub(cubeUV_r4)).add(cubeUV_m1));
  }).ElseIf(roughness2.greaterThanEqual(cubeUV_r5), () => {
    mip.assign(cubeUV_r4.sub(roughness2).mul(cubeUV_m5.sub(cubeUV_m4)).div(cubeUV_r4.sub(cubeUV_r5)).add(cubeUV_m4));
  }).ElseIf(roughness2.greaterThanEqual(cubeUV_r6), () => {
    mip.assign(cubeUV_r5.sub(roughness2).mul(cubeUV_m6.sub(cubeUV_m5)).div(cubeUV_r5.sub(cubeUV_r6)).add(cubeUV_m5));
  }).Else(() => {
    mip.assign(float(-2).mul(log22(mul(1.16, roughness2))));
  });
  return mip;
}).setLayout({
  name: "roughnessToMip",
  type: "float",
  inputs: [
    { name: "roughness", type: "float" }
  ]
});
var getDirection = Fn(([uv_immutable, face]) => {
  const uv2 = uv_immutable.toVar();
  uv2.assign(mul(2, uv2).sub(1));
  const direction2 = vec3(uv2, 1).toVar();
  If(face.equal(0), () => {
    direction2.assign(direction2.zyx);
  }).ElseIf(face.equal(1), () => {
    direction2.assign(direction2.xzy);
    direction2.xz.mulAssign(-1);
  }).ElseIf(face.equal(2), () => {
    direction2.x.mulAssign(-1);
  }).ElseIf(face.equal(3), () => {
    direction2.assign(direction2.zyx);
    direction2.xz.mulAssign(-1);
  }).ElseIf(face.equal(4), () => {
    direction2.assign(direction2.xzy);
    direction2.xy.mulAssign(-1);
  }).ElseIf(face.equal(5), () => {
    direction2.z.mulAssign(-1);
  });
  return direction2;
}).setLayout({
  name: "getDirection",
  type: "vec3",
  inputs: [
    { name: "uv", type: "vec2" },
    { name: "face", type: "float" }
  ]
});
var textureCubeUV = Fn(([envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP]) => {
  const roughness2 = float(roughness_immutable);
  const sampleDir = vec3(sampleDir_immutable);
  const mip = clamp2(roughnessToMip(roughness2), cubeUV_m0, CUBEUV_MAX_MIP);
  const mipF = fract(mip);
  const mipInt = floor(mip);
  const color0 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();
  If(mipF.notEqual(0), () => {
    const color1 = vec3(bilinearCubeUV(envMap, sampleDir, mipInt.add(1), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP)).toVar();
    color0.assign(mix(color0, color1, mipF));
  });
  return color0;
});
var bilinearCubeUV = Fn(([envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP]) => {
  const mipInt = float(mipInt_immutable).toVar();
  const direction2 = vec3(direction_immutable);
  const face = float(getFace(direction2)).toVar();
  const filterInt = float(max$1(cubeUV_minMipLevel.sub(mipInt), 0)).toVar();
  mipInt.assign(max$1(mipInt, cubeUV_minMipLevel));
  const faceSize = float(exp22(mipInt)).toVar();
  const uv2 = vec2(getUV(direction2, face).mul(faceSize.sub(2)).add(1)).toVar();
  If(face.greaterThan(2), () => {
    uv2.y.addAssign(faceSize);
    face.subAssign(3);
  });
  uv2.x.addAssign(face.mul(faceSize));
  uv2.x.addAssign(filterInt.mul(mul(3, cubeUV_minTileSize)));
  uv2.y.addAssign(mul(4, exp22(CUBEUV_MAX_MIP).sub(faceSize)));
  uv2.x.mulAssign(CUBEUV_TEXEL_WIDTH);
  uv2.y.mulAssign(CUBEUV_TEXEL_HEIGHT);
  return envMap.uv(uv2).grad(vec2(), vec2());
});
var getSample = Fn(({ envMap, mipInt, outputDirection: outputDirection2, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP }) => {
  const cosTheta = cos3(theta);
  const sampleDirection = outputDirection2.mul(cosTheta).add(axis.cross(outputDirection2).mul(sin3(theta))).add(axis.mul(axis.dot(outputDirection2).mul(cosTheta.oneMinus())));
  return bilinearCubeUV(envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP);
});
var blur3 = Fn(({ n: n2, latitudinal, poleAxis, outputDirection: outputDirection2, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP }) => {
  const axis = vec3(select(latitudinal, poleAxis, cross2(poleAxis, outputDirection2))).toVar();
  If(all(axis.equals(vec3(0))), () => {
    axis.assign(vec3(outputDirection2.z, 0, outputDirection2.x.negate()));
  });
  axis.assign(normalize3(axis));
  const gl_FragColor = vec3().toVar();
  gl_FragColor.addAssign(weights.element(int(0)).mul(getSample({ theta: 0, axis, outputDirection: outputDirection2, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
  Loop({ start: int(1), end: n2 }, ({ i: i2 }) => {
    If(i2.greaterThanEqual(samples), () => {
      Break();
    });
    const theta = float(dTheta.mul(float(i2))).toVar();
    gl_FragColor.addAssign(weights.element(i2).mul(getSample({ theta: theta.mul(-1), axis, outputDirection: outputDirection2, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
    gl_FragColor.addAssign(weights.element(i2).mul(getSample({ theta, axis, outputDirection: outputDirection2, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP })));
  });
  return vec4(gl_FragColor, 1);
});
var _generator = null;
var _cache2 = /* @__PURE__ */ new WeakMap();
function _generateCubeUVSize(imageHeight) {
  const maxMip = Math.log2(imageHeight) - 2;
  const texelHeight = 1 / imageHeight;
  const texelWidth = 1 / (3 * Math.max(Math.pow(2, maxMip), 7 * 16));
  return { texelWidth, texelHeight, maxMip };
}
function _getPMREMFromTexture(texture2) {
  let cacheTexture = _cache2.get(texture2);
  const pmremVersion = cacheTexture !== void 0 ? cacheTexture.pmremVersion : -1;
  if (pmremVersion !== texture2.pmremVersion) {
    const image = texture2.image;
    if (texture2.isCubeTexture) {
      if (isCubeMapReady(image)) {
        cacheTexture = _generator.fromCubemap(texture2, cacheTexture);
      } else {
        return null;
      }
    } else {
      if (isEquirectangularMapReady(image)) {
        cacheTexture = _generator.fromEquirectangular(texture2, cacheTexture);
      } else {
        return null;
      }
    }
    cacheTexture.pmremVersion = texture2.pmremVersion;
    _cache2.set(texture2, cacheTexture);
  }
  return cacheTexture.texture;
}
var PMREMNode = class extends TempNode {
  constructor(value, uvNode = null, levelNode = null) {
    super("vec3");
    this._value = value;
    this._pmrem = null;
    this.uvNode = uvNode;
    this.levelNode = levelNode;
    this._generator = null;
    const defaultTexture = new Texture2();
    defaultTexture.isRenderTargetTexture = true;
    this._texture = texture(defaultTexture);
    this._width = uniform(0);
    this._height = uniform(0);
    this._maxMip = uniform(0);
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  set value(value) {
    this._value = value;
    this._pmrem = null;
  }
  get value() {
    return this._value;
  }
  updateFromTexture(texture2) {
    const cubeUVSize = _generateCubeUVSize(texture2.image.height);
    this._texture.value = texture2;
    this._width.value = cubeUVSize.texelWidth;
    this._height.value = cubeUVSize.texelHeight;
    this._maxMip.value = cubeUVSize.maxMip;
  }
  updateBefore() {
    let pmrem = this._pmrem;
    const pmremVersion = pmrem ? pmrem.pmremVersion : -1;
    const texture2 = this._value;
    if (pmremVersion !== texture2.pmremVersion) {
      if (texture2.isPMREMTexture === true) {
        pmrem = texture2;
      } else {
        pmrem = _getPMREMFromTexture(texture2);
      }
      if (pmrem !== null) {
        this._pmrem = pmrem;
        this.updateFromTexture(pmrem);
      }
    }
  }
  setup(builder) {
    if (_generator === null) {
      _generator = builder.createPMREMGenerator();
    }
    this.updateBefore(builder);
    let uvNode = this.uvNode;
    if (uvNode === null && builder.context.getUV) {
      uvNode = builder.context.getUV(this);
    }
    const texture2 = this.value;
    if (builder.renderer.coordinateSystem === WebGLCoordinateSystem2 && texture2.isPMREMTexture !== true && texture2.isRenderTargetTexture === true) {
      uvNode = vec3(uvNode.x.negate(), uvNode.yz);
    }
    let levelNode = this.levelNode;
    if (levelNode === null && builder.context.getTextureLevel) {
      levelNode = builder.context.getTextureLevel(this);
    }
    return textureCubeUV(this._texture, uvNode, levelNode, this._width, this._height, this._maxMip);
  }
};
PMREMNode.type = registerNode("PMREM", PMREMNode);
function isCubeMapReady(image) {
  if (image === null || image === void 0) return false;
  let count2 = 0;
  const length2 = 6;
  for (let i2 = 0; i2 < length2; i2++) {
    if (image[i2] !== void 0) count2++;
  }
  return count2 === length2;
}
function isEquirectangularMapReady(image) {
  if (image === null || image === void 0) return false;
  return image.height > 0;
}
var pmremTexture = nodeProxy(PMREMNode);
var _envNodeCache = /* @__PURE__ */ new WeakMap();
var EnvironmentNode = class extends LightingNode {
  constructor(envNode = null) {
    super();
    this.envNode = envNode;
  }
  setup(builder) {
    const { material } = builder;
    let envNode = this.envNode;
    if (envNode.isTextureNode || envNode.isMaterialReferenceNode) {
      const value = envNode.isTextureNode ? envNode.value : material[envNode.property];
      let cacheEnvNode = _envNodeCache.get(value);
      if (cacheEnvNode === void 0) {
        cacheEnvNode = pmremTexture(value);
        _envNodeCache.set(value, cacheEnvNode);
      }
      envNode = cacheEnvNode;
    }
    const envMap = material.envMap;
    const intensity = envMap ? reference("envMapIntensity", "float", builder.material) : reference("environmentIntensity", "float", builder.scene);
    const useAnisotropy = material.useAnisotropy === true || material.anisotropy > 0;
    const radianceNormalView = useAnisotropy ? transformedBentNormalView : transformedNormalView;
    const radiance = envNode.context(createRadianceContext(roughness, radianceNormalView)).mul(intensity);
    const irradiance = envNode.context(createIrradianceContext(transformedNormalWorld)).mul(Math.PI).mul(intensity);
    const isolateRadiance = cache(radiance);
    const isolateIrradiance = cache(irradiance);
    builder.context.radiance.addAssign(isolateRadiance);
    builder.context.iblIrradiance.addAssign(isolateIrradiance);
    const clearcoatRadiance = builder.context.lightingModel.clearcoatRadiance;
    if (clearcoatRadiance) {
      const clearcoatRadianceContext = envNode.context(createRadianceContext(clearcoatRoughness, transformedClearcoatNormalView)).mul(intensity);
      const isolateClearcoatRadiance = cache(clearcoatRadianceContext);
      clearcoatRadiance.addAssign(isolateClearcoatRadiance);
    }
  }
};
EnvironmentNode.type = registerNode("Environment", EnvironmentNode);
var createRadianceContext = (roughnessNode, normalViewNode) => {
  let reflectVec = null;
  return {
    getUV: () => {
      if (reflectVec === null) {
        reflectVec = positionViewDirection.negate().reflect(normalViewNode);
        reflectVec = roughnessNode.mul(roughnessNode).mix(reflectVec, normalViewNode).normalize();
        reflectVec = reflectVec.transformDirection(cameraViewMatrix);
      }
      return reflectVec;
    },
    getTextureLevel: () => {
      return roughnessNode;
    }
  };
};
var createIrradianceContext = (normalWorldNode) => {
  return {
    getUV: () => {
      return normalWorldNode;
    },
    getTextureLevel: () => {
      return float(1);
    }
  };
};
var _defaultValues$6 = new MeshStandardMaterial();
var MeshStandardNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isMeshStandardNodeMaterial = true;
    this.lights = true;
    this.emissiveNode = null;
    this.metalnessNode = null;
    this.roughnessNode = null;
    this.setDefaultValues(_defaultValues$6);
    this.setValues(parameters);
  }
  setupEnvironment(builder) {
    let envNode = super.setupEnvironment(builder);
    if (envNode === null && builder.environmentNode) {
      envNode = builder.environmentNode;
    }
    return envNode ? new EnvironmentNode(envNode) : null;
  }
  setupLightingModel() {
    return new PhysicalLightingModel();
  }
  setupSpecular() {
    const specularColorNode = mix(vec3(0.04), diffuseColor.rgb, metalness);
    specularColor.assign(specularColorNode);
    specularF90.assign(1);
  }
  setupVariants() {
    const metalnessNode = this.metalnessNode ? float(this.metalnessNode) : materialMetalness;
    metalness.assign(metalnessNode);
    let roughnessNode = this.roughnessNode ? float(this.roughnessNode) : materialRoughness;
    roughnessNode = getRoughness({ roughness: roughnessNode });
    roughness.assign(roughnessNode);
    this.setupSpecular();
    diffuseColor.assign(vec4(diffuseColor.rgb.mul(metalnessNode.oneMinus()), diffuseColor.a));
  }
  copy(source) {
    this.emissiveNode = source.emissiveNode;
    this.metalnessNode = source.metalnessNode;
    this.roughnessNode = source.roughnessNode;
    return super.copy(source);
  }
};
MeshStandardNodeMaterial.type = registerNodeMaterial("MeshStandard", MeshStandardNodeMaterial);
var _defaultValues$5 = new MeshPhysicalMaterial();
var MeshPhysicalNodeMaterial = class extends MeshStandardNodeMaterial {
  constructor(parameters) {
    super();
    this.isMeshPhysicalNodeMaterial = true;
    this.clearcoatNode = null;
    this.clearcoatRoughnessNode = null;
    this.clearcoatNormalNode = null;
    this.sheenNode = null;
    this.sheenRoughnessNode = null;
    this.iridescenceNode = null;
    this.iridescenceIORNode = null;
    this.iridescenceThicknessNode = null;
    this.specularIntensityNode = null;
    this.specularColorNode = null;
    this.iorNode = null;
    this.transmissionNode = null;
    this.thicknessNode = null;
    this.attenuationDistanceNode = null;
    this.attenuationColorNode = null;
    this.dispersionNode = null;
    this.anisotropyNode = null;
    this.setDefaultValues(_defaultValues$5);
    this.setValues(parameters);
  }
  get useClearcoat() {
    return this.clearcoat > 0 || this.clearcoatNode !== null;
  }
  get useIridescence() {
    return this.iridescence > 0 || this.iridescenceNode !== null;
  }
  get useSheen() {
    return this.sheen > 0 || this.sheenNode !== null;
  }
  get useAnisotropy() {
    return this.anisotropy > 0 || this.anisotropyNode !== null;
  }
  get useTransmission() {
    return this.transmission > 0 || this.transmissionNode !== null;
  }
  get useDispersion() {
    return this.dispersion > 0 || this.dispersionNode !== null;
  }
  setupSpecular() {
    const iorNode = this.iorNode ? float(this.iorNode) : materialIOR;
    ior.assign(iorNode);
    specularColor.assign(mix(min$1(pow22(ior.sub(1).div(ior.add(1))).mul(materialSpecularColor), vec3(1)).mul(materialSpecularIntensity), diffuseColor.rgb, metalness));
    specularF90.assign(mix(materialSpecularIntensity, 1, metalness));
  }
  setupLightingModel() {
    return new PhysicalLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useAnisotropy, this.useTransmission, this.useDispersion);
  }
  setupVariants(builder) {
    super.setupVariants(builder);
    if (this.useClearcoat) {
      const clearcoatNode = this.clearcoatNode ? float(this.clearcoatNode) : materialClearcoat;
      const clearcoatRoughnessNode = this.clearcoatRoughnessNode ? float(this.clearcoatRoughnessNode) : materialClearcoatRoughness;
      clearcoat.assign(clearcoatNode);
      clearcoatRoughness.assign(getRoughness({ roughness: clearcoatRoughnessNode }));
    }
    if (this.useSheen) {
      const sheenNode = this.sheenNode ? vec3(this.sheenNode) : materialSheen;
      const sheenRoughnessNode = this.sheenRoughnessNode ? float(this.sheenRoughnessNode) : materialSheenRoughness;
      sheen.assign(sheenNode);
      sheenRoughness.assign(sheenRoughnessNode);
    }
    if (this.useIridescence) {
      const iridescenceNode = this.iridescenceNode ? float(this.iridescenceNode) : materialIridescence;
      const iridescenceIORNode = this.iridescenceIORNode ? float(this.iridescenceIORNode) : materialIridescenceIOR;
      const iridescenceThicknessNode = this.iridescenceThicknessNode ? float(this.iridescenceThicknessNode) : materialIridescenceThickness;
      iridescence.assign(iridescenceNode);
      iridescenceIOR.assign(iridescenceIORNode);
      iridescenceThickness.assign(iridescenceThicknessNode);
    }
    if (this.useAnisotropy) {
      const anisotropyV = (this.anisotropyNode ? vec2(this.anisotropyNode) : materialAnisotropy).toVar();
      anisotropy.assign(anisotropyV.length());
      If(anisotropy.equal(0), () => {
        anisotropyV.assign(vec2(1, 0));
      }).Else(() => {
        anisotropyV.divAssign(vec2(anisotropy));
        anisotropy.assign(anisotropy.saturate());
      });
      alphaT.assign(anisotropy.pow2().mix(roughness.pow2(), 1));
      anisotropyT.assign(TBNViewMatrix[0].mul(anisotropyV.x).add(TBNViewMatrix[1].mul(anisotropyV.y)));
      anisotropyB.assign(TBNViewMatrix[1].mul(anisotropyV.x).sub(TBNViewMatrix[0].mul(anisotropyV.y)));
    }
    if (this.useTransmission) {
      const transmissionNode = this.transmissionNode ? float(this.transmissionNode) : materialTransmission;
      const thicknessNode = this.thicknessNode ? float(this.thicknessNode) : materialThickness;
      const attenuationDistanceNode = this.attenuationDistanceNode ? float(this.attenuationDistanceNode) : materialAttenuationDistance;
      const attenuationColorNode = this.attenuationColorNode ? vec3(this.attenuationColorNode) : materialAttenuationColor;
      transmission.assign(transmissionNode);
      thickness.assign(thicknessNode);
      attenuationDistance.assign(attenuationDistanceNode);
      attenuationColor.assign(attenuationColorNode);
      if (this.useDispersion) {
        const dispersionNode = this.dispersionNode ? float(this.dispersionNode) : materialDispersion;
        dispersion.assign(dispersionNode);
      }
    }
  }
  setupClearcoatNormal() {
    return this.clearcoatNormalNode ? vec3(this.clearcoatNormalNode) : materialClearcoatNormal;
  }
  setup(builder) {
    builder.context.setupClearcoatNormal = () => this.setupClearcoatNormal(builder);
    super.setup(builder);
  }
  copy(source) {
    this.clearcoatNode = source.clearcoatNode;
    this.clearcoatRoughnessNode = source.clearcoatRoughnessNode;
    this.clearcoatNormalNode = source.clearcoatNormalNode;
    this.sheenNode = source.sheenNode;
    this.sheenRoughnessNode = source.sheenRoughnessNode;
    this.iridescenceNode = source.iridescenceNode;
    this.iridescenceIORNode = source.iridescenceIORNode;
    this.iridescenceThicknessNode = source.iridescenceThicknessNode;
    this.specularIntensityNode = source.specularIntensityNode;
    this.specularColorNode = source.specularColorNode;
    this.transmissionNode = source.transmissionNode;
    this.thicknessNode = source.thicknessNode;
    this.attenuationDistanceNode = source.attenuationDistanceNode;
    this.attenuationColorNode = source.attenuationColorNode;
    this.dispersionNode = source.dispersionNode;
    this.anisotropyNode = source.anisotropyNode;
    return super.copy(source);
  }
};
MeshPhysicalNodeMaterial.type = registerNodeMaterial("MeshPhysical", MeshPhysicalNodeMaterial);
var SSSLightingModel = class extends PhysicalLightingModel {
  constructor(useClearcoat, useSheen, useIridescence, useSSS) {
    super(useClearcoat, useSheen, useIridescence);
    this.useSSS = useSSS;
  }
  direct({ lightDirection, lightColor, reflectedLight }, stack2, builder) {
    if (this.useSSS === true) {
      const material = builder.material;
      const { thicknessColorNode, thicknessDistortionNode, thicknessAmbientNode, thicknessAttenuationNode, thicknessPowerNode, thicknessScaleNode } = material;
      const scatteringHalf = lightDirection.add(transformedNormalView.mul(thicknessDistortionNode)).normalize();
      const scatteringDot = float(positionViewDirection.dot(scatteringHalf.negate()).saturate().pow(thicknessPowerNode).mul(thicknessScaleNode));
      const scatteringIllu = vec3(scatteringDot.add(thicknessAmbientNode).mul(thicknessColorNode));
      reflectedLight.directDiffuse.addAssign(scatteringIllu.mul(thicknessAttenuationNode.mul(lightColor)));
    }
    super.direct({ lightDirection, lightColor, reflectedLight }, stack2, builder);
  }
};
var MeshSSSNodeMaterial = class extends MeshPhysicalNodeMaterial {
  constructor(parameters) {
    super(parameters);
    this.thicknessColorNode = null;
    this.thicknessDistortionNode = float(0.1);
    this.thicknessAmbientNode = float(0);
    this.thicknessAttenuationNode = float(0.1);
    this.thicknessPowerNode = float(2);
    this.thicknessScaleNode = float(10);
  }
  get useSSS() {
    return this.thicknessColorNode !== null;
  }
  setupLightingModel() {
    return new SSSLightingModel(this.useClearcoat, this.useSheen, this.useIridescence, this.useSSS);
  }
  copy(source) {
    this.thicknessColorNode = source.thicknessColorNode;
    this.thicknessDistortionNode = source.thicknessDistortionNode;
    this.thicknessAmbientNode = source.thicknessAmbientNode;
    this.thicknessAttenuationNode = source.thicknessAttenuationNode;
    this.thicknessPowerNode = source.thicknessPowerNode;
    this.thicknessScaleNode = source.thicknessScaleNode;
    return super.copy(source);
  }
};
MeshSSSNodeMaterial.type = registerNodeMaterial("MeshSSS", MeshSSSNodeMaterial);
var getGradientIrradiance = Fn(({ normal: normal2, lightDirection, builder }) => {
  const dotNL = normal2.dot(lightDirection);
  const coord = vec2(dotNL.mul(0.5).add(0.5), 0);
  if (builder.material.gradientMap) {
    const gradientMap = materialReference("gradientMap", "texture").context({ getUV: () => coord });
    return vec3(gradientMap.r);
  } else {
    const fw = coord.fwidth().mul(0.5);
    return mix(vec3(0.7), vec3(1), smoothstep2(float(0.7).sub(fw.x), float(0.7).add(fw.x), coord.x));
  }
});
var ToonLightingModel = class extends LightingModel {
  direct({ lightDirection, lightColor, reflectedLight }, stack2, builder) {
    const irradiance = getGradientIrradiance({ normal: normalGeometry, lightDirection, builder }).mul(lightColor);
    reflectedLight.directDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor: diffuseColor.rgb })));
  }
  indirect({ ambientOcclusion, irradiance, reflectedLight }) {
    reflectedLight.indirectDiffuse.addAssign(irradiance.mul(BRDF_Lambert({ diffuseColor })));
    reflectedLight.indirectDiffuse.mulAssign(ambientOcclusion);
  }
};
var _defaultValues$4 = new MeshToonMaterial();
var MeshToonNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isMeshToonNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues$4);
    this.setValues(parameters);
  }
  setupLightingModel() {
    return new ToonLightingModel();
  }
};
MeshToonNodeMaterial.type = registerNodeMaterial("MeshToon", MeshToonNodeMaterial);
var MatcapUVNode = class extends TempNode {
  constructor() {
    super("vec2");
  }
  setup() {
    const x2 = vec3(positionViewDirection.z, 0, positionViewDirection.x.negate()).normalize();
    const y2 = positionViewDirection.cross(x2);
    return vec2(x2.dot(transformedNormalView), y2.dot(transformedNormalView)).mul(0.495).add(0.5);
  }
};
MatcapUVNode.type = registerNode("MatcapUV", MatcapUVNode);
var matcapUV = nodeImmutable(MatcapUVNode);
var _defaultValues$3 = new MeshMatcapMaterial();
var MeshMatcapNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.lights = false;
    this.isMeshMatcapNodeMaterial = true;
    this.setDefaultValues(_defaultValues$3);
    this.setValues(parameters);
  }
  setupVariants(builder) {
    const uv2 = matcapUV;
    let matcapColor;
    if (builder.material.matcap) {
      matcapColor = materialReference("matcap", "texture").context({ getUV: () => uv2 });
    } else {
      matcapColor = vec3(mix(0.2, 0.8, uv2.y));
    }
    diffuseColor.rgb.mulAssign(matcapColor.rgb);
  }
};
MeshMatcapNodeMaterial.type = registerNodeMaterial("MeshMatcap", MeshMatcapNodeMaterial);
var _defaultValues$2 = new PointsMaterial2();
var PointsNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isPointsNodeMaterial = true;
    this.lights = false;
    this.transparent = true;
    this.sizeNode = null;
    this.setDefaultValues(_defaultValues$2);
    this.setValues(parameters);
  }
  copy(source) {
    this.sizeNode = source.sizeNode;
    return super.copy(source);
  }
};
PointsNodeMaterial.type = registerNodeMaterial("Points", PointsNodeMaterial);
var RotateNode = class extends TempNode {
  constructor(positionNode, rotationNode) {
    super();
    this.positionNode = positionNode;
    this.rotationNode = rotationNode;
  }
  getNodeType(builder) {
    return this.positionNode.getNodeType(builder);
  }
  setup(builder) {
    const { rotationNode, positionNode } = this;
    const nodeType = this.getNodeType(builder);
    if (nodeType === "vec2") {
      const cosAngle = rotationNode.cos();
      const sinAngle = rotationNode.sin();
      const rotationMatrix = mat2(
        cosAngle,
        sinAngle,
        sinAngle.negate(),
        cosAngle
      );
      return rotationMatrix.mul(positionNode);
    } else {
      const rotation = rotationNode;
      const rotationXMatrix = mat4(vec4(1, 0, 0, 0), vec4(0, cos3(rotation.x), sin3(rotation.x).negate(), 0), vec4(0, sin3(rotation.x), cos3(rotation.x), 0), vec4(0, 0, 0, 1));
      const rotationYMatrix = mat4(vec4(cos3(rotation.y), 0, sin3(rotation.y), 0), vec4(0, 1, 0, 0), vec4(sin3(rotation.y).negate(), 0, cos3(rotation.y), 0), vec4(0, 0, 0, 1));
      const rotationZMatrix = mat4(vec4(cos3(rotation.z), sin3(rotation.z).negate(), 0, 0), vec4(sin3(rotation.z), cos3(rotation.z), 0, 0), vec4(0, 0, 1, 0), vec4(0, 0, 0, 1));
      return rotationXMatrix.mul(rotationYMatrix).mul(rotationZMatrix).mul(vec4(positionNode, 1)).xyz;
    }
  }
};
RotateNode.type = registerNode("Rotate", RotateNode);
var rotate = nodeProxy(RotateNode);
var _defaultValues$1 = new SpriteMaterial();
var SpriteNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isSpriteNodeMaterial = true;
    this.lights = false;
    this.positionNode = null;
    this.rotationNode = null;
    this.scaleNode = null;
    this.setDefaultValues(_defaultValues$1);
    this.setValues(parameters);
  }
  setupPosition({ object: object2, context: context2 }) {
    const { positionNode, rotationNode, scaleNode } = this;
    const vertex2 = positionLocal;
    let mvPosition = modelViewMatrix.mul(vec3(positionNode || 0));
    let scale2 = vec2(modelWorldMatrix[0].xyz.length(), modelWorldMatrix[1].xyz.length());
    if (scaleNode !== null) {
      scale2 = scale2.mul(scaleNode);
    }
    let alignedPosition = vertex2.xy;
    if (object2.center && object2.center.isVector2 === true) {
      alignedPosition = alignedPosition.sub(uniform(object2.center).sub(0.5));
    }
    alignedPosition = alignedPosition.mul(scale2);
    const rotation = float(rotationNode || materialRotation);
    const rotatedPosition = rotate(alignedPosition, rotation);
    mvPosition = vec4(mvPosition.xy.add(rotatedPosition), mvPosition.zw);
    const modelViewProjection2 = cameraProjectionMatrix.mul(mvPosition);
    context2.vertex = vertex2;
    return modelViewProjection2;
  }
  copy(source) {
    this.positionNode = source.positionNode;
    this.rotationNode = source.rotationNode;
    this.scaleNode = source.scaleNode;
    return super.copy(source);
  }
};
SpriteNodeMaterial.type = registerNodeMaterial("Sprite", SpriteNodeMaterial);
var ShadowMaskModel = class extends LightingModel {
  constructor() {
    super();
    this.shadowNode = float(1).toVar("shadowMask");
  }
  direct({ shadowMask }) {
    this.shadowNode.mulAssign(shadowMask);
  }
  finish(context2) {
    diffuseColor.a.mulAssign(this.shadowNode.oneMinus());
    context2.outgoingLight.rgb.assign(diffuseColor.rgb);
  }
};
var _defaultValues = new ShadowMaterial();
var ShadowNodeMaterial = class extends NodeMaterial {
  constructor(parameters) {
    super();
    this.isShadowNodeMaterial = true;
    this.lights = true;
    this.setDefaultValues(_defaultValues);
    this.setValues(parameters);
  }
  setupLightingModel() {
    return new ShadowMaskModel();
  }
};
ShadowNodeMaterial.type = registerNodeMaterial("Shadow", ShadowNodeMaterial);
var normal = Fn(({ texture: texture2, uv: uv2 }) => {
  const epsilon5 = 1e-4;
  const ret = vec3().temp();
  If(uv2.x.lessThan(epsilon5), () => {
    ret.assign(vec3(1, 0, 0));
  }).ElseIf(uv2.y.lessThan(epsilon5), () => {
    ret.assign(vec3(0, 1, 0));
  }).ElseIf(uv2.z.lessThan(epsilon5), () => {
    ret.assign(vec3(0, 0, 1));
  }).ElseIf(uv2.x.greaterThan(1 - epsilon5), () => {
    ret.assign(vec3(-1, 0, 0));
  }).ElseIf(uv2.y.greaterThan(1 - epsilon5), () => {
    ret.assign(vec3(0, -1, 0));
  }).ElseIf(uv2.z.greaterThan(1 - epsilon5), () => {
    ret.assign(vec3(0, 0, -1));
  }).Else(() => {
    const step2 = 0.01;
    const x2 = texture2.uv(uv2.add(vec3(-step2, 0, 0))).r.sub(texture2.uv(uv2.add(vec3(step2, 0, 0))).r);
    const y2 = texture2.uv(uv2.add(vec3(0, -step2, 0))).r.sub(texture2.uv(uv2.add(vec3(0, step2, 0))).r);
    const z2 = texture2.uv(uv2.add(vec3(0, 0, -step2))).r.sub(texture2.uv(uv2.add(vec3(0, 0, step2))).r);
    ret.assign(vec3(x2, y2, z2));
  });
  return ret.normalize();
});
var Texture3DNode = class extends TextureNode {
  constructor(value, uvNode = null, levelNode = null) {
    super(value, uvNode, levelNode);
    this.isTexture3DNode = true;
  }
  getInputType() {
    return "texture3D";
  }
  getDefaultUV() {
    return vec3(0.5, 0.5, 0.5);
  }
  setUpdateMatrix() {
  }
  // Ignore .updateMatrix for 3d TextureNode
  setupUV(builder, uvNode) {
    return uvNode;
  }
  generateUV(builder, uvNode) {
    return uvNode.build(builder, "vec3");
  }
  normal(uvNode) {
    return normal({ texture: this, uv: uvNode });
  }
};
Texture3DNode.type = registerNode("Texture3D", Texture3DNode);
var texture3D = nodeProxy(Texture3DNode);
var VolumeNodeMaterial = class extends NodeMaterial {
  constructor(params = {}) {
    super();
    this.lights = false;
    this.isVolumeNodeMaterial = true;
    this.testNode = null;
    this.setValues(params);
  }
  setup(builder) {
    const map4 = texture3D(this.map, null, 0);
    const hitBox = Fn(({ orig, dir }) => {
      const box_min = vec3(-0.5);
      const box_max = vec3(0.5);
      const inv_dir = dir.reciprocal();
      const tmin_tmp = box_min.sub(orig).mul(inv_dir);
      const tmax_tmp = box_max.sub(orig).mul(inv_dir);
      const tmin = min$1(tmin_tmp, tmax_tmp);
      const tmax = max$1(tmin_tmp, tmax_tmp);
      const t03 = max$1(tmin.x, max$1(tmin.y, tmin.z));
      const t13 = min$1(tmax.x, min$1(tmax.y, tmax.z));
      return vec2(t03, t13);
    });
    this.fragmentNode = Fn(() => {
      const vOrigin = varying(vec3(modelWorldMatrixInverse.mul(vec4(cameraPosition, 1))));
      const vDirection = varying(positionGeometry.sub(vOrigin));
      const rayDir = vDirection.normalize();
      const bounds = property("vec2", "bounds").assign(hitBox({ orig: vOrigin, dir: rayDir }));
      bounds.x.greaterThan(bounds.y).discard();
      bounds.assign(vec2(max$1(bounds.x, 0), bounds.y));
      const p2 = property("vec3", "p").assign(vOrigin.add(bounds.x.mul(rayDir)));
      const inc = property("vec3", "inc").assign(vec3(rayDir.abs().reciprocal()));
      const delta = property("float", "delta").assign(min$1(inc.x, min$1(inc.y, inc.z)));
      delta.divAssign(materialReference("steps", "float"));
      const ac2 = property("vec4", "ac").assign(vec4(materialReference("base", "color"), 0));
      Loop({ type: "float", start: bounds.x, end: bounds.y, update: "+= delta" }, () => {
        const d2 = property("float", "d").assign(map4.uv(p2.add(0.5)).r);
        if (this.testNode !== null) {
          this.testNode({ map: map4, mapValue: d2, probe: p2, finalColor: ac2 }).append();
        } else {
          ac2.a.assign(1);
          Break();
        }
        p2.addAssign(rayDir.mul(delta));
      });
      ac2.a.equal(0).discard();
      return vec4(ac2);
    })();
    super.setup(builder);
  }
};
VolumeNodeMaterial.type = registerNodeMaterial("Volume", VolumeNodeMaterial);
function convertArray2(array3, type, forceClone) {
  if (!array3 || // let 'undefined' and 'null' pass
  !forceClone && array3.constructor === type) return array3;
  if (typeof type.BYTES_PER_ELEMENT === "number") {
    return new type(array3);
  }
  return Array.prototype.slice.call(array3);
}
function isTypedArray2(object2) {
  return ArrayBuffer.isView(object2) && !(object2 instanceof DataView);
}
var Interpolant2 = class {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    this.parameterPositions = parameterPositions;
    this._cachedIndex = 0;
    this.resultBuffer = resultBuffer !== void 0 ? resultBuffer : new sampleValues.constructor(sampleSize);
    this.sampleValues = sampleValues;
    this.valueSize = sampleSize;
    this.settings = null;
    this.DefaultSettings_ = {};
  }
  evaluate(t4) {
    const pp = this.parameterPositions;
    let i1 = this._cachedIndex, t13 = pp[i1], t03 = pp[i1 - 1];
    validate_interval: {
      seek: {
        let right;
        linear_scan: {
          forward_scan: if (!(t4 < t13)) {
            for (let giveUpAt = i1 + 2; ; ) {
              if (t13 === void 0) {
                if (t4 < t03) break forward_scan;
                i1 = pp.length;
                this._cachedIndex = i1;
                return this.copySampleValue_(i1 - 1);
              }
              if (i1 === giveUpAt) break;
              t03 = t13;
              t13 = pp[++i1];
              if (t4 < t13) {
                break seek;
              }
            }
            right = pp.length;
            break linear_scan;
          }
          if (!(t4 >= t03)) {
            const t1global = pp[1];
            if (t4 < t1global) {
              i1 = 2;
              t03 = t1global;
            }
            for (let giveUpAt = i1 - 2; ; ) {
              if (t03 === void 0) {
                this._cachedIndex = 0;
                return this.copySampleValue_(0);
              }
              if (i1 === giveUpAt) break;
              t13 = t03;
              t03 = pp[--i1 - 1];
              if (t4 >= t03) {
                break seek;
              }
            }
            right = i1;
            i1 = 0;
            break linear_scan;
          }
          break validate_interval;
        }
        while (i1 < right) {
          const mid = i1 + right >>> 1;
          if (t4 < pp[mid]) {
            right = mid;
          } else {
            i1 = mid + 1;
          }
        }
        t13 = pp[i1];
        t03 = pp[i1 - 1];
        if (t03 === void 0) {
          this._cachedIndex = 0;
          return this.copySampleValue_(0);
        }
        if (t13 === void 0) {
          i1 = pp.length;
          this._cachedIndex = i1;
          return this.copySampleValue_(i1 - 1);
        }
      }
      this._cachedIndex = i1;
      this.intervalChanged_(i1, t03, t13);
    }
    return this.interpolate_(i1, t03, t4, t13);
  }
  getSettings_() {
    return this.settings || this.DefaultSettings_;
  }
  copySampleValue_(index7) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset = index7 * stride;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset + i2];
    }
    return result;
  }
  // Template methods for derived classes:
  interpolate_() {
    throw new Error("call to abstract method");
  }
  intervalChanged_() {
  }
};
var CubicInterpolant2 = class extends Interpolant2 {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
    this._weightPrev = -0;
    this._offsetPrev = -0;
    this._weightNext = -0;
    this._offsetNext = -0;
    this.DefaultSettings_ = {
      endingStart: ZeroCurvatureEnding2,
      endingEnd: ZeroCurvatureEnding2
    };
  }
  intervalChanged_(i1, t03, t13) {
    const pp = this.parameterPositions;
    let iPrev = i1 - 2, iNext = i1 + 1, tPrev = pp[iPrev], tNext = pp[iNext];
    if (tPrev === void 0) {
      switch (this.getSettings_().endingStart) {
        case ZeroSlopeEnding2:
          iPrev = i1;
          tPrev = 2 * t03 - t13;
          break;
        case WrapAroundEnding2:
          iPrev = pp.length - 2;
          tPrev = t03 + pp[iPrev] - pp[iPrev + 1];
          break;
        default:
          iPrev = i1;
          tPrev = t13;
      }
    }
    if (tNext === void 0) {
      switch (this.getSettings_().endingEnd) {
        case ZeroSlopeEnding2:
          iNext = i1;
          tNext = 2 * t13 - t03;
          break;
        case WrapAroundEnding2:
          iNext = 1;
          tNext = t13 + pp[1] - pp[0];
          break;
        default:
          iNext = i1 - 1;
          tNext = t03;
      }
    }
    const halfDt = (t13 - t03) * 0.5, stride = this.valueSize;
    this._weightPrev = halfDt / (t03 - tPrev);
    this._weightNext = halfDt / (tNext - t13);
    this._offsetPrev = iPrev * stride;
    this._offsetNext = iNext * stride;
  }
  interpolate_(i1, t03, t4, t13) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, o1 = i1 * stride, o0 = o1 - stride, oP = this._offsetPrev, oN = this._offsetNext, wP = this._weightPrev, wN = this._weightNext, p2 = (t4 - t03) / (t13 - t03), pp = p2 * p2, ppp = pp * p2;
    const sP = -wP * ppp + 2 * wP * pp - wP * p2;
    const s0 = (1 + wP) * ppp + (-1.5 - 2 * wP) * pp + (-0.5 + wP) * p2 + 1;
    const s1 = (-1 - wN) * ppp + (1.5 + wN) * pp + 0.5 * p2;
    const sN = wN * ppp - wN * pp;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = sP * values[oP + i2] + s0 * values[o0 + i2] + s1 * values[o1 + i2] + sN * values[oN + i2];
    }
    return result;
  }
};
var LinearInterpolant2 = class extends Interpolant2 {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1, t03, t4, t13) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, offset1 = i1 * stride, offset0 = offset1 - stride, weight1 = (t4 - t03) / (t13 - t03), weight0 = 1 - weight1;
    for (let i2 = 0; i2 !== stride; ++i2) {
      result[i2] = values[offset0 + i2] * weight0 + values[offset1 + i2] * weight1;
    }
    return result;
  }
};
var DiscreteInterpolant2 = class extends Interpolant2 {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1) {
    return this.copySampleValue_(i1 - 1);
  }
};
var KeyframeTrack2 = class {
  constructor(name, times, values, interpolation) {
    if (name === void 0) throw new Error("THREE.KeyframeTrack: track name is undefined");
    if (times === void 0 || times.length === 0) throw new Error("THREE.KeyframeTrack: no keyframes in track named " + name);
    this.name = name;
    this.times = convertArray2(times, this.TimeBufferType);
    this.values = convertArray2(values, this.ValueBufferType);
    this.setInterpolation(interpolation || this.DefaultInterpolation);
  }
  // Serialization (in static context, because of constructor invocation
  // and automatic invocation of .toJSON):
  static toJSON(track) {
    const trackType = track.constructor;
    let json;
    if (trackType.toJSON !== this.toJSON) {
      json = trackType.toJSON(track);
    } else {
      json = {
        "name": track.name,
        "times": convertArray2(track.times, Array),
        "values": convertArray2(track.values, Array)
      };
      const interpolation = track.getInterpolation();
      if (interpolation !== track.DefaultInterpolation) {
        json.interpolation = interpolation;
      }
    }
    json.type = track.ValueTypeName;
    return json;
  }
  InterpolantFactoryMethodDiscrete(result) {
    return new DiscreteInterpolant2(this.times, this.values, this.getValueSize(), result);
  }
  InterpolantFactoryMethodLinear(result) {
    return new LinearInterpolant2(this.times, this.values, this.getValueSize(), result);
  }
  InterpolantFactoryMethodSmooth(result) {
    return new CubicInterpolant2(this.times, this.values, this.getValueSize(), result);
  }
  setInterpolation(interpolation) {
    let factoryMethod;
    switch (interpolation) {
      case InterpolateDiscrete2:
        factoryMethod = this.InterpolantFactoryMethodDiscrete;
        break;
      case InterpolateLinear2:
        factoryMethod = this.InterpolantFactoryMethodLinear;
        break;
      case InterpolateSmooth2:
        factoryMethod = this.InterpolantFactoryMethodSmooth;
        break;
    }
    if (factoryMethod === void 0) {
      const message = "unsupported interpolation for " + this.ValueTypeName + " keyframe track named " + this.name;
      if (this.createInterpolant === void 0) {
        if (interpolation !== this.DefaultInterpolation) {
          this.setInterpolation(this.DefaultInterpolation);
        } else {
          throw new Error(message);
        }
      }
      console.warn("THREE.KeyframeTrack:", message);
      return this;
    }
    this.createInterpolant = factoryMethod;
    return this;
  }
  getInterpolation() {
    switch (this.createInterpolant) {
      case this.InterpolantFactoryMethodDiscrete:
        return InterpolateDiscrete2;
      case this.InterpolantFactoryMethodLinear:
        return InterpolateLinear2;
      case this.InterpolantFactoryMethodSmooth:
        return InterpolateSmooth2;
    }
  }
  getValueSize() {
    return this.values.length / this.times.length;
  }
  // move all keyframes either forwards or backwards in time
  shift(timeOffset) {
    if (timeOffset !== 0) {
      const times = this.times;
      for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
        times[i2] += timeOffset;
      }
    }
    return this;
  }
  // scale all keyframe times by a factor (useful for frame <-> seconds conversions)
  scale(timeScale) {
    if (timeScale !== 1) {
      const times = this.times;
      for (let i2 = 0, n2 = times.length; i2 !== n2; ++i2) {
        times[i2] *= timeScale;
      }
    }
    return this;
  }
  // removes keyframes before and after animation without changing any values within the range [startTime, endTime].
  // IMPORTANT: We do not shift around keys to the start of the track time, because for interpolated keys this will change their values
  trim(startTime, endTime) {
    const times = this.times, nKeys = times.length;
    let from = 0, to = nKeys - 1;
    while (from !== nKeys && times[from] < startTime) {
      ++from;
    }
    while (to !== -1 && times[to] > endTime) {
      --to;
    }
    ++to;
    if (from !== 0 || to !== nKeys) {
      if (from >= to) {
        to = Math.max(to, 1);
        from = to - 1;
      }
      const stride = this.getValueSize();
      this.times = times.slice(from, to);
      this.values = this.values.slice(from * stride, to * stride);
    }
    return this;
  }
  // ensure we do not get a GarbageInGarbageOut situation, make sure tracks are at least minimally viable
  validate() {
    let valid = true;
    const valueSize = this.getValueSize();
    if (valueSize - Math.floor(valueSize) !== 0) {
      console.error("THREE.KeyframeTrack: Invalid value size in track.", this);
      valid = false;
    }
    const times = this.times, values = this.values, nKeys = times.length;
    if (nKeys === 0) {
      console.error("THREE.KeyframeTrack: Track is empty.", this);
      valid = false;
    }
    let prevTime = null;
    for (let i2 = 0; i2 !== nKeys; i2++) {
      const currTime = times[i2];
      if (typeof currTime === "number" && isNaN(currTime)) {
        console.error("THREE.KeyframeTrack: Time is not a valid number.", this, i2, currTime);
        valid = false;
        break;
      }
      if (prevTime !== null && prevTime > currTime) {
        console.error("THREE.KeyframeTrack: Out of order keys.", this, i2, currTime, prevTime);
        valid = false;
        break;
      }
      prevTime = currTime;
    }
    if (values !== void 0) {
      if (isTypedArray2(values)) {
        for (let i2 = 0, n2 = values.length; i2 !== n2; ++i2) {
          const value = values[i2];
          if (isNaN(value)) {
            console.error("THREE.KeyframeTrack: Value is not a valid number.", this, i2, value);
            valid = false;
            break;
          }
        }
      }
    }
    return valid;
  }
  // removes equivalent sequential keys as common in morph target sequences
  // (0,0,0,0,1,1,1,0,0,0,0,0,0,0) --> (0,0,1,1,0,0)
  optimize() {
    const times = this.times.slice(), values = this.values.slice(), stride = this.getValueSize(), smoothInterpolation = this.getInterpolation() === InterpolateSmooth2, lastIndex = times.length - 1;
    let writeIndex = 1;
    for (let i2 = 1; i2 < lastIndex; ++i2) {
      let keep = false;
      const time2 = times[i2];
      const timeNext = times[i2 + 1];
      if (time2 !== timeNext && (i2 !== 1 || time2 !== times[0])) {
        if (!smoothInterpolation) {
          const offset = i2 * stride, offsetP = offset - stride, offsetN = offset + stride;
          for (let j2 = 0; j2 !== stride; ++j2) {
            const value = values[offset + j2];
            if (value !== values[offsetP + j2] || value !== values[offsetN + j2]) {
              keep = true;
              break;
            }
          }
        } else {
          keep = true;
        }
      }
      if (keep) {
        if (i2 !== writeIndex) {
          times[writeIndex] = times[i2];
          const readOffset = i2 * stride, writeOffset = writeIndex * stride;
          for (let j2 = 0; j2 !== stride; ++j2) {
            values[writeOffset + j2] = values[readOffset + j2];
          }
        }
        ++writeIndex;
      }
    }
    if (lastIndex > 0) {
      times[writeIndex] = times[lastIndex];
      for (let readOffset = lastIndex * stride, writeOffset = writeIndex * stride, j2 = 0; j2 !== stride; ++j2) {
        values[writeOffset + j2] = values[readOffset + j2];
      }
      ++writeIndex;
    }
    if (writeIndex !== times.length) {
      this.times = times.slice(0, writeIndex);
      this.values = values.slice(0, writeIndex * stride);
    } else {
      this.times = times;
      this.values = values;
    }
    return this;
  }
  clone() {
    const times = this.times.slice();
    const values = this.values.slice();
    const TypedKeyframeTrack = this.constructor;
    const track = new TypedKeyframeTrack(this.name, times, values);
    track.createInterpolant = this.createInterpolant;
    return track;
  }
};
KeyframeTrack2.prototype.TimeBufferType = Float32Array;
KeyframeTrack2.prototype.ValueBufferType = Float32Array;
KeyframeTrack2.prototype.DefaultInterpolation = InterpolateLinear2;
var BooleanKeyframeTrack2 = class extends KeyframeTrack2 {
  // No interpolation parameter because only InterpolateDiscrete is valid.
  constructor(name, times, values) {
    super(name, times, values);
  }
};
BooleanKeyframeTrack2.prototype.ValueTypeName = "bool";
BooleanKeyframeTrack2.prototype.ValueBufferType = Array;
BooleanKeyframeTrack2.prototype.DefaultInterpolation = InterpolateDiscrete2;
BooleanKeyframeTrack2.prototype.InterpolantFactoryMethodLinear = void 0;
BooleanKeyframeTrack2.prototype.InterpolantFactoryMethodSmooth = void 0;
var ColorKeyframeTrack2 = class extends KeyframeTrack2 {
};
ColorKeyframeTrack2.prototype.ValueTypeName = "color";
var NumberKeyframeTrack2 = class extends KeyframeTrack2 {
};
NumberKeyframeTrack2.prototype.ValueTypeName = "number";
var QuaternionLinearInterpolant2 = class extends Interpolant2 {
  constructor(parameterPositions, sampleValues, sampleSize, resultBuffer) {
    super(parameterPositions, sampleValues, sampleSize, resultBuffer);
  }
  interpolate_(i1, t03, t4, t13) {
    const result = this.resultBuffer, values = this.sampleValues, stride = this.valueSize, alpha = (t4 - t03) / (t13 - t03);
    let offset = i1 * stride;
    for (let end = offset + stride; offset !== end; offset += 4) {
      Quaternion2.slerpFlat(result, 0, values, offset - stride, values, offset, alpha);
    }
    return result;
  }
};
var QuaternionKeyframeTrack2 = class extends KeyframeTrack2 {
  InterpolantFactoryMethodLinear(result) {
    return new QuaternionLinearInterpolant2(this.times, this.values, this.getValueSize(), result);
  }
};
QuaternionKeyframeTrack2.prototype.ValueTypeName = "quaternion";
QuaternionKeyframeTrack2.prototype.InterpolantFactoryMethodSmooth = void 0;
var StringKeyframeTrack2 = class extends KeyframeTrack2 {
  // No interpolation parameter because only InterpolateDiscrete is valid.
  constructor(name, times, values) {
    super(name, times, values);
  }
};
StringKeyframeTrack2.prototype.ValueTypeName = "string";
StringKeyframeTrack2.prototype.ValueBufferType = Array;
StringKeyframeTrack2.prototype.DefaultInterpolation = InterpolateDiscrete2;
StringKeyframeTrack2.prototype.InterpolantFactoryMethodLinear = void 0;
StringKeyframeTrack2.prototype.InterpolantFactoryMethodSmooth = void 0;
var VectorKeyframeTrack2 = class extends KeyframeTrack2 {
};
VectorKeyframeTrack2.prototype.ValueTypeName = "vector";
var Cache2 = {
  enabled: false,
  files: {},
  add: function(key, file) {
    if (this.enabled === false) return;
    this.files[key] = file;
  },
  get: function(key) {
    if (this.enabled === false) return;
    return this.files[key];
  },
  remove: function(key) {
    delete this.files[key];
  },
  clear: function() {
    this.files = {};
  }
};
var LoadingManager2 = class {
  constructor(onLoad, onProgress, onError) {
    const scope = this;
    let isLoading = false;
    let itemsLoaded = 0;
    let itemsTotal = 0;
    let urlModifier = void 0;
    const handlers = [];
    this.onStart = void 0;
    this.onLoad = onLoad;
    this.onProgress = onProgress;
    this.onError = onError;
    this.itemStart = function(url) {
      itemsTotal++;
      if (isLoading === false) {
        if (scope.onStart !== void 0) {
          scope.onStart(url, itemsLoaded, itemsTotal);
        }
      }
      isLoading = true;
    };
    this.itemEnd = function(url) {
      itemsLoaded++;
      if (scope.onProgress !== void 0) {
        scope.onProgress(url, itemsLoaded, itemsTotal);
      }
      if (itemsLoaded === itemsTotal) {
        isLoading = false;
        if (scope.onLoad !== void 0) {
          scope.onLoad();
        }
      }
    };
    this.itemError = function(url) {
      if (scope.onError !== void 0) {
        scope.onError(url);
      }
    };
    this.resolveURL = function(url) {
      if (urlModifier) {
        return urlModifier(url);
      }
      return url;
    };
    this.setURLModifier = function(transform) {
      urlModifier = transform;
      return this;
    };
    this.addHandler = function(regex, loader) {
      handlers.push(regex, loader);
      return this;
    };
    this.removeHandler = function(regex) {
      const index7 = handlers.indexOf(regex);
      if (index7 !== -1) {
        handlers.splice(index7, 2);
      }
      return this;
    };
    this.getHandler = function(file) {
      for (let i2 = 0, l2 = handlers.length; i2 < l2; i2 += 2) {
        const regex = handlers[i2];
        const loader = handlers[i2 + 1];
        if (regex.global) regex.lastIndex = 0;
        if (regex.test(file)) {
          return loader;
        }
      }
      return null;
    };
  }
};
var DefaultLoadingManager2 = new LoadingManager2();
var Loader2 = class {
  constructor(manager) {
    this.manager = manager !== void 0 ? manager : DefaultLoadingManager2;
    this.crossOrigin = "anonymous";
    this.withCredentials = false;
    this.path = "";
    this.resourcePath = "";
    this.requestHeader = {};
  }
  load() {
  }
  loadAsync(url, onProgress) {
    const scope = this;
    return new Promise(function(resolve, reject) {
      scope.load(url, resolve, onProgress, reject);
    });
  }
  parse() {
  }
  setCrossOrigin(crossOrigin) {
    this.crossOrigin = crossOrigin;
    return this;
  }
  setWithCredentials(value) {
    this.withCredentials = value;
    return this;
  }
  setPath(path) {
    this.path = path;
    return this;
  }
  setResourcePath(resourcePath) {
    this.resourcePath = resourcePath;
    return this;
  }
  setRequestHeader(requestHeader) {
    this.requestHeader = requestHeader;
    return this;
  }
};
Loader2.DEFAULT_MATERIAL_NAME = "__DEFAULT";
var loading = {};
var HttpError = class extends Error {
  constructor(message, response) {
    super(message);
    this.response = response;
  }
};
var FileLoader = class extends Loader2 {
  constructor(manager) {
    super(manager);
  }
  load(url, onLoad, onProgress, onError) {
    if (url === void 0) url = "";
    if (this.path !== void 0) url = this.path + url;
    url = this.manager.resolveURL(url);
    const cached = Cache2.get(url);
    if (cached !== void 0) {
      this.manager.itemStart(url);
      setTimeout(() => {
        if (onLoad) onLoad(cached);
        this.manager.itemEnd(url);
      }, 0);
      return cached;
    }
    if (loading[url] !== void 0) {
      loading[url].push({
        onLoad,
        onProgress,
        onError
      });
      return;
    }
    loading[url] = [];
    loading[url].push({
      onLoad,
      onProgress,
      onError
    });
    const req = new Request(url, {
      headers: new Headers(this.requestHeader),
      credentials: this.withCredentials ? "include" : "same-origin"
      // An abort controller could be added within a future PR
    });
    const mimeType = this.mimeType;
    const responseType = this.responseType;
    fetch(req).then((response) => {
      if (response.status === 200 || response.status === 0) {
        if (response.status === 0) {
          console.warn("THREE.FileLoader: HTTP Status 0 received.");
        }
        if (typeof ReadableStream === "undefined" || response.body === void 0 || response.body.getReader === void 0) {
          return response;
        }
        const callbacks = loading[url];
        const reader = response.body.getReader();
        const contentLength = response.headers.get("X-File-Size") || response.headers.get("Content-Length");
        const total = contentLength ? parseInt(contentLength) : 0;
        const lengthComputable = total !== 0;
        let loaded = 0;
        const stream = new ReadableStream({
          start(controller) {
            readData();
            function readData() {
              reader.read().then(({ done, value }) => {
                if (done) {
                  controller.close();
                } else {
                  loaded += value.byteLength;
                  const event = new ProgressEvent("progress", { lengthComputable, loaded, total });
                  for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
                    const callback = callbacks[i2];
                    if (callback.onProgress) callback.onProgress(event);
                  }
                  controller.enqueue(value);
                  readData();
                }
              }, (e3) => {
                controller.error(e3);
              });
            }
          }
        });
        return new Response(stream);
      } else {
        throw new HttpError(`fetch for "${response.url}" responded with ${response.status}: ${response.statusText}`, response);
      }
    }).then((response) => {
      switch (responseType) {
        case "arraybuffer":
          return response.arrayBuffer();
        case "blob":
          return response.blob();
        case "document":
          return response.text().then((text) => {
            const parser = new DOMParser();
            return parser.parseFromString(text, mimeType);
          });
        case "json":
          return response.json();
        default:
          if (mimeType === void 0) {
            return response.text();
          } else {
            const re2 = /charset="?([^;"\s]*)"?/i;
            const exec = re2.exec(mimeType);
            const label2 = exec && exec[1] ? exec[1].toLowerCase() : void 0;
            const decoder = new TextDecoder(label2);
            return response.arrayBuffer().then((ab4) => decoder.decode(ab4));
          }
      }
    }).then((data) => {
      Cache2.add(url, data);
      const callbacks = loading[url];
      delete loading[url];
      for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
        const callback = callbacks[i2];
        if (callback.onLoad) callback.onLoad(data);
      }
    }).catch((err) => {
      const callbacks = loading[url];
      if (callbacks === void 0) {
        this.manager.itemError(url);
        throw err;
      }
      delete loading[url];
      for (let i2 = 0, il = callbacks.length; i2 < il; i2++) {
        const callback = callbacks[i2];
        if (callback.onError) callback.onError(err);
      }
      this.manager.itemError(url);
    }).finally(() => {
      this.manager.itemEnd(url);
    });
    this.manager.itemStart(url);
  }
  setResponseType(value) {
    this.responseType = value;
    return this;
  }
  setMimeType(value) {
    this.mimeType = value;
    return this;
  }
};
var Light2 = class extends Object3D2 {
  constructor(color3, intensity = 1) {
    super();
    this.isLight = true;
    this.type = "Light";
    this.color = new Color3(color3);
    this.intensity = intensity;
  }
  dispose() {
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.color.copy(source.color);
    this.intensity = source.intensity;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.color = this.color.getHex();
    data.object.intensity = this.intensity;
    if (this.groundColor !== void 0) data.object.groundColor = this.groundColor.getHex();
    if (this.distance !== void 0) data.object.distance = this.distance;
    if (this.angle !== void 0) data.object.angle = this.angle;
    if (this.decay !== void 0) data.object.decay = this.decay;
    if (this.penumbra !== void 0) data.object.penumbra = this.penumbra;
    if (this.shadow !== void 0) data.object.shadow = this.shadow.toJSON();
    if (this.target !== void 0) data.object.target = this.target.uuid;
    return data;
  }
};
var HemisphereLight = class extends Light2 {
  constructor(skyColor, groundColor, intensity) {
    super(skyColor, intensity);
    this.isHemisphereLight = true;
    this.type = "HemisphereLight";
    this.position.copy(Object3D2.DEFAULT_UP);
    this.updateMatrix();
    this.groundColor = new Color3(groundColor);
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.groundColor.copy(source.groundColor);
    return this;
  }
};
var _projScreenMatrix$22 = new Matrix42();
var _lightPositionWorld$12 = new Vector32();
var _lookTarget$12 = new Vector32();
var LightShadow2 = class {
  constructor(camera3) {
    this.camera = camera3;
    this.intensity = 1;
    this.bias = 0;
    this.normalBias = 0;
    this.radius = 1;
    this.blurSamples = 8;
    this.mapSize = new Vector22(512, 512);
    this.map = null;
    this.mapPass = null;
    this.matrix = new Matrix42();
    this.autoUpdate = true;
    this.needsUpdate = false;
    this._frustum = new Frustum2();
    this._frameExtents = new Vector22(1, 1);
    this._viewportCount = 1;
    this._viewports = [
      new Vector42(0, 0, 1, 1)
    ];
  }
  getViewportCount() {
    return this._viewportCount;
  }
  getFrustum() {
    return this._frustum;
  }
  updateMatrices(light) {
    const shadowCamera = this.camera;
    const shadowMatrix = this.matrix;
    _lightPositionWorld$12.setFromMatrixPosition(light.matrixWorld);
    shadowCamera.position.copy(_lightPositionWorld$12);
    _lookTarget$12.setFromMatrixPosition(light.target.matrixWorld);
    shadowCamera.lookAt(_lookTarget$12);
    shadowCamera.updateMatrixWorld();
    _projScreenMatrix$22.multiplyMatrices(shadowCamera.projectionMatrix, shadowCamera.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(_projScreenMatrix$22);
    shadowMatrix.set(
      0.5,
      0,
      0,
      0.5,
      0,
      0.5,
      0,
      0.5,
      0,
      0,
      0.5,
      0.5,
      0,
      0,
      0,
      1
    );
    shadowMatrix.multiply(_projScreenMatrix$22);
  }
  getViewport(viewportIndex) {
    return this._viewports[viewportIndex];
  }
  getFrameExtents() {
    return this._frameExtents;
  }
  dispose() {
    if (this.map) {
      this.map.dispose();
    }
    if (this.mapPass) {
      this.mapPass.dispose();
    }
  }
  copy(source) {
    this.camera = source.camera.clone();
    this.intensity = source.intensity;
    this.bias = source.bias;
    this.radius = source.radius;
    this.mapSize.copy(source.mapSize);
    return this;
  }
  clone() {
    return new this.constructor().copy(this);
  }
  toJSON() {
    const object2 = {};
    if (this.intensity !== 1) object2.intensity = this.intensity;
    if (this.bias !== 0) object2.bias = this.bias;
    if (this.normalBias !== 0) object2.normalBias = this.normalBias;
    if (this.radius !== 1) object2.radius = this.radius;
    if (this.mapSize.x !== 512 || this.mapSize.y !== 512) object2.mapSize = this.mapSize.toArray();
    object2.camera = this.camera.toJSON(false).object;
    delete object2.camera.matrix;
    return object2;
  }
};
var SpotLightShadow = class extends LightShadow2 {
  constructor() {
    super(new PerspectiveCamera2(50, 1, 0.5, 500));
    this.isSpotLightShadow = true;
    this.focus = 1;
  }
  updateMatrices(light) {
    const camera3 = this.camera;
    const fov3 = RAD2DEG2 * 2 * light.angle * this.focus;
    const aspect3 = this.mapSize.width / this.mapSize.height;
    const far = light.distance || camera3.far;
    if (fov3 !== camera3.fov || aspect3 !== camera3.aspect || far !== camera3.far) {
      camera3.fov = fov3;
      camera3.aspect = aspect3;
      camera3.far = far;
      camera3.updateProjectionMatrix();
    }
    super.updateMatrices(light);
  }
  copy(source) {
    super.copy(source);
    this.focus = source.focus;
    return this;
  }
};
var SpotLight = class extends Light2 {
  constructor(color3, intensity, distance3 = 0, angle2 = Math.PI / 3, penumbra = 0, decay = 2) {
    super(color3, intensity);
    this.isSpotLight = true;
    this.type = "SpotLight";
    this.position.copy(Object3D2.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Object3D2();
    this.distance = distance3;
    this.angle = angle2;
    this.penumbra = penumbra;
    this.decay = decay;
    this.map = null;
    this.shadow = new SpotLightShadow();
  }
  get power() {
    return this.intensity * Math.PI;
  }
  set power(power) {
    this.intensity = power / Math.PI;
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.distance = source.distance;
    this.angle = source.angle;
    this.penumbra = source.penumbra;
    this.decay = source.decay;
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
};
var _projScreenMatrix$12 = new Matrix42();
var _lightPositionWorld2 = new Vector32();
var _lookTarget2 = new Vector32();
var PointLightShadow = class extends LightShadow2 {
  constructor() {
    super(new PerspectiveCamera2(90, 1, 0.5, 500));
    this.isPointLightShadow = true;
    this._frameExtents = new Vector22(4, 2);
    this._viewportCount = 6;
    this._viewports = [
      // These viewports map a cube-map onto a 2D texture with the
      // following orientation:
      //
      //  xzXZ
      //   y Y
      //
      // X - Positive x direction
      // x - Negative x direction
      // Y - Positive y direction
      // y - Negative y direction
      // Z - Positive z direction
      // z - Negative z direction
      // positive X
      new Vector42(2, 1, 1, 1),
      // negative X
      new Vector42(0, 1, 1, 1),
      // positive Z
      new Vector42(3, 1, 1, 1),
      // negative Z
      new Vector42(1, 1, 1, 1),
      // positive Y
      new Vector42(3, 0, 1, 1),
      // negative Y
      new Vector42(1, 0, 1, 1)
    ];
    this._cubeDirections = [
      new Vector32(1, 0, 0),
      new Vector32(-1, 0, 0),
      new Vector32(0, 0, 1),
      new Vector32(0, 0, -1),
      new Vector32(0, 1, 0),
      new Vector32(0, -1, 0)
    ];
    this._cubeUps = [
      new Vector32(0, 1, 0),
      new Vector32(0, 1, 0),
      new Vector32(0, 1, 0),
      new Vector32(0, 1, 0),
      new Vector32(0, 0, 1),
      new Vector32(0, 0, -1)
    ];
  }
  updateMatrices(light, viewportIndex = 0) {
    const camera3 = this.camera;
    const shadowMatrix = this.matrix;
    const far = light.distance || camera3.far;
    if (far !== camera3.far) {
      camera3.far = far;
      camera3.updateProjectionMatrix();
    }
    _lightPositionWorld2.setFromMatrixPosition(light.matrixWorld);
    camera3.position.copy(_lightPositionWorld2);
    _lookTarget2.copy(camera3.position);
    _lookTarget2.add(this._cubeDirections[viewportIndex]);
    camera3.up.copy(this._cubeUps[viewportIndex]);
    camera3.lookAt(_lookTarget2);
    camera3.updateMatrixWorld();
    shadowMatrix.makeTranslation(-_lightPositionWorld2.x, -_lightPositionWorld2.y, -_lightPositionWorld2.z);
    _projScreenMatrix$12.multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse);
    this._frustum.setFromProjectionMatrix(_projScreenMatrix$12);
  }
};
var PointLight = class extends Light2 {
  constructor(color3, intensity, distance3 = 0, decay = 2) {
    super(color3, intensity);
    this.isPointLight = true;
    this.type = "PointLight";
    this.distance = distance3;
    this.decay = decay;
    this.shadow = new PointLightShadow();
  }
  get power() {
    return this.intensity * 4 * Math.PI;
  }
  set power(power) {
    this.intensity = power / (4 * Math.PI);
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.distance = source.distance;
    this.decay = source.decay;
    this.shadow = source.shadow.clone();
    return this;
  }
};
var OrthographicCamera2 = class extends Camera2 {
  constructor(left = -1, right = 1, top = 1, bottom = -1, near = 0.1, far = 2e3) {
    super();
    this.isOrthographicCamera = true;
    this.type = "OrthographicCamera";
    this.zoom = 1;
    this.view = null;
    this.left = left;
    this.right = right;
    this.top = top;
    this.bottom = bottom;
    this.near = near;
    this.far = far;
    this.updateProjectionMatrix();
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.left = source.left;
    this.right = source.right;
    this.top = source.top;
    this.bottom = source.bottom;
    this.near = source.near;
    this.far = source.far;
    this.zoom = source.zoom;
    this.view = source.view === null ? null : Object.assign({}, source.view);
    return this;
  }
  setViewOffset(fullWidth, fullHeight, x2, y2, width, height) {
    if (this.view === null) {
      this.view = {
        enabled: true,
        fullWidth: 1,
        fullHeight: 1,
        offsetX: 0,
        offsetY: 0,
        width: 1,
        height: 1
      };
    }
    this.view.enabled = true;
    this.view.fullWidth = fullWidth;
    this.view.fullHeight = fullHeight;
    this.view.offsetX = x2;
    this.view.offsetY = y2;
    this.view.width = width;
    this.view.height = height;
    this.updateProjectionMatrix();
  }
  clearViewOffset() {
    if (this.view !== null) {
      this.view.enabled = false;
    }
    this.updateProjectionMatrix();
  }
  updateProjectionMatrix() {
    const dx = (this.right - this.left) / (2 * this.zoom);
    const dy = (this.top - this.bottom) / (2 * this.zoom);
    const cx = (this.right + this.left) / 2;
    const cy = (this.top + this.bottom) / 2;
    let left = cx - dx;
    let right = cx + dx;
    let top = cy + dy;
    let bottom = cy - dy;
    if (this.view !== null && this.view.enabled) {
      const scaleW = (this.right - this.left) / this.view.fullWidth / this.zoom;
      const scaleH = (this.top - this.bottom) / this.view.fullHeight / this.zoom;
      left += scaleW * this.view.offsetX;
      right = left + scaleW * this.view.width;
      top -= scaleH * this.view.offsetY;
      bottom = top - scaleH * this.view.height;
    }
    this.projectionMatrix.makeOrthographic(left, right, top, bottom, this.near, this.far, this.coordinateSystem);
    this.projectionMatrixInverse.copy(this.projectionMatrix).invert();
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.zoom = this.zoom;
    data.object.left = this.left;
    data.object.right = this.right;
    data.object.top = this.top;
    data.object.bottom = this.bottom;
    data.object.near = this.near;
    data.object.far = this.far;
    if (this.view !== null) data.object.view = Object.assign({}, this.view);
    return data;
  }
};
var DirectionalLightShadow2 = class extends LightShadow2 {
  constructor() {
    super(new OrthographicCamera2(-5, 5, 5, -5, 0.5, 500));
    this.isDirectionalLightShadow = true;
  }
};
var DirectionalLight2 = class extends Light2 {
  constructor(color3, intensity) {
    super(color3, intensity);
    this.isDirectionalLight = true;
    this.type = "DirectionalLight";
    this.position.copy(Object3D2.DEFAULT_UP);
    this.updateMatrix();
    this.target = new Object3D2();
    this.shadow = new DirectionalLightShadow2();
  }
  dispose() {
    this.shadow.dispose();
  }
  copy(source) {
    super.copy(source);
    this.target = source.target.clone();
    this.shadow = source.shadow.clone();
    return this;
  }
};
var AmbientLight2 = class extends Light2 {
  constructor(color3, intensity) {
    super(color3, intensity);
    this.isAmbientLight = true;
    this.type = "AmbientLight";
  }
};
var RectAreaLight = class extends Light2 {
  constructor(color3, intensity, width = 10, height = 10) {
    super(color3, intensity);
    this.isRectAreaLight = true;
    this.type = "RectAreaLight";
    this.width = width;
    this.height = height;
  }
  get power() {
    return this.intensity * this.width * this.height * Math.PI;
  }
  set power(power) {
    this.intensity = power / (this.width * this.height * Math.PI);
  }
  copy(source) {
    super.copy(source);
    this.width = source.width;
    this.height = source.height;
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.width = this.width;
    data.object.height = this.height;
    return data;
  }
};
var SphericalHarmonics3 = class {
  constructor() {
    this.isSphericalHarmonics3 = true;
    this.coefficients = [];
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients.push(new Vector32());
    }
  }
  set(coefficients) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].copy(coefficients[i2]);
    }
    return this;
  }
  zero() {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].set(0, 0, 0);
    }
    return this;
  }
  // get the radiance in the direction of the normal
  // target is a Vector3
  getAt(normal2, target) {
    const x2 = normal2.x, y2 = normal2.y, z2 = normal2.z;
    const coeff = this.coefficients;
    target.copy(coeff[0]).multiplyScalar(0.282095);
    target.addScaledVector(coeff[1], 0.488603 * y2);
    target.addScaledVector(coeff[2], 0.488603 * z2);
    target.addScaledVector(coeff[3], 0.488603 * x2);
    target.addScaledVector(coeff[4], 1.092548 * (x2 * y2));
    target.addScaledVector(coeff[5], 1.092548 * (y2 * z2));
    target.addScaledVector(coeff[6], 0.315392 * (3 * z2 * z2 - 1));
    target.addScaledVector(coeff[7], 1.092548 * (x2 * z2));
    target.addScaledVector(coeff[8], 0.546274 * (x2 * x2 - y2 * y2));
    return target;
  }
  // get the irradiance (radiance convolved with cosine lobe) in the direction of the normal
  // target is a Vector3
  // https://graphics.stanford.edu/papers/envmap/envmap.pdf
  getIrradianceAt(normal2, target) {
    const x2 = normal2.x, y2 = normal2.y, z2 = normal2.z;
    const coeff = this.coefficients;
    target.copy(coeff[0]).multiplyScalar(0.886227);
    target.addScaledVector(coeff[1], 2 * 0.511664 * y2);
    target.addScaledVector(coeff[2], 2 * 0.511664 * z2);
    target.addScaledVector(coeff[3], 2 * 0.511664 * x2);
    target.addScaledVector(coeff[4], 2 * 0.429043 * x2 * y2);
    target.addScaledVector(coeff[5], 2 * 0.429043 * y2 * z2);
    target.addScaledVector(coeff[6], 0.743125 * z2 * z2 - 0.247708);
    target.addScaledVector(coeff[7], 2 * 0.429043 * x2 * z2);
    target.addScaledVector(coeff[8], 0.429043 * (x2 * x2 - y2 * y2));
    return target;
  }
  add(sh) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].add(sh.coefficients[i2]);
    }
    return this;
  }
  addScaledSH(sh, s2) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].addScaledVector(sh.coefficients[i2], s2);
    }
    return this;
  }
  scale(s2) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].multiplyScalar(s2);
    }
    return this;
  }
  lerp(sh, alpha) {
    for (let i2 = 0; i2 < 9; i2++) {
      this.coefficients[i2].lerp(sh.coefficients[i2], alpha);
    }
    return this;
  }
  equals(sh) {
    for (let i2 = 0; i2 < 9; i2++) {
      if (!this.coefficients[i2].equals(sh.coefficients[i2])) {
        return false;
      }
    }
    return true;
  }
  copy(sh) {
    return this.set(sh.coefficients);
  }
  clone() {
    return new this.constructor().copy(this);
  }
  fromArray(array3, offset = 0) {
    const coefficients = this.coefficients;
    for (let i2 = 0; i2 < 9; i2++) {
      coefficients[i2].fromArray(array3, offset + i2 * 3);
    }
    return this;
  }
  toArray(array3 = [], offset = 0) {
    const coefficients = this.coefficients;
    for (let i2 = 0; i2 < 9; i2++) {
      coefficients[i2].toArray(array3, offset + i2 * 3);
    }
    return array3;
  }
  // evaluate the basis functions
  // shBasis is an Array[ 9 ]
  static getBasisAt(normal2, shBasis) {
    const x2 = normal2.x, y2 = normal2.y, z2 = normal2.z;
    shBasis[0] = 0.282095;
    shBasis[1] = 0.488603 * y2;
    shBasis[2] = 0.488603 * z2;
    shBasis[3] = 0.488603 * x2;
    shBasis[4] = 1.092548 * x2 * y2;
    shBasis[5] = 1.092548 * y2 * z2;
    shBasis[6] = 0.315392 * (3 * z2 * z2 - 1);
    shBasis[7] = 1.092548 * x2 * z2;
    shBasis[8] = 0.546274 * (x2 * x2 - y2 * y2);
  }
};
var LightProbe = class extends Light2 {
  constructor(sh = new SphericalHarmonics3(), intensity = 1) {
    super(void 0, intensity);
    this.isLightProbe = true;
    this.sh = sh;
  }
  copy(source) {
    super.copy(source);
    this.sh.copy(source.sh);
    return this;
  }
  fromJSON(json) {
    this.intensity = json.intensity;
    this.sh.fromArray(json.sh);
    return this;
  }
  toJSON(meta) {
    const data = super.toJSON(meta);
    data.object.sh = this.sh.toArray();
    return data;
  }
};
var MaterialLoader = class _MaterialLoader extends Loader2 {
  constructor(manager) {
    super(manager);
    this.textures = {};
  }
  load(url, onLoad, onProgress, onError) {
    const scope = this;
    const loader = new FileLoader(scope.manager);
    loader.setPath(scope.path);
    loader.setRequestHeader(scope.requestHeader);
    loader.setWithCredentials(scope.withCredentials);
    loader.load(url, function(text) {
      try {
        onLoad(scope.parse(JSON.parse(text)));
      } catch (e3) {
        if (onError) {
          onError(e3);
        } else {
          console.error(e3);
        }
        scope.manager.itemError(url);
      }
    }, onProgress, onError);
  }
  parse(json) {
    const textures = this.textures;
    function getTexture(name) {
      if (textures[name] === void 0) {
        console.warn("THREE.MaterialLoader: Undefined texture", name);
      }
      return textures[name];
    }
    const material = _MaterialLoader.createMaterialFromType(json.type);
    if (json.uuid !== void 0) material.uuid = json.uuid;
    if (json.name !== void 0) material.name = json.name;
    if (json.color !== void 0 && material.color !== void 0) material.color.setHex(json.color);
    if (json.roughness !== void 0) material.roughness = json.roughness;
    if (json.metalness !== void 0) material.metalness = json.metalness;
    if (json.sheen !== void 0) material.sheen = json.sheen;
    if (json.sheenColor !== void 0) material.sheenColor = new Color3().setHex(json.sheenColor);
    if (json.sheenRoughness !== void 0) material.sheenRoughness = json.sheenRoughness;
    if (json.emissive !== void 0 && material.emissive !== void 0) material.emissive.setHex(json.emissive);
    if (json.specular !== void 0 && material.specular !== void 0) material.specular.setHex(json.specular);
    if (json.specularIntensity !== void 0) material.specularIntensity = json.specularIntensity;
    if (json.specularColor !== void 0 && material.specularColor !== void 0) material.specularColor.setHex(json.specularColor);
    if (json.shininess !== void 0) material.shininess = json.shininess;
    if (json.clearcoat !== void 0) material.clearcoat = json.clearcoat;
    if (json.clearcoatRoughness !== void 0) material.clearcoatRoughness = json.clearcoatRoughness;
    if (json.dispersion !== void 0) material.dispersion = json.dispersion;
    if (json.iridescence !== void 0) material.iridescence = json.iridescence;
    if (json.iridescenceIOR !== void 0) material.iridescenceIOR = json.iridescenceIOR;
    if (json.iridescenceThicknessRange !== void 0) material.iridescenceThicknessRange = json.iridescenceThicknessRange;
    if (json.transmission !== void 0) material.transmission = json.transmission;
    if (json.thickness !== void 0) material.thickness = json.thickness;
    if (json.attenuationDistance !== void 0) material.attenuationDistance = json.attenuationDistance;
    if (json.attenuationColor !== void 0 && material.attenuationColor !== void 0) material.attenuationColor.setHex(json.attenuationColor);
    if (json.anisotropy !== void 0) material.anisotropy = json.anisotropy;
    if (json.anisotropyRotation !== void 0) material.anisotropyRotation = json.anisotropyRotation;
    if (json.fog !== void 0) material.fog = json.fog;
    if (json.flatShading !== void 0) material.flatShading = json.flatShading;
    if (json.blending !== void 0) material.blending = json.blending;
    if (json.combine !== void 0) material.combine = json.combine;
    if (json.side !== void 0) material.side = json.side;
    if (json.shadowSide !== void 0) material.shadowSide = json.shadowSide;
    if (json.opacity !== void 0) material.opacity = json.opacity;
    if (json.transparent !== void 0) material.transparent = json.transparent;
    if (json.alphaTest !== void 0) material.alphaTest = json.alphaTest;
    if (json.alphaHash !== void 0) material.alphaHash = json.alphaHash;
    if (json.depthFunc !== void 0) material.depthFunc = json.depthFunc;
    if (json.depthTest !== void 0) material.depthTest = json.depthTest;
    if (json.depthWrite !== void 0) material.depthWrite = json.depthWrite;
    if (json.colorWrite !== void 0) material.colorWrite = json.colorWrite;
    if (json.blendSrc !== void 0) material.blendSrc = json.blendSrc;
    if (json.blendDst !== void 0) material.blendDst = json.blendDst;
    if (json.blendEquation !== void 0) material.blendEquation = json.blendEquation;
    if (json.blendSrcAlpha !== void 0) material.blendSrcAlpha = json.blendSrcAlpha;
    if (json.blendDstAlpha !== void 0) material.blendDstAlpha = json.blendDstAlpha;
    if (json.blendEquationAlpha !== void 0) material.blendEquationAlpha = json.blendEquationAlpha;
    if (json.blendColor !== void 0 && material.blendColor !== void 0) material.blendColor.setHex(json.blendColor);
    if (json.blendAlpha !== void 0) material.blendAlpha = json.blendAlpha;
    if (json.stencilWriteMask !== void 0) material.stencilWriteMask = json.stencilWriteMask;
    if (json.stencilFunc !== void 0) material.stencilFunc = json.stencilFunc;
    if (json.stencilRef !== void 0) material.stencilRef = json.stencilRef;
    if (json.stencilFuncMask !== void 0) material.stencilFuncMask = json.stencilFuncMask;
    if (json.stencilFail !== void 0) material.stencilFail = json.stencilFail;
    if (json.stencilZFail !== void 0) material.stencilZFail = json.stencilZFail;
    if (json.stencilZPass !== void 0) material.stencilZPass = json.stencilZPass;
    if (json.stencilWrite !== void 0) material.stencilWrite = json.stencilWrite;
    if (json.wireframe !== void 0) material.wireframe = json.wireframe;
    if (json.wireframeLinewidth !== void 0) material.wireframeLinewidth = json.wireframeLinewidth;
    if (json.wireframeLinecap !== void 0) material.wireframeLinecap = json.wireframeLinecap;
    if (json.wireframeLinejoin !== void 0) material.wireframeLinejoin = json.wireframeLinejoin;
    if (json.rotation !== void 0) material.rotation = json.rotation;
    if (json.linewidth !== void 0) material.linewidth = json.linewidth;
    if (json.dashSize !== void 0) material.dashSize = json.dashSize;
    if (json.gapSize !== void 0) material.gapSize = json.gapSize;
    if (json.scale !== void 0) material.scale = json.scale;
    if (json.polygonOffset !== void 0) material.polygonOffset = json.polygonOffset;
    if (json.polygonOffsetFactor !== void 0) material.polygonOffsetFactor = json.polygonOffsetFactor;
    if (json.polygonOffsetUnits !== void 0) material.polygonOffsetUnits = json.polygonOffsetUnits;
    if (json.dithering !== void 0) material.dithering = json.dithering;
    if (json.alphaToCoverage !== void 0) material.alphaToCoverage = json.alphaToCoverage;
    if (json.premultipliedAlpha !== void 0) material.premultipliedAlpha = json.premultipliedAlpha;
    if (json.forceSinglePass !== void 0) material.forceSinglePass = json.forceSinglePass;
    if (json.visible !== void 0) material.visible = json.visible;
    if (json.toneMapped !== void 0) material.toneMapped = json.toneMapped;
    if (json.userData !== void 0) material.userData = json.userData;
    if (json.vertexColors !== void 0) {
      if (typeof json.vertexColors === "number") {
        material.vertexColors = json.vertexColors > 0 ? true : false;
      } else {
        material.vertexColors = json.vertexColors;
      }
    }
    if (json.uniforms !== void 0) {
      for (const name in json.uniforms) {
        const uniform2 = json.uniforms[name];
        material.uniforms[name] = {};
        switch (uniform2.type) {
          case "t":
            material.uniforms[name].value = getTexture(uniform2.value);
            break;
          case "c":
            material.uniforms[name].value = new Color3().setHex(uniform2.value);
            break;
          case "v2":
            material.uniforms[name].value = new Vector22().fromArray(uniform2.value);
            break;
          case "v3":
            material.uniforms[name].value = new Vector32().fromArray(uniform2.value);
            break;
          case "v4":
            material.uniforms[name].value = new Vector42().fromArray(uniform2.value);
            break;
          case "m3":
            material.uniforms[name].value = new Matrix32().fromArray(uniform2.value);
            break;
          case "m4":
            material.uniforms[name].value = new Matrix42().fromArray(uniform2.value);
            break;
          default:
            material.uniforms[name].value = uniform2.value;
        }
      }
    }
    if (json.defines !== void 0) material.defines = json.defines;
    if (json.vertexShader !== void 0) material.vertexShader = json.vertexShader;
    if (json.fragmentShader !== void 0) material.fragmentShader = json.fragmentShader;
    if (json.glslVersion !== void 0) material.glslVersion = json.glslVersion;
    if (json.extensions !== void 0) {
      for (const key in json.extensions) {
        material.extensions[key] = json.extensions[key];
      }
    }
    if (json.lights !== void 0) material.lights = json.lights;
    if (json.clipping !== void 0) material.clipping = json.clipping;
    if (json.size !== void 0) material.size = json.size;
    if (json.sizeAttenuation !== void 0) material.sizeAttenuation = json.sizeAttenuation;
    if (json.map !== void 0) material.map = getTexture(json.map);
    if (json.matcap !== void 0) material.matcap = getTexture(json.matcap);
    if (json.alphaMap !== void 0) material.alphaMap = getTexture(json.alphaMap);
    if (json.bumpMap !== void 0) material.bumpMap = getTexture(json.bumpMap);
    if (json.bumpScale !== void 0) material.bumpScale = json.bumpScale;
    if (json.normalMap !== void 0) material.normalMap = getTexture(json.normalMap);
    if (json.normalMapType !== void 0) material.normalMapType = json.normalMapType;
    if (json.normalScale !== void 0) {
      let normalScale = json.normalScale;
      if (Array.isArray(normalScale) === false) {
        normalScale = [normalScale, normalScale];
      }
      material.normalScale = new Vector22().fromArray(normalScale);
    }
    if (json.displacementMap !== void 0) material.displacementMap = getTexture(json.displacementMap);
    if (json.displacementScale !== void 0) material.displacementScale = json.displacementScale;
    if (json.displacementBias !== void 0) material.displacementBias = json.displacementBias;
    if (json.roughnessMap !== void 0) material.roughnessMap = getTexture(json.roughnessMap);
    if (json.metalnessMap !== void 0) material.metalnessMap = getTexture(json.metalnessMap);
    if (json.emissiveMap !== void 0) material.emissiveMap = getTexture(json.emissiveMap);
    if (json.emissiveIntensity !== void 0) material.emissiveIntensity = json.emissiveIntensity;
    if (json.specularMap !== void 0) material.specularMap = getTexture(json.specularMap);
    if (json.specularIntensityMap !== void 0) material.specularIntensityMap = getTexture(json.specularIntensityMap);
    if (json.specularColorMap !== void 0) material.specularColorMap = getTexture(json.specularColorMap);
    if (json.envMap !== void 0) material.envMap = getTexture(json.envMap);
    if (json.envMapRotation !== void 0) material.envMapRotation.fromArray(json.envMapRotation);
    if (json.envMapIntensity !== void 0) material.envMapIntensity = json.envMapIntensity;
    if (json.reflectivity !== void 0) material.reflectivity = json.reflectivity;
    if (json.refractionRatio !== void 0) material.refractionRatio = json.refractionRatio;
    if (json.lightMap !== void 0) material.lightMap = getTexture(json.lightMap);
    if (json.lightMapIntensity !== void 0) material.lightMapIntensity = json.lightMapIntensity;
    if (json.aoMap !== void 0) material.aoMap = getTexture(json.aoMap);
    if (json.aoMapIntensity !== void 0) material.aoMapIntensity = json.aoMapIntensity;
    if (json.gradientMap !== void 0) material.gradientMap = getTexture(json.gradientMap);
    if (json.clearcoatMap !== void 0) material.clearcoatMap = getTexture(json.clearcoatMap);
    if (json.clearcoatRoughnessMap !== void 0) material.clearcoatRoughnessMap = getTexture(json.clearcoatRoughnessMap);
    if (json.clearcoatNormalMap !== void 0) material.clearcoatNormalMap = getTexture(json.clearcoatNormalMap);
    if (json.clearcoatNormalScale !== void 0) material.clearcoatNormalScale = new Vector22().fromArray(json.clearcoatNormalScale);
    if (json.iridescenceMap !== void 0) material.iridescenceMap = getTexture(json.iridescenceMap);
    if (json.iridescenceThicknessMap !== void 0) material.iridescenceThicknessMap = getTexture(json.iridescenceThicknessMap);
    if (json.transmissionMap !== void 0) material.transmissionMap = getTexture(json.transmissionMap);
    if (json.thicknessMap !== void 0) material.thicknessMap = getTexture(json.thicknessMap);
    if (json.anisotropyMap !== void 0) material.anisotropyMap = getTexture(json.anisotropyMap);
    if (json.sheenColorMap !== void 0) material.sheenColorMap = getTexture(json.sheenColorMap);
    if (json.sheenRoughnessMap !== void 0) material.sheenRoughnessMap = getTexture(json.sheenRoughnessMap);
    return material;
  }
  setTextures(value) {
    this.textures = value;
    return this;
  }
  static createMaterialFromType(type) {
    const materialLib = {
      ShadowMaterial,
      SpriteMaterial,
      RawShaderMaterial,
      ShaderMaterial: ShaderMaterial2,
      PointsMaterial: PointsMaterial2,
      MeshPhysicalMaterial,
      MeshStandardMaterial,
      MeshPhongMaterial: MeshPhongMaterial2,
      MeshToonMaterial,
      MeshNormalMaterial,
      MeshLambertMaterial: MeshLambertMaterial2,
      MeshDepthMaterial: MeshDepthMaterial2,
      MeshDistanceMaterial: MeshDistanceMaterial2,
      MeshBasicMaterial: MeshBasicMaterial2,
      MeshMatcapMaterial,
      LineDashedMaterial,
      LineBasicMaterial: LineBasicMaterial2,
      Material: Material2
    };
    return new materialLib[type]();
  }
};
var _eyeRight2 = new Matrix42();
var _eyeLeft2 = new Matrix42();
var _projectionMatrix2 = new Matrix42();
var StereoCamera = class {
  constructor() {
    this.type = "StereoCamera";
    this.aspect = 1;
    this.eyeSep = 0.064;
    this.cameraL = new PerspectiveCamera2();
    this.cameraL.layers.enable(1);
    this.cameraL.matrixAutoUpdate = false;
    this.cameraR = new PerspectiveCamera2();
    this.cameraR.layers.enable(2);
    this.cameraR.matrixAutoUpdate = false;
    this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null
    };
  }
  update(camera3) {
    const cache2 = this._cache;
    const needsUpdate = cache2.focus !== camera3.focus || cache2.fov !== camera3.fov || cache2.aspect !== camera3.aspect * this.aspect || cache2.near !== camera3.near || cache2.far !== camera3.far || cache2.zoom !== camera3.zoom || cache2.eyeSep !== this.eyeSep;
    if (needsUpdate) {
      cache2.focus = camera3.focus;
      cache2.fov = camera3.fov;
      cache2.aspect = camera3.aspect * this.aspect;
      cache2.near = camera3.near;
      cache2.far = camera3.far;
      cache2.zoom = camera3.zoom;
      cache2.eyeSep = this.eyeSep;
      _projectionMatrix2.copy(camera3.projectionMatrix);
      const eyeSepHalf = cache2.eyeSep / 2;
      const eyeSepOnProjection = eyeSepHalf * cache2.near / cache2.focus;
      const ymax = cache2.near * Math.tan(DEG2RAD2 * cache2.fov * 0.5) / cache2.zoom;
      let xmin, xmax;
      _eyeLeft2.elements[12] = -eyeSepHalf;
      _eyeRight2.elements[12] = eyeSepHalf;
      xmin = -ymax * cache2.aspect + eyeSepOnProjection;
      xmax = ymax * cache2.aspect + eyeSepOnProjection;
      _projectionMatrix2.elements[0] = 2 * cache2.near / (xmax - xmin);
      _projectionMatrix2.elements[8] = (xmax + xmin) / (xmax - xmin);
      this.cameraL.projectionMatrix.copy(_projectionMatrix2);
      xmin = -ymax * cache2.aspect - eyeSepOnProjection;
      xmax = ymax * cache2.aspect - eyeSepOnProjection;
      _projectionMatrix2.elements[0] = 2 * cache2.near / (xmax - xmin);
      _projectionMatrix2.elements[8] = (xmax + xmin) / (xmax - xmin);
      this.cameraR.projectionMatrix.copy(_projectionMatrix2);
    }
    this.cameraL.matrixWorld.copy(camera3.matrixWorld).multiply(_eyeLeft2);
    this.cameraR.matrixWorld.copy(camera3.matrixWorld).multiply(_eyeRight2);
  }
};
var _position$12 = new Vector32();
var _quaternion$12 = new Quaternion2();
var _scale$12 = new Vector32();
var _orientation$12 = new Vector32();
var _position2 = new Vector32();
var _quaternion2 = new Quaternion2();
var _scale2 = new Vector32();
var _orientation2 = new Vector32();
var _RESERVED_CHARS_RE2 = "\\[\\]\\.:\\/";
var _reservedRe2 = new RegExp("[" + _RESERVED_CHARS_RE2 + "]", "g");
var _wordChar2 = "[^" + _RESERVED_CHARS_RE2 + "]";
var _wordCharOrDot2 = "[^" + _RESERVED_CHARS_RE2.replace("\\.", "") + "]";
var _directoryRe2 = /((?:WC+[\/:])*)/.source.replace("WC", _wordChar2);
var _nodeRe2 = /(WCOD+)?/.source.replace("WCOD", _wordCharOrDot2);
var _objectRe2 = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC", _wordChar2);
var _propertyRe2 = /\.(WC+)(?:\[(.+)\])?/.source.replace("WC", _wordChar2);
var _trackRe2 = new RegExp(
  "^" + _directoryRe2 + _nodeRe2 + _objectRe2 + _propertyRe2 + "$"
);
var _supportedObjectNames2 = ["material", "materials", "bones", "map"];
var Composite2 = class {
  constructor(targetGroup, path, optionalParsedPath) {
    const parsedPath = optionalParsedPath || PropertyBinding2.parseTrackName(path);
    this._targetGroup = targetGroup;
    this._bindings = targetGroup.subscribe_(path, parsedPath);
  }
  getValue(array3, offset) {
    this.bind();
    const firstValidIndex = this._targetGroup.nCachedObjects_, binding = this._bindings[firstValidIndex];
    if (binding !== void 0) binding.getValue(array3, offset);
  }
  setValue(array3, offset) {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].setValue(array3, offset);
    }
  }
  bind() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].bind();
    }
  }
  unbind() {
    const bindings = this._bindings;
    for (let i2 = this._targetGroup.nCachedObjects_, n2 = bindings.length; i2 !== n2; ++i2) {
      bindings[i2].unbind();
    }
  }
};
var PropertyBinding2 = class _PropertyBinding {
  constructor(rootNode, path, parsedPath) {
    this.path = path;
    this.parsedPath = parsedPath || _PropertyBinding.parseTrackName(path);
    this.node = _PropertyBinding.findNode(rootNode, this.parsedPath.nodeName);
    this.rootNode = rootNode;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
  static create(root3, path, parsedPath) {
    if (!(root3 && root3.isAnimationObjectGroup)) {
      return new _PropertyBinding(root3, path, parsedPath);
    } else {
      return new _PropertyBinding.Composite(root3, path, parsedPath);
    }
  }
  /**
   * Replaces spaces with underscores and removes unsupported characters from
   * node names, to ensure compatibility with parseTrackName().
   *
   * @param {string} name Node name to be sanitized.
   * @return {string}
   */
  static sanitizeNodeName(name) {
    return name.replace(/\s/g, "_").replace(_reservedRe2, "");
  }
  static parseTrackName(trackName) {
    const matches = _trackRe2.exec(trackName);
    if (matches === null) {
      throw new Error("PropertyBinding: Cannot parse trackName: " + trackName);
    }
    const results = {
      // directoryName: matches[ 1 ], // (tschw) currently unused
      nodeName: matches[2],
      objectName: matches[3],
      objectIndex: matches[4],
      propertyName: matches[5],
      // required
      propertyIndex: matches[6]
    };
    const lastDot = results.nodeName && results.nodeName.lastIndexOf(".");
    if (lastDot !== void 0 && lastDot !== -1) {
      const objectName = results.nodeName.substring(lastDot + 1);
      if (_supportedObjectNames2.indexOf(objectName) !== -1) {
        results.nodeName = results.nodeName.substring(0, lastDot);
        results.objectName = objectName;
      }
    }
    if (results.propertyName === null || results.propertyName.length === 0) {
      throw new Error("PropertyBinding: can not parse propertyName from trackName: " + trackName);
    }
    return results;
  }
  static findNode(root3, nodeName) {
    if (nodeName === void 0 || nodeName === "" || nodeName === "." || nodeName === -1 || nodeName === root3.name || nodeName === root3.uuid) {
      return root3;
    }
    if (root3.skeleton) {
      const bone = root3.skeleton.getBoneByName(nodeName);
      if (bone !== void 0) {
        return bone;
      }
    }
    if (root3.children) {
      const searchNodeSubtree = function(children2) {
        for (let i2 = 0; i2 < children2.length; i2++) {
          const childNode = children2[i2];
          if (childNode.name === nodeName || childNode.uuid === nodeName) {
            return childNode;
          }
          const result = searchNodeSubtree(childNode.children);
          if (result) return result;
        }
        return null;
      };
      const subTreeNode = searchNodeSubtree(root3.children);
      if (subTreeNode) {
        return subTreeNode;
      }
    }
    return null;
  }
  // these are used to "bind" a nonexistent property
  _getValue_unavailable() {
  }
  _setValue_unavailable() {
  }
  // Getters
  _getValue_direct(buffer2, offset) {
    buffer2[offset] = this.targetObject[this.propertyName];
  }
  _getValue_array(buffer2, offset) {
    const source = this.resolvedProperty;
    for (let i2 = 0, n2 = source.length; i2 !== n2; ++i2) {
      buffer2[offset++] = source[i2];
    }
  }
  _getValue_arrayElement(buffer2, offset) {
    buffer2[offset] = this.resolvedProperty[this.propertyIndex];
  }
  _getValue_toArray(buffer2, offset) {
    this.resolvedProperty.toArray(buffer2, offset);
  }
  // Direct
  _setValue_direct(buffer2, offset) {
    this.targetObject[this.propertyName] = buffer2[offset];
  }
  _setValue_direct_setNeedsUpdate(buffer2, offset) {
    this.targetObject[this.propertyName] = buffer2[offset];
    this.targetObject.needsUpdate = true;
  }
  _setValue_direct_setMatrixWorldNeedsUpdate(buffer2, offset) {
    this.targetObject[this.propertyName] = buffer2[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // EntireArray
  _setValue_array(buffer2, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
      dest[i2] = buffer2[offset++];
    }
  }
  _setValue_array_setNeedsUpdate(buffer2, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
      dest[i2] = buffer2[offset++];
    }
    this.targetObject.needsUpdate = true;
  }
  _setValue_array_setMatrixWorldNeedsUpdate(buffer2, offset) {
    const dest = this.resolvedProperty;
    for (let i2 = 0, n2 = dest.length; i2 !== n2; ++i2) {
      dest[i2] = buffer2[offset++];
    }
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // ArrayElement
  _setValue_arrayElement(buffer2, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer2[offset];
  }
  _setValue_arrayElement_setNeedsUpdate(buffer2, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer2[offset];
    this.targetObject.needsUpdate = true;
  }
  _setValue_arrayElement_setMatrixWorldNeedsUpdate(buffer2, offset) {
    this.resolvedProperty[this.propertyIndex] = buffer2[offset];
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  // HasToFromArray
  _setValue_fromArray(buffer2, offset) {
    this.resolvedProperty.fromArray(buffer2, offset);
  }
  _setValue_fromArray_setNeedsUpdate(buffer2, offset) {
    this.resolvedProperty.fromArray(buffer2, offset);
    this.targetObject.needsUpdate = true;
  }
  _setValue_fromArray_setMatrixWorldNeedsUpdate(buffer2, offset) {
    this.resolvedProperty.fromArray(buffer2, offset);
    this.targetObject.matrixWorldNeedsUpdate = true;
  }
  _getValue_unbound(targetArray, offset) {
    this.bind();
    this.getValue(targetArray, offset);
  }
  _setValue_unbound(sourceArray, offset) {
    this.bind();
    this.setValue(sourceArray, offset);
  }
  // create getter / setter pair for a property in the scene graph
  bind() {
    let targetObject = this.node;
    const parsedPath = this.parsedPath;
    const objectName = parsedPath.objectName;
    const propertyName = parsedPath.propertyName;
    let propertyIndex = parsedPath.propertyIndex;
    if (!targetObject) {
      targetObject = _PropertyBinding.findNode(this.rootNode, parsedPath.nodeName);
      this.node = targetObject;
    }
    this.getValue = this._getValue_unavailable;
    this.setValue = this._setValue_unavailable;
    if (!targetObject) {
      console.warn("THREE.PropertyBinding: No target node found for track: " + this.path + ".");
      return;
    }
    if (objectName) {
      let objectIndex = parsedPath.objectIndex;
      switch (objectName) {
        case "materials":
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.materials) {
            console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.", this);
            return;
          }
          targetObject = targetObject.material.materials;
          break;
        case "bones":
          if (!targetObject.skeleton) {
            console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.", this);
            return;
          }
          targetObject = targetObject.skeleton.bones;
          for (let i2 = 0; i2 < targetObject.length; i2++) {
            if (targetObject[i2].name === objectIndex) {
              objectIndex = i2;
              break;
            }
          }
          break;
        case "map":
          if ("map" in targetObject) {
            targetObject = targetObject.map;
            break;
          }
          if (!targetObject.material) {
            console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.", this);
            return;
          }
          if (!targetObject.material.map) {
            console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.", this);
            return;
          }
          targetObject = targetObject.material.map;
          break;
        default:
          if (targetObject[objectName] === void 0) {
            console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.", this);
            return;
          }
          targetObject = targetObject[objectName];
      }
      if (objectIndex !== void 0) {
        if (targetObject[objectIndex] === void 0) {
          console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.", this, targetObject);
          return;
        }
        targetObject = targetObject[objectIndex];
      }
    }
    const nodeProperty = targetObject[propertyName];
    if (nodeProperty === void 0) {
      const nodeName = parsedPath.nodeName;
      console.error("THREE.PropertyBinding: Trying to update property for track: " + nodeName + "." + propertyName + " but it wasn't found.", targetObject);
      return;
    }
    let versioning = this.Versioning.None;
    this.targetObject = targetObject;
    if (targetObject.needsUpdate !== void 0) {
      versioning = this.Versioning.NeedsUpdate;
    } else if (targetObject.matrixWorldNeedsUpdate !== void 0) {
      versioning = this.Versioning.MatrixWorldNeedsUpdate;
    }
    let bindingType = this.BindingType.Direct;
    if (propertyIndex !== void 0) {
      if (propertyName === "morphTargetInfluences") {
        if (!targetObject.geometry) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.", this);
          return;
        }
        if (!targetObject.geometry.morphAttributes) {
          console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.", this);
          return;
        }
        if (targetObject.morphTargetDictionary[propertyIndex] !== void 0) {
          propertyIndex = targetObject.morphTargetDictionary[propertyIndex];
        }
      }
      bindingType = this.BindingType.ArrayElement;
      this.resolvedProperty = nodeProperty;
      this.propertyIndex = propertyIndex;
    } else if (nodeProperty.fromArray !== void 0 && nodeProperty.toArray !== void 0) {
      bindingType = this.BindingType.HasFromToArray;
      this.resolvedProperty = nodeProperty;
    } else if (Array.isArray(nodeProperty)) {
      bindingType = this.BindingType.EntireArray;
      this.resolvedProperty = nodeProperty;
    } else {
      this.propertyName = propertyName;
    }
    this.getValue = this.GetterByBindingType[bindingType];
    this.setValue = this.SetterByBindingTypeAndVersioning[bindingType][versioning];
  }
  unbind() {
    this.node = null;
    this.getValue = this._getValue_unbound;
    this.setValue = this._setValue_unbound;
  }
};
PropertyBinding2.Composite = Composite2;
PropertyBinding2.prototype.BindingType = {
  Direct: 0,
  EntireArray: 1,
  ArrayElement: 2,
  HasFromToArray: 3
};
PropertyBinding2.prototype.Versioning = {
  None: 0,
  NeedsUpdate: 1,
  MatrixWorldNeedsUpdate: 2
};
PropertyBinding2.prototype.GetterByBindingType = [
  PropertyBinding2.prototype._getValue_direct,
  PropertyBinding2.prototype._getValue_array,
  PropertyBinding2.prototype._getValue_arrayElement,
  PropertyBinding2.prototype._getValue_toArray
];
PropertyBinding2.prototype.SetterByBindingTypeAndVersioning = [
  [
    // Direct
    PropertyBinding2.prototype._setValue_direct,
    PropertyBinding2.prototype._setValue_direct_setNeedsUpdate,
    PropertyBinding2.prototype._setValue_direct_setMatrixWorldNeedsUpdate
  ],
  [
    // EntireArray
    PropertyBinding2.prototype._setValue_array,
    PropertyBinding2.prototype._setValue_array_setNeedsUpdate,
    PropertyBinding2.prototype._setValue_array_setMatrixWorldNeedsUpdate
  ],
  [
    // ArrayElement
    PropertyBinding2.prototype._setValue_arrayElement,
    PropertyBinding2.prototype._setValue_arrayElement_setNeedsUpdate,
    PropertyBinding2.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate
  ],
  [
    // HasToFromArray
    PropertyBinding2.prototype._setValue_fromArray,
    PropertyBinding2.prototype._setValue_fromArray_setNeedsUpdate,
    PropertyBinding2.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate
  ]
];
var _controlInterpolantsResultBuffer2 = new Float32Array(1);
var _matrix2 = new Matrix42();
var _vector$42 = new Vector22();
var _startP2 = new Vector32();
var _startEnd2 = new Vector32();
var _vector$32 = new Vector32();
var _vector$22 = new Vector32();
var _boneMatrix2 = new Matrix42();
var _matrixWorldInv2 = new Matrix42();
var _vector$12 = new Vector32();
var _color12 = new Color3();
var _color22 = new Color3();
var _v12 = new Vector32();
var _v22 = new Vector32();
var _v32 = new Vector32();
var _vector5 = new Vector32();
var _camera$1 = new Camera2();
var _box2 = new Box32();
var _axis2 = new Vector32();
var Animation = class {
  constructor(nodes, info) {
    this.nodes = nodes;
    this.info = info;
    this.animationLoop = null;
    this.requestId = null;
    this._init();
  }
  _init() {
    const update20 = (time2, frame) => {
      this.requestId = self.requestAnimationFrame(update20);
      if (this.info.autoReset === true) this.info.reset();
      this.nodes.nodeFrame.update();
      this.info.frame = this.nodes.nodeFrame.frameId;
      if (this.animationLoop !== null) this.animationLoop(time2, frame);
    };
    update20();
  }
  dispose() {
    self.cancelAnimationFrame(this.requestId);
    this.requestId = null;
  }
  setAnimationLoop(callback) {
    this.animationLoop = callback;
  }
};
var ChainMap = class {
  constructor() {
    this.weakMap = /* @__PURE__ */ new WeakMap();
  }
  get(keys) {
    let map4 = this.weakMap;
    for (let i2 = 0; i2 < keys.length; i2++) {
      map4 = map4.get(keys[i2]);
      if (map4 === void 0) return void 0;
    }
    return map4.get(keys[keys.length - 1]);
  }
  set(keys, value) {
    let map4 = this.weakMap;
    for (let i2 = 0; i2 < keys.length; i2++) {
      const key = keys[i2];
      if (map4.has(key) === false) map4.set(key, /* @__PURE__ */ new WeakMap());
      map4 = map4.get(key);
    }
    return map4.set(keys[keys.length - 1], value);
  }
  delete(keys) {
    let map4 = this.weakMap;
    for (let i2 = 0; i2 < keys.length; i2++) {
      map4 = map4.get(keys[i2]);
      if (map4 === void 0) return false;
    }
    return map4.delete(keys[keys.length - 1]);
  }
};
var _plane = new Plane2();
var ClippingContext = class {
  constructor() {
    this.version = 0;
    this.globalClippingCount = 0;
    this.localClippingCount = 0;
    this.localClippingEnabled = false;
    this.localClipIntersection = false;
    this.planes = [];
    this.parentVersion = 0;
    this.viewNormalMatrix = new Matrix32();
    this.cacheKey = "";
  }
  projectPlanes(source, offset) {
    const l2 = source.length;
    const planes = this.planes;
    for (let i2 = 0; i2 < l2; i2++) {
      _plane.copy(source[i2]).applyMatrix4(this.viewMatrix, this.viewNormalMatrix);
      const v3 = planes[offset + i2];
      const normal2 = _plane.normal;
      v3.x = -normal2.x;
      v3.y = -normal2.y;
      v3.z = -normal2.z;
      v3.w = _plane.constant;
    }
  }
  updateGlobal(renderer3, camera3) {
    const rendererClippingPlanes = renderer3.clippingPlanes;
    this.viewMatrix = camera3.matrixWorldInverse;
    this.viewNormalMatrix.getNormalMatrix(this.viewMatrix);
    let update20 = false;
    if (Array.isArray(rendererClippingPlanes) && rendererClippingPlanes.length !== 0) {
      const l2 = rendererClippingPlanes.length;
      if (l2 !== this.globalClippingCount) {
        const planes = [];
        for (let i2 = 0; i2 < l2; i2++) {
          planes.push(new Vector42());
        }
        this.globalClippingCount = l2;
        this.planes = planes;
        update20 = true;
      }
      this.projectPlanes(rendererClippingPlanes, 0);
    } else if (this.globalClippingCount !== 0) {
      this.globalClippingCount = 0;
      this.planes = [];
      update20 = true;
    }
    if (renderer3.localClippingEnabled !== this.localClippingEnabled) {
      this.localClippingEnabled = renderer3.localClippingEnabled;
      update20 = true;
    }
    if (update20) {
      this.version++;
      this.cacheKey = `${this.globalClippingCount}:${this.localClippingEnabled === void 0 ? false : this.localClippingEnabled}:`;
    }
  }
  update(parent2, material) {
    let update20 = false;
    if (this !== parent2 && parent2.version !== this.parentVersion) {
      this.globalClippingCount = material.isShadowNodeMaterial ? 0 : parent2.globalClippingCount;
      this.localClippingEnabled = parent2.localClippingEnabled;
      this.planes = Array.from(parent2.planes);
      this.parentVersion = parent2.version;
      this.viewMatrix = parent2.viewMatrix;
      this.viewNormalMatrix = parent2.viewNormalMatrix;
      update20 = true;
    }
    if (this.localClippingEnabled) {
      const localClippingPlanes = material.clippingPlanes;
      if (Array.isArray(localClippingPlanes) && localClippingPlanes.length !== 0) {
        const l2 = localClippingPlanes.length;
        const planes = this.planes;
        const offset = this.globalClippingCount;
        if (update20 || l2 !== this.localClippingCount) {
          planes.length = offset + l2;
          for (let i2 = 0; i2 < l2; i2++) {
            planes[offset + i2] = new Vector42();
          }
          this.localClippingCount = l2;
          update20 = true;
        }
        this.projectPlanes(localClippingPlanes, offset);
      } else if (this.localClippingCount !== 0) {
        this.localClippingCount = 0;
        update20 = true;
      }
      if (this.localClipIntersection !== material.clipIntersection) {
        this.localClipIntersection = material.clipIntersection;
        update20 = true;
      }
    }
    if (update20) {
      this.version += parent2.version;
      this.cacheKey = parent2.cacheKey + `:${this.localClippingCount}:${this.localClipIntersection === void 0 ? false : this.localClipIntersection}`;
    }
  }
};
var _id$7 = 0;
function getKeys(obj) {
  const keys = Object.keys(obj);
  let proto = Object.getPrototypeOf(obj);
  while (proto) {
    const descriptors = Object.getOwnPropertyDescriptors(proto);
    for (const key in descriptors) {
      if (descriptors[key] !== void 0) {
        const descriptor = descriptors[key];
        if (descriptor && typeof descriptor.get === "function") {
          keys.push(key);
        }
      }
    }
    proto = Object.getPrototypeOf(proto);
  }
  return keys;
}
var RenderObject = class {
  constructor(nodes, geometries, renderer3, object2, material, scene3, camera3, lightsNode, renderContext) {
    this._nodes = nodes;
    this._geometries = geometries;
    this.id = _id$7++;
    this.renderer = renderer3;
    this.object = object2;
    this.material = material;
    this.scene = scene3;
    this.camera = camera3;
    this.lightsNode = lightsNode;
    this.context = renderContext;
    this.geometry = object2.geometry;
    this.version = material.version;
    this.drawRange = null;
    this.attributes = null;
    this.pipeline = null;
    this.vertexBuffers = null;
    this.updateClipping(renderContext.clippingContext);
    this.clippingContextVersion = this.clippingContext.version;
    this.initialNodesCacheKey = this.getDynamicCacheKey();
    this.initialCacheKey = this.getCacheKey();
    this._nodeBuilderState = null;
    this._bindings = null;
    this.onDispose = null;
    this.isRenderObject = true;
    this.onMaterialDispose = () => {
      this.dispose();
    };
    this.material.addEventListener("dispose", this.onMaterialDispose);
  }
  updateClipping(parent2) {
    const material = this.material;
    let clippingContext = this.clippingContext;
    if (Array.isArray(material.clippingPlanes)) {
      if (clippingContext === parent2 || !clippingContext) {
        clippingContext = new ClippingContext();
        this.clippingContext = clippingContext;
      }
      clippingContext.update(parent2, material);
    } else if (this.clippingContext !== parent2) {
      this.clippingContext = parent2;
    }
  }
  get clippingNeedsUpdate() {
    if (this.clippingContext.version === this.clippingContextVersion) return false;
    this.clippingContextVersion = this.clippingContext.version;
    return true;
  }
  getNodeBuilderState() {
    return this._nodeBuilderState || (this._nodeBuilderState = this._nodes.getForRender(this));
  }
  getBindings() {
    return this._bindings || (this._bindings = this.getNodeBuilderState().createBindings());
  }
  getIndex() {
    return this._geometries.getIndex(this);
  }
  getChainArray() {
    return [this.object, this.material, this.context, this.lightsNode];
  }
  getAttributes() {
    if (this.attributes !== null) return this.attributes;
    const nodeAttributes = this.getNodeBuilderState().nodeAttributes;
    const geometry = this.geometry;
    const attributes = [];
    const vertexBuffers = /* @__PURE__ */ new Set();
    for (const nodeAttribute of nodeAttributes) {
      const attribute2 = nodeAttribute.node && nodeAttribute.node.attribute ? nodeAttribute.node.attribute : geometry.getAttribute(nodeAttribute.name);
      if (attribute2 === void 0) continue;
      attributes.push(attribute2);
      const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
      vertexBuffers.add(bufferAttribute2);
    }
    this.attributes = attributes;
    this.vertexBuffers = Array.from(vertexBuffers.values());
    return attributes;
  }
  getVertexBuffers() {
    if (this.vertexBuffers === null) this.getAttributes();
    return this.vertexBuffers;
  }
  getMaterialCacheKey() {
    const { object: object2, material } = this;
    let cacheKey = material.customProgramCacheKey();
    for (const property2 of getKeys(material)) {
      if (/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(property2)) continue;
      const value = material[property2];
      let valueKey;
      if (value !== null) {
        const type = typeof value;
        if (type === "number") {
          valueKey = value !== 0 ? "1" : "0";
        } else if (type === "object") {
          valueKey = "{";
          if (value.isTexture) {
            valueKey += value.mapping;
          }
          valueKey += "}";
        } else {
          valueKey = String(value);
        }
      } else {
        valueKey = String(value);
      }
      cacheKey += /*property + ':' +*/
      valueKey + ",";
    }
    cacheKey += this.clippingContext.cacheKey + ",";
    if (object2.skeleton) {
      cacheKey += object2.skeleton.bones.length + ",";
    }
    if (object2.morphTargetInfluences) {
      cacheKey += object2.morphTargetInfluences.length + ",";
    }
    if (object2.isBatchedMesh) {
      cacheKey += object2._matricesTexture.uuid + ",";
      if (object2._colorsTexture !== null) {
        cacheKey += object2._colorsTexture.uuid + ",";
      }
    }
    if (object2.count > 1) {
      cacheKey += object2.count + "," + object2.uuid + ",";
    }
    return cacheKey;
  }
  get needsUpdate() {
    return this.initialNodesCacheKey !== this.getDynamicCacheKey() || this.clippingNeedsUpdate;
  }
  getDynamicCacheKey() {
    return this.object.receiveShadow + "," + this._nodes.getCacheKey(this.scene, this.lightsNode);
  }
  getCacheKey() {
    return this.getMaterialCacheKey() + "," + this.getDynamicCacheKey();
  }
  dispose() {
    this.material.removeEventListener("dispose", this.onMaterialDispose);
    this.onDispose();
  }
};
var RenderObjects = class {
  constructor(renderer3, nodes, geometries, pipelines, bindings, info) {
    this.renderer = renderer3;
    this.nodes = nodes;
    this.geometries = geometries;
    this.pipelines = pipelines;
    this.bindings = bindings;
    this.info = info;
    this.chainMaps = {};
  }
  get(object2, material, scene3, camera3, lightsNode, renderContext, passId) {
    const chainMap = this.getChainMap(passId);
    const chainArray = [object2, material, renderContext, lightsNode];
    let renderObject = chainMap.get(chainArray);
    if (renderObject === void 0) {
      renderObject = this.createRenderObject(this.nodes, this.geometries, this.renderer, object2, material, scene3, camera3, lightsNode, renderContext, passId);
      chainMap.set(chainArray, renderObject);
    } else {
      renderObject.updateClipping(renderContext.clippingContext);
      if (renderObject.version !== material.version || renderObject.needsUpdate) {
        if (renderObject.initialCacheKey !== renderObject.getCacheKey()) {
          renderObject.dispose();
          renderObject = this.get(object2, material, scene3, camera3, lightsNode, renderContext, passId);
        } else {
          renderObject.version = material.version;
        }
      }
    }
    return renderObject;
  }
  getChainMap(passId = "default") {
    return this.chainMaps[passId] || (this.chainMaps[passId] = new ChainMap());
  }
  dispose() {
    this.chainMaps = {};
  }
  createRenderObject(nodes, geometries, renderer3, object2, material, scene3, camera3, lightsNode, renderContext, passId) {
    const chainMap = this.getChainMap(passId);
    const renderObject = new RenderObject(nodes, geometries, renderer3, object2, material, scene3, camera3, lightsNode, renderContext);
    renderObject.onDispose = () => {
      this.pipelines.delete(renderObject);
      this.bindings.delete(renderObject);
      this.nodes.delete(renderObject);
      chainMap.delete(renderObject.getChainArray());
    };
    return renderObject;
  }
};
var DataMap = class {
  constructor() {
    this.data = /* @__PURE__ */ new WeakMap();
  }
  get(object2) {
    let map4 = this.data.get(object2);
    if (map4 === void 0) {
      map4 = {};
      this.data.set(object2, map4);
    }
    return map4;
  }
  delete(object2) {
    let map4;
    if (this.data.has(object2)) {
      map4 = this.data.get(object2);
      this.data.delete(object2);
    }
    return map4;
  }
  has(object2) {
    return this.data.has(object2);
  }
  dispose() {
    this.data = /* @__PURE__ */ new WeakMap();
  }
};
var AttributeType = {
  VERTEX: 1,
  INDEX: 2,
  STORAGE: 4
};
var GPU_CHUNK_BYTES = 16;
var BlendColorFactor = 211;
var OneMinusBlendColorFactor = 212;
var Attributes = class extends DataMap {
  constructor(backend) {
    super();
    this.backend = backend;
  }
  delete(attribute2) {
    const attributeData = super.delete(attribute2);
    if (attributeData !== void 0) {
      this.backend.destroyAttribute(attribute2);
    }
    return attributeData;
  }
  update(attribute2, type) {
    const data = this.get(attribute2);
    if (data.version === void 0) {
      if (type === AttributeType.VERTEX) {
        this.backend.createAttribute(attribute2);
      } else if (type === AttributeType.INDEX) {
        this.backend.createIndexAttribute(attribute2);
      } else if (type === AttributeType.STORAGE) {
        this.backend.createStorageAttribute(attribute2);
      }
      data.version = this._getBufferAttribute(attribute2).version;
    } else {
      const bufferAttribute2 = this._getBufferAttribute(attribute2);
      if (data.version < bufferAttribute2.version || bufferAttribute2.usage === DynamicDrawUsage) {
        this.backend.updateAttribute(attribute2);
        data.version = bufferAttribute2.version;
      }
    }
  }
  _getBufferAttribute(attribute2) {
    if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
    return attribute2;
  }
};
function arrayNeedsUint322(array3) {
  for (let i2 = array3.length - 1; i2 >= 0; --i2) {
    if (array3[i2] >= 65535) return true;
  }
  return false;
}
function getWireframeVersion(geometry) {
  return geometry.index !== null ? geometry.index.version : geometry.attributes.position.version;
}
function getWireframeIndex(geometry) {
  const indices = [];
  const geometryIndex = geometry.index;
  const geometryPosition = geometry.attributes.position;
  if (geometryIndex !== null) {
    const array3 = geometryIndex.array;
    for (let i2 = 0, l2 = array3.length; i2 < l2; i2 += 3) {
      const a2 = array3[i2 + 0];
      const b = array3[i2 + 1];
      const c4 = array3[i2 + 2];
      indices.push(a2, b, b, c4, c4, a2);
    }
  } else {
    const array3 = geometryPosition.array;
    for (let i2 = 0, l2 = array3.length / 3 - 1; i2 < l2; i2 += 3) {
      const a2 = i2 + 0;
      const b = i2 + 1;
      const c4 = i2 + 2;
      indices.push(a2, b, b, c4, c4, a2);
    }
  }
  const attribute2 = new (arrayNeedsUint322(indices) ? Uint32BufferAttribute2 : Uint16BufferAttribute2)(indices, 1);
  attribute2.version = getWireframeVersion(geometry);
  return attribute2;
}
var Geometries2 = class extends DataMap {
  constructor(attributes, info) {
    super();
    this.attributes = attributes;
    this.info = info;
    this.wireframes = /* @__PURE__ */ new WeakMap();
    this.attributeCall = /* @__PURE__ */ new WeakMap();
  }
  has(renderObject) {
    const geometry = renderObject.geometry;
    return super.has(geometry) && this.get(geometry).initialized === true;
  }
  updateForRender(renderObject) {
    if (this.has(renderObject) === false) this.initGeometry(renderObject);
    this.updateAttributes(renderObject);
  }
  initGeometry(renderObject) {
    const geometry = renderObject.geometry;
    const geometryData = this.get(geometry);
    geometryData.initialized = true;
    this.info.memory.geometries++;
    const onDispose = () => {
      this.info.memory.geometries--;
      const index7 = geometry.index;
      const geometryAttributes = renderObject.getAttributes();
      if (index7 !== null) {
        this.attributes.delete(index7);
      }
      for (const geometryAttribute of geometryAttributes) {
        this.attributes.delete(geometryAttribute);
      }
      const wireframeAttribute = this.wireframes.get(geometry);
      if (wireframeAttribute !== void 0) {
        this.attributes.delete(wireframeAttribute);
      }
      geometry.removeEventListener("dispose", onDispose);
    };
    geometry.addEventListener("dispose", onDispose);
  }
  updateAttributes(renderObject) {
    const attributes = renderObject.getAttributes();
    for (const attribute2 of attributes) {
      if (attribute2.isStorageBufferAttribute || attribute2.isStorageInstancedBufferAttribute) {
        this.updateAttribute(attribute2, AttributeType.STORAGE);
      } else {
        this.updateAttribute(attribute2, AttributeType.VERTEX);
      }
    }
    const index7 = this.getIndex(renderObject);
    if (index7 !== null) {
      this.updateAttribute(index7, AttributeType.INDEX);
    }
  }
  updateAttribute(attribute2, type) {
    const callId = this.info.render.calls;
    if (!attribute2.isInterleavedBufferAttribute) {
      if (this.attributeCall.get(attribute2) !== callId) {
        this.attributes.update(attribute2, type);
        this.attributeCall.set(attribute2, callId);
      }
    } else {
      if (this.attributeCall.get(attribute2) === void 0) {
        this.attributes.update(attribute2, type);
        this.attributeCall.set(attribute2, callId);
      } else if (this.attributeCall.get(attribute2.data) !== callId) {
        this.attributes.update(attribute2, type);
        this.attributeCall.set(attribute2.data, callId);
        this.attributeCall.set(attribute2, callId);
      }
    }
  }
  getIndex(renderObject) {
    const { geometry, material } = renderObject;
    let index7 = geometry.index;
    if (material.wireframe === true) {
      const wireframes = this.wireframes;
      let wireframeAttribute = wireframes.get(geometry);
      if (wireframeAttribute === void 0) {
        wireframeAttribute = getWireframeIndex(geometry);
        wireframes.set(geometry, wireframeAttribute);
      } else if (wireframeAttribute.version !== getWireframeVersion(geometry)) {
        this.attributes.delete(wireframeAttribute);
        wireframeAttribute = getWireframeIndex(geometry);
        wireframes.set(geometry, wireframeAttribute);
      }
      index7 = wireframeAttribute;
    }
    return index7;
  }
};
var Info = class {
  constructor() {
    this.autoReset = true;
    this.frame = 0;
    this.calls = 0;
    this.render = {
      calls: 0,
      frameCalls: 0,
      drawCalls: 0,
      triangles: 0,
      points: 0,
      lines: 0,
      timestamp: 0,
      previousFrameCalls: 0,
      timestampCalls: 0
    };
    this.compute = {
      calls: 0,
      frameCalls: 0,
      timestamp: 0,
      previousFrameCalls: 0,
      timestampCalls: 0
    };
    this.memory = {
      geometries: 0,
      textures: 0
    };
  }
  update(object2, count2, instanceCount) {
    this.render.drawCalls++;
    if (object2.isMesh || object2.isSprite) {
      this.render.triangles += instanceCount * (count2 / 3);
    } else if (object2.isPoints) {
      this.render.points += instanceCount * count2;
    } else if (object2.isLineSegments) {
      this.render.lines += instanceCount * (count2 / 2);
    } else if (object2.isLine) {
      this.render.lines += instanceCount * (count2 - 1);
    } else {
      console.error("THREE.WebGPUInfo: Unknown object type.");
    }
  }
  updateTimestamp(type, time2) {
    if (this[type].timestampCalls === 0) {
      this[type].timestamp = 0;
    }
    this[type].timestamp += time2;
    this[type].timestampCalls++;
    if (this[type].timestampCalls >= this[type].previousFrameCalls) {
      this[type].timestampCalls = 0;
    }
  }
  reset() {
    const previousRenderFrameCalls = this.render.frameCalls;
    this.render.previousFrameCalls = previousRenderFrameCalls;
    const previousComputeFrameCalls = this.compute.frameCalls;
    this.compute.previousFrameCalls = previousComputeFrameCalls;
    this.render.drawCalls = 0;
    this.render.frameCalls = 0;
    this.compute.frameCalls = 0;
    this.render.triangles = 0;
    this.render.points = 0;
    this.render.lines = 0;
  }
  dispose() {
    this.reset();
    this.calls = 0;
    this.render.calls = 0;
    this.compute.calls = 0;
    this.render.timestamp = 0;
    this.compute.timestamp = 0;
    this.memory.geometries = 0;
    this.memory.textures = 0;
  }
};
var Pipeline = class {
  constructor(cacheKey) {
    this.cacheKey = cacheKey;
    this.usedTimes = 0;
  }
};
var RenderPipeline = class extends Pipeline {
  constructor(cacheKey, vertexProgram, fragmentProgram) {
    super(cacheKey);
    this.vertexProgram = vertexProgram;
    this.fragmentProgram = fragmentProgram;
  }
};
var ComputePipeline = class extends Pipeline {
  constructor(cacheKey, computeProgram) {
    super(cacheKey);
    this.computeProgram = computeProgram;
    this.isComputePipeline = true;
  }
};
var _id$6 = 0;
var ProgrammableStage = class {
  constructor(code2, type, transforms = null, attributes = null) {
    this.id = _id$6++;
    this.code = code2;
    this.stage = type;
    this.transforms = transforms;
    this.attributes = attributes;
    this.usedTimes = 0;
  }
};
var Pipelines = class extends DataMap {
  constructor(backend, nodes) {
    super();
    this.backend = backend;
    this.nodes = nodes;
    this.bindings = null;
    this.caches = /* @__PURE__ */ new Map();
    this.programs = {
      vertex: /* @__PURE__ */ new Map(),
      fragment: /* @__PURE__ */ new Map(),
      compute: /* @__PURE__ */ new Map()
    };
  }
  getForCompute(computeNode, bindings) {
    const { backend } = this;
    const data = this.get(computeNode);
    if (this._needsComputeUpdate(computeNode)) {
      const previousPipeline = data.pipeline;
      if (previousPipeline) {
        previousPipeline.usedTimes--;
        previousPipeline.computeProgram.usedTimes--;
      }
      const nodeBuilderState = this.nodes.getForCompute(computeNode);
      let stageCompute = this.programs.compute.get(nodeBuilderState.computeShader);
      if (stageCompute === void 0) {
        if (previousPipeline && previousPipeline.computeProgram.usedTimes === 0) this._releaseProgram(previousPipeline.computeProgram);
        stageCompute = new ProgrammableStage(nodeBuilderState.computeShader, "compute", nodeBuilderState.transforms, nodeBuilderState.nodeAttributes);
        this.programs.compute.set(nodeBuilderState.computeShader, stageCompute);
        backend.createProgram(stageCompute);
      }
      const cacheKey = this._getComputeCacheKey(computeNode, stageCompute);
      let pipeline = this.caches.get(cacheKey);
      if (pipeline === void 0) {
        if (previousPipeline && previousPipeline.usedTimes === 0) this._releasePipeline(previousPipeline);
        pipeline = this._getComputePipeline(computeNode, stageCompute, cacheKey, bindings);
      }
      pipeline.usedTimes++;
      stageCompute.usedTimes++;
      data.version = computeNode.version;
      data.pipeline = pipeline;
    }
    return data.pipeline;
  }
  getForRender(renderObject, promises = null) {
    const { backend } = this;
    const data = this.get(renderObject);
    if (this._needsRenderUpdate(renderObject)) {
      const previousPipeline = data.pipeline;
      if (previousPipeline) {
        previousPipeline.usedTimes--;
        previousPipeline.vertexProgram.usedTimes--;
        previousPipeline.fragmentProgram.usedTimes--;
      }
      const nodeBuilderState = renderObject.getNodeBuilderState();
      let stageVertex = this.programs.vertex.get(nodeBuilderState.vertexShader);
      if (stageVertex === void 0) {
        if (previousPipeline && previousPipeline.vertexProgram.usedTimes === 0) this._releaseProgram(previousPipeline.vertexProgram);
        stageVertex = new ProgrammableStage(nodeBuilderState.vertexShader, "vertex");
        this.programs.vertex.set(nodeBuilderState.vertexShader, stageVertex);
        backend.createProgram(stageVertex);
      }
      let stageFragment = this.programs.fragment.get(nodeBuilderState.fragmentShader);
      if (stageFragment === void 0) {
        if (previousPipeline && previousPipeline.fragmentProgram.usedTimes === 0) this._releaseProgram(previousPipeline.fragmentProgram);
        stageFragment = new ProgrammableStage(nodeBuilderState.fragmentShader, "fragment");
        this.programs.fragment.set(nodeBuilderState.fragmentShader, stageFragment);
        backend.createProgram(stageFragment);
      }
      const cacheKey = this._getRenderCacheKey(renderObject, stageVertex, stageFragment);
      let pipeline = this.caches.get(cacheKey);
      if (pipeline === void 0) {
        if (previousPipeline && previousPipeline.usedTimes === 0) this._releasePipeline(previousPipeline);
        pipeline = this._getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises);
      } else {
        renderObject.pipeline = pipeline;
      }
      pipeline.usedTimes++;
      stageVertex.usedTimes++;
      stageFragment.usedTimes++;
      data.pipeline = pipeline;
    }
    return data.pipeline;
  }
  delete(object2) {
    const pipeline = this.get(object2).pipeline;
    if (pipeline) {
      pipeline.usedTimes--;
      if (pipeline.usedTimes === 0) this._releasePipeline(pipeline);
      if (pipeline.isComputePipeline) {
        pipeline.computeProgram.usedTimes--;
        if (pipeline.computeProgram.usedTimes === 0) this._releaseProgram(pipeline.computeProgram);
      } else {
        pipeline.fragmentProgram.usedTimes--;
        pipeline.vertexProgram.usedTimes--;
        if (pipeline.vertexProgram.usedTimes === 0) this._releaseProgram(pipeline.vertexProgram);
        if (pipeline.fragmentProgram.usedTimes === 0) this._releaseProgram(pipeline.fragmentProgram);
      }
    }
    return super.delete(object2);
  }
  dispose() {
    super.dispose();
    this.caches = /* @__PURE__ */ new Map();
    this.programs = {
      vertex: /* @__PURE__ */ new Map(),
      fragment: /* @__PURE__ */ new Map(),
      compute: /* @__PURE__ */ new Map()
    };
  }
  updateForRender(renderObject) {
    this.getForRender(renderObject);
  }
  _getComputePipeline(computeNode, stageCompute, cacheKey, bindings) {
    cacheKey = cacheKey || this._getComputeCacheKey(computeNode, stageCompute);
    let pipeline = this.caches.get(cacheKey);
    if (pipeline === void 0) {
      pipeline = new ComputePipeline(cacheKey, stageCompute);
      this.caches.set(cacheKey, pipeline);
      this.backend.createComputePipeline(pipeline, bindings);
    }
    return pipeline;
  }
  _getRenderPipeline(renderObject, stageVertex, stageFragment, cacheKey, promises) {
    cacheKey = cacheKey || this._getRenderCacheKey(renderObject, stageVertex, stageFragment);
    let pipeline = this.caches.get(cacheKey);
    if (pipeline === void 0) {
      pipeline = new RenderPipeline(cacheKey, stageVertex, stageFragment);
      this.caches.set(cacheKey, pipeline);
      renderObject.pipeline = pipeline;
      this.backend.createRenderPipeline(renderObject, promises);
    }
    return pipeline;
  }
  _getComputeCacheKey(computeNode, stageCompute) {
    return computeNode.id + "," + stageCompute.id;
  }
  _getRenderCacheKey(renderObject, stageVertex, stageFragment) {
    return stageVertex.id + "," + stageFragment.id + "," + this.backend.getRenderCacheKey(renderObject);
  }
  _releasePipeline(pipeline) {
    this.caches.delete(pipeline.cacheKey);
  }
  _releaseProgram(program) {
    const code2 = program.code;
    const stage = program.stage;
    this.programs[stage].delete(code2);
  }
  _needsComputeUpdate(computeNode) {
    const data = this.get(computeNode);
    return data.pipeline === void 0 || data.version !== computeNode.version;
  }
  _needsRenderUpdate(renderObject) {
    const data = this.get(renderObject);
    return data.pipeline === void 0 || this.backend.needsRenderUpdate(renderObject);
  }
};
var Bindings = class extends DataMap {
  constructor(backend, nodes, textures, attributes, pipelines, info) {
    super();
    this.backend = backend;
    this.textures = textures;
    this.pipelines = pipelines;
    this.attributes = attributes;
    this.nodes = nodes;
    this.info = info;
    this.pipelines.bindings = this;
  }
  getForRender(renderObject) {
    const bindings = renderObject.getBindings();
    for (const bindGroup of bindings) {
      const groupData = this.get(bindGroup);
      if (groupData.bindGroup === void 0) {
        this._init(bindGroup);
        this.backend.createBindings(bindGroup, bindings);
        groupData.bindGroup = bindGroup;
      }
    }
    return bindings;
  }
  getForCompute(computeNode) {
    const bindings = this.nodes.getForCompute(computeNode).bindings;
    for (const bindGroup of bindings) {
      const groupData = this.get(bindGroup);
      if (groupData.bindGroup === void 0) {
        this._init(bindGroup);
        this.backend.createBindings(bindGroup, bindings);
        groupData.bindGroup = bindGroup;
      }
    }
    return bindings;
  }
  updateForCompute(computeNode) {
    this._updateBindings(this.getForCompute(computeNode));
  }
  updateForRender(renderObject) {
    this._updateBindings(this.getForRender(renderObject));
  }
  _updateBindings(bindings) {
    for (const bindGroup of bindings) {
      this._update(bindGroup, bindings);
    }
  }
  _init(bindGroup) {
    for (const binding of bindGroup.bindings) {
      if (binding.isSampledTexture) {
        this.textures.updateTexture(binding.texture);
      } else if (binding.isStorageBuffer) {
        const attribute2 = binding.attribute;
        this.attributes.update(attribute2, AttributeType.STORAGE);
      }
    }
  }
  _update(bindGroup, bindings) {
    const { backend } = this;
    let needsBindingsUpdate = false;
    for (const binding of bindGroup.bindings) {
      if (binding.isNodeUniformsGroup) {
        const updated = this.nodes.updateGroup(binding);
        if (!updated) continue;
      }
      if (binding.isUniformBuffer) {
        const updated = binding.update();
        if (updated) {
          backend.updateBinding(binding);
        }
      } else if (binding.isSampler) {
        binding.update();
      } else if (binding.isSampledTexture) {
        if (binding.needsBindingsUpdate(this.textures.get(binding.texture).generation)) needsBindingsUpdate = true;
        const updated = binding.update();
        const texture2 = binding.texture;
        if (updated) {
          this.textures.updateTexture(texture2);
        }
        const textureData = backend.get(texture2);
        if (backend.isWebGPUBackend === true && textureData.texture === void 0 && textureData.externalTexture === void 0) {
          console.error("Bindings._update: binding should be available:", binding, updated, texture2, binding.textureNode.value, needsBindingsUpdate);
          this.textures.updateTexture(texture2);
          needsBindingsUpdate = true;
        }
        if (texture2.isStorageTexture === true) {
          const textureData2 = this.get(texture2);
          if (binding.store === true) {
            textureData2.needsMipmap = true;
          } else if (texture2.generateMipmaps === true && this.textures.needsMipmaps(texture2) && textureData2.needsMipmap === true) {
            this.backend.generateMipmaps(texture2);
            textureData2.needsMipmap = false;
          }
        }
      }
    }
    if (needsBindingsUpdate === true) {
      this.backend.updateBindings(bindGroup, bindings);
    }
  }
};
var NodeAttribute = class {
  constructor(name, type, node = null) {
    this.isNodeAttribute = true;
    this.name = name;
    this.type = type;
    this.node = node;
  }
};
var NodeUniform = class {
  constructor(name, type, node) {
    this.isNodeUniform = true;
    this.name = name;
    this.type = type;
    this.node = node.getSelf();
  }
  get value() {
    return this.node.value;
  }
  set value(val) {
    this.node.value = val;
  }
  get id() {
    return this.node.id;
  }
  get groupNode() {
    return this.node.groupNode;
  }
};
var NodeVar = class {
  constructor(name, type) {
    this.isNodeVar = true;
    this.name = name;
    this.type = type;
  }
};
var NodeVarying = class extends NodeVar {
  constructor(name, type) {
    super(name, type);
    this.needsInterpolation = false;
    this.isNodeVarying = true;
  }
};
var NodeCode = class {
  constructor(name, type, code2 = "") {
    this.name = name;
    this.type = type;
    this.code = code2;
    Object.defineProperty(this, "isNodeCode", { value: true });
  }
};
var id$1 = 0;
var NodeCache = class {
  constructor(parent2 = null) {
    this.id = id$1++;
    this.nodesData = /* @__PURE__ */ new WeakMap();
    this.parent = parent2;
  }
  getData(node) {
    let data = this.nodesData.get(node);
    if (data === void 0 && this.parent !== null) {
      data = this.parent.getData(node);
    }
    return data;
  }
  setData(node, data) {
    this.nodesData.set(node, data);
  }
};
var ParameterNode = class extends PropertyNode {
  constructor(nodeType, name = null) {
    super(nodeType, name);
    this.isParameterNode = true;
  }
  getHash() {
    return this.uuid;
  }
  generate() {
    return this.name;
  }
};
ParameterNode.type = registerNode("Parameter", ParameterNode);
var CodeNode = class extends Node2 {
  constructor(code2 = "", includes = [], language = "") {
    super("code");
    this.isCodeNode = true;
    this.code = code2;
    this.language = language;
    this.includes = includes;
  }
  isGlobal() {
    return true;
  }
  setIncludes(includes) {
    this.includes = includes;
    return this;
  }
  getIncludes() {
    return this.includes;
  }
  generate(builder) {
    const includes = this.getIncludes(builder);
    for (const include of includes) {
      include.build(builder);
    }
    const nodeCode = builder.getCodeFromNode(this, this.getNodeType(builder));
    nodeCode.code = this.code;
    return nodeCode.code;
  }
  serialize(data) {
    super.serialize(data);
    data.code = this.code;
    data.language = this.language;
  }
  deserialize(data) {
    super.deserialize(data);
    this.code = data.code;
    this.language = data.language;
  }
};
CodeNode.type = registerNode("Code", CodeNode);
var code = nodeProxy(CodeNode);
var FunctionNode = class extends CodeNode {
  constructor(code2 = "", includes = [], language = "") {
    super(code2, includes, language);
  }
  getNodeType(builder) {
    return this.getNodeFunction(builder).type;
  }
  getInputs(builder) {
    return this.getNodeFunction(builder).inputs;
  }
  getNodeFunction(builder) {
    const nodeData = builder.getDataFromNode(this);
    let nodeFunction = nodeData.nodeFunction;
    if (nodeFunction === void 0) {
      nodeFunction = builder.parser.parseFunction(this.code);
      nodeData.nodeFunction = nodeFunction;
    }
    return nodeFunction;
  }
  generate(builder, output2) {
    super.generate(builder);
    const nodeFunction = this.getNodeFunction(builder);
    const name = nodeFunction.name;
    const type = nodeFunction.type;
    const nodeCode = builder.getCodeFromNode(this, type);
    if (name !== "") {
      nodeCode.name = name;
    }
    const propertyName = builder.getPropertyName(nodeCode);
    const code2 = this.getNodeFunction(builder).getCode(propertyName);
    nodeCode.code = code2 + "\n";
    if (output2 === "property") {
      return propertyName;
    } else {
      return builder.format(`${propertyName}()`, type, output2);
    }
  }
};
FunctionNode.type = registerNode("Function", FunctionNode);
var Uniform = class {
  constructor(name, value) {
    this.name = name;
    this.value = value;
    this.boundary = 0;
    this.itemSize = 0;
    this.offset = 0;
  }
  setValue(value) {
    this.value = value;
  }
  getValue() {
    return this.value;
  }
};
var NumberUniform = class extends Uniform {
  constructor(name, value = 0) {
    super(name, value);
    this.isNumberUniform = true;
    this.boundary = 4;
    this.itemSize = 1;
  }
};
var Vector2Uniform = class extends Uniform {
  constructor(name, value = new Vector22()) {
    super(name, value);
    this.isVector2Uniform = true;
    this.boundary = 8;
    this.itemSize = 2;
  }
};
var Vector3Uniform = class extends Uniform {
  constructor(name, value = new Vector32()) {
    super(name, value);
    this.isVector3Uniform = true;
    this.boundary = 16;
    this.itemSize = 3;
  }
};
var Vector4Uniform = class extends Uniform {
  constructor(name, value = new Vector42()) {
    super(name, value);
    this.isVector4Uniform = true;
    this.boundary = 16;
    this.itemSize = 4;
  }
};
var ColorUniform = class extends Uniform {
  constructor(name, value = new Color3()) {
    super(name, value);
    this.isColorUniform = true;
    this.boundary = 16;
    this.itemSize = 3;
  }
};
var Matrix3Uniform = class extends Uniform {
  constructor(name, value = new Matrix32()) {
    super(name, value);
    this.isMatrix3Uniform = true;
    this.boundary = 48;
    this.itemSize = 12;
  }
};
var Matrix4Uniform = class extends Uniform {
  constructor(name, value = new Matrix42()) {
    super(name, value);
    this.isMatrix4Uniform = true;
    this.boundary = 64;
    this.itemSize = 16;
  }
};
var NumberNodeUniform = class extends NumberUniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var Vector2NodeUniform = class extends Vector2Uniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var Vector3NodeUniform = class extends Vector3Uniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var Vector4NodeUniform = class extends Vector4Uniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var ColorNodeUniform = class extends ColorUniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var Matrix3NodeUniform = class extends Matrix3Uniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var Matrix4NodeUniform = class extends Matrix4Uniform {
  constructor(nodeUniform) {
    super(nodeUniform.name, nodeUniform.value);
    this.nodeUniform = nodeUniform;
  }
  getValue() {
    return this.nodeUniform.value;
  }
};
var StackNode = class extends Node2 {
  constructor(parent2 = null) {
    super();
    this.nodes = [];
    this.outputNode = null;
    this.parent = parent2;
    this._currentCond = null;
    this.isStackNode = true;
  }
  getNodeType(builder) {
    return this.outputNode ? this.outputNode.getNodeType(builder) : "void";
  }
  add(node) {
    this.nodes.push(node);
    return this;
  }
  If(boolNode, method) {
    const methodNode = new ShaderNode(method);
    this._currentCond = select(boolNode, methodNode);
    return this.add(this._currentCond);
  }
  ElseIf(boolNode, method) {
    const methodNode = new ShaderNode(method);
    const ifNode = select(boolNode, methodNode);
    this._currentCond.elseNode = ifNode;
    this._currentCond = ifNode;
    return this;
  }
  Else(method) {
    this._currentCond.elseNode = new ShaderNode(method);
    return this;
  }
  build(builder, ...params) {
    const previousStack = getCurrentStack();
    setCurrentStack(this);
    for (const node of this.nodes) {
      node.build(builder, "void");
    }
    setCurrentStack(previousStack);
    return this.outputNode ? this.outputNode.build(builder, ...params) : super.build(builder, ...params);
  }
  //
  else(...params) {
    console.warn("TSL.StackNode: .else() has been renamed to .Else().");
    return this.Else(...params);
  }
  elseif(...params) {
    console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf().");
    return this.ElseIf(...params);
  }
};
StackNode.type = registerNode("Stack", StackNode);
var stack = nodeProxy(StackNode);
var LOD_MIN2 = 4;
var EXTRA_LOD_SIGMA2 = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582];
var MAX_SAMPLES2 = 20;
var _flatCamera2 = new OrthographicCamera2(-1, 1, 1, -1, 0, 1);
var _cubeCamera = new PerspectiveCamera2(90, 1);
var _clearColor$2 = new Color3();
var _oldTarget2 = null;
var _oldActiveCubeFace2 = 0;
var _oldActiveMipmapLevel2 = 0;
var PHI2 = (1 + Math.sqrt(5)) / 2;
var INV_PHI2 = 1 / PHI2;
var _axisDirections2 = [
  new Vector32(-PHI2, INV_PHI2, 0),
  new Vector32(PHI2, INV_PHI2, 0),
  new Vector32(-INV_PHI2, 0, PHI2),
  new Vector32(INV_PHI2, 0, PHI2),
  new Vector32(0, PHI2, -INV_PHI2),
  new Vector32(0, PHI2, INV_PHI2),
  new Vector32(-1, 1, -1),
  new Vector32(1, 1, -1),
  new Vector32(-1, 1, 1),
  new Vector32(1, 1, 1)
];
var _faceLib = [
  3,
  1,
  5,
  0,
  4,
  2
];
var direction = getDirection(uv(), attribute("faceIndex")).normalize();
var outputDirection = vec3(direction.x, direction.y.negate(), direction.z);
var PMREMGenerator2 = class {
  constructor(renderer3) {
    this._renderer = renderer3;
    this._pingPongRenderTarget = null;
    this._lodMax = 0;
    this._cubeSize = 0;
    this._lodPlanes = [];
    this._sizeLods = [];
    this._sigmas = [];
    this._lodMeshes = [];
    this._blurMaterial = null;
    this._cubemapMaterial = null;
    this._equirectMaterial = null;
    this._backgroundBox = null;
  }
  /**
   * Generates a PMREM from a supplied Scene, which can be faster than using an
   * image if networking bandwidth is low. Optional sigma specifies a blur radius
   * in radians to be applied to the scene before PMREM generation. Optional near
   * and far planes ensure the scene is rendered in its entirety (the cubeCamera
   * is placed at the origin).
   */
  fromScene(scene3, sigma = 0, near = 0.1, far = 100) {
    _oldTarget2 = this._renderer.getRenderTarget();
    _oldActiveCubeFace2 = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel2 = this._renderer.getActiveMipmapLevel();
    this._setSize(256);
    const cubeUVRenderTarget = this._allocateTargets();
    cubeUVRenderTarget.depthBuffer = true;
    this._sceneToCubeUV(scene3, near, far, cubeUVRenderTarget);
    if (sigma > 0) {
      this._blur(cubeUVRenderTarget, 0, 0, sigma);
    }
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  /**
   * Generates a PMREM from an equirectangular texture, which can be either LDR
   * or HDR. The ideal input image size is 1k (1024 x 512),
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromEquirectangular(equirectangular, renderTarget = null) {
    return this._fromTexture(equirectangular, renderTarget);
  }
  /**
   * Generates a PMREM from an cubemap texture, which can be either LDR
   * or HDR. The ideal input cube size is 256 x 256,
   * as this matches best with the 256 x 256 cubemap output.
   */
  fromCubemap(cubemap, renderTarget = null) {
    return this._fromTexture(cubemap, renderTarget);
  }
  /**
   * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileCubemapShader() {
    if (this._cubemapMaterial === null) {
      this._cubemapMaterial = _getCubemapMaterial2();
      this._compileMaterial(this._cubemapMaterial);
    }
  }
  /**
   * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
   * your texture's network fetch for increased concurrency.
   */
  compileEquirectangularShader() {
    if (this._equirectMaterial === null) {
      this._equirectMaterial = _getEquirectMaterial2();
      this._compileMaterial(this._equirectMaterial);
    }
  }
  /**
   * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
   * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
   * one of them will cause any others to also become unusable.
   */
  dispose() {
    this._dispose();
    if (this._cubemapMaterial !== null) this._cubemapMaterial.dispose();
    if (this._equirectMaterial !== null) this._equirectMaterial.dispose();
    if (this._backgroundBox !== null) {
      this._backgroundBox.geometry.dispose();
      this._backgroundBox.material.dispose();
    }
  }
  // private interface
  _setSize(cubeSize) {
    this._lodMax = Math.floor(Math.log2(cubeSize));
    this._cubeSize = Math.pow(2, this._lodMax);
  }
  _dispose() {
    if (this._blurMaterial !== null) this._blurMaterial.dispose();
    if (this._pingPongRenderTarget !== null) this._pingPongRenderTarget.dispose();
    for (let i2 = 0; i2 < this._lodPlanes.length; i2++) {
      this._lodPlanes[i2].dispose();
    }
  }
  _cleanup(outputTarget) {
    this._renderer.setRenderTarget(_oldTarget2, _oldActiveCubeFace2, _oldActiveMipmapLevel2);
    outputTarget.scissorTest = false;
    _setViewport2(outputTarget, 0, 0, outputTarget.width, outputTarget.height);
  }
  _fromTexture(texture2, renderTarget) {
    if (texture2.mapping === CubeReflectionMapping2 || texture2.mapping === CubeRefractionMapping2) {
      this._setSize(texture2.image.length === 0 ? 16 : texture2.image[0].width || texture2.image[0].image.width);
    } else {
      this._setSize(texture2.image.width / 4);
    }
    _oldTarget2 = this._renderer.getRenderTarget();
    _oldActiveCubeFace2 = this._renderer.getActiveCubeFace();
    _oldActiveMipmapLevel2 = this._renderer.getActiveMipmapLevel();
    const cubeUVRenderTarget = renderTarget || this._allocateTargets();
    this._textureToCubeUV(texture2, cubeUVRenderTarget);
    this._applyPMREM(cubeUVRenderTarget);
    this._cleanup(cubeUVRenderTarget);
    return cubeUVRenderTarget;
  }
  _allocateTargets() {
    const width = 3 * Math.max(this._cubeSize, 16 * 7);
    const height = 4 * this._cubeSize;
    const params = {
      magFilter: LinearFilter2,
      minFilter: LinearFilter2,
      generateMipmaps: false,
      type: HalfFloatType2,
      format: RGBAFormat2,
      colorSpace: LinearSRGBColorSpace2
      //depthBuffer: false
    };
    const cubeUVRenderTarget = _createRenderTarget2(width, height, params);
    if (this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height) {
      if (this._pingPongRenderTarget !== null) {
        this._dispose();
      }
      this._pingPongRenderTarget = _createRenderTarget2(width, height, params);
      const { _lodMax } = this;
      ({ sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes2(_lodMax));
      this._blurMaterial = _getBlurShader2(_lodMax, width, height);
    }
    return cubeUVRenderTarget;
  }
  _compileMaterial(material) {
    const tmpMesh = this._lodMeshes[0];
    tmpMesh.material = material;
    this._renderer.compile(tmpMesh, _flatCamera2);
  }
  _sceneToCubeUV(scene3, near, far, cubeUVRenderTarget) {
    const cubeCamera = _cubeCamera;
    cubeCamera.near = near;
    cubeCamera.far = far;
    const upSign = [-1, 1, -1, -1, -1, -1];
    const forwardSign = [1, 1, 1, -1, -1, -1];
    const renderer3 = this._renderer;
    const originalAutoClear = renderer3.autoClear;
    renderer3.getClearColor(_clearColor$2);
    renderer3.autoClear = false;
    let backgroundBox = this._backgroundBox;
    if (backgroundBox === null) {
      const backgroundMaterial = new MeshBasicMaterial2({
        name: "PMREM.Background",
        side: BackSide2,
        depthWrite: false,
        depthTest: false
      });
      backgroundBox = new Mesh2(new BoxGeometry2(), backgroundMaterial);
    }
    let useSolidColor = false;
    const background = scene3.background;
    if (background) {
      if (background.isColor) {
        backgroundBox.material.color.copy(background);
        scene3.background = null;
        useSolidColor = true;
      }
    } else {
      backgroundBox.material.color.copy(_clearColor$2);
      useSolidColor = true;
    }
    renderer3.setRenderTarget(cubeUVRenderTarget);
    renderer3.clear();
    if (useSolidColor) {
      renderer3.render(backgroundBox, cubeCamera);
    }
    for (let i2 = 0; i2 < 6; i2++) {
      const col = i2 % 3;
      if (col === 0) {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.lookAt(forwardSign[i2], 0, 0);
      } else if (col === 1) {
        cubeCamera.up.set(0, 0, upSign[i2]);
        cubeCamera.lookAt(0, forwardSign[i2], 0);
      } else {
        cubeCamera.up.set(0, upSign[i2], 0);
        cubeCamera.lookAt(0, 0, forwardSign[i2]);
      }
      const size = this._cubeSize;
      _setViewport2(cubeUVRenderTarget, col * size, i2 > 2 ? size : 0, size, size);
      renderer3.render(scene3, cubeCamera);
    }
    renderer3.autoClear = originalAutoClear;
    scene3.background = background;
  }
  _textureToCubeUV(texture2, cubeUVRenderTarget) {
    const renderer3 = this._renderer;
    const isCubeTexture = texture2.mapping === CubeReflectionMapping2 || texture2.mapping === CubeRefractionMapping2;
    if (isCubeTexture) {
      if (this._cubemapMaterial === null) {
        this._cubemapMaterial = _getCubemapMaterial2(texture2);
      }
    } else {
      if (this._equirectMaterial === null) {
        this._equirectMaterial = _getEquirectMaterial2(texture2);
      }
    }
    const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
    material.fragmentNode.value = texture2;
    const mesh = this._lodMeshes[0];
    mesh.material = material;
    const size = this._cubeSize;
    _setViewport2(cubeUVRenderTarget, 0, 0, 3 * size, 2 * size);
    renderer3.setRenderTarget(cubeUVRenderTarget);
    renderer3.render(mesh, _flatCamera2);
  }
  _applyPMREM(cubeUVRenderTarget) {
    const renderer3 = this._renderer;
    const autoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    const n2 = this._lodPlanes.length;
    for (let i2 = 1; i2 < n2; i2++) {
      const sigma = Math.sqrt(this._sigmas[i2] * this._sigmas[i2] - this._sigmas[i2 - 1] * this._sigmas[i2 - 1]);
      const poleAxis = _axisDirections2[(n2 - i2 - 1) % _axisDirections2.length];
      this._blur(cubeUVRenderTarget, i2 - 1, i2, sigma, poleAxis);
    }
    renderer3.autoClear = autoClear;
  }
  /**
   * This is a two-pass Gaussian blur for a cubemap. Normally this is done
   * vertically and horizontally, but this breaks down on a cube. Here we apply
   * the blur latitudinally (around the poles), and then longitudinally (towards
   * the poles) to approximate the orthogonally-separable blur. It is least
   * accurate at the poles, but still does a decent job.
   */
  _blur(cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis) {
    const pingPongRenderTarget = this._pingPongRenderTarget;
    this._halfBlur(
      cubeUVRenderTarget,
      pingPongRenderTarget,
      lodIn,
      lodOut,
      sigma,
      "latitudinal",
      poleAxis
    );
    this._halfBlur(
      pingPongRenderTarget,
      cubeUVRenderTarget,
      lodOut,
      lodOut,
      sigma,
      "longitudinal",
      poleAxis
    );
  }
  _halfBlur(targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction2, poleAxis) {
    const renderer3 = this._renderer;
    const blurMaterial = this._blurMaterial;
    if (direction2 !== "latitudinal" && direction2 !== "longitudinal") {
      console.error("blur direction must be either latitudinal or longitudinal!");
    }
    const STANDARD_DEVIATIONS = 3;
    const blurMesh = this._lodMeshes[lodOut];
    blurMesh.material = blurMaterial;
    const blurUniforms = blurMaterial.uniforms;
    const pixels = this._sizeLods[lodIn] - 1;
    const radiansPerPixel = isFinite(sigmaRadians) ? Math.PI / (2 * pixels) : 2 * Math.PI / (2 * MAX_SAMPLES2 - 1);
    const sigmaPixels = sigmaRadians / radiansPerPixel;
    const samples = isFinite(sigmaRadians) ? 1 + Math.floor(STANDARD_DEVIATIONS * sigmaPixels) : MAX_SAMPLES2;
    if (samples > MAX_SAMPLES2) {
      console.warn(`sigmaRadians, ${sigmaRadians}, is too large and will clip, as it requested ${samples} samples when the maximum is set to ${MAX_SAMPLES2}`);
    }
    const weights = [];
    let sum3 = 0;
    for (let i2 = 0; i2 < MAX_SAMPLES2; ++i2) {
      const x3 = i2 / sigmaPixels;
      const weight = Math.exp(-x3 * x3 / 2);
      weights.push(weight);
      if (i2 === 0) {
        sum3 += weight;
      } else if (i2 < samples) {
        sum3 += 2 * weight;
      }
    }
    for (let i2 = 0; i2 < weights.length; i2++) {
      weights[i2] = weights[i2] / sum3;
    }
    targetIn.texture.frame = (targetIn.texture.frame || 0) + 1;
    blurUniforms.envMap.value = targetIn.texture;
    blurUniforms.samples.value = samples;
    blurUniforms.weights.array = weights;
    blurUniforms.latitudinal.value = direction2 === "latitudinal" ? 1 : 0;
    if (poleAxis) {
      blurUniforms.poleAxis.value = poleAxis;
    }
    const { _lodMax } = this;
    blurUniforms.dTheta.value = radiansPerPixel;
    blurUniforms.mipInt.value = _lodMax - lodIn;
    const outputSize = this._sizeLods[lodOut];
    const x2 = 3 * outputSize * (lodOut > _lodMax - LOD_MIN2 ? lodOut - _lodMax + LOD_MIN2 : 0);
    const y2 = 4 * (this._cubeSize - outputSize);
    _setViewport2(targetOut, x2, y2, 3 * outputSize, 2 * outputSize);
    renderer3.setRenderTarget(targetOut);
    renderer3.render(blurMesh, _flatCamera2);
  }
};
function _createPlanes2(lodMax) {
  const lodPlanes = [];
  const sizeLods = [];
  const sigmas = [];
  const lodMeshes = [];
  let lod = lodMax;
  const totalLods = lodMax - LOD_MIN2 + 1 + EXTRA_LOD_SIGMA2.length;
  for (let i2 = 0; i2 < totalLods; i2++) {
    const sizeLod = Math.pow(2, lod);
    sizeLods.push(sizeLod);
    let sigma = 1 / sizeLod;
    if (i2 > lodMax - LOD_MIN2) {
      sigma = EXTRA_LOD_SIGMA2[i2 - lodMax + LOD_MIN2 - 1];
    } else if (i2 === 0) {
      sigma = 0;
    }
    sigmas.push(sigma);
    const texelSize = 1 / (sizeLod - 2);
    const min4 = -texelSize;
    const max4 = 1 + texelSize;
    const uv1 = [min4, min4, max4, min4, max4, max4, min4, min4, max4, max4, min4, max4];
    const cubeFaces = 6;
    const vertices = 6;
    const positionSize = 3;
    const uvSize = 2;
    const faceIndexSize = 1;
    const position = new Float32Array(positionSize * vertices * cubeFaces);
    const uv2 = new Float32Array(uvSize * vertices * cubeFaces);
    const faceIndex = new Float32Array(faceIndexSize * vertices * cubeFaces);
    for (let face = 0; face < cubeFaces; face++) {
      const x2 = face % 3 * 2 / 3 - 1;
      const y2 = face > 2 ? 0 : -1;
      const coordinates2 = [
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2,
        0,
        x2 + 2 / 3,
        y2 + 1,
        0,
        x2,
        y2 + 1,
        0
      ];
      const faceIdx = _faceLib[face];
      position.set(coordinates2, positionSize * vertices * faceIdx);
      uv2.set(uv1, uvSize * vertices * faceIdx);
      const fill = [faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx];
      faceIndex.set(fill, faceIndexSize * vertices * faceIdx);
    }
    const planes = new BufferGeometry2();
    planes.setAttribute("position", new BufferAttribute2(position, positionSize));
    planes.setAttribute("uv", new BufferAttribute2(uv2, uvSize));
    planes.setAttribute("faceIndex", new BufferAttribute2(faceIndex, faceIndexSize));
    lodPlanes.push(planes);
    lodMeshes.push(new Mesh2(planes, null));
    if (lod > LOD_MIN2) {
      lod--;
    }
  }
  return { lodPlanes, sizeLods, sigmas, lodMeshes };
}
function _createRenderTarget2(width, height, params) {
  const cubeUVRenderTarget = new RenderTarget2(width, height, params);
  cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping2;
  cubeUVRenderTarget.texture.name = "PMREM.cubeUv";
  cubeUVRenderTarget.texture.isPMREMTexture = true;
  cubeUVRenderTarget.scissorTest = true;
  return cubeUVRenderTarget;
}
function _setViewport2(target, x2, y2, width, height) {
  target.viewport.set(x2, y2, width, height);
  target.scissor.set(x2, y2, width, height);
}
function _getMaterial(type) {
  const material = new NodeMaterial();
  material.depthTest = false;
  material.depthWrite = false;
  material.blending = NoBlending2;
  material.name = `PMREM_${type}`;
  return material;
}
function _getBlurShader2(lodMax, width, height) {
  const weights = uniformArray(new Array(MAX_SAMPLES2).fill(0));
  const poleAxis = uniform(new Vector32(0, 1, 0));
  const dTheta = uniform(0);
  const n2 = float(MAX_SAMPLES2);
  const latitudinal = uniform(0);
  const samples = uniform(1);
  const envMap = texture(null);
  const mipInt = uniform(0);
  const CUBEUV_TEXEL_WIDTH = float(1 / width);
  const CUBEUV_TEXEL_HEIGHT = float(1 / height);
  const CUBEUV_MAX_MIP = float(lodMax);
  const materialUniforms = {
    n: n2,
    latitudinal,
    weights,
    poleAxis,
    outputDirection,
    dTheta,
    samples,
    envMap,
    mipInt,
    CUBEUV_TEXEL_WIDTH,
    CUBEUV_TEXEL_HEIGHT,
    CUBEUV_MAX_MIP
  };
  const material = _getMaterial("blur");
  material.uniforms = materialUniforms;
  material.fragmentNode = blur3({ ...materialUniforms, latitudinal: latitudinal.equal(1) });
  return material;
}
function _getCubemapMaterial2(envTexture) {
  const material = _getMaterial("cubemap");
  material.fragmentNode = cubeTexture(envTexture, outputDirection);
  return material;
}
function _getEquirectMaterial2(envTexture) {
  const material = _getMaterial("equirect");
  material.fragmentNode = texture(envTexture, equirectUV(outputDirection), 0);
  return material;
}
var _id$5 = 0;
var BindGroup = class {
  constructor(name = "", bindings = [], index7 = 0, bindingsReference = []) {
    this.name = name;
    this.bindings = bindings;
    this.index = index7;
    this.bindingsReference = bindingsReference;
    this.id = _id$5++;
  }
};
var rendererCache = /* @__PURE__ */ new WeakMap();
var typeFromLength = /* @__PURE__ */ new Map([
  [2, "vec2"],
  [3, "vec3"],
  [4, "vec4"],
  [9, "mat3"],
  [16, "mat4"]
]);
var typeFromArray = /* @__PURE__ */ new Map([
  [Int8Array, "int"],
  [Int16Array, "int"],
  [Int32Array, "int"],
  [Uint8Array, "uint"],
  [Uint16Array, "uint"],
  [Uint32Array, "uint"],
  [Float32Array, "float"]
]);
var toFloat = (value) => {
  value = Number(value);
  return value + (value % 1 ? "" : ".0");
};
var NodeBuilder = class {
  constructor(object2, renderer3, parser) {
    this.object = object2;
    this.material = object2 && object2.material || null;
    this.geometry = object2 && object2.geometry || null;
    this.renderer = renderer3;
    this.parser = parser;
    this.scene = null;
    this.camera = null;
    this.nodes = [];
    this.updateNodes = [];
    this.updateBeforeNodes = [];
    this.updateAfterNodes = [];
    this.hashNodes = {};
    this.lightsNode = null;
    this.environmentNode = null;
    this.fogNode = null;
    this.clippingContext = null;
    this.vertexShader = null;
    this.fragmentShader = null;
    this.computeShader = null;
    this.flowNodes = { vertex: [], fragment: [], compute: [] };
    this.flowCode = { vertex: "", fragment: "", compute: "" };
    this.uniforms = { vertex: [], fragment: [], compute: [], index: 0 };
    this.structs = { vertex: [], fragment: [], compute: [], index: 0 };
    this.bindings = { vertex: {}, fragment: {}, compute: {} };
    this.bindingsIndexes = {};
    this.bindGroups = null;
    this.attributes = [];
    this.bufferAttributes = [];
    this.varyings = [];
    this.codes = {};
    this.vars = {};
    this.flow = { code: "" };
    this.chaining = [];
    this.stack = stack();
    this.stacks = [];
    this.tab = "	";
    this.instanceBindGroups = true;
    this.currentFunctionNode = null;
    this.context = {
      material: this.material
    };
    this.cache = new NodeCache();
    this.globalCache = this.cache;
    this.flowsData = /* @__PURE__ */ new WeakMap();
    this.shaderStage = null;
    this.buildStage = null;
    this.useComparisonMethod = false;
  }
  getBindGroupsCache() {
    let bindGroupsCache = rendererCache.get(this.renderer);
    if (bindGroupsCache === void 0) {
      bindGroupsCache = new ChainMap();
      rendererCache.set(this.renderer, bindGroupsCache);
    }
    return bindGroupsCache;
  }
  createRenderTarget(width, height, options) {
    return new RenderTarget2(width, height, options);
  }
  createCubeRenderTarget(size, options) {
    return new CubeRenderTarget(size, options);
  }
  createPMREMGenerator() {
    return new PMREMGenerator2(this.renderer);
  }
  includes(node) {
    return this.nodes.includes(node);
  }
  _getBindGroup(groupName, bindings) {
    const bindGroupsCache = this.getBindGroupsCache();
    const bindingsArray = [];
    let sharedGroup = true;
    for (const binding of bindings) {
      bindingsArray.push(binding);
      sharedGroup = sharedGroup && binding.groupNode.shared !== true;
    }
    let bindGroup;
    if (sharedGroup) {
      bindGroup = bindGroupsCache.get(bindingsArray);
      if (bindGroup === void 0) {
        bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);
        bindGroupsCache.set(bindingsArray, bindGroup);
      }
    } else {
      bindGroup = new BindGroup(groupName, bindingsArray, this.bindingsIndexes[groupName].group, bindingsArray);
    }
    return bindGroup;
  }
  getBindGroupArray(groupName, shaderStage) {
    const bindings = this.bindings[shaderStage];
    let bindGroup = bindings[groupName];
    if (bindGroup === void 0) {
      if (this.bindingsIndexes[groupName] === void 0) {
        this.bindingsIndexes[groupName] = { binding: 0, group: Object.keys(this.bindingsIndexes).length };
      }
      bindings[groupName] = bindGroup = [];
    }
    return bindGroup;
  }
  getBindings() {
    let bindingsGroups = this.bindGroups;
    if (bindingsGroups === null) {
      const groups2 = {};
      const bindings = this.bindings;
      for (const shaderStage of shaderStages) {
        for (const groupName in bindings[shaderStage]) {
          const uniforms = bindings[shaderStage][groupName];
          const groupUniforms = groups2[groupName] || (groups2[groupName] = []);
          groupUniforms.push(...uniforms);
        }
      }
      bindingsGroups = [];
      for (const groupName in groups2) {
        const group2 = groups2[groupName];
        const bindingsGroup = this._getBindGroup(groupName, group2);
        bindingsGroups.push(bindingsGroup);
      }
      this.bindGroups = bindingsGroups;
    }
    return bindingsGroups;
  }
  setHashNode(node, hash2) {
    this.hashNodes[hash2] = node;
  }
  addNode(node) {
    if (this.nodes.includes(node) === false) {
      this.nodes.push(node);
      this.setHashNode(node, node.getHash(this));
    }
  }
  buildUpdateNodes() {
    for (const node of this.nodes) {
      const updateType = node.getUpdateType();
      const updateBeforeType = node.getUpdateBeforeType();
      const updateAfterType = node.getUpdateAfterType();
      if (updateType !== NodeUpdateType.NONE) {
        this.updateNodes.push(node.getSelf());
      }
      if (updateBeforeType !== NodeUpdateType.NONE) {
        this.updateBeforeNodes.push(node);
      }
      if (updateAfterType !== NodeUpdateType.NONE) {
        this.updateAfterNodes.push(node);
      }
    }
  }
  get currentNode() {
    return this.chaining[this.chaining.length - 1];
  }
  isFilteredTexture(texture2) {
    return texture2.magFilter === LinearFilter2 || texture2.magFilter === LinearMipmapNearestFilter2 || texture2.magFilter === NearestMipmapLinearFilter2 || texture2.magFilter === LinearMipmapLinearFilter2 || texture2.minFilter === LinearFilter2 || texture2.minFilter === LinearMipmapNearestFilter2 || texture2.minFilter === NearestMipmapLinearFilter2 || texture2.minFilter === LinearMipmapLinearFilter2;
  }
  addChain(node) {
    this.chaining.push(node);
  }
  removeChain(node) {
    const lastChain = this.chaining.pop();
    if (lastChain !== node) {
      throw new Error("NodeBuilder: Invalid node chaining!");
    }
  }
  getMethod(method) {
    return method;
  }
  getNodeFromHash(hash2) {
    return this.hashNodes[hash2];
  }
  addFlow(shaderStage, node) {
    this.flowNodes[shaderStage].push(node);
    return node;
  }
  setContext(context2) {
    this.context = context2;
  }
  getContext() {
    return this.context;
  }
  getSharedContext() {
    ({ ...this.context });
    return this.context;
  }
  setCache(cache2) {
    this.cache = cache2;
  }
  getCache() {
    return this.cache;
  }
  getCacheFromNode(node, parent2 = true) {
    const data = this.getDataFromNode(node);
    if (data.cache === void 0) data.cache = new NodeCache(parent2 ? this.getCache() : null);
    return data.cache;
  }
  isAvailable() {
    return false;
  }
  getVertexIndex() {
    console.warn("Abstract function.");
  }
  getInstanceIndex() {
    console.warn("Abstract function.");
  }
  getDrawIndex() {
    console.warn("Abstract function.");
  }
  getFrontFacing() {
    console.warn("Abstract function.");
  }
  getFragCoord() {
    console.warn("Abstract function.");
  }
  isFlipY() {
    return false;
  }
  increaseUsage(node) {
    const nodeData = this.getDataFromNode(node);
    nodeData.usageCount = nodeData.usageCount === void 0 ? 1 : nodeData.usageCount + 1;
    return nodeData.usageCount;
  }
  generateTexture() {
    console.warn("Abstract function.");
  }
  generateTextureLod() {
    console.warn("Abstract function.");
  }
  generateConst(type, value = null) {
    if (value === null) {
      if (type === "float" || type === "int" || type === "uint") value = 0;
      else if (type === "bool") value = false;
      else if (type === "color") value = new Color3();
      else if (type === "vec2") value = new Vector22();
      else if (type === "vec3") value = new Vector32();
      else if (type === "vec4") value = new Vector42();
    }
    if (type === "float") return toFloat(value);
    if (type === "int") return `${Math.round(value)}`;
    if (type === "uint") return value >= 0 ? `${Math.round(value)}u` : "0u";
    if (type === "bool") return value ? "true" : "false";
    if (type === "color") return `${this.getType("vec3")}( ${toFloat(value.r)}, ${toFloat(value.g)}, ${toFloat(value.b)} )`;
    const typeLength = this.getTypeLength(type);
    const componentType = this.getComponentType(type);
    const generateConst = (value2) => this.generateConst(componentType, value2);
    if (typeLength === 2) {
      return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)} )`;
    } else if (typeLength === 3) {
      return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)} )`;
    } else if (typeLength === 4) {
      return `${this.getType(type)}( ${generateConst(value.x)}, ${generateConst(value.y)}, ${generateConst(value.z)}, ${generateConst(value.w)} )`;
    } else if (typeLength > 4 && value && (value.isMatrix3 || value.isMatrix4)) {
      return `${this.getType(type)}( ${value.elements.map(generateConst).join(", ")} )`;
    } else if (typeLength > 4) {
      return `${this.getType(type)}()`;
    }
    throw new Error(`NodeBuilder: Type '${type}' not found in generate constant attempt.`);
  }
  getType(type) {
    if (type === "color") return "vec3";
    return type;
  }
  hasGeometryAttribute(name) {
    return this.geometry && this.geometry.getAttribute(name) !== void 0;
  }
  getAttribute(name, type) {
    const attributes = this.attributes;
    for (const attribute3 of attributes) {
      if (attribute3.name === name) {
        return attribute3;
      }
    }
    const attribute2 = new NodeAttribute(name, type);
    attributes.push(attribute2);
    return attribute2;
  }
  getPropertyName(node) {
    return node.name;
  }
  isVector(type) {
    return /vec\d/.test(type);
  }
  isMatrix(type) {
    return /mat\d/.test(type);
  }
  isReference(type) {
    return type === "void" || type === "property" || type === "sampler" || type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "depthTexture" || type === "texture3D";
  }
  needsToWorkingColorSpace() {
    return false;
  }
  getComponentTypeFromTexture(texture2) {
    const type = texture2.type;
    if (texture2.isDataTexture) {
      if (type === IntType2) return "int";
      if (type === UnsignedIntType2) return "uint";
    }
    return "float";
  }
  getElementType(type) {
    if (type === "mat2") return "vec2";
    if (type === "mat3") return "vec3";
    if (type === "mat4") return "vec4";
    return this.getComponentType(type);
  }
  getComponentType(type) {
    type = this.getVectorType(type);
    if (type === "float" || type === "bool" || type === "int" || type === "uint") return type;
    const componentType = /(b|i|u|)(vec|mat)([2-4])/.exec(type);
    if (componentType === null) return null;
    if (componentType[1] === "b") return "bool";
    if (componentType[1] === "i") return "int";
    if (componentType[1] === "u") return "uint";
    return "float";
  }
  getVectorType(type) {
    if (type === "color") return "vec3";
    if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") return "vec4";
    return type;
  }
  getTypeFromLength(length2, componentType = "float") {
    if (length2 === 1) return componentType;
    const baseType = typeFromLength.get(length2);
    const prefix = componentType === "float" ? "" : componentType[0];
    return prefix + baseType;
  }
  getTypeFromArray(array3) {
    return typeFromArray.get(array3.constructor);
  }
  getTypeFromAttribute(attribute2) {
    let dataAttribute = attribute2;
    if (attribute2.isInterleavedBufferAttribute) dataAttribute = attribute2.data;
    const array3 = dataAttribute.array;
    const itemSize = attribute2.itemSize;
    const normalized = attribute2.normalized;
    let arrayType;
    if (!(attribute2 instanceof Float16BufferAttribute) && normalized !== true) {
      arrayType = this.getTypeFromArray(array3);
    }
    return this.getTypeFromLength(itemSize, arrayType);
  }
  getTypeLength(type) {
    const vecType = this.getVectorType(type);
    const vecNum = /vec([2-4])/.exec(vecType);
    if (vecNum !== null) return Number(vecNum[1]);
    if (vecType === "float" || vecType === "bool" || vecType === "int" || vecType === "uint") return 1;
    if (/mat2/.test(type) === true) return 4;
    if (/mat3/.test(type) === true) return 9;
    if (/mat4/.test(type) === true) return 16;
    return 0;
  }
  getVectorFromMatrix(type) {
    return type.replace("mat", "vec");
  }
  changeComponentType(type, newComponentType) {
    return this.getTypeFromLength(this.getTypeLength(type), newComponentType);
  }
  getIntegerType(type) {
    const componentType = this.getComponentType(type);
    if (componentType === "int" || componentType === "uint") return type;
    return this.changeComponentType(type, "int");
  }
  addStack() {
    this.stack = stack(this.stack);
    this.stacks.push(getCurrentStack() || this.stack);
    setCurrentStack(this.stack);
    return this.stack;
  }
  removeStack() {
    const lastStack = this.stack;
    this.stack = lastStack.parent;
    setCurrentStack(this.stacks.pop());
    return lastStack;
  }
  getDataFromNode(node, shaderStage = this.shaderStage, cache2 = null) {
    cache2 = cache2 === null ? node.isGlobal(this) ? this.globalCache : this.cache : cache2;
    let nodeData = cache2.getData(node);
    if (nodeData === void 0) {
      nodeData = {};
      cache2.setData(node, nodeData);
    }
    if (nodeData[shaderStage] === void 0) nodeData[shaderStage] = {};
    return nodeData[shaderStage];
  }
  getNodeProperties(node, shaderStage = "any") {
    const nodeData = this.getDataFromNode(node, shaderStage);
    return nodeData.properties || (nodeData.properties = { outputNode: null });
  }
  getBufferAttributeFromNode(node, type) {
    const nodeData = this.getDataFromNode(node);
    let bufferAttribute2 = nodeData.bufferAttribute;
    if (bufferAttribute2 === void 0) {
      const index7 = this.uniforms.index++;
      bufferAttribute2 = new NodeAttribute("nodeAttribute" + index7, type, node);
      this.bufferAttributes.push(bufferAttribute2);
      nodeData.bufferAttribute = bufferAttribute2;
    }
    return bufferAttribute2;
  }
  getStructTypeFromNode(node, shaderStage = this.shaderStage) {
    const nodeData = this.getDataFromNode(node, shaderStage);
    if (nodeData.structType === void 0) {
      const index7 = this.structs.index++;
      node.name = `StructType${index7}`;
      this.structs[shaderStage].push(node);
      nodeData.structType = node;
    }
    return node;
  }
  getUniformFromNode(node, type, shaderStage = this.shaderStage, name = null) {
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    let nodeUniform = nodeData.uniform;
    if (nodeUniform === void 0) {
      const index7 = this.uniforms.index++;
      nodeUniform = new NodeUniform(name || "nodeUniform" + index7, type, node);
      this.uniforms[shaderStage].push(nodeUniform);
      nodeData.uniform = nodeUniform;
    }
    return nodeUniform;
  }
  getVarFromNode(node, name = null, type = node.getNodeType(this), shaderStage = this.shaderStage) {
    const nodeData = this.getDataFromNode(node, shaderStage);
    let nodeVar = nodeData.variable;
    if (nodeVar === void 0) {
      const vars = this.vars[shaderStage] || (this.vars[shaderStage] = []);
      if (name === null) name = "nodeVar" + vars.length;
      nodeVar = new NodeVar(name, type);
      vars.push(nodeVar);
      nodeData.variable = nodeVar;
    }
    return nodeVar;
  }
  getVaryingFromNode(node, name = null, type = node.getNodeType(this)) {
    const nodeData = this.getDataFromNode(node, "any");
    let nodeVarying = nodeData.varying;
    if (nodeVarying === void 0) {
      const varyings = this.varyings;
      const index7 = varyings.length;
      if (name === null) name = "nodeVarying" + index7;
      nodeVarying = new NodeVarying(name, type);
      varyings.push(nodeVarying);
      nodeData.varying = nodeVarying;
    }
    return nodeVarying;
  }
  getCodeFromNode(node, type, shaderStage = this.shaderStage) {
    const nodeData = this.getDataFromNode(node);
    let nodeCode = nodeData.code;
    if (nodeCode === void 0) {
      const codes = this.codes[shaderStage] || (this.codes[shaderStage] = []);
      const index7 = codes.length;
      nodeCode = new NodeCode("nodeCode" + index7, type);
      codes.push(nodeCode);
      nodeData.code = nodeCode;
    }
    return nodeCode;
  }
  addLineFlowCode(code2) {
    if (code2 === "") return this;
    code2 = this.tab + code2;
    if (!/;\s*$/.test(code2)) {
      code2 = code2 + ";\n";
    }
    this.flow.code += code2;
    return this;
  }
  addFlowCode(code2) {
    this.flow.code += code2;
    return this;
  }
  addFlowTab() {
    this.tab += "	";
    return this;
  }
  removeFlowTab() {
    this.tab = this.tab.slice(0, -1);
    return this;
  }
  getFlowData(node) {
    return this.flowsData.get(node);
  }
  flowNode(node) {
    const output2 = node.getNodeType(this);
    const flowData = this.flowChildNode(node, output2);
    this.flowsData.set(node, flowData);
    return flowData;
  }
  buildFunctionNode(shaderNode) {
    const fn = new FunctionNode();
    const previous = this.currentFunctionNode;
    this.currentFunctionNode = fn;
    fn.code = this.buildFunctionCode(shaderNode);
    this.currentFunctionNode = previous;
    return fn;
  }
  flowShaderNode(shaderNode) {
    const layout = shaderNode.layout;
    const inputs = {
      [Symbol.iterator]() {
        let index7 = 0;
        const values = Object.values(this);
        return {
          next: () => ({
            value: values[index7],
            done: index7++ >= values.length
          })
        };
      }
    };
    for (const input of layout.inputs) {
      inputs[input.name] = new ParameterNode(input.type, input.name);
    }
    shaderNode.layout = null;
    const callNode = shaderNode.call(inputs);
    const flowData = this.flowStagesNode(callNode, layout.type);
    shaderNode.layout = layout;
    return flowData;
  }
  flowStagesNode(node, output2 = null) {
    const previousFlow = this.flow;
    const previousVars = this.vars;
    const previousCache = this.cache;
    const previousBuildStage = this.buildStage;
    const previousStack = this.stack;
    const flow = {
      code: ""
    };
    this.flow = flow;
    this.vars = {};
    this.cache = new NodeCache();
    this.stack = stack();
    for (const buildStage of defaultBuildStages) {
      this.setBuildStage(buildStage);
      flow.result = node.build(this, output2);
    }
    flow.vars = this.getVars(this.shaderStage);
    this.flow = previousFlow;
    this.vars = previousVars;
    this.cache = previousCache;
    this.stack = previousStack;
    this.setBuildStage(previousBuildStage);
    return flow;
  }
  getFunctionOperator() {
    return null;
  }
  flowChildNode(node, output2 = null) {
    const previousFlow = this.flow;
    const flow = {
      code: ""
    };
    this.flow = flow;
    flow.result = node.build(this, output2);
    this.flow = previousFlow;
    return flow;
  }
  flowNodeFromShaderStage(shaderStage, node, output2 = null, propertyName = null) {
    const previousShaderStage = this.shaderStage;
    this.setShaderStage(shaderStage);
    const flowData = this.flowChildNode(node, output2);
    if (propertyName !== null) {
      flowData.code += `${this.tab + propertyName} = ${flowData.result};
`;
    }
    this.flowCode[shaderStage] = this.flowCode[shaderStage] + flowData.code;
    this.setShaderStage(previousShaderStage);
    return flowData;
  }
  getAttributesArray() {
    return this.attributes.concat(this.bufferAttributes);
  }
  getAttributes() {
    console.warn("Abstract function.");
  }
  getVaryings() {
    console.warn("Abstract function.");
  }
  getVar(type, name) {
    return `${this.getType(type)} ${name}`;
  }
  getVars(shaderStage) {
    let snippet = "";
    const vars = this.vars[shaderStage];
    if (vars !== void 0) {
      for (const variable of vars) {
        snippet += `${this.getVar(variable.type, variable.name)}; `;
      }
    }
    return snippet;
  }
  getUniforms() {
    console.warn("Abstract function.");
  }
  getCodes(shaderStage) {
    const codes = this.codes[shaderStage];
    let code2 = "";
    if (codes !== void 0) {
      for (const nodeCode of codes) {
        code2 += nodeCode.code + "\n";
      }
    }
    return code2;
  }
  getHash() {
    return this.vertexShader + this.fragmentShader + this.computeShader;
  }
  setShaderStage(shaderStage) {
    this.shaderStage = shaderStage;
  }
  getShaderStage() {
    return this.shaderStage;
  }
  setBuildStage(buildStage) {
    this.buildStage = buildStage;
  }
  getBuildStage() {
    return this.buildStage;
  }
  buildCode() {
    console.warn("Abstract function.");
  }
  build() {
    const { object: object2, material, renderer: renderer3 } = this;
    if (material !== null) {
      let nodeMaterial = renderer3.nodes.library.fromMaterial(material);
      if (nodeMaterial === null) {
        console.error(`NodeMaterial: Material "${material.type}" is not compatible.`);
        nodeMaterial = new NodeMaterial();
      }
      nodeMaterial.build(this);
    } else {
      this.addFlow("compute", object2);
    }
    for (const buildStage of defaultBuildStages) {
      this.setBuildStage(buildStage);
      if (this.context.vertex && this.context.vertex.isNode) {
        this.flowNodeFromShaderStage("vertex", this.context.vertex);
      }
      for (const shaderStage of shaderStages) {
        this.setShaderStage(shaderStage);
        const flowNodes = this.flowNodes[shaderStage];
        for (const node of flowNodes) {
          if (buildStage === "generate") {
            this.flowNode(node);
          } else {
            node.build(this);
          }
        }
      }
    }
    this.setBuildStage(null);
    this.setShaderStage(null);
    this.buildCode();
    this.buildUpdateNodes();
    return this;
  }
  getNodeUniform(uniformNode, type) {
    if (type === "float" || type === "int" || type === "uint") return new NumberNodeUniform(uniformNode);
    if (type === "vec2" || type === "ivec2" || type === "uvec2") return new Vector2NodeUniform(uniformNode);
    if (type === "vec3" || type === "ivec3" || type === "uvec3") return new Vector3NodeUniform(uniformNode);
    if (type === "vec4" || type === "ivec4" || type === "uvec4") return new Vector4NodeUniform(uniformNode);
    if (type === "color") return new ColorNodeUniform(uniformNode);
    if (type === "mat3") return new Matrix3NodeUniform(uniformNode);
    if (type === "mat4") return new Matrix4NodeUniform(uniformNode);
    throw new Error(`Uniform "${type}" not declared.`);
  }
  createNodeMaterial(type = "NodeMaterial") {
    throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${type}() instead.`);
  }
  format(snippet, fromType, toType) {
    fromType = this.getVectorType(fromType);
    toType = this.getVectorType(toType);
    if (fromType === toType || toType === null || this.isReference(toType)) {
      return snippet;
    }
    const fromTypeLength = this.getTypeLength(fromType);
    const toTypeLength = this.getTypeLength(toType);
    if (fromTypeLength === 16 && toTypeLength === 9) {
      return `${this.getType(toType)}(${snippet}[0].xyz, ${snippet}[1].xyz, ${snippet}[2].xyz)`;
    }
    if (fromTypeLength === 9 && toTypeLength === 4) {
      return `${this.getType(toType)}(${snippet}[0].xy, ${snippet}[1].xy)`;
    }
    if (fromTypeLength > 4) {
      return snippet;
    }
    if (toTypeLength > 4 || toTypeLength === 0) {
      return snippet;
    }
    if (fromTypeLength === toTypeLength) {
      return `${this.getType(toType)}( ${snippet} )`;
    }
    if (fromTypeLength > toTypeLength) {
      return this.format(`${snippet}.${"xyz".slice(0, toTypeLength)}`, this.getTypeFromLength(toTypeLength, this.getComponentType(fromType)), toType);
    }
    if (toTypeLength === 4 && fromTypeLength > 1) {
      return `${this.getType(toType)}( ${this.format(snippet, fromType, "vec3")}, 1.0 )`;
    }
    if (fromTypeLength === 2) {
      return `${this.getType(toType)}( ${this.format(snippet, fromType, "vec2")}, 0.0 )`;
    }
    if (fromTypeLength === 1 && toTypeLength > 1 && fromType !== this.getComponentType(toType)) {
      snippet = `${this.getType(this.getComponentType(toType))}( ${snippet} )`;
    }
    return `${this.getType(toType)}( ${snippet} )`;
  }
  getSignature() {
    return `// Three.js r${REVISION2} - Node System
`;
  }
};
var NodeFrame = class {
  constructor() {
    this.time = 0;
    this.deltaTime = 0;
    this.frameId = 0;
    this.renderId = 0;
    this.startTime = null;
    this.updateMap = /* @__PURE__ */ new WeakMap();
    this.updateBeforeMap = /* @__PURE__ */ new WeakMap();
    this.updateAfterMap = /* @__PURE__ */ new WeakMap();
    this.renderer = null;
    this.material = null;
    this.camera = null;
    this.object = null;
    this.scene = null;
  }
  _getMaps(referenceMap, nodeRef) {
    let maps = referenceMap.get(nodeRef);
    if (maps === void 0) {
      maps = {
        renderMap: /* @__PURE__ */ new WeakMap(),
        frameMap: /* @__PURE__ */ new WeakMap()
      };
      referenceMap.set(nodeRef, maps);
    }
    return maps;
  }
  updateBeforeNode(node) {
    const updateType = node.getUpdateBeforeType();
    const reference2 = node.updateReference(this);
    if (updateType === NodeUpdateType.FRAME) {
      const { frameMap } = this._getMaps(this.updateBeforeMap, reference2);
      if (frameMap.get(reference2) !== this.frameId) {
        if (node.updateBefore(this) !== false) {
          frameMap.set(reference2, this.frameId);
        }
      }
    } else if (updateType === NodeUpdateType.RENDER) {
      const { renderMap } = this._getMaps(this.updateBeforeMap, reference2);
      if (renderMap.get(reference2) !== this.renderId) {
        if (node.updateBefore(this) !== false) {
          renderMap.set(reference2, this.renderId);
        }
      }
    } else if (updateType === NodeUpdateType.OBJECT) {
      node.updateBefore(this);
    }
  }
  updateAfterNode(node) {
    const updateType = node.getUpdateAfterType();
    const reference2 = node.updateReference(this);
    if (updateType === NodeUpdateType.FRAME) {
      const { frameMap } = this._getMaps(this.updateAfterMap, reference2);
      if (frameMap.get(reference2) !== this.frameId) {
        if (node.updateAfter(this) !== false) {
          frameMap.set(reference2, this.frameId);
        }
      }
    } else if (updateType === NodeUpdateType.RENDER) {
      const { renderMap } = this._getMaps(this.updateAfterMap, reference2);
      if (renderMap.get(reference2) !== this.renderId) {
        if (node.updateAfter(this) !== false) {
          renderMap.set(reference2, this.renderId);
        }
      }
    } else if (updateType === NodeUpdateType.OBJECT) {
      node.updateAfter(this);
    }
  }
  updateNode(node) {
    const updateType = node.getUpdateType();
    const reference2 = node.updateReference(this);
    if (updateType === NodeUpdateType.FRAME) {
      const { frameMap } = this._getMaps(this.updateMap, reference2);
      if (frameMap.get(reference2) !== this.frameId) {
        if (node.update(this) !== false) {
          frameMap.set(reference2, this.frameId);
        }
      }
    } else if (updateType === NodeUpdateType.RENDER) {
      const { renderMap } = this._getMaps(this.updateMap, reference2);
      if (renderMap.get(reference2) !== this.renderId) {
        if (node.update(this) !== false) {
          renderMap.set(reference2, this.renderId);
        }
      }
    } else if (updateType === NodeUpdateType.OBJECT) {
      node.update(this);
    }
  }
  update() {
    this.frameId++;
    if (this.lastTime === void 0) this.lastTime = performance.now();
    this.deltaTime = (performance.now() - this.lastTime) / 1e3;
    this.lastTime = performance.now();
    this.time += this.deltaTime;
  }
};
var NodeFunctionInput = class {
  constructor(type, name, count2 = null, qualifier = "", isConst = false) {
    this.type = type;
    this.name = name;
    this.count = count2;
    this.qualifier = qualifier;
    this.isConst = isConst;
  }
};
NodeFunctionInput.isNodeFunctionInput = true;
var StructTypeNode = class extends Node2 {
  constructor(types) {
    super();
    this.types = types;
    this.isStructTypeNode = true;
  }
  getMemberTypes() {
    return this.types;
  }
};
StructTypeNode.type = registerNode("StructType", StructTypeNode);
var OutputStructNode = class extends Node2 {
  constructor(...members) {
    super();
    this.members = members;
    this.isOutputStructNode = true;
  }
  setup(builder) {
    super.setup(builder);
    const members = this.members;
    const types = [];
    for (let i2 = 0; i2 < members.length; i2++) {
      types.push(members[i2].getNodeType(builder));
    }
    this.nodeType = builder.getStructTypeFromNode(new StructTypeNode(types)).name;
  }
  generate(builder, output2) {
    const propertyName = builder.getOutputStructName();
    const members = this.members;
    const structPrefix = propertyName !== "" ? propertyName + "." : "";
    for (let i2 = 0; i2 < members.length; i2++) {
      const snippet = members[i2].build(builder, output2);
      builder.addLineFlowCode(`${structPrefix}m${i2} = ${snippet}`);
    }
    return propertyName;
  }
};
OutputStructNode.type = registerNode("OutputStruct", OutputStructNode);
var outputStruct = nodeProxy(OutputStructNode);
function getTextureIndex(textures, name) {
  for (let i2 = 0; i2 < textures.length; i2++) {
    if (textures[i2].name === name) {
      return i2;
    }
  }
  return -1;
}
var MRTNode = class extends OutputStructNode {
  constructor(outputNodes) {
    super();
    this.outputNodes = outputNodes;
    this.isMRTNode = true;
  }
  has(name) {
    return this.outputNodes[name] !== void 0;
  }
  get(name) {
    return this.outputNodes[name];
  }
  merge(mrtNode) {
    const outputs = { ...this.outputNodes, ...mrtNode.outputNodes };
    return mrt(outputs);
  }
  setup(builder) {
    const outputNodes = this.outputNodes;
    const mrt2 = builder.renderer.getRenderTarget();
    const members = [];
    const textures = mrt2.textures;
    for (const name in outputNodes) {
      const index7 = getTextureIndex(textures, name);
      members[index7] = vec4(outputNodes[name]);
    }
    this.members = members;
    return super.setup(builder);
  }
};
MRTNode.type = registerNode("MRT", MRTNode);
var mrt = nodeProxy(MRTNode);
var FunctionOverloadingNode = class extends Node2 {
  constructor(functionNodes = [], ...parametersNodes) {
    super();
    this.functionNodes = functionNodes;
    this.parametersNodes = parametersNodes;
    this._candidateFnCall = null;
    this.global = true;
  }
  getNodeType() {
    return this.functionNodes[0].shaderNode.layout.type;
  }
  setup(builder) {
    const params = this.parametersNodes;
    let candidateFnCall = this._candidateFnCall;
    if (candidateFnCall === null) {
      let candidateFn = null;
      let candidateScore = -1;
      for (const functionNode of this.functionNodes) {
        const shaderNode = functionNode.shaderNode;
        const layout = shaderNode.layout;
        if (layout === null) {
          throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");
        }
        const inputs = layout.inputs;
        if (params.length === inputs.length) {
          let score = 0;
          for (let i2 = 0; i2 < params.length; i2++) {
            const param = params[i2];
            const input = inputs[i2];
            if (param.getNodeType(builder) === input.type) {
              score++;
            } else {
              score = 0;
            }
          }
          if (score > candidateScore) {
            candidateFn = functionNode;
            candidateScore = score;
          }
        }
      }
      this._candidateFnCall = candidateFnCall = candidateFn(...params);
    }
    return candidateFnCall;
  }
};
FunctionOverloadingNode.type = registerNode("FunctionOverloading", FunctionOverloadingNode);
var overloadingBaseFn = nodeProxy(FunctionOverloadingNode);
var overloadingFn = (functionNodes) => (...params) => overloadingBaseFn(functionNodes, ...params);
var TimerNode = class _TimerNode extends UniformNode {
  constructor(scope = _TimerNode.LOCAL, scale2 = 1, value = 0) {
    super(value);
    this.scope = scope;
    this.scale = scale2;
    this.updateType = NodeUpdateType.FRAME;
  }
  /*
  	@TODO:
  	getNodeType( builder ) {
  
  		const scope = this.scope;
  
  		if ( scope === TimerNode.FRAME ) {
  
  			return 'uint';
  
  		}
  
  		return 'float';
  
  	}
  */
  update(frame) {
    const scope = this.scope;
    const scale2 = this.scale;
    if (scope === _TimerNode.LOCAL) {
      this.value += frame.deltaTime * scale2;
    } else if (scope === _TimerNode.DELTA) {
      this.value = frame.deltaTime * scale2;
    } else if (scope === _TimerNode.FRAME) {
      this.value = frame.frameId;
    } else {
      this.value = frame.time * scale2;
    }
  }
  serialize(data) {
    super.serialize(data);
    data.scope = this.scope;
    data.scale = this.scale;
  }
  deserialize(data) {
    super.deserialize(data);
    this.scope = data.scope;
    this.scale = data.scale;
  }
};
TimerNode.LOCAL = "local";
TimerNode.GLOBAL = "global";
TimerNode.DELTA = "delta";
TimerNode.FRAME = "frame";
TimerNode.type = registerNode("Timer", TimerNode);
var timerLocal = (timeScale, value = 0) => nodeObject(new TimerNode(TimerNode.LOCAL, timeScale, value));
var frameId = nodeImmutable(TimerNode, TimerNode.FRAME).toUint();
var OscNode = class _OscNode extends Node2 {
  constructor(method = _OscNode.SINE, timeNode = timerLocal()) {
    super();
    this.method = method;
    this.timeNode = timeNode;
  }
  getNodeType(builder) {
    return this.timeNode.getNodeType(builder);
  }
  setup() {
    const method = this.method;
    const timeNode = nodeObject(this.timeNode);
    let outputNode = null;
    if (method === _OscNode.SINE) {
      outputNode = timeNode.add(0.75).mul(Math.PI * 2).sin().mul(0.5).add(0.5);
    } else if (method === _OscNode.SQUARE) {
      outputNode = timeNode.fract().round();
    } else if (method === _OscNode.TRIANGLE) {
      outputNode = timeNode.add(0.5).fract().mul(2).sub(1).abs();
    } else if (method === _OscNode.SAWTOOTH) {
      outputNode = timeNode.fract();
    }
    return outputNode;
  }
  serialize(data) {
    super.serialize(data);
    data.method = this.method;
  }
  deserialize(data) {
    super.deserialize(data);
    this.method = data.method;
  }
};
OscNode.SINE = "sine";
OscNode.SQUARE = "square";
OscNode.TRIANGLE = "triangle";
OscNode.SAWTOOTH = "sawtooth";
OscNode.type = registerNode("Osc", OscNode);
var oscSine = nodeProxy(OscNode, OscNode.SINE);
var oscSquare = nodeProxy(OscNode, OscNode.SQUARE);
var oscTriangle = nodeProxy(OscNode, OscNode.TRIANGLE);
var oscSawtooth = nodeProxy(OscNode, OscNode.SAWTOOTH);
var SpriteSheetUVNode = class extends Node2 {
  constructor(countNode, uvNode = uv(), frameNode = float(0)) {
    super("vec2");
    this.countNode = countNode;
    this.uvNode = uvNode;
    this.frameNode = frameNode;
  }
  setup() {
    const { frameNode, uvNode, countNode } = this;
    const { width, height } = countNode;
    const frameNum = frameNode.mod(width.mul(height)).floor();
    const column = frameNum.mod(width);
    const row = height.sub(frameNum.add(1).div(width).ceil());
    const scale2 = countNode.reciprocal();
    const uvFrameOffset = vec2(column, row);
    return uvNode.add(uvFrameOffset).mul(scale2);
  }
};
SpriteSheetUVNode.type = registerNode("SpriteSheetUV", SpriteSheetUVNode);
var spritesheetUV = nodeProxy(SpriteSheetUVNode);
var StorageArrayElementNode = class extends ArrayElementNode {
  constructor(storageBufferNode, indexNode) {
    super(storageBufferNode, indexNode);
    this.isStorageArrayElementNode = true;
  }
  set storageBufferNode(value) {
    this.node = value;
  }
  get storageBufferNode() {
    return this.node;
  }
  setup(builder) {
    if (builder.isAvailable("storageBuffer") === false) {
      if (!this.node.instanceIndex && this.node.bufferObject === true) {
        builder.setupPBO(this.node);
      }
    }
    return super.setup(builder);
  }
  generate(builder, output2) {
    let snippet;
    const isAssignContext = builder.context.assign;
    if (builder.isAvailable("storageBuffer") === false) {
      const { node } = this;
      if (!node.instanceIndex && this.node.bufferObject === true && isAssignContext !== true) {
        snippet = builder.generatePBO(this);
      } else {
        snippet = node.build(builder);
      }
    } else {
      snippet = super.generate(builder);
    }
    if (isAssignContext !== true) {
      const type = this.getNodeType(builder);
      snippet = builder.format(snippet, type, output2);
    }
    return snippet;
  }
};
StorageArrayElementNode.type = registerNode("StorageArrayElement", StorageArrayElementNode);
var storageElement = nodeProxy(StorageArrayElementNode);
var TriplanarTexturesNode = class extends Node2 {
  constructor(textureXNode, textureYNode = null, textureZNode = null, scaleNode = float(1), positionNode = positionLocal, normalNode = normalLocal) {
    super("vec4");
    this.textureXNode = textureXNode;
    this.textureYNode = textureYNode;
    this.textureZNode = textureZNode;
    this.scaleNode = scaleNode;
    this.positionNode = positionNode;
    this.normalNode = normalNode;
  }
  setup() {
    const { textureXNode, textureYNode, textureZNode, scaleNode, positionNode, normalNode } = this;
    let bf = normalNode.abs().normalize();
    bf = bf.div(bf.dot(vec3(1)));
    const tx = positionNode.yz.mul(scaleNode);
    const ty = positionNode.zx.mul(scaleNode);
    const tz = positionNode.xy.mul(scaleNode);
    const textureX = textureXNode.value;
    const textureY = textureYNode !== null ? textureYNode.value : textureX;
    const textureZ = textureZNode !== null ? textureZNode.value : textureX;
    const cx = texture(textureX, tx).mul(bf.x);
    const cy = texture(textureY, ty).mul(bf.y);
    const cz = texture(textureZ, tz).mul(bf.z);
    return add3(cx, cy, cz);
  }
};
TriplanarTexturesNode.type = registerNode("TriplanarTextures", TriplanarTexturesNode);
var triplanarTextures = nodeProxy(TriplanarTexturesNode);
var _reflectorPlane = new Plane2();
var _normal2 = new Vector32();
var _reflectorWorldPosition = new Vector32();
var _cameraWorldPosition = new Vector32();
var _rotationMatrix = new Matrix42();
var _lookAtPosition = new Vector32(0, 0, -1);
var clipPlane = new Vector42();
var _view = new Vector32();
var _target2 = new Vector32();
var _q = new Vector42();
var _size$9 = new Vector22();
var _defaultRT = new RenderTarget2();
var _defaultUV = viewportUV.flipX();
var _inReflector = false;
var ReflectorNode = class extends TextureNode {
  constructor(parameters = {}) {
    super(_defaultRT.texture, _defaultUV);
    const {
      target = new Object3D2(),
      resolution: resolution3 = 1,
      generateMipmaps = false,
      bounces = true
    } = parameters;
    this.target = target;
    this.resolution = resolution3;
    this.generateMipmaps = generateMipmaps;
    this.bounces = bounces;
    this.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;
    this.virtualCameras = /* @__PURE__ */ new WeakMap();
    this.renderTargets = /* @__PURE__ */ new WeakMap();
  }
  _updateResolution(renderTarget, renderer3) {
    const resolution3 = this.resolution;
    renderer3.getDrawingBufferSize(_size$9);
    renderTarget.setSize(Math.round(_size$9.width * resolution3), Math.round(_size$9.height * resolution3));
  }
  setup(builder) {
    this._updateResolution(_defaultRT, builder.renderer);
    return super.setup(builder);
  }
  getTextureNode() {
    return this.textureNode;
  }
  getVirtualCamera(camera3) {
    let virtualCamera = this.virtualCameras.get(camera3);
    if (virtualCamera === void 0) {
      virtualCamera = camera3.clone();
      this.virtualCameras.set(camera3, virtualCamera);
    }
    return virtualCamera;
  }
  getRenderTarget(camera3) {
    let renderTarget = this.renderTargets.get(camera3);
    if (renderTarget === void 0) {
      renderTarget = new RenderTarget2(0, 0, { type: HalfFloatType2 });
      if (this.generateMipmaps === true) {
        renderTarget.texture.minFilter = LinearMipMapLinearFilter;
        renderTarget.texture.generateMipmaps = true;
      }
      this.renderTargets.set(camera3, renderTarget);
    }
    return renderTarget;
  }
  updateBefore(frame) {
    if (this.bounces === false && _inReflector) return false;
    _inReflector = true;
    const { scene: scene3, camera: camera3, renderer: renderer3, material } = frame;
    const { target } = this;
    const virtualCamera = this.getVirtualCamera(camera3);
    const renderTarget = this.getRenderTarget(virtualCamera);
    renderer3.getDrawingBufferSize(_size$9);
    this._updateResolution(renderTarget, renderer3);
    _reflectorWorldPosition.setFromMatrixPosition(target.matrixWorld);
    _cameraWorldPosition.setFromMatrixPosition(camera3.matrixWorld);
    _rotationMatrix.extractRotation(target.matrixWorld);
    _normal2.set(0, 0, 1);
    _normal2.applyMatrix4(_rotationMatrix);
    _view.subVectors(_reflectorWorldPosition, _cameraWorldPosition);
    if (_view.dot(_normal2) > 0) return;
    _view.reflect(_normal2).negate();
    _view.add(_reflectorWorldPosition);
    _rotationMatrix.extractRotation(camera3.matrixWorld);
    _lookAtPosition.set(0, 0, -1);
    _lookAtPosition.applyMatrix4(_rotationMatrix);
    _lookAtPosition.add(_cameraWorldPosition);
    _target2.subVectors(_reflectorWorldPosition, _lookAtPosition);
    _target2.reflect(_normal2).negate();
    _target2.add(_reflectorWorldPosition);
    virtualCamera.coordinateSystem = camera3.coordinateSystem;
    virtualCamera.position.copy(_view);
    virtualCamera.up.set(0, 1, 0);
    virtualCamera.up.applyMatrix4(_rotationMatrix);
    virtualCamera.up.reflect(_normal2);
    virtualCamera.lookAt(_target2);
    virtualCamera.near = camera3.near;
    virtualCamera.far = camera3.far;
    virtualCamera.updateMatrixWorld();
    virtualCamera.projectionMatrix.copy(camera3.projectionMatrix);
    _reflectorPlane.setFromNormalAndCoplanarPoint(_normal2, _reflectorWorldPosition);
    _reflectorPlane.applyMatrix4(virtualCamera.matrixWorldInverse);
    clipPlane.set(_reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant);
    const projectionMatrix = virtualCamera.projectionMatrix;
    _q.x = (Math.sign(clipPlane.x) + projectionMatrix.elements[8]) / projectionMatrix.elements[0];
    _q.y = (Math.sign(clipPlane.y) + projectionMatrix.elements[9]) / projectionMatrix.elements[5];
    _q.z = -1;
    _q.w = (1 + projectionMatrix.elements[10]) / projectionMatrix.elements[14];
    clipPlane.multiplyScalar(1 / clipPlane.dot(_q));
    const clipBias = 0;
    projectionMatrix.elements[2] = clipPlane.x;
    projectionMatrix.elements[6] = clipPlane.y;
    projectionMatrix.elements[10] = clipPlane.z - clipBias;
    projectionMatrix.elements[14] = clipPlane.w;
    this.value = renderTarget.texture;
    material.visible = false;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    renderer3.setMRT(null);
    renderer3.setRenderTarget(renderTarget);
    renderer3.render(scene3, virtualCamera);
    renderer3.setMRT(currentMRT);
    renderer3.setRenderTarget(currentRenderTarget);
    material.visible = true;
    _inReflector = false;
  }
};
ReflectorNode.type = registerNode("Reflector", ReflectorNode);
var _camera3 = new OrthographicCamera2(-1, 1, 1, -1, 0, 1);
var QuadGeometry = class extends BufferGeometry2 {
  constructor(flipY = false) {
    super();
    const uv2 = flipY === false ? [0, -1, 0, 1, 2, 1] : [0, 2, 0, 0, 2, 0];
    this.setAttribute("position", new Float32BufferAttribute2([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
    this.setAttribute("uv", new Float32BufferAttribute2(uv2, 2));
  }
};
var _geometry = new QuadGeometry();
var QuadMesh = class extends Mesh2 {
  constructor(material = null) {
    super(_geometry, material);
    this.camera = _camera3;
    this.isQuadMesh = true;
  }
  renderAsync(renderer3) {
    return renderer3.renderAsync(this, _camera3);
  }
  render(renderer3) {
    renderer3.render(this, _camera3);
  }
};
var _size$8 = new Vector22();
var RTTNode = class extends TextureNode {
  constructor(node, width = null, height = null, options = { type: HalfFloatType2 }) {
    const renderTarget = new RenderTarget2(width, height, options);
    super(renderTarget.texture, uv());
    this.node = node;
    this.width = width;
    this.height = height;
    this.renderTarget = renderTarget;
    this.textureNeedsUpdate = true;
    this.autoUpdate = true;
    this.updateMap = /* @__PURE__ */ new WeakMap();
    this._rttNode = null;
    this._quadMesh = new QuadMesh(new NodeMaterial());
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  get autoSize() {
    return this.width === null;
  }
  setup(builder) {
    this._rttNode = this.node.context(builder.getSharedContext());
    this._quadMesh.material.name = "RTT";
    this._quadMesh.material.needsUpdate = true;
    return super.setup(builder);
  }
  setSize(width, height) {
    this.width = width;
    this.height = height;
    const effectiveWidth = width * this.pixelRatio;
    const effectiveHeight = height * this.pixelRatio;
    this.renderTarget.setSize(effectiveWidth, effectiveHeight);
    this.textureNeedsUpdate = true;
  }
  setPixelRatio(pixelRatio) {
    this.pixelRatio = pixelRatio;
    this.setSize(this.width, this.height);
  }
  updateBefore({ renderer: renderer3 }) {
    if (this.textureNeedsUpdate === false && this.autoUpdate === false) return;
    this.textureNeedsUpdate = false;
    if (this.autoSize === true) {
      this.pixelRatio = renderer3.getPixelRatio();
      const size = renderer3.getSize(_size$8);
      this.setSize(size.width, size.height);
    }
    this._quadMesh.material.fragmentNode = this._rttNode;
    const currentRenderTarget = renderer3.getRenderTarget();
    renderer3.setRenderTarget(this.renderTarget);
    this._quadMesh.render(renderer3);
    renderer3.setRenderTarget(currentRenderTarget);
  }
  clone() {
    const newNode = new TextureNode(this.value, this.uvNode, this.levelNode);
    newNode.sampler = this.sampler;
    newNode.referenceNode = this;
    return newNode;
  }
};
RTTNode.type = registerNode("RTT", RTTNode);
var rtt = (node, ...params) => nodeObject(new RTTNode(nodeObject(node), ...params));
var convertToTexture = (node, ...params) => node.isTextureNode ? node : rtt(node, ...params);
var VertexColorNode = class extends AttributeNode {
  constructor(index7 = 0) {
    super(null, "vec4");
    this.isVertexColorNode = true;
    this.index = index7;
  }
  getAttributeName() {
    const index7 = this.index;
    return "color" + (index7 > 0 ? index7 : "");
  }
  generate(builder) {
    const attributeName = this.getAttributeName(builder);
    const geometryAttribute = builder.hasGeometryAttribute(attributeName);
    let result;
    if (geometryAttribute === true) {
      result = super.generate(builder);
    } else {
      result = builder.generateConst(this.nodeType, new Vector42(1, 1, 1, 1));
    }
    return result;
  }
  serialize(data) {
    super.serialize(data);
    data.index = this.index;
  }
  deserialize(data) {
    super.deserialize(data);
    this.index = data.index;
  }
};
VertexColorNode.type = registerNode("VertexColor", VertexColorNode);
var PointUVNode = class extends Node2 {
  constructor() {
    super("vec2");
    this.isPointUVNode = true;
  }
  generate() {
    return "vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )";
  }
};
PointUVNode.type = registerNode("PointUV", PointUVNode);
var pointUV = nodeImmutable(PointUVNode);
var SceneNode = class _SceneNode extends Node2 {
  constructor(scope = _SceneNode.BACKGROUND_BLURRINESS, scene3 = null) {
    super();
    this.scope = scope;
    this.scene = scene3;
  }
  setup(builder) {
    const scope = this.scope;
    const scene3 = this.scene !== null ? this.scene : builder.scene;
    let output2;
    if (scope === _SceneNode.BACKGROUND_BLURRINESS) {
      output2 = reference("backgroundBlurriness", "float", scene3);
    } else if (scope === _SceneNode.BACKGROUND_INTENSITY) {
      output2 = reference("backgroundIntensity", "float", scene3);
    } else {
      console.error("THREE.SceneNode: Unknown scope:", scope);
    }
    return output2;
  }
};
SceneNode.BACKGROUND_BLURRINESS = "backgroundBlurriness";
SceneNode.BACKGROUND_INTENSITY = "backgroundIntensity";
SceneNode.type = registerNode("Scene", SceneNode);
var backgroundBlurriness = nodeImmutable(SceneNode, SceneNode.BACKGROUND_BLURRINESS);
var backgroundIntensity = nodeImmutable(SceneNode, SceneNode.BACKGROUND_INTENSITY);
var GPUPrimitiveTopology = {
  PointList: "point-list",
  LineList: "line-list",
  LineStrip: "line-strip",
  TriangleList: "triangle-list",
  TriangleStrip: "triangle-strip"
};
var GPUCompareFunction = {
  Never: "never",
  Less: "less",
  Equal: "equal",
  LessEqual: "less-equal",
  Greater: "greater",
  NotEqual: "not-equal",
  GreaterEqual: "greater-equal",
  Always: "always"
};
var GPUStoreOp = {
  Store: "store",
  Discard: "discard"
};
var GPULoadOp = {
  Load: "load",
  Clear: "clear"
};
var GPUFrontFace = {
  CCW: "ccw",
  CW: "cw"
};
var GPUCullMode = {
  None: "none",
  Front: "front",
  Back: "back"
};
var GPUIndexFormat = {
  Uint16: "uint16",
  Uint32: "uint32"
};
var GPUTextureFormat = {
  // 8-bit formats
  R8Unorm: "r8unorm",
  R8Snorm: "r8snorm",
  R8Uint: "r8uint",
  R8Sint: "r8sint",
  // 16-bit formats
  R16Uint: "r16uint",
  R16Sint: "r16sint",
  R16Float: "r16float",
  RG8Unorm: "rg8unorm",
  RG8Snorm: "rg8snorm",
  RG8Uint: "rg8uint",
  RG8Sint: "rg8sint",
  // 32-bit formats
  R32Uint: "r32uint",
  R32Sint: "r32sint",
  R32Float: "r32float",
  RG16Uint: "rg16uint",
  RG16Sint: "rg16sint",
  RG16Float: "rg16float",
  RGBA8Unorm: "rgba8unorm",
  RGBA8UnormSRGB: "rgba8unorm-srgb",
  RGBA8Snorm: "rgba8snorm",
  RGBA8Uint: "rgba8uint",
  RGBA8Sint: "rgba8sint",
  BGRA8Unorm: "bgra8unorm",
  BGRA8UnormSRGB: "bgra8unorm-srgb",
  // Packed 32-bit formats
  RGB9E5UFloat: "rgb9e5ufloat",
  RGB10A2Unorm: "rgb10a2unorm",
  RG11B10uFloat: "rgb10a2unorm",
  // 64-bit formats
  RG32Uint: "rg32uint",
  RG32Sint: "rg32sint",
  RG32Float: "rg32float",
  RGBA16Uint: "rgba16uint",
  RGBA16Sint: "rgba16sint",
  RGBA16Float: "rgba16float",
  // 128-bit formats
  RGBA32Uint: "rgba32uint",
  RGBA32Sint: "rgba32sint",
  RGBA32Float: "rgba32float",
  // Depth and stencil formats
  Stencil8: "stencil8",
  Depth16Unorm: "depth16unorm",
  Depth24Plus: "depth24plus",
  Depth24PlusStencil8: "depth24plus-stencil8",
  Depth32Float: "depth32float",
  // 'depth32float-stencil8' extension
  Depth32FloatStencil8: "depth32float-stencil8",
  // BC compressed formats usable if 'texture-compression-bc' is both
  // supported by the device/user agent and enabled in requestDevice.
  BC1RGBAUnorm: "bc1-rgba-unorm",
  BC1RGBAUnormSRGB: "bc1-rgba-unorm-srgb",
  BC2RGBAUnorm: "bc2-rgba-unorm",
  BC2RGBAUnormSRGB: "bc2-rgba-unorm-srgb",
  BC3RGBAUnorm: "bc3-rgba-unorm",
  BC3RGBAUnormSRGB: "bc3-rgba-unorm-srgb",
  BC4RUnorm: "bc4-r-unorm",
  BC4RSnorm: "bc4-r-snorm",
  BC5RGUnorm: "bc5-rg-unorm",
  BC5RGSnorm: "bc5-rg-snorm",
  BC6HRGBUFloat: "bc6h-rgb-ufloat",
  BC6HRGBFloat: "bc6h-rgb-float",
  BC7RGBAUnorm: "bc7-rgba-unorm",
  BC7RGBAUnormSRGB: "bc7-rgba-srgb",
  // ETC2 compressed formats usable if 'texture-compression-etc2' is both
  // supported by the device/user agent and enabled in requestDevice.
  ETC2RGB8Unorm: "etc2-rgb8unorm",
  ETC2RGB8UnormSRGB: "etc2-rgb8unorm-srgb",
  ETC2RGB8A1Unorm: "etc2-rgb8a1unorm",
  ETC2RGB8A1UnormSRGB: "etc2-rgb8a1unorm-srgb",
  ETC2RGBA8Unorm: "etc2-rgba8unorm",
  ETC2RGBA8UnormSRGB: "etc2-rgba8unorm-srgb",
  EACR11Unorm: "eac-r11unorm",
  EACR11Snorm: "eac-r11snorm",
  EACRG11Unorm: "eac-rg11unorm",
  EACRG11Snorm: "eac-rg11snorm",
  // ASTC compressed formats usable if 'texture-compression-astc' is both
  // supported by the device/user agent and enabled in requestDevice.
  ASTC4x4Unorm: "astc-4x4-unorm",
  ASTC4x4UnormSRGB: "astc-4x4-unorm-srgb",
  ASTC5x4Unorm: "astc-5x4-unorm",
  ASTC5x4UnormSRGB: "astc-5x4-unorm-srgb",
  ASTC5x5Unorm: "astc-5x5-unorm",
  ASTC5x5UnormSRGB: "astc-5x5-unorm-srgb",
  ASTC6x5Unorm: "astc-6x5-unorm",
  ASTC6x5UnormSRGB: "astc-6x5-unorm-srgb",
  ASTC6x6Unorm: "astc-6x6-unorm",
  ASTC6x6UnormSRGB: "astc-6x6-unorm-srgb",
  ASTC8x5Unorm: "astc-8x5-unorm",
  ASTC8x5UnormSRGB: "astc-8x5-unorm-srgb",
  ASTC8x6Unorm: "astc-8x6-unorm",
  ASTC8x6UnormSRGB: "astc-8x6-unorm-srgb",
  ASTC8x8Unorm: "astc-8x8-unorm",
  ASTC8x8UnormSRGB: "astc-8x8-unorm-srgb",
  ASTC10x5Unorm: "astc-10x5-unorm",
  ASTC10x5UnormSRGB: "astc-10x5-unorm-srgb",
  ASTC10x6Unorm: "astc-10x6-unorm",
  ASTC10x6UnormSRGB: "astc-10x6-unorm-srgb",
  ASTC10x8Unorm: "astc-10x8-unorm",
  ASTC10x8UnormSRGB: "astc-10x8-unorm-srgb",
  ASTC10x10Unorm: "astc-10x10-unorm",
  ASTC10x10UnormSRGB: "astc-10x10-unorm-srgb",
  ASTC12x10Unorm: "astc-12x10-unorm",
  ASTC12x10UnormSRGB: "astc-12x10-unorm-srgb",
  ASTC12x12Unorm: "astc-12x12-unorm",
  ASTC12x12UnormSRGB: "astc-12x12-unorm-srgb"
};
var GPUAddressMode = {
  ClampToEdge: "clamp-to-edge",
  Repeat: "repeat",
  MirrorRepeat: "mirror-repeat"
};
var GPUFilterMode = {
  Linear: "linear",
  Nearest: "nearest"
};
var GPUBlendFactor = {
  Zero: "zero",
  One: "one",
  Src: "src",
  OneMinusSrc: "one-minus-src",
  SrcAlpha: "src-alpha",
  OneMinusSrcAlpha: "one-minus-src-alpha",
  Dst: "dst",
  OneMinusDstColor: "one-minus-dst",
  DstAlpha: "dst-alpha",
  OneMinusDstAlpha: "one-minus-dst-alpha",
  SrcAlphaSaturated: "src-alpha-saturated",
  Constant: "constant",
  OneMinusConstant: "one-minus-constant"
};
var GPUBlendOperation = {
  Add: "add",
  Subtract: "subtract",
  ReverseSubtract: "reverse-subtract",
  Min: "min",
  Max: "max"
};
var GPUColorWriteFlags = {
  None: 0,
  Red: 1,
  Green: 2,
  Blue: 4,
  Alpha: 8,
  All: 15
};
var GPUStencilOperation = {
  Keep: "keep",
  Zero: "zero",
  Replace: "replace",
  Invert: "invert",
  IncrementClamp: "increment-clamp",
  DecrementClamp: "decrement-clamp",
  IncrementWrap: "increment-wrap",
  DecrementWrap: "decrement-wrap"
};
var GPUBufferBindingType = {
  Uniform: "uniform",
  Storage: "storage",
  ReadOnlyStorage: "read-only-storage"
};
var GPUStorageTextureAccess = {
  WriteOnly: "write-only",
  ReadOnly: "read-only",
  ReadWrite: "read-write"
};
var GPUTextureSampleType = {
  Float: "float",
  UnfilterableFloat: "unfilterable-float",
  Depth: "depth",
  SInt: "sint",
  UInt: "uint"
};
var GPUTextureDimension = {
  OneD: "1d",
  TwoD: "2d",
  ThreeD: "3d"
};
var GPUTextureViewDimension = {
  OneD: "1d",
  TwoD: "2d",
  TwoDArray: "2d-array",
  Cube: "cube",
  CubeArray: "cube-array",
  ThreeD: "3d"
};
var GPUTextureAspect = {
  All: "all",
  StencilOnly: "stencil-only",
  DepthOnly: "depth-only"
};
var GPUInputStepMode = {
  Vertex: "vertex",
  Instance: "instance"
};
var GPUFeatureName = {
  DepthClipControl: "depth-clip-control",
  Depth32FloatStencil8: "depth32float-stencil8",
  TextureCompressionBC: "texture-compression-bc",
  TextureCompressionETC2: "texture-compression-etc2",
  TextureCompressionASTC: "texture-compression-astc",
  TimestampQuery: "timestamp-query",
  IndirectFirstInstance: "indirect-first-instance",
  ShaderF16: "shader-f16",
  RG11B10UFloat: "rg11b10ufloat-renderable",
  BGRA8UNormStorage: "bgra8unorm-storage",
  Float32Filterable: "float32-filterable",
  ClipDistances: "clip-distances",
  DualSourceBlending: "dual-source-blending",
  Subgroups: "subgroups"
};
var StorageBufferNode = class extends BufferNode {
  constructor(value, bufferType, bufferCount = 0) {
    super(value, bufferType, bufferCount);
    this.isStorageBufferNode = true;
    this.access = GPUBufferBindingType.Storage;
    this.bufferObject = false;
    this.bufferCount = bufferCount;
    this._attribute = null;
    this._varying = null;
    this.global = true;
    if (value.isStorageBufferAttribute !== true && value.isStorageInstancedBufferAttribute !== true) {
      if (value.isInstancedBufferAttribute) value.isStorageInstancedBufferAttribute = true;
      else value.isStorageBufferAttribute = true;
    }
  }
  getHash(builder) {
    if (this.bufferCount === 0) {
      let bufferData = builder.globalCache.getData(this.value);
      if (bufferData === void 0) {
        bufferData = {
          node: this
        };
        builder.globalCache.setData(this.value, bufferData);
      }
      return bufferData.node.uuid;
    }
    return this.uuid;
  }
  getInputType() {
    return "storageBuffer";
  }
  element(indexNode) {
    return storageElement(this, indexNode);
  }
  setBufferObject(value) {
    this.bufferObject = value;
    return this;
  }
  setAccess(value) {
    this.access = value;
    return this;
  }
  toReadOnly() {
    return this.setAccess(GPUBufferBindingType.ReadOnlyStorage);
  }
  generate(builder) {
    if (builder.isAvailable("storageBuffer")) {
      return super.generate(builder);
    }
    const nodeType = this.getNodeType(builder);
    if (this._attribute === null) {
      this._attribute = bufferAttribute(this.value);
      this._varying = varying(this._attribute);
    }
    const output2 = this._varying.build(builder, nodeType);
    builder.registerTransform(output2, this._attribute);
    return output2;
  }
};
StorageBufferNode.type = registerNode("StorageBuffer", StorageBufferNode);
var storage = (value, type, count2) => nodeObject(new StorageBufferNode(value, type, count2));
var StorageTextureNode = class extends TextureNode {
  constructor(value, uvNode, storeNode = null) {
    super(value, uvNode);
    this.storeNode = storeNode;
    this.isStorageTextureNode = true;
    this.access = GPUStorageTextureAccess.WriteOnly;
  }
  getInputType() {
    return "storageTexture";
  }
  setup(builder) {
    super.setup(builder);
    const properties = builder.getNodeProperties(this);
    properties.storeNode = this.storeNode;
  }
  setAccess(value) {
    this.access = value;
    return this;
  }
  generate(builder, output2) {
    let snippet;
    if (this.storeNode !== null) {
      snippet = this.generateStore(builder);
    } else {
      snippet = super.generate(builder, output2);
    }
    return snippet;
  }
  toReadOnly() {
    return this.setAccess(GPUStorageTextureAccess.ReadOnly);
  }
  toWriteOnly() {
    return this.setAccess(GPUStorageTextureAccess.WriteOnly);
  }
  generateStore(builder) {
    const properties = builder.getNodeProperties(this);
    const { uvNode, storeNode } = properties;
    const textureProperty = super.generate(builder, "property");
    const uvSnippet = uvNode.build(builder, "uvec2");
    const storeSnippet = storeNode.build(builder, "vec4");
    const snippet = builder.generateTextureStore(builder, textureProperty, uvSnippet, storeSnippet);
    builder.addLineFlowCode(snippet);
  }
};
StorageTextureNode.type = registerNode("StorageTexture", StorageTextureNode);
var storageTexture = nodeProxy(StorageTextureNode);
var UserDataNode = class extends ReferenceNode {
  constructor(property2, inputType, userData = null) {
    super(property2, inputType, userData);
    this.userData = userData;
  }
  update(frame) {
    this.reference = this.userData !== null ? this.userData : frame.object.userData;
    super.update(frame);
  }
};
UserDataNode.type = registerNode("UserData", UserDataNode);
var PosterizeNode = class extends TempNode {
  constructor(sourceNode, stepsNode) {
    super();
    this.sourceNode = sourceNode;
    this.stepsNode = stepsNode;
  }
  setup() {
    const { sourceNode, stepsNode } = this;
    return sourceNode.mul(stepsNode).floor().div(stepsNode);
  }
};
PosterizeNode.type = registerNode("Posterize", PosterizeNode);
var posterize = nodeProxy(PosterizeNode);
var _sharedFramebuffer = null;
var ViewportSharedTextureNode = class extends ViewportTextureNode {
  constructor(uvNode = viewportUV, levelNode = null) {
    if (_sharedFramebuffer === null) {
      _sharedFramebuffer = new FramebufferTexture();
    }
    super(uvNode, levelNode, _sharedFramebuffer);
  }
  updateReference() {
    return this;
  }
};
ViewportSharedTextureNode.type = registerNode("ViewportSharedTexture", ViewportSharedTextureNode);
var viewportSharedTexture = nodeProxy(ViewportSharedTextureNode);
var _size$7 = new Vector22();
var PassTextureNode = class extends TextureNode {
  constructor(passNode, texture2) {
    super(texture2);
    this.passNode = passNode;
    this.setUpdateMatrix(false);
  }
  setup(builder) {
    if (builder.object.isQuadMesh) this.passNode.build(builder);
    return super.setup(builder);
  }
  clone() {
    return new this.constructor(this.passNode, this.value);
  }
};
PassTextureNode.type = registerNode("PassTexture", PassTextureNode);
var PassMultipleTextureNode = class extends PassTextureNode {
  constructor(passNode, textureName, previousTexture = false) {
    super(passNode, null);
    this.textureName = textureName;
    this.previousTexture = previousTexture;
  }
  updateTexture() {
    this.value = this.previousTexture ? this.passNode.getPreviousTexture(this.textureName) : this.passNode.getTexture(this.textureName);
  }
  setup(builder) {
    this.updateTexture();
    return super.setup(builder);
  }
  clone() {
    return new this.constructor(this.passNode, this.textureName, this.previousTexture);
  }
};
PassMultipleTextureNode.type = registerNode("PassMultipleTexture", PassMultipleTextureNode);
var PassNode = class _PassNode extends TempNode {
  constructor(scope, scene3, camera3, options = {}) {
    super("vec4");
    this.scope = scope;
    this.scene = scene3;
    this.camera = camera3;
    this.options = options;
    this._pixelRatio = 1;
    this._width = 1;
    this._height = 1;
    const depthTexture = new DepthTexture2();
    depthTexture.isRenderTargetTexture = true;
    depthTexture.name = "depth";
    const renderTarget = new RenderTarget2(this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType2, ...options });
    renderTarget.texture.name = "output";
    renderTarget.depthTexture = depthTexture;
    this.renderTarget = renderTarget;
    this.updateBeforeType = NodeUpdateType.FRAME;
    this._textures = {
      output: renderTarget.texture,
      depth: depthTexture
    };
    this._textureNodes = {};
    this._linearDepthNodes = {};
    this._viewZNodes = {};
    this._previousTextures = {};
    this._previousTextureNodes = {};
    this._cameraNear = uniform(0);
    this._cameraFar = uniform(0);
    this._mrt = null;
    this.isPassNode = true;
  }
  setMRT(mrt2) {
    this._mrt = mrt2;
    return this;
  }
  getMRT() {
    return this._mrt;
  }
  isGlobal() {
    return true;
  }
  getTexture(name) {
    let texture2 = this._textures[name];
    if (texture2 === void 0) {
      const refTexture = this.renderTarget.texture;
      texture2 = refTexture.clone();
      texture2.isRenderTargetTexture = true;
      texture2.name = name;
      this._textures[name] = texture2;
      this.renderTarget.textures.push(texture2);
    }
    return texture2;
  }
  getPreviousTexture(name) {
    let texture2 = this._previousTextures[name];
    if (texture2 === void 0) {
      texture2 = this.getTexture(name).clone();
      texture2.isRenderTargetTexture = true;
      this._previousTextures[name] = texture2;
    }
    return texture2;
  }
  toggleTexture(name) {
    const prevTexture = this._previousTextures[name];
    if (prevTexture !== void 0) {
      const texture2 = this._textures[name];
      const index7 = this.renderTarget.textures.indexOf(texture2);
      this.renderTarget.textures[index7] = prevTexture;
      this._textures[name] = prevTexture;
      this._previousTextures[name] = texture2;
      this._textureNodes[name].updateTexture();
      this._previousTextureNodes[name].updateTexture();
    }
  }
  getTextureNode(name = "output") {
    let textureNode = this._textureNodes[name];
    if (textureNode === void 0) {
      this._textureNodes[name] = textureNode = nodeObject(new PassMultipleTextureNode(this, name));
      this._textureNodes[name].updateTexture();
    }
    return textureNode;
  }
  getPreviousTextureNode(name = "output") {
    let textureNode = this._previousTextureNodes[name];
    if (textureNode === void 0) {
      if (this._textureNodes[name] === void 0) this.getTextureNode(name);
      this._previousTextureNodes[name] = textureNode = nodeObject(new PassMultipleTextureNode(this, name, true));
      this._previousTextureNodes[name].updateTexture();
    }
    return textureNode;
  }
  getViewZNode(name = "depth") {
    let viewZNode = this._viewZNodes[name];
    if (viewZNode === void 0) {
      const cameraNear2 = this._cameraNear;
      const cameraFar2 = this._cameraFar;
      this._viewZNodes[name] = viewZNode = perspectiveDepthToViewZ(this.getTextureNode(name), cameraNear2, cameraFar2);
    }
    return viewZNode;
  }
  getLinearDepthNode(name = "depth") {
    let linearDepthNode = this._linearDepthNodes[name];
    if (linearDepthNode === void 0) {
      const cameraNear2 = this._cameraNear;
      const cameraFar2 = this._cameraFar;
      const viewZNode = this.getViewZNode(name);
      this._linearDepthNodes[name] = linearDepthNode = viewZToOrthographicDepth(viewZNode, cameraNear2, cameraFar2);
    }
    return linearDepthNode;
  }
  setup({ renderer: renderer3 }) {
    this.renderTarget.samples = this.options.samples === void 0 ? renderer3.samples : this.options.samples;
    if (renderer3.backend.isWebGLBackend === true) {
      this.renderTarget.samples = 0;
    }
    this.renderTarget.depthTexture.isMultisampleRenderTargetTexture = this.renderTarget.samples > 1;
    return this.scope === _PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const { scene: scene3, camera: camera3 } = this;
    this._pixelRatio = renderer3.getPixelRatio();
    const size = renderer3.getSize(_size$7);
    this.setSize(size.width, size.height);
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    this._cameraNear.value = camera3.near;
    this._cameraFar.value = camera3.far;
    for (const name in this._previousTextures) {
      this.toggleTexture(name);
    }
    renderer3.setRenderTarget(this.renderTarget);
    renderer3.setMRT(this._mrt);
    renderer3.render(scene3, camera3);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
  }
  setSize(width, height) {
    this._width = width;
    this._height = height;
    const effectiveWidth = this._width * this._pixelRatio;
    const effectiveHeight = this._height * this._pixelRatio;
    this.renderTarget.setSize(effectiveWidth, effectiveHeight);
  }
  setPixelRatio(pixelRatio) {
    this._pixelRatio = pixelRatio;
    this.setSize(this._width, this._height);
  }
  dispose() {
    this.renderTarget.dispose();
  }
};
PassNode.COLOR = "color";
PassNode.DEPTH = "depth";
PassNode.type = registerNode("Pass", PassNode);
var passTexture = (pass, texture2) => nodeObject(new PassTextureNode(pass, texture2));
var _quadMesh1 = new QuadMesh();
var _quadMesh2 = new QuadMesh();
var GaussianBlurNode = class extends TempNode {
  constructor(textureNode, directionNode = null, sigma = 2) {
    super("vec4");
    this.textureNode = textureNode;
    this.directionNode = directionNode;
    this.sigma = sigma;
    this._invSize = uniform(new Vector22());
    this._passDirection = uniform(new Vector22());
    this._horizontalRT = new RenderTarget2();
    this._horizontalRT.texture.name = "GaussianBlurNode.horizontal";
    this._verticalRT = new RenderTarget2();
    this._verticalRT.texture.name = "GaussianBlurNode.vertical";
    this._textureNode = passTexture(this, this._verticalRT.texture);
    this.updateBeforeType = NodeUpdateType.RENDER;
    this.resolution = new Vector22(1, 1);
  }
  setSize(width, height) {
    width = Math.max(Math.round(width * this.resolution.x), 1);
    height = Math.max(Math.round(height * this.resolution.y), 1);
    this._invSize.value.set(1 / width, 1 / height);
    this._horizontalRT.setSize(width, height);
    this._verticalRT.setSize(width, height);
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const textureNode = this.textureNode;
    const map4 = textureNode.value;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    const currentTexture = textureNode.value;
    _quadMesh1.material = this._material;
    _quadMesh2.material = this._material;
    this.setSize(map4.image.width, map4.image.height);
    const textureType = map4.type;
    this._horizontalRT.texture.type = textureType;
    this._verticalRT.texture.type = textureType;
    renderer3.setMRT(null);
    renderer3.setRenderTarget(this._horizontalRT);
    this._passDirection.value.set(1, 0);
    _quadMesh1.render(renderer3);
    textureNode.value = this._horizontalRT.texture;
    renderer3.setRenderTarget(this._verticalRT);
    this._passDirection.value.set(0, 1);
    _quadMesh2.render(renderer3);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
    textureNode.value = currentTexture;
  }
  getTextureNode() {
    return this._textureNode;
  }
  setup(builder) {
    const textureNode = this.textureNode;
    if (textureNode.isTextureNode !== true) {
      console.error("GaussianBlurNode requires a TextureNode.");
      return vec4();
    }
    const uvNode = textureNode.uvNode || uv();
    const directionNode = vec2(this.directionNode || 1);
    const sampleTexture = (uv2) => textureNode.uv(uv2);
    const blur4 = Fn(() => {
      const kernelSize = 3 + 2 * this.sigma;
      const gaussianCoefficients = this._getCoefficients(kernelSize);
      const invSize = this._invSize;
      const direction2 = directionNode.mul(this._passDirection);
      const weightSum = float(gaussianCoefficients[0]).toVar();
      const diffuseSum = vec4(sampleTexture(uvNode).mul(weightSum)).toVar();
      for (let i2 = 1; i2 < kernelSize; i2++) {
        const x2 = float(i2);
        const w4 = float(gaussianCoefficients[i2]);
        const uvOffset = vec2(direction2.mul(invSize.mul(x2))).toVar();
        const sample1 = vec4(sampleTexture(uvNode.add(uvOffset)));
        const sample2 = vec4(sampleTexture(uvNode.sub(uvOffset)));
        diffuseSum.addAssign(sample1.add(sample2).mul(w4));
        weightSum.addAssign(mul(2, w4));
      }
      return diffuseSum.div(weightSum);
    });
    const material = this._material || (this._material = new NodeMaterial());
    material.fragmentNode = blur4().context(builder.getSharedContext());
    material.name = "Gaussian_blur";
    material.needsUpdate = true;
    const properties = builder.getNodeProperties(this);
    properties.textureNode = textureNode;
    return this._textureNode;
  }
  dispose() {
    this._horizontalRT.dispose();
    this._verticalRT.dispose();
  }
  _getCoefficients(kernelRadius) {
    const coefficients = [];
    for (let i2 = 0; i2 < kernelRadius; i2++) {
      coefficients.push(0.39894 * Math.exp(-0.5 * i2 * i2 / (kernelRadius * kernelRadius)) / kernelRadius);
    }
    return coefficients;
  }
};
GaussianBlurNode.type = registerNode("GaussianBlur", GaussianBlurNode);
var _size$6 = new Vector22();
var _quadMeshComp = new QuadMesh();
var grayscale = Fn(([color3]) => {
  return luminance(color3.rgb);
});
var saturation = Fn(([color3, adjustment = float(1)]) => {
  return adjustment.mix(luminance(color3.rgb), color3.rgb);
});
var vibrance = Fn(([color3, adjustment = float(1)]) => {
  const average = add3(color3.r, color3.g, color3.b).div(3);
  const mx = color3.r.max(color3.g.max(color3.b));
  const amt = mx.sub(average).mul(adjustment).mul(-3);
  return mix(color3.rgb, mx, amt);
});
var hue2 = Fn(([color3, adjustment = float(1)]) => {
  const k2 = vec3(0.57735, 0.57735, 0.57735);
  const cosAngle = adjustment.cos();
  return vec3(color3.rgb.mul(cosAngle).add(k2.cross(color3.rgb).mul(adjustment.sin()).add(k2.mul(dot(k2, color3.rgb).mul(cosAngle.oneMinus())))));
});
var _luminanceCoefficients = new Vector32();
var luminance = (color3, luminanceCoefficients = vec3(...ColorManagement2.getLuminanceCoefficients(_luminanceCoefficients))) => dot(color3, luminanceCoefficients);
var _quadMesh$4 = new QuadMesh();
var SobelOperatorNode = class extends TempNode {
  constructor(textureNode) {
    super();
    this.textureNode = textureNode;
    this.updateBeforeType = NodeUpdateType.RENDER;
    this._invSize = uniform(new Vector22());
  }
  updateBefore() {
    const map4 = this.textureNode.value;
    this._invSize.value.set(1 / map4.image.width, 1 / map4.image.height);
  }
  setup() {
    const { textureNode } = this;
    const uvNode = textureNode.uvNode || uv();
    const sampleTexture = (uv2) => textureNode.uv(uv2);
    const sobel = Fn(() => {
      const texel = this._invSize;
      const Gx = mat3(-1, -2, -1, 0, 0, 0, 1, 2, 1);
      const Gy = mat3(-1, 0, 1, -2, 0, 2, -1, 0, 1);
      const tx0y0 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(-1, -1)))).xyz);
      const tx0y1 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(-1, 0)))).xyz);
      const tx0y2 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(-1, 1)))).xyz);
      const tx1y0 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(0, -1)))).xyz);
      const tx1y1 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(0, 0)))).xyz);
      const tx1y2 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(0, 1)))).xyz);
      const tx2y0 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(1, -1)))).xyz);
      const tx2y1 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(1, 0)))).xyz);
      const tx2y2 = luminance(sampleTexture(uvNode.add(texel.mul(vec2(1, 1)))).xyz);
      const valueGx = add3(
        Gx[0][0].mul(tx0y0),
        Gx[1][0].mul(tx1y0),
        Gx[2][0].mul(tx2y0),
        Gx[0][1].mul(tx0y1),
        Gx[1][1].mul(tx1y1),
        Gx[2][1].mul(tx2y1),
        Gx[0][2].mul(tx0y2),
        Gx[1][2].mul(tx1y2),
        Gx[2][2].mul(tx2y2)
      );
      const valueGy = add3(
        Gy[0][0].mul(tx0y0),
        Gy[1][0].mul(tx1y0),
        Gy[2][0].mul(tx2y0),
        Gy[0][1].mul(tx0y1),
        Gy[1][1].mul(tx1y1),
        Gy[2][1].mul(tx2y1),
        Gy[0][2].mul(tx0y2),
        Gy[1][2].mul(tx1y2),
        Gy[2][2].mul(tx2y2)
      );
      const G2 = valueGx.mul(valueGx).add(valueGy.mul(valueGy)).sqrt();
      return vec4(vec3(G2), 1);
    });
    const outputNode = sobel();
    return outputNode;
  }
};
SobelOperatorNode.type = registerNode("SobelOperator", SobelOperatorNode);
var DepthOfFieldNode = class extends TempNode {
  constructor(textureNode, viewZNode, focusNode, apertureNode, maxblurNode) {
    super();
    this.textureNode = textureNode;
    this.viewZNode = viewZNode;
    this.focusNode = focusNode;
    this.apertureNode = apertureNode;
    this.maxblurNode = maxblurNode;
    this._aspect = uniform(0);
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  updateBefore() {
    const map4 = this.textureNode.value;
    this._aspect.value = map4.image.width / map4.image.height;
  }
  setup() {
    const textureNode = this.textureNode;
    const uvNode = textureNode.uvNode || uv();
    const sampleTexture = (uv2) => textureNode.uv(uv2);
    const dof = Fn(() => {
      const aspectcorrect = vec2(1, this._aspect);
      const factor = this.focusNode.add(this.viewZNode);
      const dofblur = vec2(clamp2(factor.mul(this.apertureNode), this.maxblurNode.negate(), this.maxblurNode));
      const dofblur9 = dofblur.mul(0.9);
      const dofblur7 = dofblur.mul(0.7);
      const dofblur4 = dofblur.mul(0.4);
      let col = vec4(0);
      col = col.add(sampleTexture(uvNode));
      col = col.add(sampleTexture(uvNode.add(vec2(0, 0.4).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.15, 0.37).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.29, 0.29).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.37, 0.15).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.4, 0).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.37, -0.15).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.29, -0.29).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.15, -0.37).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0, -0.4).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.15, 0.37).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.29, 0.29).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.37, 0.15).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.4, 0).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.37, -0.15).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.29, -0.29).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.15, -0.37).mul(aspectcorrect).mul(dofblur))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.15, 0.37).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.37, 0.15).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.37, -0.15).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.15, -0.37).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.15, 0.37).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.37, 0.15).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.37, -0.15).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.15, -0.37).mul(aspectcorrect).mul(dofblur9))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.29, 0.29).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.4, 0).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.29, -0.29).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(0, -0.4).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.29, 0.29).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.4, 0).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.29, -0.29).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(0, 0.4).mul(aspectcorrect).mul(dofblur7))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.29, 0.29).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.4, 0).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(0.29, -0.29).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(0, -0.4).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.29, 0.29).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.4, 0).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(-0.29, -0.29).mul(aspectcorrect).mul(dofblur4))));
      col = col.add(sampleTexture(uvNode.add(vec2(0, 0.4).mul(aspectcorrect).mul(dofblur4))));
      col = col.div(41);
      col.a = 1;
      return vec4(col);
    });
    const outputNode = dof();
    return outputNode;
  }
};
DepthOfFieldNode.type = registerNode("DepthOfField", DepthOfFieldNode);
var DotScreenNode = class extends TempNode {
  constructor(inputNode, center = new Vector22(0.5, 0.5), angle2 = 1.57, scale2 = 1) {
    super("vec4");
    this.inputNode = inputNode;
    this.center = uniform(center);
    this.angle = uniform(angle2);
    this.scale = uniform(scale2);
  }
  setup() {
    const inputNode = this.inputNode;
    const pattern = Fn(() => {
      const s2 = sin3(this.angle);
      const c4 = cos3(this.angle);
      const tex = uv().mul(viewportResolution).sub(this.center);
      const point2 = vec2(c4.mul(tex.x).sub(s2.mul(tex.y)), s2.mul(tex.x).add(c4.mul(tex.y))).mul(this.scale);
      return sin3(point2.x).mul(sin3(point2.y)).mul(4);
    });
    const dotScreen = Fn(() => {
      const color3 = inputNode;
      const average = add3(color3.r, color3.g, color3.b).div(3);
      return vec4(vec3(average.mul(10).sub(5).add(pattern())), color3.a);
    });
    const outputNode = dotScreen();
    return outputNode;
  }
};
DotScreenNode.type = registerNode("DotScreen", DotScreenNode);
var RGBShiftNode = class extends TempNode {
  constructor(textureNode, amount = 5e-3, angle2 = 0) {
    super("vec4");
    this.textureNode = textureNode;
    this.amount = uniform(amount);
    this.angle = uniform(angle2);
  }
  setup() {
    const { textureNode } = this;
    const uvNode = textureNode.uvNode || uv();
    const sampleTexture = (uv2) => textureNode.uv(uv2);
    const rgbShift = Fn(() => {
      const offset = vec2(cos3(this.angle), sin3(this.angle)).mul(this.amount);
      const cr = sampleTexture(uvNode.add(offset));
      const cga = sampleTexture(uvNode);
      const cb = sampleTexture(uvNode.sub(offset));
      return vec4(cr.r, cga.g, cb.b, cga.a);
    });
    return rgbShift();
  }
};
RGBShiftNode.type = registerNode("RGBShift", RGBShiftNode);
var FilmNode = class extends TempNode {
  constructor(inputNode, intensityNode = null, uvNode = null) {
    super();
    this.inputNode = inputNode;
    this.intensityNode = intensityNode;
    this.uvNode = uvNode;
  }
  setup() {
    const uvNode = this.uvNode || uv();
    const film2 = Fn(() => {
      const base = this.inputNode.rgb;
      const noise = rand(fract(uvNode.add(timerLocal())));
      let color3 = base.add(base.mul(clamp2(noise.add(0.1), 0, 1)));
      if (this.intensityNode !== null) {
        color3 = mix(base, color3, this.intensityNode);
      }
      return vec4(color3, this.inputNode.a);
    });
    const outputNode = film2();
    return outputNode;
  }
};
FilmNode.type = registerNode("Film", FilmNode);
var film = nodeProxy(FilmNode);
var Lut3DNode = class extends TempNode {
  constructor(inputNode, lutNode, size, intensityNode) {
    super();
    this.inputNode = inputNode;
    this.lutNode = lutNode;
    this.size = uniform(size);
    this.intensityNode = intensityNode;
  }
  setup() {
    const { inputNode, lutNode } = this;
    const sampleLut = (uv2) => lutNode.uv(uv2);
    const lut3D = Fn(() => {
      const base = inputNode;
      const pixelWidth = float(1).div(this.size);
      const halfPixelWidth = float(0.5).div(this.size);
      const uvw = vec3(halfPixelWidth).add(base.rgb.mul(float(1).sub(pixelWidth)));
      const lutValue = vec4(sampleLut(uvw).rgb, base.a);
      return vec4(mix(base, lutValue, this.intensityNode));
    });
    const outputNode = lut3D();
    return outputNode;
  }
};
Lut3DNode.type = registerNode("Lut3D", Lut3DNode);
var _quadMesh$3 = new QuadMesh();
var _currentClearColor$1 = new Color3();
var _size$5 = new Vector22();
var GTAONode = class extends TempNode {
  constructor(depthNode, normalNode, camera3) {
    super();
    this.depthNode = depthNode;
    this.normalNode = normalNode;
    this.radius = uniform(0.25);
    this.resolution = uniform(new Vector22());
    this.thickness = uniform(1);
    this.distanceExponent = uniform(1);
    this.distanceFallOff = uniform(1);
    this.scale = uniform(1);
    this.noiseNode = texture(generateMagicSquareNoise());
    this.cameraProjectionMatrix = uniform(camera3.projectionMatrix);
    this.cameraProjectionMatrixInverse = uniform(camera3.projectionMatrixInverse);
    this.SAMPLES = uniform(16);
    this._aoRenderTarget = new RenderTarget2();
    this._aoRenderTarget.texture.name = "GTAONode.AO";
    this._material = null;
    this._textureNode = passTexture(this, this._aoRenderTarget.texture);
    this.updateBeforeType = NodeUpdateType.FRAME;
  }
  getTextureNode() {
    return this._textureNode;
  }
  setSize(width, height) {
    this.resolution.value.set(width, height);
    this._aoRenderTarget.setSize(width, height);
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const size = renderer3.getDrawingBufferSize(_size$5);
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    renderer3.getClearColor(_currentClearColor$1);
    const currentClearAlpha = renderer3.getClearAlpha();
    _quadMesh$3.material = this._material;
    this.setSize(size.width, size.height);
    renderer3.setMRT(null);
    renderer3.setClearColor(16777215, 1);
    renderer3.setRenderTarget(this._aoRenderTarget);
    _quadMesh$3.render(renderer3);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
    renderer3.setClearColor(_currentClearColor$1, currentClearAlpha);
  }
  setup(builder) {
    const uvNode = uv();
    const sampleDepth = (uv2) => this.depthNode.uv(uv2).x;
    const sampleNoise = (uv2) => this.noiseNode.uv(uv2);
    const getSceneUvAndDepth = Fn(([sampleViewPos]) => {
      const sampleClipPos = this.cameraProjectionMatrix.mul(vec4(sampleViewPos, 1));
      let sampleUv = sampleClipPos.xy.div(sampleClipPos.w).mul(0.5).add(0.5).toVar();
      sampleUv = vec2(sampleUv.x, sampleUv.y.oneMinus());
      const sampleSceneDepth = sampleDepth(sampleUv);
      return vec3(sampleUv, sampleSceneDepth);
    });
    const getViewPosition = Fn(([screenPosition, depth2]) => {
      screenPosition = vec2(screenPosition.x, screenPosition.y.oneMinus()).mul(2).sub(1);
      const clipSpacePosition = vec4(vec3(screenPosition, depth2), 1);
      const viewSpacePosition = vec4(this.cameraProjectionMatrixInverse.mul(clipSpacePosition));
      return viewSpacePosition.xyz.div(viewSpacePosition.w);
    });
    const ao = Fn(() => {
      const depth2 = sampleDepth(uvNode);
      depth2.greaterThanEqual(1).discard();
      const viewPosition = getViewPosition(uvNode, depth2);
      const viewNormal = this.normalNode.rgb.normalize();
      const radiusToUse = this.radius;
      const noiseResolution = textureSize(this.noiseNode, 0);
      let noiseUv = vec2(uvNode.x, uvNode.y.oneMinus());
      noiseUv = noiseUv.mul(this.resolution.div(noiseResolution));
      const noiseTexel = sampleNoise(noiseUv);
      const randomVec = noiseTexel.xyz.mul(2).sub(1);
      const tangent = vec3(randomVec.xy, 0).normalize();
      const bitangent = vec3(tangent.y.mul(-1), tangent.x, 0);
      const kernelMatrix = mat3(tangent, bitangent, vec3(0, 0, 1));
      const DIRECTIONS = this.SAMPLES.lessThan(30).select(3, 5);
      const STEPS = add3(this.SAMPLES, DIRECTIONS.sub(1)).div(DIRECTIONS);
      const ao2 = float(0).toVar();
      Loop({ start: int(0), end: DIRECTIONS, type: "int", condition: "<" }, ({ i: i2 }) => {
        const angle2 = float(i2).div(float(DIRECTIONS)).mul(PI);
        const sampleDir = vec4(cos3(angle2), sin3(angle2), 0, add3(0.5, mul(0.5, noiseTexel.w)));
        sampleDir.xyz = normalize3(kernelMatrix.mul(sampleDir.xyz));
        const viewDir = normalize3(viewPosition.xyz.negate());
        const sliceBitangent = normalize3(cross2(sampleDir.xyz, viewDir));
        const sliceTangent = cross2(sliceBitangent, viewDir);
        const normalInSlice = normalize3(viewNormal.sub(sliceBitangent.mul(dot(viewNormal, sliceBitangent))));
        const tangentToNormalInSlice = cross2(normalInSlice, sliceBitangent);
        const cosHorizons = vec2(dot(viewDir, tangentToNormalInSlice), dot(viewDir, tangentToNormalInSlice.negate())).toVar();
        Loop({ end: STEPS, type: "int", name: "j", condition: "<" }, ({ j: j2 }) => {
          const sampleViewOffset = sampleDir.xyz.mul(radiusToUse).mul(sampleDir.w).mul(pow4(div(float(j2).add(1), float(STEPS)), this.distanceExponent));
          const sampleSceneUvDepthX = getSceneUvAndDepth(viewPosition.add(sampleViewOffset));
          const sampleSceneViewPositionX = getViewPosition(sampleSceneUvDepthX.xy, sampleSceneUvDepthX.z);
          const viewDeltaX = sampleSceneViewPositionX.sub(viewPosition);
          If(abs2(viewDeltaX.z).lessThan(this.thickness), () => {
            const sampleCosHorizon = dot(viewDir, normalize3(viewDeltaX));
            cosHorizons.x.addAssign(max$1(0, mul(sampleCosHorizon.sub(cosHorizons.x), mix(1, float(2).div(float(j2).add(2)), this.distanceFallOff))));
          });
          const sampleSceneUvDepthY = getSceneUvAndDepth(viewPosition.sub(sampleViewOffset));
          const sampleSceneViewPositionY = getViewPosition(sampleSceneUvDepthY.xy, sampleSceneUvDepthY.z);
          const viewDeltaY = sampleSceneViewPositionY.sub(viewPosition);
          If(abs2(viewDeltaY.z).lessThan(this.thickness), () => {
            const sampleCosHorizon = dot(viewDir, normalize3(viewDeltaY));
            cosHorizons.y.addAssign(max$1(0, mul(sampleCosHorizon.sub(cosHorizons.y), mix(1, float(2).div(float(j2).add(2)), this.distanceFallOff))));
          });
        });
        const sinHorizons = sqrt4(sub(1, cosHorizons.mul(cosHorizons)));
        const nx = dot(normalInSlice, sliceTangent);
        const ny = dot(normalInSlice, viewDir);
        const nxb = mul(0.5, acos2(cosHorizons.y).sub(acos2(cosHorizons.x)).add(sinHorizons.x.mul(cosHorizons.x).sub(sinHorizons.y.mul(cosHorizons.y))));
        const nyb = mul(0.5, sub(2, cosHorizons.x.mul(cosHorizons.x)).sub(cosHorizons.y.mul(cosHorizons.y)));
        const occlusion = nx.mul(nxb).add(ny.mul(nyb));
        ao2.addAssign(occlusion);
      });
      ao2.assign(clamp2(ao2.div(DIRECTIONS), 0, 1));
      ao2.assign(pow4(ao2, this.scale));
      return vec4(vec3(ao2), 1);
    });
    const material = this._material || (this._material = new NodeMaterial());
    material.fragmentNode = ao().context(builder.getSharedContext());
    material.name = "GTAO";
    material.needsUpdate = true;
    return this._textureNode;
  }
  dispose() {
    this._aoRenderTarget.dispose();
  }
};
GTAONode.type = registerNode("GTAO", GTAONode);
function generateMagicSquareNoise(size = 5) {
  const noiseSize = Math.floor(size) % 2 === 0 ? Math.floor(size) + 1 : Math.floor(size);
  const magicSquare = generateMagicSquare(noiseSize);
  const noiseSquareSize = magicSquare.length;
  const data = new Uint8Array(noiseSquareSize * 4);
  for (let inx = 0; inx < noiseSquareSize; ++inx) {
    const iAng = magicSquare[inx];
    const angle2 = 2 * Math.PI * iAng / noiseSquareSize;
    const randomVec = new Vector32(
      Math.cos(angle2),
      Math.sin(angle2),
      0
    ).normalize();
    data[inx * 4] = (randomVec.x * 0.5 + 0.5) * 255;
    data[inx * 4 + 1] = (randomVec.y * 0.5 + 0.5) * 255;
    data[inx * 4 + 2] = 127;
    data[inx * 4 + 3] = 255;
  }
  const noiseTexture = new DataTexture(data, noiseSize, noiseSize);
  noiseTexture.wrapS = RepeatWrapping2;
  noiseTexture.wrapT = RepeatWrapping2;
  noiseTexture.needsUpdate = true;
  return noiseTexture;
}
function generateMagicSquare(size) {
  const noiseSize = Math.floor(size) % 2 === 0 ? Math.floor(size) + 1 : Math.floor(size);
  const noiseSquareSize = noiseSize * noiseSize;
  const magicSquare = Array(noiseSquareSize).fill(0);
  let i2 = Math.floor(noiseSize / 2);
  let j2 = noiseSize - 1;
  for (let num = 1; num <= noiseSquareSize; ) {
    if (i2 === -1 && j2 === noiseSize) {
      j2 = noiseSize - 2;
      i2 = 0;
    } else {
      if (j2 === noiseSize) {
        j2 = 0;
      }
      if (i2 < 0) {
        i2 = noiseSize - 1;
      }
    }
    if (magicSquare[i2 * noiseSize + j2] !== 0) {
      j2 -= 2;
      i2++;
      continue;
    } else {
      magicSquare[i2 * noiseSize + j2] = num++;
    }
    j2++;
    i2--;
  }
  return magicSquare;
}
var DenoiseNode = class extends TempNode {
  constructor(textureNode, depthNode, normalNode, noiseNode, camera3) {
    super();
    this.textureNode = textureNode;
    this.depthNode = depthNode;
    this.normalNode = normalNode;
    this.noiseNode = noiseNode;
    this.cameraProjectionMatrixInverse = uniform(camera3.projectionMatrixInverse);
    this.lumaPhi = uniform(5);
    this.depthPhi = uniform(5);
    this.normalPhi = uniform(5);
    this.radius = uniform(5);
    this.index = uniform(0);
    this._resolution = uniform(new Vector22());
    this._sampleVectors = uniformArray(generatePdSamplePointInitializer(16, 2, 1));
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  updateBefore() {
    const map4 = this.textureNode.value;
    this._resolution.value.set(map4.image.width, map4.image.height);
  }
  setup() {
    const uvNode = uv();
    const sampleTexture = (uv2) => this.textureNode.uv(uv2);
    const sampleDepth = (uv2) => this.depthNode.uv(uv2).x;
    const sampleNormal = (uv2) => this.normalNode.uv(uv2);
    const sampleNoise = (uv2) => this.noiseNode.uv(uv2);
    const getViewPosition = Fn(([screenPosition, depth2]) => {
      screenPosition = vec2(screenPosition.x, screenPosition.y.oneMinus()).mul(2).sub(1);
      const clipSpacePosition = vec4(vec3(screenPosition, depth2), 1);
      const viewSpacePosition = vec4(this.cameraProjectionMatrixInverse.mul(clipSpacePosition));
      return viewSpacePosition.xyz.div(viewSpacePosition.w);
    });
    const denoiseSample = Fn(([center, viewNormal, viewPosition, sampleUv]) => {
      const texel = sampleTexture(sampleUv);
      const depth2 = sampleDepth(sampleUv);
      const normal2 = sampleNormal(sampleUv).rgb.normalize();
      const neighborColor = texel.rgb;
      const viewPos = getViewPosition(sampleUv, depth2);
      const normalDiff = dot(viewNormal, normal2).toVar();
      const normalSimilarity = pow4(max$1(normalDiff, 0), this.normalPhi).toVar();
      const lumaDiff = abs2(luminance(neighborColor).sub(luminance(center))).toVar();
      const lumaSimilarity = max$1(float(1).sub(lumaDiff.div(this.lumaPhi)), 0).toVar();
      const depthDiff = abs2(dot(viewPosition.sub(viewPos), viewNormal)).toVar();
      const depthSimilarity = max$1(float(1).sub(depthDiff.div(this.depthPhi)), 0);
      const w4 = lumaSimilarity.mul(depthSimilarity).mul(normalSimilarity);
      return vec4(neighborColor.mul(w4), w4);
    });
    const denoise = Fn(([uvNode2]) => {
      const depth2 = sampleDepth(uvNode2);
      const viewNormal = sampleNormal(uvNode2).rgb.normalize();
      const texel = sampleTexture(uvNode2);
      If(depth2.greaterThanEqual(1).or(dot(viewNormal, viewNormal).equal(0)), () => {
        return texel;
      });
      const center = vec3(texel.rgb);
      const viewPosition = getViewPosition(uvNode2, depth2);
      const noiseResolution = textureSize(this.noiseNode, 0);
      let noiseUv = vec2(uvNode2.x, uvNode2.y.oneMinus());
      noiseUv = noiseUv.mul(this._resolution.div(noiseResolution));
      const noiseTexel = sampleNoise(noiseUv);
      const x2 = sin3(noiseTexel.element(this.index.mod(4).mul(2).mul(PI)));
      const y2 = cos3(noiseTexel.element(this.index.mod(4).mul(2).mul(PI)));
      const noiseVec = vec2(x2, y2);
      const rotationMatrix = mat2(noiseVec.x, noiseVec.y.negate(), noiseVec.x, noiseVec.y);
      const totalWeight = float(1).toVar();
      const denoised = vec3(texel.rgb).toVar();
      Loop({ start: int(0), end: int(16), type: "int", condition: "<" }, ({ i: i2 }) => {
        const sampleDir = this._sampleVectors.element(i2).toVar();
        const offset = rotationMatrix.mul(sampleDir.xy.mul(float(1).add(sampleDir.z.mul(this.radius.sub(1))))).div(this._resolution).toVar();
        const sampleUv = uvNode2.add(offset).toVar();
        const result = denoiseSample(center, viewNormal, viewPosition, sampleUv);
        denoised.addAssign(result.xyz);
        totalWeight.addAssign(result.w);
      });
      If(totalWeight.greaterThan(float(0)), () => {
        denoised.divAssign(totalWeight);
      });
      return vec4(denoised, texel.a);
    }).setLayout({
      name: "denoise",
      type: "vec4",
      inputs: [
        { name: "uv", type: "vec2" }
      ]
    });
    const output2 = Fn(() => {
      return denoise(uvNode);
    });
    const outputNode = output2();
    return outputNode;
  }
};
DenoiseNode.type = registerNode("Denoise", DenoiseNode);
function generatePdSamplePointInitializer(samples, rings, radiusExponent) {
  const poissonDisk = generateDenoiseSamples(samples, rings, radiusExponent);
  const array3 = [];
  for (let i2 = 0; i2 < samples; i2++) {
    const sample = poissonDisk[i2];
    array3.push(sample);
  }
  return array3;
}
function generateDenoiseSamples(numSamples, numRings, radiusExponent) {
  const samples = [];
  for (let i2 = 0; i2 < numSamples; i2++) {
    const angle2 = 2 * Math.PI * numRings * i2 / numSamples;
    const radius = Math.pow(i2 / (numSamples - 1), radiusExponent);
    samples.push(new Vector32(Math.cos(angle2), Math.sin(angle2), radius));
  }
  return samples;
}
var FXAANode = class extends TempNode {
  constructor(textureNode) {
    super();
    this.textureNode = textureNode;
    this.updateBeforeType = NodeUpdateType.RENDER;
    this._invSize = uniform(new Vector22());
  }
  updateBefore() {
    const map4 = this.textureNode.value;
    this._invSize.value.set(1 / map4.image.width, 1 / map4.image.height);
  }
  setup() {
    const textureNode = this.textureNode.bias(-100);
    const uvNode = textureNode.uvNode || uv();
    const FxaaTexTop = (p2) => textureNode.uv(p2);
    const FxaaTexOff = (p2, o2, r2) => textureNode.uv(p2.add(o2.mul(r2)));
    const NUM_SAMPLES = int(5);
    const contrast = Fn(([a_immutable, b_immutable]) => {
      const b = vec4(b_immutable).toVar();
      const a2 = vec4(a_immutable).toVar();
      const diff = vec4(abs2(a2.sub(b))).toVar();
      return max$1(max$1(max$1(diff.r, diff.g), diff.b), diff.a);
    });
    const FxaaPixelShader = Fn(([uv2, fxaaQualityRcpFrame, fxaaQualityEdgeThreshold, fxaaQualityinvEdgeThreshold]) => {
      const rgbaM = FxaaTexTop(uv2).toVar();
      const rgbaS = FxaaTexOff(uv2, vec2(0, -1), fxaaQualityRcpFrame.xy).toVar();
      const rgbaE = FxaaTexOff(uv2, vec2(1, 0), fxaaQualityRcpFrame.xy).toVar();
      const rgbaN = FxaaTexOff(uv2, vec2(0, 1), fxaaQualityRcpFrame.xy).toVar();
      const rgbaW = FxaaTexOff(uv2, vec2(-1, 0), fxaaQualityRcpFrame.xy).toVar();
      const contrastN = contrast(rgbaM, rgbaN).toVar();
      const contrastS = contrast(rgbaM, rgbaS).toVar();
      const contrastE = contrast(rgbaM, rgbaE).toVar();
      const contrastW = contrast(rgbaM, rgbaW).toVar();
      const maxValue = max$1(contrastN, max$1(contrastS, max$1(contrastE, contrastW))).toVar();
      If(maxValue.lessThan(fxaaQualityEdgeThreshold), () => {
        return rgbaM;
      });
      const relativeVContrast = sub(contrastN.add(contrastS), contrastE.add(contrastW)).toVar();
      relativeVContrast.mulAssign(fxaaQualityinvEdgeThreshold);
      If(abs2(relativeVContrast).lessThan(0.3), () => {
        const x2 = contrastE.greaterThan(contrastW).select(1, -1).toVar();
        const y2 = contrastS.greaterThan(contrastN).select(1, -1).toVar();
        const dirToEdge = vec2(x2, y2).toVar();
        const rgbaAlongH = FxaaTexOff(uv2, vec2(dirToEdge.x, dirToEdge.y), fxaaQualityRcpFrame.xy);
        const matchAlongH = contrast(rgbaM, rgbaAlongH).toVar();
        const rgbaAlongV = FxaaTexOff(uv2, vec2(dirToEdge.x.negate(), dirToEdge.y.negate()), fxaaQualityRcpFrame.xy);
        const matchAlongV = contrast(rgbaM, rgbaAlongV).toVar();
        relativeVContrast.assign(matchAlongV.sub(matchAlongH));
        relativeVContrast.mulAssign(fxaaQualityinvEdgeThreshold);
        If(abs2(relativeVContrast).lessThan(0.3), () => {
          const sum3 = rgbaN.add(rgbaS).add(rgbaE).add(rgbaW);
          return mix(rgbaM, sum3.mul(0.25), 0.4);
        });
      });
      const offNP = vec2().toVar();
      If(relativeVContrast.lessThanEqual(0), () => {
        rgbaN.assign(rgbaW);
        rgbaS.assign(rgbaE);
        offNP.x.assign(0);
        offNP.y.assign(fxaaQualityRcpFrame.y);
      }).Else(() => {
        offNP.x.assign(fxaaQualityRcpFrame.x);
        offNP.y.assign(0);
      });
      const mn = contrast(rgbaM, rgbaN).toVar();
      const ms = contrast(rgbaM, rgbaS).toVar();
      If(mn.lessThanEqual(ms), () => {
        rgbaN.assign(rgbaS);
      });
      const doneN = int(0).toVar();
      const doneP = int(0).toVar();
      const nDist = float(0).toVar();
      const pDist = float(0).toVar();
      const posN = vec2(uv2).toVar();
      const posP = vec2(uv2).toVar();
      const iterationsUsedN = int(0).toVar();
      const iterationsUsedP = int(0).toVar();
      Loop(NUM_SAMPLES, ({ i: i2 }) => {
        const increment = i2.add(1).toVar();
        If(doneN.equal(0), () => {
          nDist.addAssign(increment);
          posN.assign(uv2.add(offNP.mul(nDist)));
          const rgbaEndN = FxaaTexTop(posN.xy);
          const nm = contrast(rgbaEndN, rgbaM).toVar();
          const nn = contrast(rgbaEndN, rgbaN).toVar();
          If(nm.greaterThan(nn), () => {
            doneN.assign(1);
          });
          iterationsUsedN.assign(i2);
        });
        If(doneP.equal(0), () => {
          pDist.addAssign(increment);
          posP.assign(uv2.sub(offNP.mul(pDist)));
          const rgbaEndP = FxaaTexTop(posP.xy);
          const pm = contrast(rgbaEndP, rgbaM).toVar();
          const pn = contrast(rgbaEndP, rgbaN).toVar();
          If(pm.greaterThan(pn), () => {
            doneP.assign(1);
          });
          iterationsUsedP.assign(i2);
        });
        If(doneN.equal(1).or(doneP.equal(1)), () => {
          Break();
        });
      });
      If(doneN.equal(0).and(doneP.equal(0)), () => {
        return rgbaM;
      });
      const distN = float(1).toVar();
      const distP = float(1).toVar();
      If(doneN.equal(1), () => {
        distN.assign(float(iterationsUsedN).div(float(NUM_SAMPLES.sub(1))));
      });
      If(doneP.equal(1), () => {
        distP.assign(float(iterationsUsedP).div(float(NUM_SAMPLES.sub(1))));
      });
      const dist2 = min$1(distN, distP);
      dist2.assign(pow4(dist2, 0.5));
      dist2.assign(float(1).sub(dist2));
      return mix(rgbaM, rgbaN, dist2.mul(0.5));
    }).setLayout({
      name: "FxaaPixelShader",
      type: "vec4",
      inputs: [
        { name: "uv", type: "vec2" },
        { name: "fxaaQualityRcpFrame", type: "vec2" },
        { name: "fxaaQualityEdgeThreshold", type: "float" },
        { name: "fxaaQualityinvEdgeThreshold", type: "float" }
      ]
    });
    const fxaa = Fn(() => {
      const edgeDetectionQuality = float(0.2);
      const invEdgeDetectionQuality = float(1).div(edgeDetectionQuality);
      return FxaaPixelShader(uvNode, this._invSize, edgeDetectionQuality, invEdgeDetectionQuality);
    });
    const outputNode = fxaa();
    return outputNode;
  }
};
FXAANode.type = registerNode("FXAA", FXAANode);
var _quadMesh$2 = new QuadMesh();
var _clearColor$1 = new Color3(0, 0, 0);
var _currentClearColor = new Color3();
var _size$4 = new Vector22();
var _BlurDirectionX = new Vector22(1, 0);
var _BlurDirectionY = new Vector22(0, 1);
var TransitionNode = class extends TempNode {
  constructor(textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode) {
    super();
    this.textureNodeA = textureNodeA;
    this.textureNodeB = textureNodeB;
    this.mixTextureNode = mixTextureNode;
    this.mixRatioNode = mixRatioNode;
    this.thresholdNode = thresholdNode;
    this.useTextureNode = useTextureNode;
  }
  setup() {
    const { textureNodeA, textureNodeB, mixTextureNode, mixRatioNode, thresholdNode, useTextureNode } = this;
    const sampleTexture = (textureNode) => {
      const uvNodeTexture = textureNode.uvNode || uv();
      return textureNode.uv(uvNodeTexture);
    };
    const transition = Fn(() => {
      const texelOne = sampleTexture(textureNodeA);
      const texelTwo = sampleTexture(textureNodeB);
      const color3 = vec4().toVar();
      If(useTextureNode.equal(int(1)), () => {
        const transitionTexel = sampleTexture(mixTextureNode);
        const r2 = mixRatioNode.mul(thresholdNode.mul(2).add(1)).sub(thresholdNode);
        const mixf = clamp2(sub(transitionTexel.r, r2).mul(float(1).div(thresholdNode)), 0, 1);
        color3.assign(mix(texelOne, texelTwo, mixf));
      }).Else(() => {
        color3.assign(mix(texelTwo, texelOne, mixRatioNode));
      });
      return color3;
    });
    const outputNode = transition();
    return outputNode;
  }
};
TransitionNode.type = registerNode("Transition", TransitionNode);
var PixelationNode = class extends TempNode {
  constructor(textureNode, depthNode, normalNode, pixelSize, normalEdgeStrength, depthEdgeStrength) {
    super();
    this.textureNode = textureNode;
    this.depthNode = depthNode;
    this.normalNode = normalNode;
    this.pixelSize = pixelSize;
    this.normalEdgeStrength = normalEdgeStrength;
    this.depthEdgeStrength = depthEdgeStrength;
    this._resolution = uniform(new Vector42());
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  updateBefore() {
    const map4 = this.textureNode.value;
    const width = map4.image.width;
    const height = map4.image.height;
    this._resolution.value.set(width, height, 1 / width, 1 / height);
  }
  setup() {
    const { textureNode, depthNode, normalNode } = this;
    const uvNodeTexture = textureNode.uvNode || uv();
    const uvNodeDepth = depthNode.uvNode || uv();
    const uvNodeNormal = normalNode.uvNode || uv();
    const sampleTexture = () => textureNode.uv(uvNodeTexture);
    const sampleDepth = (x2, y2) => depthNode.uv(uvNodeDepth.add(vec2(x2, y2).mul(this._resolution.zw))).r;
    const sampleNormal = (x2, y2) => normalNode.uv(uvNodeNormal.add(vec2(x2, y2).mul(this._resolution.zw))).rgb.normalize();
    const depthEdgeIndicator = (depth2) => {
      const diff = property("float", "diff");
      diff.addAssign(clamp2(sampleDepth(1, 0).sub(depth2)));
      diff.addAssign(clamp2(sampleDepth(-1, 0).sub(depth2)));
      diff.addAssign(clamp2(sampleDepth(0, 1).sub(depth2)));
      diff.addAssign(clamp2(sampleDepth(0, -1).sub(depth2)));
      return floor(smoothstep2(0.01, 0.02, diff).mul(2)).div(2);
    };
    const neighborNormalEdgeIndicator = (x2, y2, depth2, normal2) => {
      const depthDiff = sampleDepth(x2, y2).sub(depth2);
      const neighborNormal = sampleNormal(x2, y2);
      const normalEdgeBias = vec3(1, 1, 1);
      const normalDiff = dot(normal2.sub(neighborNormal), normalEdgeBias);
      const normalIndicator = clamp2(smoothstep2(-0.01, 0.01, normalDiff), 0, 1);
      const depthIndicator = clamp2(sign5(depthDiff.mul(0.25).add(25e-4)), 0, 1);
      return float(1).sub(dot(normal2, neighborNormal)).mul(depthIndicator).mul(normalIndicator);
    };
    const normalEdgeIndicator = (depth2, normal2) => {
      const indicator = property("float", "indicator");
      indicator.addAssign(neighborNormalEdgeIndicator(0, -1, depth2, normal2));
      indicator.addAssign(neighborNormalEdgeIndicator(0, 1, depth2, normal2));
      indicator.addAssign(neighborNormalEdgeIndicator(-1, 0, depth2, normal2));
      indicator.addAssign(neighborNormalEdgeIndicator(1, 0, depth2, normal2));
      return step(0.1, indicator);
    };
    const pixelation2 = Fn(() => {
      const texel = sampleTexture();
      const depth2 = property("float", "depth");
      const normal2 = property("vec3", "normal");
      If(this.depthEdgeStrength.greaterThan(0).or(this.normalEdgeStrength.greaterThan(0)), () => {
        depth2.assign(sampleDepth(0, 0));
        normal2.assign(sampleNormal(0, 0));
      });
      const dei = property("float", "dei");
      If(this.depthEdgeStrength.greaterThan(0), () => {
        dei.assign(depthEdgeIndicator(depth2));
      });
      const nei = property("float", "nei");
      If(this.normalEdgeStrength.greaterThan(0), () => {
        nei.assign(normalEdgeIndicator(depth2, normal2));
      });
      const strength = dei.greaterThan(0).select(float(1).sub(dei.mul(this.depthEdgeStrength)), nei.mul(this.normalEdgeStrength).add(1));
      return texel.mul(strength);
    });
    const outputNode = pixelation2();
    return outputNode;
  }
};
PixelationNode.type = registerNode("Pixelation", PixelationNode);
var pixelation = (node, depthNode, normalNode, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4) => nodeObject(new PixelationNode(convertToTexture(node), convertToTexture(depthNode), convertToTexture(normalNode), nodeObject(pixelSize), nodeObject(normalEdgeStrength), nodeObject(depthEdgeStrength)));
var PixelationPassNode = class extends PassNode {
  constructor(scene3, camera3, pixelSize = 6, normalEdgeStrength = 0.3, depthEdgeStrength = 0.4) {
    super("color", scene3, camera3, { minFilter: NearestFilter2, magFilter: NearestFilter2 });
    this.pixelSize = pixelSize;
    this.normalEdgeStrength = normalEdgeStrength;
    this.depthEdgeStrength = depthEdgeStrength;
    this.isPixelationPassNode = true;
    this._mrt = mrt({
      output,
      normal: normalView
    });
  }
  setSize(width, height) {
    const pixelSize = this.pixelSize.value ? this.pixelSize.value : this.pixelSize;
    const adjustedWidth = Math.floor(width / pixelSize);
    const adjustedHeight = Math.floor(height / pixelSize);
    super.setSize(adjustedWidth, adjustedHeight);
  }
  setup() {
    const color3 = super.getTextureNode("output");
    const depth2 = super.getTextureNode("depth");
    const normal2 = super.getTextureNode("normal");
    return pixelation(color3, depth2, normal2, this.pixelSize, this.normalEdgeStrength, this.depthEdgeStrength);
  }
};
PixelationPassNode.type = registerNode("PixelationPass", PixelationPassNode);
var _size$3 = new Vector22();
var SSAAPassNode = class extends PassNode {
  constructor(scene3, camera3) {
    super(PassNode.COLOR, scene3, camera3);
    this.isSSAAPassNode = true;
    this.sampleLevel = 4;
    this.unbiased = true;
    this.clearColor = new Color3(0);
    this.clearAlpha = 0;
    this._currentClearColor = new Color3();
    this.sampleWeight = uniform(1);
    this.sampleRenderTarget = null;
    this._quadMesh = new QuadMesh();
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const { scene: scene3, camera: camera3 } = this;
    this._pixelRatio = renderer3.getPixelRatio();
    const size = renderer3.getSize(_size$3);
    this.setSize(size.width, size.height);
    this.sampleRenderTarget.setSize(this.renderTarget.width, this.renderTarget.height);
    renderer3.getClearColor(this._currentClearColor);
    const currentClearAlpha = renderer3.getClearAlpha();
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    const currentAutoClear = renderer3.autoClear;
    this._cameraNear.value = camera3.near;
    this._cameraFar.value = camera3.far;
    renderer3.setMRT(this.getMRT());
    renderer3.autoClear = false;
    const jitterOffsets = _JitterVectors[Math.max(0, Math.min(this.sampleLevel, 5))];
    const baseSampleWeight = 1 / jitterOffsets.length;
    const roundingRange = 1 / 32;
    const viewOffset = {
      fullWidth: this.renderTarget.width,
      fullHeight: this.renderTarget.height,
      offsetX: 0,
      offsetY: 0,
      width: this.renderTarget.width,
      height: this.renderTarget.height
    };
    const originalViewOffset = Object.assign({}, camera3.view);
    if (originalViewOffset.enabled) Object.assign(viewOffset, originalViewOffset);
    for (let i2 = 0; i2 < jitterOffsets.length; i2++) {
      const jitterOffset = jitterOffsets[i2];
      if (camera3.setViewOffset) {
        camera3.setViewOffset(
          viewOffset.fullWidth,
          viewOffset.fullHeight,
          viewOffset.offsetX + jitterOffset[0] * 0.0625,
          viewOffset.offsetY + jitterOffset[1] * 0.0625,
          // 0.0625 = 1 / 16
          viewOffset.width,
          viewOffset.height
        );
      }
      this.sampleWeight.value = baseSampleWeight;
      if (this.unbiased) {
        const uniformCenteredDistribution = -0.5 + (i2 + 0.5) / jitterOffsets.length;
        this.sampleWeight.value += roundingRange * uniformCenteredDistribution;
      }
      renderer3.setClearColor(this.clearColor, this.clearAlpha);
      renderer3.setRenderTarget(this.sampleRenderTarget);
      renderer3.clear();
      renderer3.render(scene3, camera3);
      renderer3.setRenderTarget(this.renderTarget);
      if (i2 === 0) {
        renderer3.setClearColor(0, 0);
        renderer3.clear();
      }
      this._quadMesh.render(renderer3);
    }
    renderer3.copyTextureToTexture(this.sampleRenderTarget.depthTexture, this.renderTarget.depthTexture);
    if (camera3.setViewOffset && originalViewOffset.enabled) {
      camera3.setViewOffset(
        originalViewOffset.fullWidth,
        originalViewOffset.fullHeight,
        originalViewOffset.offsetX,
        originalViewOffset.offsetY,
        originalViewOffset.width,
        originalViewOffset.height
      );
    } else if (camera3.clearViewOffset) {
      camera3.clearViewOffset();
    }
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
    renderer3.autoClear = currentAutoClear;
    renderer3.setClearColor(this._currentClearColor, currentClearAlpha);
  }
  setup(builder) {
    if (this.sampleRenderTarget === null) {
      this.sampleRenderTarget = this.renderTarget.clone();
    }
    let sampleTexture;
    const passMRT = this.getMRT();
    if (passMRT !== null) {
      const outputs = {};
      for (const name in passMRT.outputNodes) {
        const index7 = getTextureIndex(this.sampleRenderTarget.textures, name);
        if (index7 >= 0) {
          outputs[name] = texture(this.sampleRenderTarget.textures[index7]).mul(this.sampleWeight);
        }
      }
      sampleTexture = mrt(outputs);
    } else {
      sampleTexture = texture(this.sampleRenderTarget.texture).mul(this.sampleWeight);
    }
    this._quadMesh.material = new NodeMaterial();
    this._quadMesh.material.fragmentNode = sampleTexture;
    this._quadMesh.material.transparent = true;
    this._quadMesh.material.depthTest = false;
    this._quadMesh.material.depthWrite = false;
    this._quadMesh.material.premultipliedAlpha = true;
    this._quadMesh.material.blending = AdditiveBlending2;
    this._quadMesh.material.normals = false;
    this._quadMesh.material.name = "SSAA";
    return super.setup(builder);
  }
  dispose() {
    super.dispose();
    if (this.sampleRenderTarget !== null) {
      this.sampleRenderTarget.dispose();
    }
  }
};
SSAAPassNode.type = registerNode("SSAAPass", SSAAPassNode);
var _JitterVectors = [
  [
    [0, 0]
  ],
  [
    [4, 4],
    [-4, -4]
  ],
  [
    [-2, -6],
    [6, -2],
    [-6, 2],
    [2, 6]
  ],
  [
    [1, -3],
    [-1, 3],
    [5, 1],
    [-3, -5],
    [-5, 5],
    [-7, -1],
    [3, 7],
    [7, -7]
  ],
  [
    [1, 1],
    [-1, -3],
    [-3, 2],
    [4, -1],
    [-5, -2],
    [2, 5],
    [5, 3],
    [3, -5],
    [-2, 6],
    [0, -7],
    [-4, -6],
    [-6, 4],
    [-8, 0],
    [7, -4],
    [6, 7],
    [-7, -8]
  ],
  [
    [-4, -7],
    [-7, -5],
    [-3, -5],
    [-5, -4],
    [-1, -4],
    [-2, -2],
    [-6, -1],
    [-4, 0],
    [-7, 1],
    [-1, 2],
    [-6, 3],
    [-3, 3],
    [-7, 6],
    [-3, 6],
    [-5, 7],
    [-1, 7],
    [5, -7],
    [1, -6],
    [6, -5],
    [4, -4],
    [2, -3],
    [7, -2],
    [1, -1],
    [4, -1],
    [2, 1],
    [6, 2],
    [0, 4],
    [4, 4],
    [2, 5],
    [7, 5],
    [5, 6],
    [3, 7]
  ]
];
var _size$2 = new Vector22();
var StereoPassNode = class extends PassNode {
  constructor(scene3, camera3) {
    super(PassNode.COLOR, scene3, camera3);
    this.isStereoPassNode = true;
    this.stereo = new StereoCamera();
    this.stereo.aspect = 0.5;
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const { scene: scene3, camera: camera3, stereo, renderTarget } = this;
    this._pixelRatio = renderer3.getPixelRatio();
    stereo.cameraL.coordinateSystem = renderer3.coordinateSystem;
    stereo.cameraR.coordinateSystem = renderer3.coordinateSystem;
    stereo.update(camera3);
    const size = renderer3.getSize(_size$2);
    this.setSize(size.width, size.height);
    const currentAutoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentMRT = renderer3.getMRT();
    this._cameraNear.value = camera3.near;
    this._cameraFar.value = camera3.far;
    for (const name in this._previousTextures) {
      this.toggleTexture(name);
    }
    renderer3.setRenderTarget(renderTarget);
    renderer3.setMRT(this._mrt);
    renderer3.clear();
    renderTarget.scissorTest = true;
    renderTarget.scissor.set(0, 0, renderTarget.width / 2, renderTarget.height);
    renderTarget.viewport.set(0, 0, renderTarget.width / 2, renderTarget.height);
    renderer3.render(scene3, stereo.cameraL);
    renderTarget.scissor.set(renderTarget.width / 2, 0, renderTarget.width / 2, renderTarget.height);
    renderTarget.viewport.set(renderTarget.width / 2, 0, renderTarget.width / 2, renderTarget.height);
    renderer3.render(scene3, stereo.cameraR);
    renderTarget.scissorTest = false;
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setMRT(currentMRT);
    renderer3.autoClear = currentAutoClear;
  }
};
StereoPassNode.type = registerNode("StereoPass", StereoPassNode);
var _size$1 = new Vector22();
var _quadMesh$1 = new QuadMesh();
var StereoCompositePassNode = class extends PassNode {
  constructor(scene3, camera3) {
    super(PassNode.COLOR, scene3, camera3);
    this.isStereoCompositePassNode = true;
    this.stereo = new StereoCamera();
    const _params = { minFilter: LinearFilter2, magFilter: NearestFilter2, type: HalfFloatType2 };
    this._renderTargetL = new RenderTarget2(1, 1, _params);
    this._renderTargetR = new RenderTarget2(1, 1, _params);
    this._mapLeft = texture(this._renderTargetL.texture);
    this._mapRight = texture(this._renderTargetR.texture);
    this._material = null;
  }
  updateStereoCamera(coordinateSystem) {
    this.stereo.cameraL.coordinateSystem = coordinateSystem;
    this.stereo.cameraR.coordinateSystem = coordinateSystem;
    this.stereo.update(this.camera);
  }
  setSize(width, height) {
    super.setSize(width, height);
    this._renderTargetL.setSize(this.renderTarget.width, this.renderTarget.height);
    this._renderTargetR.setSize(this.renderTarget.width, this.renderTarget.height);
  }
  updateBefore(frame) {
    const { renderer: renderer3 } = frame;
    const { scene: scene3, stereo, renderTarget } = this;
    this._pixelRatio = renderer3.getPixelRatio();
    this.updateStereoCamera(renderer3.coordinateSystem);
    const size = renderer3.getSize(_size$1);
    this.setSize(size.width, size.height);
    const currentRenderTarget = renderer3.getRenderTarget();
    renderer3.setRenderTarget(this._renderTargetL);
    renderer3.render(scene3, stereo.cameraL);
    renderer3.setRenderTarget(this._renderTargetR);
    renderer3.render(scene3, stereo.cameraR);
    renderer3.setRenderTarget(renderTarget);
    _quadMesh$1.material = this._material;
    _quadMesh$1.render(renderer3);
    renderer3.setRenderTarget(currentRenderTarget);
  }
  dispose() {
    super.dispose();
    this._renderTargetL.dispose();
    this._renderTargetR.dispose();
    if (this._material !== null) {
      this._material.dispose();
    }
  }
};
StereoCompositePassNode.type = registerNode("StereoCompositePass", StereoCompositePassNode);
var ParallaxBarrierPassNode = class extends StereoCompositePassNode {
  constructor(scene3, camera3) {
    super(scene3, camera3);
    this.isParallaxBarrierPassNode = true;
  }
  setup(builder) {
    const uvNode = uv();
    const parallaxBarrier = Fn(() => {
      const color3 = vec4().toVar();
      If(mod(viewportCoordinate.y, 2).greaterThan(1), () => {
        color3.assign(this._mapLeft.uv(uvNode));
      }).Else(() => {
        color3.assign(this._mapRight.uv(uvNode));
      });
      return color3;
    });
    const material = this._material || (this._material = new NodeMaterial());
    material.fragmentNode = parallaxBarrier().context(builder.getSharedContext());
    material.needsUpdate = true;
    return super.setup(builder);
  }
};
ParallaxBarrierPassNode.type = registerNode("ParallaxBarrierPass", ParallaxBarrierPassNode);
var ScriptableValueNode = class extends Node2 {
  constructor(value = null) {
    super();
    this._value = value;
    this._cache = null;
    this.inputType = null;
    this.outpuType = null;
    this.events = new EventDispatcher2();
    this.isScriptableValueNode = true;
  }
  get isScriptableOutputNode() {
    return this.outputType !== null;
  }
  set value(val) {
    if (this._value === val) return;
    if (this._cache && this.inputType === "URL" && this.value.value instanceof ArrayBuffer) {
      URL.revokeObjectURL(this._cache);
      this._cache = null;
    }
    this._value = val;
    this.events.dispatchEvent({ type: "change" });
    this.refresh();
  }
  get value() {
    return this._value;
  }
  refresh() {
    this.events.dispatchEvent({ type: "refresh" });
  }
  getValue() {
    const value = this.value;
    if (value && this._cache === null && this.inputType === "URL" && value.value instanceof ArrayBuffer) {
      this._cache = URL.createObjectURL(new Blob([value.value]));
    } else if (value && value.value !== null && value.value !== void 0 && ((this.inputType === "URL" || this.inputType === "String") && typeof value.value === "string" || this.inputType === "Number" && typeof value.value === "number" || this.inputType === "Vector2" && value.value.isVector2 || this.inputType === "Vector3" && value.value.isVector3 || this.inputType === "Vector4" && value.value.isVector4 || this.inputType === "Color" && value.value.isColor || this.inputType === "Matrix3" && value.value.isMatrix3 || this.inputType === "Matrix4" && value.value.isMatrix4)) {
      return value.value;
    }
    return this._cache || value;
  }
  getNodeType(builder) {
    return this.value && this.value.isNode ? this.value.getNodeType(builder) : "float";
  }
  setup() {
    return this.value && this.value.isNode ? this.value : float();
  }
  serialize(data) {
    super.serialize(data);
    if (this.value !== null) {
      if (this.inputType === "ArrayBuffer") {
        data.value = arrayBufferToBase64(this.value);
      } else {
        data.value = this.value ? this.value.toJSON(data.meta).uuid : null;
      }
    } else {
      data.value = null;
    }
    data.inputType = this.inputType;
    data.outputType = this.outputType;
  }
  deserialize(data) {
    super.deserialize(data);
    let value = null;
    if (data.value !== null) {
      if (data.inputType === "ArrayBuffer") {
        value = base64ToArrayBuffer(data.value);
      } else if (data.inputType === "Texture") {
        value = data.meta.textures[data.value];
      } else {
        value = data.meta.nodes[data.value] || null;
      }
    }
    this.value = value;
    this.inputType = data.inputType;
    this.outputType = data.outputType;
  }
};
ScriptableValueNode.type = registerNode("ScriptableValue", ScriptableValueNode);
var scriptableValue = nodeProxy(ScriptableValueNode);
var Resources = class extends Map {
  get(key, callback = null, ...params) {
    if (this.has(key)) return super.get(key);
    if (callback !== null) {
      const value = callback(...params);
      this.set(key, value);
      return value;
    }
  }
};
var Parameters = class {
  constructor(scriptableNode) {
    this.scriptableNode = scriptableNode;
  }
  get parameters() {
    return this.scriptableNode.parameters;
  }
  get layout() {
    return this.scriptableNode.getLayout();
  }
  getInputLayout(id2) {
    return this.scriptableNode.getInputLayout(id2);
  }
  get(name) {
    const param = this.parameters[name];
    const value = param ? param.getValue() : null;
    return value;
  }
};
var global2 = new Resources();
var ScriptableNode = class extends Node2 {
  constructor(codeNode = null, parameters = {}) {
    super();
    this.codeNode = codeNode;
    this.parameters = parameters;
    this._local = new Resources();
    this._output = scriptableValue();
    this._outputs = {};
    this._source = this.source;
    this._method = null;
    this._object = null;
    this._value = null;
    this._needsOutputUpdate = true;
    this.onRefresh = this.onRefresh.bind(this);
    this.isScriptableNode = true;
  }
  get source() {
    return this.codeNode ? this.codeNode.code : "";
  }
  setLocal(name, value) {
    return this._local.set(name, value);
  }
  getLocal(name) {
    return this._local.get(name);
  }
  onRefresh() {
    this._refresh();
  }
  getInputLayout(id2) {
    for (const element2 of this.getLayout()) {
      if (element2.inputType && (element2.id === id2 || element2.name === id2)) {
        return element2;
      }
    }
  }
  getOutputLayout(id2) {
    for (const element2 of this.getLayout()) {
      if (element2.outputType && (element2.id === id2 || element2.name === id2)) {
        return element2;
      }
    }
  }
  setOutput(name, value) {
    const outputs = this._outputs;
    if (outputs[name] === void 0) {
      outputs[name] = scriptableValue(value);
    } else {
      outputs[name].value = value;
    }
    return this;
  }
  getOutput(name) {
    return this._outputs[name];
  }
  getParameter(name) {
    return this.parameters[name];
  }
  setParameter(name, value) {
    const parameters = this.parameters;
    if (value && value.isScriptableNode) {
      this.deleteParameter(name);
      parameters[name] = value;
      parameters[name].getDefaultOutput().events.addEventListener("refresh", this.onRefresh);
    } else if (value && value.isScriptableValueNode) {
      this.deleteParameter(name);
      parameters[name] = value;
      parameters[name].events.addEventListener("refresh", this.onRefresh);
    } else if (parameters[name] === void 0) {
      parameters[name] = scriptableValue(value);
      parameters[name].events.addEventListener("refresh", this.onRefresh);
    } else {
      parameters[name].value = value;
    }
    return this;
  }
  getValue() {
    return this.getDefaultOutput().getValue();
  }
  deleteParameter(name) {
    let valueNode = this.parameters[name];
    if (valueNode) {
      if (valueNode.isScriptableNode) valueNode = valueNode.getDefaultOutput();
      valueNode.events.removeEventListener("refresh", this.onRefresh);
    }
    return this;
  }
  clearParameters() {
    for (const name of Object.keys(this.parameters)) {
      this.deleteParameter(name);
    }
    this.needsUpdate = true;
    return this;
  }
  call(name, ...params) {
    const object2 = this.getObject();
    const method = object2[name];
    if (typeof method === "function") {
      return method(...params);
    }
  }
  async callAsync(name, ...params) {
    const object2 = this.getObject();
    const method = object2[name];
    if (typeof method === "function") {
      return method.constructor.name === "AsyncFunction" ? await method(...params) : method(...params);
    }
  }
  getNodeType(builder) {
    return this.getDefaultOutputNode().getNodeType(builder);
  }
  refresh(output2 = null) {
    if (output2 !== null) {
      this.getOutput(output2).refresh();
    } else {
      this._refresh();
    }
  }
  getObject() {
    if (this.needsUpdate) this.dispose();
    if (this._object !== null) return this._object;
    const refresh = () => this.refresh();
    const setOutput = (id2, value) => this.setOutput(id2, value);
    const parameters = new Parameters(this);
    const THREE5 = global2.get("THREE");
    const TSL = global2.get("TSL");
    const method = this.getMethod(this.codeNode);
    const params = [parameters, this._local, global2, refresh, setOutput, THREE5, TSL];
    this._object = method(...params);
    const layout = this._object.layout;
    if (layout) {
      if (layout.cache === false) {
        this._local.clear();
      }
      this._output.outputType = layout.outputType || null;
      if (Array.isArray(layout.elements)) {
        for (const element2 of layout.elements) {
          const id2 = element2.id || element2.name;
          if (element2.inputType) {
            if (this.getParameter(id2) === void 0) this.setParameter(id2, null);
            this.getParameter(id2).inputType = element2.inputType;
          }
          if (element2.outputType) {
            if (this.getOutput(id2) === void 0) this.setOutput(id2, null);
            this.getOutput(id2).outputType = element2.outputType;
          }
        }
      }
    }
    return this._object;
  }
  deserialize(data) {
    super.deserialize(data);
    for (const name in this.parameters) {
      let valueNode = this.parameters[name];
      if (valueNode.isScriptableNode) valueNode = valueNode.getDefaultOutput();
      valueNode.events.addEventListener("refresh", this.onRefresh);
    }
  }
  getLayout() {
    return this.getObject().layout;
  }
  getDefaultOutputNode() {
    const output2 = this.getDefaultOutput().value;
    if (output2 && output2.isNode) {
      return output2;
    }
    return float();
  }
  getDefaultOutput() {
    return this._exec()._output;
  }
  getMethod() {
    if (this.needsUpdate) this.dispose();
    if (this._method !== null) return this._method;
    const parametersProps = ["parameters", "local", "global", "refresh", "setOutput", "THREE", "TSL"];
    const interfaceProps = ["layout", "init", "main", "dispose"];
    const properties = interfaceProps.join(", ");
    const declarations = "var " + properties + "; var output = {};\n";
    const returns = "\nreturn { ...output, " + properties + " };";
    const code2 = declarations + this.codeNode.code + returns;
    this._method = new Function(...parametersProps, code2);
    return this._method;
  }
  dispose() {
    if (this._method === null) return;
    if (this._object && typeof this._object.dispose === "function") {
      this._object.dispose();
    }
    this._method = null;
    this._object = null;
    this._source = null;
    this._value = null;
    this._needsOutputUpdate = true;
    this._output.value = null;
    this._outputs = {};
  }
  setup() {
    return this.getDefaultOutputNode();
  }
  getCacheKey(force) {
    const cacheKey = [this.source, this.getDefaultOutputNode().getCacheKey(force)];
    for (const param in this.parameters) {
      cacheKey.push(this.parameters[param].getCacheKey(force));
    }
    return cacheKey.join(",");
  }
  set needsUpdate(value) {
    if (value === true) this.dispose();
  }
  get needsUpdate() {
    return this.source !== this._source;
  }
  _exec() {
    if (this.codeNode === null) return this;
    if (this._needsOutputUpdate === true) {
      this._value = this.call("main");
      this._needsOutputUpdate = false;
    }
    this._output.value = this._value;
    return this;
  }
  _refresh() {
    this.needsUpdate = true;
    this._exec();
    this._output.refresh();
  }
};
ScriptableNode.type = registerNode("Scriptable", ScriptableNode);
var scriptable = nodeProxy(ScriptableNode);
var FogNode = class extends Node2 {
  constructor(colorNode, factorNode) {
    super("float");
    this.isFogNode = true;
    this.colorNode = colorNode;
    this.factorNode = factorNode;
  }
  getViewZNode(builder) {
    let viewZ;
    const getViewZ = builder.context.getViewZ;
    if (getViewZ !== void 0) {
      viewZ = getViewZ(this);
    }
    return (viewZ || positionView.z).negate();
  }
  setup() {
    return this.factorNode;
  }
};
FogNode.type = registerNode("Fog", FogNode);
var fog = nodeProxy(FogNode);
var FogRangeNode = class extends FogNode {
  constructor(colorNode, nearNode, farNode) {
    super(colorNode);
    this.isFogRangeNode = true;
    this.nearNode = nearNode;
    this.farNode = farNode;
  }
  setup(builder) {
    const viewZ = this.getViewZNode(builder);
    return smoothstep2(this.nearNode, this.farNode, viewZ);
  }
};
FogRangeNode.type = registerNode("FogRange", FogRangeNode);
var rangeFog = nodeProxy(FogRangeNode);
var FogExp2Node = class extends FogNode {
  constructor(colorNode, densityNode) {
    super(colorNode);
    this.isFogExp2Node = true;
    this.densityNode = densityNode;
  }
  setup(builder) {
    const viewZ = this.getViewZNode(builder);
    const density = this.densityNode;
    return density.mul(density, viewZ, viewZ).negate().exp().oneMinus();
  }
};
FogExp2Node.type = registerNode("FogExp2", FogExp2Node);
var densityFog = nodeProxy(FogExp2Node);
var min3 = null;
var max3 = null;
var RangeNode = class extends Node2 {
  constructor(minNode = float(), maxNode = float()) {
    super();
    this.minNode = minNode;
    this.maxNode = maxNode;
  }
  getVectorLength(builder) {
    const minLength = builder.getTypeLength(getValueType(this.minNode.value));
    const maxLength = builder.getTypeLength(getValueType(this.maxNode.value));
    return minLength > maxLength ? minLength : maxLength;
  }
  getNodeType(builder) {
    return builder.object.count > 1 ? builder.getTypeFromLength(this.getVectorLength(builder)) : "float";
  }
  setup(builder) {
    const object2 = builder.object;
    let output2 = null;
    if (object2.count > 1) {
      const minValue = this.minNode.value;
      const maxValue = this.maxNode.value;
      const minLength = builder.getTypeLength(getValueType(minValue));
      const maxLength = builder.getTypeLength(getValueType(maxValue));
      min3 = min3 || new Vector42();
      max3 = max3 || new Vector42();
      min3.setScalar(0);
      max3.setScalar(0);
      if (minLength === 1) min3.setScalar(minValue);
      else if (minValue.isColor) min3.set(minValue.r, minValue.g, minValue.b);
      else min3.set(minValue.x, minValue.y, minValue.z || 0, minValue.w || 0);
      if (maxLength === 1) max3.setScalar(maxValue);
      else if (maxValue.isColor) max3.set(maxValue.r, maxValue.g, maxValue.b);
      else max3.set(maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0);
      const stride = 4;
      const length2 = stride * object2.count;
      const array3 = new Float32Array(length2);
      for (let i2 = 0; i2 < length2; i2++) {
        const index7 = i2 % stride;
        const minElementValue = min3.getComponent(index7);
        const maxElementValue = max3.getComponent(index7);
        array3[i2] = MathUtils2.lerp(minElementValue, maxElementValue, Math.random());
      }
      const nodeType = this.getNodeType(builder);
      if (object2.count <= 4096) {
        output2 = buffer(array3, "vec4", object2.count).element(instanceIndex).convert(nodeType);
      } else {
        const bufferAttribute2 = new InstancedBufferAttribute2(array3, 4);
        builder.geometry.setAttribute("__range" + this.id, bufferAttribute2);
        output2 = instancedBufferAttribute(bufferAttribute2).convert(nodeType);
      }
    } else {
      output2 = float(0);
    }
    return output2;
  }
};
RangeNode.type = registerNode("Range", RangeNode);
var range3 = nodeProxy(RangeNode);
var LightNode = class _LightNode extends Node2 {
  constructor(scope = _LightNode.TARGET_DIRECTION, light = null) {
    super();
    this.scope = scope;
    this.light = light;
  }
  setup() {
    const { scope, light } = this;
    let output2 = null;
    if (scope === _LightNode.TARGET_DIRECTION) {
      output2 = cameraViewMatrix.transformDirection(objectPosition(light).sub(objectPosition(light.target)));
    }
    return output2;
  }
  serialize(data) {
    super.serialize(data);
    data.scope = this.scope;
  }
  deserialize(data) {
    super.deserialize(data);
    this.scope = data.scope;
  }
};
LightNode.TARGET_DIRECTION = "targetDirection";
LightNode.type = registerNode("Light", LightNode);
var lightTargetDirection = nodeProxy(LightNode, LightNode.TARGET_DIRECTION);
var BasicShadowMap = Fn(({ depthTexture, shadowCoord }) => {
  return texture(depthTexture, shadowCoord.xy).compare(shadowCoord.z);
});
var PCFShadowMap2 = Fn(({ depthTexture, shadowCoord, shadow }) => {
  const depthCompare = (uv2, compare) => texture(depthTexture, uv2).compare(compare);
  const mapSize = reference("mapSize", "vec2", shadow);
  const radius = reference("radius", "float", shadow);
  const texelSize = vec2(1).div(mapSize);
  const dx0 = texelSize.x.negate().mul(radius);
  const dy0 = texelSize.y.negate().mul(radius);
  const dx1 = texelSize.x.mul(radius);
  const dy1 = texelSize.y.mul(radius);
  const dx2 = dx0.div(2);
  const dy2 = dy0.div(2);
  const dx3 = dx1.div(2);
  const dy3 = dy1.div(2);
  return add3(
    depthCompare(shadowCoord.xy.add(vec2(dx0, dy0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx1, dy0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx2, dy2)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy2)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx3, dy2)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx0, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx2, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy, shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx3, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx1, 0)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx2, dy3)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy3)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx3, dy3)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx0, dy1)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(0, dy1)), shadowCoord.z),
    depthCompare(shadowCoord.xy.add(vec2(dx1, dy1)), shadowCoord.z)
  ).mul(1 / 17);
});
var PCFSoftShadowMap2 = Fn(({ depthTexture, shadowCoord, shadow }) => {
  const depthCompare = (uv3, compare) => texture(depthTexture, uv3).compare(compare);
  const mapSize = reference("mapSize", "vec2", shadow);
  const texelSize = vec2(1).div(mapSize);
  const dx = texelSize.x;
  const dy = texelSize.y;
  const uv2 = shadowCoord.xy;
  const f2 = fract(uv2.mul(mapSize).add(0.5));
  uv2.subAssign(f2.mul(texelSize));
  return add3(
    depthCompare(uv2, shadowCoord.z),
    depthCompare(uv2.add(vec2(dx, 0)), shadowCoord.z),
    depthCompare(uv2.add(vec2(0, dy)), shadowCoord.z),
    depthCompare(uv2.add(texelSize), shadowCoord.z),
    mix(
      depthCompare(uv2.add(vec2(dx.negate(), 0)), shadowCoord.z),
      depthCompare(uv2.add(vec2(dx.mul(2), 0)), shadowCoord.z),
      f2.x
    ),
    mix(
      depthCompare(uv2.add(vec2(dx.negate(), dy)), shadowCoord.z),
      depthCompare(uv2.add(vec2(dx.mul(2), dy)), shadowCoord.z),
      f2.x
    ),
    mix(
      depthCompare(uv2.add(vec2(0, dy.negate())), shadowCoord.z),
      depthCompare(uv2.add(vec2(0, dy.mul(2))), shadowCoord.z),
      f2.y
    ),
    mix(
      depthCompare(uv2.add(vec2(dx, dy.negate())), shadowCoord.z),
      depthCompare(uv2.add(vec2(dx, dy.mul(2))), shadowCoord.z),
      f2.y
    ),
    mix(
      mix(
        depthCompare(uv2.add(vec2(dx.negate(), dy.negate())), shadowCoord.z),
        depthCompare(uv2.add(vec2(dx.mul(2), dy.negate())), shadowCoord.z),
        f2.x
      ),
      mix(
        depthCompare(uv2.add(vec2(dx.negate(), dy.mul(2))), shadowCoord.z),
        depthCompare(uv2.add(vec2(dx.mul(2), dy.mul(2))), shadowCoord.z),
        f2.x
      ),
      f2.y
    )
  ).mul(1 / 9);
});
var shadowFilterLib = [BasicShadowMap, PCFShadowMap2, PCFSoftShadowMap2];
var overrideMaterial = null;
var AnalyticLightNode = class extends LightingNode {
  constructor(light = null) {
    super();
    this.updateType = NodeUpdateType.FRAME;
    this.light = light;
    this.color = new Color3();
    this.colorNode = uniform(this.color);
    this.baseColorNode = null;
    this.shadowMap = null;
    this.shadowNode = null;
    this.shadowColorNode = null;
    this.isAnalyticLightNode = true;
  }
  getCacheKey() {
    return super.getCacheKey() + "-" + (this.light.id + "-" + (this.light.castShadow ? "1" : "0"));
  }
  getHash() {
    return this.light.uuid;
  }
  setupShadow(builder) {
    const { object: object2, renderer: renderer3 } = builder;
    let shadowColorNode = this.shadowColorNode;
    if (shadowColorNode === null) {
      if (overrideMaterial === null) {
        overrideMaterial = new NodeMaterial();
        overrideMaterial.fragmentNode = vec4(0, 0, 0, 1);
        overrideMaterial.isShadowNodeMaterial = true;
        overrideMaterial.name = "ShadowMaterial";
      }
      const depthTexture = new DepthTexture2();
      depthTexture.compareFunction = LessCompare2;
      const shadow = this.light.shadow;
      const shadowMap = builder.createRenderTarget(shadow.mapSize.width, shadow.mapSize.height);
      shadowMap.depthTexture = depthTexture;
      shadow.camera.updateProjectionMatrix();
      const shadowIntensity = reference("intensity", "float", shadow);
      const bias = reference("bias", "float", shadow);
      const normalBias = reference("normalBias", "float", shadow);
      const position = object2.material.shadowPositionNode || positionWorld;
      let shadowCoord = uniform(shadow.matrix).mul(position.add(normalWorld.mul(normalBias)));
      shadowCoord = shadowCoord.xyz.div(shadowCoord.w);
      let coordZ = shadowCoord.z.add(bias);
      if (renderer3.coordinateSystem === WebGPUCoordinateSystem2) {
        coordZ = coordZ.mul(2).sub(1);
      }
      shadowCoord = vec3(
        shadowCoord.x,
        shadowCoord.y.oneMinus(),
        // follow webgpu standards
        coordZ
      );
      const frustumTest = shadowCoord.x.greaterThanEqual(0).and(shadowCoord.x.lessThanEqual(1)).and(shadowCoord.y.greaterThanEqual(0)).and(shadowCoord.y.lessThanEqual(1)).and(shadowCoord.z.lessThanEqual(1));
      const filterFn = shadow.filterNode || shadowFilterLib[renderer3.shadowMap.type] || null;
      if (filterFn === null) {
        throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");
      }
      const shadowColor = texture(shadowMap.texture, shadowCoord);
      const shadowNode = frustumTest.select(filterFn({ depthTexture, shadowCoord, shadow }), float(1));
      this.shadowMap = shadowMap;
      this.shadowNode = shadowNode;
      this.shadowColorNode = shadowColorNode = this.colorNode.mul(mix(1, shadowNode.rgb.mix(shadowColor, 1), shadowIntensity.mul(shadowColor.a)));
      this.baseColorNode = this.colorNode;
    }
    this.colorNode = shadowColorNode;
    this.updateBeforeType = NodeUpdateType.RENDER;
  }
  setup(builder) {
    this.colorNode = this.baseColorNode || this.colorNode;
    if (this.light.castShadow) {
      if (builder.object.receiveShadow) {
        this.setupShadow(builder);
      }
    } else if (this.shadowNode !== null) {
      this.disposeShadow();
    }
  }
  updateShadow(frame) {
    const { shadowMap, light } = this;
    const { renderer: renderer3, scene: scene3, camera: camera3 } = frame;
    const depthVersion = shadowMap.depthTexture.version;
    this._depthVersionCached = depthVersion;
    const currentOverrideMaterial = scene3.overrideMaterial;
    scene3.overrideMaterial = overrideMaterial;
    shadowMap.setSize(light.shadow.mapSize.width, light.shadow.mapSize.height);
    light.shadow.updateMatrices(light);
    light.shadow.camera.layers.mask = camera3.layers.mask;
    const currentRenderTarget = renderer3.getRenderTarget();
    const currentRenderObjectFunction = renderer3.getRenderObjectFunction();
    renderer3.setRenderObjectFunction((object2, ...params) => {
      if (object2.castShadow === true) {
        renderer3.renderObject(object2, ...params);
      }
    });
    renderer3.setRenderTarget(shadowMap);
    renderer3.render(scene3, light.shadow.camera);
    renderer3.setRenderTarget(currentRenderTarget);
    renderer3.setRenderObjectFunction(currentRenderObjectFunction);
    scene3.overrideMaterial = currentOverrideMaterial;
  }
  disposeShadow() {
    this.shadowMap.dispose();
    this.shadowMap = null;
    this.shadowNode = null;
    this.shadowColorNode = null;
    this.baseColorNode = null;
    this.updateBeforeType = NodeUpdateType.NONE;
  }
  updateBefore(frame) {
    const shadow = this.light.shadow;
    const needsUpdate = shadow.needsUpdate || shadow.autoUpdate;
    if (needsUpdate) {
      this.updateShadow(frame);
      if (this.shadowMap.depthTexture.version === this._depthVersionCached) {
        shadow.needsUpdate = false;
      }
    }
  }
  update() {
    const { light } = this;
    this.color.copy(light.color).multiplyScalar(light.intensity);
  }
};
AnalyticLightNode.type = registerNode("AnalyticLight", AnalyticLightNode);
var getDistanceAttenuation = Fn((inputs) => {
  const { lightDistance, cutoffDistance, decayExponent } = inputs;
  const distanceFalloff = lightDistance.pow(decayExponent).max(0.01).reciprocal();
  return cutoffDistance.greaterThan(0).select(
    distanceFalloff.mul(lightDistance.div(cutoffDistance).pow4().oneMinus().clamp().pow2()),
    distanceFalloff
  );
});
var PointLightNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
    this.cutoffDistanceNode = uniform(0);
    this.decayExponentNode = uniform(0);
  }
  update(frame) {
    const { light } = this;
    super.update(frame);
    this.cutoffDistanceNode.value = light.distance;
    this.decayExponentNode.value = light.decay;
  }
  setup(builder) {
    const { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;
    const lightingModel = builder.context.lightingModel;
    const lVector = objectViewPosition(light).sub(positionView);
    const lightDirection = lVector.normalize();
    const lightDistance = lVector.length();
    const lightAttenuation = getDistanceAttenuation({
      lightDistance,
      cutoffDistance: cutoffDistanceNode,
      decayExponent: decayExponentNode
    });
    const lightColor = colorNode.mul(lightAttenuation);
    const reflectedLight = builder.context.reflectedLight;
    lightingModel.direct({
      lightDirection,
      lightColor,
      reflectedLight
    }, builder.stack, builder);
  }
};
PointLightNode.type = registerNode("PointLight", PointLightNode);
var DirectionalLightNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
  }
  setup(builder) {
    super.setup(builder);
    const lightingModel = builder.context.lightingModel;
    const lightColor = this.colorNode;
    const lightDirection = lightTargetDirection(this.light);
    const reflectedLight = builder.context.reflectedLight;
    lightingModel.direct({
      lightDirection,
      lightColor,
      reflectedLight
    }, builder.stack, builder);
  }
};
DirectionalLightNode.type = registerNode("DirectionalLight", DirectionalLightNode);
var _matrix41 = new Matrix42();
var _matrix422 = new Matrix42();
var ltcLib = null;
var RectAreaLightNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
    this.halfHeight = uniform(new Vector32());
    this.halfWidth = uniform(new Vector32());
  }
  update(frame) {
    super.update(frame);
    const { light } = this;
    const viewMatrix = frame.camera.matrixWorldInverse;
    _matrix422.identity();
    _matrix41.copy(light.matrixWorld);
    _matrix41.premultiply(viewMatrix);
    _matrix422.extractRotation(_matrix41);
    this.halfWidth.value.set(light.width * 0.5, 0, 0);
    this.halfHeight.value.set(0, light.height * 0.5, 0);
    this.halfWidth.value.applyMatrix4(_matrix422);
    this.halfHeight.value.applyMatrix4(_matrix422);
  }
  setup(builder) {
    super.setup(builder);
    let ltc_1, ltc_2;
    if (builder.isAvailable("float32Filterable")) {
      ltc_1 = texture(ltcLib.LTC_FLOAT_1);
      ltc_2 = texture(ltcLib.LTC_FLOAT_2);
    } else {
      ltc_1 = texture(ltcLib.LTC_HALF_1);
      ltc_2 = texture(ltcLib.LTC_HALF_2);
    }
    const { colorNode, light } = this;
    const lightingModel = builder.context.lightingModel;
    const lightPosition = objectViewPosition(light);
    const reflectedLight = builder.context.reflectedLight;
    lightingModel.directRectArea({
      lightColor: colorNode,
      lightPosition,
      halfWidth: this.halfWidth,
      halfHeight: this.halfHeight,
      reflectedLight,
      ltc_1,
      ltc_2
    }, builder.stack, builder);
  }
  static setLTC(ltc) {
    ltcLib = ltc;
  }
};
RectAreaLightNode.type = registerNode("RectAreaLight", RectAreaLightNode);
var SpotLightNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
    this.coneCosNode = uniform(0);
    this.penumbraCosNode = uniform(0);
    this.cutoffDistanceNode = uniform(0);
    this.decayExponentNode = uniform(0);
  }
  update(frame) {
    super.update(frame);
    const { light } = this;
    this.coneCosNode.value = Math.cos(light.angle);
    this.penumbraCosNode.value = Math.cos(light.angle * (1 - light.penumbra));
    this.cutoffDistanceNode.value = light.distance;
    this.decayExponentNode.value = light.decay;
  }
  getSpotAttenuation(angleCosine) {
    const { coneCosNode, penumbraCosNode } = this;
    return smoothstep2(coneCosNode, penumbraCosNode, angleCosine);
  }
  setup(builder) {
    super.setup(builder);
    const lightingModel = builder.context.lightingModel;
    const { colorNode, cutoffDistanceNode, decayExponentNode, light } = this;
    const lVector = objectViewPosition(light).sub(positionView);
    const lightDirection = lVector.normalize();
    const angleCos = lightDirection.dot(lightTargetDirection(light));
    const spotAttenuation = this.getSpotAttenuation(angleCos);
    const lightDistance = lVector.length();
    const lightAttenuation = getDistanceAttenuation({
      lightDistance,
      cutoffDistance: cutoffDistanceNode,
      decayExponent: decayExponentNode
    });
    const lightColor = colorNode.mul(spotAttenuation).mul(lightAttenuation);
    const reflectedLight = builder.context.reflectedLight;
    lightingModel.direct({
      lightDirection,
      lightColor,
      reflectedLight
    }, builder.stack, builder);
  }
};
SpotLightNode.type = registerNode("SpotLight", SpotLightNode);
var IESSpotLightNode = class extends SpotLightNode {
  getSpotAttenuation(angleCosine) {
    const iesMap = this.light.iesMap;
    let spotAttenuation = null;
    if (iesMap && iesMap.isTexture === true) {
      const angle2 = angleCosine.acos().mul(1 / Math.PI);
      spotAttenuation = texture(iesMap, vec2(angle2, 0), 0).r;
    } else {
      spotAttenuation = super.getSpotAttenuation(angleCosine);
    }
    return spotAttenuation;
  }
};
IESSpotLightNode.type = registerNode("IESSpotLight", IESSpotLightNode);
var AmbientLightNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
  }
  setup({ context: context2 }) {
    context2.irradiance.addAssign(this.colorNode);
  }
};
AmbientLightNode.type = registerNode("AmbientLight", AmbientLightNode);
var HemisphereLightNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
    this.lightPositionNode = objectPosition(light);
    this.lightDirectionNode = this.lightPositionNode.normalize();
    this.groundColorNode = uniform(new Color3());
  }
  update(frame) {
    const { light } = this;
    super.update(frame);
    this.lightPositionNode.object3d = light;
    this.groundColorNode.value.copy(light.groundColor).multiplyScalar(light.intensity);
  }
  setup(builder) {
    const { colorNode, groundColorNode, lightDirectionNode } = this;
    const dotNL = normalView.dot(lightDirectionNode);
    const hemiDiffuseWeight = dotNL.mul(0.5).add(0.5);
    const irradiance = mix(groundColorNode, colorNode, hemiDiffuseWeight);
    builder.context.irradiance.addAssign(irradiance);
  }
};
HemisphereLightNode.type = registerNode("HemisphereLight", HemisphereLightNode);
var LightProbeNode = class extends AnalyticLightNode {
  constructor(light = null) {
    super(light);
    const array3 = [];
    for (let i2 = 0; i2 < 9; i2++) array3.push(new Vector32());
    this.lightProbe = uniformArray(array3);
  }
  update(frame) {
    const { light } = this;
    super.update(frame);
    for (let i2 = 0; i2 < 9; i2++) {
      this.lightProbe.array[i2].copy(light.sh.coefficients[i2]).multiplyScalar(light.intensity);
    }
  }
  setup(builder) {
    const irradiance = shGetIrradianceAt(normalWorld, this.lightProbe);
    builder.context.irradiance.addAssign(irradiance);
  }
};
LightProbeNode.type = registerNode("LightProbe", LightProbeNode);
var shGetIrradianceAt = Fn(([normal2, shCoefficients]) => {
  const x2 = normal2.x, y2 = normal2.y, z2 = normal2.z;
  const result = shCoefficients.element(0).mul(0.886227);
  result.addAssign(shCoefficients.element(1).mul(2 * 0.511664).mul(y2));
  result.addAssign(shCoefficients.element(2).mul(2 * 0.511664).mul(z2));
  result.addAssign(shCoefficients.element(3).mul(2 * 0.511664).mul(x2));
  result.addAssign(shCoefficients.element(4).mul(2 * 0.429043).mul(x2).mul(y2));
  result.addAssign(shCoefficients.element(5).mul(2 * 0.429043).mul(y2).mul(z2));
  result.addAssign(shCoefficients.element(6).mul(z2.mul(z2).mul(0.743125).sub(0.247708)));
  result.addAssign(shCoefficients.element(7).mul(2 * 0.429043).mul(x2).mul(z2));
  result.addAssign(shCoefficients.element(8).mul(0.429043).mul(mul(x2, x2).sub(mul(y2, y2))));
  return result;
});
var NodeParser = class {
  parseFunction() {
    console.warn("Abstract function.");
  }
};
var NodeFunction = class {
  constructor(type, inputs, name = "", precision = "") {
    this.type = type;
    this.inputs = inputs;
    this.name = name;
    this.precision = precision;
  }
  getCode() {
    console.warn("Abstract function.");
  }
};
NodeFunction.isNodeFunction = true;
var declarationRegexp$1 = /^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i;
var propertiesRegexp$1 = /[a-z_0-9]+/ig;
var pragmaMain = "#pragma main";
var parse$1 = (source) => {
  source = source.trim();
  const pragmaMainIndex = source.indexOf(pragmaMain);
  const mainCode = pragmaMainIndex !== -1 ? source.slice(pragmaMainIndex + pragmaMain.length) : source;
  const declaration = mainCode.match(declarationRegexp$1);
  if (declaration !== null && declaration.length === 5) {
    const inputsCode = declaration[4];
    const propsMatches = [];
    let nameMatch = null;
    while ((nameMatch = propertiesRegexp$1.exec(inputsCode)) !== null) {
      propsMatches.push(nameMatch);
    }
    const inputs = [];
    let i2 = 0;
    while (i2 < propsMatches.length) {
      const isConst = propsMatches[i2][0] === "const";
      if (isConst === true) {
        i2++;
      }
      let qualifier = propsMatches[i2][0];
      if (qualifier === "in" || qualifier === "out" || qualifier === "inout") {
        i2++;
      } else {
        qualifier = "";
      }
      const type2 = propsMatches[i2++][0];
      let count2 = Number.parseInt(propsMatches[i2][0]);
      if (Number.isNaN(count2) === false) i2++;
      else count2 = null;
      const name2 = propsMatches[i2++][0];
      inputs.push(new NodeFunctionInput(type2, name2, count2, qualifier, isConst));
    }
    const blockCode = mainCode.substring(declaration[0].length);
    const name = declaration[3] !== void 0 ? declaration[3] : "";
    const type = declaration[2];
    const precision = declaration[1] !== void 0 ? declaration[1] : "";
    const headerCode = pragmaMainIndex !== -1 ? source.slice(0, pragmaMainIndex) : "";
    return {
      type,
      inputs,
      name,
      precision,
      inputsCode,
      blockCode,
      headerCode
    };
  } else {
    throw new Error("FunctionNode: Function is not a GLSL code.");
  }
};
var GLSLNodeFunction = class extends NodeFunction {
  constructor(source) {
    const { type, inputs, name, precision, inputsCode, blockCode, headerCode } = parse$1(source);
    super(type, inputs, name, precision);
    this.inputsCode = inputsCode;
    this.blockCode = blockCode;
    this.headerCode = headerCode;
  }
  getCode(name = this.name) {
    let code2;
    const blockCode = this.blockCode;
    if (blockCode !== "") {
      const { type, inputsCode, headerCode, precision } = this;
      let declarationCode = `${type} ${name} ( ${inputsCode.trim()} )`;
      if (precision !== "") {
        declarationCode = `${precision} ${declarationCode}`;
      }
      code2 = headerCode + declarationCode + blockCode;
    } else {
      code2 = "";
    }
    return code2;
  }
};
var GLSLNodeParser = class extends NodeParser {
  parseFunction(source) {
    return new GLSLNodeFunction(source);
  }
};
function painterSortStable2(a2, b) {
  if (a2.groupOrder !== b.groupOrder) {
    return a2.groupOrder - b.groupOrder;
  } else if (a2.renderOrder !== b.renderOrder) {
    return a2.renderOrder - b.renderOrder;
  } else if (a2.material.id !== b.material.id) {
    return a2.material.id - b.material.id;
  } else if (a2.z !== b.z) {
    return a2.z - b.z;
  } else {
    return a2.id - b.id;
  }
}
function reversePainterSortStable2(a2, b) {
  if (a2.groupOrder !== b.groupOrder) {
    return a2.groupOrder - b.groupOrder;
  } else if (a2.renderOrder !== b.renderOrder) {
    return a2.renderOrder - b.renderOrder;
  } else if (a2.z !== b.z) {
    return b.z - a2.z;
  } else {
    return a2.id - b.id;
  }
}
var RenderList = class {
  constructor() {
    this.renderItems = [];
    this.renderItemsIndex = 0;
    this.opaque = [];
    this.transparent = [];
    this.bundles = [];
    this.lightsNode = new LightsNode([]);
    this.lightsArray = [];
    this.occlusionQueryCount = 0;
  }
  begin() {
    this.renderItemsIndex = 0;
    this.opaque.length = 0;
    this.transparent.length = 0;
    this.bundles.length = 0;
    this.lightsArray.length = 0;
    this.occlusionQueryCount = 0;
    return this;
  }
  getNextRenderItem(object2, geometry, material, groupOrder, z2, group2) {
    let renderItem = this.renderItems[this.renderItemsIndex];
    if (renderItem === void 0) {
      renderItem = {
        id: object2.id,
        object: object2,
        geometry,
        material,
        groupOrder,
        renderOrder: object2.renderOrder,
        z: z2,
        group: group2
      };
      this.renderItems[this.renderItemsIndex] = renderItem;
    } else {
      renderItem.id = object2.id;
      renderItem.object = object2;
      renderItem.geometry = geometry;
      renderItem.material = material;
      renderItem.groupOrder = groupOrder;
      renderItem.renderOrder = object2.renderOrder;
      renderItem.z = z2;
      renderItem.group = group2;
    }
    this.renderItemsIndex++;
    return renderItem;
  }
  push(object2, geometry, material, groupOrder, z2, group2) {
    const renderItem = this.getNextRenderItem(object2, geometry, material, groupOrder, z2, group2);
    if (object2.occlusionTest === true) this.occlusionQueryCount++;
    (material.transparent === true || material.transmission > 0 ? this.transparent : this.opaque).push(renderItem);
  }
  unshift(object2, geometry, material, groupOrder, z2, group2) {
    const renderItem = this.getNextRenderItem(object2, geometry, material, groupOrder, z2, group2);
    (material.transparent === true ? this.transparent : this.opaque).unshift(renderItem);
  }
  pushBundle(group2) {
    this.bundles.push(group2);
  }
  pushLight(light) {
    this.lightsArray.push(light);
  }
  getLightsNode() {
    return this.lightsNode.fromLights(this.lightsArray);
  }
  sort(customOpaqueSort, customTransparentSort) {
    if (this.opaque.length > 1) this.opaque.sort(customOpaqueSort || painterSortStable2);
    if (this.transparent.length > 1) this.transparent.sort(customTransparentSort || reversePainterSortStable2);
  }
  finish() {
    this.lightsNode.setLights(this.lightsArray);
    for (let i2 = this.renderItemsIndex, il = this.renderItems.length; i2 < il; i2++) {
      const renderItem = this.renderItems[i2];
      if (renderItem.id === null) break;
      renderItem.id = null;
      renderItem.object = null;
      renderItem.geometry = null;
      renderItem.material = null;
      renderItem.groupOrder = null;
      renderItem.renderOrder = null;
      renderItem.z = null;
      renderItem.group = null;
    }
  }
};
var RenderLists = class {
  constructor() {
    this.lists = new ChainMap();
  }
  get(scene3, camera3) {
    const lists = this.lists;
    const keys = [scene3, camera3];
    let list = lists.get(keys);
    if (list === void 0) {
      list = new RenderList();
      lists.set(keys, list);
    }
    return list;
  }
  dispose() {
    this.lists = new ChainMap();
  }
};
var id = 0;
var RenderContext = class {
  constructor() {
    this.id = id++;
    this.color = true;
    this.clearColor = true;
    this.clearColorValue = { r: 0, g: 0, b: 0, a: 1 };
    this.depth = true;
    this.clearDepth = true;
    this.clearDepthValue = 1;
    this.stencil = false;
    this.clearStencil = true;
    this.clearStencilValue = 1;
    this.viewport = false;
    this.viewportValue = new Vector42();
    this.scissor = false;
    this.scissorValue = new Vector42();
    this.textures = null;
    this.depthTexture = null;
    this.activeCubeFace = 0;
    this.sampleCount = 1;
    this.width = 0;
    this.height = 0;
    this.isRenderContext = true;
  }
  getCacheKey() {
    return getCacheKey(this);
  }
};
function getCacheKey(renderContext) {
  const { textures, activeCubeFace } = renderContext;
  let key = "";
  for (const texture2 of textures) {
    key += texture2.id + ",";
  }
  key += activeCubeFace;
  return key;
}
var RenderContexts = class {
  constructor() {
    this.chainMaps = {};
  }
  get(scene3, camera3, renderTarget = null) {
    const chainKey = [scene3, camera3];
    let attachmentState;
    if (renderTarget === null) {
      attachmentState = "default";
    } else {
      const format3 = renderTarget.texture.format;
      const count2 = renderTarget.textures.length;
      attachmentState = `${count2}:${format3}:${renderTarget.samples}:${renderTarget.depthBuffer}:${renderTarget.stencilBuffer}`;
    }
    const chainMap = this.getChainMap(attachmentState);
    let renderState = chainMap.get(chainKey);
    if (renderState === void 0) {
      renderState = new RenderContext();
      chainMap.set(chainKey, renderState);
    }
    if (renderTarget !== null) renderState.sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
    return renderState;
  }
  getChainMap(attachmentState) {
    return this.chainMaps[attachmentState] || (this.chainMaps[attachmentState] = new ChainMap());
  }
  dispose() {
    this.chainMaps = {};
  }
};
var _size = new Vector32();
var Textures = class extends DataMap {
  constructor(renderer3, backend, info) {
    super();
    this.renderer = renderer3;
    this.backend = backend;
    this.info = info;
  }
  updateRenderTarget(renderTarget, activeMipmapLevel = 0) {
    const renderTargetData = this.get(renderTarget);
    const sampleCount = renderTarget.samples === 0 ? 1 : renderTarget.samples;
    const depthTextureMips = renderTargetData.depthTextureMips || (renderTargetData.depthTextureMips = {});
    const textures = renderTarget.textures;
    const size = this.getSize(textures[0]);
    const mipWidth = size.width >> activeMipmapLevel;
    const mipHeight = size.height >> activeMipmapLevel;
    let depthTexture = renderTarget.depthTexture || depthTextureMips[activeMipmapLevel];
    let textureNeedsUpdate = false;
    if (depthTexture === void 0) {
      depthTexture = new DepthTexture2();
      depthTexture.format = renderTarget.stencilBuffer ? DepthStencilFormat2 : DepthFormat2;
      depthTexture.type = renderTarget.stencilBuffer ? UnsignedInt248Type2 : UnsignedIntType2;
      depthTexture.image.width = mipWidth;
      depthTexture.image.height = mipHeight;
      depthTextureMips[activeMipmapLevel] = depthTexture;
    }
    if (renderTargetData.width !== size.width || size.height !== renderTargetData.height) {
      textureNeedsUpdate = true;
      depthTexture.needsUpdate = true;
      depthTexture.image.width = mipWidth;
      depthTexture.image.height = mipHeight;
    }
    renderTargetData.width = size.width;
    renderTargetData.height = size.height;
    renderTargetData.textures = textures;
    renderTargetData.depthTexture = depthTexture;
    renderTargetData.depth = renderTarget.depthBuffer;
    renderTargetData.stencil = renderTarget.stencilBuffer;
    renderTargetData.renderTarget = renderTarget;
    if (renderTargetData.sampleCount !== sampleCount) {
      textureNeedsUpdate = true;
      depthTexture.needsUpdate = true;
      renderTargetData.sampleCount = sampleCount;
    }
    const options = { sampleCount };
    for (let i2 = 0; i2 < textures.length; i2++) {
      const texture2 = textures[i2];
      if (textureNeedsUpdate) texture2.needsUpdate = true;
      this.updateTexture(texture2, options);
    }
    this.updateTexture(depthTexture, options);
    if (renderTargetData.initialized !== true) {
      renderTargetData.initialized = true;
      const onDispose = () => {
        renderTarget.removeEventListener("dispose", onDispose);
        for (let i2 = 0; i2 < textures.length; i2++) {
          this._destroyTexture(textures[i2]);
        }
        this._destroyTexture(depthTexture);
        this.delete(renderTarget);
      };
      renderTarget.addEventListener("dispose", onDispose);
    }
  }
  updateTexture(texture2, options = {}) {
    const textureData = this.get(texture2);
    if (textureData.initialized === true && textureData.version === texture2.version) return;
    const isRenderTarget = texture2.isRenderTargetTexture || texture2.isDepthTexture || texture2.isFramebufferTexture;
    const backend = this.backend;
    if (isRenderTarget && textureData.initialized === true) {
      backend.destroySampler(texture2);
      backend.destroyTexture(texture2);
    }
    if (texture2.isFramebufferTexture) {
      const renderer3 = this.renderer;
      const renderTarget = renderer3.getRenderTarget();
      if (renderTarget) {
        texture2.type = renderTarget.texture.type;
      } else {
        texture2.type = UnsignedByteType2;
      }
    }
    const { width, height, depth: depth2 } = this.getSize(texture2);
    options.width = width;
    options.height = height;
    options.depth = depth2;
    options.needsMipmaps = this.needsMipmaps(texture2);
    options.levels = options.needsMipmaps ? this.getMipLevels(texture2, width, height) : 1;
    if (isRenderTarget || texture2.isStorageTexture === true) {
      backend.createSampler(texture2);
      backend.createTexture(texture2, options);
      textureData.generation = texture2.version;
    } else {
      const needsCreate = textureData.initialized !== true;
      if (needsCreate) backend.createSampler(texture2);
      if (texture2.version > 0) {
        const image = texture2.image;
        if (image === void 0) {
          console.warn("THREE.Renderer: Texture marked for update but image is undefined.");
        } else if (image.complete === false) {
          console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");
        } else {
          if (texture2.images) {
            const images = [];
            for (const image2 of texture2.images) {
              images.push(image2);
            }
            options.images = images;
          } else {
            options.image = image;
          }
          if (textureData.isDefaultTexture === void 0 || textureData.isDefaultTexture === true) {
            backend.createTexture(texture2, options);
            textureData.isDefaultTexture = false;
            textureData.generation = texture2.version;
          }
          if (texture2.source.dataReady === true) backend.updateTexture(texture2, options);
          if (options.needsMipmaps && texture2.mipmaps.length === 0) backend.generateMipmaps(texture2);
        }
      } else {
        backend.createDefaultTexture(texture2);
        textureData.isDefaultTexture = true;
        textureData.generation = texture2.version;
      }
    }
    if (textureData.initialized !== true) {
      textureData.initialized = true;
      textureData.generation = texture2.version;
      this.info.memory.textures++;
      const onDispose = () => {
        texture2.removeEventListener("dispose", onDispose);
        this._destroyTexture(texture2);
        this.info.memory.textures--;
      };
      texture2.addEventListener("dispose", onDispose);
    }
    textureData.version = texture2.version;
  }
  getSize(texture2, target = _size) {
    let image = texture2.images ? texture2.images[0] : texture2.image;
    if (image) {
      if (image.image !== void 0) image = image.image;
      target.width = image.width;
      target.height = image.height;
      target.depth = texture2.isCubeTexture ? 6 : image.depth || 1;
    } else {
      target.width = target.height = target.depth = 1;
    }
    return target;
  }
  getMipLevels(texture2, width, height) {
    let mipLevelCount;
    if (texture2.isCompressedTexture) {
      mipLevelCount = texture2.mipmaps.length;
    } else {
      mipLevelCount = Math.floor(Math.log2(Math.max(width, height))) + 1;
    }
    return mipLevelCount;
  }
  needsMipmaps(texture2) {
    if (this.isEnvironmentTexture(texture2)) return true;
    return texture2.isCompressedTexture === true || texture2.minFilter !== NearestFilter2 && texture2.minFilter !== LinearFilter2;
  }
  isEnvironmentTexture(texture2) {
    const mapping = texture2.mapping;
    return mapping === EquirectangularReflectionMapping2 || mapping === EquirectangularRefractionMapping2 || (mapping === CubeReflectionMapping2 || mapping === CubeRefractionMapping2);
  }
  _destroyTexture(texture2) {
    this.backend.destroySampler(texture2);
    this.backend.destroyTexture(texture2);
    this.delete(texture2);
  }
};
var Color4 = class extends Color3 {
  constructor(r2, g2, b, a2 = 1) {
    super(r2, g2, b);
    this.a = a2;
  }
  set(r2, g2, b, a2 = 1) {
    this.a = a2;
    return super.set(r2, g2, b);
  }
  copy(color3) {
    if (color3.a !== void 0) this.a = color3.a;
    return super.copy(color3);
  }
  clone() {
    return new this.constructor(this.r, this.g, this.b, this.a);
  }
};
var hash = Fn(([seed]) => {
  const state = seed.toUint().mul(747796405).add(2891336453);
  const word = state.shiftRight(state.shiftRight(28).add(4)).bitXor(state).mul(277803737);
  const result = word.shiftRight(22).bitXor(word);
  return result.toFloat().mul(1 / 2 ** 32);
});
var tri = Fn(([x2]) => {
  return x2.fract().sub(0.5).abs();
}).setLayout({
  name: "tri",
  type: "float",
  inputs: [
    { name: "x", type: "float" }
  ]
});
var tri3 = Fn(([p2]) => {
  return vec3(tri(p2.z.add(tri(p2.y.mul(1)))), tri(p2.z.add(tri(p2.x.mul(1)))), tri(p2.y.add(tri(p2.x.mul(1)))));
}).setLayout({
  name: "tri3",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var triNoise3D = Fn(([p_immutable, spd, time2]) => {
  const p2 = vec3(p_immutable).toVar();
  const z2 = float(1.4).toVar();
  const rz = float(0).toVar();
  const bp = vec3(p2).toVar();
  Loop({ start: float(0), end: float(3), type: "float", condition: "<=" }, () => {
    const dg = vec3(tri3(bp.mul(2))).toVar();
    p2.addAssign(dg.add(time2.mul(float(0.1).mul(spd))));
    bp.mulAssign(1.8);
    z2.mulAssign(1.5);
    p2.mulAssign(1.2);
    const t4 = float(tri(p2.z.add(tri(p2.x.add(tri(p2.y)))))).toVar();
    rz.addAssign(t4.div(z2));
    bp.addAssign(0.14);
  });
  return rz;
}).setLayout({
  name: "triNoise3D",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "spd", type: "float" },
    { name: "time", type: "float" }
  ]
});
var rotateUV = Fn(([uv2, rotation, center = vec2(0.5)]) => {
  return rotate(uv2.sub(center), rotation).add(center);
});
var spherizeUV = Fn(([uv2, strength, center = vec2(0.5)]) => {
  const delta = uv2.sub(center);
  const delta2 = delta.dot(delta);
  const delta4 = delta2.mul(delta2);
  const deltaOffset = delta4.mul(strength);
  return uv2.add(delta.mul(deltaOffset));
});
var billboarding = Fn(({ position = null, horizontal = true, vertical = false }) => {
  let worldMatrix;
  if (position !== null) {
    worldMatrix = modelWorldMatrix.toVar();
    worldMatrix[3][0] = position.x;
    worldMatrix[3][1] = position.y;
    worldMatrix[3][2] = position.z;
  } else {
    worldMatrix = modelWorldMatrix;
  }
  const modelViewMatrix2 = cameraViewMatrix.mul(worldMatrix);
  if (defined(horizontal)) {
    modelViewMatrix2[0][0] = modelWorldMatrix[0].length();
    modelViewMatrix2[0][1] = 0;
    modelViewMatrix2[0][2] = 0;
  }
  if (defined(vertical)) {
    modelViewMatrix2[1][0] = 0;
    modelViewMatrix2[1][1] = modelWorldMatrix[1].length();
    modelViewMatrix2[1][2] = 0;
  }
  modelViewMatrix2[2][0] = 0;
  modelViewMatrix2[2][1] = 0;
  modelViewMatrix2[2][2] = 1;
  return cameraProjectionMatrix.mul(modelViewMatrix2).mul(positionLocal);
});
var viewportSafeUV = Fn(([uv2 = null]) => {
  const depth2 = linearDepth();
  const depthDiff = linearDepth(viewportDepthTexture(uv2)).sub(depth2);
  const finalUV = depthDiff.lessThan(0).select(viewportUV, uv2);
  return finalUV;
});
var _matrixCache = /* @__PURE__ */ new WeakMap();
var VelocityNode = class extends TempNode {
  constructor() {
    super("vec2");
    this.updateType = NodeUpdateType.OBJECT;
    this.updateAfterType = NodeUpdateType.OBJECT;
    this.previousProjectionMatrix = uniform(new Matrix42());
    this.previousModelViewMatrix = uniform(new Matrix42());
  }
  update({ camera: camera3, object: object2 }) {
    const previousModelMatrix = getPreviousMatrix(object2);
    const previousCameraMatrix = getPreviousMatrix(camera3);
    this.previousModelViewMatrix.value.copy(previousModelMatrix);
    this.previousProjectionMatrix.value.copy(previousCameraMatrix);
  }
  updateAfter({ camera: camera3, object: object2 }) {
    const previousModelMatrix = getPreviousMatrix(object2);
    const previousCameraMatrix = getPreviousMatrix(camera3);
    previousModelMatrix.copy(object2.modelViewMatrix);
    previousCameraMatrix.copy(camera3.projectionMatrix);
  }
  setup() {
    const clipPositionCurrent = cameraProjectionMatrix.mul(modelViewMatrix).mul(positionLocal);
    const clipPositionPrevious = this.previousProjectionMatrix.mul(this.previousModelViewMatrix).mul(positionPrevious);
    const ndcPositionCurrent = clipPositionCurrent.xy.div(clipPositionCurrent.w);
    const ndcPositionPrevious = clipPositionPrevious.xy.div(clipPositionPrevious.w);
    const velocity2 = sub(ndcPositionCurrent, ndcPositionPrevious);
    return velocity2;
  }
};
function getPreviousMatrix(object2) {
  let previousMatrix = _matrixCache.get(object2);
  if (previousMatrix === void 0) {
    previousMatrix = new Matrix42();
    _matrixCache.set(object2, previousMatrix);
  }
  return previousMatrix;
}
VelocityNode.type = registerNode("Velocity", VelocityNode);
var velocity = nodeImmutable(VelocityNode);
var burn = Fn(([base, blend]) => {
  return min$1(1, base.oneMinus().div(blend)).oneMinus();
}).setLayout({
  name: "burnBlend",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var dodge = Fn(([base, blend]) => {
  return min$1(base.div(blend.oneMinus()), 1);
}).setLayout({
  name: "dodgeBlend",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var screen = Fn(([base, blend]) => {
  return base.oneMinus().mul(blend.oneMinus()).oneMinus();
}).setLayout({
  name: "screenBlend",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var overlay = Fn(([base, blend]) => {
  return mix(base.mul(2).mul(blend), base.oneMinus().mul(2).mul(blend.oneMinus()).oneMinus(), step(0.5, base));
}).setLayout({
  name: "overlayBlend",
  type: "vec3",
  inputs: [
    { name: "base", type: "vec3" },
    { name: "blend", type: "vec3" }
  ]
});
var motionBlur = Fn(([inputNode, velocity2, numSamples = int(16)]) => {
  const sampleColor = (uv2) => inputNode.uv(uv2);
  const uvs = uv();
  const colorResult = sampleColor(uvs).toVar();
  const fSamples = float(numSamples);
  Loop({ start: int(1), end: numSamples, type: "int", condition: "<=" }, ({ i: i2 }) => {
    const offset = velocity2.mul(float(i2).div(fSamples.sub(1)).sub(0.5));
    colorResult.addAssign(sampleColor(uvs.add(offset)));
  });
  colorResult.divAssign(fSamples);
  return colorResult;
});
var bleach = Fn(([color3, opacity = 1]) => {
  const base = color3;
  const lum = luminance(base.rgb);
  const blend = vec3(lum);
  const L2 = min$1(1, max$1(0, float(10).mul(lum.sub(0.45))));
  const result1 = blend.mul(base.rgb).mul(2);
  const result2 = float(2).mul(blend.oneMinus()).mul(base.rgb.oneMinus()).oneMinus();
  const newColor = mix(result1, result2, L2);
  const A22 = base.a.mul(opacity);
  const mixRGB = A22.mul(newColor.rgb);
  mixRGB.addAssign(base.rgb.mul(A22.oneMinus()));
  return vec4(mixRGB, base.a);
});
var sepia = Fn(([color3]) => {
  const c4 = vec3(color3);
  return vec4(
    dot(c4, vec3(0.393, 0.769, 0.189)),
    dot(c4, vec3(0.349, 0.686, 0.168)),
    dot(c4, vec3(0.272, 0.534, 0.131)),
    color3.a
  );
});
var sRGBToLinear = Fn(([color3]) => {
  const a2 = color3.mul(0.9478672986).add(0.0521327014).pow(2.4);
  const b = color3.mul(0.0773993808);
  const factor = color3.lessThanEqual(0.04045);
  const rgbResult = mix(a2, b, factor);
  return rgbResult;
}).setLayout({
  name: "sRGBToLinear",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" }
  ]
});
var LinearTosRGB = Fn(([color3]) => {
  const a2 = color3.pow(0.41666).mul(1.055).sub(0.055);
  const b = color3.mul(12.92);
  const factor = color3.lessThanEqual(31308e-7);
  const rgbResult = mix(a2, b, factor);
  return rgbResult;
}).setLayout({
  name: "LinearTosRGB",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" }
  ]
});
var ColorSpaceFunctions = Object.freeze({
  __proto__: null,
  LinearTosRGB,
  sRGBToLinear
});
var LinearToneMapping2 = Fn(([color3, exposure]) => {
  return color3.mul(exposure).clamp();
}).setLayout({
  name: "LinearToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var ReinhardToneMapping2 = Fn(([color3, exposure]) => {
  color3 = color3.mul(exposure);
  return color3.div(color3.add(1)).clamp();
}).setLayout({
  name: "ReinhardToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var CineonToneMapping2 = Fn(([color3, exposure]) => {
  color3 = color3.mul(exposure);
  color3 = color3.sub(4e-3).max(0);
  const a2 = color3.mul(color3.mul(6.2).add(0.5));
  const b = color3.mul(color3.mul(6.2).add(1.7)).add(0.06);
  return a2.div(b).pow(2.2);
}).setLayout({
  name: "CineonToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var RRTAndODTFit = Fn(([color3]) => {
  const a2 = color3.mul(color3.add(0.0245786)).sub(90537e-9);
  const b = color3.mul(color3.add(0.432951).mul(0.983729)).add(0.238081);
  return a2.div(b);
});
var ACESFilmicToneMapping2 = Fn(([color3, exposure]) => {
  const ACESInputMat = mat3(
    0.59719,
    0.35458,
    0.04823,
    0.076,
    0.90834,
    0.01566,
    0.0284,
    0.13383,
    0.83777
  );
  const ACESOutputMat = mat3(
    1.60475,
    -0.53108,
    -0.07367,
    -0.10208,
    1.10813,
    -605e-5,
    -327e-5,
    -0.07276,
    1.07602
  );
  color3 = color3.mul(exposure).div(0.6);
  color3 = ACESInputMat.mul(color3);
  color3 = RRTAndODTFit(color3);
  color3 = ACESOutputMat.mul(color3);
  return color3.clamp();
}).setLayout({
  name: "ACESFilmicToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var LINEAR_REC2020_TO_LINEAR_SRGB = mat3(vec3(1.6605, -0.1246, -0.0182), vec3(-0.5876, 1.1329, -0.1006), vec3(-0.0728, -83e-4, 1.1187));
var LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(vec3(0.6274, 0.0691, 0.0164), vec3(0.3293, 0.9195, 0.088), vec3(0.0433, 0.0113, 0.8956));
var agxDefaultContrastApprox = Fn(([x_immutable]) => {
  const x2 = vec3(x_immutable).toVar();
  const x22 = vec3(x2.mul(x2)).toVar();
  const x4 = vec3(x22.mul(x22)).toVar();
  return float(15.5).mul(x4.mul(x22)).sub(mul(40.14, x4.mul(x2))).add(mul(31.96, x4).sub(mul(6.868, x22.mul(x2))).add(mul(0.4298, x22).add(mul(0.1191, x2).sub(232e-5))));
});
var AgXToneMapping2 = Fn(([color3, exposure]) => {
  const colortone = vec3(color3).toVar();
  const AgXInsetMatrix = mat3(vec3(0.856627153315983, 0.137318972929847, 0.11189821299995), vec3(0.0951212405381588, 0.761241990602591, 0.0767994186031903), vec3(0.0482516061458583, 0.101439036467562, 0.811302368396859));
  const AgXOutsetMatrix = mat3(vec3(1.1271005818144368, -0.1413297634984383, -0.14132976349843826), vec3(-0.11060664309660323, 1.157823702216272, -0.11060664309660294), vec3(-0.016493938717834573, -0.016493938717834257, 1.2519364065950405));
  const AgxMinEv = float(-12.47393);
  const AgxMaxEv = float(4.026069);
  colortone.mulAssign(exposure);
  colortone.assign(LINEAR_SRGB_TO_LINEAR_REC2020.mul(colortone));
  colortone.assign(AgXInsetMatrix.mul(colortone));
  colortone.assign(max$1(colortone, 1e-10));
  colortone.assign(log22(colortone));
  colortone.assign(colortone.sub(AgxMinEv).div(AgxMaxEv.sub(AgxMinEv)));
  colortone.assign(clamp2(colortone, 0, 1));
  colortone.assign(agxDefaultContrastApprox(colortone));
  colortone.assign(AgXOutsetMatrix.mul(colortone));
  colortone.assign(pow4(max$1(vec3(0), colortone), vec3(2.2)));
  colortone.assign(LINEAR_REC2020_TO_LINEAR_SRGB.mul(colortone));
  colortone.assign(clamp2(colortone, 0, 1));
  return colortone;
}).setLayout({
  name: "AgXToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var NeutralToneMapping2 = Fn(([color3, exposure]) => {
  const StartCompression = float(0.8 - 0.04);
  const Desaturation = float(0.15);
  color3 = color3.mul(exposure);
  const x2 = min$1(color3.r, min$1(color3.g, color3.b));
  const offset = select(x2.lessThan(0.08), x2.sub(mul(6.25, x2.mul(x2))), 0.04);
  color3.subAssign(offset);
  const peak = max$1(color3.r, max$1(color3.g, color3.b));
  If(peak.lessThan(StartCompression), () => {
    return color3;
  });
  const d2 = sub(1, StartCompression);
  const newPeak = sub(1, d2.mul(d2).div(peak.add(d2.sub(StartCompression))));
  color3.mulAssign(newPeak.div(peak));
  const g2 = sub(1, div(1, Desaturation.mul(peak.sub(newPeak)).add(1)));
  return mix(color3, vec3(newPeak), g2);
}).setLayout({
  name: "NeutralToneMapping",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" },
    { name: "exposure", type: "float" }
  ]
});
var ToneMappingFunctions = Object.freeze({
  __proto__: null,
  ACESFilmicToneMapping: ACESFilmicToneMapping2,
  AgXToneMapping: AgXToneMapping2,
  CineonToneMapping: CineonToneMapping2,
  LinearToneMapping: LinearToneMapping2,
  NeutralToneMapping: NeutralToneMapping2,
  ReinhardToneMapping: ReinhardToneMapping2
});
var checker = Fn(([coord = uv()]) => {
  const uv2 = coord.mul(2);
  const cx = uv2.x.floor();
  const cy = uv2.y.floor();
  const result = cx.add(cy).mod(2);
  return result.sign();
});
var mx_select = Fn(([b_immutable, t_immutable, f_immutable]) => {
  const f2 = float(f_immutable).toVar();
  const t4 = float(t_immutable).toVar();
  const b = bool(b_immutable).toVar();
  return select(b, t4, f2);
}).setLayout({
  name: "mx_select",
  type: "float",
  inputs: [
    { name: "b", type: "bool" },
    { name: "t", type: "float" },
    { name: "f", type: "float" }
  ]
});
var mx_negate_if = Fn(([val_immutable, b_immutable]) => {
  const b = bool(b_immutable).toVar();
  const val = float(val_immutable).toVar();
  return select(b, val.negate(), val);
}).setLayout({
  name: "mx_negate_if",
  type: "float",
  inputs: [
    { name: "val", type: "float" },
    { name: "b", type: "bool" }
  ]
});
var mx_floor = Fn(([x_immutable]) => {
  const x2 = float(x_immutable).toVar();
  return int(floor(x2));
}).setLayout({
  name: "mx_floor",
  type: "int",
  inputs: [
    { name: "x", type: "float" }
  ]
});
var mx_floorfrac = Fn(([x_immutable, i2]) => {
  const x2 = float(x_immutable).toVar();
  i2.assign(mx_floor(x2));
  return x2.sub(float(i2));
});
var mx_bilerp_0 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable]) => {
  const t4 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v3 = float(v3_immutable).toVar();
  const v22 = float(v2_immutable).toVar();
  const v1 = float(v1_immutable).toVar();
  const v0 = float(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  return sub(1, t4).mul(v0.mul(s1).add(v1.mul(s2))).add(t4.mul(v22.mul(s1).add(v3.mul(s2))));
}).setLayout({
  name: "mx_bilerp_0",
  type: "float",
  inputs: [
    { name: "v0", type: "float" },
    { name: "v1", type: "float" },
    { name: "v2", type: "float" },
    { name: "v3", type: "float" },
    { name: "s", type: "float" },
    { name: "t", type: "float" }
  ]
});
var mx_bilerp_1 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable]) => {
  const t4 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v3 = vec3(v3_immutable).toVar();
  const v22 = vec3(v2_immutable).toVar();
  const v1 = vec3(v1_immutable).toVar();
  const v0 = vec3(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  return sub(1, t4).mul(v0.mul(s1).add(v1.mul(s2))).add(t4.mul(v22.mul(s1).add(v3.mul(s2))));
}).setLayout({
  name: "mx_bilerp_1",
  type: "vec3",
  inputs: [
    { name: "v0", type: "vec3" },
    { name: "v1", type: "vec3" },
    { name: "v2", type: "vec3" },
    { name: "v3", type: "vec3" },
    { name: "s", type: "float" },
    { name: "t", type: "float" }
  ]
});
var mx_bilerp = overloadingFn([mx_bilerp_0, mx_bilerp_1]);
var mx_trilerp_0 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable]) => {
  const r2 = float(r_immutable).toVar();
  const t4 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v7 = float(v7_immutable).toVar();
  const v6 = float(v6_immutable).toVar();
  const v5 = float(v5_immutable).toVar();
  const v4 = float(v4_immutable).toVar();
  const v3 = float(v3_immutable).toVar();
  const v22 = float(v2_immutable).toVar();
  const v1 = float(v1_immutable).toVar();
  const v0 = float(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  const t13 = float(sub(1, t4)).toVar();
  const r1 = float(sub(1, r2)).toVar();
  return r1.mul(t13.mul(v0.mul(s1).add(v1.mul(s2))).add(t4.mul(v22.mul(s1).add(v3.mul(s2))))).add(r2.mul(t13.mul(v4.mul(s1).add(v5.mul(s2))).add(t4.mul(v6.mul(s1).add(v7.mul(s2))))));
}).setLayout({
  name: "mx_trilerp_0",
  type: "float",
  inputs: [
    { name: "v0", type: "float" },
    { name: "v1", type: "float" },
    { name: "v2", type: "float" },
    { name: "v3", type: "float" },
    { name: "v4", type: "float" },
    { name: "v5", type: "float" },
    { name: "v6", type: "float" },
    { name: "v7", type: "float" },
    { name: "s", type: "float" },
    { name: "t", type: "float" },
    { name: "r", type: "float" }
  ]
});
var mx_trilerp_1 = Fn(([v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable]) => {
  const r2 = float(r_immutable).toVar();
  const t4 = float(t_immutable).toVar();
  const s2 = float(s_immutable).toVar();
  const v7 = vec3(v7_immutable).toVar();
  const v6 = vec3(v6_immutable).toVar();
  const v5 = vec3(v5_immutable).toVar();
  const v4 = vec3(v4_immutable).toVar();
  const v3 = vec3(v3_immutable).toVar();
  const v22 = vec3(v2_immutable).toVar();
  const v1 = vec3(v1_immutable).toVar();
  const v0 = vec3(v0_immutable).toVar();
  const s1 = float(sub(1, s2)).toVar();
  const t13 = float(sub(1, t4)).toVar();
  const r1 = float(sub(1, r2)).toVar();
  return r1.mul(t13.mul(v0.mul(s1).add(v1.mul(s2))).add(t4.mul(v22.mul(s1).add(v3.mul(s2))))).add(r2.mul(t13.mul(v4.mul(s1).add(v5.mul(s2))).add(t4.mul(v6.mul(s1).add(v7.mul(s2))))));
}).setLayout({
  name: "mx_trilerp_1",
  type: "vec3",
  inputs: [
    { name: "v0", type: "vec3" },
    { name: "v1", type: "vec3" },
    { name: "v2", type: "vec3" },
    { name: "v3", type: "vec3" },
    { name: "v4", type: "vec3" },
    { name: "v5", type: "vec3" },
    { name: "v6", type: "vec3" },
    { name: "v7", type: "vec3" },
    { name: "s", type: "float" },
    { name: "t", type: "float" },
    { name: "r", type: "float" }
  ]
});
var mx_trilerp = overloadingFn([mx_trilerp_0, mx_trilerp_1]);
var mx_gradient_float_0 = Fn(([hash_immutable, x_immutable, y_immutable]) => {
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash2 = uint(hash_immutable).toVar();
  const h2 = uint(hash2.bitAnd(uint(7))).toVar();
  const u5 = float(mx_select(h2.lessThan(uint(4)), x2, y2)).toVar();
  const v3 = float(mul(2, mx_select(h2.lessThan(uint(4)), y2, x2))).toVar();
  return mx_negate_if(u5, bool(h2.bitAnd(uint(1)))).add(mx_negate_if(v3, bool(h2.bitAnd(uint(2)))));
}).setLayout({
  name: "mx_gradient_float_0",
  type: "float",
  inputs: [
    { name: "hash", type: "uint" },
    { name: "x", type: "float" },
    { name: "y", type: "float" }
  ]
});
var mx_gradient_float_1 = Fn(([hash_immutable, x_immutable, y_immutable, z_immutable]) => {
  const z2 = float(z_immutable).toVar();
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash2 = uint(hash_immutable).toVar();
  const h2 = uint(hash2.bitAnd(uint(15))).toVar();
  const u5 = float(mx_select(h2.lessThan(uint(8)), x2, y2)).toVar();
  const v3 = float(mx_select(h2.lessThan(uint(4)), y2, mx_select(h2.equal(uint(12)).or(h2.equal(uint(14))), x2, z2))).toVar();
  return mx_negate_if(u5, bool(h2.bitAnd(uint(1)))).add(mx_negate_if(v3, bool(h2.bitAnd(uint(2)))));
}).setLayout({
  name: "mx_gradient_float_1",
  type: "float",
  inputs: [
    { name: "hash", type: "uint" },
    { name: "x", type: "float" },
    { name: "y", type: "float" },
    { name: "z", type: "float" }
  ]
});
var mx_gradient_float = overloadingFn([mx_gradient_float_0, mx_gradient_float_1]);
var mx_gradient_vec3_0 = Fn(([hash_immutable, x_immutable, y_immutable]) => {
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash2 = uvec3(hash_immutable).toVar();
  return vec3(mx_gradient_float(hash2.x, x2, y2), mx_gradient_float(hash2.y, x2, y2), mx_gradient_float(hash2.z, x2, y2));
}).setLayout({
  name: "mx_gradient_vec3_0",
  type: "vec3",
  inputs: [
    { name: "hash", type: "uvec3" },
    { name: "x", type: "float" },
    { name: "y", type: "float" }
  ]
});
var mx_gradient_vec3_1 = Fn(([hash_immutable, x_immutable, y_immutable, z_immutable]) => {
  const z2 = float(z_immutable).toVar();
  const y2 = float(y_immutable).toVar();
  const x2 = float(x_immutable).toVar();
  const hash2 = uvec3(hash_immutable).toVar();
  return vec3(mx_gradient_float(hash2.x, x2, y2, z2), mx_gradient_float(hash2.y, x2, y2, z2), mx_gradient_float(hash2.z, x2, y2, z2));
}).setLayout({
  name: "mx_gradient_vec3_1",
  type: "vec3",
  inputs: [
    { name: "hash", type: "uvec3" },
    { name: "x", type: "float" },
    { name: "y", type: "float" },
    { name: "z", type: "float" }
  ]
});
var mx_gradient_vec3 = overloadingFn([mx_gradient_vec3_0, mx_gradient_vec3_1]);
var mx_gradient_scale2d_0 = Fn(([v_immutable]) => {
  const v3 = float(v_immutable).toVar();
  return mul(0.6616, v3);
}).setLayout({
  name: "mx_gradient_scale2d_0",
  type: "float",
  inputs: [
    { name: "v", type: "float" }
  ]
});
var mx_gradient_scale3d_0 = Fn(([v_immutable]) => {
  const v3 = float(v_immutable).toVar();
  return mul(0.982, v3);
}).setLayout({
  name: "mx_gradient_scale3d_0",
  type: "float",
  inputs: [
    { name: "v", type: "float" }
  ]
});
var mx_gradient_scale2d_1 = Fn(([v_immutable]) => {
  const v3 = vec3(v_immutable).toVar();
  return mul(0.6616, v3);
}).setLayout({
  name: "mx_gradient_scale2d_1",
  type: "vec3",
  inputs: [
    { name: "v", type: "vec3" }
  ]
});
var mx_gradient_scale2d = overloadingFn([mx_gradient_scale2d_0, mx_gradient_scale2d_1]);
var mx_gradient_scale3d_1 = Fn(([v_immutable]) => {
  const v3 = vec3(v_immutable).toVar();
  return mul(0.982, v3);
}).setLayout({
  name: "mx_gradient_scale3d_1",
  type: "vec3",
  inputs: [
    { name: "v", type: "vec3" }
  ]
});
var mx_gradient_scale3d = overloadingFn([mx_gradient_scale3d_0, mx_gradient_scale3d_1]);
var mx_rotl32 = Fn(([x_immutable, k_immutable]) => {
  const k2 = int(k_immutable).toVar();
  const x2 = uint(x_immutable).toVar();
  return x2.shiftLeft(k2).bitOr(x2.shiftRight(int(32).sub(k2)));
}).setLayout({
  name: "mx_rotl32",
  type: "uint",
  inputs: [
    { name: "x", type: "uint" },
    { name: "k", type: "int" }
  ]
});
var mx_bjmix = Fn(([a2, b, c4]) => {
  a2.subAssign(c4);
  a2.bitXorAssign(mx_rotl32(c4, int(4)));
  c4.addAssign(b);
  b.subAssign(a2);
  b.bitXorAssign(mx_rotl32(a2, int(6)));
  a2.addAssign(c4);
  c4.subAssign(b);
  c4.bitXorAssign(mx_rotl32(b, int(8)));
  b.addAssign(a2);
  a2.subAssign(c4);
  a2.bitXorAssign(mx_rotl32(c4, int(16)));
  c4.addAssign(b);
  b.subAssign(a2);
  b.bitXorAssign(mx_rotl32(a2, int(19)));
  a2.addAssign(c4);
  c4.subAssign(b);
  c4.bitXorAssign(mx_rotl32(b, int(4)));
  b.addAssign(a2);
});
var mx_bjfinal = Fn(([a_immutable, b_immutable, c_immutable]) => {
  const c4 = uint(c_immutable).toVar();
  const b = uint(b_immutable).toVar();
  const a2 = uint(a_immutable).toVar();
  c4.bitXorAssign(b);
  c4.subAssign(mx_rotl32(b, int(14)));
  a2.bitXorAssign(c4);
  a2.subAssign(mx_rotl32(c4, int(11)));
  b.bitXorAssign(a2);
  b.subAssign(mx_rotl32(a2, int(25)));
  c4.bitXorAssign(b);
  c4.subAssign(mx_rotl32(b, int(16)));
  a2.bitXorAssign(c4);
  a2.subAssign(mx_rotl32(c4, int(4)));
  b.bitXorAssign(a2);
  b.subAssign(mx_rotl32(a2, int(14)));
  c4.bitXorAssign(b);
  c4.subAssign(mx_rotl32(b, int(24)));
  return c4;
}).setLayout({
  name: "mx_bjfinal",
  type: "uint",
  inputs: [
    { name: "a", type: "uint" },
    { name: "b", type: "uint" },
    { name: "c", type: "uint" }
  ]
});
var mx_bits_to_01 = Fn(([bits_immutable]) => {
  const bits = uint(bits_immutable).toVar();
  return float(bits).div(float(uint(int(4294967295))));
}).setLayout({
  name: "mx_bits_to_01",
  type: "float",
  inputs: [
    { name: "bits", type: "uint" }
  ]
});
var mx_fade = Fn(([t_immutable]) => {
  const t4 = float(t_immutable).toVar();
  return t4.mul(t4).mul(t4).mul(t4.mul(t4.mul(6).sub(15)).add(10));
}).setLayout({
  name: "mx_fade",
  type: "float",
  inputs: [
    { name: "t", type: "float" }
  ]
});
var mx_hash_int_0 = Fn(([x_immutable]) => {
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(1)).toVar();
  const seed = uint(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13))).toVar();
  return mx_bjfinal(seed.add(uint(x2)), seed, seed);
}).setLayout({
  name: "mx_hash_int_0",
  type: "uint",
  inputs: [
    { name: "x", type: "int" }
  ]
});
var mx_hash_int_1 = Fn(([x_immutable, y_immutable]) => {
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(2)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c4 = uint().toVar();
  a2.assign(b.assign(c4.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  return mx_bjfinal(a2, b, c4);
}).setLayout({
  name: "mx_hash_int_1",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" }
  ]
});
var mx_hash_int_2 = Fn(([x_immutable, y_immutable, z_immutable]) => {
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(3)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c4 = uint().toVar();
  a2.assign(b.assign(c4.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  c4.addAssign(uint(z2));
  return mx_bjfinal(a2, b, c4);
}).setLayout({
  name: "mx_hash_int_2",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" }
  ]
});
var mx_hash_int_3 = Fn(([x_immutable, y_immutable, z_immutable, xx_immutable]) => {
  const xx = int(xx_immutable).toVar();
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(4)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c4 = uint().toVar();
  a2.assign(b.assign(c4.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  c4.addAssign(uint(z2));
  mx_bjmix(a2, b, c4);
  a2.addAssign(uint(xx));
  return mx_bjfinal(a2, b, c4);
}).setLayout({
  name: "mx_hash_int_3",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" },
    { name: "xx", type: "int" }
  ]
});
var mx_hash_int_4 = Fn(([x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable]) => {
  const yy = int(yy_immutable).toVar();
  const xx = int(xx_immutable).toVar();
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const len = uint(uint(5)).toVar();
  const a2 = uint().toVar(), b = uint().toVar(), c4 = uint().toVar();
  a2.assign(b.assign(c4.assign(uint(int(3735928559)).add(len.shiftLeft(uint(2))).add(uint(13)))));
  a2.addAssign(uint(x2));
  b.addAssign(uint(y2));
  c4.addAssign(uint(z2));
  mx_bjmix(a2, b, c4);
  a2.addAssign(uint(xx));
  b.addAssign(uint(yy));
  return mx_bjfinal(a2, b, c4);
}).setLayout({
  name: "mx_hash_int_4",
  type: "uint",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" },
    { name: "xx", type: "int" },
    { name: "yy", type: "int" }
  ]
});
var mx_hash_int = overloadingFn([mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4]);
var mx_hash_vec3_0 = Fn(([x_immutable, y_immutable]) => {
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const h2 = uint(mx_hash_int(x2, y2)).toVar();
  const result = uvec3().toVar();
  result.x.assign(h2.bitAnd(int(255)));
  result.y.assign(h2.shiftRight(int(8)).bitAnd(int(255)));
  result.z.assign(h2.shiftRight(int(16)).bitAnd(int(255)));
  return result;
}).setLayout({
  name: "mx_hash_vec3_0",
  type: "uvec3",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" }
  ]
});
var mx_hash_vec3_1 = Fn(([x_immutable, y_immutable, z_immutable]) => {
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const h2 = uint(mx_hash_int(x2, y2, z2)).toVar();
  const result = uvec3().toVar();
  result.x.assign(h2.bitAnd(int(255)));
  result.y.assign(h2.shiftRight(int(8)).bitAnd(int(255)));
  result.z.assign(h2.shiftRight(int(16)).bitAnd(int(255)));
  return result;
}).setLayout({
  name: "mx_hash_vec3_1",
  type: "uvec3",
  inputs: [
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" }
  ]
});
var mx_hash_vec3 = overloadingFn([mx_hash_vec3_0, mx_hash_vec3_1]);
var mx_perlin_noise_float_0 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const u5 = float(mx_fade(fx)).toVar();
  const v3 = float(mx_fade(fy)).toVar();
  const result = float(mx_bilerp(mx_gradient_float(mx_hash_int(X, Y), fx, fy), mx_gradient_float(mx_hash_int(X.add(int(1)), Y), fx.sub(1), fy), mx_gradient_float(mx_hash_int(X, Y.add(int(1))), fx, fy.sub(1)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1))), fx.sub(1), fy.sub(1)), u5, v3)).toVar();
  return mx_gradient_scale2d(result);
}).setLayout({
  name: "mx_perlin_noise_float_0",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_perlin_noise_float_1 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const fz = float(mx_floorfrac(p2.z, Z)).toVar();
  const u5 = float(mx_fade(fx)).toVar();
  const v3 = float(mx_fade(fy)).toVar();
  const w4 = float(mx_fade(fz)).toVar();
  const result = float(mx_trilerp(mx_gradient_float(mx_hash_int(X, Y, Z), fx, fy, fz), mx_gradient_float(mx_hash_int(X.add(int(1)), Y, Z), fx.sub(1), fy, fz), mx_gradient_float(mx_hash_int(X, Y.add(int(1)), Z), fx, fy.sub(1), fz), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1)), Z), fx.sub(1), fy.sub(1), fz), mx_gradient_float(mx_hash_int(X, Y, Z.add(int(1))), fx, fy, fz.sub(1)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y, Z.add(int(1))), fx.sub(1), fy, fz.sub(1)), mx_gradient_float(mx_hash_int(X, Y.add(int(1)), Z.add(int(1))), fx, fy.sub(1), fz.sub(1)), mx_gradient_float(mx_hash_int(X.add(int(1)), Y.add(int(1)), Z.add(int(1))), fx.sub(1), fy.sub(1), fz.sub(1)), u5, v3, w4)).toVar();
  return mx_gradient_scale3d(result);
}).setLayout({
  name: "mx_perlin_noise_float_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_perlin_noise_float = overloadingFn([mx_perlin_noise_float_0, mx_perlin_noise_float_1]);
var mx_perlin_noise_vec3_0 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const u5 = float(mx_fade(fx)).toVar();
  const v3 = float(mx_fade(fy)).toVar();
  const result = vec3(mx_bilerp(mx_gradient_vec3(mx_hash_vec3(X, Y), fx, fy), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y), fx.sub(1), fy), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1))), fx, fy.sub(1)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1))), fx.sub(1), fy.sub(1)), u5, v3)).toVar();
  return mx_gradient_scale2d(result);
}).setLayout({
  name: "mx_perlin_noise_vec3_0",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_perlin_noise_vec3_1 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const fx = float(mx_floorfrac(p2.x, X)).toVar();
  const fy = float(mx_floorfrac(p2.y, Y)).toVar();
  const fz = float(mx_floorfrac(p2.z, Z)).toVar();
  const u5 = float(mx_fade(fx)).toVar();
  const v3 = float(mx_fade(fy)).toVar();
  const w4 = float(mx_fade(fz)).toVar();
  const result = vec3(mx_trilerp(mx_gradient_vec3(mx_hash_vec3(X, Y, Z), fx, fy, fz), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y, Z), fx.sub(1), fy, fz), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1)), Z), fx, fy.sub(1), fz), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1)), Z), fx.sub(1), fy.sub(1), fz), mx_gradient_vec3(mx_hash_vec3(X, Y, Z.add(int(1))), fx, fy, fz.sub(1)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y, Z.add(int(1))), fx.sub(1), fy, fz.sub(1)), mx_gradient_vec3(mx_hash_vec3(X, Y.add(int(1)), Z.add(int(1))), fx, fy.sub(1), fz.sub(1)), mx_gradient_vec3(mx_hash_vec3(X.add(int(1)), Y.add(int(1)), Z.add(int(1))), fx.sub(1), fy.sub(1), fz.sub(1)), u5, v3, w4)).toVar();
  return mx_gradient_scale3d(result);
}).setLayout({
  name: "mx_perlin_noise_vec3_1",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_perlin_noise_vec3 = overloadingFn([mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1]);
var mx_cell_noise_float_0 = Fn(([p_immutable]) => {
  const p2 = float(p_immutable).toVar();
  const ix = int(mx_floor(p2)).toVar();
  return mx_bits_to_01(mx_hash_int(ix));
}).setLayout({
  name: "mx_cell_noise_float_0",
  type: "float",
  inputs: [
    { name: "p", type: "float" }
  ]
});
var mx_cell_noise_float_1 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  return mx_bits_to_01(mx_hash_int(ix, iy));
}).setLayout({
  name: "mx_cell_noise_float_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_cell_noise_float_2 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  return mx_bits_to_01(mx_hash_int(ix, iy, iz));
}).setLayout({
  name: "mx_cell_noise_float_2",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_cell_noise_float_3 = Fn(([p_immutable]) => {
  const p2 = vec4(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  const iw = int(mx_floor(p2.w)).toVar();
  return mx_bits_to_01(mx_hash_int(ix, iy, iz, iw));
}).setLayout({
  name: "mx_cell_noise_float_3",
  type: "float",
  inputs: [
    { name: "p", type: "vec4" }
  ]
});
var mx_cell_noise_float$1 = overloadingFn([mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3]);
var mx_cell_noise_vec3_0 = Fn(([p_immutable]) => {
  const p2 = float(p_immutable).toVar();
  const ix = int(mx_floor(p2)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, int(0))), mx_bits_to_01(mx_hash_int(ix, int(1))), mx_bits_to_01(mx_hash_int(ix, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_0",
  type: "vec3",
  inputs: [
    { name: "p", type: "float" }
  ]
});
var mx_cell_noise_vec3_1 = Fn(([p_immutable]) => {
  const p2 = vec2(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, iy, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_1",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec2" }
  ]
});
var mx_cell_noise_vec3_2 = Fn(([p_immutable]) => {
  const p2 = vec3(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, iy, iz, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, iz, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, iz, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_2",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" }
  ]
});
var mx_cell_noise_vec3_3 = Fn(([p_immutable]) => {
  const p2 = vec4(p_immutable).toVar();
  const ix = int(mx_floor(p2.x)).toVar();
  const iy = int(mx_floor(p2.y)).toVar();
  const iz = int(mx_floor(p2.z)).toVar();
  const iw = int(mx_floor(p2.w)).toVar();
  return vec3(mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(0))), mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(1))), mx_bits_to_01(mx_hash_int(ix, iy, iz, iw, int(2))));
}).setLayout({
  name: "mx_cell_noise_vec3_3",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec4" }
  ]
});
var mx_cell_noise_vec3 = overloadingFn([mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3]);
var mx_fractal_noise_float$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const result = float(0).toVar();
  const amplitude = float(1).toVar();
  Loop(octaves, () => {
    result.addAssign(amplitude.mul(mx_perlin_noise_float(p2)));
    amplitude.mulAssign(diminish);
    p2.mulAssign(lacunarity);
  });
  return result;
}).setLayout({
  name: "mx_fractal_noise_float",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_fractal_noise_vec3$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const result = vec3(0).toVar();
  const amplitude = float(1).toVar();
  Loop(octaves, () => {
    result.addAssign(amplitude.mul(mx_perlin_noise_vec3(p2)));
    amplitude.mulAssign(diminish);
    p2.mulAssign(lacunarity);
  });
  return result;
}).setLayout({
  name: "mx_fractal_noise_vec3",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_fractal_noise_vec2$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  return vec2(mx_fractal_noise_float$1(p2, octaves, lacunarity, diminish), mx_fractal_noise_float$1(p2.add(vec3(int(19), int(193), int(17))), octaves, lacunarity, diminish));
}).setLayout({
  name: "mx_fractal_noise_vec2",
  type: "vec2",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_fractal_noise_vec4$1 = Fn(([p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable]) => {
  const diminish = float(diminish_immutable).toVar();
  const lacunarity = float(lacunarity_immutable).toVar();
  const octaves = int(octaves_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const c4 = vec3(mx_fractal_noise_vec3$1(p2, octaves, lacunarity, diminish)).toVar();
  const f2 = float(mx_fractal_noise_float$1(p2.add(vec3(int(19), int(193), int(17))), octaves, lacunarity, diminish)).toVar();
  return vec4(c4, f2);
}).setLayout({
  name: "mx_fractal_noise_vec4",
  type: "vec4",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "octaves", type: "int" },
    { name: "lacunarity", type: "float" },
    { name: "diminish", type: "float" }
  ]
});
var mx_worley_distance_0 = Fn(([p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const yoff = int(yoff_immutable).toVar();
  const xoff = int(xoff_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const tmp3 = vec3(mx_cell_noise_vec3(vec2(x2.add(xoff), y2.add(yoff)))).toVar();
  const off = vec2(tmp3.x, tmp3.y).toVar();
  off.subAssign(0.5);
  off.mulAssign(jitter2);
  off.addAssign(0.5);
  const cellpos = vec2(vec2(float(x2), float(y2)).add(off)).toVar();
  const diff = vec2(cellpos.sub(p2)).toVar();
  If(metric.equal(int(2)), () => {
    return abs2(diff.x).add(abs2(diff.y));
  });
  If(metric.equal(int(3)), () => {
    return max$1(abs2(diff.x), abs2(diff.y));
  });
  return dot(diff, diff);
}).setLayout({
  name: "mx_worley_distance_0",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "xoff", type: "int" },
    { name: "yoff", type: "int" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_distance_1 = Fn(([p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const zoff = int(zoff_immutable).toVar();
  const yoff = int(yoff_immutable).toVar();
  const xoff = int(xoff_immutable).toVar();
  const z2 = int(z_immutable).toVar();
  const y2 = int(y_immutable).toVar();
  const x2 = int(x_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const off = vec3(mx_cell_noise_vec3(vec3(x2.add(xoff), y2.add(yoff), z2.add(zoff)))).toVar();
  off.subAssign(0.5);
  off.mulAssign(jitter2);
  off.addAssign(0.5);
  const cellpos = vec3(vec3(float(x2), float(y2), float(z2)).add(off)).toVar();
  const diff = vec3(cellpos.sub(p2)).toVar();
  If(metric.equal(int(2)), () => {
    return abs2(diff.x).add(abs2(diff.y)).add(abs2(diff.z));
  });
  If(metric.equal(int(3)), () => {
    return max$1(max$1(abs2(diff.x), abs2(diff.y)), abs2(diff.z));
  });
  return dot(diff, diff);
}).setLayout({
  name: "mx_worley_distance_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "x", type: "int" },
    { name: "y", type: "int" },
    { name: "z", type: "int" },
    { name: "xoff", type: "int" },
    { name: "yoff", type: "int" },
    { name: "zoff", type: "int" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_distance = overloadingFn([mx_worley_distance_0, mx_worley_distance_1]);
var mx_worley_noise_float_0 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const localpos = vec2(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y)).toVar();
  const sqdist = float(1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      const dist2 = float(mx_worley_distance(localpos, x2, y2, X, Y, jitter2, metric)).toVar();
      sqdist.assign(min$1(sqdist, dist2));
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt4(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_float_0",
  type: "float",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec2_0 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const localpos = vec2(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y)).toVar();
  const sqdist = vec2(1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      const dist2 = float(mx_worley_distance(localpos, x2, y2, X, Y, jitter2, metric)).toVar();
      If(dist2.lessThan(sqdist.x), () => {
        sqdist.y.assign(sqdist.x);
        sqdist.x.assign(dist2);
      }).ElseIf(dist2.lessThan(sqdist.y), () => {
        sqdist.y.assign(dist2);
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt4(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec2_0",
  type: "vec2",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec3_0 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const p2 = vec2(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar();
  const localpos = vec2(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y)).toVar();
  const sqdist = vec3(1e6, 1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      const dist2 = float(mx_worley_distance(localpos, x2, y2, X, Y, jitter2, metric)).toVar();
      If(dist2.lessThan(sqdist.x), () => {
        sqdist.z.assign(sqdist.y);
        sqdist.y.assign(sqdist.x);
        sqdist.x.assign(dist2);
      }).ElseIf(dist2.lessThan(sqdist.y), () => {
        sqdist.z.assign(sqdist.y);
        sqdist.y.assign(dist2);
      }).ElseIf(dist2.lessThan(sqdist.z), () => {
        sqdist.z.assign(dist2);
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt4(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec3_0",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec2" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_float_1 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const localpos = vec3(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y), mx_floorfrac(p2.z, Z)).toVar();
  const sqdist = float(1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      Loop({ start: -1, end: int(1), name: "z", condition: "<=" }, ({ z: z2 }) => {
        const dist2 = float(mx_worley_distance(localpos, x2, y2, z2, X, Y, Z, jitter2, metric)).toVar();
        sqdist.assign(min$1(sqdist, dist2));
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt4(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_float_1",
  type: "float",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_float$1 = overloadingFn([mx_worley_noise_float_0, mx_worley_noise_float_1]);
var mx_worley_noise_vec2_1 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const localpos = vec3(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y), mx_floorfrac(p2.z, Z)).toVar();
  const sqdist = vec2(1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      Loop({ start: -1, end: int(1), name: "z", condition: "<=" }, ({ z: z2 }) => {
        const dist2 = float(mx_worley_distance(localpos, x2, y2, z2, X, Y, Z, jitter2, metric)).toVar();
        If(dist2.lessThan(sqdist.x), () => {
          sqdist.y.assign(sqdist.x);
          sqdist.x.assign(dist2);
        }).ElseIf(dist2.lessThan(sqdist.y), () => {
          sqdist.y.assign(dist2);
        });
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt4(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec2_1",
  type: "vec2",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec2$1 = overloadingFn([mx_worley_noise_vec2_0, mx_worley_noise_vec2_1]);
var mx_worley_noise_vec3_1 = Fn(([p_immutable, jitter_immutable, metric_immutable]) => {
  const metric = int(metric_immutable).toVar();
  const jitter2 = float(jitter_immutable).toVar();
  const p2 = vec3(p_immutable).toVar();
  const X = int().toVar(), Y = int().toVar(), Z = int().toVar();
  const localpos = vec3(mx_floorfrac(p2.x, X), mx_floorfrac(p2.y, Y), mx_floorfrac(p2.z, Z)).toVar();
  const sqdist = vec3(1e6, 1e6, 1e6).toVar();
  Loop({ start: -1, end: int(1), name: "x", condition: "<=" }, ({ x: x2 }) => {
    Loop({ start: -1, end: int(1), name: "y", condition: "<=" }, ({ y: y2 }) => {
      Loop({ start: -1, end: int(1), name: "z", condition: "<=" }, ({ z: z2 }) => {
        const dist2 = float(mx_worley_distance(localpos, x2, y2, z2, X, Y, Z, jitter2, metric)).toVar();
        If(dist2.lessThan(sqdist.x), () => {
          sqdist.z.assign(sqdist.y);
          sqdist.y.assign(sqdist.x);
          sqdist.x.assign(dist2);
        }).ElseIf(dist2.lessThan(sqdist.y), () => {
          sqdist.z.assign(sqdist.y);
          sqdist.y.assign(dist2);
        }).ElseIf(dist2.lessThan(sqdist.z), () => {
          sqdist.z.assign(dist2);
        });
      });
    });
  });
  If(metric.equal(int(0)), () => {
    sqdist.assign(sqrt4(sqdist));
  });
  return sqdist;
}).setLayout({
  name: "mx_worley_noise_vec3_1",
  type: "vec3",
  inputs: [
    { name: "p", type: "vec3" },
    { name: "jitter", type: "float" },
    { name: "metric", type: "int" }
  ]
});
var mx_worley_noise_vec3$1 = overloadingFn([mx_worley_noise_vec3_0, mx_worley_noise_vec3_1]);
var mx_hsvtorgb = Fn(([hsv]) => {
  const s2 = hsv.y;
  const v3 = hsv.z;
  const result = vec3().toVar();
  If(s2.lessThan(1e-4), () => {
    result.assign(vec3(v3, v3, v3));
  }).Else(() => {
    let h2 = hsv.x;
    h2 = h2.sub(floor(h2)).mul(6).toVar();
    const hi = int(trunc(h2));
    const f2 = h2.sub(float(hi));
    const p2 = v3.mul(s2.oneMinus());
    const q2 = v3.mul(s2.mul(f2).oneMinus());
    const t4 = v3.mul(s2.mul(f2.oneMinus()).oneMinus());
    If(hi.equal(int(0)), () => {
      result.assign(vec3(v3, t4, p2));
    }).ElseIf(hi.equal(int(1)), () => {
      result.assign(vec3(q2, v3, p2));
    }).ElseIf(hi.equal(int(2)), () => {
      result.assign(vec3(p2, v3, t4));
    }).ElseIf(hi.equal(int(3)), () => {
      result.assign(vec3(p2, q2, v3));
    }).ElseIf(hi.equal(int(4)), () => {
      result.assign(vec3(t4, p2, v3));
    }).Else(() => {
      result.assign(vec3(v3, p2, q2));
    });
  });
  return result;
}).setLayout({
  name: "mx_hsvtorgb",
  type: "vec3",
  inputs: [
    { name: "hsv", type: "vec3" }
  ]
});
var mx_rgbtohsv = Fn(([c_immutable]) => {
  const c4 = vec3(c_immutable).toVar();
  const r2 = float(c4.x).toVar();
  const g2 = float(c4.y).toVar();
  const b = float(c4.z).toVar();
  const mincomp = float(min$1(r2, min$1(g2, b))).toVar();
  const maxcomp = float(max$1(r2, max$1(g2, b))).toVar();
  const delta = float(maxcomp.sub(mincomp)).toVar();
  const h2 = float().toVar(), s2 = float().toVar(), v3 = float().toVar();
  v3.assign(maxcomp);
  If(maxcomp.greaterThan(0), () => {
    s2.assign(delta.div(maxcomp));
  }).Else(() => {
    s2.assign(0);
  });
  If(s2.lessThanEqual(0), () => {
    h2.assign(0);
  }).Else(() => {
    If(r2.greaterThanEqual(maxcomp), () => {
      h2.assign(g2.sub(b).div(delta));
    }).ElseIf(g2.greaterThanEqual(maxcomp), () => {
      h2.assign(add3(2, b.sub(r2).div(delta)));
    }).Else(() => {
      h2.assign(add3(4, r2.sub(g2).div(delta)));
    });
    h2.mulAssign(1 / 6);
    If(h2.lessThan(0), () => {
      h2.addAssign(1);
    });
  });
  return vec3(h2, s2, v3);
}).setLayout({
  name: "mx_rgbtohsv",
  type: "vec3",
  inputs: [
    { name: "c", type: "vec3" }
  ]
});
var mx_srgb_texture_to_lin_rec709 = Fn(([color_immutable]) => {
  const color3 = vec3(color_immutable).toVar();
  const isAbove = bvec3(greaterThan(color3, vec3(0.04045))).toVar();
  const linSeg = vec3(color3.div(12.92)).toVar();
  const powSeg = vec3(pow4(max$1(color3.add(vec3(0.055)), vec3(0)).div(1.055), vec3(2.4))).toVar();
  return mix(linSeg, powSeg, isAbove);
}).setLayout({
  name: "mx_srgb_texture_to_lin_rec709",
  type: "vec3",
  inputs: [
    { name: "color", type: "vec3" }
  ]
});
var _clearColor2 = new Color4();
var Background = class extends DataMap {
  constructor(renderer3, nodes) {
    super();
    this.renderer = renderer3;
    this.nodes = nodes;
  }
  update(scene3, renderList, renderContext) {
    const renderer3 = this.renderer;
    const background = this.nodes.getBackgroundNode(scene3) || scene3.background;
    let forceClear = false;
    if (background === null) {
      renderer3._clearColor.getRGB(_clearColor2, LinearSRGBColorSpace2);
      _clearColor2.a = renderer3._clearColor.a;
    } else if (background.isColor === true) {
      background.getRGB(_clearColor2, LinearSRGBColorSpace2);
      _clearColor2.a = 1;
      forceClear = true;
    } else if (background.isNode === true) {
      const sceneData = this.get(scene3);
      const backgroundNode = background;
      _clearColor2.copy(renderer3._clearColor);
      let backgroundMesh = sceneData.backgroundMesh;
      if (backgroundMesh === void 0) {
        const backgroundMeshNode = context(vec4(backgroundNode).mul(backgroundIntensity), {
          // @TODO: Add Texture2D support using node context
          getUV: () => normalWorld,
          getTextureLevel: () => backgroundBlurriness
        });
        let viewProj = modelViewProjection();
        viewProj = viewProj.setZ(viewProj.w);
        const nodeMaterial = new NodeMaterial();
        nodeMaterial.name = "Background.material";
        nodeMaterial.side = BackSide2;
        nodeMaterial.depthTest = false;
        nodeMaterial.depthWrite = false;
        nodeMaterial.fog = false;
        nodeMaterial.lights = false;
        nodeMaterial.vertexNode = viewProj;
        nodeMaterial.colorNode = backgroundMeshNode;
        sceneData.backgroundMeshNode = backgroundMeshNode;
        sceneData.backgroundMesh = backgroundMesh = new Mesh2(new SphereGeometry2(1, 32, 32), nodeMaterial);
        backgroundMesh.frustumCulled = false;
        backgroundMesh.name = "Background.mesh";
        backgroundMesh.onBeforeRender = function(renderer4, scene4, camera3) {
          this.matrixWorld.copyPosition(camera3.matrixWorld);
        };
      }
      const backgroundCacheKey = backgroundNode.getCacheKey();
      if (sceneData.backgroundCacheKey !== backgroundCacheKey) {
        sceneData.backgroundMeshNode.node = vec4(backgroundNode).mul(backgroundIntensity);
        sceneData.backgroundMeshNode.needsUpdate = true;
        backgroundMesh.material.needsUpdate = true;
        sceneData.backgroundCacheKey = backgroundCacheKey;
      }
      renderList.unshift(backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null);
    } else {
      console.error("THREE.Renderer: Unsupported background configuration.", background);
    }
    if (renderer3.autoClear === true || forceClear === true) {
      _clearColor2.multiplyScalar(_clearColor2.a);
      const clearColorValue = renderContext.clearColorValue;
      clearColorValue.r = _clearColor2.r;
      clearColorValue.g = _clearColor2.g;
      clearColorValue.b = _clearColor2.b;
      clearColorValue.a = _clearColor2.a;
      renderContext.depthClearValue = renderer3._clearDepth;
      renderContext.stencilClearValue = renderer3._clearStencil;
      renderContext.clearColor = renderer3.autoClearColor === true;
      renderContext.clearDepth = renderer3.autoClearDepth === true;
      renderContext.clearStencil = renderer3.autoClearStencil === true;
    } else {
      renderContext.clearColor = false;
      renderContext.clearDepth = false;
      renderContext.clearStencil = false;
    }
  }
};
var NodeBuilderState = class {
  constructor(vertexShader2, fragmentShader2, computeShader, nodeAttributes, bindings, updateNodes, updateBeforeNodes, updateAfterNodes, instanceBindGroups = true, transforms = []) {
    this.vertexShader = vertexShader2;
    this.fragmentShader = fragmentShader2;
    this.computeShader = computeShader;
    this.transforms = transforms;
    this.nodeAttributes = nodeAttributes;
    this.bindings = bindings;
    this.updateNodes = updateNodes;
    this.updateBeforeNodes = updateBeforeNodes;
    this.updateAfterNodes = updateAfterNodes;
    this.instanceBindGroups = instanceBindGroups;
    this.usedTimes = 0;
  }
  createBindings() {
    const bindings = [];
    for (const instanceGroup of this.bindings) {
      const shared = this.instanceBindGroups && instanceGroup.bindings[0].groupNode.shared;
      if (shared !== true) {
        const bindingsGroup = new BindGroup(instanceGroup.name, [], instanceGroup.index, instanceGroup);
        bindings.push(bindingsGroup);
        for (const instanceBinding of instanceGroup.bindings) {
          bindingsGroup.bindings.push(instanceBinding.clone());
        }
      } else {
        bindings.push(instanceGroup);
      }
    }
    return bindings;
  }
};
var outputNodeMap = /* @__PURE__ */ new WeakMap();
var Nodes = class extends DataMap {
  constructor(renderer3, backend) {
    super();
    this.renderer = renderer3;
    this.backend = backend;
    this.nodeFrame = new NodeFrame();
    this.nodeBuilderCache = /* @__PURE__ */ new Map();
    this.callHashCache = new ChainMap();
    this.groupsData = new ChainMap();
  }
  updateGroup(nodeUniformsGroup) {
    const groupNode = nodeUniformsGroup.groupNode;
    const name = groupNode.name;
    if (name === objectGroup.name) return true;
    if (name === renderGroup.name) {
      const uniformsGroupData = this.get(nodeUniformsGroup);
      const renderId = this.nodeFrame.renderId;
      if (uniformsGroupData.renderId !== renderId) {
        uniformsGroupData.renderId = renderId;
        return true;
      }
      return false;
    }
    if (name === frameGroup.name) {
      const uniformsGroupData = this.get(nodeUniformsGroup);
      const frameId2 = this.nodeFrame.frameId;
      if (uniformsGroupData.frameId !== frameId2) {
        uniformsGroupData.frameId = frameId2;
        return true;
      }
      return false;
    }
    const groupChain = [groupNode, nodeUniformsGroup];
    let groupData = this.groupsData.get(groupChain);
    if (groupData === void 0) this.groupsData.set(groupChain, groupData = {});
    if (groupData.version !== groupNode.version) {
      groupData.version = groupNode.version;
      return true;
    }
    return false;
  }
  getForRenderCacheKey(renderObject) {
    return renderObject.initialCacheKey;
  }
  getForRender(renderObject) {
    const renderObjectData = this.get(renderObject);
    let nodeBuilderState = renderObjectData.nodeBuilderState;
    if (nodeBuilderState === void 0) {
      const { nodeBuilderCache } = this;
      const cacheKey = this.getForRenderCacheKey(renderObject);
      nodeBuilderState = nodeBuilderCache.get(cacheKey);
      if (nodeBuilderState === void 0) {
        const nodeBuilder = this.backend.createNodeBuilder(renderObject.object, this.renderer);
        nodeBuilder.scene = renderObject.scene;
        nodeBuilder.material = renderObject.material;
        nodeBuilder.camera = renderObject.camera;
        nodeBuilder.context.material = renderObject.material;
        nodeBuilder.lightsNode = renderObject.lightsNode;
        nodeBuilder.environmentNode = this.getEnvironmentNode(renderObject.scene);
        nodeBuilder.fogNode = this.getFogNode(renderObject.scene);
        nodeBuilder.clippingContext = renderObject.clippingContext;
        nodeBuilder.build();
        nodeBuilderState = this._createNodeBuilderState(nodeBuilder);
        nodeBuilderCache.set(cacheKey, nodeBuilderState);
      }
      nodeBuilderState.usedTimes++;
      renderObjectData.nodeBuilderState = nodeBuilderState;
    }
    return nodeBuilderState;
  }
  delete(object2) {
    if (object2.isRenderObject) {
      const nodeBuilderState = this.get(object2).nodeBuilderState;
      nodeBuilderState.usedTimes--;
      if (nodeBuilderState.usedTimes === 0) {
        this.nodeBuilderCache.delete(this.getForRenderCacheKey(object2));
      }
    }
    return super.delete(object2);
  }
  getForCompute(computeNode) {
    const computeData = this.get(computeNode);
    let nodeBuilderState = computeData.nodeBuilderState;
    if (nodeBuilderState === void 0) {
      const nodeBuilder = this.backend.createNodeBuilder(computeNode, this.renderer);
      nodeBuilder.build();
      nodeBuilderState = this._createNodeBuilderState(nodeBuilder);
      computeData.nodeBuilderState = nodeBuilderState;
    }
    return nodeBuilderState;
  }
  _createNodeBuilderState(nodeBuilder) {
    return new NodeBuilderState(
      nodeBuilder.vertexShader,
      nodeBuilder.fragmentShader,
      nodeBuilder.computeShader,
      nodeBuilder.getAttributesArray(),
      nodeBuilder.getBindings(),
      nodeBuilder.updateNodes,
      nodeBuilder.updateBeforeNodes,
      nodeBuilder.updateAfterNodes,
      nodeBuilder.instanceBindGroups,
      nodeBuilder.transforms
    );
  }
  getEnvironmentNode(scene3) {
    return scene3.environmentNode || this.get(scene3).environmentNode || null;
  }
  getBackgroundNode(scene3) {
    return scene3.backgroundNode || this.get(scene3).backgroundNode || null;
  }
  getFogNode(scene3) {
    return scene3.fogNode || this.get(scene3).fogNode || null;
  }
  getCacheKey(scene3, lightsNode) {
    const chain = [scene3, lightsNode];
    const callId = this.renderer.info.calls;
    let cacheKeyData = this.callHashCache.get(chain);
    if (cacheKeyData === void 0 || cacheKeyData.callId !== callId) {
      const environmentNode = this.getEnvironmentNode(scene3);
      const fogNode = this.getFogNode(scene3);
      const cacheKey = [];
      if (lightsNode) cacheKey.push(lightsNode.getCacheKey(true));
      if (environmentNode) cacheKey.push(environmentNode.getCacheKey());
      if (fogNode) cacheKey.push(fogNode.getCacheKey());
      cacheKeyData = {
        callId,
        cacheKey: cacheKey.join(",")
      };
      this.callHashCache.set(chain, cacheKeyData);
    }
    return cacheKeyData.cacheKey;
  }
  updateScene(scene3) {
    this.updateEnvironment(scene3);
    this.updateFog(scene3);
    this.updateBackground(scene3);
  }
  get isToneMappingState() {
    return this.renderer.getRenderTarget() ? false : true;
  }
  updateBackground(scene3) {
    const sceneData = this.get(scene3);
    const background = scene3.background;
    if (background) {
      const forceUpdate = scene3.backgroundBlurriness === 0 && sceneData.backgroundBlurriness > 0 || scene3.backgroundBlurriness > 0 && sceneData.backgroundBlurriness === 0;
      if (sceneData.background !== background || forceUpdate) {
        let backgroundNode = null;
        if (background.isCubeTexture === true || (background.mapping === EquirectangularReflectionMapping2 || background.mapping === EquirectangularRefractionMapping2)) {
          if (scene3.backgroundBlurriness > 0) {
            backgroundNode = pmremTexture(background, normalWorld);
          } else {
            let envMap;
            if (background.isCubeTexture === true) {
              envMap = cubeTexture(background);
            } else {
              envMap = texture(background);
            }
            backgroundNode = cubeMapNode(envMap);
          }
        } else if (background.isTexture === true) {
          backgroundNode = texture(background, viewportUV.flipY()).setUpdateMatrix(true);
        } else if (background.isColor !== true) {
          console.error("WebGPUNodes: Unsupported background configuration.", background);
        }
        sceneData.backgroundNode = backgroundNode;
        sceneData.background = background;
        sceneData.backgroundBlurriness = scene3.backgroundBlurriness;
      }
    } else if (sceneData.backgroundNode) {
      delete sceneData.backgroundNode;
      delete sceneData.background;
    }
  }
  updateFog(scene3) {
    const sceneData = this.get(scene3);
    const fog2 = scene3.fog;
    if (fog2) {
      if (sceneData.fog !== fog2) {
        let fogNode = null;
        if (fog2.isFogExp2) {
          fogNode = densityFog(reference("color", "color", fog2), reference("density", "float", fog2));
        } else if (fog2.isFog) {
          fogNode = rangeFog(reference("color", "color", fog2), reference("near", "float", fog2), reference("far", "float", fog2));
        } else {
          console.error("WebGPUNodes: Unsupported fog configuration.", fog2);
        }
        sceneData.fogNode = fogNode;
        sceneData.fog = fog2;
      }
    } else {
      delete sceneData.fogNode;
      delete sceneData.fog;
    }
  }
  updateEnvironment(scene3) {
    const sceneData = this.get(scene3);
    const environment = scene3.environment;
    if (environment) {
      if (sceneData.environment !== environment) {
        let environmentNode = null;
        if (environment.isCubeTexture === true) {
          environmentNode = cubeTexture(environment);
        } else if (environment.isTexture === true) {
          environmentNode = texture(environment);
        } else {
          console.error("Nodes: Unsupported environment configuration.", environment);
        }
        sceneData.environmentNode = environmentNode;
        sceneData.environment = environment;
      }
    } else if (sceneData.environmentNode) {
      delete sceneData.environmentNode;
      delete sceneData.environment;
    }
  }
  getNodeFrame(renderer3 = this.renderer, scene3 = null, object2 = null, camera3 = null, material = null) {
    const nodeFrame = this.nodeFrame;
    nodeFrame.renderer = renderer3;
    nodeFrame.scene = scene3;
    nodeFrame.object = object2;
    nodeFrame.camera = camera3;
    nodeFrame.material = material;
    return nodeFrame;
  }
  getNodeFrameForRender(renderObject) {
    return this.getNodeFrame(renderObject.renderer, renderObject.scene, renderObject.object, renderObject.camera, renderObject.material);
  }
  getOutputCacheKey() {
    const renderer3 = this.renderer;
    return renderer3.toneMapping + "," + renderer3.currentColorSpace;
  }
  hasOutputChange(outputTarget) {
    const cacheKey = outputNodeMap.get(outputTarget);
    return cacheKey !== this.getOutputCacheKey();
  }
  getOutputNode(outputTexture) {
    const renderer3 = this.renderer;
    const cacheKey = this.getOutputCacheKey();
    const output2 = texture(outputTexture, viewportUV).renderOutput(renderer3.toneMapping, renderer3.currentColorSpace);
    outputNodeMap.set(outputTexture, cacheKey);
    return output2;
  }
  updateBefore(renderObject) {
    const nodeBuilder = renderObject.getNodeBuilderState();
    for (const node of nodeBuilder.updateBeforeNodes) {
      this.getNodeFrameForRender(renderObject).updateBeforeNode(node);
    }
  }
  updateAfter(renderObject) {
    const nodeBuilder = renderObject.getNodeBuilderState();
    for (const node of nodeBuilder.updateAfterNodes) {
      this.getNodeFrameForRender(renderObject).updateAfterNode(node);
    }
  }
  updateForCompute(computeNode) {
    const nodeFrame = this.getNodeFrame();
    const nodeBuilder = this.getForCompute(computeNode);
    for (const node of nodeBuilder.updateNodes) {
      nodeFrame.updateNode(node);
    }
  }
  updateForRender(renderObject) {
    const nodeFrame = this.getNodeFrameForRender(renderObject);
    const nodeBuilder = renderObject.getNodeBuilderState();
    for (const node of nodeBuilder.updateNodes) {
      nodeFrame.updateNode(node);
    }
  }
  dispose() {
    super.dispose();
    this.nodeFrame = new NodeFrame();
    this.nodeBuilderCache = /* @__PURE__ */ new Map();
  }
};
var RenderBundle = class {
  constructor(scene3, camera3) {
    this.scene = scene3;
    this.camera = camera3;
  }
  clone() {
    return Object.assign(new this.constructor(), this);
  }
};
var RenderBundles = class {
  constructor() {
    this.lists = new ChainMap();
  }
  get(scene3, camera3) {
    const lists = this.lists;
    const keys = [scene3, camera3];
    let list = lists.get(keys);
    if (list === void 0) {
      list = new RenderBundle(scene3, camera3);
      lists.set(keys, list);
    }
    return list;
  }
  dispose() {
    this.lists = new ChainMap();
  }
};
var NodeLibrary = class {
  constructor() {
    this.lightNodes = /* @__PURE__ */ new WeakMap();
    this.materialNodes = /* @__PURE__ */ new Map();
    this.toneMappingNodes = /* @__PURE__ */ new Map();
    this.colorSpaceNodes = /* @__PURE__ */ new Map();
  }
  fromMaterial(material) {
    if (material.isNodeMaterial) return material;
    let nodeMaterial = null;
    const nodeMaterialClass = this.getMaterialNodeClass(material.type);
    if (nodeMaterialClass !== null) {
      nodeMaterial = new nodeMaterialClass();
      for (const key in material) {
        nodeMaterial[key] = material[key];
      }
    }
    return nodeMaterial;
  }
  addColorSpace(colorSpaceNode, colorSpace) {
    this.addType(colorSpaceNode, colorSpace, this.colorSpaceNodes);
  }
  getColorSpaceFunction(colorSpace) {
    return this.colorSpaceNodes.get(colorSpace) || null;
  }
  addToneMapping(toneMappingNode, toneMapping2) {
    this.addType(toneMappingNode, toneMapping2, this.toneMappingNodes);
  }
  getToneMappingFunction(toneMapping2) {
    return this.toneMappingNodes.get(toneMapping2) || null;
  }
  getMaterialNodeClass(materialType) {
    return this.materialNodes.get(materialType) || null;
  }
  addMaterial(materialNodeClass, materialClass) {
    this.addType(materialNodeClass, materialClass.name, this.materialNodes);
  }
  getLightNodeClass(light) {
    return this.lightNodes.get(light) || null;
  }
  addLight(lightNodeClass, lightClass) {
    this.addClass(lightNodeClass, lightClass, this.lightNodes);
  }
  addType(nodeClass, type, library) {
    if (library.has(type)) {
      console.warn(`Redefinition of node ${type}`);
      return;
    }
    if (typeof nodeClass !== "function") throw new Error(`Node class ${nodeClass.name} is not a class.`);
    if (typeof type === "function" || typeof type === "object") throw new Error(`Base class ${type} is not a class.`);
    library.set(type, nodeClass);
  }
  addClass(nodeClass, baseClass, library) {
    if (library.has(baseClass)) {
      console.warn(`Redefinition of node ${baseClass.name}`);
      return;
    }
    if (typeof nodeClass !== "function") throw new Error(`Node class ${nodeClass.name} is not a class.`);
    if (typeof baseClass !== "function") throw new Error(`Base class ${baseClass.name} is not a class.`);
    library.set(baseClass, nodeClass);
  }
};
var _scene = new Scene2();
var _drawingBufferSize = new Vector22();
var _screen = new Vector42();
var _frustum2 = new Frustum2();
var _projScreenMatrix2 = new Matrix42();
var _vector32 = new Vector32();
var Renderer = class {
  constructor(backend, parameters = {}) {
    this.isRenderer = true;
    const {
      logarithmicDepthBuffer = false,
      alpha = true,
      antialias = false,
      samples = 0,
      getFallback = null
    } = parameters;
    this.domElement = backend.getDomElement();
    this.backend = backend;
    this.samples = samples || antialias === true ? 4 : 0;
    this.autoClear = true;
    this.autoClearColor = true;
    this.autoClearDepth = true;
    this.autoClearStencil = true;
    this.alpha = alpha;
    this.logarithmicDepthBuffer = logarithmicDepthBuffer;
    this.outputColorSpace = SRGBColorSpace2;
    this.toneMapping = NoToneMapping2;
    this.toneMappingExposure = 1;
    this.sortObjects = true;
    this.depth = true;
    this.stencil = false;
    this.clippingPlanes = [];
    this.info = new Info();
    this.nodes = {
      library: new NodeLibrary()
    };
    this._getFallback = getFallback;
    this._pixelRatio = 1;
    this._width = this.domElement.width;
    this._height = this.domElement.height;
    this._viewport = new Vector42(0, 0, this._width, this._height);
    this._scissor = new Vector42(0, 0, this._width, this._height);
    this._scissorTest = false;
    this._attributes = null;
    this._geometries = null;
    this._nodes = null;
    this._animation = null;
    this._bindings = null;
    this._objects = null;
    this._pipelines = null;
    this._bundles = null;
    this._renderLists = null;
    this._renderContexts = null;
    this._textures = null;
    this._background = null;
    this._quad = new QuadMesh(new NodeMaterial());
    this._quad.material.type = "Renderer_output";
    this._currentRenderContext = null;
    this._opaqueSort = null;
    this._transparentSort = null;
    this._frameBufferTarget = null;
    const alphaClear = this.alpha === true ? 0 : 1;
    this._clearColor = new Color4(0, 0, 0, alphaClear);
    this._clearDepth = 1;
    this._clearStencil = 0;
    this._renderTarget = null;
    this._activeCubeFace = 0;
    this._activeMipmapLevel = 0;
    this._mrt = null;
    this._renderObjectFunction = null;
    this._currentRenderObjectFunction = null;
    this._currentRenderBundle = null;
    this._handleObjectFunction = this._renderObjectDirect;
    this._initialized = false;
    this._initPromise = null;
    this._compilationPromises = null;
    this.transparent = true;
    this.opaque = true;
    this.shadowMap = {
      enabled: false,
      type: PCFShadowMap$1
    };
    this.xr = {
      enabled: false
    };
    this.debug = {
      checkShaderErrors: true,
      onShaderError: null,
      getShaderAsync: async (scene3, camera3, object2) => {
        await this.compileAsync(scene3, camera3);
        const renderList = this._renderLists.get(scene3, camera3);
        const renderContext = this._renderContexts.get(scene3, camera3, this._renderTarget);
        const material = scene3.overrideMaterial || object2.material;
        const renderObject = this._objects.get(object2, material, scene3, camera3, renderList.lightsNode, renderContext);
        const { fragmentShader: fragmentShader2, vertexShader: vertexShader2 } = renderObject.getNodeBuilderState();
        return { fragmentShader: fragmentShader2, vertexShader: vertexShader2 };
      }
    };
  }
  async init() {
    if (this._initialized) {
      throw new Error("Renderer: Backend has already been initialized.");
    }
    if (this._initPromise !== null) {
      return this._initPromise;
    }
    this._initPromise = new Promise(async (resolve, reject) => {
      let backend = this.backend;
      try {
        await backend.init(this);
      } catch (error) {
        if (this._getFallback !== null) {
          try {
            this.backend = backend = this._getFallback(error);
            await backend.init(this);
          } catch (error2) {
            reject(error2);
            return;
          }
        } else {
          reject(error);
          return;
        }
      }
      this._nodes = new Nodes(this, backend);
      this._animation = new Animation(this._nodes, this.info);
      this._attributes = new Attributes(backend);
      this._background = new Background(this, this._nodes);
      this._geometries = new Geometries2(this._attributes, this.info);
      this._textures = new Textures(this, backend, this.info);
      this._pipelines = new Pipelines(backend, this._nodes);
      this._bindings = new Bindings(backend, this._nodes, this._textures, this._attributes, this._pipelines, this.info);
      this._objects = new RenderObjects(this, this._nodes, this._geometries, this._pipelines, this._bindings, this.info);
      this._renderLists = new RenderLists();
      this._bundles = new RenderBundles();
      this._renderContexts = new RenderContexts();
      this._initialized = true;
      resolve();
    });
    return this._initPromise;
  }
  get coordinateSystem() {
    return this.backend.coordinateSystem;
  }
  async compileAsync(scene3, camera3, targetScene = null) {
    if (this._initialized === false) await this.init();
    const nodeFrame = this._nodes.nodeFrame;
    const previousRenderId = nodeFrame.renderId;
    const previousRenderContext = this._currentRenderContext;
    const previousRenderObjectFunction = this._currentRenderObjectFunction;
    const previousCompilationPromises = this._compilationPromises;
    const sceneRef = scene3.isScene === true ? scene3 : _scene;
    if (targetScene === null) targetScene = scene3;
    const renderTarget = this._renderTarget;
    const renderContext = this._renderContexts.get(targetScene, camera3, renderTarget);
    const activeMipmapLevel = this._activeMipmapLevel;
    const compilationPromises = [];
    this._currentRenderContext = renderContext;
    this._currentRenderObjectFunction = this.renderObject;
    this._handleObjectFunction = this._createObjectPipeline;
    this._compilationPromises = compilationPromises;
    nodeFrame.renderId++;
    nodeFrame.update();
    renderContext.depth = this.depth;
    renderContext.stencil = this.stencil;
    if (!renderContext.clippingContext) renderContext.clippingContext = new ClippingContext();
    renderContext.clippingContext.updateGlobal(this, camera3);
    sceneRef.onBeforeRender(this, scene3, camera3, renderTarget);
    const renderList = this._renderLists.get(scene3, camera3);
    renderList.begin();
    this._projectObject(scene3, camera3, 0, renderList);
    if (targetScene !== scene3) {
      targetScene.traverseVisible(function(object2) {
        if (object2.isLight && object2.layers.test(camera3.layers)) {
          renderList.pushLight(object2);
        }
      });
    }
    renderList.finish();
    if (renderTarget !== null) {
      this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);
      const renderTargetData = this._textures.get(renderTarget);
      renderContext.textures = renderTargetData.textures;
      renderContext.depthTexture = renderTargetData.depthTexture;
    } else {
      renderContext.textures = null;
      renderContext.depthTexture = null;
    }
    this._nodes.updateScene(sceneRef);
    this._background.update(sceneRef, renderList, renderContext);
    const opaqueObjects = renderList.opaque;
    const transparentObjects = renderList.transparent;
    const lightsNode = renderList.lightsNode;
    if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera3, sceneRef, lightsNode);
    if (this.transparent === true && transparentObjects.length > 0) this._renderObjects(transparentObjects, camera3, sceneRef, lightsNode);
    nodeFrame.renderId = previousRenderId;
    this._currentRenderContext = previousRenderContext;
    this._currentRenderObjectFunction = previousRenderObjectFunction;
    this._compilationPromises = previousCompilationPromises;
    this._handleObjectFunction = this._renderObjectDirect;
    await Promise.all(compilationPromises);
  }
  async renderAsync(scene3, camera3) {
    if (this._initialized === false) await this.init();
    const renderContext = this._renderScene(scene3, camera3);
    await this.backend.resolveTimestampAsync(renderContext, "render");
  }
  setMRT(mrt2) {
    this._mrt = mrt2;
    return this;
  }
  getMRT() {
    return this._mrt;
  }
  _renderBundle(bundle, sceneRef, lightsNode) {
    const { object: object2, camera: camera3, renderList } = bundle;
    const renderContext = this._currentRenderContext;
    const renderBundle = this._bundles.get(object2, camera3);
    const renderBundleData = this.backend.get(renderBundle);
    if (renderBundleData.renderContexts === void 0) renderBundleData.renderContexts = /* @__PURE__ */ new Set();
    const renderBundleNeedsUpdate = renderBundleData.renderContexts.has(renderContext) === false || object2.needsUpdate === true;
    renderBundleData.renderContexts.add(renderContext);
    if (renderBundleNeedsUpdate) {
      this.backend.beginBundle(renderContext);
      if (renderBundleData.renderObjects === void 0 || object2.needsUpdate === true) {
        renderBundleData.renderObjects = [];
      }
      this._currentRenderBundle = renderBundle;
      const opaqueObjects = renderList.opaque;
      if (opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera3, sceneRef, lightsNode);
      this._currentRenderBundle = null;
      this.backend.finishBundle(renderContext, renderBundle);
      object2.needsUpdate = false;
    } else {
      const renderObjects = renderBundleData.renderObjects;
      for (let i2 = 0, l2 = renderObjects.length; i2 < l2; i2++) {
        const renderObject = renderObjects[i2];
        this._nodes.updateBefore(renderObject);
        renderObject.object.modelViewMatrix.multiplyMatrices(camera3.matrixWorldInverse, renderObject.object.matrixWorld);
        renderObject.object.normalMatrix.getNormalMatrix(renderObject.object.modelViewMatrix);
        this._nodes.updateForRender(renderObject);
        this._bindings.updateForRender(renderObject);
        this._nodes.updateAfter(renderObject);
      }
    }
    this.backend.addBundle(renderContext, renderBundle);
  }
  render(scene3, camera3) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead.");
      return this.renderAsync(scene3, camera3);
    }
    this._renderScene(scene3, camera3);
  }
  _getFrameBufferTarget() {
    const { currentToneMapping, currentColorSpace } = this;
    const useToneMapping = currentToneMapping !== NoToneMapping2;
    const useColorSpace = currentColorSpace !== LinearSRGBColorSpace2;
    if (useToneMapping === false && useColorSpace === false) return null;
    const { width, height } = this.getDrawingBufferSize(_drawingBufferSize);
    const { depth: depth2, stencil } = this;
    let frameBufferTarget = this._frameBufferTarget;
    if (frameBufferTarget === null) {
      frameBufferTarget = new RenderTarget2(width, height, {
        depthBuffer: depth2,
        stencilBuffer: stencil,
        type: HalfFloatType2,
        // FloatType
        format: RGBAFormat2,
        colorSpace: LinearSRGBColorSpace2,
        generateMipmaps: false,
        minFilter: LinearFilter2,
        magFilter: LinearFilter2,
        samples: this.samples
      });
      frameBufferTarget.isPostProcessingRenderTarget = true;
      this._frameBufferTarget = frameBufferTarget;
    }
    frameBufferTarget.depthBuffer = depth2;
    frameBufferTarget.stencilBuffer = stencil;
    frameBufferTarget.setSize(width, height);
    frameBufferTarget.viewport.copy(this._viewport);
    frameBufferTarget.scissor.copy(this._scissor);
    frameBufferTarget.viewport.multiplyScalar(this._pixelRatio);
    frameBufferTarget.scissor.multiplyScalar(this._pixelRatio);
    frameBufferTarget.scissorTest = this._scissorTest;
    return frameBufferTarget;
  }
  _renderScene(scene3, camera3, useFrameBufferTarget = true) {
    const frameBufferTarget = useFrameBufferTarget ? this._getFrameBufferTarget() : null;
    const nodeFrame = this._nodes.nodeFrame;
    const previousRenderId = nodeFrame.renderId;
    const previousRenderContext = this._currentRenderContext;
    const previousRenderObjectFunction = this._currentRenderObjectFunction;
    const sceneRef = scene3.isScene === true ? scene3 : _scene;
    const outputRenderTarget = this._renderTarget;
    const activeCubeFace = this._activeCubeFace;
    const activeMipmapLevel = this._activeMipmapLevel;
    let renderTarget;
    if (frameBufferTarget !== null) {
      renderTarget = frameBufferTarget;
      this.setRenderTarget(renderTarget);
    } else {
      renderTarget = outputRenderTarget;
    }
    const renderContext = this._renderContexts.get(scene3, camera3, renderTarget);
    this._currentRenderContext = renderContext;
    this._currentRenderObjectFunction = this._renderObjectFunction || this.renderObject;
    this.info.calls++;
    this.info.render.calls++;
    this.info.render.frameCalls++;
    nodeFrame.renderId = this.info.calls;
    const coordinateSystem = this.coordinateSystem;
    if (camera3.coordinateSystem !== coordinateSystem) {
      camera3.coordinateSystem = coordinateSystem;
      camera3.updateProjectionMatrix();
    }
    if (scene3.matrixWorldAutoUpdate === true) scene3.updateMatrixWorld();
    if (camera3.parent === null && camera3.matrixWorldAutoUpdate === true) camera3.updateMatrixWorld();
    let viewport2 = this._viewport;
    let scissor = this._scissor;
    let pixelRatio = this._pixelRatio;
    if (renderTarget !== null) {
      viewport2 = renderTarget.viewport;
      scissor = renderTarget.scissor;
      pixelRatio = 1;
    }
    this.getDrawingBufferSize(_drawingBufferSize);
    _screen.set(0, 0, _drawingBufferSize.width, _drawingBufferSize.height);
    const minDepth = viewport2.minDepth === void 0 ? 0 : viewport2.minDepth;
    const maxDepth2 = viewport2.maxDepth === void 0 ? 1 : viewport2.maxDepth;
    renderContext.viewportValue.copy(viewport2).multiplyScalar(pixelRatio).floor();
    renderContext.viewportValue.width >>= activeMipmapLevel;
    renderContext.viewportValue.height >>= activeMipmapLevel;
    renderContext.viewportValue.minDepth = minDepth;
    renderContext.viewportValue.maxDepth = maxDepth2;
    renderContext.viewport = renderContext.viewportValue.equals(_screen) === false;
    renderContext.scissorValue.copy(scissor).multiplyScalar(pixelRatio).floor();
    renderContext.scissor = this._scissorTest && renderContext.scissorValue.equals(_screen) === false;
    renderContext.scissorValue.width >>= activeMipmapLevel;
    renderContext.scissorValue.height >>= activeMipmapLevel;
    if (!renderContext.clippingContext) renderContext.clippingContext = new ClippingContext();
    renderContext.clippingContext.updateGlobal(this, camera3);
    sceneRef.onBeforeRender(this, scene3, camera3, renderTarget);
    _projScreenMatrix2.multiplyMatrices(camera3.projectionMatrix, camera3.matrixWorldInverse);
    _frustum2.setFromProjectionMatrix(_projScreenMatrix2, coordinateSystem);
    const renderList = this._renderLists.get(scene3, camera3);
    renderList.begin();
    this._projectObject(scene3, camera3, 0, renderList);
    renderList.finish();
    if (this.sortObjects === true) {
      renderList.sort(this._opaqueSort, this._transparentSort);
    }
    if (renderTarget !== null) {
      this._textures.updateRenderTarget(renderTarget, activeMipmapLevel);
      const renderTargetData = this._textures.get(renderTarget);
      renderContext.textures = renderTargetData.textures;
      renderContext.depthTexture = renderTargetData.depthTexture;
      renderContext.width = renderTargetData.width;
      renderContext.height = renderTargetData.height;
      renderContext.renderTarget = renderTarget;
      renderContext.depth = renderTarget.depthBuffer;
      renderContext.stencil = renderTarget.stencilBuffer;
    } else {
      renderContext.textures = null;
      renderContext.depthTexture = null;
      renderContext.width = this.domElement.width;
      renderContext.height = this.domElement.height;
      renderContext.depth = this.depth;
      renderContext.stencil = this.stencil;
    }
    renderContext.width >>= activeMipmapLevel;
    renderContext.height >>= activeMipmapLevel;
    renderContext.activeCubeFace = activeCubeFace;
    renderContext.activeMipmapLevel = activeMipmapLevel;
    renderContext.occlusionQueryCount = renderList.occlusionQueryCount;
    this._nodes.updateScene(sceneRef);
    this._background.update(sceneRef, renderList, renderContext);
    this.backend.beginRender(renderContext);
    const opaqueObjects = renderList.opaque;
    const transparentObjects = renderList.transparent;
    const bundles = renderList.bundles;
    const lightsNode = renderList.lightsNode;
    if (bundles.length > 0) this._renderBundles(bundles, sceneRef, lightsNode);
    if (this.opaque === true && opaqueObjects.length > 0) this._renderObjects(opaqueObjects, camera3, sceneRef, lightsNode);
    if (this.transparent === true && transparentObjects.length > 0) this._renderObjects(transparentObjects, camera3, sceneRef, lightsNode);
    this.backend.finishRender(renderContext);
    nodeFrame.renderId = previousRenderId;
    this._currentRenderContext = previousRenderContext;
    this._currentRenderObjectFunction = previousRenderObjectFunction;
    if (frameBufferTarget !== null) {
      this.setRenderTarget(outputRenderTarget, activeCubeFace, activeMipmapLevel);
      const quad = this._quad;
      if (this._nodes.hasOutputChange(renderTarget.texture)) {
        quad.material.fragmentNode = this._nodes.getOutputNode(renderTarget.texture);
        quad.material.needsUpdate = true;
      }
      this._renderScene(quad, quad.camera, false);
    }
    sceneRef.onAfterRender(this, scene3, camera3, renderTarget);
    return renderContext;
  }
  getMaxAnisotropy() {
    return this.backend.getMaxAnisotropy();
  }
  getActiveCubeFace() {
    return this._activeCubeFace;
  }
  getActiveMipmapLevel() {
    return this._activeMipmapLevel;
  }
  async setAnimationLoop(callback) {
    if (this._initialized === false) await this.init();
    this._animation.setAnimationLoop(callback);
  }
  async getArrayBufferAsync(attribute2) {
    return await this.backend.getArrayBufferAsync(attribute2);
  }
  getContext() {
    return this.backend.getContext();
  }
  getPixelRatio() {
    return this._pixelRatio;
  }
  getDrawingBufferSize(target) {
    return target.set(this._width * this._pixelRatio, this._height * this._pixelRatio).floor();
  }
  getSize(target) {
    return target.set(this._width, this._height);
  }
  setPixelRatio(value = 1) {
    this._pixelRatio = value;
    this.setSize(this._width, this._height, false);
  }
  setDrawingBufferSize(width, height, pixelRatio) {
    this._width = width;
    this._height = height;
    this._pixelRatio = pixelRatio;
    this.domElement.width = Math.floor(width * pixelRatio);
    this.domElement.height = Math.floor(height * pixelRatio);
    this.setViewport(0, 0, width, height);
    if (this._initialized) this.backend.updateSize();
  }
  setSize(width, height, updateStyle = true) {
    this._width = width;
    this._height = height;
    this.domElement.width = Math.floor(width * this._pixelRatio);
    this.domElement.height = Math.floor(height * this._pixelRatio);
    if (updateStyle === true) {
      this.domElement.style.width = width + "px";
      this.domElement.style.height = height + "px";
    }
    this.setViewport(0, 0, width, height);
    if (this._initialized) this.backend.updateSize();
  }
  setOpaqueSort(method) {
    this._opaqueSort = method;
  }
  setTransparentSort(method) {
    this._transparentSort = method;
  }
  getScissor(target) {
    const scissor = this._scissor;
    target.x = scissor.x;
    target.y = scissor.y;
    target.width = scissor.width;
    target.height = scissor.height;
    return target;
  }
  setScissor(x2, y2, width, height) {
    const scissor = this._scissor;
    if (x2.isVector4) {
      scissor.copy(x2);
    } else {
      scissor.set(x2, y2, width, height);
    }
  }
  getScissorTest() {
    return this._scissorTest;
  }
  setScissorTest(boolean) {
    this._scissorTest = boolean;
    this.backend.setScissorTest(boolean);
  }
  getViewport(target) {
    return target.copy(this._viewport);
  }
  setViewport(x2, y2, width, height, minDepth = 0, maxDepth2 = 1) {
    const viewport2 = this._viewport;
    if (x2.isVector4) {
      viewport2.copy(x2);
    } else {
      viewport2.set(x2, y2, width, height);
    }
    viewport2.minDepth = minDepth;
    viewport2.maxDepth = maxDepth2;
  }
  getClearColor(target) {
    return target.copy(this._clearColor);
  }
  setClearColor(color3, alpha = 1) {
    this._clearColor.set(color3);
    this._clearColor.a = alpha;
  }
  getClearAlpha() {
    return this._clearColor.a;
  }
  setClearAlpha(alpha) {
    this._clearColor.a = alpha;
  }
  getClearDepth() {
    return this._clearDepth;
  }
  setClearDepth(depth2) {
    this._clearDepth = depth2;
  }
  getClearStencil() {
    return this._clearStencil;
  }
  setClearStencil(stencil) {
    this._clearStencil = stencil;
  }
  isOccluded(object2) {
    const renderContext = this._currentRenderContext;
    return renderContext && this.backend.isOccluded(renderContext, object2);
  }
  clear(color3 = true, depth2 = true, stencil = true) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead.");
      return this.clearAsync(color3, depth2, stencil);
    }
    const renderTarget = this._renderTarget || this._getFrameBufferTarget();
    let renderTargetData = null;
    if (renderTarget !== null) {
      this._textures.updateRenderTarget(renderTarget);
      renderTargetData = this._textures.get(renderTarget);
    }
    this.backend.clear(color3, depth2, stencil, renderTargetData);
    if (renderTarget !== null && this._renderTarget === null) {
      const quad = this._quad;
      if (this._nodes.hasOutputChange(renderTarget.texture)) {
        quad.material.fragmentNode = this._nodes.getOutputNode(renderTarget.texture);
        quad.material.needsUpdate = true;
      }
      this._renderScene(quad, quad.camera, false);
    }
  }
  clearColor() {
    return this.clear(true, false, false);
  }
  clearDepth() {
    return this.clear(false, true, false);
  }
  clearStencil() {
    return this.clear(false, false, true);
  }
  async clearAsync(color3 = true, depth2 = true, stencil = true) {
    if (this._initialized === false) await this.init();
    this.clear(color3, depth2, stencil);
  }
  clearColorAsync() {
    return this.clearAsync(true, false, false);
  }
  clearDepthAsync() {
    return this.clearAsync(false, true, false);
  }
  clearStencilAsync() {
    return this.clearAsync(false, false, true);
  }
  get currentToneMapping() {
    return this._renderTarget !== null ? NoToneMapping2 : this.toneMapping;
  }
  get currentColorSpace() {
    return this._renderTarget !== null ? LinearSRGBColorSpace2 : this.outputColorSpace;
  }
  dispose() {
    this.info.dispose();
    this._animation.dispose();
    this._objects.dispose();
    this._pipelines.dispose();
    this._nodes.dispose();
    this._bindings.dispose();
    this._renderLists.dispose();
    this._renderContexts.dispose();
    this._textures.dispose();
    this.setRenderTarget(null);
    this.setAnimationLoop(null);
  }
  setRenderTarget(renderTarget, activeCubeFace = 0, activeMipmapLevel = 0) {
    this._renderTarget = renderTarget;
    this._activeCubeFace = activeCubeFace;
    this._activeMipmapLevel = activeMipmapLevel;
  }
  getRenderTarget() {
    return this._renderTarget;
  }
  setRenderObjectFunction(renderObjectFunction) {
    this._renderObjectFunction = renderObjectFunction;
  }
  getRenderObjectFunction() {
    return this._renderObjectFunction;
  }
  async computeAsync(computeNodes) {
    if (this._initialized === false) await this.init();
    const nodeFrame = this._nodes.nodeFrame;
    const previousRenderId = nodeFrame.renderId;
    this.info.calls++;
    this.info.compute.calls++;
    this.info.compute.frameCalls++;
    nodeFrame.renderId = this.info.calls;
    const backend = this.backend;
    const pipelines = this._pipelines;
    const bindings = this._bindings;
    const nodes = this._nodes;
    const computeList = Array.isArray(computeNodes) ? computeNodes : [computeNodes];
    if (computeList[0] === void 0 || computeList[0].isComputeNode !== true) {
      throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");
    }
    backend.beginCompute(computeNodes);
    for (const computeNode of computeList) {
      if (pipelines.has(computeNode) === false) {
        const dispose = () => {
          computeNode.removeEventListener("dispose", dispose);
          pipelines.delete(computeNode);
          bindings.delete(computeNode);
          nodes.delete(computeNode);
        };
        computeNode.addEventListener("dispose", dispose);
        computeNode.onInit({ renderer: this });
      }
      nodes.updateForCompute(computeNode);
      bindings.updateForCompute(computeNode);
      const computeBindings = bindings.getForCompute(computeNode);
      const computePipeline = pipelines.getForCompute(computeNode, computeBindings);
      backend.compute(computeNodes, computeNode, computeBindings, computePipeline);
    }
    backend.finishCompute(computeNodes);
    await this.backend.resolveTimestampAsync(computeNodes, "compute");
    nodeFrame.renderId = previousRenderId;
  }
  async hasFeatureAsync(name) {
    if (this._initialized === false) await this.init();
    return this.backend.hasFeature(name);
  }
  hasFeature(name) {
    if (this._initialized === false) {
      console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead.");
      return false;
    }
    return this.backend.hasFeature(name);
  }
  copyFramebufferToTexture(framebufferTexture) {
    const renderContext = this._currentRenderContext;
    this._textures.updateTexture(framebufferTexture);
    this.backend.copyFramebufferToTexture(framebufferTexture, renderContext);
  }
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
    this._textures.updateTexture(srcTexture);
    this._textures.updateTexture(dstTexture);
    this.backend.copyTextureToTexture(srcTexture, dstTexture, srcRegion, dstPosition, level);
  }
  readRenderTargetPixelsAsync(renderTarget, x2, y2, width, height, index7 = 0) {
    return this.backend.copyTextureToBuffer(renderTarget.textures[index7], x2, y2, width, height);
  }
  _projectObject(object2, camera3, groupOrder, renderList) {
    if (object2.visible === false) return;
    const visible = object2.layers.test(camera3.layers);
    if (visible) {
      if (object2.isGroup) {
        groupOrder = object2.renderOrder;
      } else if (object2.isLOD) {
        if (object2.autoUpdate === true) object2.update(camera3);
      } else if (object2.isLight) {
        renderList.pushLight(object2);
      } else if (object2.isSprite) {
        if (!object2.frustumCulled || _frustum2.intersectsSprite(object2)) {
          if (this.sortObjects === true) {
            _vector32.setFromMatrixPosition(object2.matrixWorld).applyMatrix4(_projScreenMatrix2);
          }
          const geometry = object2.geometry;
          const material = object2.material;
          if (material.visible) {
            renderList.push(object2, geometry, material, groupOrder, _vector32.z, null);
          }
        }
      } else if (object2.isLineLoop) {
        console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");
      } else if (object2.isMesh || object2.isLine || object2.isPoints) {
        if (!object2.frustumCulled || _frustum2.intersectsObject(object2)) {
          const geometry = object2.geometry;
          const material = object2.material;
          if (this.sortObjects === true) {
            if (geometry.boundingSphere === null) geometry.computeBoundingSphere();
            _vector32.copy(geometry.boundingSphere.center).applyMatrix4(object2.matrixWorld).applyMatrix4(_projScreenMatrix2);
          }
          if (Array.isArray(material)) {
            const groups2 = geometry.groups;
            for (let i2 = 0, l2 = groups2.length; i2 < l2; i2++) {
              const group2 = groups2[i2];
              const groupMaterial = material[group2.materialIndex];
              if (groupMaterial && groupMaterial.visible) {
                renderList.push(object2, geometry, groupMaterial, groupOrder, _vector32.z, group2);
              }
            }
          } else if (material.visible) {
            renderList.push(object2, geometry, material, groupOrder, _vector32.z, null);
          }
        }
      }
    }
    if (object2.static === true && this.backend.beginBundle !== void 0) {
      const baseRenderList = renderList;
      renderList = this._renderLists.get(object2, camera3);
      renderList.begin();
      baseRenderList.pushBundle({
        object: object2,
        camera: camera3,
        renderList
      });
      renderList.finish();
    }
    const children2 = object2.children;
    for (let i2 = 0, l2 = children2.length; i2 < l2; i2++) {
      this._projectObject(children2[i2], camera3, groupOrder, renderList);
    }
  }
  _renderBundles(bundles, sceneRef, lightsNode) {
    for (const bundle of bundles) {
      this._renderBundle(bundle, sceneRef, lightsNode);
    }
  }
  _renderObjects(renderList, camera3, scene3, lightsNode) {
    for (let i2 = 0, il = renderList.length; i2 < il; i2++) {
      const renderItem = renderList[i2];
      const { object: object2, geometry, material, group: group2 } = renderItem;
      if (camera3.isArrayCamera) {
        const cameras = camera3.cameras;
        for (let j2 = 0, jl = cameras.length; j2 < jl; j2++) {
          const camera22 = cameras[j2];
          if (object2.layers.test(camera22.layers)) {
            const vp = camera22.viewport;
            const minDepth = vp.minDepth === void 0 ? 0 : vp.minDepth;
            const maxDepth2 = vp.maxDepth === void 0 ? 1 : vp.maxDepth;
            const viewportValue = this._currentRenderContext.viewportValue;
            viewportValue.copy(vp).multiplyScalar(this._pixelRatio).floor();
            viewportValue.minDepth = minDepth;
            viewportValue.maxDepth = maxDepth2;
            this.backend.updateViewport(this._currentRenderContext);
            this._currentRenderObjectFunction(object2, scene3, camera22, geometry, material, group2, lightsNode);
          }
        }
      } else {
        this._currentRenderObjectFunction(object2, scene3, camera3, geometry, material, group2, lightsNode);
      }
    }
  }
  renderObject(object2, scene3, camera3, geometry, material, group2, lightsNode) {
    let overridePositionNode;
    let overrideFragmentNode;
    let overrideDepthNode;
    object2.onBeforeRender(this, scene3, camera3, geometry, material, group2);
    if (scene3.overrideMaterial !== null) {
      const overrideMaterial2 = scene3.overrideMaterial;
      if (material.positionNode && material.positionNode.isNode) {
        overridePositionNode = overrideMaterial2.positionNode;
        overrideMaterial2.positionNode = material.positionNode;
      }
      if (overrideMaterial2.isShadowNodeMaterial) {
        overrideMaterial2.side = material.shadowSide === null ? material.side : material.shadowSide;
        if (material.depthNode && material.depthNode.isNode) {
          overrideDepthNode = overrideMaterial2.depthNode;
          overrideMaterial2.depthNode = material.depthNode;
        }
        if (material.shadowNode && material.shadowNode.isNode) {
          overrideFragmentNode = overrideMaterial2.fragmentNode;
          overrideMaterial2.fragmentNode = material.shadowNode;
        }
        if (this.localClippingEnabled) {
          if (material.clipShadows) {
            if (overrideMaterial2.clippingPlanes !== material.clippingPlanes) {
              overrideMaterial2.clippingPlanes = material.clippingPlanes;
              overrideMaterial2.needsUpdate = true;
            }
            if (overrideMaterial2.clipIntersection !== material.clipIntersection) {
              overrideMaterial2.clipIntersection = material.clipIntersection;
            }
          } else if (Array.isArray(overrideMaterial2.clippingPlanes)) {
            overrideMaterial2.clippingPlanes = null;
            overrideMaterial2.needsUpdate = true;
          }
        }
      }
      material = overrideMaterial2;
    }
    if (material.transparent === true && material.side === DoubleSide2 && material.forceSinglePass === false) {
      material.side = BackSide2;
      this._handleObjectFunction(object2, material, scene3, camera3, lightsNode, group2, "backSide");
      material.side = FrontSide2;
      this._handleObjectFunction(object2, material, scene3, camera3, lightsNode, group2);
      material.side = DoubleSide2;
    } else {
      this._handleObjectFunction(object2, material, scene3, camera3, lightsNode, group2);
    }
    if (overridePositionNode !== void 0) {
      scene3.overrideMaterial.positionNode = overridePositionNode;
    }
    if (overrideDepthNode !== void 0) {
      scene3.overrideMaterial.depthNode = overrideDepthNode;
    }
    if (overrideFragmentNode !== void 0) {
      scene3.overrideMaterial.fragmentNode = overrideFragmentNode;
    }
    object2.onAfterRender(this, scene3, camera3, geometry, material, group2);
  }
  _renderObjectDirect(object2, material, scene3, camera3, lightsNode, group2, passId) {
    const renderObject = this._objects.get(object2, material, scene3, camera3, lightsNode, this._currentRenderContext, passId);
    renderObject.drawRange = group2 || object2.geometry.drawRange;
    this._nodes.updateBefore(renderObject);
    object2.modelViewMatrix.multiplyMatrices(camera3.matrixWorldInverse, object2.matrixWorld);
    object2.normalMatrix.getNormalMatrix(object2.modelViewMatrix);
    this._nodes.updateForRender(renderObject);
    this._geometries.updateForRender(renderObject);
    this._bindings.updateForRender(renderObject);
    this._pipelines.updateForRender(renderObject);
    if (this._currentRenderBundle !== null) {
      const renderBundleData = this.backend.get(this._currentRenderBundle);
      renderBundleData.renderObjects.push(renderObject);
    }
    this.backend.draw(renderObject, this.info);
    this._nodes.updateAfter(renderObject);
  }
  _createObjectPipeline(object2, material, scene3, camera3, lightsNode, passId) {
    const renderObject = this._objects.get(object2, material, scene3, camera3, lightsNode, this._currentRenderContext, passId);
    this._nodes.updateBefore(renderObject);
    this._nodes.updateForRender(renderObject);
    this._geometries.updateForRender(renderObject);
    this._bindings.updateForRender(renderObject);
    this._pipelines.getForRender(renderObject, this._compilationPromises);
    this._nodes.updateAfter(renderObject);
  }
  get compute() {
    return this.computeAsync;
  }
  get compile() {
    return this.compileAsync;
  }
};
var IESSpotLight = class extends SpotLight {
  constructor(color3, intensity, distance3, angle2, penumbra, decay) {
    super(color3, intensity, distance3, angle2, penumbra, decay);
    this.iesMap = null;
  }
  copy(source, recursive) {
    super.copy(source, recursive);
    this.iesMap = source.iesMap;
    return this;
  }
};
var StandardNodeLibrary = class extends NodeLibrary {
  constructor() {
    super();
    this.addMaterial(MeshPhongNodeMaterial, MeshPhongMaterial2);
    this.addMaterial(MeshStandardNodeMaterial, MeshStandardMaterial);
    this.addMaterial(MeshPhysicalNodeMaterial, MeshPhysicalMaterial);
    this.addMaterial(MeshToonNodeMaterial, MeshToonMaterial);
    this.addMaterial(MeshBasicNodeMaterial, MeshBasicMaterial2);
    this.addMaterial(MeshLambertNodeMaterial, MeshLambertMaterial2);
    this.addMaterial(MeshNormalNodeMaterial, MeshNormalMaterial);
    this.addMaterial(MeshMatcapNodeMaterial, MeshMatcapMaterial);
    this.addMaterial(LineBasicNodeMaterial, LineBasicMaterial2);
    this.addMaterial(LineDashedNodeMaterial, LineDashedMaterial);
    this.addMaterial(PointsNodeMaterial, PointsMaterial2);
    this.addMaterial(SpriteNodeMaterial, SpriteMaterial);
    this.addMaterial(ShadowNodeMaterial, ShadowMaterial);
    this.addLight(PointLightNode, PointLight);
    this.addLight(DirectionalLightNode, DirectionalLight2);
    this.addLight(RectAreaLightNode, RectAreaLight);
    this.addLight(SpotLightNode, SpotLight);
    this.addLight(AmbientLightNode, AmbientLight2);
    this.addLight(HemisphereLightNode, HemisphereLight);
    this.addLight(LightProbeNode, LightProbe);
    this.addLight(IESSpotLightNode, IESSpotLight);
    this.addToneMapping(LinearToneMapping2, LinearToneMapping$1);
    this.addToneMapping(ReinhardToneMapping2, ReinhardToneMapping$1);
    this.addToneMapping(CineonToneMapping2, CineonToneMapping$1);
    this.addToneMapping(ACESFilmicToneMapping2, ACESFilmicToneMapping$1);
    this.addToneMapping(AgXToneMapping2, AgXToneMapping$1);
    this.addToneMapping(NeutralToneMapping2, NeutralToneMapping$1);
    this.addColorSpace(LinearTosRGB, getColorSpaceMethod(LinearSRGBColorSpace2, SRGBColorSpace2));
    this.addColorSpace(sRGBToLinear, getColorSpaceMethod(SRGBColorSpace2, LinearSRGBColorSpace2));
  }
};
var StandardRenderer = class extends Renderer {
  constructor(backend, parameters = {}) {
    super(backend, parameters);
    this.isStandardRenderer = true;
    this.nodes.library = new StandardNodeLibrary();
  }
};
var Binding = class {
  constructor(name = "") {
    this.name = name;
    this.visibility = 0;
  }
  setVisibility(visibility) {
    this.visibility |= visibility;
  }
  clone() {
    return Object.assign(new this.constructor(), this);
  }
};
function getFloatLength(floatLength) {
  return floatLength + (GPU_CHUNK_BYTES - floatLength % GPU_CHUNK_BYTES) % GPU_CHUNK_BYTES;
}
var Buffer = class extends Binding {
  constructor(name, buffer2 = null) {
    super(name);
    this.isBuffer = true;
    this.bytesPerElement = Float32Array.BYTES_PER_ELEMENT;
    this._buffer = buffer2;
  }
  get byteLength() {
    return getFloatLength(this._buffer.byteLength);
  }
  get buffer() {
    return this._buffer;
  }
  update() {
    return true;
  }
};
var UniformBuffer = class extends Buffer {
  constructor(name, buffer2 = null) {
    super(name, buffer2);
    this.isUniformBuffer = true;
  }
};
var _id$4 = 0;
var NodeUniformBuffer = class extends UniformBuffer {
  constructor(nodeUniform, groupNode) {
    super("UniformBuffer_" + _id$4++, nodeUniform ? nodeUniform.value : null);
    this.nodeUniform = nodeUniform;
    this.groupNode = groupNode;
  }
  get buffer() {
    return this.nodeUniform.value;
  }
};
var UniformsGroup = class extends UniformBuffer {
  constructor(name) {
    super(name);
    this.isUniformsGroup = true;
    this._values = null;
    this.uniforms = [];
  }
  addUniform(uniform2) {
    this.uniforms.push(uniform2);
    return this;
  }
  removeUniform(uniform2) {
    const index7 = this.uniforms.indexOf(uniform2);
    if (index7 !== -1) {
      this.uniforms.splice(index7, 1);
    }
    return this;
  }
  get values() {
    if (this._values === null) {
      this._values = Array.from(this.buffer);
    }
    return this._values;
  }
  get buffer() {
    let buffer2 = this._buffer;
    if (buffer2 === null) {
      const byteLength = this.byteLength;
      buffer2 = new Float32Array(new ArrayBuffer(byteLength));
      this._buffer = buffer2;
    }
    return buffer2;
  }
  get byteLength() {
    let offset = 0;
    for (let i2 = 0, l2 = this.uniforms.length; i2 < l2; i2++) {
      const uniform2 = this.uniforms[i2];
      const { boundary, itemSize } = uniform2;
      const chunkOffset = offset % GPU_CHUNK_BYTES;
      const remainingSizeInChunk = GPU_CHUNK_BYTES - chunkOffset;
      if (chunkOffset !== 0 && remainingSizeInChunk - boundary < 0) {
        offset += GPU_CHUNK_BYTES - chunkOffset;
      } else if (chunkOffset % boundary !== 0) {
        offset += chunkOffset % boundary;
      }
      uniform2.offset = offset / this.bytesPerElement;
      offset += itemSize * this.bytesPerElement;
    }
    return Math.ceil(offset / GPU_CHUNK_BYTES) * GPU_CHUNK_BYTES;
  }
  update() {
    let updated = false;
    for (const uniform2 of this.uniforms) {
      if (this.updateByType(uniform2) === true) {
        updated = true;
      }
    }
    return updated;
  }
  updateByType(uniform2) {
    if (uniform2.isNumberUniform) return this.updateNumber(uniform2);
    if (uniform2.isVector2Uniform) return this.updateVector2(uniform2);
    if (uniform2.isVector3Uniform) return this.updateVector3(uniform2);
    if (uniform2.isVector4Uniform) return this.updateVector4(uniform2);
    if (uniform2.isColorUniform) return this.updateColor(uniform2);
    if (uniform2.isMatrix3Uniform) return this.updateMatrix3(uniform2);
    if (uniform2.isMatrix4Uniform) return this.updateMatrix4(uniform2);
    console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.", uniform2);
  }
  updateNumber(uniform2) {
    let updated = false;
    const a2 = this.values;
    const v3 = uniform2.getValue();
    const offset = uniform2.offset;
    if (a2[offset] !== v3) {
      const b = this.buffer;
      b[offset] = a2[offset] = v3;
      updated = true;
    }
    return updated;
  }
  updateVector2(uniform2) {
    let updated = false;
    const a2 = this.values;
    const v3 = uniform2.getValue();
    const offset = uniform2.offset;
    if (a2[offset + 0] !== v3.x || a2[offset + 1] !== v3.y) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = v3.x;
      b[offset + 1] = a2[offset + 1] = v3.y;
      updated = true;
    }
    return updated;
  }
  updateVector3(uniform2) {
    let updated = false;
    const a2 = this.values;
    const v3 = uniform2.getValue();
    const offset = uniform2.offset;
    if (a2[offset + 0] !== v3.x || a2[offset + 1] !== v3.y || a2[offset + 2] !== v3.z) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = v3.x;
      b[offset + 1] = a2[offset + 1] = v3.y;
      b[offset + 2] = a2[offset + 2] = v3.z;
      updated = true;
    }
    return updated;
  }
  updateVector4(uniform2) {
    let updated = false;
    const a2 = this.values;
    const v3 = uniform2.getValue();
    const offset = uniform2.offset;
    if (a2[offset + 0] !== v3.x || a2[offset + 1] !== v3.y || a2[offset + 2] !== v3.z || a2[offset + 4] !== v3.w) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = v3.x;
      b[offset + 1] = a2[offset + 1] = v3.y;
      b[offset + 2] = a2[offset + 2] = v3.z;
      b[offset + 3] = a2[offset + 3] = v3.w;
      updated = true;
    }
    return updated;
  }
  updateColor(uniform2) {
    let updated = false;
    const a2 = this.values;
    const c4 = uniform2.getValue();
    const offset = uniform2.offset;
    if (a2[offset + 0] !== c4.r || a2[offset + 1] !== c4.g || a2[offset + 2] !== c4.b) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = c4.r;
      b[offset + 1] = a2[offset + 1] = c4.g;
      b[offset + 2] = a2[offset + 2] = c4.b;
      updated = true;
    }
    return updated;
  }
  updateMatrix3(uniform2) {
    let updated = false;
    const a2 = this.values;
    const e3 = uniform2.getValue().elements;
    const offset = uniform2.offset;
    if (a2[offset + 0] !== e3[0] || a2[offset + 1] !== e3[1] || a2[offset + 2] !== e3[2] || a2[offset + 4] !== e3[3] || a2[offset + 5] !== e3[4] || a2[offset + 6] !== e3[5] || a2[offset + 8] !== e3[6] || a2[offset + 9] !== e3[7] || a2[offset + 10] !== e3[8]) {
      const b = this.buffer;
      b[offset + 0] = a2[offset + 0] = e3[0];
      b[offset + 1] = a2[offset + 1] = e3[1];
      b[offset + 2] = a2[offset + 2] = e3[2];
      b[offset + 4] = a2[offset + 4] = e3[3];
      b[offset + 5] = a2[offset + 5] = e3[4];
      b[offset + 6] = a2[offset + 6] = e3[5];
      b[offset + 8] = a2[offset + 8] = e3[6];
      b[offset + 9] = a2[offset + 9] = e3[7];
      b[offset + 10] = a2[offset + 10] = e3[8];
      updated = true;
    }
    return updated;
  }
  updateMatrix4(uniform2) {
    let updated = false;
    const a2 = this.values;
    const e3 = uniform2.getValue().elements;
    const offset = uniform2.offset;
    if (arraysEqual2(a2, e3, offset) === false) {
      const b = this.buffer;
      b.set(e3, offset);
      setArray(a2, e3, offset);
      updated = true;
    }
    return updated;
  }
};
function setArray(a2, b, offset) {
  for (let i2 = 0, l2 = b.length; i2 < l2; i2++) {
    a2[offset + i2] = b[i2];
  }
}
function arraysEqual2(a2, b, offset) {
  for (let i2 = 0, l2 = b.length; i2 < l2; i2++) {
    if (a2[offset + i2] !== b[i2]) return false;
  }
  return true;
}
var _id$3 = 0;
var NodeUniformsGroup = class extends UniformsGroup {
  constructor(name, groupNode) {
    super(name);
    this.id = _id$3++;
    this.groupNode = groupNode;
    this.isNodeUniformsGroup = true;
  }
  getNodes() {
    const nodes = [];
    for (const uniform2 of this.uniforms) {
      const node = uniform2.nodeUniform.node;
      if (!node) throw new Error("NodeUniformsGroup: Uniform has no node.");
      nodes.push(node);
    }
    return nodes;
  }
};
var _id$22 = 0;
var SampledTexture = class extends Binding {
  constructor(name, texture2) {
    super(name);
    this.id = _id$22++;
    this.texture = texture2;
    this.version = texture2 ? texture2.version : 0;
    this.store = false;
    this.generation = null;
    this.isSampledTexture = true;
  }
  needsBindingsUpdate(generation) {
    const { texture: texture2 } = this;
    if (generation !== this.generation) {
      this.generation = generation;
      return true;
    }
    return texture2.isVideoTexture;
  }
  update() {
    const { texture: texture2, version } = this;
    if (version !== texture2.version) {
      this.version = texture2.version;
      return true;
    }
    return false;
  }
};
var NodeSampledTexture = class extends SampledTexture {
  constructor(name, textureNode, groupNode, access = null) {
    super(name, textureNode ? textureNode.value : null);
    this.textureNode = textureNode;
    this.groupNode = groupNode;
    this.access = access;
  }
  needsBindingsUpdate(generation) {
    return this.textureNode.value !== this.texture || super.needsBindingsUpdate(generation);
  }
  update() {
    const { textureNode } = this;
    if (this.texture !== textureNode.value) {
      this.texture = textureNode.value;
      return true;
    }
    return super.update();
  }
};
var NodeSampledCubeTexture = class extends NodeSampledTexture {
  constructor(name, textureNode, groupNode, access) {
    super(name, textureNode, groupNode, access);
    this.isSampledCubeTexture = true;
  }
};
var NodeSampledTexture3D = class extends NodeSampledTexture {
  constructor(name, textureNode, groupNode, access) {
    super(name, textureNode, groupNode, access);
    this.isSampledTexture3D = true;
  }
};
var glslMethods = {
  atan2: "atan",
  textureDimensions: "textureSize",
  equals: "equal"
};
var precisionLib = {
  low: "lowp",
  medium: "mediump",
  high: "highp"
};
var supports$1 = {
  swizzleAssign: true,
  storageBuffer: false
};
var defaultPrecisions = `
precision highp float;
precision highp int;
precision highp sampler2D;
precision highp sampler3D;
precision highp samplerCube;
precision highp sampler2DArray;

precision highp usampler2D;
precision highp usampler3D;
precision highp usamplerCube;
precision highp usampler2DArray;

precision highp isampler2D;
precision highp isampler3D;
precision highp isamplerCube;
precision highp isampler2DArray;

precision lowp sampler2DShadow;
`;
var GLSLNodeBuilder = class extends NodeBuilder {
  constructor(object2, renderer3) {
    super(object2, renderer3, new GLSLNodeParser());
    this.uniformGroups = {};
    this.transforms = [];
    this.extensions = {};
    this.instanceBindGroups = false;
    this.useComparisonMethod = true;
  }
  needsColorSpaceToLinearSRGB(texture2) {
    return texture2.isVideoTexture === true && texture2.colorSpace !== NoColorSpace2;
  }
  getMethod(method) {
    return glslMethods[method] || method;
  }
  getOutputStructName() {
    return "";
  }
  buildFunctionCode(shaderNode) {
    const layout = shaderNode.layout;
    const flowData = this.flowShaderNode(shaderNode);
    const parameters = [];
    for (const input of layout.inputs) {
      parameters.push(this.getType(input.type) + " " + input.name);
    }
    const code2 = `${this.getType(layout.type)} ${layout.name}( ${parameters.join(", ")} ) {

	${flowData.vars}

${flowData.code}
	return ${flowData.result};

}`;
    return code2;
  }
  setupPBO(storageBufferNode) {
    const attribute2 = storageBufferNode.value;
    if (attribute2.pbo === void 0) {
      const originalArray = attribute2.array;
      const numElements = attribute2.count * attribute2.itemSize;
      const { itemSize } = attribute2;
      const isInteger = attribute2.array.constructor.name.toLowerCase().includes("int");
      let format3 = isInteger ? RedIntegerFormat2 : RedFormat2;
      if (itemSize === 2) {
        format3 = isInteger ? RGIntegerFormat2 : RGFormat2;
      } else if (itemSize === 3) {
        format3 = isInteger ? RGBIntegerFormat : RGBFormat2;
      } else if (itemSize === 4) {
        format3 = isInteger ? RGBAIntegerFormat2 : RGBAFormat2;
      }
      const typeMap = {
        Float32Array: FloatType2,
        Uint8Array: UnsignedByteType2,
        Uint16Array: UnsignedShortType2,
        Uint32Array: UnsignedIntType2,
        Int8Array: ByteType2,
        Int16Array: ShortType2,
        Int32Array: IntType2,
        Uint8ClampedArray: UnsignedByteType2
      };
      const width = Math.pow(2, Math.ceil(Math.log2(Math.sqrt(numElements / itemSize))));
      let height = Math.ceil(numElements / itemSize / width);
      if (width * height * itemSize < numElements) height++;
      const newSize = width * height * itemSize;
      const newArray = new originalArray.constructor(newSize);
      newArray.set(originalArray, 0);
      attribute2.array = newArray;
      const pboTexture = new DataTexture(attribute2.array, width, height, format3, typeMap[attribute2.array.constructor.name] || FloatType2);
      pboTexture.needsUpdate = true;
      pboTexture.isPBOTexture = true;
      const pbo = new TextureNode(pboTexture, null, null);
      pbo.setPrecision("high");
      attribute2.pboNode = pbo;
      attribute2.pbo = pbo.value;
      this.getUniformFromNode(attribute2.pboNode, "texture", this.shaderStage, this.context.label);
    }
  }
  getPropertyName(node, shaderStage = this.shaderStage) {
    if (node.isNodeUniform && node.node.isTextureNode !== true && node.node.isBufferNode !== true) {
      return shaderStage.charAt(0) + "_" + node.name;
    }
    return super.getPropertyName(node, shaderStage);
  }
  generatePBO(storageArrayElementNode) {
    const { node, indexNode } = storageArrayElementNode;
    const attribute2 = node.value;
    if (this.renderer.backend.has(attribute2)) {
      const attributeData = this.renderer.backend.get(attribute2);
      attributeData.pbo = attribute2.pbo;
    }
    const nodeUniform = this.getUniformFromNode(attribute2.pboNode, "texture", this.shaderStage, this.context.label);
    const textureName = this.getPropertyName(nodeUniform);
    this.increaseUsage(indexNode);
    const indexSnippet = indexNode.build(this, "uint");
    const elementNodeData = this.getDataFromNode(storageArrayElementNode);
    let propertyName = elementNodeData.propertyName;
    if (propertyName === void 0) {
      const nodeVar = this.getVarFromNode(storageArrayElementNode);
      propertyName = this.getPropertyName(nodeVar);
      const bufferNodeData = this.getDataFromNode(node);
      let propertySizeName = bufferNodeData.propertySizeName;
      if (propertySizeName === void 0) {
        propertySizeName = propertyName + "Size";
        this.getVarFromNode(node, propertySizeName, "uint");
        this.addLineFlowCode(`${propertySizeName} = uint( textureSize( ${textureName}, 0 ).x )`);
        bufferNodeData.propertySizeName = propertySizeName;
      }
      const { itemSize } = attribute2;
      const channel = "." + vectorComponents.join("").slice(0, itemSize);
      const uvSnippet = `ivec2(${indexSnippet} % ${propertySizeName}, ${indexSnippet} / ${propertySizeName})`;
      const snippet = this.generateTextureLoad(null, textureName, uvSnippet, null, "0");
      let prefix = "vec4";
      if (attribute2.pbo.type === UnsignedIntType2) {
        prefix = "uvec4";
      } else if (attribute2.pbo.type === IntType2) {
        prefix = "ivec4";
      }
      this.addLineFlowCode(`${propertyName} = ${prefix}(${snippet})${channel}`);
      elementNodeData.propertyName = propertyName;
    }
    return propertyName;
  }
  generateTextureLoad(texture2, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = "0") {
    if (depthSnippet) {
      return `texelFetch( ${textureProperty}, ivec3( ${uvIndexSnippet}, ${depthSnippet} ), ${levelSnippet} )`;
    } else {
      return `texelFetch( ${textureProperty}, ${uvIndexSnippet}, ${levelSnippet} )`;
    }
  }
  generateTexture(texture2, textureProperty, uvSnippet, depthSnippet) {
    if (texture2.isDepthTexture) {
      return `texture( ${textureProperty}, ${uvSnippet} ).x`;
    } else {
      if (depthSnippet) uvSnippet = `vec3( ${uvSnippet}, ${depthSnippet} )`;
      return `texture( ${textureProperty}, ${uvSnippet} )`;
    }
  }
  generateTextureLevel(texture2, textureProperty, uvSnippet, levelSnippet) {
    return `textureLod( ${textureProperty}, ${uvSnippet}, ${levelSnippet} )`;
  }
  generateTextureBias(texture2, textureProperty, uvSnippet, biasSnippet) {
    return `texture( ${textureProperty}, ${uvSnippet}, ${biasSnippet} )`;
  }
  generateTextureGrad(texture2, textureProperty, uvSnippet, gradSnippet) {
    return `textureGrad( ${textureProperty}, ${uvSnippet}, ${gradSnippet[0]}, ${gradSnippet[1]} )`;
  }
  generateTextureCompare(texture2, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      return `texture( ${textureProperty}, vec3( ${uvSnippet}, ${compareSnippet} ) )`;
    } else {
      console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);
    }
  }
  getVars(shaderStage) {
    const snippets = [];
    const vars = this.vars[shaderStage];
    if (vars !== void 0) {
      for (const variable of vars) {
        snippets.push(`${this.getVar(variable.type, variable.name)};`);
      }
    }
    return snippets.join("\n	");
  }
  getUniforms(shaderStage) {
    const uniforms = this.uniforms[shaderStage];
    const bindingSnippets = [];
    const uniformGroups = {};
    for (const uniform2 of uniforms) {
      let snippet = null;
      let group2 = false;
      if (uniform2.type === "texture") {
        const texture2 = uniform2.node.value;
        let typePrefix = "";
        if (texture2.isDataTexture === true) {
          if (texture2.type === UnsignedIntType2) {
            typePrefix = "u";
          } else if (texture2.type === IntType2) {
            typePrefix = "i";
          }
        }
        if (texture2.compareFunction) {
          snippet = `sampler2DShadow ${uniform2.name};`;
        } else if (texture2.isDataArrayTexture === true || texture2.isCompressedArrayTexture === true) {
          snippet = `${typePrefix}sampler2DArray ${uniform2.name};`;
        } else {
          snippet = `${typePrefix}sampler2D ${uniform2.name};`;
        }
      } else if (uniform2.type === "cubeTexture") {
        snippet = `samplerCube ${uniform2.name};`;
      } else if (uniform2.type === "texture3D") {
        snippet = `sampler3D ${uniform2.name};`;
      } else if (uniform2.type === "buffer") {
        const bufferNode = uniform2.node;
        const bufferType = this.getType(bufferNode.bufferType);
        const bufferCount = bufferNode.bufferCount;
        const bufferCountSnippet = bufferCount > 0 ? bufferCount : "";
        snippet = `${bufferNode.name} {
	${bufferType} ${uniform2.name}[${bufferCountSnippet}];
};
`;
      } else {
        const vectorType = this.getVectorType(uniform2.type);
        snippet = `${vectorType} ${this.getPropertyName(uniform2, shaderStage)};`;
        group2 = true;
      }
      const precision = uniform2.node.precision;
      if (precision !== null) {
        snippet = precisionLib[precision] + " " + snippet;
      }
      if (group2) {
        snippet = "	" + snippet;
        const groupName = uniform2.groupNode.name;
        const groupSnippets = uniformGroups[groupName] || (uniformGroups[groupName] = []);
        groupSnippets.push(snippet);
      } else {
        snippet = "uniform " + snippet;
        bindingSnippets.push(snippet);
      }
    }
    let output2 = "";
    for (const name in uniformGroups) {
      const groupSnippets = uniformGroups[name];
      output2 += this._getGLSLUniformStruct(shaderStage + "_" + name, groupSnippets.join("\n")) + "\n";
    }
    output2 += bindingSnippets.join("\n");
    return output2;
  }
  getTypeFromAttribute(attribute2) {
    let nodeType = super.getTypeFromAttribute(attribute2);
    if (/^[iu]/.test(nodeType) && attribute2.gpuType !== IntType2) {
      let dataAttribute = attribute2;
      if (attribute2.isInterleavedBufferAttribute) dataAttribute = attribute2.data;
      const array3 = dataAttribute.array;
      if ((array3 instanceof Uint32Array || array3 instanceof Int32Array) === false) {
        nodeType = nodeType.slice(1);
      }
    }
    return nodeType;
  }
  getAttributes(shaderStage) {
    let snippet = "";
    if (shaderStage === "vertex" || shaderStage === "compute") {
      const attributes = this.getAttributesArray();
      let location = 0;
      for (const attribute2 of attributes) {
        snippet += `layout( location = ${location++} ) in ${attribute2.type} ${attribute2.name};
`;
      }
    }
    return snippet;
  }
  getStructMembers(struct) {
    const snippets = [];
    const members = struct.getMemberTypes();
    for (let i2 = 0; i2 < members.length; i2++) {
      const member = members[i2];
      snippets.push(`layout( location = ${i2} ) out ${member} m${i2};`);
    }
    return snippets.join("\n");
  }
  getStructs(shaderStage) {
    const snippets = [];
    const structs = this.structs[shaderStage];
    if (structs.length === 0) {
      return "layout( location = 0 ) out vec4 fragColor;\n";
    }
    for (let index7 = 0, length2 = structs.length; index7 < length2; index7++) {
      const struct = structs[index7];
      let snippet = "\n";
      snippet += this.getStructMembers(struct);
      snippet += "\n";
      snippets.push(snippet);
    }
    return snippets.join("\n\n");
  }
  getVaryings(shaderStage) {
    let snippet = "";
    const varyings = this.varyings;
    if (shaderStage === "vertex" || shaderStage === "compute") {
      for (const varying2 of varyings) {
        if (shaderStage === "compute") varying2.needsInterpolation = true;
        const type = varying2.type;
        const flat = type.includes("int") || type.includes("uv") || type.includes("iv") ? "flat " : "";
        snippet += `${flat}${varying2.needsInterpolation ? "out" : "/*out*/"} ${type} ${varying2.name};
`;
      }
    } else if (shaderStage === "fragment") {
      for (const varying2 of varyings) {
        if (varying2.needsInterpolation) {
          const type = varying2.type;
          const flat = type.includes("int") || type.includes("uv") || type.includes("iv") ? "flat " : "";
          snippet += `${flat}in ${type} ${varying2.name};
`;
        }
      }
    }
    return snippet;
  }
  getVertexIndex() {
    return "uint( gl_VertexID )";
  }
  getInstanceIndex() {
    return "uint( gl_InstanceID )";
  }
  getInvocationLocalIndex() {
    const workgroupSize = this.object.workgroupSize;
    const size = workgroupSize.reduce((acc, curr) => acc * curr, 1);
    return `uint( gl_InstanceID ) % ${size}u`;
  }
  getDrawIndex() {
    const extensions = this.renderer.backend.extensions;
    if (extensions.has("WEBGL_multi_draw")) {
      return "uint( gl_DrawID )";
    }
    return null;
  }
  getFrontFacing() {
    return "gl_FrontFacing";
  }
  getFragCoord() {
    return "gl_FragCoord.xy";
  }
  getFragDepth() {
    return "gl_FragDepth";
  }
  enableExtension(name, behavior, shaderStage = this.shaderStage) {
    const map4 = this.extensions[shaderStage] || (this.extensions[shaderStage] = /* @__PURE__ */ new Map());
    if (map4.has(name) === false) {
      map4.set(name, {
        name,
        behavior
      });
    }
  }
  getExtensions(shaderStage) {
    const snippets = [];
    if (shaderStage === "vertex") {
      const ext = this.renderer.backend.extensions;
      const isBatchedMesh = this.object.isBatchedMesh;
      if (isBatchedMesh && ext.has("WEBGL_multi_draw")) {
        this.enableExtension("GL_ANGLE_multi_draw", "require", shaderStage);
      }
    }
    const extensions = this.extensions[shaderStage];
    if (extensions !== void 0) {
      for (const { name, behavior } of extensions.values()) {
        snippets.push(`#extension ${name} : ${behavior}`);
      }
    }
    return snippets.join("\n");
  }
  isAvailable(name) {
    let result = supports$1[name];
    if (result === void 0) {
      if (name === "float32Filterable") {
        const extensions = this.renderer.backend.extensions;
        if (extensions.has("OES_texture_float_linear")) {
          extensions.get("OES_texture_float_linear");
          result = true;
        } else {
          result = false;
        }
      }
      supports$1[name] = result;
    }
    return result;
  }
  isFlipY() {
    return true;
  }
  registerTransform(varyingName, attributeNode) {
    this.transforms.push({ varyingName, attributeNode });
  }
  getTransforms() {
    const transforms = this.transforms;
    let snippet = "";
    for (let i2 = 0; i2 < transforms.length; i2++) {
      const transform = transforms[i2];
      const attributeName = this.getPropertyName(transform.attributeNode);
      snippet += `${transform.varyingName} = ${attributeName};
	`;
    }
    return snippet;
  }
  _getGLSLUniformStruct(name, vars) {
    return `
layout( std140 ) uniform ${name} {
${vars}
};`;
  }
  _getGLSLVertexCode(shaderData) {
    return `#version 300 es

${this.getSignature()}

// extensions 
${shaderData.extensions}

// precision
${defaultPrecisions}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// attributes
${shaderData.attributes}

// codes
${shaderData.codes}

void main() {

	// vars
	${shaderData.vars}

	// transforms
	${shaderData.transforms}

	// flow
	${shaderData.flow}

	gl_PointSize = 1.0;

}
`;
  }
  _getGLSLFragmentCode(shaderData) {
    return `#version 300 es

${this.getSignature()}

// precision
${defaultPrecisions}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}

// codes
${shaderData.codes}

${shaderData.structs}

void main() {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
  }
  buildCode() {
    const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };
    for (const shaderStage in shadersData) {
      let flow = "// code\n\n";
      flow += this.flowCode[shaderStage];
      const flowNodes = this.flowNodes[shaderStage];
      const mainNode = flowNodes[flowNodes.length - 1];
      for (const node of flowNodes) {
        const flowSlotData = this.getFlowData(
          node
          /*, shaderStage*/
        );
        const slotName = node.name;
        if (slotName) {
          if (flow.length > 0) flow += "\n";
          flow += `	// flow -> ${slotName}
	`;
        }
        flow += `${flowSlotData.code}
	`;
        if (node === mainNode && shaderStage !== "compute") {
          flow += "// result\n	";
          if (shaderStage === "vertex") {
            flow += "gl_Position = ";
            flow += `${flowSlotData.result};`;
          } else if (shaderStage === "fragment") {
            if (!node.outputNode.isOutputStructNode) {
              flow += "fragColor = ";
              flow += `${flowSlotData.result};`;
            }
          }
        }
      }
      const stageData = shadersData[shaderStage];
      stageData.extensions = this.getExtensions(shaderStage);
      stageData.uniforms = this.getUniforms(shaderStage);
      stageData.attributes = this.getAttributes(shaderStage);
      stageData.varyings = this.getVaryings(shaderStage);
      stageData.vars = this.getVars(shaderStage);
      stageData.structs = this.getStructs(shaderStage);
      stageData.codes = this.getCodes(shaderStage);
      stageData.transforms = this.getTransforms(shaderStage);
      stageData.flow = flow;
    }
    if (this.material !== null) {
      this.vertexShader = this._getGLSLVertexCode(shadersData.vertex);
      this.fragmentShader = this._getGLSLFragmentCode(shadersData.fragment);
    } else {
      this.computeShader = this._getGLSLVertexCode(shadersData.compute);
    }
  }
  getUniformFromNode(node, type, shaderStage, name = null) {
    const uniformNode = super.getUniformFromNode(node, type, shaderStage, name);
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    let uniformGPU = nodeData.uniformGPU;
    if (uniformGPU === void 0) {
      const group2 = node.groupNode;
      const groupName = group2.name;
      const bindings = this.getBindGroupArray(groupName, shaderStage);
      if (type === "texture") {
        uniformGPU = new NodeSampledTexture(uniformNode.name, uniformNode.node, group2);
        bindings.push(uniformGPU);
      } else if (type === "cubeTexture") {
        uniformGPU = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group2);
        bindings.push(uniformGPU);
      } else if (type === "texture3D") {
        uniformGPU = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group2);
        bindings.push(uniformGPU);
      } else if (type === "buffer") {
        node.name = `NodeBuffer_${node.id}`;
        uniformNode.name = `buffer${node.id}`;
        const buffer2 = new NodeUniformBuffer(node, group2);
        buffer2.name = node.name;
        bindings.push(buffer2);
        uniformGPU = buffer2;
      } else {
        const uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});
        let uniformsGroup = uniformsStage[groupName];
        if (uniformsGroup === void 0) {
          uniformsGroup = new NodeUniformsGroup(shaderStage + "_" + groupName, group2);
          uniformsStage[groupName] = uniformsGroup;
          bindings.push(uniformsGroup);
        }
        uniformGPU = this.getNodeUniform(uniformNode, type);
        uniformsGroup.addUniform(uniformGPU);
      }
      nodeData.uniformGPU = uniformGPU;
    }
    return uniformNode;
  }
};
var vector2 = null;
var vector4 = null;
var color4 = null;
var Backend = class {
  constructor(parameters = {}) {
    this.parameters = Object.assign({}, parameters);
    this.data = /* @__PURE__ */ new WeakMap();
    this.renderer = null;
    this.domElement = null;
  }
  async init(renderer3) {
    this.renderer = renderer3;
  }
  // render context
  begin() {
  }
  finish() {
  }
  // render object
  draw() {
  }
  // program
  createProgram() {
  }
  destroyProgram() {
  }
  // bindings
  createBindings() {
  }
  updateBindings() {
  }
  // pipeline
  createRenderPipeline() {
  }
  createComputePipeline() {
  }
  destroyPipeline() {
  }
  // cache key
  needsRenderUpdate() {
  }
  // return Boolean ( fast test )
  getRenderCacheKey() {
  }
  // return String
  // node builder
  createNodeBuilder() {
  }
  // return NodeBuilder (ADD IT)
  // textures
  createSampler() {
  }
  createDefaultTexture() {
  }
  createTexture() {
  }
  copyTextureToBuffer() {
  }
  // attributes
  createAttribute() {
  }
  createIndexAttribute() {
  }
  updateAttribute() {
  }
  destroyAttribute() {
  }
  // canvas
  getContext() {
  }
  updateSize() {
  }
  // utils
  resolveTimestampAsync() {
  }
  hasFeatureAsync() {
  }
  // return Boolean
  hasFeature() {
  }
  // return Boolean
  getInstanceCount(renderObject) {
    const { object: object2, geometry } = renderObject;
    return geometry.isInstancedBufferGeometry ? geometry.instanceCount : object2.count > 1 ? object2.count : 1;
  }
  getDrawingBufferSize() {
    vector2 = vector2 || new Vector22();
    return this.renderer.getDrawingBufferSize(vector2);
  }
  getScissor() {
    vector4 = vector4 || new Vector42();
    return this.renderer.getScissor(vector4);
  }
  setScissorTest() {
  }
  getClearColor() {
    const renderer3 = this.renderer;
    color4 = color4 || new Color4();
    renderer3.getClearColor(color4);
    color4.getRGB(color4, this.renderer.currentColorSpace);
    return color4;
  }
  getDomElement() {
    let domElement = this.domElement;
    if (domElement === null) {
      domElement = this.parameters.canvas !== void 0 ? this.parameters.canvas : createCanvasElement2();
      if ("setAttribute" in domElement) domElement.setAttribute("data-engine", `three.js r${REVISION2} webgpu`);
      this.domElement = domElement;
    }
    return domElement;
  }
  // resource properties
  set(object2, value) {
    this.data.set(object2, value);
  }
  get(object2) {
    let map4 = this.data.get(object2);
    if (map4 === void 0) {
      map4 = {};
      this.data.set(object2, map4);
    }
    return map4;
  }
  has(object2) {
    return this.data.has(object2);
  }
  delete(object2) {
    this.data.delete(object2);
  }
};
var _id$12 = 0;
var DualAttributeData = class {
  constructor(attributeData, dualBuffer) {
    this.buffers = [attributeData.bufferGPU, dualBuffer];
    this.type = attributeData.type;
    this.bufferType = attributeData.bufferType;
    this.pbo = attributeData.pbo;
    this.byteLength = attributeData.byteLength;
    this.bytesPerElement = attributeData.BYTES_PER_ELEMENT;
    this.version = attributeData.version;
    this.isInteger = attributeData.isInteger;
    this.activeBufferIndex = 0;
    this.baseId = attributeData.id;
  }
  get id() {
    return `${this.baseId}|${this.activeBufferIndex}`;
  }
  get bufferGPU() {
    return this.buffers[this.activeBufferIndex];
  }
  get transformBuffer() {
    return this.buffers[this.activeBufferIndex ^ 1];
  }
  switchBuffers() {
    this.activeBufferIndex ^= 1;
  }
};
var WebGLAttributeUtils = class {
  constructor(backend) {
    this.backend = backend;
  }
  createAttribute(attribute2, bufferType) {
    const backend = this.backend;
    const { gl } = backend;
    const array3 = attribute2.array;
    const usage = attribute2.usage || gl.STATIC_DRAW;
    const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
    const bufferData = backend.get(bufferAttribute2);
    let bufferGPU = bufferData.bufferGPU;
    if (bufferGPU === void 0) {
      bufferGPU = this._createBuffer(gl, bufferType, array3, usage);
      bufferData.bufferGPU = bufferGPU;
      bufferData.bufferType = bufferType;
      bufferData.version = bufferAttribute2.version;
    }
    let type;
    if (array3 instanceof Float32Array) {
      type = gl.FLOAT;
    } else if (array3 instanceof Uint16Array) {
      if (attribute2.isFloat16BufferAttribute) {
        type = gl.HALF_FLOAT;
      } else {
        type = gl.UNSIGNED_SHORT;
      }
    } else if (array3 instanceof Int16Array) {
      type = gl.SHORT;
    } else if (array3 instanceof Uint32Array) {
      type = gl.UNSIGNED_INT;
    } else if (array3 instanceof Int32Array) {
      type = gl.INT;
    } else if (array3 instanceof Int8Array) {
      type = gl.BYTE;
    } else if (array3 instanceof Uint8Array) {
      type = gl.UNSIGNED_BYTE;
    } else if (array3 instanceof Uint8ClampedArray) {
      type = gl.UNSIGNED_BYTE;
    } else {
      throw new Error("THREE.WebGLBackend: Unsupported buffer data format: " + array3);
    }
    let attributeData = {
      bufferGPU,
      bufferType,
      type,
      byteLength: array3.byteLength,
      bytesPerElement: array3.BYTES_PER_ELEMENT,
      version: attribute2.version,
      pbo: attribute2.pbo,
      isInteger: type === gl.INT || type === gl.UNSIGNED_INT || attribute2.gpuType === IntType2,
      id: _id$12++
    };
    if (attribute2.isStorageBufferAttribute || attribute2.isStorageInstancedBufferAttribute) {
      const bufferGPUDual = this._createBuffer(gl, bufferType, array3, usage);
      attributeData = new DualAttributeData(attributeData, bufferGPUDual);
    }
    backend.set(attribute2, attributeData);
  }
  updateAttribute(attribute2) {
    const backend = this.backend;
    const { gl } = backend;
    const array3 = attribute2.array;
    const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
    const bufferData = backend.get(bufferAttribute2);
    const bufferType = bufferData.bufferType;
    const updateRanges = attribute2.isInterleavedBufferAttribute ? attribute2.data.updateRanges : attribute2.updateRanges;
    gl.bindBuffer(bufferType, bufferData.bufferGPU);
    if (updateRanges.length === 0) {
      gl.bufferSubData(bufferType, 0, array3);
    } else {
      for (let i2 = 0, l2 = updateRanges.length; i2 < l2; i2++) {
        const range4 = updateRanges[i2];
        gl.bufferSubData(
          bufferType,
          range4.start * array3.BYTES_PER_ELEMENT,
          array3,
          range4.start,
          range4.count
        );
      }
      bufferAttribute2.clearUpdateRanges();
    }
    gl.bindBuffer(bufferType, null);
    bufferData.version = bufferAttribute2.version;
  }
  destroyAttribute(attribute2) {
    const backend = this.backend;
    const { gl } = backend;
    if (attribute2.isInterleavedBufferAttribute) {
      backend.delete(attribute2.data);
    }
    const attributeData = backend.get(attribute2);
    gl.deleteBuffer(attributeData.bufferGPU);
    backend.delete(attribute2);
  }
  async getArrayBufferAsync(attribute2) {
    const backend = this.backend;
    const { gl } = backend;
    const bufferAttribute2 = attribute2.isInterleavedBufferAttribute ? attribute2.data : attribute2;
    const { bufferGPU } = backend.get(bufferAttribute2);
    const array3 = attribute2.array;
    const byteLength = array3.byteLength;
    gl.bindBuffer(gl.COPY_READ_BUFFER, bufferGPU);
    const writeBuffer = gl.createBuffer();
    gl.bindBuffer(gl.COPY_WRITE_BUFFER, writeBuffer);
    gl.bufferData(gl.COPY_WRITE_BUFFER, byteLength, gl.STREAM_READ);
    gl.copyBufferSubData(gl.COPY_READ_BUFFER, gl.COPY_WRITE_BUFFER, 0, 0, byteLength);
    await backend.utils._clientWaitAsync();
    const dstBuffer = new attribute2.array.constructor(array3.length);
    gl.getBufferSubData(gl.COPY_WRITE_BUFFER, 0, dstBuffer);
    gl.deleteBuffer(writeBuffer);
    return dstBuffer.buffer;
  }
  _createBuffer(gl, bufferType, array3, usage) {
    const bufferGPU = gl.createBuffer();
    gl.bindBuffer(bufferType, bufferGPU);
    gl.bufferData(bufferType, array3, usage);
    gl.bindBuffer(bufferType, null);
    return bufferGPU;
  }
};
var initialized$1 = false;
var equationToGL;
var factorToGL;
var WebGLState2 = class {
  constructor(backend) {
    this.backend = backend;
    this.gl = this.backend.gl;
    this.enabled = {};
    this.currentFlipSided = null;
    this.currentCullFace = null;
    this.currentProgram = null;
    this.currentBlendingEnabled = false;
    this.currentBlending = null;
    this.currentBlendSrc = null;
    this.currentBlendDst = null;
    this.currentBlendSrcAlpha = null;
    this.currentBlendDstAlpha = null;
    this.currentPremultipledAlpha = null;
    this.currentPolygonOffsetFactor = null;
    this.currentPolygonOffsetUnits = null;
    this.currentColorMask = null;
    this.currentDepthFunc = null;
    this.currentDepthMask = null;
    this.currentStencilFunc = null;
    this.currentStencilRef = null;
    this.currentStencilFuncMask = null;
    this.currentStencilFail = null;
    this.currentStencilZFail = null;
    this.currentStencilZPass = null;
    this.currentStencilMask = null;
    this.currentLineWidth = null;
    this.currentBoundFramebuffers = {};
    this.currentDrawbuffers = /* @__PURE__ */ new WeakMap();
    this.maxTextures = this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);
    this.currentTextureSlot = null;
    this.currentBoundTextures = {};
    this.currentBoundBufferBases = {};
    if (initialized$1 === false) {
      this._init(this.gl);
      initialized$1 = true;
    }
  }
  _init(gl) {
    equationToGL = {
      [AddEquation2]: gl.FUNC_ADD,
      [SubtractEquation2]: gl.FUNC_SUBTRACT,
      [ReverseSubtractEquation2]: gl.FUNC_REVERSE_SUBTRACT
    };
    factorToGL = {
      [ZeroFactor2]: gl.ZERO,
      [OneFactor2]: gl.ONE,
      [SrcColorFactor2]: gl.SRC_COLOR,
      [SrcAlphaFactor2]: gl.SRC_ALPHA,
      [SrcAlphaSaturateFactor2]: gl.SRC_ALPHA_SATURATE,
      [DstColorFactor2]: gl.DST_COLOR,
      [DstAlphaFactor2]: gl.DST_ALPHA,
      [OneMinusSrcColorFactor2]: gl.ONE_MINUS_SRC_COLOR,
      [OneMinusSrcAlphaFactor2]: gl.ONE_MINUS_SRC_ALPHA,
      [OneMinusDstColorFactor2]: gl.ONE_MINUS_DST_COLOR,
      [OneMinusDstAlphaFactor2]: gl.ONE_MINUS_DST_ALPHA
    };
  }
  enable(id2) {
    const { enabled } = this;
    if (enabled[id2] !== true) {
      this.gl.enable(id2);
      enabled[id2] = true;
    }
  }
  disable(id2) {
    const { enabled } = this;
    if (enabled[id2] !== false) {
      this.gl.disable(id2);
      enabled[id2] = false;
    }
  }
  setFlipSided(flipSided) {
    if (this.currentFlipSided !== flipSided) {
      const { gl } = this;
      if (flipSided) {
        gl.frontFace(gl.CW);
      } else {
        gl.frontFace(gl.CCW);
      }
      this.currentFlipSided = flipSided;
    }
  }
  setCullFace(cullFace) {
    const { gl } = this;
    if (cullFace !== CullFaceNone2) {
      this.enable(gl.CULL_FACE);
      if (cullFace !== this.currentCullFace) {
        if (cullFace === CullFaceBack2) {
          gl.cullFace(gl.BACK);
        } else if (cullFace === CullFaceFront2) {
          gl.cullFace(gl.FRONT);
        } else {
          gl.cullFace(gl.FRONT_AND_BACK);
        }
      }
    } else {
      this.disable(gl.CULL_FACE);
    }
    this.currentCullFace = cullFace;
  }
  setLineWidth(width) {
    const { currentLineWidth, gl } = this;
    if (width !== currentLineWidth) {
      gl.lineWidth(width);
      this.currentLineWidth = width;
    }
  }
  setBlending(blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha) {
    const { gl } = this;
    if (blending === NoBlending2) {
      if (this.currentBlendingEnabled === true) {
        this.disable(gl.BLEND);
        this.currentBlendingEnabled = false;
      }
      return;
    }
    if (this.currentBlendingEnabled === false) {
      this.enable(gl.BLEND);
      this.currentBlendingEnabled = true;
    }
    if (blending !== CustomBlending2) {
      if (blending !== this.currentBlending || premultipliedAlpha !== this.currentPremultipledAlpha) {
        if (this.currentBlendEquation !== AddEquation2 || this.currentBlendEquationAlpha !== AddEquation2) {
          gl.blendEquation(gl.FUNC_ADD);
          this.currentBlendEquation = AddEquation2;
          this.currentBlendEquationAlpha = AddEquation2;
        }
        if (premultipliedAlpha) {
          switch (blending) {
            case NormalBlending2:
              gl.blendFuncSeparate(gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending2:
              gl.blendFunc(gl.ONE, gl.ONE);
              break;
            case SubtractiveBlending2:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending2:
              gl.blendFuncSeparate(gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        } else {
          switch (blending) {
            case NormalBlending2:
              gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
              break;
            case AdditiveBlending2:
              gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
              break;
            case SubtractiveBlending2:
              gl.blendFuncSeparate(gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE);
              break;
            case MultiplyBlending2:
              gl.blendFunc(gl.ZERO, gl.SRC_COLOR);
              break;
            default:
              console.error("THREE.WebGLState: Invalid blending: ", blending);
              break;
          }
        }
        this.currentBlendSrc = null;
        this.currentBlendDst = null;
        this.currentBlendSrcAlpha = null;
        this.currentBlendDstAlpha = null;
        this.currentBlending = blending;
        this.currentPremultipledAlpha = premultipliedAlpha;
      }
      return;
    }
    blendEquationAlpha = blendEquationAlpha || blendEquation;
    blendSrcAlpha = blendSrcAlpha || blendSrc;
    blendDstAlpha = blendDstAlpha || blendDst;
    if (blendEquation !== this.currentBlendEquation || blendEquationAlpha !== this.currentBlendEquationAlpha) {
      gl.blendEquationSeparate(equationToGL[blendEquation], equationToGL[blendEquationAlpha]);
      this.currentBlendEquation = blendEquation;
      this.currentBlendEquationAlpha = blendEquationAlpha;
    }
    if (blendSrc !== this.currentBlendSrc || blendDst !== this.currentBlendDst || blendSrcAlpha !== this.currentBlendSrcAlpha || blendDstAlpha !== this.currentBlendDstAlpha) {
      gl.blendFuncSeparate(factorToGL[blendSrc], factorToGL[blendDst], factorToGL[blendSrcAlpha], factorToGL[blendDstAlpha]);
      this.currentBlendSrc = blendSrc;
      this.currentBlendDst = blendDst;
      this.currentBlendSrcAlpha = blendSrcAlpha;
      this.currentBlendDstAlpha = blendDstAlpha;
    }
    this.currentBlending = blending;
    this.currentPremultipledAlpha = false;
  }
  setColorMask(colorMask) {
    if (this.currentColorMask !== colorMask) {
      this.gl.colorMask(colorMask, colorMask, colorMask, colorMask);
      this.currentColorMask = colorMask;
    }
  }
  setDepthTest(depthTest) {
    const { gl } = this;
    if (depthTest) {
      this.enable(gl.DEPTH_TEST);
    } else {
      this.disable(gl.DEPTH_TEST);
    }
  }
  setDepthMask(depthMask) {
    if (this.currentDepthMask !== depthMask) {
      this.gl.depthMask(depthMask);
      this.currentDepthMask = depthMask;
    }
  }
  setDepthFunc(depthFunc) {
    if (this.currentDepthFunc !== depthFunc) {
      const { gl } = this;
      switch (depthFunc) {
        case NeverDepth2:
          gl.depthFunc(gl.NEVER);
          break;
        case AlwaysDepth2:
          gl.depthFunc(gl.ALWAYS);
          break;
        case LessDepth2:
          gl.depthFunc(gl.LESS);
          break;
        case LessEqualDepth2:
          gl.depthFunc(gl.LEQUAL);
          break;
        case EqualDepth2:
          gl.depthFunc(gl.EQUAL);
          break;
        case GreaterEqualDepth2:
          gl.depthFunc(gl.GEQUAL);
          break;
        case GreaterDepth2:
          gl.depthFunc(gl.GREATER);
          break;
        case NotEqualDepth2:
          gl.depthFunc(gl.NOTEQUAL);
          break;
        default:
          gl.depthFunc(gl.LEQUAL);
      }
      this.currentDepthFunc = depthFunc;
    }
  }
  setStencilTest(stencilTest) {
    const { gl } = this;
    if (stencilTest) {
      this.enable(gl.STENCIL_TEST);
    } else {
      this.disable(gl.STENCIL_TEST);
    }
  }
  setStencilMask(stencilMask) {
    if (this.currentStencilMask !== stencilMask) {
      this.gl.stencilMask(stencilMask);
      this.currentStencilMask = stencilMask;
    }
  }
  setStencilFunc(stencilFunc, stencilRef, stencilMask) {
    if (this.currentStencilFunc !== stencilFunc || this.currentStencilRef !== stencilRef || this.currentStencilFuncMask !== stencilMask) {
      this.gl.stencilFunc(stencilFunc, stencilRef, stencilMask);
      this.currentStencilFunc = stencilFunc;
      this.currentStencilRef = stencilRef;
      this.currentStencilFuncMask = stencilMask;
    }
  }
  setStencilOp(stencilFail, stencilZFail, stencilZPass) {
    if (this.currentStencilFail !== stencilFail || this.currentStencilZFail !== stencilZFail || this.currentStencilZPass !== stencilZPass) {
      this.gl.stencilOp(stencilFail, stencilZFail, stencilZPass);
      this.currentStencilFail = stencilFail;
      this.currentStencilZFail = stencilZFail;
      this.currentStencilZPass = stencilZPass;
    }
  }
  setMaterial(material, frontFaceCW) {
    const { gl } = this;
    material.side === DoubleSide2 ? this.disable(gl.CULL_FACE) : this.enable(gl.CULL_FACE);
    let flipSided = material.side === BackSide2;
    if (frontFaceCW) flipSided = !flipSided;
    this.setFlipSided(flipSided);
    material.blending === NormalBlending2 && material.transparent === false ? this.setBlending(NoBlending2) : this.setBlending(material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha);
    this.setDepthFunc(material.depthFunc);
    this.setDepthTest(material.depthTest);
    this.setDepthMask(material.depthWrite);
    this.setColorMask(material.colorWrite);
    const stencilWrite = material.stencilWrite;
    this.setStencilTest(stencilWrite);
    if (stencilWrite) {
      this.setStencilMask(material.stencilWriteMask);
      this.setStencilFunc(material.stencilFunc, material.stencilRef, material.stencilFuncMask);
      this.setStencilOp(material.stencilFail, material.stencilZFail, material.stencilZPass);
    }
    this.setPolygonOffset(material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits);
    material.alphaToCoverage === true ? this.enable(gl.SAMPLE_ALPHA_TO_COVERAGE) : this.disable(gl.SAMPLE_ALPHA_TO_COVERAGE);
  }
  setPolygonOffset(polygonOffset, factor, units) {
    const { gl } = this;
    if (polygonOffset) {
      this.enable(gl.POLYGON_OFFSET_FILL);
      if (this.currentPolygonOffsetFactor !== factor || this.currentPolygonOffsetUnits !== units) {
        gl.polygonOffset(factor, units);
        this.currentPolygonOffsetFactor = factor;
        this.currentPolygonOffsetUnits = units;
      }
    } else {
      this.disable(gl.POLYGON_OFFSET_FILL);
    }
  }
  useProgram(program) {
    if (this.currentProgram !== program) {
      this.gl.useProgram(program);
      this.currentProgram = program;
      return true;
    }
    return false;
  }
  // framebuffer
  bindFramebuffer(target, framebuffer) {
    const { gl, currentBoundFramebuffers } = this;
    if (currentBoundFramebuffers[target] !== framebuffer) {
      gl.bindFramebuffer(target, framebuffer);
      currentBoundFramebuffers[target] = framebuffer;
      if (target === gl.DRAW_FRAMEBUFFER) {
        currentBoundFramebuffers[gl.FRAMEBUFFER] = framebuffer;
      }
      if (target === gl.FRAMEBUFFER) {
        currentBoundFramebuffers[gl.DRAW_FRAMEBUFFER] = framebuffer;
      }
      return true;
    }
    return false;
  }
  drawBuffers(renderContext, framebuffer) {
    const { gl } = this;
    let drawBuffers = [];
    let needsUpdate = false;
    if (renderContext.textures !== null) {
      drawBuffers = this.currentDrawbuffers.get(framebuffer);
      if (drawBuffers === void 0) {
        drawBuffers = [];
        this.currentDrawbuffers.set(framebuffer, drawBuffers);
      }
      const textures = renderContext.textures;
      if (drawBuffers.length !== textures.length || drawBuffers[0] !== gl.COLOR_ATTACHMENT0) {
        for (let i2 = 0, il = textures.length; i2 < il; i2++) {
          drawBuffers[i2] = gl.COLOR_ATTACHMENT0 + i2;
        }
        drawBuffers.length = textures.length;
        needsUpdate = true;
      }
    } else {
      if (drawBuffers[0] !== gl.BACK) {
        drawBuffers[0] = gl.BACK;
        needsUpdate = true;
      }
    }
    if (needsUpdate) {
      gl.drawBuffers(drawBuffers);
    }
  }
  // texture
  activeTexture(webglSlot) {
    const { gl, currentTextureSlot, maxTextures } = this;
    if (webglSlot === void 0) webglSlot = gl.TEXTURE0 + maxTextures - 1;
    if (currentTextureSlot !== webglSlot) {
      gl.activeTexture(webglSlot);
      this.currentTextureSlot = webglSlot;
    }
  }
  bindTexture(webglType, webglTexture, webglSlot) {
    const { gl, currentTextureSlot, currentBoundTextures, maxTextures } = this;
    if (webglSlot === void 0) {
      if (currentTextureSlot === null) {
        webglSlot = gl.TEXTURE0 + maxTextures - 1;
      } else {
        webglSlot = currentTextureSlot;
      }
    }
    let boundTexture = currentBoundTextures[webglSlot];
    if (boundTexture === void 0) {
      boundTexture = { type: void 0, texture: void 0 };
      currentBoundTextures[webglSlot] = boundTexture;
    }
    if (boundTexture.type !== webglType || boundTexture.texture !== webglTexture) {
      if (currentTextureSlot !== webglSlot) {
        gl.activeTexture(webglSlot);
        this.currentTextureSlot = webglSlot;
      }
      gl.bindTexture(webglType, webglTexture);
      boundTexture.type = webglType;
      boundTexture.texture = webglTexture;
    }
  }
  bindBufferBase(target, index7, buffer2) {
    const { gl } = this;
    const key = `${target}-${index7}`;
    if (this.currentBoundBufferBases[key] !== buffer2) {
      gl.bindBufferBase(target, index7, buffer2);
      this.currentBoundBufferBases[key] = buffer2;
      return true;
    }
    return false;
  }
  unbindTexture() {
    const { gl, currentTextureSlot, currentBoundTextures } = this;
    const boundTexture = currentBoundTextures[currentTextureSlot];
    if (boundTexture !== void 0 && boundTexture.type !== void 0) {
      gl.bindTexture(boundTexture.type, null);
      boundTexture.type = void 0;
      boundTexture.texture = void 0;
    }
  }
};
var WebGLUtils2 = class {
  constructor(backend) {
    this.backend = backend;
    this.gl = this.backend.gl;
    this.extensions = backend.extensions;
  }
  convert(p2, colorSpace = NoColorSpace2) {
    const { gl, extensions } = this;
    let extension;
    if (p2 === UnsignedByteType2) return gl.UNSIGNED_BYTE;
    if (p2 === UnsignedShort4444Type2) return gl.UNSIGNED_SHORT_4_4_4_4;
    if (p2 === UnsignedShort5551Type2) return gl.UNSIGNED_SHORT_5_5_5_1;
    if (p2 === UnsignedInt5999Type2) return gl.UNSIGNED_INT_5_9_9_9_REV;
    if (p2 === ByteType2) return gl.BYTE;
    if (p2 === ShortType2) return gl.SHORT;
    if (p2 === UnsignedShortType2) return gl.UNSIGNED_SHORT;
    if (p2 === IntType2) return gl.INT;
    if (p2 === UnsignedIntType2) return gl.UNSIGNED_INT;
    if (p2 === FloatType2) return gl.FLOAT;
    if (p2 === HalfFloatType2) {
      return gl.HALF_FLOAT;
    }
    if (p2 === AlphaFormat2) return gl.ALPHA;
    if (p2 === RGBFormat2) return gl.RGB;
    if (p2 === RGBAFormat2) return gl.RGBA;
    if (p2 === LuminanceFormat2) return gl.LUMINANCE;
    if (p2 === LuminanceAlphaFormat2) return gl.LUMINANCE_ALPHA;
    if (p2 === DepthFormat2) return gl.DEPTH_COMPONENT;
    if (p2 === DepthStencilFormat2) return gl.DEPTH_STENCIL;
    if (p2 === RedFormat2) return gl.RED;
    if (p2 === RedIntegerFormat2) return gl.RED_INTEGER;
    if (p2 === RGFormat2) return gl.RG;
    if (p2 === RGIntegerFormat2) return gl.RG_INTEGER;
    if (p2 === RGBAIntegerFormat2) return gl.RGBA_INTEGER;
    if (p2 === RGB_S3TC_DXT1_Format2 || p2 === RGBA_S3TC_DXT1_Format2 || p2 === RGBA_S3TC_DXT3_Format2 || p2 === RGBA_S3TC_DXT5_Format2) {
      if (colorSpace === SRGBColorSpace2) {
        extension = extensions.get("WEBGL_compressed_texture_s3tc_srgb");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format2) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format2) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format2) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format2) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      } else {
        extension = extensions.get("WEBGL_compressed_texture_s3tc");
        if (extension !== null) {
          if (p2 === RGB_S3TC_DXT1_Format2) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT1_Format2) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
          if (p2 === RGBA_S3TC_DXT3_Format2) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
          if (p2 === RGBA_S3TC_DXT5_Format2) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;
        } else {
          return null;
        }
      }
    }
    if (p2 === RGB_PVRTC_4BPPV1_Format2 || p2 === RGB_PVRTC_2BPPV1_Format2 || p2 === RGBA_PVRTC_4BPPV1_Format2 || p2 === RGBA_PVRTC_2BPPV1_Format2) {
      extension = extensions.get("WEBGL_compressed_texture_pvrtc");
      if (extension !== null) {
        if (p2 === RGB_PVRTC_4BPPV1_Format2) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
        if (p2 === RGB_PVRTC_2BPPV1_Format2) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
        if (p2 === RGBA_PVRTC_4BPPV1_Format2) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
        if (p2 === RGBA_PVRTC_2BPPV1_Format2) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;
      } else {
        return null;
      }
    }
    if (p2 === RGB_ETC1_Format2 || p2 === RGB_ETC2_Format2 || p2 === RGBA_ETC2_EAC_Format2) {
      extension = extensions.get("WEBGL_compressed_texture_etc");
      if (extension !== null) {
        if (p2 === RGB_ETC1_Format2 || p2 === RGB_ETC2_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
        if (p2 === RGBA_ETC2_EAC_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_ASTC_4x4_Format2 || p2 === RGBA_ASTC_5x4_Format2 || p2 === RGBA_ASTC_5x5_Format2 || p2 === RGBA_ASTC_6x5_Format2 || p2 === RGBA_ASTC_6x6_Format2 || p2 === RGBA_ASTC_8x5_Format2 || p2 === RGBA_ASTC_8x6_Format2 || p2 === RGBA_ASTC_8x8_Format2 || p2 === RGBA_ASTC_10x5_Format2 || p2 === RGBA_ASTC_10x6_Format2 || p2 === RGBA_ASTC_10x8_Format2 || p2 === RGBA_ASTC_10x10_Format2 || p2 === RGBA_ASTC_12x10_Format2 || p2 === RGBA_ASTC_12x12_Format2) {
      extension = extensions.get("WEBGL_compressed_texture_astc");
      if (extension !== null) {
        if (p2 === RGBA_ASTC_4x4_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
        if (p2 === RGBA_ASTC_5x4_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
        if (p2 === RGBA_ASTC_5x5_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
        if (p2 === RGBA_ASTC_6x5_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
        if (p2 === RGBA_ASTC_6x6_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
        if (p2 === RGBA_ASTC_8x5_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
        if (p2 === RGBA_ASTC_8x6_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
        if (p2 === RGBA_ASTC_8x8_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
        if (p2 === RGBA_ASTC_10x5_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
        if (p2 === RGBA_ASTC_10x6_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
        if (p2 === RGBA_ASTC_10x8_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
        if (p2 === RGBA_ASTC_10x10_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
        if (p2 === RGBA_ASTC_12x10_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
        if (p2 === RGBA_ASTC_12x12_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;
      } else {
        return null;
      }
    }
    if (p2 === RGBA_BPTC_Format2) {
      extension = extensions.get("EXT_texture_compression_bptc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format2) return colorSpace === SRGBColorSpace2 ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
      } else {
        return null;
      }
    }
    if (p2 === RED_RGTC1_Format2 || p2 === SIGNED_RED_RGTC1_Format2 || p2 === RED_GREEN_RGTC2_Format2 || p2 === SIGNED_RED_GREEN_RGTC2_Format2) {
      extension = extensions.get("EXT_texture_compression_rgtc");
      if (extension !== null) {
        if (p2 === RGBA_BPTC_Format2) return extension.COMPRESSED_RED_RGTC1_EXT;
        if (p2 === SIGNED_RED_RGTC1_Format2) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
        if (p2 === RED_GREEN_RGTC2_Format2) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
        if (p2 === SIGNED_RED_GREEN_RGTC2_Format2) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;
      } else {
        return null;
      }
    }
    if (p2 === UnsignedInt248Type2) {
      return gl.UNSIGNED_INT_24_8;
    }
    return gl[p2] !== void 0 ? gl[p2] : null;
  }
  _clientWaitAsync() {
    const { gl } = this;
    const sync = gl.fenceSync(gl.SYNC_GPU_COMMANDS_COMPLETE, 0);
    gl.flush();
    return new Promise((resolve, reject) => {
      function test() {
        const res = gl.clientWaitSync(sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0);
        if (res === gl.WAIT_FAILED) {
          gl.deleteSync(sync);
          reject();
          return;
        }
        if (res === gl.TIMEOUT_EXPIRED) {
          requestAnimationFrame(test);
          return;
        }
        gl.deleteSync(sync);
        resolve();
      }
      test();
    });
  }
};
var initialized = false;
var wrappingToGL;
var filterToGL;
var compareToGL;
var WebGLTextureUtils = class {
  constructor(backend) {
    this.backend = backend;
    this.gl = backend.gl;
    this.extensions = backend.extensions;
    this.defaultTextures = {};
    if (initialized === false) {
      this._init(this.gl);
      initialized = true;
    }
  }
  _init(gl) {
    wrappingToGL = {
      [RepeatWrapping2]: gl.REPEAT,
      [ClampToEdgeWrapping2]: gl.CLAMP_TO_EDGE,
      [MirroredRepeatWrapping2]: gl.MIRRORED_REPEAT
    };
    filterToGL = {
      [NearestFilter2]: gl.NEAREST,
      [NearestMipmapNearestFilter2]: gl.NEAREST_MIPMAP_NEAREST,
      [NearestMipmapLinearFilter2]: gl.NEAREST_MIPMAP_LINEAR,
      [LinearFilter2]: gl.LINEAR,
      [LinearMipmapNearestFilter2]: gl.LINEAR_MIPMAP_NEAREST,
      [LinearMipmapLinearFilter2]: gl.LINEAR_MIPMAP_LINEAR
    };
    compareToGL = {
      [NeverCompare2]: gl.NEVER,
      [AlwaysCompare2]: gl.ALWAYS,
      [LessCompare2]: gl.LESS,
      [LessEqualCompare2]: gl.LEQUAL,
      [EqualCompare2]: gl.EQUAL,
      [GreaterEqualCompare2]: gl.GEQUAL,
      [GreaterCompare2]: gl.GREATER,
      [NotEqualCompare2]: gl.NOTEQUAL
    };
  }
  filterFallback(f2) {
    const { gl } = this;
    if (f2 === NearestFilter2 || f2 === NearestMipmapNearestFilter2 || f2 === NearestMipmapLinearFilter2) {
      return gl.NEAREST;
    }
    return gl.LINEAR;
  }
  getGLTextureType(texture2) {
    const { gl } = this;
    let glTextureType;
    if (texture2.isCubeTexture === true) {
      glTextureType = gl.TEXTURE_CUBE_MAP;
    } else if (texture2.isDataArrayTexture === true || texture2.isCompressedArrayTexture === true) {
      glTextureType = gl.TEXTURE_2D_ARRAY;
    } else if (texture2.isData3DTexture === true) {
      glTextureType = gl.TEXTURE_3D;
    } else {
      glTextureType = gl.TEXTURE_2D;
    }
    return glTextureType;
  }
  getInternalFormat(internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false) {
    const { gl, extensions } = this;
    if (internalFormatName !== null) {
      if (gl[internalFormatName] !== void 0) return gl[internalFormatName];
      console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '" + internalFormatName + "'");
    }
    let internalFormat = glFormat;
    if (glFormat === gl.RED) {
      if (glType === gl.FLOAT) internalFormat = gl.R32F;
      if (glType === gl.HALF_FLOAT) internalFormat = gl.R16F;
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;
      if (glType === gl.BYTE) internalFormat = gl.R8I;
      if (glType === gl.SHORT) internalFormat = gl.R16I;
      if (glType === gl.INT) internalFormat = gl.R32I;
    }
    if (glFormat === gl.RED_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.R8UI;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.R16UI;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.R32UI;
      if (glType === gl.BYTE) internalFormat = gl.R8I;
      if (glType === gl.SHORT) internalFormat = gl.R16I;
      if (glType === gl.INT) internalFormat = gl.R32I;
    }
    if (glFormat === gl.RG) {
      if (glType === gl.FLOAT) internalFormat = gl.RG32F;
      if (glType === gl.HALF_FLOAT) internalFormat = gl.RG16F;
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RG16;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.RG32UI;
      if (glType === gl.BYTE) internalFormat = gl.RG8I;
      if (glType === gl.SHORT) internalFormat = gl.RG16I;
      if (glType === gl.INT) internalFormat = gl.RG32I;
    }
    if (glFormat === gl.RG_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RG8UI;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RG16UI;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.RG32UI;
      if (glType === gl.BYTE) internalFormat = gl.RG8I;
      if (glType === gl.SHORT) internalFormat = gl.RG16I;
      if (glType === gl.INT) internalFormat = gl.RG32I;
    }
    if (glFormat === gl.RGB) {
      if (glType === gl.FLOAT) internalFormat = gl.RGB32F;
      if (glType === gl.HALF_FLOAT) internalFormat = gl.RGB16F;
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGB8;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGB16;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGB32UI;
      if (glType === gl.BYTE) internalFormat = gl.RGB8I;
      if (glType === gl.SHORT) internalFormat = gl.RGB16I;
      if (glType === gl.INT) internalFormat = gl.RGB32I;
      if (glType === gl.UNSIGNED_BYTE) internalFormat = colorSpace === SRGBColorSpace2 && forceLinearTransfer === false ? gl.SRGB8 : gl.RGB8;
      if (glType === gl.UNSIGNED_SHORT_5_6_5) internalFormat = gl.RGB565;
      if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;
      if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGB4;
      if (glType === gl.UNSIGNED_INT_5_9_9_9_REV) internalFormat = gl.RGB9_E5;
    }
    if (glFormat === gl.RGB_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGB8UI;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGB16UI;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGB32UI;
      if (glType === gl.BYTE) internalFormat = gl.RGB8I;
      if (glType === gl.SHORT) internalFormat = gl.RGB16I;
      if (glType === gl.INT) internalFormat = gl.RGB32I;
    }
    if (glFormat === gl.RGBA) {
      if (glType === gl.FLOAT) internalFormat = gl.RGBA32F;
      if (glType === gl.HALF_FLOAT) internalFormat = gl.RGBA16F;
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGBA8;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGBA16;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGBA32UI;
      if (glType === gl.BYTE) internalFormat = gl.RGBA8I;
      if (glType === gl.SHORT) internalFormat = gl.RGBA16I;
      if (glType === gl.INT) internalFormat = gl.RGBA32I;
      if (glType === gl.UNSIGNED_BYTE) internalFormat = colorSpace === SRGBColorSpace2 && forceLinearTransfer === false ? gl.SRGB8_ALPHA8 : gl.RGBA8;
      if (glType === gl.UNSIGNED_SHORT_4_4_4_4) internalFormat = gl.RGBA4;
      if (glType === gl.UNSIGNED_SHORT_5_5_5_1) internalFormat = gl.RGB5_A1;
    }
    if (glFormat === gl.RGBA_INTEGER) {
      if (glType === gl.UNSIGNED_BYTE) internalFormat = gl.RGBA8UI;
      if (glType === gl.UNSIGNED_SHORT) internalFormat = gl.RGBA16UI;
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.RGBA32UI;
      if (glType === gl.BYTE) internalFormat = gl.RGBA8I;
      if (glType === gl.SHORT) internalFormat = gl.RGBA16I;
      if (glType === gl.INT) internalFormat = gl.RGBA32I;
    }
    if (glFormat === gl.DEPTH_COMPONENT) {
      if (glType === gl.UNSIGNED_INT) internalFormat = gl.DEPTH24_STENCIL8;
      if (glType === gl.FLOAT) internalFormat = gl.DEPTH_COMPONENT32F;
    }
    if (glFormat === gl.DEPTH_STENCIL) {
      if (glType === gl.UNSIGNED_INT_24_8) internalFormat = gl.DEPTH24_STENCIL8;
    }
    if (internalFormat === gl.R16F || internalFormat === gl.R32F || internalFormat === gl.RG16F || internalFormat === gl.RG32F || internalFormat === gl.RGBA16F || internalFormat === gl.RGBA32F) {
      extensions.get("EXT_color_buffer_float");
    }
    return internalFormat;
  }
  setTextureParameters(textureType, texture2) {
    const { gl, extensions, backend } = this;
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, texture2.flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture2.premultiplyAlpha);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, texture2.unpackAlignment);
    gl.pixelStorei(gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, gl.NONE);
    gl.texParameteri(textureType, gl.TEXTURE_WRAP_S, wrappingToGL[texture2.wrapS]);
    gl.texParameteri(textureType, gl.TEXTURE_WRAP_T, wrappingToGL[texture2.wrapT]);
    if (textureType === gl.TEXTURE_3D || textureType === gl.TEXTURE_2D_ARRAY) {
      gl.texParameteri(textureType, gl.TEXTURE_WRAP_R, wrappingToGL[texture2.wrapR]);
    }
    gl.texParameteri(textureType, gl.TEXTURE_MAG_FILTER, filterToGL[texture2.magFilter]);
    const hasMipmaps = texture2.mipmaps !== void 0 && texture2.mipmaps.length > 0;
    const minFilter = texture2.minFilter === LinearFilter2 && hasMipmaps ? LinearMipmapLinearFilter2 : texture2.minFilter;
    gl.texParameteri(textureType, gl.TEXTURE_MIN_FILTER, filterToGL[minFilter]);
    if (texture2.compareFunction) {
      gl.texParameteri(textureType, gl.TEXTURE_COMPARE_MODE, gl.COMPARE_REF_TO_TEXTURE);
      gl.texParameteri(textureType, gl.TEXTURE_COMPARE_FUNC, compareToGL[texture2.compareFunction]);
    }
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      if (texture2.magFilter === NearestFilter2) return;
      if (texture2.minFilter !== NearestMipmapLinearFilter2 && texture2.minFilter !== LinearMipmapLinearFilter2) return;
      if (texture2.type === FloatType2 && extensions.has("OES_texture_float_linear") === false) return;
      if (texture2.anisotropy > 1) {
        const extension = extensions.get("EXT_texture_filter_anisotropic");
        gl.texParameterf(textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min(texture2.anisotropy, backend.getMaxAnisotropy()));
      }
    }
  }
  createDefaultTexture(texture2) {
    const { gl, backend, defaultTextures } = this;
    const glTextureType = this.getGLTextureType(texture2);
    let textureGPU = defaultTextures[glTextureType];
    if (textureGPU === void 0) {
      textureGPU = gl.createTexture();
      backend.state.bindTexture(glTextureType, textureGPU);
      gl.texParameteri(glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);
      gl.texParameteri(glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);
      defaultTextures[glTextureType] = textureGPU;
    }
    backend.set(texture2, {
      textureGPU,
      glTextureType,
      isDefault: true
    });
  }
  createTexture(texture2, options) {
    const { gl, backend } = this;
    const { levels, width, height, depth: depth2 } = options;
    const glFormat = backend.utils.convert(texture2.format, texture2.colorSpace);
    const glType = backend.utils.convert(texture2.type);
    const glInternalFormat = this.getInternalFormat(texture2.internalFormat, glFormat, glType, texture2.colorSpace, texture2.isVideoTexture);
    const textureGPU = gl.createTexture();
    const glTextureType = this.getGLTextureType(texture2);
    backend.state.bindTexture(glTextureType, textureGPU);
    this.setTextureParameters(glTextureType, texture2);
    if (texture2.isDataArrayTexture || texture2.isCompressedArrayTexture) {
      gl.texStorage3D(gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, width, height, depth2);
    } else if (texture2.isData3DTexture) {
      gl.texStorage3D(gl.TEXTURE_3D, levels, glInternalFormat, width, height, depth2);
    } else if (!texture2.isVideoTexture) {
      gl.texStorage2D(glTextureType, levels, glInternalFormat, width, height);
    }
    backend.set(texture2, {
      textureGPU,
      glTextureType,
      glFormat,
      glType,
      glInternalFormat
    });
  }
  copyBufferToTexture(buffer2, texture2) {
    const { gl, backend } = this;
    const { textureGPU, glTextureType, glFormat, glType } = backend.get(texture2);
    const { width, height } = texture2.source.data;
    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, buffer2);
    backend.state.bindTexture(glTextureType, textureGPU);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, false);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
    gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, 0);
    gl.bindBuffer(gl.PIXEL_UNPACK_BUFFER, null);
    backend.state.unbindTexture();
  }
  updateTexture(texture2, options) {
    const { gl } = this;
    const { width, height } = options;
    const { textureGPU, glTextureType, glFormat, glType, glInternalFormat } = this.backend.get(texture2);
    if (texture2.isRenderTargetTexture || textureGPU === void 0)
      return;
    const getImage = (source) => {
      if (source.isDataTexture) {
        return source.image.data;
      } else if (source instanceof ImageBitmap || source instanceof OffscreenCanvas || source instanceof HTMLImageElement || source instanceof HTMLCanvasElement) {
        return source;
      }
      return source.data;
    };
    this.backend.state.bindTexture(glTextureType, textureGPU);
    this.setTextureParameters(glTextureType, texture2);
    if (texture2.isCompressedTexture) {
      const mipmaps = texture2.mipmaps;
      const image = options.image;
      for (let i2 = 0; i2 < mipmaps.length; i2++) {
        const mipmap = mipmaps[i2];
        if (texture2.isCompressedArrayTexture) {
          if (texture2.format !== gl.RGBA) {
            if (glFormat !== null) {
              gl.compressedTexSubImage3D(gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0);
            } else {
              console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");
            }
          } else {
            gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, i2, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data);
          }
        } else {
          if (glFormat !== null) {
            gl.compressedTexSubImage2D(gl.TEXTURE_2D, i2, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data);
          } else {
            console.warn("Unsupported compressed texture format");
          }
        }
      }
    } else if (texture2.isCubeTexture) {
      const images = options.images;
      for (let i2 = 0; i2 < 6; i2++) {
        const image = getImage(images[i2]);
        gl.texSubImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i2, 0, 0, 0, width, height, glFormat, glType, image);
      }
    } else if (texture2.isDataArrayTexture) {
      const image = options.image;
      gl.texSubImage3D(gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
    } else if (texture2.isData3DTexture) {
      const image = options.image;
      gl.texSubImage3D(gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data);
    } else if (texture2.isVideoTexture) {
      texture2.update();
      gl.texImage2D(glTextureType, 0, glInternalFormat, glFormat, glType, options.image);
    } else {
      const image = getImage(options.image);
      gl.texSubImage2D(glTextureType, 0, 0, 0, width, height, glFormat, glType, image);
    }
  }
  generateMipmaps(texture2) {
    const { gl, backend } = this;
    const { textureGPU, glTextureType } = backend.get(texture2);
    backend.state.bindTexture(glTextureType, textureGPU);
    gl.generateMipmap(glTextureType);
  }
  deallocateRenderBuffers(renderTarget) {
    const { gl, backend } = this;
    if (renderTarget) {
      const renderContextData = backend.get(renderTarget);
      renderContextData.renderBufferStorageSetup = void 0;
      if (renderContextData.framebuffers) {
        for (const cacheKey in renderContextData.framebuffers) {
          gl.deleteFramebuffer(renderContextData.framebuffers[cacheKey]);
        }
        delete renderContextData.framebuffers;
      }
      if (renderContextData.depthRenderbuffer) {
        gl.deleteRenderbuffer(renderContextData.depthRenderbuffer);
        delete renderContextData.depthRenderbuffer;
      }
      if (renderContextData.stencilRenderbuffer) {
        gl.deleteRenderbuffer(renderContextData.stencilRenderbuffer);
        delete renderContextData.stencilRenderbuffer;
      }
      if (renderContextData.msaaFrameBuffer) {
        gl.deleteFramebuffer(renderContextData.msaaFrameBuffer);
        delete renderContextData.msaaFrameBuffer;
      }
      if (renderContextData.msaaRenderbuffers) {
        for (let i2 = 0; i2 < renderContextData.msaaRenderbuffers.length; i2++) {
          gl.deleteRenderbuffer(renderContextData.msaaRenderbuffers[i2]);
        }
        delete renderContextData.msaaRenderbuffers;
      }
    }
  }
  destroyTexture(texture2) {
    const { gl, backend } = this;
    const { textureGPU, renderTarget } = backend.get(texture2);
    this.deallocateRenderBuffers(renderTarget);
    gl.deleteTexture(textureGPU);
    backend.delete(texture2);
  }
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
    const { gl, backend } = this;
    const { state } = this.backend;
    const { textureGPU: dstTextureGPU, glTextureType, glType, glFormat } = backend.get(dstTexture);
    let width, height, minX, minY;
    let dstX, dstY;
    if (srcRegion !== null) {
      width = srcRegion.max.x - srcRegion.min.x;
      height = srcRegion.max.y - srcRegion.min.y;
      minX = srcRegion.min.x;
      minY = srcRegion.min.y;
    } else {
      width = srcTexture.image.width;
      height = srcTexture.image.height;
      minX = 0;
      minY = 0;
    }
    if (dstPosition !== null) {
      dstX = dstPosition.x;
      dstY = dstPosition.y;
    } else {
      dstX = 0;
      dstY = 0;
    }
    state.bindTexture(glTextureType, dstTextureGPU);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY);
    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha);
    gl.pixelStorei(gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment);
    const currentUnpackRowLen = gl.getParameter(gl.UNPACK_ROW_LENGTH);
    const currentUnpackImageHeight = gl.getParameter(gl.UNPACK_IMAGE_HEIGHT);
    const currentUnpackSkipPixels = gl.getParameter(gl.UNPACK_SKIP_PIXELS);
    const currentUnpackSkipRows = gl.getParameter(gl.UNPACK_SKIP_ROWS);
    const currentUnpackSkipImages = gl.getParameter(gl.UNPACK_SKIP_IMAGES);
    const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[level] : srcTexture.image;
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, image.width);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, image.height);
    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, minX);
    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, minY);
    if (srcTexture.isDataTexture) {
      gl.texSubImage2D(gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image.data);
    } else {
      if (srcTexture.isCompressedTexture) {
        gl.compressedTexSubImage2D(gl.TEXTURE_2D, level, dstX, dstY, image.width, image.height, glFormat, image.data);
      } else {
        gl.texSubImage2D(gl.TEXTURE_2D, level, dstX, dstY, width, height, glFormat, glType, image);
      }
    }
    gl.pixelStorei(gl.UNPACK_ROW_LENGTH, currentUnpackRowLen);
    gl.pixelStorei(gl.UNPACK_IMAGE_HEIGHT, currentUnpackImageHeight);
    gl.pixelStorei(gl.UNPACK_SKIP_PIXELS, currentUnpackSkipPixels);
    gl.pixelStorei(gl.UNPACK_SKIP_ROWS, currentUnpackSkipRows);
    gl.pixelStorei(gl.UNPACK_SKIP_IMAGES, currentUnpackSkipImages);
    if (level === 0 && dstTexture.generateMipmaps) gl.generateMipmap(gl.TEXTURE_2D);
    state.unbindTexture();
  }
  copyFramebufferToTexture(texture2, renderContext) {
    const { gl } = this;
    const { state } = this.backend;
    const { textureGPU } = this.backend.get(texture2);
    const width = texture2.image.width;
    const height = texture2.image.height;
    const requireDrawFrameBuffer = texture2.isDepthTexture === true || renderContext.renderTarget && renderContext.renderTarget.samples > 0;
    if (requireDrawFrameBuffer) {
      let mask;
      let attachment;
      if (texture2.isDepthTexture === true) {
        mask = gl.DEPTH_BUFFER_BIT;
        attachment = gl.DEPTH_ATTACHMENT;
        if (renderContext.stencil) {
          mask |= gl.STENCIL_BUFFER_BIT;
        }
      } else {
        mask = gl.COLOR_BUFFER_BIT;
        attachment = gl.COLOR_ATTACHMENT0;
      }
      const fb = gl.createFramebuffer();
      state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
      gl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureGPU, 0);
      gl.blitFramebuffer(0, 0, width, height, 0, 0, width, height, mask, gl.NEAREST);
      gl.deleteFramebuffer(fb);
    } else {
      state.bindTexture(gl.TEXTURE_2D, textureGPU);
      gl.copyTexSubImage2D(gl.TEXTURE_2D, 0, 0, 0, 0, 0, width, height);
      state.unbindTexture();
    }
    if (texture2.generateMipmaps) this.generateMipmaps(texture2);
    this.backend._setFramebuffer(renderContext);
  }
  // Setup storage for internal depth/stencil buffers and bind to correct framebuffer
  setupRenderBufferStorage(renderbuffer, renderContext) {
    const { gl } = this;
    const renderTarget = renderContext.renderTarget;
    const { samples, depthTexture, depthBuffer, stencilBuffer, width, height } = renderTarget;
    gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuffer);
    if (depthBuffer && !stencilBuffer) {
      let glInternalFormat = gl.DEPTH_COMPONENT24;
      if (samples > 0) {
        if (depthTexture && depthTexture.isDepthTexture) {
          if (depthTexture.type === gl.FLOAT) {
            glInternalFormat = gl.DEPTH_COMPONENT32F;
          }
        }
        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, glInternalFormat, width, height);
      } else {
        gl.renderbufferStorage(gl.RENDERBUFFER, glInternalFormat, width, height);
      }
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    } else if (depthBuffer && stencilBuffer) {
      if (samples > 0) {
        gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, gl.DEPTH24_STENCIL8, width, height);
      } else {
        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, width, height);
      }
      gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, renderbuffer);
    }
  }
  async copyTextureToBuffer(texture2, x2, y2, width, height) {
    const { backend, gl } = this;
    const { textureGPU, glFormat, glType } = this.backend.get(texture2);
    const fb = gl.createFramebuffer();
    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, fb);
    gl.framebufferTexture2D(gl.READ_FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, textureGPU, 0);
    const typedArrayType = this._getTypedArrayType(glType);
    const bytesPerTexel = this._getBytesPerTexel(glFormat);
    const elementCount = width * height;
    const byteLength = elementCount * bytesPerTexel;
    const buffer2 = gl.createBuffer();
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer2);
    gl.bufferData(gl.PIXEL_PACK_BUFFER, byteLength, gl.STREAM_READ);
    gl.readPixels(x2, y2, width, height, glFormat, glType, 0);
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
    await backend.utils._clientWaitAsync();
    const dstBuffer = new typedArrayType(byteLength / typedArrayType.BYTES_PER_ELEMENT);
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, buffer2);
    gl.getBufferSubData(gl.PIXEL_PACK_BUFFER, 0, dstBuffer);
    gl.bindBuffer(gl.PIXEL_PACK_BUFFER, null);
    gl.deleteFramebuffer(fb);
    return dstBuffer;
  }
  _getTypedArrayType(glType) {
    const { gl } = this;
    if (glType === gl.UNSIGNED_BYTE) return Uint8Array;
    if (glType === gl.UNSIGNED_SHORT_4_4_4_4) return Uint16Array;
    if (glType === gl.UNSIGNED_SHORT_5_5_5_1) return Uint16Array;
    if (glType === gl.UNSIGNED_SHORT_5_6_5) return Uint16Array;
    if (glType === gl.UNSIGNED_SHORT) return Uint16Array;
    if (glType === gl.UNSIGNED_INT) return Uint32Array;
    if (glType === gl.FLOAT) return Float32Array;
    throw new Error(`Unsupported WebGL type: ${glType}`);
  }
  _getBytesPerTexel(glFormat) {
    const { gl } = this;
    if (glFormat === gl.RGBA) return 4;
    if (glFormat === gl.RGB) return 3;
    if (glFormat === gl.ALPHA) return 1;
  }
};
var WebGLExtensions2 = class {
  constructor(backend) {
    this.backend = backend;
    this.gl = this.backend.gl;
    this.availableExtensions = this.gl.getSupportedExtensions();
    this.extensions = {};
  }
  get(name) {
    let extension = this.extensions[name];
    if (extension === void 0) {
      extension = this.gl.getExtension(name);
      this.extensions[name] = extension;
    }
    return extension;
  }
  has(name) {
    return this.availableExtensions.includes(name);
  }
};
var WebGLCapabilities2 = class {
  constructor(backend) {
    this.backend = backend;
    this.maxAnisotropy = null;
  }
  getMaxAnisotropy() {
    if (this.maxAnisotropy !== null) return this.maxAnisotropy;
    const gl = this.backend.gl;
    const extensions = this.backend.extensions;
    if (extensions.has("EXT_texture_filter_anisotropic") === true) {
      const extension = extensions.get("EXT_texture_filter_anisotropic");
      this.maxAnisotropy = gl.getParameter(extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
    } else {
      this.maxAnisotropy = 0;
    }
    return this.maxAnisotropy;
  }
};
var GLFeatureName = {
  "WEBGL_multi_draw": "WEBGL_multi_draw",
  "WEBGL_compressed_texture_astc": "texture-compression-astc",
  "WEBGL_compressed_texture_etc": "texture-compression-etc2",
  "WEBGL_compressed_texture_etc1": "texture-compression-etc1",
  "WEBGL_compressed_texture_pvrtc": "texture-compression-pvrtc",
  "WEBKIT_WEBGL_compressed_texture_pvrtc": "texture-compression-pvrtc",
  "WEBGL_compressed_texture_s3tc": "texture-compression-bc",
  "EXT_texture_compression_bptc": "texture-compression-bptc",
  "EXT_disjoint_timer_query_webgl2": "timestamp-query"
};
var WebGLBufferRenderer2 = class {
  constructor(backend) {
    this.gl = backend.gl;
    this.extensions = backend.extensions;
    this.info = backend.renderer.info;
    this.mode = null;
    this.index = 0;
    this.type = null;
    this.object = null;
  }
  render(start, count2) {
    const { gl, mode: mode2, object: object2, type, info, index: index7 } = this;
    if (index7 !== 0) {
      gl.drawElements(mode2, count2, type, start);
    } else {
      gl.drawArrays(mode2, start, count2);
    }
    info.update(object2, count2, mode2, 1);
  }
  renderInstances(start, count2, primcount) {
    const { gl, mode: mode2, type, index: index7, object: object2, info } = this;
    if (primcount === 0) return;
    if (index7 !== 0) {
      gl.drawElementsInstanced(mode2, count2, type, start, primcount);
    } else {
      gl.drawArraysInstanced(mode2, start, count2, primcount);
    }
    info.update(object2, count2, mode2, primcount);
  }
  renderMultiDraw(starts, counts, drawCount) {
    const { extensions, mode: mode2, object: object2, info } = this;
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < drawCount; i2++) {
        this.render(starts[i2], counts[i2]);
      }
    } else {
      if (this.index !== 0) {
        extension.multiDrawElementsWEBGL(mode2, counts, 0, this.type, starts, 0, drawCount);
      } else {
        extension.multiDrawArraysWEBGL(mode2, starts, 0, counts, 0, drawCount);
      }
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2];
      }
      info.update(object2, elementCount, mode2, 1);
    }
  }
  renderMultiDrawInstances(starts, counts, drawCount, primcount) {
    const { extensions, mode: mode2, object: object2, info } = this;
    if (drawCount === 0) return;
    const extension = extensions.get("WEBGL_multi_draw");
    if (extension === null) {
      for (let i2 = 0; i2 < drawCount; i2++) {
        this.renderInstances(starts[i2], counts[i2], primcount[i2]);
      }
    } else {
      if (this.index !== 0) {
        extension.multiDrawElementsInstancedWEBGL(mode2, counts, 0, this.type, starts, 0, primcount, 0, drawCount);
      } else {
        extension.multiDrawArraysInstancedWEBGL(mode2, starts, 0, counts, 0, primcount, 0, drawCount);
      }
      let elementCount = 0;
      for (let i2 = 0; i2 < drawCount; i2++) {
        elementCount += counts[i2];
      }
      for (let i2 = 0; i2 < primcount.length; i2++) {
        info.update(object2, elementCount, mode2, primcount[i2]);
      }
    }
  }
  //
};
var WebGLBackend = class extends Backend {
  constructor(parameters = {}) {
    super(parameters);
    this.isWebGLBackend = true;
  }
  init(renderer3) {
    super.init(renderer3);
    const parameters = this.parameters;
    const glContext = parameters.context !== void 0 ? parameters.context : renderer3.domElement.getContext("webgl2");
    this.gl = glContext;
    this.extensions = new WebGLExtensions2(this);
    this.capabilities = new WebGLCapabilities2(this);
    this.attributeUtils = new WebGLAttributeUtils(this);
    this.textureUtils = new WebGLTextureUtils(this);
    this.bufferRenderer = new WebGLBufferRenderer2(this);
    this.state = new WebGLState2(this);
    this.utils = new WebGLUtils2(this);
    this.vaoCache = {};
    this.transformFeedbackCache = {};
    this.discard = false;
    this.trackTimestamp = parameters.trackTimestamp === true;
    this.extensions.get("EXT_color_buffer_float");
    this.extensions.get("WEBGL_clip_cull_distance");
    this.extensions.get("OES_texture_float_linear");
    this.extensions.get("EXT_color_buffer_half_float");
    this.extensions.get("WEBGL_multisampled_render_to_texture");
    this.extensions.get("WEBGL_render_shared_exponent");
    this.extensions.get("WEBGL_multi_draw");
    this.disjoint = this.extensions.get("EXT_disjoint_timer_query_webgl2");
    this.parallel = this.extensions.get("KHR_parallel_shader_compile");
    this._currentContext = null;
  }
  get coordinateSystem() {
    return WebGLCoordinateSystem2;
  }
  async getArrayBufferAsync(attribute2) {
    return await this.attributeUtils.getArrayBufferAsync(attribute2);
  }
  initTimestampQuery(renderContext) {
    if (!this.disjoint || !this.trackTimestamp) return;
    const renderContextData = this.get(renderContext);
    if (this.queryRunning) {
      if (!renderContextData.queryQueue) renderContextData.queryQueue = [];
      renderContextData.queryQueue.push(renderContext);
      return;
    }
    if (renderContextData.activeQuery) {
      this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT);
      renderContextData.activeQuery = null;
    }
    renderContextData.activeQuery = this.gl.createQuery();
    if (renderContextData.activeQuery !== null) {
      this.gl.beginQuery(this.disjoint.TIME_ELAPSED_EXT, renderContextData.activeQuery);
      this.queryRunning = true;
    }
  }
  // timestamp utils
  prepareTimestampBuffer(renderContext) {
    if (!this.disjoint || !this.trackTimestamp) return;
    const renderContextData = this.get(renderContext);
    if (renderContextData.activeQuery) {
      this.gl.endQuery(this.disjoint.TIME_ELAPSED_EXT);
      if (!renderContextData.gpuQueries) renderContextData.gpuQueries = [];
      renderContextData.gpuQueries.push({ query: renderContextData.activeQuery });
      renderContextData.activeQuery = null;
      this.queryRunning = false;
      if (renderContextData.queryQueue && renderContextData.queryQueue.length > 0) {
        const nextRenderContext = renderContextData.queryQueue.shift();
        this.initTimestampQuery(nextRenderContext);
      }
    }
  }
  async resolveTimestampAsync(renderContext, type = "render") {
    if (!this.disjoint || !this.trackTimestamp) return;
    const renderContextData = this.get(renderContext);
    if (!renderContextData.gpuQueries) renderContextData.gpuQueries = [];
    for (let i2 = 0; i2 < renderContextData.gpuQueries.length; i2++) {
      const queryInfo = renderContextData.gpuQueries[i2];
      const available = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT_AVAILABLE);
      const disjoint2 = this.gl.getParameter(this.disjoint.GPU_DISJOINT_EXT);
      if (available && !disjoint2) {
        const elapsed = this.gl.getQueryParameter(queryInfo.query, this.gl.QUERY_RESULT);
        const duration = Number(elapsed) / 1e6;
        this.gl.deleteQuery(queryInfo.query);
        renderContextData.gpuQueries.splice(i2, 1);
        i2--;
        this.renderer.info.updateTimestamp(type, duration);
      }
    }
  }
  getContext() {
    return this.gl;
  }
  beginRender(renderContext) {
    const { gl } = this;
    const renderContextData = this.get(renderContext);
    this.initTimestampQuery(renderContext);
    renderContextData.previousContext = this._currentContext;
    this._currentContext = renderContext;
    this._setFramebuffer(renderContext);
    this.clear(renderContext.clearColor, renderContext.clearDepth, renderContext.clearStencil, renderContext, false);
    if (renderContext.viewport) {
      this.updateViewport(renderContext);
    } else {
      gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
    }
    if (renderContext.scissor) {
      const { x: x2, y: y2, width, height } = renderContext.scissorValue;
      gl.scissor(x2, renderContext.height - height - y2, width, height);
    }
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    if (occlusionQueryCount > 0) {
      renderContextData.currentOcclusionQueries = renderContextData.occlusionQueries;
      renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;
      renderContextData.lastOcclusionObject = null;
      renderContextData.occlusionQueries = new Array(occlusionQueryCount);
      renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);
      renderContextData.occlusionQueryIndex = 0;
    }
  }
  finishRender(renderContext) {
    const { gl, state } = this;
    const renderContextData = this.get(renderContext);
    const previousContext = renderContextData.previousContext;
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    if (occlusionQueryCount > 0) {
      if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {
        gl.endQuery(gl.ANY_SAMPLES_PASSED);
      }
      this.resolveOccludedAsync(renderContext);
    }
    const textures = renderContext.textures;
    if (textures !== null) {
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture2 = textures[i2];
        if (texture2.generateMipmaps) {
          this.generateMipmaps(texture2);
        }
      }
    }
    this._currentContext = previousContext;
    if (renderContext.textures !== null && renderContext.renderTarget) {
      const renderTargetContextData = this.get(renderContext.renderTarget);
      const { samples } = renderContext.renderTarget;
      if (samples > 0) {
        const fb = renderTargetContextData.framebuffers[renderContext.getCacheKey()];
        const mask = gl.COLOR_BUFFER_BIT;
        const msaaFrameBuffer = renderTargetContextData.msaaFrameBuffer;
        const textures2 = renderContext.textures;
        state.bindFramebuffer(gl.READ_FRAMEBUFFER, msaaFrameBuffer);
        state.bindFramebuffer(gl.DRAW_FRAMEBUFFER, fb);
        for (let i2 = 0; i2 < textures2.length; i2++) {
          if (renderContext.scissor) {
            const { x: x2, y: y2, width, height } = renderContext.scissorValue;
            const viewY = renderContext.height - height - y2;
            gl.blitFramebuffer(x2, viewY, x2 + width, viewY + height, x2, viewY, x2 + width, viewY + height, mask, gl.NEAREST);
            gl.invalidateSubFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray, x2, viewY, width, height);
          } else {
            gl.blitFramebuffer(0, 0, renderContext.width, renderContext.height, 0, 0, renderContext.width, renderContext.height, mask, gl.NEAREST);
            gl.invalidateFramebuffer(gl.READ_FRAMEBUFFER, renderTargetContextData.invalidationArray);
          }
        }
      }
    }
    if (previousContext !== null) {
      this._setFramebuffer(previousContext);
      if (previousContext.viewport) {
        this.updateViewport(previousContext);
      } else {
        gl.viewport(0, 0, gl.drawingBufferWidth, gl.drawingBufferHeight);
      }
    }
    this.prepareTimestampBuffer(renderContext);
  }
  resolveOccludedAsync(renderContext) {
    const renderContextData = this.get(renderContext);
    const { currentOcclusionQueries, currentOcclusionQueryObjects } = renderContextData;
    if (currentOcclusionQueries && currentOcclusionQueryObjects) {
      const occluded = /* @__PURE__ */ new WeakSet();
      const { gl } = this;
      renderContextData.currentOcclusionQueryObjects = null;
      renderContextData.currentOcclusionQueries = null;
      const check = () => {
        let completed = 0;
        for (let i2 = 0; i2 < currentOcclusionQueries.length; i2++) {
          const query = currentOcclusionQueries[i2];
          if (query === null) continue;
          if (gl.getQueryParameter(query, gl.QUERY_RESULT_AVAILABLE)) {
            if (gl.getQueryParameter(query, gl.QUERY_RESULT) > 0) occluded.add(currentOcclusionQueryObjects[i2]);
            currentOcclusionQueries[i2] = null;
            gl.deleteQuery(query);
            completed++;
          }
        }
        if (completed < currentOcclusionQueries.length) {
          requestAnimationFrame(check);
        } else {
          renderContextData.occluded = occluded;
        }
      };
      check();
    }
  }
  isOccluded(renderContext, object2) {
    const renderContextData = this.get(renderContext);
    return renderContextData.occluded && renderContextData.occluded.has(object2);
  }
  updateViewport(renderContext) {
    const gl = this.gl;
    const { x: x2, y: y2, width, height } = renderContext.viewportValue;
    gl.viewport(x2, renderContext.height - height - y2, width, height);
  }
  setScissorTest(boolean) {
    const gl = this.gl;
    if (boolean) {
      gl.enable(gl.SCISSOR_TEST);
    } else {
      gl.disable(gl.SCISSOR_TEST);
    }
  }
  clear(color3, depth2, stencil, descriptor = null, setFrameBuffer = true) {
    const { gl } = this;
    if (descriptor === null) {
      descriptor = {
        textures: null,
        clearColorValue: this.getClearColor()
      };
    }
    let clear = 0;
    if (color3) clear |= gl.COLOR_BUFFER_BIT;
    if (depth2) clear |= gl.DEPTH_BUFFER_BIT;
    if (stencil) clear |= gl.STENCIL_BUFFER_BIT;
    if (clear !== 0) {
      const clearColor = descriptor.clearColorValue || this.getClearColor();
      clearColor.r *= clearColor.a;
      clearColor.g *= clearColor.a;
      clearColor.b *= clearColor.a;
      if (depth2) this.state.setDepthMask(true);
      if (descriptor.textures === null) {
        gl.clearColor(clearColor.r, clearColor.g, clearColor.b, clearColor.a);
        gl.clear(clear);
      } else {
        if (setFrameBuffer) this._setFramebuffer(descriptor);
        if (color3) {
          for (let i2 = 0; i2 < descriptor.textures.length; i2++) {
            gl.clearBufferfv(gl.COLOR, i2, [clearColor.r, clearColor.g, clearColor.b, clearColor.a]);
          }
        }
        if (depth2 && stencil) {
          gl.clearBufferfi(gl.DEPTH_STENCIL, 0, 1, 0);
        } else if (depth2) {
          gl.clearBufferfv(gl.DEPTH, 0, [1]);
        } else if (stencil) {
          gl.clearBufferiv(gl.STENCIL, 0, [0]);
        }
      }
    }
  }
  beginCompute(computeGroup) {
    const { state, gl } = this;
    state.bindFramebuffer(gl.FRAMEBUFFER, null);
    this.initTimestampQuery(computeGroup);
  }
  compute(computeGroup, computeNode, bindings, pipeline) {
    const { state, gl } = this;
    if (!this.discard) {
      gl.enable(gl.RASTERIZER_DISCARD);
      this.discard = true;
    }
    const { programGPU, transformBuffers, attributes } = this.get(pipeline);
    const vaoKey = this._getVaoKey(null, attributes);
    const vaoGPU = this.vaoCache[vaoKey];
    if (vaoGPU === void 0) {
      this._createVao(null, attributes);
    } else {
      gl.bindVertexArray(vaoGPU);
    }
    state.useProgram(programGPU);
    this._bindUniforms(bindings);
    const transformFeedbackGPU = this._getTransformFeedback(transformBuffers);
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);
    gl.beginTransformFeedback(gl.POINTS);
    if (attributes[0].isStorageInstancedBufferAttribute) {
      gl.drawArraysInstanced(gl.POINTS, 0, 1, computeNode.count);
    } else {
      gl.drawArrays(gl.POINTS, 0, computeNode.count);
    }
    gl.endTransformFeedback();
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
    for (let i2 = 0; i2 < transformBuffers.length; i2++) {
      const dualAttributeData = transformBuffers[i2];
      if (dualAttributeData.pbo) {
        this.textureUtils.copyBufferToTexture(dualAttributeData.transformBuffer, dualAttributeData.pbo);
      }
      dualAttributeData.switchBuffers();
    }
  }
  finishCompute(computeGroup) {
    const gl = this.gl;
    this.discard = false;
    gl.disable(gl.RASTERIZER_DISCARD);
    this.prepareTimestampBuffer(computeGroup);
  }
  draw(renderObject) {
    const { object: object2, pipeline, material, context: context2 } = renderObject;
    const { programGPU } = this.get(pipeline);
    const { gl, state } = this;
    const contextData = this.get(context2);
    this._bindUniforms(renderObject.getBindings());
    const frontFaceCW = object2.isMesh && object2.matrixWorld.determinant() < 0;
    state.setMaterial(material, frontFaceCW);
    state.useProgram(programGPU);
    let vaoGPU = renderObject.staticVao;
    if (vaoGPU === void 0) {
      const vaoKey = this._getVaoKey(renderObject.getIndex(), renderObject.getAttributes());
      vaoGPU = this.vaoCache[vaoKey];
      if (vaoGPU === void 0) {
        let staticVao;
        ({ vaoGPU, staticVao } = this._createVao(renderObject.getIndex(), renderObject.getAttributes()));
        if (staticVao) renderObject.staticVao = vaoGPU;
      }
    }
    gl.bindVertexArray(vaoGPU);
    const index7 = renderObject.getIndex();
    const geometry = renderObject.geometry;
    const drawRange = renderObject.drawRange;
    const firstVertex = drawRange.start;
    const lastObject = contextData.lastOcclusionObject;
    if (lastObject !== object2 && lastObject !== void 0) {
      if (lastObject !== null && lastObject.occlusionTest === true) {
        gl.endQuery(gl.ANY_SAMPLES_PASSED);
        contextData.occlusionQueryIndex++;
      }
      if (object2.occlusionTest === true) {
        const query = gl.createQuery();
        gl.beginQuery(gl.ANY_SAMPLES_PASSED, query);
        contextData.occlusionQueries[contextData.occlusionQueryIndex] = query;
        contextData.occlusionQueryObjects[contextData.occlusionQueryIndex] = object2;
      }
      contextData.lastOcclusionObject = object2;
    }
    const renderer3 = this.bufferRenderer;
    if (object2.isPoints) renderer3.mode = gl.POINTS;
    else if (object2.isLineSegments) renderer3.mode = gl.LINES;
    else if (object2.isLine) renderer3.mode = gl.LINE_STRIP;
    else if (object2.isLineLoop) renderer3.mode = gl.LINE_LOOP;
    else {
      if (material.wireframe === true) {
        state.setLineWidth(material.wireframeLinewidth * this.renderer.getPixelRatio());
        renderer3.mode = gl.LINES;
      } else {
        renderer3.mode = gl.TRIANGLES;
      }
    }
    let count2;
    renderer3.object = object2;
    if (index7 !== null) {
      const indexData = this.get(index7);
      const indexCount = drawRange.count !== Infinity ? drawRange.count : index7.count;
      renderer3.index = index7.count;
      renderer3.type = indexData.type;
      count2 = indexCount;
    } else {
      renderer3.index = 0;
      const vertexCount = drawRange.count !== Infinity ? drawRange.count : geometry.attributes.position.count;
      count2 = vertexCount;
    }
    const instanceCount = this.getInstanceCount(renderObject);
    if (object2.isBatchedMesh) {
      if (object2._multiDrawInstances !== null) {
        renderer3.renderMultiDrawInstances(object2._multiDrawStarts, object2._multiDrawCounts, object2._multiDrawCount, object2._multiDrawInstances);
      } else if (!this.hasFeature("WEBGL_multi_draw")) {
        warnOnce2("THREE.WebGLRenderer: WEBGL_multi_draw not supported.");
      } else {
        renderer3.renderMultiDraw(object2._multiDrawStarts, object2._multiDrawCounts, object2._multiDrawCount);
      }
    } else if (instanceCount > 1) {
      renderer3.renderInstances(firstVertex, count2, instanceCount);
    } else {
      renderer3.render(firstVertex, count2);
    }
    gl.bindVertexArray(null);
  }
  needsRenderUpdate() {
    return false;
  }
  getRenderCacheKey() {
    return "";
  }
  // textures
  createDefaultTexture(texture2) {
    this.textureUtils.createDefaultTexture(texture2);
  }
  createTexture(texture2, options) {
    this.textureUtils.createTexture(texture2, options);
  }
  updateTexture(texture2, options) {
    this.textureUtils.updateTexture(texture2, options);
  }
  generateMipmaps(texture2) {
    this.textureUtils.generateMipmaps(texture2);
  }
  destroyTexture(texture2) {
    this.textureUtils.destroyTexture(texture2);
  }
  copyTextureToBuffer(texture2, x2, y2, width, height) {
    return this.textureUtils.copyTextureToBuffer(texture2, x2, y2, width, height);
  }
  createSampler() {
  }
  destroySampler() {
  }
  // node builder
  createNodeBuilder(object2, renderer3) {
    return new GLSLNodeBuilder(object2, renderer3);
  }
  // program
  createProgram(program) {
    const gl = this.gl;
    const { stage, code: code2 } = program;
    const shader = stage === "fragment" ? gl.createShader(gl.FRAGMENT_SHADER) : gl.createShader(gl.VERTEX_SHADER);
    gl.shaderSource(shader, code2);
    gl.compileShader(shader);
    this.set(program, {
      shaderGPU: shader
    });
  }
  destroyProgram() {
    console.warn("Abstract class.");
  }
  createRenderPipeline(renderObject, promises) {
    const gl = this.gl;
    const pipeline = renderObject.pipeline;
    const { fragmentProgram, vertexProgram } = pipeline;
    const programGPU = gl.createProgram();
    const fragmentShader2 = this.get(fragmentProgram).shaderGPU;
    const vertexShader2 = this.get(vertexProgram).shaderGPU;
    gl.attachShader(programGPU, fragmentShader2);
    gl.attachShader(programGPU, vertexShader2);
    gl.linkProgram(programGPU);
    this.set(pipeline, {
      programGPU,
      fragmentShader: fragmentShader2,
      vertexShader: vertexShader2
    });
    if (promises !== null && this.parallel) {
      const p2 = new Promise((resolve) => {
        const parallel = this.parallel;
        const checkStatus = () => {
          if (gl.getProgramParameter(programGPU, parallel.COMPLETION_STATUS_KHR)) {
            this._completeCompile(renderObject, pipeline);
            resolve();
          } else {
            requestAnimationFrame(checkStatus);
          }
        };
        checkStatus();
      });
      promises.push(p2);
      return;
    }
    this._completeCompile(renderObject, pipeline);
  }
  _handleSource(string, errorLine) {
    const lines = string.split("\n");
    const lines2 = [];
    const from = Math.max(errorLine - 6, 0);
    const to = Math.min(errorLine + 6, lines.length);
    for (let i2 = from; i2 < to; i2++) {
      const line = i2 + 1;
      lines2.push(`${line === errorLine ? ">" : " "} ${line}: ${lines[i2]}`);
    }
    return lines2.join("\n");
  }
  _getShaderErrors(gl, shader, type) {
    const status = gl.getShaderParameter(shader, gl.COMPILE_STATUS);
    const errors = gl.getShaderInfoLog(shader).trim();
    if (status && errors === "") return "";
    const errorMatches = /ERROR: 0:(\d+)/.exec(errors);
    if (errorMatches) {
      const errorLine = parseInt(errorMatches[1]);
      return type.toUpperCase() + "\n\n" + errors + "\n\n" + this._handleSource(gl.getShaderSource(shader), errorLine);
    } else {
      return errors;
    }
  }
  _logProgramError(programGPU, glFragmentShader, glVertexShader) {
    if (this.renderer.debug.checkShaderErrors) {
      const gl = this.gl;
      const programLog = gl.getProgramInfoLog(programGPU).trim();
      if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
        if (typeof this.renderer.debug.onShaderError === "function") {
          this.renderer.debug.onShaderError(gl, programGPU, glVertexShader, glFragmentShader);
        } else {
          const vertexErrors = this._getShaderErrors(gl, glVertexShader, "vertex");
          const fragmentErrors = this._getShaderErrors(gl, glFragmentShader, "fragment");
          console.error(
            "THREE.WebGLProgram: Shader Error " + gl.getError() + " - VALIDATE_STATUS " + gl.getProgramParameter(programGPU, gl.VALIDATE_STATUS) + "\n\nProgram Info Log: " + programLog + "\n" + vertexErrors + "\n" + fragmentErrors
          );
        }
      } else if (programLog !== "") {
        console.warn("THREE.WebGLProgram: Program Info Log:", programLog);
      }
    }
  }
  _completeCompile(renderObject, pipeline) {
    const { state, gl } = this;
    const pipelineData = this.get(pipeline);
    const { programGPU, fragmentShader: fragmentShader2, vertexShader: vertexShader2 } = pipelineData;
    if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
      this._logProgramError(programGPU, fragmentShader2, vertexShader2);
    }
    state.useProgram(programGPU);
    const bindings = renderObject.getBindings();
    this._setupBindings(bindings, programGPU);
    this.set(pipeline, {
      programGPU
    });
  }
  createComputePipeline(computePipeline, bindings) {
    const { state, gl } = this;
    const fragmentProgram = {
      stage: "fragment",
      code: "#version 300 es\nprecision highp float;\nvoid main() {}"
    };
    this.createProgram(fragmentProgram);
    const { computeProgram } = computePipeline;
    const programGPU = gl.createProgram();
    const fragmentShader2 = this.get(fragmentProgram).shaderGPU;
    const vertexShader2 = this.get(computeProgram).shaderGPU;
    const transforms = computeProgram.transforms;
    const transformVaryingNames = [];
    const transformAttributeNodes = [];
    for (let i2 = 0; i2 < transforms.length; i2++) {
      const transform = transforms[i2];
      transformVaryingNames.push(transform.varyingName);
      transformAttributeNodes.push(transform.attributeNode);
    }
    gl.attachShader(programGPU, fragmentShader2);
    gl.attachShader(programGPU, vertexShader2);
    gl.transformFeedbackVaryings(
      programGPU,
      transformVaryingNames,
      gl.SEPARATE_ATTRIBS
    );
    gl.linkProgram(programGPU);
    if (gl.getProgramParameter(programGPU, gl.LINK_STATUS) === false) {
      this._logProgramError(programGPU, fragmentShader2, vertexShader2);
    }
    state.useProgram(programGPU);
    this.createBindings(null, bindings);
    this._setupBindings(bindings, programGPU);
    const attributeNodes = computeProgram.attributes;
    const attributes = [];
    const transformBuffers = [];
    for (let i2 = 0; i2 < attributeNodes.length; i2++) {
      const attribute2 = attributeNodes[i2].node.attribute;
      attributes.push(attribute2);
      if (!this.has(attribute2)) this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
    }
    for (let i2 = 0; i2 < transformAttributeNodes.length; i2++) {
      const attribute2 = transformAttributeNodes[i2].attribute;
      if (!this.has(attribute2)) this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
      const attributeData = this.get(attribute2);
      transformBuffers.push(attributeData);
    }
    this.set(computePipeline, {
      programGPU,
      transformBuffers,
      attributes
    });
  }
  createBindings(bindGroup, bindings) {
    this.updateBindings(bindGroup, bindings);
  }
  updateBindings(bindGroup, bindings) {
    const { state, gl } = this;
    let groupIndex = 0;
    let textureIndex = 0;
    for (const bindGroup2 of bindings) {
      for (const binding of bindGroup2.bindings) {
        if (binding.isUniformsGroup || binding.isUniformBuffer) {
          const bufferGPU = gl.createBuffer();
          const data = binding.buffer;
          gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
          gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);
          state.bindBufferBase(gl.UNIFORM_BUFFER, groupIndex, bufferGPU);
          this.set(binding, {
            index: groupIndex++,
            bufferGPU
          });
        } else if (binding.isSampledTexture) {
          const { textureGPU, glTextureType } = this.get(binding.texture);
          this.set(binding, {
            index: textureIndex++,
            textureGPU,
            glTextureType
          });
        }
      }
    }
  }
  updateBinding(binding) {
    const gl = this.gl;
    if (binding.isUniformsGroup || binding.isUniformBuffer) {
      const bindingData = this.get(binding);
      const bufferGPU = bindingData.bufferGPU;
      const data = binding.buffer;
      gl.bindBuffer(gl.UNIFORM_BUFFER, bufferGPU);
      gl.bufferData(gl.UNIFORM_BUFFER, data, gl.DYNAMIC_DRAW);
    }
  }
  // attributes
  createIndexAttribute(attribute2) {
    const gl = this.gl;
    this.attributeUtils.createAttribute(attribute2, gl.ELEMENT_ARRAY_BUFFER);
  }
  createAttribute(attribute2) {
    if (this.has(attribute2)) return;
    const gl = this.gl;
    this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
  }
  createStorageAttribute(attribute2) {
    if (this.has(attribute2)) return;
    const gl = this.gl;
    this.attributeUtils.createAttribute(attribute2, gl.ARRAY_BUFFER);
  }
  updateAttribute(attribute2) {
    this.attributeUtils.updateAttribute(attribute2);
  }
  destroyAttribute(attribute2) {
    this.attributeUtils.destroyAttribute(attribute2);
  }
  updateSize() {
  }
  hasFeature(name) {
    const keysMatching = Object.keys(GLFeatureName).filter((key) => GLFeatureName[key] === name);
    const extensions = this.extensions;
    for (let i2 = 0; i2 < keysMatching.length; i2++) {
      if (extensions.has(keysMatching[i2])) return true;
    }
    return false;
  }
  getMaxAnisotropy() {
    return this.capabilities.getMaxAnisotropy();
  }
  copyTextureToTexture(position, srcTexture, dstTexture, level) {
    this.textureUtils.copyTextureToTexture(position, srcTexture, dstTexture, level);
  }
  copyFramebufferToTexture(texture2, renderContext) {
    this.textureUtils.copyFramebufferToTexture(texture2, renderContext);
  }
  _setFramebuffer(descriptor) {
    const { gl, state } = this;
    let currentFrameBuffer = null;
    if (descriptor.textures !== null) {
      const renderTarget = descriptor.renderTarget;
      const renderTargetContextData = this.get(renderTarget);
      const { samples, depthBuffer, stencilBuffer } = renderTarget;
      const isCube = renderTarget.isWebGLCubeRenderTarget === true;
      let msaaFb = renderTargetContextData.msaaFrameBuffer;
      let depthRenderbuffer = renderTargetContextData.depthRenderbuffer;
      const cacheKey = getCacheKey(descriptor);
      let fb;
      if (isCube) {
        renderTargetContextData.cubeFramebuffers || (renderTargetContextData.cubeFramebuffers = {});
        fb = renderTargetContextData.cubeFramebuffers[cacheKey];
      } else {
        renderTargetContextData.framebuffers || (renderTargetContextData.framebuffers = {});
        fb = renderTargetContextData.framebuffers[cacheKey];
      }
      if (fb === void 0) {
        fb = gl.createFramebuffer();
        state.bindFramebuffer(gl.FRAMEBUFFER, fb);
        const textures = descriptor.textures;
        if (isCube) {
          renderTargetContextData.cubeFramebuffers[cacheKey] = fb;
          const { textureGPU } = this.get(textures[0]);
          const cubeFace = this.renderer._activeCubeFace;
          gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_CUBE_MAP_POSITIVE_X + cubeFace, textureGPU, 0);
        } else {
          renderTargetContextData.framebuffers[cacheKey] = fb;
          for (let i2 = 0; i2 < textures.length; i2++) {
            const texture2 = textures[i2];
            const textureData = this.get(texture2);
            textureData.renderTarget = descriptor.renderTarget;
            const attachment = gl.COLOR_ATTACHMENT0 + i2;
            gl.framebufferTexture2D(gl.FRAMEBUFFER, attachment, gl.TEXTURE_2D, textureData.textureGPU, 0);
          }
          state.drawBuffers(descriptor, fb);
        }
        if (descriptor.depthTexture !== null) {
          const textureData = this.get(descriptor.depthTexture);
          const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
          gl.framebufferTexture2D(gl.FRAMEBUFFER, depthStyle, gl.TEXTURE_2D, textureData.textureGPU, 0);
        }
      }
      if (samples > 0) {
        if (msaaFb === void 0) {
          const invalidationArray = [];
          msaaFb = gl.createFramebuffer();
          state.bindFramebuffer(gl.FRAMEBUFFER, msaaFb);
          const msaaRenderbuffers = [];
          const textures = descriptor.textures;
          for (let i2 = 0; i2 < textures.length; i2++) {
            msaaRenderbuffers[i2] = gl.createRenderbuffer();
            gl.bindRenderbuffer(gl.RENDERBUFFER, msaaRenderbuffers[i2]);
            invalidationArray.push(gl.COLOR_ATTACHMENT0 + i2);
            if (depthBuffer) {
              const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
              invalidationArray.push(depthStyle);
            }
            const texture2 = descriptor.textures[i2];
            const textureData = this.get(texture2);
            gl.renderbufferStorageMultisample(gl.RENDERBUFFER, samples, textureData.glInternalFormat, descriptor.width, descriptor.height);
            gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i2, gl.RENDERBUFFER, msaaRenderbuffers[i2]);
          }
          renderTargetContextData.msaaFrameBuffer = msaaFb;
          renderTargetContextData.msaaRenderbuffers = msaaRenderbuffers;
          if (depthRenderbuffer === void 0) {
            depthRenderbuffer = gl.createRenderbuffer();
            this.textureUtils.setupRenderBufferStorage(depthRenderbuffer, descriptor);
            renderTargetContextData.depthRenderbuffer = depthRenderbuffer;
            const depthStyle = stencilBuffer ? gl.DEPTH_STENCIL_ATTACHMENT : gl.DEPTH_ATTACHMENT;
            invalidationArray.push(depthStyle);
          }
          renderTargetContextData.invalidationArray = invalidationArray;
        }
        currentFrameBuffer = renderTargetContextData.msaaFrameBuffer;
      } else {
        currentFrameBuffer = fb;
      }
    }
    state.bindFramebuffer(gl.FRAMEBUFFER, currentFrameBuffer);
  }
  _getVaoKey(index7, attributes) {
    let key = [];
    if (index7 !== null) {
      const indexData = this.get(index7);
      key += ":" + indexData.id;
    }
    for (let i2 = 0; i2 < attributes.length; i2++) {
      const attributeData = this.get(attributes[i2]);
      key += ":" + attributeData.id;
    }
    return key;
  }
  _createVao(index7, attributes) {
    const { gl } = this;
    const vaoGPU = gl.createVertexArray();
    let key = "";
    let staticVao = true;
    gl.bindVertexArray(vaoGPU);
    if (index7 !== null) {
      const indexData = this.get(index7);
      gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, indexData.bufferGPU);
      key += ":" + indexData.id;
    }
    for (let i2 = 0; i2 < attributes.length; i2++) {
      const attribute2 = attributes[i2];
      const attributeData = this.get(attribute2);
      key += ":" + attributeData.id;
      gl.bindBuffer(gl.ARRAY_BUFFER, attributeData.bufferGPU);
      gl.enableVertexAttribArray(i2);
      if (attribute2.isStorageBufferAttribute || attribute2.isStorageInstancedBufferAttribute) staticVao = false;
      let stride, offset;
      if (attribute2.isInterleavedBufferAttribute === true) {
        stride = attribute2.data.stride * attributeData.bytesPerElement;
        offset = attribute2.offset * attributeData.bytesPerElement;
      } else {
        stride = 0;
        offset = 0;
      }
      if (attributeData.isInteger) {
        gl.vertexAttribIPointer(i2, attribute2.itemSize, attributeData.type, stride, offset);
      } else {
        gl.vertexAttribPointer(i2, attribute2.itemSize, attributeData.type, attribute2.normalized, stride, offset);
      }
      if (attribute2.isInstancedBufferAttribute && !attribute2.isInterleavedBufferAttribute) {
        gl.vertexAttribDivisor(i2, attribute2.meshPerAttribute);
      } else if (attribute2.isInterleavedBufferAttribute && attribute2.data.isInstancedInterleavedBuffer) {
        gl.vertexAttribDivisor(i2, attribute2.data.meshPerAttribute);
      }
    }
    gl.bindBuffer(gl.ARRAY_BUFFER, null);
    this.vaoCache[key] = vaoGPU;
    return { vaoGPU, staticVao };
  }
  _getTransformFeedback(transformBuffers) {
    let key = "";
    for (let i2 = 0; i2 < transformBuffers.length; i2++) {
      key += ":" + transformBuffers[i2].id;
    }
    let transformFeedbackGPU = this.transformFeedbackCache[key];
    if (transformFeedbackGPU !== void 0) {
      return transformFeedbackGPU;
    }
    const { gl } = this;
    transformFeedbackGPU = gl.createTransformFeedback();
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, transformFeedbackGPU);
    for (let i2 = 0; i2 < transformBuffers.length; i2++) {
      const attributeData = transformBuffers[i2];
      gl.bindBufferBase(gl.TRANSFORM_FEEDBACK_BUFFER, i2, attributeData.transformBuffer);
    }
    gl.bindTransformFeedback(gl.TRANSFORM_FEEDBACK, null);
    this.transformFeedbackCache[key] = transformFeedbackGPU;
    return transformFeedbackGPU;
  }
  _setupBindings(bindings, programGPU) {
    const gl = this.gl;
    for (const bindGroup of bindings) {
      for (const binding of bindGroup.bindings) {
        const bindingData = this.get(binding);
        const index7 = bindingData.index;
        if (binding.isUniformsGroup || binding.isUniformBuffer) {
          const location = gl.getUniformBlockIndex(programGPU, binding.name);
          gl.uniformBlockBinding(programGPU, location, index7);
        } else if (binding.isSampledTexture) {
          const location = gl.getUniformLocation(programGPU, binding.name);
          gl.uniform1i(location, index7);
        }
      }
    }
  }
  _bindUniforms(bindings) {
    const { gl, state } = this;
    for (const bindGroup of bindings) {
      for (const binding of bindGroup.bindings) {
        const bindingData = this.get(binding);
        const index7 = bindingData.index;
        if (binding.isUniformsGroup || binding.isUniformBuffer) {
          state.bindBufferBase(gl.UNIFORM_BUFFER, index7, bindingData.bufferGPU);
        } else if (binding.isSampledTexture) {
          state.bindTexture(bindingData.glTextureType, bindingData.textureGPU, gl.TEXTURE0 + index7);
        }
      }
    }
  }
};
var Sampler = class extends Binding {
  constructor(name, texture2) {
    super(name);
    this.texture = texture2;
    this.version = texture2 ? texture2.version : 0;
    this.isSampler = true;
  }
};
var NodeSampler = class extends Sampler {
  constructor(name, textureNode, groupNode) {
    super(name, textureNode ? textureNode.value : null);
    this.textureNode = textureNode;
    this.groupNode = groupNode;
  }
  update() {
    this.texture = this.textureNode.value;
  }
};
var StorageBuffer = class extends Buffer {
  constructor(name, attribute2) {
    super(name, attribute2 ? attribute2.array : null);
    this.attribute = attribute2;
    this.isStorageBuffer = true;
  }
};
var _id2 = 0;
var NodeStorageBuffer = class extends StorageBuffer {
  constructor(nodeUniform, groupNode) {
    super("StorageBuffer_" + _id2++, nodeUniform ? nodeUniform.value : null);
    this.nodeUniform = nodeUniform;
    this.access = nodeUniform ? nodeUniform.access : GPUBufferBindingType.Storage;
    this.groupNode = groupNode;
  }
  get buffer() {
    return this.nodeUniform.value;
  }
};
var WebGPUTexturePassUtils = class extends DataMap {
  constructor(device) {
    super();
    this.device = device;
    const mipmapVertexSource = `
struct VarysStruct {
	@builtin( position ) Position: vec4<f32>,
	@location( 0 ) vTex : vec2<f32>
};

@vertex
fn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {

	var Varys : VarysStruct;

	var pos = array< vec2<f32>, 4 >(
		vec2<f32>( -1.0,  1.0 ),
		vec2<f32>(  1.0,  1.0 ),
		vec2<f32>( -1.0, -1.0 ),
		vec2<f32>(  1.0, -1.0 )
	);

	var tex = array< vec2<f32>, 4 >(
		vec2<f32>( 0.0, 0.0 ),
		vec2<f32>( 1.0, 0.0 ),
		vec2<f32>( 0.0, 1.0 ),
		vec2<f32>( 1.0, 1.0 )
	);

	Varys.vTex = tex[ vertexIndex ];
	Varys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );

	return Varys;

}
`;
    const mipmapFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vTex );

}
`;
    const flipYFragmentSource = `
@group( 0 ) @binding( 0 )
var imgSampler : sampler;

@group( 0 ) @binding( 1 )
var img : texture_2d<f32>;

@fragment
fn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {

	return textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );

}
`;
    this.mipmapSampler = device.createSampler({ minFilter: GPUFilterMode.Linear });
    this.flipYSampler = device.createSampler({ minFilter: GPUFilterMode.Nearest });
    this.transferPipelines = {};
    this.flipYPipelines = {};
    this.mipmapVertexShaderModule = device.createShaderModule({
      label: "mipmapVertex",
      code: mipmapVertexSource
    });
    this.mipmapFragmentShaderModule = device.createShaderModule({
      label: "mipmapFragment",
      code: mipmapFragmentSource
    });
    this.flipYFragmentShaderModule = device.createShaderModule({
      label: "flipYFragment",
      code: flipYFragmentSource
    });
  }
  getTransferPipeline(format3) {
    let pipeline = this.transferPipelines[format3];
    if (pipeline === void 0) {
      pipeline = this.device.createRenderPipeline({
        label: `mipmap-${format3}`,
        vertex: {
          module: this.mipmapVertexShaderModule,
          entryPoint: "main"
        },
        fragment: {
          module: this.mipmapFragmentShaderModule,
          entryPoint: "main",
          targets: [{ format: format3 }]
        },
        primitive: {
          topology: GPUPrimitiveTopology.TriangleStrip,
          stripIndexFormat: GPUIndexFormat.Uint32
        },
        layout: "auto"
      });
      this.transferPipelines[format3] = pipeline;
    }
    return pipeline;
  }
  getFlipYPipeline(format3) {
    let pipeline = this.flipYPipelines[format3];
    if (pipeline === void 0) {
      pipeline = this.device.createRenderPipeline({
        label: `flipY-${format3}`,
        vertex: {
          module: this.mipmapVertexShaderModule,
          entryPoint: "main"
        },
        fragment: {
          module: this.flipYFragmentShaderModule,
          entryPoint: "main",
          targets: [{ format: format3 }]
        },
        primitive: {
          topology: GPUPrimitiveTopology.TriangleStrip,
          stripIndexFormat: GPUIndexFormat.Uint32
        },
        layout: "auto"
      });
      this.flipYPipelines[format3] = pipeline;
    }
    return pipeline;
  }
  flipY(textureGPU, textureGPUDescriptor, baseArrayLayer = 0) {
    const format3 = textureGPUDescriptor.format;
    const { width, height } = textureGPUDescriptor.size;
    const transferPipeline = this.getTransferPipeline(format3);
    const flipYPipeline = this.getFlipYPipeline(format3);
    const tempTexture = this.device.createTexture({
      size: { width, height, depthOrArrayLayers: 1 },
      format: format3,
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING
    });
    const srcView = textureGPU.createView({
      baseMipLevel: 0,
      mipLevelCount: 1,
      dimension: GPUTextureViewDimension.TwoD,
      baseArrayLayer
    });
    const dstView = tempTexture.createView({
      baseMipLevel: 0,
      mipLevelCount: 1,
      dimension: GPUTextureViewDimension.TwoD,
      baseArrayLayer: 0
    });
    const commandEncoder = this.device.createCommandEncoder({});
    const pass = (pipeline, sourceView, destinationView) => {
      const bindGroupLayout = pipeline.getBindGroupLayout(0);
      const bindGroup = this.device.createBindGroup({
        layout: bindGroupLayout,
        entries: [{
          binding: 0,
          resource: this.flipYSampler
        }, {
          binding: 1,
          resource: sourceView
        }]
      });
      const passEncoder = commandEncoder.beginRenderPass({
        colorAttachments: [{
          view: destinationView,
          loadOp: GPULoadOp.Clear,
          storeOp: GPUStoreOp.Store,
          clearValue: [0, 0, 0, 0]
        }]
      });
      passEncoder.setPipeline(pipeline);
      passEncoder.setBindGroup(0, bindGroup);
      passEncoder.draw(4, 1, 0, 0);
      passEncoder.end();
    };
    pass(transferPipeline, srcView, dstView);
    pass(flipYPipeline, dstView, srcView);
    this.device.queue.submit([commandEncoder.finish()]);
    tempTexture.destroy();
  }
  generateMipmaps(textureGPU, textureGPUDescriptor, baseArrayLayer = 0) {
    const textureData = this.get(textureGPU);
    if (textureData.useCount === void 0) {
      textureData.useCount = 0;
      textureData.layers = [];
    }
    const passes = textureData.layers[baseArrayLayer] || this._mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer);
    const commandEncoder = this.device.createCommandEncoder({});
    this._mipmapRunBundles(commandEncoder, passes);
    this.device.queue.submit([commandEncoder.finish()]);
    if (textureData.useCount !== 0) textureData.layers[baseArrayLayer] = passes;
    textureData.useCount++;
  }
  _mipmapCreateBundles(textureGPU, textureGPUDescriptor, baseArrayLayer) {
    const pipeline = this.getTransferPipeline(textureGPUDescriptor.format);
    const bindGroupLayout = pipeline.getBindGroupLayout(0);
    let srcView = textureGPU.createView({
      baseMipLevel: 0,
      mipLevelCount: 1,
      dimension: GPUTextureViewDimension.TwoD,
      baseArrayLayer
    });
    const passes = [];
    for (let i2 = 1; i2 < textureGPUDescriptor.mipLevelCount; i2++) {
      const bindGroup = this.device.createBindGroup({
        layout: bindGroupLayout,
        entries: [{
          binding: 0,
          resource: this.mipmapSampler
        }, {
          binding: 1,
          resource: srcView
        }]
      });
      const dstView = textureGPU.createView({
        baseMipLevel: i2,
        mipLevelCount: 1,
        dimension: GPUTextureViewDimension.TwoD,
        baseArrayLayer
      });
      const passDescriptor = {
        colorAttachments: [{
          view: dstView,
          loadOp: GPULoadOp.Clear,
          storeOp: GPUStoreOp.Store,
          clearValue: [0, 0, 0, 0]
        }]
      };
      const passEncoder = this.device.createRenderBundleEncoder({
        colorFormats: [textureGPUDescriptor.format]
      });
      passEncoder.setPipeline(pipeline);
      passEncoder.setBindGroup(0, bindGroup);
      passEncoder.draw(4, 1, 0, 0);
      passes.push({
        renderBundles: [passEncoder.finish()],
        passDescriptor
      });
      srcView = dstView;
    }
    return passes;
  }
  _mipmapRunBundles(commandEncoder, passes) {
    const levels = passes.length;
    for (let i2 = 0; i2 < levels; i2++) {
      const pass = passes[i2];
      const passEncoder = commandEncoder.beginRenderPass(pass.passDescriptor);
      passEncoder.executeBundles(pass.renderBundles);
      passEncoder.end();
    }
  }
};
var _compareToWebGPU = {
  [NeverCompare2]: "never",
  [LessCompare2]: "less",
  [EqualCompare2]: "equal",
  [LessEqualCompare2]: "less-equal",
  [GreaterCompare2]: "greater",
  [GreaterEqualCompare2]: "greater-equal",
  [AlwaysCompare2]: "always",
  [NotEqualCompare2]: "not-equal"
};
var _flipMap = [0, 1, 3, 2, 4, 5];
var WebGPUTextureUtils = class {
  constructor(backend) {
    this.backend = backend;
    this._passUtils = null;
    this.defaultTexture = {};
    this.defaultCubeTexture = {};
    this.defaultVideoFrame = null;
    this.colorBuffer = null;
    this.depthTexture = new DepthTexture2();
    this.depthTexture.name = "depthBuffer";
  }
  createSampler(texture2) {
    const backend = this.backend;
    const device = backend.device;
    const textureGPU = backend.get(texture2);
    const samplerDescriptorGPU = {
      addressModeU: this._convertAddressMode(texture2.wrapS),
      addressModeV: this._convertAddressMode(texture2.wrapT),
      addressModeW: this._convertAddressMode(texture2.wrapR),
      magFilter: this._convertFilterMode(texture2.magFilter),
      minFilter: this._convertFilterMode(texture2.minFilter),
      mipmapFilter: this._convertFilterMode(texture2.minFilter),
      maxAnisotropy: texture2.anisotropy
    };
    if (texture2.isDepthTexture && texture2.compareFunction !== null) {
      samplerDescriptorGPU.compare = _compareToWebGPU[texture2.compareFunction];
    }
    textureGPU.sampler = device.createSampler(samplerDescriptorGPU);
  }
  createDefaultTexture(texture2) {
    let textureGPU;
    const format3 = getFormat2(texture2);
    if (texture2.isCubeTexture) {
      textureGPU = this._getDefaultCubeTextureGPU(format3);
    } else if (texture2.isVideoTexture) {
      this.backend.get(texture2).externalTexture = this._getDefaultVideoFrame();
    } else {
      textureGPU = this._getDefaultTextureGPU(format3);
    }
    this.backend.get(texture2).texture = textureGPU;
  }
  createTexture(texture2, options = {}) {
    const backend = this.backend;
    const textureData = backend.get(texture2);
    if (textureData.initialized) {
      throw new Error("WebGPUTextureUtils: Texture already initialized.");
    }
    if (options.needsMipmaps === void 0) options.needsMipmaps = false;
    if (options.levels === void 0) options.levels = 1;
    if (options.depth === void 0) options.depth = 1;
    const { width, height, depth: depth2, levels } = options;
    const dimension = this._getDimension(texture2);
    const format3 = texture2.internalFormat || options.format || getFormat2(texture2, backend.device);
    let sampleCount = options.sampleCount !== void 0 ? options.sampleCount : 1;
    sampleCount = backend.utils.getSampleCount(sampleCount);
    const primarySampleCount = texture2.isRenderTargetTexture && !texture2.isMultisampleRenderTargetTexture ? 1 : sampleCount;
    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC;
    if (texture2.isStorageTexture === true) {
      usage |= GPUTextureUsage.STORAGE_BINDING;
    }
    if (texture2.isCompressedTexture !== true && texture2.isCompressedArrayTexture !== true) {
      usage |= GPUTextureUsage.RENDER_ATTACHMENT;
    }
    const textureDescriptorGPU = {
      label: texture2.name,
      size: {
        width,
        height,
        depthOrArrayLayers: depth2
      },
      mipLevelCount: levels,
      sampleCount: primarySampleCount,
      dimension,
      format: format3,
      usage
    };
    if (texture2.isVideoTexture) {
      const video = texture2.source.data;
      const videoFrame = new VideoFrame(video);
      textureDescriptorGPU.size.width = videoFrame.displayWidth;
      textureDescriptorGPU.size.height = videoFrame.displayHeight;
      videoFrame.close();
      textureData.externalTexture = video;
    } else {
      if (format3 === void 0) {
        console.warn("WebGPURenderer: Texture format not supported.");
        return this.createDefaultTexture(texture2);
      }
      textureData.texture = backend.device.createTexture(textureDescriptorGPU);
    }
    if (texture2.isRenderTargetTexture && sampleCount > 1 && !texture2.isMultisampleRenderTargetTexture) {
      const msaaTextureDescriptorGPU = Object.assign({}, textureDescriptorGPU);
      msaaTextureDescriptorGPU.label = msaaTextureDescriptorGPU.label + "-msaa";
      msaaTextureDescriptorGPU.sampleCount = sampleCount;
      textureData.msaaTexture = backend.device.createTexture(msaaTextureDescriptorGPU);
    }
    textureData.initialized = true;
    textureData.textureDescriptorGPU = textureDescriptorGPU;
  }
  destroyTexture(texture2) {
    const backend = this.backend;
    const textureData = backend.get(texture2);
    textureData.texture.destroy();
    if (textureData.msaaTexture !== void 0) textureData.msaaTexture.destroy();
    backend.delete(texture2);
  }
  destroySampler(texture2) {
    const backend = this.backend;
    const textureData = backend.get(texture2);
    delete textureData.sampler;
  }
  generateMipmaps(texture2) {
    const textureData = this.backend.get(texture2);
    if (texture2.isCubeTexture) {
      for (let i2 = 0; i2 < 6; i2++) {
        this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i2);
      }
    } else {
      const depth2 = texture2.image.depth || 1;
      for (let i2 = 0; i2 < depth2; i2++) {
        this._generateMipmaps(textureData.texture, textureData.textureDescriptorGPU, i2);
      }
    }
  }
  getColorBuffer() {
    if (this.colorBuffer) this.colorBuffer.destroy();
    const backend = this.backend;
    const { width, height } = backend.getDrawingBufferSize();
    this.colorBuffer = backend.device.createTexture({
      label: "colorBuffer",
      size: {
        width,
        height,
        depthOrArrayLayers: 1
      },
      sampleCount: backend.utils.getSampleCount(backend.renderer.samples),
      format: backend.utils.getPreferredCanvasFormat(),
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC
    });
    return this.colorBuffer;
  }
  getDepthBuffer(depth2 = true, stencil = false) {
    const backend = this.backend;
    const { width, height } = backend.getDrawingBufferSize();
    const depthTexture = this.depthTexture;
    const depthTextureGPU = backend.get(depthTexture).texture;
    let format3, type;
    if (stencil) {
      format3 = DepthStencilFormat2;
      type = UnsignedInt248Type2;
    } else if (depth2) {
      format3 = DepthFormat2;
      type = UnsignedIntType2;
    }
    if (depthTextureGPU !== void 0) {
      if (depthTexture.image.width === width && depthTexture.image.height === height && depthTexture.format === format3 && depthTexture.type === type) {
        return depthTextureGPU;
      }
      this.destroyTexture(depthTexture);
    }
    depthTexture.name = "depthBuffer";
    depthTexture.format = format3;
    depthTexture.type = type;
    depthTexture.image.width = width;
    depthTexture.image.height = height;
    this.createTexture(depthTexture, { sampleCount: backend.utils.getSampleCount(backend.renderer.samples), width, height });
    return backend.get(depthTexture).texture;
  }
  updateTexture(texture2, options) {
    const textureData = this.backend.get(texture2);
    const { textureDescriptorGPU } = textureData;
    if (texture2.isRenderTargetTexture || textureDescriptorGPU === void 0)
      return;
    if (texture2.isDataTexture) {
      this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture2.flipY);
    } else if (texture2.isDataArrayTexture || texture2.isData3DTexture) {
      for (let i2 = 0; i2 < options.image.depth; i2++) {
        this._copyBufferToTexture(options.image, textureData.texture, textureDescriptorGPU, i2, texture2.flipY, i2);
      }
    } else if (texture2.isCompressedTexture || texture2.isCompressedArrayTexture) {
      this._copyCompressedBufferToTexture(texture2.mipmaps, textureData.texture, textureDescriptorGPU);
    } else if (texture2.isCubeTexture) {
      this._copyCubeMapToTexture(options.images, textureData.texture, textureDescriptorGPU, texture2.flipY);
    } else if (texture2.isVideoTexture) {
      const video = texture2.source.data;
      textureData.externalTexture = video;
    } else {
      this._copyImageToTexture(options.image, textureData.texture, textureDescriptorGPU, 0, texture2.flipY);
    }
    textureData.version = texture2.version;
    if (texture2.onUpdate) texture2.onUpdate(texture2);
  }
  async copyTextureToBuffer(texture2, x2, y2, width, height) {
    const device = this.backend.device;
    const textureData = this.backend.get(texture2);
    const textureGPU = textureData.texture;
    const format3 = textureData.textureDescriptorGPU.format;
    const bytesPerTexel = this._getBytesPerTexel(format3);
    let bytesPerRow = width * bytesPerTexel;
    bytesPerRow = Math.ceil(bytesPerRow / 256) * 256;
    const readBuffer = device.createBuffer(
      {
        size: width * height * bytesPerTexel,
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
      }
    );
    const encoder = device.createCommandEncoder();
    encoder.copyTextureToBuffer(
      {
        texture: textureGPU,
        origin: { x: x2, y: y2 }
      },
      {
        buffer: readBuffer,
        bytesPerRow
      },
      {
        width,
        height
      }
    );
    const typedArrayType = this._getTypedArrayType(format3);
    device.queue.submit([encoder.finish()]);
    await readBuffer.mapAsync(GPUMapMode.READ);
    const buffer2 = readBuffer.getMappedRange();
    return new typedArrayType(buffer2);
  }
  _isEnvironmentTexture(texture2) {
    const mapping = texture2.mapping;
    return mapping === EquirectangularReflectionMapping2 || mapping === EquirectangularRefractionMapping2 || (mapping === CubeReflectionMapping2 || mapping === CubeRefractionMapping2);
  }
  _getDefaultTextureGPU(format3) {
    let defaultTexture = this.defaultTexture[format3];
    if (defaultTexture === void 0) {
      const texture2 = new Texture2();
      texture2.minFilter = NearestFilter2;
      texture2.magFilter = NearestFilter2;
      this.createTexture(texture2, { width: 1, height: 1, format: format3 });
      this.defaultTexture[format3] = defaultTexture = texture2;
    }
    return this.backend.get(defaultTexture).texture;
  }
  _getDefaultCubeTextureGPU(format3) {
    let defaultCubeTexture = this.defaultTexture[format3];
    if (defaultCubeTexture === void 0) {
      const texture2 = new CubeTexture2();
      texture2.minFilter = NearestFilter2;
      texture2.magFilter = NearestFilter2;
      this.createTexture(texture2, { width: 1, height: 1, depth: 6 });
      this.defaultCubeTexture[format3] = defaultCubeTexture = texture2;
    }
    return this.backend.get(defaultCubeTexture).texture;
  }
  _getDefaultVideoFrame() {
    let defaultVideoFrame = this.defaultVideoFrame;
    if (defaultVideoFrame === null) {
      const init20 = {
        timestamp: 0,
        codedWidth: 1,
        codedHeight: 1,
        format: "RGBA"
      };
      this.defaultVideoFrame = defaultVideoFrame = new VideoFrame(new Uint8Array([0, 0, 0, 255]), init20);
    }
    return defaultVideoFrame;
  }
  _copyCubeMapToTexture(images, textureGPU, textureDescriptorGPU, flipY) {
    for (let i2 = 0; i2 < 6; i2++) {
      const image = images[i2];
      const flipIndex = flipY === true ? _flipMap[i2] : i2;
      if (image.isDataTexture) {
        this._copyBufferToTexture(image.image, textureGPU, textureDescriptorGPU, flipIndex, flipY);
      } else {
        this._copyImageToTexture(image, textureGPU, textureDescriptorGPU, flipIndex, flipY);
      }
    }
  }
  _copyImageToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY) {
    const device = this.backend.device;
    device.queue.copyExternalImageToTexture(
      {
        source: image
      },
      {
        texture: textureGPU,
        mipLevel: 0,
        origin: { x: 0, y: 0, z: originDepth }
      },
      {
        width: image.width,
        height: image.height,
        depthOrArrayLayers: 1
      }
    );
    if (flipY === true) {
      this._flipY(textureGPU, textureDescriptorGPU, originDepth);
    }
  }
  _getPassUtils() {
    let passUtils = this._passUtils;
    if (passUtils === null) {
      this._passUtils = passUtils = new WebGPUTexturePassUtils(this.backend.device);
    }
    return passUtils;
  }
  _generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer = 0) {
    this._getPassUtils().generateMipmaps(textureGPU, textureDescriptorGPU, baseArrayLayer);
  }
  _flipY(textureGPU, textureDescriptorGPU, originDepth = 0) {
    this._getPassUtils().flipY(textureGPU, textureDescriptorGPU, originDepth);
  }
  _copyBufferToTexture(image, textureGPU, textureDescriptorGPU, originDepth, flipY, depth2 = 0) {
    const device = this.backend.device;
    const data = image.data;
    const bytesPerTexel = this._getBytesPerTexel(textureDescriptorGPU.format);
    const bytesPerRow = image.width * bytesPerTexel;
    device.queue.writeTexture(
      {
        texture: textureGPU,
        mipLevel: 0,
        origin: { x: 0, y: 0, z: originDepth }
      },
      data,
      {
        offset: image.width * image.height * bytesPerTexel * depth2,
        bytesPerRow
      },
      {
        width: image.width,
        height: image.height,
        depthOrArrayLayers: 1
      }
    );
    if (flipY === true) {
      this._flipY(textureGPU, textureDescriptorGPU, originDepth);
    }
  }
  _copyCompressedBufferToTexture(mipmaps, textureGPU, textureDescriptorGPU) {
    const device = this.backend.device;
    const blockData = this._getBlockData(textureDescriptorGPU.format);
    const isTextureArray = textureDescriptorGPU.size.depthOrArrayLayers > 1;
    for (let i2 = 0; i2 < mipmaps.length; i2++) {
      const mipmap = mipmaps[i2];
      const width = mipmap.width;
      const height = mipmap.height;
      const depth2 = isTextureArray ? textureDescriptorGPU.size.depthOrArrayLayers : 1;
      const bytesPerRow = Math.ceil(width / blockData.width) * blockData.byteLength;
      const bytesPerImage = bytesPerRow * Math.ceil(height / blockData.height);
      for (let j2 = 0; j2 < depth2; j2++) {
        device.queue.writeTexture(
          {
            texture: textureGPU,
            mipLevel: i2,
            origin: { x: 0, y: 0, z: j2 }
          },
          mipmap.data,
          {
            offset: j2 * bytesPerImage,
            bytesPerRow,
            rowsPerImage: Math.ceil(height / blockData.height)
          },
          {
            width: Math.ceil(width / blockData.width) * blockData.width,
            height: Math.ceil(height / blockData.height) * blockData.height,
            depthOrArrayLayers: 1
          }
        );
      }
    }
  }
  _getBlockData(format3) {
    if (format3 === GPUTextureFormat.BC1RGBAUnorm || format3 === GPUTextureFormat.BC1RGBAUnormSRGB) return { byteLength: 8, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.BC2RGBAUnorm || format3 === GPUTextureFormat.BC2RGBAUnormSRGB) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.BC3RGBAUnorm || format3 === GPUTextureFormat.BC3RGBAUnormSRGB) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.BC4RUnorm || format3 === GPUTextureFormat.BC4RSNorm) return { byteLength: 8, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.BC5RGUnorm || format3 === GPUTextureFormat.BC5RGSnorm) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.BC6HRGBUFloat || format3 === GPUTextureFormat.BC6HRGBFloat) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.BC7RGBAUnorm || format3 === GPUTextureFormat.BC7RGBAUnormSRGB) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.ETC2RGB8Unorm || format3 === GPUTextureFormat.ETC2RGB8UnormSRGB) return { byteLength: 8, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.ETC2RGB8A1Unorm || format3 === GPUTextureFormat.ETC2RGB8A1UnormSRGB) return { byteLength: 8, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.ETC2RGBA8Unorm || format3 === GPUTextureFormat.ETC2RGBA8UnormSRGB) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.EACR11Unorm) return { byteLength: 8, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.EACR11Snorm) return { byteLength: 8, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.EACRG11Unorm) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.EACRG11Snorm) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.ASTC4x4Unorm || format3 === GPUTextureFormat.ASTC4x4UnormSRGB) return { byteLength: 16, width: 4, height: 4 };
    if (format3 === GPUTextureFormat.ASTC5x4Unorm || format3 === GPUTextureFormat.ASTC5x4UnormSRGB) return { byteLength: 16, width: 5, height: 4 };
    if (format3 === GPUTextureFormat.ASTC5x5Unorm || format3 === GPUTextureFormat.ASTC5x5UnormSRGB) return { byteLength: 16, width: 5, height: 5 };
    if (format3 === GPUTextureFormat.ASTC6x5Unorm || format3 === GPUTextureFormat.ASTC6x5UnormSRGB) return { byteLength: 16, width: 6, height: 5 };
    if (format3 === GPUTextureFormat.ASTC6x6Unorm || format3 === GPUTextureFormat.ASTC6x6UnormSRGB) return { byteLength: 16, width: 6, height: 6 };
    if (format3 === GPUTextureFormat.ASTC8x5Unorm || format3 === GPUTextureFormat.ASTC8x5UnormSRGB) return { byteLength: 16, width: 8, height: 5 };
    if (format3 === GPUTextureFormat.ASTC8x6Unorm || format3 === GPUTextureFormat.ASTC8x6UnormSRGB) return { byteLength: 16, width: 8, height: 6 };
    if (format3 === GPUTextureFormat.ASTC8x8Unorm || format3 === GPUTextureFormat.ASTC8x8UnormSRGB) return { byteLength: 16, width: 8, height: 8 };
    if (format3 === GPUTextureFormat.ASTC10x5Unorm || format3 === GPUTextureFormat.ASTC10x5UnormSRGB) return { byteLength: 16, width: 10, height: 5 };
    if (format3 === GPUTextureFormat.ASTC10x6Unorm || format3 === GPUTextureFormat.ASTC10x6UnormSRGB) return { byteLength: 16, width: 10, height: 6 };
    if (format3 === GPUTextureFormat.ASTC10x8Unorm || format3 === GPUTextureFormat.ASTC10x8UnormSRGB) return { byteLength: 16, width: 10, height: 8 };
    if (format3 === GPUTextureFormat.ASTC10x10Unorm || format3 === GPUTextureFormat.ASTC10x10UnormSRGB) return { byteLength: 16, width: 10, height: 10 };
    if (format3 === GPUTextureFormat.ASTC12x10Unorm || format3 === GPUTextureFormat.ASTC12x10UnormSRGB) return { byteLength: 16, width: 12, height: 10 };
    if (format3 === GPUTextureFormat.ASTC12x12Unorm || format3 === GPUTextureFormat.ASTC12x12UnormSRGB) return { byteLength: 16, width: 12, height: 12 };
  }
  _convertAddressMode(value) {
    let addressMode = GPUAddressMode.ClampToEdge;
    if (value === RepeatWrapping2) {
      addressMode = GPUAddressMode.Repeat;
    } else if (value === MirroredRepeatWrapping2) {
      addressMode = GPUAddressMode.MirrorRepeat;
    }
    return addressMode;
  }
  _convertFilterMode(value) {
    let filterMode = GPUFilterMode.Linear;
    if (value === NearestFilter2 || value === NearestMipmapNearestFilter2 || value === NearestMipmapLinearFilter2) {
      filterMode = GPUFilterMode.Nearest;
    }
    return filterMode;
  }
  _getBytesPerTexel(format3) {
    if (format3 === GPUTextureFormat.R8Unorm || format3 === GPUTextureFormat.R8Snorm || format3 === GPUTextureFormat.R8Uint || format3 === GPUTextureFormat.R8Sint) return 1;
    if (format3 === GPUTextureFormat.R16Uint || format3 === GPUTextureFormat.R16Sint || format3 === GPUTextureFormat.R16Float || format3 === GPUTextureFormat.RG8Unorm || format3 === GPUTextureFormat.RG8Snorm || format3 === GPUTextureFormat.RG8Uint || format3 === GPUTextureFormat.RG8Sint) return 2;
    if (format3 === GPUTextureFormat.R32Uint || format3 === GPUTextureFormat.R32Sint || format3 === GPUTextureFormat.R32Float || format3 === GPUTextureFormat.RG16Uint || format3 === GPUTextureFormat.RG16Sint || format3 === GPUTextureFormat.RG16Float || format3 === GPUTextureFormat.RGBA8Unorm || format3 === GPUTextureFormat.RGBA8UnormSRGB || format3 === GPUTextureFormat.RGBA8Snorm || format3 === GPUTextureFormat.RGBA8Uint || format3 === GPUTextureFormat.RGBA8Sint || format3 === GPUTextureFormat.BGRA8Unorm || format3 === GPUTextureFormat.BGRA8UnormSRGB || // Packed 32-bit formats
    format3 === GPUTextureFormat.RGB9E5UFloat || format3 === GPUTextureFormat.RGB10A2Unorm || format3 === GPUTextureFormat.RG11B10UFloat || format3 === GPUTextureFormat.Depth32Float || format3 === GPUTextureFormat.Depth24Plus || format3 === GPUTextureFormat.Depth24PlusStencil8 || format3 === GPUTextureFormat.Depth32FloatStencil8) return 4;
    if (format3 === GPUTextureFormat.RG32Uint || format3 === GPUTextureFormat.RG32Sint || format3 === GPUTextureFormat.RG32Float || format3 === GPUTextureFormat.RGBA16Uint || format3 === GPUTextureFormat.RGBA16Sint || format3 === GPUTextureFormat.RGBA16Float) return 8;
    if (format3 === GPUTextureFormat.RGBA32Uint || format3 === GPUTextureFormat.RGBA32Sint || format3 === GPUTextureFormat.RGBA32Float) return 16;
  }
  _getTypedArrayType(format3) {
    if (format3 === GPUTextureFormat.R8Uint) return Uint8Array;
    if (format3 === GPUTextureFormat.R8Sint) return Int8Array;
    if (format3 === GPUTextureFormat.R8Unorm) return Uint8Array;
    if (format3 === GPUTextureFormat.R8Snorm) return Int8Array;
    if (format3 === GPUTextureFormat.RG8Uint) return Uint8Array;
    if (format3 === GPUTextureFormat.RG8Sint) return Int8Array;
    if (format3 === GPUTextureFormat.RG8Unorm) return Uint8Array;
    if (format3 === GPUTextureFormat.RG8Snorm) return Int8Array;
    if (format3 === GPUTextureFormat.RGBA8Uint) return Uint8Array;
    if (format3 === GPUTextureFormat.RGBA8Sint) return Int8Array;
    if (format3 === GPUTextureFormat.RGBA8Unorm) return Uint8Array;
    if (format3 === GPUTextureFormat.RGBA8Snorm) return Int8Array;
    if (format3 === GPUTextureFormat.R16Uint) return Uint16Array;
    if (format3 === GPUTextureFormat.R16Sint) return Int16Array;
    if (format3 === GPUTextureFormat.RG16Uint) return Uint16Array;
    if (format3 === GPUTextureFormat.RG16Sint) return Int16Array;
    if (format3 === GPUTextureFormat.RGBA16Uint) return Uint16Array;
    if (format3 === GPUTextureFormat.RGBA16Sint) return Int16Array;
    if (format3 === GPUTextureFormat.R16Float) return Float32Array;
    if (format3 === GPUTextureFormat.RG16Float) return Float32Array;
    if (format3 === GPUTextureFormat.RGBA16Float) return Float32Array;
    if (format3 === GPUTextureFormat.R32Uint) return Uint32Array;
    if (format3 === GPUTextureFormat.R32Sint) return Int32Array;
    if (format3 === GPUTextureFormat.R32Float) return Float32Array;
    if (format3 === GPUTextureFormat.RG32Uint) return Uint32Array;
    if (format3 === GPUTextureFormat.RG32Sint) return Int32Array;
    if (format3 === GPUTextureFormat.RG32Float) return Float32Array;
    if (format3 === GPUTextureFormat.RGBA32Uint) return Uint32Array;
    if (format3 === GPUTextureFormat.RGBA32Sint) return Int32Array;
    if (format3 === GPUTextureFormat.RGBA32Float) return Float32Array;
    if (format3 === GPUTextureFormat.BGRA8Unorm) return Uint8Array;
    if (format3 === GPUTextureFormat.BGRA8UnormSRGB) return Uint8Array;
    if (format3 === GPUTextureFormat.RGB10A2Unorm) return Uint32Array;
    if (format3 === GPUTextureFormat.RGB9E5UFloat) return Uint32Array;
    if (format3 === GPUTextureFormat.RG11B10UFloat) return Uint32Array;
    if (format3 === GPUTextureFormat.Depth32Float) return Float32Array;
    if (format3 === GPUTextureFormat.Depth24Plus) return Uint32Array;
    if (format3 === GPUTextureFormat.Depth24PlusStencil8) return Uint32Array;
    if (format3 === GPUTextureFormat.Depth32FloatStencil8) return Float32Array;
  }
  _getDimension(texture2) {
    let dimension;
    if (texture2.isData3DTexture) {
      dimension = GPUTextureDimension.ThreeD;
    } else {
      dimension = GPUTextureDimension.TwoD;
    }
    return dimension;
  }
};
function getFormat2(texture2, device = null) {
  const format3 = texture2.format;
  const type = texture2.type;
  const colorSpace = texture2.colorSpace;
  let formatGPU;
  if (texture2.isFramebufferTexture === true && texture2.type === UnsignedByteType2) {
    formatGPU = GPUTextureFormat.BGRA8Unorm;
  } else if (texture2.isCompressedTexture === true || texture2.isCompressedArrayTexture === true) {
    switch (format3) {
      case RGBA_S3TC_DXT1_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.BC1RGBAUnormSRGB : GPUTextureFormat.BC1RGBAUnorm;
        break;
      case RGBA_S3TC_DXT3_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.BC2RGBAUnormSRGB : GPUTextureFormat.BC2RGBAUnorm;
        break;
      case RGBA_S3TC_DXT5_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.BC3RGBAUnormSRGB : GPUTextureFormat.BC3RGBAUnorm;
        break;
      case RGB_ETC2_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ETC2RGB8UnormSRGB : GPUTextureFormat.ETC2RGB8Unorm;
        break;
      case RGBA_ETC2_EAC_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ETC2RGBA8UnormSRGB : GPUTextureFormat.ETC2RGBA8Unorm;
        break;
      case RGBA_ASTC_4x4_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC4x4UnormSRGB : GPUTextureFormat.ASTC4x4Unorm;
        break;
      case RGBA_ASTC_5x4_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC5x4UnormSRGB : GPUTextureFormat.ASTC5x4Unorm;
        break;
      case RGBA_ASTC_5x5_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC5x5UnormSRGB : GPUTextureFormat.ASTC5x5Unorm;
        break;
      case RGBA_ASTC_6x5_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC6x5UnormSRGB : GPUTextureFormat.ASTC6x5Unorm;
        break;
      case RGBA_ASTC_6x6_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC6x6UnormSRGB : GPUTextureFormat.ASTC6x6Unorm;
        break;
      case RGBA_ASTC_8x5_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC8x5UnormSRGB : GPUTextureFormat.ASTC8x5Unorm;
        break;
      case RGBA_ASTC_8x6_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC8x6UnormSRGB : GPUTextureFormat.ASTC8x6Unorm;
        break;
      case RGBA_ASTC_8x8_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC8x8UnormSRGB : GPUTextureFormat.ASTC8x8Unorm;
        break;
      case RGBA_ASTC_10x5_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC10x5UnormSRGB : GPUTextureFormat.ASTC10x5Unorm;
        break;
      case RGBA_ASTC_10x6_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC10x6UnormSRGB : GPUTextureFormat.ASTC10x6Unorm;
        break;
      case RGBA_ASTC_10x8_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC10x8UnormSRGB : GPUTextureFormat.ASTC10x8Unorm;
        break;
      case RGBA_ASTC_10x10_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC10x10UnormSRGB : GPUTextureFormat.ASTC10x10Unorm;
        break;
      case RGBA_ASTC_12x10_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC12x10UnormSRGB : GPUTextureFormat.ASTC12x10Unorm;
        break;
      case RGBA_ASTC_12x12_Format2:
        formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.ASTC12x12UnormSRGB : GPUTextureFormat.ASTC12x12Unorm;
        break;
      default:
        console.error("WebGPURenderer: Unsupported texture format.", format3);
    }
  } else {
    switch (format3) {
      case RGBAFormat2:
        switch (type) {
          case ByteType2:
            formatGPU = GPUTextureFormat.RGBA8Snorm;
            break;
          case ShortType2:
            formatGPU = GPUTextureFormat.RGBA16Sint;
            break;
          case UnsignedShortType2:
            formatGPU = GPUTextureFormat.RGBA16Uint;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.RGBA32Uint;
            break;
          case IntType2:
            formatGPU = GPUTextureFormat.RGBA32Sint;
            break;
          case UnsignedByteType2:
            formatGPU = colorSpace === SRGBColorSpace2 ? GPUTextureFormat.RGBA8UnormSRGB : GPUTextureFormat.RGBA8Unorm;
            break;
          case HalfFloatType2:
            formatGPU = GPUTextureFormat.RGBA16Float;
            break;
          case FloatType2:
            formatGPU = GPUTextureFormat.RGBA32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.", type);
        }
        break;
      case RGBFormat2:
        switch (type) {
          case UnsignedInt5999Type2:
            formatGPU = GPUTextureFormat.RGB9E5UFloat;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGBFormat.", type);
        }
        break;
      case RedFormat2:
        switch (type) {
          case ByteType2:
            formatGPU = GPUTextureFormat.R8Snorm;
            break;
          case ShortType2:
            formatGPU = GPUTextureFormat.R16Sint;
            break;
          case UnsignedShortType2:
            formatGPU = GPUTextureFormat.R16Uint;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.R32Uint;
            break;
          case IntType2:
            formatGPU = GPUTextureFormat.R32Sint;
            break;
          case UnsignedByteType2:
            formatGPU = GPUTextureFormat.R8Unorm;
            break;
          case HalfFloatType2:
            formatGPU = GPUTextureFormat.R16Float;
            break;
          case FloatType2:
            formatGPU = GPUTextureFormat.R32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RedFormat.", type);
        }
        break;
      case RGFormat2:
        switch (type) {
          case ByteType2:
            formatGPU = GPUTextureFormat.RG8Snorm;
            break;
          case ShortType2:
            formatGPU = GPUTextureFormat.RG16Sint;
            break;
          case UnsignedShortType2:
            formatGPU = GPUTextureFormat.RG16Uint;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.RG32Uint;
            break;
          case IntType2:
            formatGPU = GPUTextureFormat.RG32Sint;
            break;
          case UnsignedByteType2:
            formatGPU = GPUTextureFormat.RG8Unorm;
            break;
          case HalfFloatType2:
            formatGPU = GPUTextureFormat.RG16Float;
            break;
          case FloatType2:
            formatGPU = GPUTextureFormat.RG32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGFormat.", type);
        }
        break;
      case DepthFormat2:
        switch (type) {
          case UnsignedShortType2:
            formatGPU = GPUTextureFormat.Depth16Unorm;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.Depth24Plus;
            break;
          case FloatType2:
            formatGPU = GPUTextureFormat.Depth32Float;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with DepthFormat.", type);
        }
        break;
      case DepthStencilFormat2:
        switch (type) {
          case UnsignedInt248Type2:
            formatGPU = GPUTextureFormat.Depth24PlusStencil8;
            break;
          case FloatType2:
            if (device && device.features.has(GPUFeatureName.Depth32FloatStencil8) === false) {
              console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.');
            }
            formatGPU = GPUTextureFormat.Depth32FloatStencil8;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.", type);
        }
        break;
      case RedIntegerFormat2:
        switch (type) {
          case IntType2:
            formatGPU = GPUTextureFormat.R32Sint;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.R32Uint;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.", type);
        }
        break;
      case RGIntegerFormat2:
        switch (type) {
          case IntType2:
            formatGPU = GPUTextureFormat.RG32Sint;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.RG32Uint;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.", type);
        }
        break;
      case RGBAIntegerFormat2:
        switch (type) {
          case IntType2:
            formatGPU = GPUTextureFormat.RGBA32Sint;
            break;
          case UnsignedIntType2:
            formatGPU = GPUTextureFormat.RGBA32Uint;
            break;
          default:
            console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.", type);
        }
        break;
      default:
        console.error("WebGPURenderer: Unsupported texture format.", format3);
    }
  }
  return formatGPU;
}
var declarationRegexp = /^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i;
var propertiesRegexp = /([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/ig;
var wgslTypeLib$1 = {
  "f32": "float",
  "i32": "int",
  "u32": "uint",
  "bool": "bool",
  "vec2<f32>": "vec2",
  "vec2<i32>": "ivec2",
  "vec2<u32>": "uvec2",
  "vec2<bool>": "bvec2",
  "vec2f": "vec2",
  "vec2i": "ivec2",
  "vec2u": "uvec2",
  "vec2b": "bvec2",
  "vec3<f32>": "vec3",
  "vec3<i32>": "ivec3",
  "vec3<u32>": "uvec3",
  "vec3<bool>": "bvec3",
  "vec3f": "vec3",
  "vec3i": "ivec3",
  "vec3u": "uvec3",
  "vec3b": "bvec3",
  "vec4<f32>": "vec4",
  "vec4<i32>": "ivec4",
  "vec4<u32>": "uvec4",
  "vec4<bool>": "bvec4",
  "vec4f": "vec4",
  "vec4i": "ivec4",
  "vec4u": "uvec4",
  "vec4b": "bvec4",
  "mat2x2<f32>": "mat2",
  "mat2x2f": "mat2",
  "mat3x3<f32>": "mat3",
  "mat3x3f": "mat3",
  "mat4x4<f32>": "mat4",
  "mat4x4f": "mat4",
  "sampler": "sampler",
  "texture_1d": "texture",
  "texture_2d": "texture",
  "texture_2d_array": "texture",
  "texture_multisampled_2d": "cubeTexture",
  "texture_depth_2d": "depthTexture",
  "texture_3d": "texture3D",
  "texture_cube": "cubeTexture",
  "texture_cube_array": "cubeTexture",
  "texture_storage_1d": "storageTexture",
  "texture_storage_2d": "storageTexture",
  "texture_storage_2d_array": "storageTexture",
  "texture_storage_3d": "storageTexture"
};
var parse = (source) => {
  source = source.trim();
  const declaration = source.match(declarationRegexp);
  if (declaration !== null && declaration.length === 4) {
    const inputsCode = declaration[2];
    const propsMatches = [];
    let match = null;
    while ((match = propertiesRegexp.exec(inputsCode)) !== null) {
      propsMatches.push({ name: match[1], type: match[2] });
    }
    const inputs = [];
    for (let i2 = 0; i2 < propsMatches.length; i2++) {
      const { name: name2, type: type2 } = propsMatches[i2];
      let resolvedType = type2;
      if (resolvedType.startsWith("texture")) {
        resolvedType = type2.split("<")[0];
      }
      resolvedType = wgslTypeLib$1[resolvedType] || resolvedType;
      inputs.push(new NodeFunctionInput(resolvedType, name2));
    }
    const blockCode = source.substring(declaration[0].length);
    const outputType = declaration[3] || "void";
    const name = declaration[1] !== void 0 ? declaration[1] : "";
    const type = wgslTypeLib$1[outputType] || outputType;
    return {
      type,
      inputs,
      name,
      inputsCode,
      blockCode,
      outputType
    };
  } else {
    throw new Error("FunctionNode: Function is not a WGSL code.");
  }
};
var WGSLNodeFunction = class extends NodeFunction {
  constructor(source) {
    const { type, inputs, name, inputsCode, blockCode, outputType } = parse(source);
    super(type, inputs, name);
    this.inputsCode = inputsCode;
    this.blockCode = blockCode;
    this.outputType = outputType;
  }
  getCode(name = this.name) {
    const outputType = this.outputType !== "void" ? "-> " + this.outputType : "";
    return `fn ${name} ( ${this.inputsCode.trim()} ) ${outputType}` + this.blockCode;
  }
};
var WGSLNodeParser = class extends NodeParser {
  parseFunction(source) {
    return new WGSLNodeFunction(source);
  }
};
var GPUShaderStage = self.GPUShaderStage;
var gpuShaderStageLib = {
  "vertex": GPUShaderStage ? GPUShaderStage.VERTEX : 1,
  "fragment": GPUShaderStage ? GPUShaderStage.FRAGMENT : 2,
  "compute": GPUShaderStage ? GPUShaderStage.COMPUTE : 4
};
var supports = {
  instance: true,
  swizzleAssign: false,
  storageBuffer: true
};
var wgslFnOpLib = {
  "^^": "tsl_xor"
};
var wgslTypeLib = {
  float: "f32",
  int: "i32",
  uint: "u32",
  bool: "bool",
  color: "vec3<f32>",
  vec2: "vec2<f32>",
  ivec2: "vec2<i32>",
  uvec2: "vec2<u32>",
  bvec2: "vec2<bool>",
  vec3: "vec3<f32>",
  ivec3: "vec3<i32>",
  uvec3: "vec3<u32>",
  bvec3: "vec3<bool>",
  vec4: "vec4<f32>",
  ivec4: "vec4<i32>",
  uvec4: "vec4<u32>",
  bvec4: "vec4<bool>",
  mat2: "mat2x2<f32>",
  imat2: "mat2x2<i32>",
  umat2: "mat2x2<u32>",
  bmat2: "mat2x2<bool>",
  mat3: "mat3x3<f32>",
  imat3: "mat3x3<i32>",
  umat3: "mat3x3<u32>",
  bmat3: "mat3x3<bool>",
  mat4: "mat4x4<f32>",
  imat4: "mat4x4<i32>",
  umat4: "mat4x4<u32>",
  bmat4: "mat4x4<bool>"
};
var wgslPolyfill = {
  tsl_xor: new CodeNode("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),
  mod_float: new CodeNode("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),
  mod_vec2: new CodeNode("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),
  mod_vec3: new CodeNode("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),
  mod_vec4: new CodeNode("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),
  equals_bool: new CodeNode("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),
  equals_bvec2: new CodeNode("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),
  equals_bvec3: new CodeNode("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),
  equals_bvec4: new CodeNode("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),
  repeatWrapping: new CodeNode(`
fn tsl_repeatWrapping( uv : vec2<f32>, dimension : vec2<u32> ) -> vec2<u32> {

	let uvScaled = vec2<u32>( uv * vec2<f32>( dimension ) );

	return ( ( uvScaled % dimension ) + dimension ) % dimension;

}
`),
  biquadraticTexture: new CodeNode(`
fn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, level : i32 ) -> vec4f {

	let res = vec2f( textureDimensions( map, level ) );

	let uvScaled = coord * res;
	let uvWrapping = ( ( uvScaled % res ) + res ) % res;

	// https://www.shadertoy.com/view/WtyXRy

	let uv = uvWrapping - 0.5;
	let iuv = floor( uv );
	let f = fract( uv );

	let rg1 = textureLoad( map, vec2i( iuv + vec2( 0.5, 0.5 ) ), level );
	let rg2 = textureLoad( map, vec2i( iuv + vec2( 1.5, 0.5 ) ), level );
	let rg3 = textureLoad( map, vec2i( iuv + vec2( 0.5, 1.5 ) ), level );
	let rg4 = textureLoad( map, vec2i( iuv + vec2( 1.5, 1.5 ) ), level );

	return mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );

}
`)
};
var wgslMethods = {
  dFdx: "dpdx",
  dFdy: "- dpdy",
  mod_float: "tsl_mod_float",
  mod_vec2: "tsl_mod_vec2",
  mod_vec3: "tsl_mod_vec3",
  mod_vec4: "tsl_mod_vec4",
  equals_bool: "tsl_equals_bool",
  equals_bvec2: "tsl_equals_bvec2",
  equals_bvec3: "tsl_equals_bvec3",
  equals_bvec4: "tsl_equals_bvec4",
  inversesqrt: "inverseSqrt",
  bitcast: "bitcast<f32>"
};
if (/Windows/g.test(navigator.userAgent)) {
  wgslPolyfill.pow_float = new CodeNode("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }");
  wgslPolyfill.pow_vec2 = new CodeNode("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }", [wgslPolyfill.pow_float]);
  wgslPolyfill.pow_vec3 = new CodeNode("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }", [wgslPolyfill.pow_float]);
  wgslPolyfill.pow_vec4 = new CodeNode("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }", [wgslPolyfill.pow_float]);
  wgslMethods.pow_float = "tsl_pow_float";
  wgslMethods.pow_vec2 = "tsl_pow_vec2";
  wgslMethods.pow_vec3 = "tsl_pow_vec3";
  wgslMethods.pow_vec4 = "tsl_pow_vec4";
}
var WGSLNodeBuilder = class extends NodeBuilder {
  constructor(object2, renderer3) {
    super(object2, renderer3, new WGSLNodeParser());
    this.uniformGroups = {};
    this.builtins = {};
    this.directives = {};
  }
  needsToWorkingColorSpace(texture2) {
    return texture2.isVideoTexture === true && texture2.colorSpace !== NoColorSpace2;
  }
  _generateTextureSample(texture2, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      if (depthSnippet) {
        return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${depthSnippet} )`;
      } else {
        return `textureSample( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet} )`;
      }
    } else if (this.isFilteredTexture(texture2)) {
      return this.generateFilteredTexture(texture2, textureProperty, uvSnippet);
    } else {
      return this.generateTextureLod(texture2, textureProperty, uvSnippet, "0");
    }
  }
  _generateVideoSample(textureProperty, uvSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      return `textureSampleBaseClampToEdge( ${textureProperty}, ${textureProperty}_sampler, vec2<f32>( ${uvSnippet}.x, 1.0 - ${uvSnippet}.y ) )`;
    } else {
      console.error(`WebGPURenderer: THREE.VideoTexture does not support ${shaderStage} shader.`);
    }
  }
  _generateTextureSampleLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment" && this.isUnfilterable(texture2) === false) {
      return `textureSampleLevel( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${levelSnippet} )`;
    } else if (this.isFilteredTexture(texture2)) {
      return this.generateFilteredTexture(texture2, textureProperty, uvSnippet, levelSnippet);
    } else {
      return this.generateTextureLod(texture2, textureProperty, uvSnippet, levelSnippet);
    }
  }
  generateFilteredTexture(texture2, textureProperty, uvSnippet, levelSnippet = "0") {
    this._include("biquadraticTexture");
    return `tsl_biquadraticTexture( ${textureProperty}, ${uvSnippet}, i32( ${levelSnippet} ) )`;
  }
  generateTextureLod(texture2, textureProperty, uvSnippet, levelSnippet = "0") {
    this._include("repeatWrapping");
    const dimension = texture2.isMultisampleRenderTargetTexture === true ? `textureDimensions( ${textureProperty} )` : `textureDimensions( ${textureProperty}, 0 )`;
    return `textureLoad( ${textureProperty}, tsl_repeatWrapping( ${uvSnippet}, ${dimension} ), i32( ${levelSnippet} ) )`;
  }
  generateTextureLoad(texture2, textureProperty, uvIndexSnippet, depthSnippet, levelSnippet = "0u") {
    if (depthSnippet) {
      return `textureLoad( ${textureProperty}, ${uvIndexSnippet}, ${depthSnippet}, ${levelSnippet} )`;
    } else {
      return `textureLoad( ${textureProperty}, ${uvIndexSnippet}, ${levelSnippet} )`;
    }
  }
  generateTextureStore(texture2, textureProperty, uvIndexSnippet, valueSnippet) {
    return `textureStore( ${textureProperty}, ${uvIndexSnippet}, ${valueSnippet} )`;
  }
  isUnfilterable(texture2) {
    return this.getComponentTypeFromTexture(texture2) !== "float" || !this.isAvailable("float32Filterable") && texture2.isDataTexture === true && texture2.type === FloatType2 || texture2.isMultisampleRenderTargetTexture === true;
  }
  generateTexture(texture2, textureProperty, uvSnippet, depthSnippet, shaderStage = this.shaderStage) {
    let snippet = null;
    if (texture2.isVideoTexture === true) {
      snippet = this._generateVideoSample(textureProperty, uvSnippet, shaderStage);
    } else if (this.isUnfilterable(texture2)) {
      snippet = this.generateTextureLod(texture2, textureProperty, uvSnippet, "0", depthSnippet, shaderStage);
    } else {
      snippet = this._generateTextureSample(texture2, textureProperty, uvSnippet, depthSnippet, shaderStage);
    }
    return snippet;
  }
  generateTextureGrad(texture2, textureProperty, uvSnippet, gradSnippet, depthSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      return `textureSampleGrad( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet},  ${gradSnippet[0]}, ${gradSnippet[1]} )`;
    } else {
      console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${shaderStage} shader.`);
    }
  }
  generateTextureCompare(texture2, textureProperty, uvSnippet, compareSnippet, depthSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      return `textureSampleCompare( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${compareSnippet} )`;
    } else {
      console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${shaderStage} shader.`);
    }
  }
  generateTextureLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage = this.shaderStage) {
    let snippet = null;
    if (texture2.isVideoTexture === true) {
      snippet = this._generateVideoSample(textureProperty, uvSnippet, shaderStage);
    } else {
      snippet = this._generateTextureSampleLevel(texture2, textureProperty, uvSnippet, levelSnippet, depthSnippet, shaderStage);
    }
    return snippet;
  }
  generateTextureBias(texture2, textureProperty, uvSnippet, biasSnippet, depthSnippet, shaderStage = this.shaderStage) {
    if (shaderStage === "fragment") {
      return `textureSampleBias( ${textureProperty}, ${textureProperty}_sampler, ${uvSnippet}, ${biasSnippet} )`;
    } else {
      console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${shaderStage} shader.`);
    }
  }
  getPropertyName(node, shaderStage = this.shaderStage) {
    if (node.isNodeVarying === true && node.needsInterpolation === true) {
      if (shaderStage === "vertex") {
        return `varyings.${node.name}`;
      }
    } else if (node.isNodeUniform === true) {
      const name = node.name;
      const type = node.type;
      if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") {
        return name;
      } else if (type === "buffer" || type === "storageBuffer") {
        return `NodeBuffer_${node.id}.${name}`;
      } else {
        return node.groupNode.name + "." + name;
      }
    }
    return super.getPropertyName(node);
  }
  getOutputStructName() {
    return "output";
  }
  _getUniformGroupCount(shaderStage) {
    return Object.keys(this.uniforms[shaderStage]).length;
  }
  getFunctionOperator(op) {
    const fnOp = wgslFnOpLib[op];
    if (fnOp !== void 0) {
      this._include(fnOp);
      return fnOp;
    }
    return null;
  }
  getStorageAccess(node) {
    if (node.isStorageTextureNode) {
      switch (node.access) {
        case GPUStorageTextureAccess.ReadOnly:
          return "read";
        case GPUStorageTextureAccess.WriteOnly:
          return "write";
        default:
          return "read_write";
      }
    } else {
      switch (node.access) {
        case GPUBufferBindingType.Storage:
          return "read_write";
        case GPUBufferBindingType.ReadOnlyStorage:
          return "read";
        default:
          return "write";
      }
    }
  }
  getUniformFromNode(node, type, shaderStage, name = null) {
    const uniformNode = super.getUniformFromNode(node, type, shaderStage, name);
    const nodeData = this.getDataFromNode(node, shaderStage, this.globalCache);
    if (nodeData.uniformGPU === void 0) {
      let uniformGPU;
      const group2 = node.groupNode;
      const groupName = group2.name;
      const bindings = this.getBindGroupArray(groupName, shaderStage);
      if (type === "texture" || type === "cubeTexture" || type === "storageTexture" || type === "texture3D") {
        let texture2 = null;
        if (type === "texture" || type === "storageTexture") {
          texture2 = new NodeSampledTexture(uniformNode.name, uniformNode.node, group2, node.access ? node.access : null);
        } else if (type === "cubeTexture") {
          texture2 = new NodeSampledCubeTexture(uniformNode.name, uniformNode.node, group2, node.access ? node.access : null);
        } else if (type === "texture3D") {
          texture2 = new NodeSampledTexture3D(uniformNode.name, uniformNode.node, group2, node.access ? node.access : null);
        }
        texture2.store = node.isStorageTextureNode === true;
        texture2.setVisibility(gpuShaderStageLib[shaderStage]);
        if (shaderStage === "fragment" && this.isUnfilterable(node.value) === false && texture2.store === false) {
          const sampler = new NodeSampler(`${uniformNode.name}_sampler`, uniformNode.node, group2);
          sampler.setVisibility(gpuShaderStageLib[shaderStage]);
          bindings.push(sampler, texture2);
          uniformGPU = [sampler, texture2];
        } else {
          bindings.push(texture2);
          uniformGPU = [texture2];
        }
      } else if (type === "buffer" || type === "storageBuffer") {
        const bufferClass = type === "storageBuffer" ? NodeStorageBuffer : NodeUniformBuffer;
        const buffer2 = new bufferClass(node, group2);
        buffer2.setVisibility(gpuShaderStageLib[shaderStage]);
        bindings.push(buffer2);
        uniformGPU = buffer2;
      } else {
        const uniformsStage = this.uniformGroups[shaderStage] || (this.uniformGroups[shaderStage] = {});
        let uniformsGroup = uniformsStage[groupName];
        if (uniformsGroup === void 0) {
          uniformsGroup = new NodeUniformsGroup(groupName, group2);
          uniformsGroup.setVisibility(gpuShaderStageLib[shaderStage]);
          uniformsStage[groupName] = uniformsGroup;
          bindings.push(uniformsGroup);
        }
        uniformGPU = this.getNodeUniform(uniformNode, type);
        uniformsGroup.addUniform(uniformGPU);
      }
      nodeData.uniformGPU = uniformGPU;
    }
    return uniformNode;
  }
  getBuiltin(name, property2, type, shaderStage = this.shaderStage) {
    const map4 = this.builtins[shaderStage] || (this.builtins[shaderStage] = /* @__PURE__ */ new Map());
    if (map4.has(name) === false) {
      map4.set(name, {
        name,
        property: property2,
        type
      });
    }
    return property2;
  }
  getVertexIndex() {
    if (this.shaderStage === "vertex") {
      return this.getBuiltin("vertex_index", "vertexIndex", "u32", "attribute");
    }
    return "vertexIndex";
  }
  buildFunctionCode(shaderNode) {
    const layout = shaderNode.layout;
    const flowData = this.flowShaderNode(shaderNode);
    const parameters = [];
    for (const input of layout.inputs) {
      parameters.push(input.name + " : " + this.getType(input.type));
    }
    let code2 = `fn ${layout.name}( ${parameters.join(", ")} ) -> ${this.getType(layout.type)} {
${flowData.vars}
${flowData.code}
`;
    if (flowData.result) {
      code2 += `	return ${flowData.result};
`;
    }
    code2 += "\n}\n";
    return code2;
  }
  getInstanceIndex() {
    if (this.shaderStage === "vertex") {
      return this.getBuiltin("instance_index", "instanceIndex", "u32", "attribute");
    }
    return "instanceIndex";
  }
  getInvocationLocalIndex() {
    return this.getBuiltin("local_invocation_index", "invocationLocalIndex", "u32", "attribute");
  }
  getSubgroupSize() {
    this.enableSubGroups();
    return this.getBuiltin("subgroup_size", "subgroupSize", "u32", "attribute");
  }
  getSubgroupIndex() {
    this.enableSubGroups();
    return this.getBuiltin("subgroup_invocation_id", "subgroupIndex", "u32", "attribute");
  }
  getDrawIndex() {
    return null;
  }
  getFrontFacing() {
    return this.getBuiltin("front_facing", "isFront", "bool");
  }
  getFragCoord() {
    return this.getBuiltin("position", "fragCoord", "vec4<f32>") + ".xy";
  }
  getFragDepth() {
    return "output." + this.getBuiltin("frag_depth", "depth", "f32", "output");
  }
  isFlipY() {
    return false;
  }
  enableDirective(name, shaderStage = this.shaderStage) {
    const stage = this.directives[shaderStage] || (this.directives[shaderStage] = /* @__PURE__ */ new Set());
    stage.add(name);
  }
  getDirectives(shaderStage) {
    const snippets = [];
    const directives = this.directives[shaderStage];
    if (directives !== void 0) {
      for (const directive of directives) {
        snippets.push(`enable ${directive};`);
      }
    }
    return snippets.join("\n");
  }
  enableSubGroups() {
    this.enableDirective("subgroups");
  }
  enableSubgroupsF16() {
    this.enableDirective("subgroups-f16");
  }
  enableClipDistances() {
    this.enableDirective("clip_distances");
  }
  enableShaderF16() {
    this.enableDirective("f16");
  }
  enableDualSourceBlending() {
    this.enableDirective("dual_source_blending");
  }
  getBuiltins(shaderStage) {
    const snippets = [];
    const builtins = this.builtins[shaderStage];
    if (builtins !== void 0) {
      for (const { name, property: property2, type } of builtins.values()) {
        snippets.push(`@builtin( ${name} ) ${property2} : ${type}`);
      }
    }
    return snippets.join(",\n	");
  }
  getAttributes(shaderStage) {
    const snippets = [];
    if (shaderStage === "compute") {
      this.getBuiltin("global_invocation_id", "id", "vec3<u32>", "attribute");
      this.getBuiltin("workgroup_id", "workgroupId", "vec3<u32>", "attribute");
      this.getBuiltin("local_invocation_id", "localId", "vec3<u32>", "attribute");
      this.getBuiltin("num_workgroups", "numWorkgroups", "vec3<u32>", "attribute");
    }
    if (shaderStage === "vertex" || shaderStage === "compute") {
      const builtins = this.getBuiltins("attribute");
      if (builtins) snippets.push(builtins);
      const attributes = this.getAttributesArray();
      for (let index7 = 0, length2 = attributes.length; index7 < length2; index7++) {
        const attribute2 = attributes[index7];
        const name = attribute2.name;
        const type = this.getType(attribute2.type);
        snippets.push(`@location( ${index7} ) ${name} : ${type}`);
      }
    }
    return snippets.join(",\n	");
  }
  getStructMembers(struct) {
    const snippets = [];
    const members = struct.getMemberTypes();
    for (let i2 = 0; i2 < members.length; i2++) {
      const member = members[i2];
      snippets.push(`	@location( ${i2} ) m${i2} : ${member}<f32>`);
    }
    const builtins = this.getBuiltins("output");
    if (builtins) snippets.push("	" + builtins);
    return snippets.join(",\n");
  }
  getStructs(shaderStage) {
    const snippets = [];
    const structs = this.structs[shaderStage];
    for (let index7 = 0, length2 = structs.length; index7 < length2; index7++) {
      const struct = structs[index7];
      const name = struct.name;
      let snippet = `struct ${name} {
`;
      snippet += this.getStructMembers(struct);
      snippet += "\n}";
      snippets.push(snippet);
      snippets.push(`
var<private> output : ${name};

`);
    }
    return snippets.join("\n\n");
  }
  getVar(type, name) {
    return `var ${name} : ${this.getType(type)}`;
  }
  getVars(shaderStage) {
    const snippets = [];
    const vars = this.vars[shaderStage];
    if (vars !== void 0) {
      for (const variable of vars) {
        snippets.push(`	${this.getVar(variable.type, variable.name)};`);
      }
    }
    return `
${snippets.join("\n")}
`;
  }
  getVaryings(shaderStage) {
    const snippets = [];
    if (shaderStage === "vertex") {
      this.getBuiltin("position", "Vertex", "vec4<f32>", "vertex");
    }
    if (shaderStage === "vertex" || shaderStage === "fragment") {
      const varyings = this.varyings;
      const vars = this.vars[shaderStage];
      for (let index7 = 0; index7 < varyings.length; index7++) {
        const varying2 = varyings[index7];
        if (varying2.needsInterpolation) {
          let attributesSnippet = `@location( ${index7} )`;
          if (/^(int|uint|ivec|uvec)/.test(varying2.type)) {
            attributesSnippet += " @interpolate( flat )";
          }
          snippets.push(`${attributesSnippet} ${varying2.name} : ${this.getType(varying2.type)}`);
        } else if (shaderStage === "vertex" && vars.includes(varying2) === false) {
          vars.push(varying2);
        }
      }
    }
    const builtins = this.getBuiltins(shaderStage);
    if (builtins) snippets.push(builtins);
    const code2 = snippets.join(",\n	");
    return shaderStage === "vertex" ? this._getWGSLStruct("VaryingsStruct", "	" + code2) : code2;
  }
  getUniforms(shaderStage) {
    const uniforms = this.uniforms[shaderStage];
    const bindingSnippets = [];
    const bufferSnippets = [];
    const structSnippets = [];
    const uniformGroups = {};
    for (const uniform2 of uniforms) {
      const groundName = uniform2.groupNode.name;
      const uniformIndexes = this.bindingsIndexes[groundName];
      if (uniform2.type === "texture" || uniform2.type === "cubeTexture" || uniform2.type === "storageTexture" || uniform2.type === "texture3D") {
        const texture2 = uniform2.node.value;
        if (shaderStage === "fragment" && this.isUnfilterable(texture2) === false && uniform2.node.isStorageTextureNode !== true) {
          if (texture2.isDepthTexture === true && texture2.compareFunction !== null) {
            bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform2.name}_sampler : sampler_comparison;`);
          } else {
            bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform2.name}_sampler : sampler;`);
          }
        }
        let textureType;
        let multisampled = "";
        if (texture2.isMultisampleRenderTargetTexture === true) {
          multisampled = "_multisampled";
        }
        if (texture2.isCubeTexture === true) {
          textureType = "texture_cube<f32>";
        } else if (texture2.isDataArrayTexture === true || texture2.isCompressedArrayTexture === true) {
          textureType = "texture_2d_array<f32>";
        } else if (texture2.isDepthTexture === true) {
          textureType = `texture_depth${multisampled}_2d`;
        } else if (texture2.isVideoTexture === true) {
          textureType = "texture_external";
        } else if (texture2.isData3DTexture === true) {
          textureType = "texture_3d<f32>";
        } else if (uniform2.node.isStorageTextureNode === true) {
          const format3 = getFormat2(texture2);
          const access = this.getStorageAccess(uniform2.node);
          textureType = `texture_storage_2d<${format3}, ${access}>`;
        } else {
          const componentPrefix = this.getComponentTypeFromTexture(texture2).charAt(0);
          textureType = `texture${multisampled}_2d<${componentPrefix}32>`;
        }
        bindingSnippets.push(`@binding( ${uniformIndexes.binding++} ) @group( ${uniformIndexes.group} ) var ${uniform2.name} : ${textureType};`);
      } else if (uniform2.type === "buffer" || uniform2.type === "storageBuffer") {
        const bufferNode = uniform2.node;
        const bufferType = this.getType(bufferNode.bufferType);
        const bufferCount = bufferNode.bufferCount;
        const bufferCountSnippet = bufferCount > 0 ? ", " + bufferCount : "";
        const bufferSnippet = `	${uniform2.name} : array< ${bufferType}${bufferCountSnippet} >
`;
        const bufferAccessMode = bufferNode.isStorageBufferNode ? `storage, ${this.getStorageAccess(bufferNode)}` : "uniform";
        bufferSnippets.push(this._getWGSLStructBinding("NodeBuffer_" + bufferNode.id, bufferSnippet, bufferAccessMode, uniformIndexes.binding++, uniformIndexes.group));
      } else {
        const vectorType = this.getType(this.getVectorType(uniform2.type));
        const groupName = uniform2.groupNode.name;
        const group2 = uniformGroups[groupName] || (uniformGroups[groupName] = {
          index: uniformIndexes.binding++,
          id: uniformIndexes.group,
          snippets: []
        });
        group2.snippets.push(`	${uniform2.name} : ${vectorType}`);
      }
    }
    for (const name in uniformGroups) {
      const group2 = uniformGroups[name];
      structSnippets.push(this._getWGSLStructBinding(name, group2.snippets.join(",\n"), "uniform", group2.index, group2.id));
    }
    let code2 = bindingSnippets.join("\n");
    code2 += bufferSnippets.join("\n");
    code2 += structSnippets.join("\n");
    return code2;
  }
  buildCode() {
    const shadersData = this.material !== null ? { fragment: {}, vertex: {} } : { compute: {} };
    for (const shaderStage in shadersData) {
      const stageData = shadersData[shaderStage];
      stageData.uniforms = this.getUniforms(shaderStage);
      stageData.attributes = this.getAttributes(shaderStage);
      stageData.varyings = this.getVaryings(shaderStage);
      stageData.structs = this.getStructs(shaderStage);
      stageData.vars = this.getVars(shaderStage);
      stageData.codes = this.getCodes(shaderStage);
      stageData.directives = this.getDirectives(shaderStage);
      let flow = "// code\n\n";
      flow += this.flowCode[shaderStage];
      const flowNodes = this.flowNodes[shaderStage];
      const mainNode = flowNodes[flowNodes.length - 1];
      const outputNode = mainNode.outputNode;
      const isOutputStruct = outputNode !== void 0 && outputNode.isOutputStructNode === true;
      for (const node of flowNodes) {
        const flowSlotData = this.getFlowData(
          node
          /*, shaderStage*/
        );
        const slotName = node.name;
        if (slotName) {
          if (flow.length > 0) flow += "\n";
          flow += `	// flow -> ${slotName}
	`;
        }
        flow += `${flowSlotData.code}
	`;
        if (node === mainNode && shaderStage !== "compute") {
          flow += "// result\n\n	";
          if (shaderStage === "vertex") {
            flow += `varyings.Vertex = ${flowSlotData.result};`;
          } else if (shaderStage === "fragment") {
            if (isOutputStruct) {
              stageData.returnType = outputNode.nodeType;
              flow += `return ${flowSlotData.result};`;
            } else {
              let structSnippet = "	@location(0) color: vec4<f32>";
              const builtins = this.getBuiltins("output");
              if (builtins) structSnippet += ",\n	" + builtins;
              stageData.returnType = "OutputStruct";
              stageData.structs += this._getWGSLStruct("OutputStruct", structSnippet);
              stageData.structs += "\nvar<private> output : OutputStruct;\n\n";
              flow += `output.color = ${flowSlotData.result};

	return output;`;
            }
          }
        }
      }
      stageData.flow = flow;
    }
    if (this.material !== null) {
      this.vertexShader = this._getWGSLVertexCode(shadersData.vertex);
      this.fragmentShader = this._getWGSLFragmentCode(shadersData.fragment);
    } else {
      this.computeShader = this._getWGSLComputeCode(shadersData.compute, (this.object.workgroupSize || [64]).join(", "));
    }
  }
  getMethod(method, output2 = null) {
    let wgslMethod;
    if (output2 !== null) {
      wgslMethod = this._getWGSLMethod(method + "_" + output2);
    }
    if (wgslMethod === void 0) {
      wgslMethod = this._getWGSLMethod(method);
    }
    return wgslMethod || method;
  }
  getType(type) {
    return wgslTypeLib[type] || type;
  }
  isAvailable(name) {
    let result = supports[name];
    if (result === void 0) {
      if (name === "float32Filterable") {
        result = this.renderer.hasFeature("float32-filterable");
      }
      supports[name] = result;
    }
    return result;
  }
  _getWGSLMethod(method) {
    if (wgslPolyfill[method] !== void 0) {
      this._include(method);
    }
    return wgslMethods[method];
  }
  _include(name) {
    const codeNode = wgslPolyfill[name];
    codeNode.build(this);
    if (this.currentFunctionNode !== null) {
      this.currentFunctionNode.includes.push(codeNode);
    }
    return codeNode;
  }
  _getWGSLVertexCode(shaderData) {
    return `${this.getSignature()}
// directives
${shaderData.directives}

// uniforms
${shaderData.uniforms}

// varyings
${shaderData.varyings}
var<private> varyings : VaryingsStruct;

// codes
${shaderData.codes}

@vertex
fn main( ${shaderData.attributes} ) -> VaryingsStruct {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

	return varyings;

}
`;
  }
  _getWGSLFragmentCode(shaderData) {
    return `${this.getSignature()}

diagnostic( off, derivative_uniformity );

// uniforms
${shaderData.uniforms}

// structs
${shaderData.structs}

// codes
${shaderData.codes}

@fragment
fn main( ${shaderData.varyings} ) -> ${shaderData.returnType} {

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
  }
  _getWGSLComputeCode(shaderData, workgroupSize) {
    return `${this.getSignature()}
// directives
${shaderData.directives}

// system
var<private> instanceIndex : u32;

// uniforms
${shaderData.uniforms}

// codes
${shaderData.codes}

@compute @workgroup_size( ${workgroupSize} )
fn main( ${shaderData.attributes} ) {

	// system
	instanceIndex = id.x + id.y * numWorkgroups.x * u32(${workgroupSize}) + id.z * numWorkgroups.x * numWorkgroups.y * u32(${workgroupSize});

	// vars
	${shaderData.vars}

	// flow
	${shaderData.flow}

}
`;
  }
  _getWGSLStruct(name, vars) {
    return `
struct ${name} {
${vars}
};`;
  }
  _getWGSLStructBinding(name, vars, access, binding = 0, group2 = 0) {
    const structName = name + "Struct";
    const structSnippet = this._getWGSLStruct(structName, vars);
    return `${structSnippet}
@binding( ${binding} ) @group( ${group2} )
var<${access}> ${name} : ${structName};`;
  }
};
var WebGPUUtils = class {
  constructor(backend) {
    this.backend = backend;
  }
  getCurrentDepthStencilFormat(renderContext) {
    let format3;
    if (renderContext.depthTexture !== null) {
      format3 = this.getTextureFormatGPU(renderContext.depthTexture);
    } else if (renderContext.depth && renderContext.stencil) {
      format3 = GPUTextureFormat.Depth24PlusStencil8;
    } else if (renderContext.depth) {
      format3 = GPUTextureFormat.Depth24Plus;
    }
    return format3;
  }
  getTextureFormatGPU(texture2) {
    return this.backend.get(texture2).texture.format;
  }
  getCurrentColorFormat(renderContext) {
    let format3;
    if (renderContext.textures !== null) {
      format3 = this.getTextureFormatGPU(renderContext.textures[0]);
    } else {
      format3 = this.getPreferredCanvasFormat();
    }
    return format3;
  }
  getCurrentColorSpace(renderContext) {
    if (renderContext.textures !== null) {
      return renderContext.textures[0].colorSpace;
    }
    return this.backend.renderer.outputColorSpace;
  }
  getPrimitiveTopology(object2, material) {
    if (object2.isPoints) return GPUPrimitiveTopology.PointList;
    else if (object2.isLineSegments || object2.isMesh && material.wireframe === true) return GPUPrimitiveTopology.LineList;
    else if (object2.isLine) return GPUPrimitiveTopology.LineStrip;
    else if (object2.isMesh) return GPUPrimitiveTopology.TriangleList;
  }
  getSampleCount(sampleCount) {
    let count2 = 1;
    if (sampleCount > 1) {
      count2 = Math.pow(2, Math.floor(Math.log2(sampleCount)));
      if (count2 === 2) {
        count2 = 4;
      }
    }
    return count2;
  }
  getSampleCountRenderContext(renderContext) {
    if (renderContext.textures !== null) {
      return this.getSampleCount(renderContext.sampleCount);
    }
    return this.getSampleCount(this.backend.renderer.samples);
  }
  getPreferredCanvasFormat() {
    if (navigator.userAgent.includes("Quest")) {
      return GPUTextureFormat.BGRA8Unorm;
    } else {
      return navigator.gpu.getPreferredCanvasFormat();
    }
  }
};
var typedArraysToVertexFormatPrefix = /* @__PURE__ */ new Map([
  [Int8Array, ["sint8", "snorm8"]],
  [Uint8Array, ["uint8", "unorm8"]],
  [Int16Array, ["sint16", "snorm16"]],
  [Uint16Array, ["uint16", "unorm16"]],
  [Int32Array, ["sint32", "snorm32"]],
  [Uint32Array, ["uint32", "unorm32"]],
  [Float32Array, ["float32"]]
]);
var typedAttributeToVertexFormatPrefix = /* @__PURE__ */ new Map([
  [Float16BufferAttribute, ["float16"]]
]);
var typeArraysToVertexFormatPrefixForItemSize1 = /* @__PURE__ */ new Map([
  [Int32Array, "sint32"],
  [Int16Array, "sint32"],
  // patch for INT16
  [Uint32Array, "uint32"],
  [Uint16Array, "uint32"],
  // patch for UINT16
  [Float32Array, "float32"]
]);
var WebGPUAttributeUtils = class {
  constructor(backend) {
    this.backend = backend;
  }
  createAttribute(attribute2, usage) {
    const bufferAttribute2 = this._getBufferAttribute(attribute2);
    const backend = this.backend;
    const bufferData = backend.get(bufferAttribute2);
    let buffer2 = bufferData.buffer;
    if (buffer2 === void 0) {
      const device = backend.device;
      let array3 = bufferAttribute2.array;
      if (attribute2.normalized === false && (array3.constructor === Int16Array || array3.constructor === Uint16Array)) {
        const tempArray = new Uint32Array(array3.length);
        for (let i2 = 0; i2 < array3.length; i2++) {
          tempArray[i2] = array3[i2];
        }
        array3 = tempArray;
      }
      bufferAttribute2.array = array3;
      if ((bufferAttribute2.isStorageBufferAttribute || bufferAttribute2.isStorageInstancedBufferAttribute) && bufferAttribute2.itemSize === 3) {
        array3 = new array3.constructor(bufferAttribute2.count * 4);
        for (let i2 = 0; i2 < bufferAttribute2.count; i2++) {
          array3.set(bufferAttribute2.array.subarray(i2 * 3, i2 * 3 + 3), i2 * 4);
        }
        bufferAttribute2.itemSize = 4;
        bufferAttribute2.array = array3;
      }
      const size = array3.byteLength + (4 - array3.byteLength % 4) % 4;
      buffer2 = device.createBuffer({
        label: bufferAttribute2.name,
        size,
        usage,
        mappedAtCreation: true
      });
      new array3.constructor(buffer2.getMappedRange()).set(array3);
      buffer2.unmap();
      bufferData.buffer = buffer2;
    }
  }
  updateAttribute(attribute2) {
    const bufferAttribute2 = this._getBufferAttribute(attribute2);
    const backend = this.backend;
    const device = backend.device;
    const buffer2 = backend.get(bufferAttribute2).buffer;
    const array3 = bufferAttribute2.array;
    const updateRanges = bufferAttribute2.updateRanges;
    if (updateRanges.length === 0) {
      device.queue.writeBuffer(
        buffer2,
        0,
        array3,
        0
      );
    } else {
      for (let i2 = 0, l2 = updateRanges.length; i2 < l2; i2++) {
        const range4 = updateRanges[i2];
        device.queue.writeBuffer(
          buffer2,
          0,
          array3,
          range4.start * array3.BYTES_PER_ELEMENT,
          range4.count * array3.BYTES_PER_ELEMENT
        );
      }
      bufferAttribute2.clearUpdateRanges();
    }
  }
  createShaderVertexBuffers(renderObject) {
    const attributes = renderObject.getAttributes();
    const vertexBuffers = /* @__PURE__ */ new Map();
    for (let slot = 0; slot < attributes.length; slot++) {
      const geometryAttribute = attributes[slot];
      const bytesPerElement = geometryAttribute.array.BYTES_PER_ELEMENT;
      const bufferAttribute2 = this._getBufferAttribute(geometryAttribute);
      let vertexBufferLayout = vertexBuffers.get(bufferAttribute2);
      if (vertexBufferLayout === void 0) {
        let arrayStride, stepMode;
        if (geometryAttribute.isInterleavedBufferAttribute === true) {
          arrayStride = geometryAttribute.data.stride * bytesPerElement;
          stepMode = geometryAttribute.data.isInstancedInterleavedBuffer ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;
        } else {
          arrayStride = geometryAttribute.itemSize * bytesPerElement;
          stepMode = geometryAttribute.isInstancedBufferAttribute ? GPUInputStepMode.Instance : GPUInputStepMode.Vertex;
        }
        if (geometryAttribute.normalized === false && (geometryAttribute.array.constructor === Int16Array || geometryAttribute.array.constructor === Uint16Array)) {
          arrayStride = 4;
        }
        vertexBufferLayout = {
          arrayStride,
          attributes: [],
          stepMode
        };
        vertexBuffers.set(bufferAttribute2, vertexBufferLayout);
      }
      const format3 = this._getVertexFormat(geometryAttribute);
      const offset = geometryAttribute.isInterleavedBufferAttribute === true ? geometryAttribute.offset * bytesPerElement : 0;
      vertexBufferLayout.attributes.push({
        shaderLocation: slot,
        offset,
        format: format3
      });
    }
    return Array.from(vertexBuffers.values());
  }
  destroyAttribute(attribute2) {
    const backend = this.backend;
    const data = backend.get(this._getBufferAttribute(attribute2));
    data.buffer.destroy();
    backend.delete(attribute2);
  }
  async getArrayBufferAsync(attribute2) {
    const backend = this.backend;
    const device = backend.device;
    const data = backend.get(this._getBufferAttribute(attribute2));
    const bufferGPU = data.buffer;
    const size = bufferGPU.size;
    let readBufferGPU = data.readBuffer;
    let needsUnmap = true;
    if (readBufferGPU === void 0) {
      readBufferGPU = device.createBuffer({
        label: attribute2.name,
        size,
        usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
      });
      needsUnmap = false;
      data.readBuffer = readBufferGPU;
    }
    const cmdEncoder = device.createCommandEncoder({});
    cmdEncoder.copyBufferToBuffer(
      bufferGPU,
      0,
      readBufferGPU,
      0,
      size
    );
    if (needsUnmap) readBufferGPU.unmap();
    const gpuCommands = cmdEncoder.finish();
    device.queue.submit([gpuCommands]);
    await readBufferGPU.mapAsync(GPUMapMode.READ);
    const arrayBuffer = readBufferGPU.getMappedRange();
    return arrayBuffer;
  }
  _getVertexFormat(geometryAttribute) {
    const { itemSize, normalized } = geometryAttribute;
    const ArrayType = geometryAttribute.array.constructor;
    const AttributeType2 = geometryAttribute.constructor;
    let format3;
    if (itemSize == 1) {
      format3 = typeArraysToVertexFormatPrefixForItemSize1.get(ArrayType);
    } else {
      const prefixOptions = typedAttributeToVertexFormatPrefix.get(AttributeType2) || typedArraysToVertexFormatPrefix.get(ArrayType);
      const prefix = prefixOptions[normalized ? 1 : 0];
      if (prefix) {
        const bytesPerUnit = ArrayType.BYTES_PER_ELEMENT * itemSize;
        const paddedBytesPerUnit = Math.floor((bytesPerUnit + 3) / 4) * 4;
        const paddedItemSize = paddedBytesPerUnit / ArrayType.BYTES_PER_ELEMENT;
        if (paddedItemSize % 1) {
          throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");
        }
        format3 = `${prefix}x${paddedItemSize}`;
      }
    }
    if (!format3) {
      console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet.");
    }
    return format3;
  }
  _getBufferAttribute(attribute2) {
    if (attribute2.isInterleavedBufferAttribute) attribute2 = attribute2.data;
    return attribute2;
  }
};
var WebGPUBindingUtils = class {
  constructor(backend) {
    this.backend = backend;
    this.bindGroupLayoutCache = /* @__PURE__ */ new WeakMap();
  }
  createBindingsLayout(bindGroup) {
    const backend = this.backend;
    const device = backend.device;
    const entries = [];
    let index7 = 0;
    for (const binding of bindGroup.bindings) {
      const bindingGPU = {
        binding: index7++,
        visibility: binding.visibility
      };
      if (binding.isUniformBuffer || binding.isStorageBuffer) {
        const buffer2 = {};
        if (binding.isStorageBuffer) {
          buffer2.type = binding.access;
        }
        bindingGPU.buffer = buffer2;
      } else if (binding.isSampler) {
        const sampler = {};
        if (binding.texture.isDepthTexture) {
          if (binding.texture.compareFunction !== null) {
            sampler.type = "comparison";
          }
        }
        bindingGPU.sampler = sampler;
      } else if (binding.isSampledTexture && binding.texture.isVideoTexture) {
        bindingGPU.externalTexture = {};
      } else if (binding.isSampledTexture && binding.store) {
        const format3 = this.backend.get(binding.texture).texture.format;
        const access = binding.access;
        bindingGPU.storageTexture = { format: format3, access };
      } else if (binding.isSampledTexture) {
        const texture2 = {};
        if (binding.texture.isMultisampleRenderTargetTexture === true) {
          texture2.multisampled = true;
        }
        if (binding.texture.isDepthTexture) {
          texture2.sampleType = GPUTextureSampleType.Depth;
        } else if (binding.texture.isDataTexture || binding.texture.isDataArrayTexture || binding.texture.isData3DTexture) {
          const type = binding.texture.type;
          if (type === IntType2) {
            texture2.sampleType = GPUTextureSampleType.SInt;
          } else if (type === UnsignedIntType2) {
            texture2.sampleType = GPUTextureSampleType.UInt;
          } else if (type === FloatType2) {
            if (this.backend.hasFeature("float32-filterable")) {
              texture2.sampleType = GPUTextureSampleType.Float;
            } else {
              texture2.sampleType = GPUTextureSampleType.UnfilterableFloat;
            }
          }
        }
        if (binding.isSampledCubeTexture) {
          texture2.viewDimension = GPUTextureViewDimension.Cube;
        } else if (binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {
          texture2.viewDimension = GPUTextureViewDimension.TwoDArray;
        } else if (binding.isSampledTexture3D) {
          texture2.viewDimension = GPUTextureViewDimension.ThreeD;
        }
        bindingGPU.texture = texture2;
      } else {
        console.error(`WebGPUBindingUtils: Unsupported binding "${binding}".`);
      }
      entries.push(bindingGPU);
    }
    return device.createBindGroupLayout({ entries });
  }
  createBindings(bindGroup) {
    const { backend, bindGroupLayoutCache } = this;
    const bindingsData = backend.get(bindGroup);
    let bindLayoutGPU = bindGroupLayoutCache.get(bindGroup.bindingsReference);
    if (bindLayoutGPU === void 0) {
      bindLayoutGPU = this.createBindingsLayout(bindGroup);
      bindGroupLayoutCache.set(bindGroup.bindingsReference, bindLayoutGPU);
    }
    const bindGroupGPU = this.createBindGroup(bindGroup, bindLayoutGPU);
    bindingsData.layout = bindLayoutGPU;
    bindingsData.group = bindGroupGPU;
  }
  updateBinding(binding) {
    const backend = this.backend;
    const device = backend.device;
    const buffer2 = binding.buffer;
    const bufferGPU = backend.get(binding).buffer;
    device.queue.writeBuffer(bufferGPU, 0, buffer2, 0);
  }
  createBindGroup(bindGroup, layoutGPU) {
    const backend = this.backend;
    const device = backend.device;
    let bindingPoint = 0;
    const entriesGPU = [];
    for (const binding of bindGroup.bindings) {
      if (binding.isUniformBuffer) {
        const bindingData = backend.get(binding);
        if (bindingData.buffer === void 0) {
          const byteLength = binding.byteLength;
          const usage = GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST;
          const bufferGPU = device.createBuffer({
            label: "bindingBuffer_" + binding.name,
            size: byteLength,
            usage
          });
          bindingData.buffer = bufferGPU;
        }
        entriesGPU.push({ binding: bindingPoint, resource: { buffer: bindingData.buffer } });
      } else if (binding.isStorageBuffer) {
        const bindingData = backend.get(binding);
        if (bindingData.buffer === void 0) {
          const attribute2 = binding.attribute;
          bindingData.buffer = backend.get(attribute2).buffer;
        }
        entriesGPU.push({ binding: bindingPoint, resource: { buffer: bindingData.buffer } });
      } else if (binding.isSampler) {
        const textureGPU = backend.get(binding.texture);
        entriesGPU.push({ binding: bindingPoint, resource: textureGPU.sampler });
      } else if (binding.isSampledTexture) {
        const textureData = backend.get(binding.texture);
        let resourceGPU;
        if (textureData.externalTexture !== void 0) {
          resourceGPU = device.importExternalTexture({ source: textureData.externalTexture });
        } else {
          const mipLevelCount = binding.store ? 1 : textureData.texture.mipLevelCount;
          const propertyName = `view-${textureData.texture.width}-${textureData.texture.height}-${mipLevelCount}`;
          resourceGPU = textureData[propertyName];
          if (resourceGPU === void 0) {
            const aspectGPU = GPUTextureAspect.All;
            let dimensionViewGPU;
            if (binding.isSampledCubeTexture) {
              dimensionViewGPU = GPUTextureViewDimension.Cube;
            } else if (binding.isSampledTexture3D) {
              dimensionViewGPU = GPUTextureViewDimension.ThreeD;
            } else if (binding.texture.isDataArrayTexture || binding.texture.isCompressedArrayTexture) {
              dimensionViewGPU = GPUTextureViewDimension.TwoDArray;
            } else {
              dimensionViewGPU = GPUTextureViewDimension.TwoD;
            }
            resourceGPU = textureData[propertyName] = textureData.texture.createView({ aspect: aspectGPU, dimension: dimensionViewGPU, mipLevelCount });
          }
        }
        entriesGPU.push({ binding: bindingPoint, resource: resourceGPU });
      }
      bindingPoint++;
    }
    return device.createBindGroup({
      label: "bindGroup_" + bindGroup.name,
      layout: layoutGPU,
      entries: entriesGPU
    });
  }
};
var WebGPUPipelineUtils = class {
  constructor(backend) {
    this.backend = backend;
  }
  _getSampleCount(renderObjectContext) {
    return this.backend.utils.getSampleCountRenderContext(renderObjectContext);
  }
  createRenderPipeline(renderObject, promises) {
    const { object: object2, material, geometry, pipeline } = renderObject;
    const { vertexProgram, fragmentProgram } = pipeline;
    const backend = this.backend;
    const device = backend.device;
    const utils = backend.utils;
    const pipelineData = backend.get(pipeline);
    const bindGroupLayouts = [];
    for (const bindGroup of renderObject.getBindings()) {
      const bindingsData = backend.get(bindGroup);
      bindGroupLayouts.push(bindingsData.layout);
    }
    const vertexBuffers = backend.attributeUtils.createShaderVertexBuffers(renderObject);
    let blending;
    if (material.transparent === true && material.blending !== NoBlending2) {
      blending = this._getBlending(material);
    }
    let stencilFront = {};
    if (material.stencilWrite === true) {
      stencilFront = {
        compare: this._getStencilCompare(material),
        failOp: this._getStencilOperation(material.stencilFail),
        depthFailOp: this._getStencilOperation(material.stencilZFail),
        passOp: this._getStencilOperation(material.stencilZPass)
      };
    }
    const colorWriteMask = this._getColorWriteMask(material);
    const targets = [];
    if (renderObject.context.textures !== null) {
      const textures = renderObject.context.textures;
      for (let i2 = 0; i2 < textures.length; i2++) {
        const colorFormat = utils.getTextureFormatGPU(textures[i2]);
        targets.push({
          format: colorFormat,
          blend: blending,
          writeMask: colorWriteMask
        });
      }
    } else {
      const colorFormat = utils.getCurrentColorFormat(renderObject.context);
      targets.push({
        format: colorFormat,
        blend: blending,
        writeMask: colorWriteMask
      });
    }
    const vertexModule = backend.get(vertexProgram).module;
    const fragmentModule = backend.get(fragmentProgram).module;
    const primitiveState = this._getPrimitiveState(object2, geometry, material);
    const depthCompare = this._getDepthCompare(material);
    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);
    const sampleCount = this._getSampleCount(renderObject.context);
    const pipelineDescriptor = {
      label: `renderPipeline_${material.name || material.type}_${material.id}`,
      vertex: Object.assign({}, vertexModule, { buffers: vertexBuffers }),
      fragment: Object.assign({}, fragmentModule, { targets }),
      primitive: primitiveState,
      depthStencil: {
        format: depthStencilFormat,
        depthWriteEnabled: material.depthWrite,
        depthCompare,
        stencilFront,
        stencilBack: {},
        // three.js does not provide an API to configure the back function (gl.stencilFuncSeparate() was never used)
        stencilReadMask: material.stencilFuncMask,
        stencilWriteMask: material.stencilWriteMask
      },
      multisample: {
        count: sampleCount,
        alphaToCoverageEnabled: material.alphaToCoverage
      },
      layout: device.createPipelineLayout({
        bindGroupLayouts
      })
    };
    if (promises === null) {
      pipelineData.pipeline = device.createRenderPipeline(pipelineDescriptor);
    } else {
      const p2 = new Promise((resolve) => {
        device.createRenderPipelineAsync(pipelineDescriptor).then((pipeline2) => {
          pipelineData.pipeline = pipeline2;
          resolve();
        });
      });
      promises.push(p2);
    }
  }
  createBundleEncoder(renderContext) {
    const backend = this.backend;
    const { utils, device } = backend;
    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderContext);
    const colorFormat = utils.getCurrentColorFormat(renderContext);
    const sampleCount = this._getSampleCount(renderContext);
    const descriptor = {
      label: "renderBundleEncoder",
      colorFormats: [colorFormat],
      depthStencilFormat,
      sampleCount
    };
    return device.createRenderBundleEncoder(descriptor);
  }
  createComputePipeline(pipeline, bindings) {
    const backend = this.backend;
    const device = backend.device;
    const computeProgram = backend.get(pipeline.computeProgram).module;
    const pipelineGPU = backend.get(pipeline);
    const bindGroupLayouts = [];
    for (const bindingsGroup of bindings) {
      const bindingsData = backend.get(bindingsGroup);
      bindGroupLayouts.push(bindingsData.layout);
    }
    pipelineGPU.pipeline = device.createComputePipeline({
      compute: computeProgram,
      layout: device.createPipelineLayout({
        bindGroupLayouts
      })
    });
  }
  _getBlending(material) {
    let color3, alpha;
    const blending = material.blending;
    const blendSrc = material.blendSrc;
    const blendDst = material.blendDst;
    const blendEquation = material.blendEquation;
    if (blending === CustomBlending2) {
      const blendSrcAlpha = material.blendSrcAlpha !== null ? material.blendSrcAlpha : blendSrc;
      const blendDstAlpha = material.blendDstAlpha !== null ? material.blendDstAlpha : blendDst;
      const blendEquationAlpha = material.blendEquationAlpha !== null ? material.blendEquationAlpha : blendEquation;
      color3 = {
        srcFactor: this._getBlendFactor(blendSrc),
        dstFactor: this._getBlendFactor(blendDst),
        operation: this._getBlendOperation(blendEquation)
      };
      alpha = {
        srcFactor: this._getBlendFactor(blendSrcAlpha),
        dstFactor: this._getBlendFactor(blendDstAlpha),
        operation: this._getBlendOperation(blendEquationAlpha)
      };
    } else {
      const premultipliedAlpha = material.premultipliedAlpha;
      const setBlend = (srcRGB, dstRGB, srcAlpha, dstAlpha) => {
        color3 = {
          srcFactor: srcRGB,
          dstFactor: dstRGB,
          operation: GPUBlendOperation.Add
        };
        alpha = {
          srcFactor: srcAlpha,
          dstFactor: dstAlpha,
          operation: GPUBlendOperation.Add
        };
      };
      if (premultipliedAlpha) {
        switch (blending) {
          case NormalBlending2:
            setBlend(GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);
            break;
          case AdditiveBlending2:
            setBlend(GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One, GPUBlendFactor.One);
            break;
          case SubtractiveBlending2:
            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);
            break;
          case MultiplyBlending2:
            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.SrcAlpha);
            break;
        }
      } else {
        switch (blending) {
          case NormalBlending2:
            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.OneMinusSrcAlpha, GPUBlendFactor.One, GPUBlendFactor.OneMinusSrcAlpha);
            break;
          case AdditiveBlending2:
            setBlend(GPUBlendFactor.SrcAlpha, GPUBlendFactor.One, GPUBlendFactor.SrcAlpha, GPUBlendFactor.One);
            break;
          case SubtractiveBlending2:
            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.OneMinusSrc, GPUBlendFactor.Zero, GPUBlendFactor.One);
            break;
          case MultiplyBlending2:
            setBlend(GPUBlendFactor.Zero, GPUBlendFactor.Src, GPUBlendFactor.Zero, GPUBlendFactor.Src);
            break;
        }
      }
    }
    if (color3 !== void 0 && alpha !== void 0) {
      return { color: color3, alpha };
    } else {
      console.error("THREE.WebGPURenderer: Invalid blending: ", blending);
    }
  }
  _getBlendFactor(blend) {
    let blendFactor;
    switch (blend) {
      case ZeroFactor2:
        blendFactor = GPUBlendFactor.Zero;
        break;
      case OneFactor2:
        blendFactor = GPUBlendFactor.One;
        break;
      case SrcColorFactor2:
        blendFactor = GPUBlendFactor.Src;
        break;
      case OneMinusSrcColorFactor2:
        blendFactor = GPUBlendFactor.OneMinusSrc;
        break;
      case SrcAlphaFactor2:
        blendFactor = GPUBlendFactor.SrcAlpha;
        break;
      case OneMinusSrcAlphaFactor2:
        blendFactor = GPUBlendFactor.OneMinusSrcAlpha;
        break;
      case DstColorFactor2:
        blendFactor = GPUBlendFactor.Dst;
        break;
      case OneMinusDstColorFactor2:
        blendFactor = GPUBlendFactor.OneMinusDstColor;
        break;
      case DstAlphaFactor2:
        blendFactor = GPUBlendFactor.DstAlpha;
        break;
      case OneMinusDstAlphaFactor2:
        blendFactor = GPUBlendFactor.OneMinusDstAlpha;
        break;
      case SrcAlphaSaturateFactor2:
        blendFactor = GPUBlendFactor.SrcAlphaSaturated;
        break;
      case BlendColorFactor:
        blendFactor = GPUBlendFactor.Constant;
        break;
      case OneMinusBlendColorFactor:
        blendFactor = GPUBlendFactor.OneMinusConstant;
        break;
      default:
        console.error("THREE.WebGPURenderer: Blend factor not supported.", blend);
    }
    return blendFactor;
  }
  _getStencilCompare(material) {
    let stencilCompare;
    const stencilFunc = material.stencilFunc;
    switch (stencilFunc) {
      case NeverStencilFunc:
        stencilCompare = GPUCompareFunction.Never;
        break;
      case AlwaysStencilFunc2:
        stencilCompare = GPUCompareFunction.Always;
        break;
      case LessStencilFunc:
        stencilCompare = GPUCompareFunction.Less;
        break;
      case LessEqualStencilFunc:
        stencilCompare = GPUCompareFunction.LessEqual;
        break;
      case EqualStencilFunc:
        stencilCompare = GPUCompareFunction.Equal;
        break;
      case GreaterEqualStencilFunc:
        stencilCompare = GPUCompareFunction.GreaterEqual;
        break;
      case GreaterStencilFunc:
        stencilCompare = GPUCompareFunction.Greater;
        break;
      case NotEqualStencilFunc:
        stencilCompare = GPUCompareFunction.NotEqual;
        break;
      default:
        console.error("THREE.WebGPURenderer: Invalid stencil function.", stencilFunc);
    }
    return stencilCompare;
  }
  _getStencilOperation(op) {
    let stencilOperation;
    switch (op) {
      case KeepStencilOp2:
        stencilOperation = GPUStencilOperation.Keep;
        break;
      case ZeroStencilOp:
        stencilOperation = GPUStencilOperation.Zero;
        break;
      case ReplaceStencilOp:
        stencilOperation = GPUStencilOperation.Replace;
        break;
      case InvertStencilOp:
        stencilOperation = GPUStencilOperation.Invert;
        break;
      case IncrementStencilOp:
        stencilOperation = GPUStencilOperation.IncrementClamp;
        break;
      case DecrementStencilOp:
        stencilOperation = GPUStencilOperation.DecrementClamp;
        break;
      case IncrementWrapStencilOp:
        stencilOperation = GPUStencilOperation.IncrementWrap;
        break;
      case DecrementWrapStencilOp:
        stencilOperation = GPUStencilOperation.DecrementWrap;
        break;
      default:
        console.error("THREE.WebGPURenderer: Invalid stencil operation.", stencilOperation);
    }
    return stencilOperation;
  }
  _getBlendOperation(blendEquation) {
    let blendOperation;
    switch (blendEquation) {
      case AddEquation2:
        blendOperation = GPUBlendOperation.Add;
        break;
      case SubtractEquation2:
        blendOperation = GPUBlendOperation.Subtract;
        break;
      case ReverseSubtractEquation2:
        blendOperation = GPUBlendOperation.ReverseSubtract;
        break;
      case MinEquation2:
        blendOperation = GPUBlendOperation.Min;
        break;
      case MaxEquation2:
        blendOperation = GPUBlendOperation.Max;
        break;
      default:
        console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.", blendEquation);
    }
    return blendOperation;
  }
  _getPrimitiveState(object2, geometry, material) {
    const descriptor = {};
    const utils = this.backend.utils;
    descriptor.topology = utils.getPrimitiveTopology(object2, material);
    if (geometry.index !== null && object2.isLine === true && object2.isLineSegments !== true) {
      descriptor.stripIndexFormat = geometry.index.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;
    }
    switch (material.side) {
      case FrontSide2:
        descriptor.frontFace = GPUFrontFace.CCW;
        descriptor.cullMode = GPUCullMode.Back;
        break;
      case BackSide2:
        descriptor.frontFace = GPUFrontFace.CCW;
        descriptor.cullMode = GPUCullMode.Front;
        break;
      case DoubleSide2:
        descriptor.frontFace = GPUFrontFace.CCW;
        descriptor.cullMode = GPUCullMode.None;
        break;
      default:
        console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.", material.side);
        break;
    }
    return descriptor;
  }
  _getColorWriteMask(material) {
    return material.colorWrite === true ? GPUColorWriteFlags.All : GPUColorWriteFlags.None;
  }
  _getDepthCompare(material) {
    let depthCompare;
    if (material.depthTest === false) {
      depthCompare = GPUCompareFunction.Always;
    } else {
      const depthFunc = material.depthFunc;
      switch (depthFunc) {
        case NeverDepth2:
          depthCompare = GPUCompareFunction.Never;
          break;
        case AlwaysDepth2:
          depthCompare = GPUCompareFunction.Always;
          break;
        case LessDepth2:
          depthCompare = GPUCompareFunction.Less;
          break;
        case LessEqualDepth2:
          depthCompare = GPUCompareFunction.LessEqual;
          break;
        case EqualDepth2:
          depthCompare = GPUCompareFunction.Equal;
          break;
        case GreaterEqualDepth2:
          depthCompare = GPUCompareFunction.GreaterEqual;
          break;
        case GreaterDepth2:
          depthCompare = GPUCompareFunction.Greater;
          break;
        case NotEqualDepth2:
          depthCompare = GPUCompareFunction.NotEqual;
          break;
        default:
          console.error("THREE.WebGPUPipelineUtils: Invalid depth function.", depthFunc);
      }
    }
    return depthCompare;
  }
};
var WebGPUBackend = class extends Backend {
  constructor(parameters = {}) {
    super(parameters);
    this.isWebGPUBackend = true;
    this.parameters.alpha = parameters.alpha === void 0 ? true : parameters.alpha;
    this.parameters.requiredLimits = parameters.requiredLimits === void 0 ? {} : parameters.requiredLimits;
    this.trackTimestamp = parameters.trackTimestamp === true;
    this.device = null;
    this.context = null;
    this.colorBuffer = null;
    this.defaultRenderPassdescriptor = null;
    this.utils = new WebGPUUtils(this);
    this.attributeUtils = new WebGPUAttributeUtils(this);
    this.bindingUtils = new WebGPUBindingUtils(this);
    this.pipelineUtils = new WebGPUPipelineUtils(this);
    this.textureUtils = new WebGPUTextureUtils(this);
    this.occludedResolveCache = /* @__PURE__ */ new Map();
  }
  async init(renderer3) {
    await super.init(renderer3);
    const parameters = this.parameters;
    let device;
    if (parameters.device === void 0) {
      const adapterOptions = {
        powerPreference: parameters.powerPreference
      };
      const adapter = await navigator.gpu.requestAdapter(adapterOptions);
      if (adapter === null) {
        throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");
      }
      const features = Object.values(GPUFeatureName);
      const supportedFeatures = [];
      for (const name of features) {
        if (adapter.features.has(name)) {
          supportedFeatures.push(name);
        }
      }
      const deviceDescriptor = {
        requiredFeatures: supportedFeatures,
        requiredLimits: parameters.requiredLimits
      };
      device = await adapter.requestDevice(deviceDescriptor);
    } else {
      device = parameters.device;
    }
    const context2 = parameters.context !== void 0 ? parameters.context : renderer3.domElement.getContext("webgpu");
    this.device = device;
    this.context = context2;
    const alphaMode = parameters.alpha ? "premultiplied" : "opaque";
    this.trackTimestamp = this.trackTimestamp && this.hasFeature(GPUFeatureName.TimestampQuery);
    this.context.configure({
      device: this.device,
      format: this.utils.getPreferredCanvasFormat(),
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,
      alphaMode
    });
    this.updateSize();
  }
  get coordinateSystem() {
    return WebGPUCoordinateSystem2;
  }
  async getArrayBufferAsync(attribute2) {
    return await this.attributeUtils.getArrayBufferAsync(attribute2);
  }
  getContext() {
    return this.context;
  }
  _getDefaultRenderPassDescriptor() {
    let descriptor = this.defaultRenderPassdescriptor;
    if (descriptor === null) {
      const renderer3 = this.renderer;
      descriptor = {
        colorAttachments: [{
          view: null
        }],
        depthStencilAttachment: {
          view: this.textureUtils.getDepthBuffer(renderer3.depth, renderer3.stencil).createView()
        }
      };
      const colorAttachment2 = descriptor.colorAttachments[0];
      if (this.renderer.samples > 0) {
        colorAttachment2.view = this.colorBuffer.createView();
      } else {
        colorAttachment2.resolveTarget = void 0;
      }
      this.defaultRenderPassdescriptor = descriptor;
    }
    const colorAttachment = descriptor.colorAttachments[0];
    if (this.renderer.samples > 0) {
      colorAttachment.resolveTarget = this.context.getCurrentTexture().createView();
    } else {
      colorAttachment.view = this.context.getCurrentTexture().createView();
    }
    return descriptor;
  }
  _getRenderPassDescriptor(renderContext) {
    const renderTarget = renderContext.renderTarget;
    const renderTargetData = this.get(renderTarget);
    let descriptors = renderTargetData.descriptors;
    if (descriptors === void 0 || renderTargetData.width !== renderTarget.width || renderTargetData.height !== renderTarget.height || renderTargetData.activeMipmapLevel !== renderTarget.activeMipmapLevel || renderTargetData.samples !== renderTarget.samples) {
      descriptors = {};
      renderTargetData.descriptors = descriptors;
      const onDispose = () => {
        renderTarget.removeEventListener("dispose", onDispose);
        this.delete(renderTarget);
      };
      renderTarget.addEventListener("dispose", onDispose);
    }
    const cacheKey = renderContext.getCacheKey();
    let descriptor = descriptors[cacheKey];
    if (descriptor === void 0) {
      const textures = renderContext.textures;
      const colorAttachments = [];
      for (let i2 = 0; i2 < textures.length; i2++) {
        const textureData = this.get(textures[i2]);
        const textureView = textureData.texture.createView({
          baseMipLevel: renderContext.activeMipmapLevel,
          mipLevelCount: 1,
          baseArrayLayer: renderContext.activeCubeFace,
          dimension: GPUTextureViewDimension.TwoD
        });
        let view, resolveTarget;
        if (textureData.msaaTexture !== void 0) {
          view = textureData.msaaTexture.createView();
          resolveTarget = textureView;
        } else {
          view = textureView;
          resolveTarget = void 0;
        }
        colorAttachments.push({
          view,
          resolveTarget,
          loadOp: GPULoadOp.Load,
          storeOp: GPUStoreOp.Store
        });
      }
      const depthTextureData = this.get(renderContext.depthTexture);
      const depthStencilAttachment = {
        view: depthTextureData.texture.createView()
      };
      descriptor = {
        colorAttachments,
        depthStencilAttachment
      };
      descriptors[cacheKey] = descriptor;
      renderTargetData.width = renderTarget.width;
      renderTargetData.height = renderTarget.height;
      renderTargetData.samples = renderTarget.samples;
      renderTargetData.activeMipmapLevel = renderTarget.activeMipmapLevel;
    }
    return descriptor;
  }
  beginRender(renderContext) {
    const renderContextData = this.get(renderContext);
    const device = this.device;
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    let occlusionQuerySet;
    if (occlusionQueryCount > 0) {
      if (renderContextData.currentOcclusionQuerySet) renderContextData.currentOcclusionQuerySet.destroy();
      if (renderContextData.currentOcclusionQueryBuffer) renderContextData.currentOcclusionQueryBuffer.destroy();
      renderContextData.currentOcclusionQuerySet = renderContextData.occlusionQuerySet;
      renderContextData.currentOcclusionQueryBuffer = renderContextData.occlusionQueryBuffer;
      renderContextData.currentOcclusionQueryObjects = renderContextData.occlusionQueryObjects;
      occlusionQuerySet = device.createQuerySet({ type: "occlusion", count: occlusionQueryCount });
      renderContextData.occlusionQuerySet = occlusionQuerySet;
      renderContextData.occlusionQueryIndex = 0;
      renderContextData.occlusionQueryObjects = new Array(occlusionQueryCount);
      renderContextData.lastOcclusionObject = null;
    }
    let descriptor;
    if (renderContext.textures === null) {
      descriptor = this._getDefaultRenderPassDescriptor();
    } else {
      descriptor = this._getRenderPassDescriptor(renderContext);
    }
    this.initTimestampQuery(renderContext, descriptor);
    descriptor.occlusionQuerySet = occlusionQuerySet;
    const depthStencilAttachment = descriptor.depthStencilAttachment;
    if (renderContext.textures !== null) {
      const colorAttachments = descriptor.colorAttachments;
      for (let i2 = 0; i2 < colorAttachments.length; i2++) {
        const colorAttachment = colorAttachments[i2];
        if (renderContext.clearColor) {
          colorAttachment.clearValue = i2 === 0 ? renderContext.clearColorValue : { r: 0, g: 0, b: 0, a: 1 };
          colorAttachment.loadOp = GPULoadOp.Clear;
          colorAttachment.storeOp = GPUStoreOp.Store;
        } else {
          colorAttachment.loadOp = GPULoadOp.Load;
          colorAttachment.storeOp = GPUStoreOp.Store;
        }
      }
    } else {
      const colorAttachment = descriptor.colorAttachments[0];
      if (renderContext.clearColor) {
        colorAttachment.clearValue = renderContext.clearColorValue;
        colorAttachment.loadOp = GPULoadOp.Clear;
        colorAttachment.storeOp = GPUStoreOp.Store;
      } else {
        colorAttachment.loadOp = GPULoadOp.Load;
        colorAttachment.storeOp = GPUStoreOp.Store;
      }
    }
    if (renderContext.depth) {
      if (renderContext.clearDepth) {
        depthStencilAttachment.depthClearValue = renderContext.clearDepthValue;
        depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      } else {
        depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      }
    }
    if (renderContext.stencil) {
      if (renderContext.clearStencil) {
        depthStencilAttachment.stencilClearValue = renderContext.clearStencilValue;
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      } else {
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      }
    }
    const encoder = device.createCommandEncoder({ label: "renderContext_" + renderContext.id });
    const currentPass = encoder.beginRenderPass(descriptor);
    renderContextData.descriptor = descriptor;
    renderContextData.encoder = encoder;
    renderContextData.currentPass = currentPass;
    renderContextData.currentSets = { attributes: {}, pipeline: null, index: null };
    renderContextData.renderBundles = [];
    if (renderContext.viewport) {
      this.updateViewport(renderContext);
    }
    if (renderContext.scissor) {
      const { x: x2, y: y2, width, height } = renderContext.scissorValue;
      currentPass.setScissorRect(x2, y2, width, height);
    }
  }
  finishRender(renderContext) {
    const renderContextData = this.get(renderContext);
    const occlusionQueryCount = renderContext.occlusionQueryCount;
    if (renderContextData.renderBundles.length > 0) {
      renderContextData.currentPass.executeBundles(renderContextData.renderBundles);
    }
    if (occlusionQueryCount > renderContextData.occlusionQueryIndex) {
      renderContextData.currentPass.endOcclusionQuery();
    }
    renderContextData.currentPass.end();
    if (occlusionQueryCount > 0) {
      const bufferSize = occlusionQueryCount * 8;
      let queryResolveBuffer = this.occludedResolveCache.get(bufferSize);
      if (queryResolveBuffer === void 0) {
        queryResolveBuffer = this.device.createBuffer(
          {
            size: bufferSize,
            usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
          }
        );
        this.occludedResolveCache.set(bufferSize, queryResolveBuffer);
      }
      const readBuffer = this.device.createBuffer(
        {
          size: bufferSize,
          usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
        }
      );
      renderContextData.encoder.resolveQuerySet(renderContextData.occlusionQuerySet, 0, occlusionQueryCount, queryResolveBuffer, 0);
      renderContextData.encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer, 0, bufferSize);
      renderContextData.occlusionQueryBuffer = readBuffer;
      this.resolveOccludedAsync(renderContext);
    }
    this.prepareTimestampBuffer(renderContext, renderContextData.encoder);
    this.device.queue.submit([renderContextData.encoder.finish()]);
    if (renderContext.textures !== null) {
      const textures = renderContext.textures;
      for (let i2 = 0; i2 < textures.length; i2++) {
        const texture2 = textures[i2];
        if (texture2.generateMipmaps === true) {
          this.textureUtils.generateMipmaps(texture2);
        }
      }
    }
  }
  isOccluded(renderContext, object2) {
    const renderContextData = this.get(renderContext);
    return renderContextData.occluded && renderContextData.occluded.has(object2);
  }
  async resolveOccludedAsync(renderContext) {
    const renderContextData = this.get(renderContext);
    const { currentOcclusionQueryBuffer, currentOcclusionQueryObjects } = renderContextData;
    if (currentOcclusionQueryBuffer && currentOcclusionQueryObjects) {
      const occluded = /* @__PURE__ */ new WeakSet();
      renderContextData.currentOcclusionQueryObjects = null;
      renderContextData.currentOcclusionQueryBuffer = null;
      await currentOcclusionQueryBuffer.mapAsync(GPUMapMode.READ);
      const buffer2 = currentOcclusionQueryBuffer.getMappedRange();
      const results = new BigUint64Array(buffer2);
      for (let i2 = 0; i2 < currentOcclusionQueryObjects.length; i2++) {
        if (results[i2] !== BigInt(0)) {
          occluded.add(currentOcclusionQueryObjects[i2]);
        }
      }
      currentOcclusionQueryBuffer.destroy();
      renderContextData.occluded = occluded;
    }
  }
  updateViewport(renderContext) {
    const { currentPass } = this.get(renderContext);
    const { x: x2, y: y2, width, height, minDepth, maxDepth: maxDepth2 } = renderContext.viewportValue;
    currentPass.setViewport(x2, y2, width, height, minDepth, maxDepth2);
  }
  clear(color3, depth2, stencil, renderTargetData = null) {
    const device = this.device;
    const renderer3 = this.renderer;
    let colorAttachments = [];
    let depthStencilAttachment;
    let clearValue;
    let supportsDepth;
    let supportsStencil;
    if (color3) {
      const clearColor = this.getClearColor();
      if (this.renderer.alpha === true) {
        const a2 = clearColor.a;
        clearValue = { r: clearColor.r * a2, g: clearColor.g * a2, b: clearColor.b * a2, a: a2 };
      } else {
        clearValue = { r: clearColor.r, g: clearColor.g, b: clearColor.b, a: clearColor.a };
      }
    }
    if (renderTargetData === null) {
      supportsDepth = renderer3.depth;
      supportsStencil = renderer3.stencil;
      const descriptor = this._getDefaultRenderPassDescriptor();
      if (color3) {
        colorAttachments = descriptor.colorAttachments;
        const colorAttachment = colorAttachments[0];
        colorAttachment.clearValue = clearValue;
        colorAttachment.loadOp = GPULoadOp.Clear;
        colorAttachment.storeOp = GPUStoreOp.Store;
      }
      if (supportsDepth || supportsStencil) {
        depthStencilAttachment = descriptor.depthStencilAttachment;
      }
    } else {
      supportsDepth = renderTargetData.depth;
      supportsStencil = renderTargetData.stencil;
      if (color3) {
        for (const texture2 of renderTargetData.textures) {
          const textureData = this.get(texture2);
          const textureView = textureData.texture.createView();
          let view, resolveTarget;
          if (textureData.msaaTexture !== void 0) {
            view = textureData.msaaTexture.createView();
            resolveTarget = textureView;
          } else {
            view = textureView;
            resolveTarget = void 0;
          }
          colorAttachments.push({
            view,
            resolveTarget,
            clearValue,
            loadOp: GPULoadOp.Clear,
            storeOp: GPUStoreOp.Store
          });
        }
      }
      if (supportsDepth || supportsStencil) {
        const depthTextureData = this.get(renderTargetData.depthTexture);
        depthStencilAttachment = {
          view: depthTextureData.texture.createView()
        };
      }
    }
    if (supportsDepth) {
      if (depth2) {
        depthStencilAttachment.depthLoadOp = GPULoadOp.Clear;
        depthStencilAttachment.depthClearValue = renderer3.getClearDepth();
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      } else {
        depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
        depthStencilAttachment.depthStoreOp = GPUStoreOp.Store;
      }
    }
    if (supportsStencil) {
      if (stencil) {
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Clear;
        depthStencilAttachment.stencilClearValue = renderer3.getClearStencil();
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      } else {
        depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
        depthStencilAttachment.stencilStoreOp = GPUStoreOp.Store;
      }
    }
    const encoder = device.createCommandEncoder({});
    const currentPass = encoder.beginRenderPass({
      colorAttachments,
      depthStencilAttachment
    });
    currentPass.end();
    device.queue.submit([encoder.finish()]);
  }
  // compute
  beginCompute(computeGroup) {
    const groupGPU = this.get(computeGroup);
    const descriptor = {};
    this.initTimestampQuery(computeGroup, descriptor);
    groupGPU.cmdEncoderGPU = this.device.createCommandEncoder();
    groupGPU.passEncoderGPU = groupGPU.cmdEncoderGPU.beginComputePass(descriptor);
  }
  compute(computeGroup, computeNode, bindings, pipeline) {
    const { passEncoderGPU } = this.get(computeGroup);
    const pipelineGPU = this.get(pipeline).pipeline;
    passEncoderGPU.setPipeline(pipelineGPU);
    for (let i2 = 0, l2 = bindings.length; i2 < l2; i2++) {
      const bindGroup = bindings[i2];
      const bindingsData = this.get(bindGroup);
      passEncoderGPU.setBindGroup(i2, bindingsData.group);
    }
    const maxComputeWorkgroupsPerDimension = this.device.limits.maxComputeWorkgroupsPerDimension;
    const computeNodeData = this.get(computeNode);
    if (computeNodeData.dispatchSize === void 0) computeNodeData.dispatchSize = { x: 0, y: 1, z: 1 };
    const { dispatchSize } = computeNodeData;
    if (computeNode.dispatchCount > maxComputeWorkgroupsPerDimension) {
      dispatchSize.x = Math.min(computeNode.dispatchCount, maxComputeWorkgroupsPerDimension);
      dispatchSize.y = Math.ceil(computeNode.dispatchCount / maxComputeWorkgroupsPerDimension);
    } else {
      dispatchSize.x = computeNode.dispatchCount;
    }
    passEncoderGPU.dispatchWorkgroups(
      dispatchSize.x,
      dispatchSize.y,
      dispatchSize.z
    );
  }
  finishCompute(computeGroup) {
    const groupData = this.get(computeGroup);
    groupData.passEncoderGPU.end();
    this.prepareTimestampBuffer(computeGroup, groupData.cmdEncoderGPU);
    this.device.queue.submit([groupData.cmdEncoderGPU.finish()]);
  }
  // render object
  draw(renderObject, info) {
    const { object: object2, geometry, context: context2, pipeline } = renderObject;
    const bindings = renderObject.getBindings();
    const renderContextData = this.get(context2);
    const pipelineGPU = this.get(pipeline).pipeline;
    const currentSets = renderContextData.currentSets;
    const passEncoderGPU = renderContextData.currentPass;
    if (currentSets.pipeline !== pipelineGPU) {
      passEncoderGPU.setPipeline(pipelineGPU);
      currentSets.pipeline = pipelineGPU;
    }
    for (let i2 = 0, l2 = bindings.length; i2 < l2; i2++) {
      const bindGroup = bindings[i2];
      const bindingsData = this.get(bindGroup);
      passEncoderGPU.setBindGroup(bindGroup.index, bindingsData.group);
    }
    const index7 = renderObject.getIndex();
    const hasIndex = index7 !== null;
    if (hasIndex === true) {
      if (currentSets.index !== index7) {
        const buffer2 = this.get(index7).buffer;
        const indexFormat = index7.array instanceof Uint16Array ? GPUIndexFormat.Uint16 : GPUIndexFormat.Uint32;
        passEncoderGPU.setIndexBuffer(buffer2, indexFormat);
        currentSets.index = index7;
      }
    }
    const vertexBuffers = renderObject.getVertexBuffers();
    for (let i2 = 0, l2 = vertexBuffers.length; i2 < l2; i2++) {
      const vertexBuffer = vertexBuffers[i2];
      if (currentSets.attributes[i2] !== vertexBuffer) {
        const buffer2 = this.get(vertexBuffer).buffer;
        passEncoderGPU.setVertexBuffer(i2, buffer2);
        currentSets.attributes[i2] = vertexBuffer;
      }
    }
    if (renderContextData.occlusionQuerySet !== void 0) {
      const lastObject = renderContextData.lastOcclusionObject;
      if (lastObject !== object2) {
        if (lastObject !== null && lastObject.occlusionTest === true) {
          passEncoderGPU.endOcclusionQuery();
          renderContextData.occlusionQueryIndex++;
        }
        if (object2.occlusionTest === true) {
          passEncoderGPU.beginOcclusionQuery(renderContextData.occlusionQueryIndex);
          renderContextData.occlusionQueryObjects[renderContextData.occlusionQueryIndex] = object2;
        }
        renderContextData.lastOcclusionObject = object2;
      }
    }
    const drawRange = renderObject.drawRange;
    const firstVertex = drawRange.start;
    const instanceCount = this.getInstanceCount(renderObject);
    if (instanceCount === 0) return;
    if (object2.isBatchedMesh === true) {
      const starts = object2._multiDrawStarts;
      const counts = object2._multiDrawCounts;
      const drawCount = object2._multiDrawCount;
      const drawInstances = object2._multiDrawInstances;
      const bytesPerElement = hasIndex ? index7.array.BYTES_PER_ELEMENT : 1;
      for (let i2 = 0; i2 < drawCount; i2++) {
        const count2 = drawInstances ? drawInstances[i2] : 1;
        const firstInstance = count2 > 1 ? 0 : i2;
        passEncoderGPU.drawIndexed(counts[i2], count2, starts[i2] / bytesPerElement, 0, firstInstance);
      }
    } else if (hasIndex === true) {
      const indexCount = drawRange.count !== Infinity ? drawRange.count : index7.count;
      passEncoderGPU.drawIndexed(indexCount, instanceCount, firstVertex, 0, 0);
      info.update(object2, indexCount, instanceCount);
    } else {
      const positionAttribute = geometry.attributes.position;
      const vertexCount = drawRange.count !== Infinity ? drawRange.count : positionAttribute.count;
      passEncoderGPU.draw(vertexCount, instanceCount, firstVertex, 0);
      info.update(object2, vertexCount, instanceCount);
    }
  }
  // cache key
  needsRenderUpdate(renderObject) {
    const data = this.get(renderObject);
    const { object: object2, material } = renderObject;
    const utils = this.utils;
    const sampleCount = utils.getSampleCountRenderContext(renderObject.context);
    const colorSpace = utils.getCurrentColorSpace(renderObject.context);
    const colorFormat = utils.getCurrentColorFormat(renderObject.context);
    const depthStencilFormat = utils.getCurrentDepthStencilFormat(renderObject.context);
    const primitiveTopology = utils.getPrimitiveTopology(object2, material);
    let needsUpdate = false;
    if (data.material !== material || data.materialVersion !== material.version || data.transparent !== material.transparent || data.blending !== material.blending || data.premultipliedAlpha !== material.premultipliedAlpha || data.blendSrc !== material.blendSrc || data.blendDst !== material.blendDst || data.blendEquation !== material.blendEquation || data.blendSrcAlpha !== material.blendSrcAlpha || data.blendDstAlpha !== material.blendDstAlpha || data.blendEquationAlpha !== material.blendEquationAlpha || data.colorWrite !== material.colorWrite || data.depthWrite !== material.depthWrite || data.depthTest !== material.depthTest || data.depthFunc !== material.depthFunc || data.stencilWrite !== material.stencilWrite || data.stencilFunc !== material.stencilFunc || data.stencilFail !== material.stencilFail || data.stencilZFail !== material.stencilZFail || data.stencilZPass !== material.stencilZPass || data.stencilFuncMask !== material.stencilFuncMask || data.stencilWriteMask !== material.stencilWriteMask || data.side !== material.side || data.alphaToCoverage !== material.alphaToCoverage || data.sampleCount !== sampleCount || data.colorSpace !== colorSpace || data.colorFormat !== colorFormat || data.depthStencilFormat !== depthStencilFormat || data.primitiveTopology !== primitiveTopology || data.clippingContextCacheKey !== renderObject.clippingContext.cacheKey) {
      data.material = material;
      data.materialVersion = material.version;
      data.transparent = material.transparent;
      data.blending = material.blending;
      data.premultipliedAlpha = material.premultipliedAlpha;
      data.blendSrc = material.blendSrc;
      data.blendDst = material.blendDst;
      data.blendEquation = material.blendEquation;
      data.blendSrcAlpha = material.blendSrcAlpha;
      data.blendDstAlpha = material.blendDstAlpha;
      data.blendEquationAlpha = material.blendEquationAlpha;
      data.colorWrite = material.colorWrite;
      data.depthWrite = material.depthWrite;
      data.depthTest = material.depthTest;
      data.depthFunc = material.depthFunc;
      data.stencilWrite = material.stencilWrite;
      data.stencilFunc = material.stencilFunc;
      data.stencilFail = material.stencilFail;
      data.stencilZFail = material.stencilZFail;
      data.stencilZPass = material.stencilZPass;
      data.stencilFuncMask = material.stencilFuncMask;
      data.stencilWriteMask = material.stencilWriteMask;
      data.side = material.side;
      data.alphaToCoverage = material.alphaToCoverage;
      data.sampleCount = sampleCount;
      data.colorSpace = colorSpace;
      data.colorFormat = colorFormat;
      data.depthStencilFormat = depthStencilFormat;
      data.primitiveTopology = primitiveTopology;
      data.clippingContextCacheKey = renderObject.clippingContext.cacheKey;
      needsUpdate = true;
    }
    return needsUpdate;
  }
  getRenderCacheKey(renderObject) {
    const { object: object2, material } = renderObject;
    const utils = this.utils;
    const renderContext = renderObject.context;
    return [
      material.transparent,
      material.blending,
      material.premultipliedAlpha,
      material.blendSrc,
      material.blendDst,
      material.blendEquation,
      material.blendSrcAlpha,
      material.blendDstAlpha,
      material.blendEquationAlpha,
      material.colorWrite,
      material.depthWrite,
      material.depthTest,
      material.depthFunc,
      material.stencilWrite,
      material.stencilFunc,
      material.stencilFail,
      material.stencilZFail,
      material.stencilZPass,
      material.stencilFuncMask,
      material.stencilWriteMask,
      material.side,
      utils.getSampleCountRenderContext(renderContext),
      utils.getCurrentColorSpace(renderContext),
      utils.getCurrentColorFormat(renderContext),
      utils.getCurrentDepthStencilFormat(renderContext),
      utils.getPrimitiveTopology(object2, material),
      renderObject.clippingContext.cacheKey
    ].join();
  }
  // textures
  createSampler(texture2) {
    this.textureUtils.createSampler(texture2);
  }
  destroySampler(texture2) {
    this.textureUtils.destroySampler(texture2);
  }
  createDefaultTexture(texture2) {
    this.textureUtils.createDefaultTexture(texture2);
  }
  createTexture(texture2, options) {
    this.textureUtils.createTexture(texture2, options);
  }
  updateTexture(texture2, options) {
    this.textureUtils.updateTexture(texture2, options);
  }
  generateMipmaps(texture2) {
    this.textureUtils.generateMipmaps(texture2);
  }
  destroyTexture(texture2) {
    this.textureUtils.destroyTexture(texture2);
  }
  copyTextureToBuffer(texture2, x2, y2, width, height) {
    return this.textureUtils.copyTextureToBuffer(texture2, x2, y2, width, height);
  }
  initTimestampQuery(renderContext, descriptor) {
    if (!this.trackTimestamp) return;
    const renderContextData = this.get(renderContext);
    if (!renderContextData.timeStampQuerySet) {
      const timeStampQuerySet = this.device.createQuerySet({ type: "timestamp", count: 2 });
      const timestampWrites = {
        querySet: timeStampQuerySet,
        beginningOfPassWriteIndex: 0,
        // Write timestamp in index 0 when pass begins.
        endOfPassWriteIndex: 1
        // Write timestamp in index 1 when pass ends.
      };
      Object.assign(descriptor, {
        timestampWrites
      });
      renderContextData.timeStampQuerySet = timeStampQuerySet;
    }
  }
  // timestamp utils
  prepareTimestampBuffer(renderContext, encoder) {
    if (!this.trackTimestamp) return;
    const renderContextData = this.get(renderContext);
    const size = 2 * BigInt64Array.BYTES_PER_ELEMENT;
    if (renderContextData.currentTimestampQueryBuffers === void 0) {
      renderContextData.currentTimestampQueryBuffers = {
        resolveBuffer: this.device.createBuffer({
          label: "timestamp resolve buffer",
          size,
          usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC
        }),
        resultBuffer: this.device.createBuffer({
          label: "timestamp result buffer",
          size,
          usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
        }),
        isMappingPending: false
      };
    }
    const { resolveBuffer, resultBuffer, isMappingPending } = renderContextData.currentTimestampQueryBuffers;
    if (isMappingPending === true) return;
    encoder.resolveQuerySet(renderContextData.timeStampQuerySet, 0, 2, resolveBuffer, 0);
    encoder.copyBufferToBuffer(resolveBuffer, 0, resultBuffer, 0, size);
  }
  async resolveTimestampAsync(renderContext, type = "render") {
    if (!this.trackTimestamp) return;
    const renderContextData = this.get(renderContext);
    if (renderContextData.currentTimestampQueryBuffers === void 0) return;
    const { resultBuffer, isMappingPending } = renderContextData.currentTimestampQueryBuffers;
    if (isMappingPending === true) return;
    renderContextData.currentTimestampQueryBuffers.isMappingPending = true;
    resultBuffer.mapAsync(GPUMapMode.READ).then(() => {
      const times = new BigUint64Array(resultBuffer.getMappedRange());
      const duration = Number(times[1] - times[0]) / 1e6;
      this.renderer.info.updateTimestamp(type, duration);
      resultBuffer.unmap();
      renderContextData.currentTimestampQueryBuffers.isMappingPending = false;
    });
  }
  // node builder
  createNodeBuilder(object2, renderer3) {
    return new WGSLNodeBuilder(object2, renderer3);
  }
  // program
  createProgram(program) {
    const programGPU = this.get(program);
    programGPU.module = {
      module: this.device.createShaderModule({ code: program.code, label: program.stage }),
      entryPoint: "main"
    };
  }
  destroyProgram(program) {
    this.delete(program);
  }
  // pipelines
  createRenderPipeline(renderObject, promises) {
    this.pipelineUtils.createRenderPipeline(renderObject, promises);
  }
  createComputePipeline(computePipeline, bindings) {
    this.pipelineUtils.createComputePipeline(computePipeline, bindings);
  }
  beginBundle(renderContext) {
    const renderContextData = this.get(renderContext);
    renderContextData._currentPass = renderContextData.currentPass;
    renderContextData._currentSets = renderContextData.currentSets;
    renderContextData.currentSets = { attributes: {}, pipeline: null, index: null };
    renderContextData.currentPass = this.pipelineUtils.createBundleEncoder(renderContext);
  }
  finishBundle(renderContext, bundle) {
    const renderContextData = this.get(renderContext);
    const bundleEncoder = renderContextData.currentPass;
    const bundleGPU = bundleEncoder.finish();
    this.get(bundle).bundleGPU = bundleGPU;
    renderContextData.currentSets = renderContextData._currentSets;
    renderContextData.currentPass = renderContextData._currentPass;
  }
  addBundle(renderContext, bundle) {
    const renderContextData = this.get(renderContext);
    renderContextData.renderBundles.push(this.get(bundle).bundleGPU);
  }
  // bindings
  createBindings(bindGroup) {
    this.bindingUtils.createBindings(bindGroup);
  }
  updateBindings(bindGroup) {
    this.bindingUtils.createBindings(bindGroup);
  }
  updateBinding(binding) {
    this.bindingUtils.updateBinding(binding);
  }
  // attributes
  createIndexAttribute(attribute2) {
    this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
  }
  createAttribute(attribute2) {
    this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
  }
  createStorageAttribute(attribute2) {
    this.attributeUtils.createAttribute(attribute2, GPUBufferUsage.STORAGE | GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST);
  }
  updateAttribute(attribute2) {
    this.attributeUtils.updateAttribute(attribute2);
  }
  destroyAttribute(attribute2) {
    this.attributeUtils.destroyAttribute(attribute2);
  }
  // canvas
  updateSize() {
    this.colorBuffer = this.textureUtils.getColorBuffer();
    this.defaultRenderPassdescriptor = null;
  }
  // utils public
  getMaxAnisotropy() {
    return 16;
  }
  hasFeature(name) {
    return this.device.features.has(name);
  }
  copyTextureToTexture(srcTexture, dstTexture, srcRegion = null, dstPosition = null, level = 0) {
    let dstX = 0;
    let dstY = 0;
    let srcX = 0;
    let srcY = 0;
    let srcWidth = srcTexture.image.width;
    let srcHeight = srcTexture.image.height;
    if (srcRegion !== null) {
      srcX = srcRegion.x;
      srcY = srcRegion.y;
      srcWidth = srcRegion.width;
      srcHeight = srcRegion.height;
    }
    if (dstPosition !== null) {
      dstX = dstPosition.x;
      dstY = dstPosition.y;
    }
    const encoder = this.device.createCommandEncoder({ label: "copyTextureToTexture_" + srcTexture.id + "_" + dstTexture.id });
    const sourceGPU = this.get(srcTexture).texture;
    const destinationGPU = this.get(dstTexture).texture;
    encoder.copyTextureToTexture(
      {
        texture: sourceGPU,
        mipLevel: level,
        origin: { x: srcX, y: srcY, z: 0 }
      },
      {
        texture: destinationGPU,
        mipLevel: level,
        origin: { x: dstX, y: dstY, z: 0 }
      },
      [
        srcWidth,
        srcHeight
      ]
    );
    this.device.queue.submit([encoder.finish()]);
  }
  copyFramebufferToTexture(texture2, renderContext) {
    const renderContextData = this.get(renderContext);
    const { encoder, descriptor } = renderContextData;
    let sourceGPU = null;
    if (renderContext.renderTarget) {
      if (texture2.isDepthTexture) {
        sourceGPU = this.get(renderContext.depthTexture).texture;
      } else {
        sourceGPU = this.get(renderContext.textures[0]).texture;
      }
    } else {
      if (texture2.isDepthTexture) {
        sourceGPU = this.textureUtils.getDepthBuffer(renderContext.depth, renderContext.stencil);
      } else {
        sourceGPU = this.context.getCurrentTexture();
      }
    }
    const destinationGPU = this.get(texture2).texture;
    if (sourceGPU.format !== destinationGPU.format) {
      console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.", sourceGPU.format, destinationGPU.format);
      return;
    }
    renderContextData.currentPass.end();
    encoder.copyTextureToTexture(
      {
        texture: sourceGPU,
        origin: { x: 0, y: 0, z: 0 }
      },
      {
        texture: destinationGPU
      },
      [
        texture2.image.width,
        texture2.image.height
      ]
    );
    if (texture2.generateMipmaps) this.textureUtils.generateMipmaps(texture2);
    for (let i2 = 0; i2 < descriptor.colorAttachments.length; i2++) {
      descriptor.colorAttachments[i2].loadOp = GPULoadOp.Load;
    }
    if (renderContext.depth) descriptor.depthStencilAttachment.depthLoadOp = GPULoadOp.Load;
    if (renderContext.stencil) descriptor.depthStencilAttachment.stencilLoadOp = GPULoadOp.Load;
    renderContextData.currentPass = encoder.beginRenderPass(descriptor);
    renderContextData.currentSets = { attributes: {}, pipeline: null, index: null };
  }
};
var WebGPURenderer = class extends StandardRenderer {
  constructor(parameters = {}) {
    let BackendClass;
    if (parameters.forceWebGL) {
      BackendClass = WebGLBackend;
    } else {
      BackendClass = WebGPUBackend;
      parameters.getFallback = () => {
        console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend.");
        return new WebGLBackend(parameters);
      };
    }
    const backend = new BackendClass(parameters);
    super(backend, parameters);
    this.isWebGPURenderer = true;
  }
};
var _material = new NodeMaterial();
var _quadMesh = new QuadMesh(_material);
var StorageInstancedBufferAttribute = class extends InstancedBufferAttribute2 {
  constructor(array3, itemSize, typeClass = Float32Array) {
    if (ArrayBuffer.isView(array3) === false) array3 = new typeClass(array3 * itemSize);
    super(array3, itemSize);
    this.isStorageInstancedBufferAttribute = true;
  }
};
var superFromTypeFunction = MaterialLoader.createMaterialFromType;
MaterialLoader.createMaterialFromType = function(type) {
  const material = createNodeMaterialFromType(type);
  if (material !== void 0) {
    return material;
  }
  return superFromTypeFunction.call(this, type);
};
if (typeof __THREE_DEVTOOLS__ !== "undefined") {
  __THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register", { detail: {
    revision: REVISION2
  } }));
}
if (typeof window !== "undefined") {
  if (window.__THREE__) {
    console.warn("WARNING: Multiple instances of Three.js being imported.");
  } else {
    window.__THREE__ = REVISION2;
  }
}

// node_modules/three/examples/jsm/lines/LineSegmentsGeometry.js
var _box4 = new Box3();
var _vector6 = new Vector3();
var LineSegmentsGeometry = class extends InstancedBufferGeometry {
  constructor() {
    super();
    this.isLineSegmentsGeometry = true;
    this.type = "LineSegmentsGeometry";
    const positions = [-1, 2, 0, 1, 2, 0, -1, 1, 0, 1, 1, 0, -1, 0, 0, 1, 0, 0, -1, -1, 0, 1, -1, 0];
    const uvs = [-1, 2, 1, 2, -1, 1, 1, 1, -1, -1, 1, -1, -1, -2, 1, -2];
    const index7 = [0, 2, 1, 2, 3, 1, 2, 4, 3, 4, 5, 3, 4, 6, 5, 6, 7, 5];
    this.setIndex(index7);
    this.setAttribute("position", new Float32BufferAttribute(positions, 3));
    this.setAttribute("uv", new Float32BufferAttribute(uvs, 2));
  }
  applyMatrix4(matrix) {
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0) {
      start.applyMatrix4(matrix);
      end.applyMatrix4(matrix);
      start.needsUpdate = true;
    }
    if (this.boundingBox !== null) {
      this.computeBoundingBox();
    }
    if (this.boundingSphere !== null) {
      this.computeBoundingSphere();
    }
    return this;
  }
  setPositions(array3) {
    let lineSegments;
    if (array3 instanceof Float32Array) {
      lineSegments = array3;
    } else if (Array.isArray(array3)) {
      lineSegments = new Float32Array(array3);
    }
    const instanceBuffer = new InstancedInterleavedBuffer(lineSegments, 6, 1);
    this.setAttribute("instanceStart", new InterleavedBufferAttribute(instanceBuffer, 3, 0));
    this.setAttribute("instanceEnd", new InterleavedBufferAttribute(instanceBuffer, 3, 3));
    this.computeBoundingBox();
    this.computeBoundingSphere();
    return this;
  }
  setColors(array3) {
    let colors;
    if (array3 instanceof Float32Array) {
      colors = array3;
    } else if (Array.isArray(array3)) {
      colors = new Float32Array(array3);
    }
    const instanceColorBuffer = new InstancedInterleavedBuffer(colors, 6, 1);
    this.setAttribute("instanceColorStart", new InterleavedBufferAttribute(instanceColorBuffer, 3, 0));
    this.setAttribute("instanceColorEnd", new InterleavedBufferAttribute(instanceColorBuffer, 3, 3));
    return this;
  }
  fromWireframeGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromEdgesGeometry(geometry) {
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  fromMesh(mesh) {
    this.fromWireframeGeometry(new WireframeGeometry(mesh.geometry));
    return this;
  }
  fromLineSegments(lineSegments) {
    const geometry = lineSegments.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
  computeBoundingBox() {
    if (this.boundingBox === null) {
      this.boundingBox = new Box3();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      this.boundingBox.setFromBufferAttribute(start);
      _box4.setFromBufferAttribute(end);
      this.boundingBox.union(_box4);
    }
  }
  computeBoundingSphere() {
    if (this.boundingSphere === null) {
      this.boundingSphere = new Sphere();
    }
    if (this.boundingBox === null) {
      this.computeBoundingBox();
    }
    const start = this.attributes.instanceStart;
    const end = this.attributes.instanceEnd;
    if (start !== void 0 && end !== void 0) {
      const center = this.boundingSphere.center;
      this.boundingBox.getCenter(center);
      let maxRadiusSq = 0;
      for (let i2 = 0, il = start.count; i2 < il; i2++) {
        _vector6.fromBufferAttribute(start, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector6));
        _vector6.fromBufferAttribute(end, i2);
        maxRadiusSq = Math.max(maxRadiusSq, center.distanceToSquared(_vector6));
      }
      this.boundingSphere.radius = Math.sqrt(maxRadiusSq);
      if (isNaN(this.boundingSphere.radius)) {
        console.error("THREE.LineSegmentsGeometry.computeBoundingSphere(): Computed radius is NaN. The instanced position data is likely to have NaN values.", this);
      }
    }
  }
  toJSON() {
  }
  applyMatrix(matrix) {
    console.warn("THREE.LineSegmentsGeometry: applyMatrix() has been renamed to applyMatrix4().");
    return this.applyMatrix4(matrix);
  }
};

// node_modules/three/examples/jsm/lines/LineMaterial.js
UniformsLib.line = {
  worldUnits: { value: 1 },
  linewidth: { value: 1 },
  resolution: { value: new Vector2(1, 1) },
  dashOffset: { value: 0 },
  dashScale: { value: 1 },
  dashSize: { value: 1 },
  gapSize: { value: 1 }
  // todo FIX - maybe change to totalSize
};
ShaderLib["line"] = {
  uniforms: UniformsUtils.merge([
    UniformsLib.common,
    UniformsLib.fog,
    UniformsLib.line
  ]),
  vertexShader: (
    /* glsl */
    `
		#include <common>
		#include <color_pars_vertex>
		#include <fog_pars_vertex>
		#include <logdepthbuf_pars_vertex>
		#include <clipping_planes_pars_vertex>

		uniform float linewidth;
		uniform vec2 resolution;

		attribute vec3 instanceStart;
		attribute vec3 instanceEnd;

		attribute vec3 instanceColorStart;
		attribute vec3 instanceColorEnd;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#ifdef USE_DASH

			uniform float dashScale;
			attribute float instanceDistanceStart;
			attribute float instanceDistanceEnd;
			varying float vLineDistance;

		#endif

		void trimSegment( const in vec4 start, inout vec4 end ) {

			// trim end segment so it terminates between the camera plane and the near plane

			// conservative estimate of the near plane
			float a = projectionMatrix[ 2 ][ 2 ]; // 3nd entry in 3th column
			float b = projectionMatrix[ 3 ][ 2 ]; // 3nd entry in 4th column
			float nearEstimate = - 0.5 * b / a;

			float alpha = ( nearEstimate - start.z ) / ( end.z - start.z );

			end.xyz = mix( start.xyz, end.xyz, alpha );

		}

		void main() {

			#ifdef USE_COLOR

				vColor.xyz = ( position.y < 0.5 ) ? instanceColorStart : instanceColorEnd;

			#endif

			#ifdef USE_DASH

				vLineDistance = ( position.y < 0.5 ) ? dashScale * instanceDistanceStart : dashScale * instanceDistanceEnd;
				vUv = uv;

			#endif

			float aspect = resolution.x / resolution.y;

			// camera space
			vec4 start = modelViewMatrix * vec4( instanceStart, 1.0 );
			vec4 end = modelViewMatrix * vec4( instanceEnd, 1.0 );

			#ifdef WORLD_UNITS

				worldStart = start.xyz;
				worldEnd = end.xyz;

			#else

				vUv = uv;

			#endif

			// special case for perspective projection, and segments that terminate either in, or behind, the camera plane
			// clearly the gpu firmware has a way of addressing this issue when projecting into ndc space
			// but we need to perform ndc-space calculations in the shader, so we must address this issue directly
			// perhaps there is a more elegant solution -- WestLangley

			bool perspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 ); // 4th entry in the 3rd column

			if ( perspective ) {

				if ( start.z < 0.0 && end.z >= 0.0 ) {

					trimSegment( start, end );

				} else if ( end.z < 0.0 && start.z >= 0.0 ) {

					trimSegment( end, start );

				}

			}

			// clip space
			vec4 clipStart = projectionMatrix * start;
			vec4 clipEnd = projectionMatrix * end;

			// ndc space
			vec3 ndcStart = clipStart.xyz / clipStart.w;
			vec3 ndcEnd = clipEnd.xyz / clipEnd.w;

			// direction
			vec2 dir = ndcEnd.xy - ndcStart.xy;

			// account for clip-space aspect ratio
			dir.x *= aspect;
			dir = normalize( dir );

			#ifdef WORLD_UNITS

				vec3 worldDir = normalize( end.xyz - start.xyz );
				vec3 tmpFwd = normalize( mix( start.xyz, end.xyz, 0.5 ) );
				vec3 worldUp = normalize( cross( worldDir, tmpFwd ) );
				vec3 worldFwd = cross( worldDir, worldUp );
				worldPos = position.y < 0.5 ? start: end;

				// height offset
				float hw = linewidth * 0.5;
				worldPos.xyz += position.x < 0.0 ? hw * worldUp : - hw * worldUp;

				// don't extend the line if we're rendering dashes because we
				// won't be rendering the endcaps
				#ifndef USE_DASH

					// cap extension
					worldPos.xyz += position.y < 0.5 ? - hw * worldDir : hw * worldDir;

					// add width to the box
					worldPos.xyz += worldFwd * hw;

					// endcaps
					if ( position.y > 1.0 || position.y < 0.0 ) {

						worldPos.xyz -= worldFwd * 2.0 * hw;

					}

				#endif

				// project the worldpos
				vec4 clip = projectionMatrix * worldPos;

				// shift the depth of the projected points so the line
				// segments overlap neatly
				vec3 clipPose = ( position.y < 0.5 ) ? ndcStart : ndcEnd;
				clip.z = clipPose.z * clip.w;

			#else

				vec2 offset = vec2( dir.y, - dir.x );
				// undo aspect ratio adjustment
				dir.x /= aspect;
				offset.x /= aspect;

				// sign flip
				if ( position.x < 0.0 ) offset *= - 1.0;

				// endcaps
				if ( position.y < 0.0 ) {

					offset += - dir;

				} else if ( position.y > 1.0 ) {

					offset += dir;

				}

				// adjust for linewidth
				offset *= linewidth;

				// adjust for clip-space to screen-space conversion // maybe resolution should be based on viewport ...
				offset /= resolution.y;

				// select end
				vec4 clip = ( position.y < 0.5 ) ? clipStart : clipEnd;

				// back to clip space
				offset *= clip.w;

				clip.xy += offset;

			#endif

			gl_Position = clip;

			vec4 mvPosition = ( position.y < 0.5 ) ? start : end; // this is an approximation

			#include <logdepthbuf_vertex>
			#include <clipping_planes_vertex>
			#include <fog_vertex>

		}
		`
  ),
  fragmentShader: (
    /* glsl */
    `
		uniform vec3 diffuse;
		uniform float opacity;
		uniform float linewidth;

		#ifdef USE_DASH

			uniform float dashOffset;
			uniform float dashSize;
			uniform float gapSize;

		#endif

		varying float vLineDistance;

		#ifdef WORLD_UNITS

			varying vec4 worldPos;
			varying vec3 worldStart;
			varying vec3 worldEnd;

			#ifdef USE_DASH

				varying vec2 vUv;

			#endif

		#else

			varying vec2 vUv;

		#endif

		#include <common>
		#include <color_pars_fragment>
		#include <fog_pars_fragment>
		#include <logdepthbuf_pars_fragment>
		#include <clipping_planes_pars_fragment>

		vec2 closestLineToLine(vec3 p1, vec3 p2, vec3 p3, vec3 p4) {

			float mua;
			float mub;

			vec3 p13 = p1 - p3;
			vec3 p43 = p4 - p3;

			vec3 p21 = p2 - p1;

			float d1343 = dot( p13, p43 );
			float d4321 = dot( p43, p21 );
			float d1321 = dot( p13, p21 );
			float d4343 = dot( p43, p43 );
			float d2121 = dot( p21, p21 );

			float denom = d2121 * d4343 - d4321 * d4321;

			float numer = d1343 * d4321 - d1321 * d4343;

			mua = numer / denom;
			mua = clamp( mua, 0.0, 1.0 );
			mub = ( d1343 + d4321 * ( mua ) ) / d4343;
			mub = clamp( mub, 0.0, 1.0 );

			return vec2( mua, mub );

		}

		void main() {

			#include <clipping_planes_fragment>

			#ifdef USE_DASH

				if ( vUv.y < - 1.0 || vUv.y > 1.0 ) discard; // discard endcaps

				if ( mod( vLineDistance + dashOffset, dashSize + gapSize ) > dashSize ) discard; // todo - FIX

			#endif

			float alpha = opacity;

			#ifdef WORLD_UNITS

				// Find the closest points on the view ray and the line segment
				vec3 rayEnd = normalize( worldPos.xyz ) * 1e5;
				vec3 lineDir = worldEnd - worldStart;
				vec2 params = closestLineToLine( worldStart, worldEnd, vec3( 0.0, 0.0, 0.0 ), rayEnd );

				vec3 p1 = worldStart + lineDir * params.x;
				vec3 p2 = rayEnd * params.y;
				vec3 delta = p1 - p2;
				float len = length( delta );
				float norm = len / linewidth;

				#ifndef USE_DASH

					#ifdef USE_ALPHA_TO_COVERAGE

						float dnorm = fwidth( norm );
						alpha = 1.0 - smoothstep( 0.5 - dnorm, 0.5 + dnorm, norm );

					#else

						if ( norm > 0.5 ) {

							discard;

						}

					#endif

				#endif

			#else

				#ifdef USE_ALPHA_TO_COVERAGE

					// artifacts appear on some hardware if a derivative is taken within a conditional
					float a = vUv.x;
					float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
					float len2 = a * a + b * b;
					float dlen = fwidth( len2 );

					if ( abs( vUv.y ) > 1.0 ) {

						alpha = 1.0 - smoothstep( 1.0 - dlen, 1.0 + dlen, len2 );

					}

				#else

					if ( abs( vUv.y ) > 1.0 ) {

						float a = vUv.x;
						float b = ( vUv.y > 0.0 ) ? vUv.y - 1.0 : vUv.y + 1.0;
						float len2 = a * a + b * b;

						if ( len2 > 1.0 ) discard;

					}

				#endif

			#endif

			vec4 diffuseColor = vec4( diffuse, alpha );

			#include <logdepthbuf_fragment>
			#include <color_fragment>

			gl_FragColor = vec4( diffuseColor.rgb, alpha );

			#include <tonemapping_fragment>
			#include <colorspace_fragment>
			#include <fog_fragment>
			#include <premultiplied_alpha_fragment>

		}
		`
  )
};
var LineMaterial = class extends ShaderMaterial {
  constructor(parameters) {
    super({
      type: "LineMaterial",
      uniforms: UniformsUtils.clone(ShaderLib["line"].uniforms),
      vertexShader: ShaderLib["line"].vertexShader,
      fragmentShader: ShaderLib["line"].fragmentShader,
      clipping: true
      // required for clipping support
    });
    this.isLineMaterial = true;
    this.setValues(parameters);
  }
  get color() {
    return this.uniforms.diffuse.value;
  }
  set color(value) {
    this.uniforms.diffuse.value = value;
  }
  get worldUnits() {
    return "WORLD_UNITS" in this.defines;
  }
  set worldUnits(value) {
    if (value === true) {
      this.defines.WORLD_UNITS = "";
    } else {
      delete this.defines.WORLD_UNITS;
    }
  }
  get linewidth() {
    return this.uniforms.linewidth.value;
  }
  set linewidth(value) {
    if (!this.uniforms.linewidth) return;
    this.uniforms.linewidth.value = value;
  }
  get dashed() {
    return "USE_DASH" in this.defines;
  }
  set dashed(value) {
    if (value === true !== this.dashed) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_DASH = "";
    } else {
      delete this.defines.USE_DASH;
    }
  }
  get dashScale() {
    return this.uniforms.dashScale.value;
  }
  set dashScale(value) {
    this.uniforms.dashScale.value = value;
  }
  get dashSize() {
    return this.uniforms.dashSize.value;
  }
  set dashSize(value) {
    this.uniforms.dashSize.value = value;
  }
  get dashOffset() {
    return this.uniforms.dashOffset.value;
  }
  set dashOffset(value) {
    this.uniforms.dashOffset.value = value;
  }
  get gapSize() {
    return this.uniforms.gapSize.value;
  }
  set gapSize(value) {
    this.uniforms.gapSize.value = value;
  }
  get opacity() {
    return this.uniforms.opacity.value;
  }
  set opacity(value) {
    if (!this.uniforms) return;
    this.uniforms.opacity.value = value;
  }
  get resolution() {
    return this.uniforms.resolution.value;
  }
  set resolution(value) {
    this.uniforms.resolution.value.copy(value);
  }
  get alphaToCoverage() {
    return "USE_ALPHA_TO_COVERAGE" in this.defines;
  }
  set alphaToCoverage(value) {
    if (!this.defines) return;
    if (value === true !== this.alphaToCoverage) {
      this.needsUpdate = true;
    }
    if (value === true) {
      this.defines.USE_ALPHA_TO_COVERAGE = "";
    } else {
      delete this.defines.USE_ALPHA_TO_COVERAGE;
    }
  }
};

// node_modules/three/examples/jsm/lines/LineSegments2.js
var _viewport = new Vector4();
var _start3 = new Vector3();
var _end3 = new Vector3();
var _start4 = new Vector4();
var _end4 = new Vector4();
var _ssOrigin = new Vector4();
var _ssOrigin3 = new Vector3();
var _mvMatrix = new Matrix4();
var _line = new Line3();
var _closestPoint = new Vector3();
var _box5 = new Box3();
var _sphere3 = new Sphere();
var _clipToWorldVector = new Vector4();
var _ray3;
var _lineWidth;
function getWorldSpaceHalfWidth(camera3, distance3, resolution3) {
  _clipToWorldVector.set(0, 0, -distance3, 1).applyMatrix4(camera3.projectionMatrix);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  _clipToWorldVector.x = _lineWidth / resolution3.width;
  _clipToWorldVector.y = _lineWidth / resolution3.height;
  _clipToWorldVector.applyMatrix4(camera3.projectionMatrixInverse);
  _clipToWorldVector.multiplyScalar(1 / _clipToWorldVector.w);
  return Math.abs(Math.max(_clipToWorldVector.x, _clipToWorldVector.y));
}
function raycastWorldUnits(lineSegments, intersects4) {
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  for (let i2 = 0, l2 = segmentCount; i2 < l2; i2++) {
    _line.start.fromBufferAttribute(instanceStart, i2);
    _line.end.fromBufferAttribute(instanceEnd, i2);
    _line.applyMatrix4(matrixWorld);
    const pointOnLine = new Vector3();
    const point2 = new Vector3();
    _ray3.distanceSqToSegment(_line.start, _line.end, point2, pointOnLine);
    const isInside = point2.distanceTo(pointOnLine) < _lineWidth * 0.5;
    if (isInside) {
      intersects4.push({
        point: point2,
        pointOnLine,
        distance: _ray3.origin.distanceTo(point2),
        object: lineSegments,
        face: null,
        faceIndex: i2,
        uv: null,
        uv1: null
      });
    }
  }
}
function raycastScreenSpace(lineSegments, camera3, intersects4) {
  const projectionMatrix = camera3.projectionMatrix;
  const material = lineSegments.material;
  const resolution3 = material.resolution;
  const matrixWorld = lineSegments.matrixWorld;
  const geometry = lineSegments.geometry;
  const instanceStart = geometry.attributes.instanceStart;
  const instanceEnd = geometry.attributes.instanceEnd;
  const segmentCount = Math.min(geometry.instanceCount, instanceStart.count);
  const near = -camera3.near;
  _ray3.at(1, _ssOrigin);
  _ssOrigin.w = 1;
  _ssOrigin.applyMatrix4(camera3.matrixWorldInverse);
  _ssOrigin.applyMatrix4(projectionMatrix);
  _ssOrigin.multiplyScalar(1 / _ssOrigin.w);
  _ssOrigin.x *= resolution3.x / 2;
  _ssOrigin.y *= resolution3.y / 2;
  _ssOrigin.z = 0;
  _ssOrigin3.copy(_ssOrigin);
  _mvMatrix.multiplyMatrices(camera3.matrixWorldInverse, matrixWorld);
  for (let i2 = 0, l2 = segmentCount; i2 < l2; i2++) {
    _start4.fromBufferAttribute(instanceStart, i2);
    _end4.fromBufferAttribute(instanceEnd, i2);
    _start4.w = 1;
    _end4.w = 1;
    _start4.applyMatrix4(_mvMatrix);
    _end4.applyMatrix4(_mvMatrix);
    const isBehindCameraNear = _start4.z > near && _end4.z > near;
    if (isBehindCameraNear) {
      continue;
    }
    if (_start4.z > near) {
      const deltaDist = _start4.z - _end4.z;
      const t4 = (_start4.z - near) / deltaDist;
      _start4.lerp(_end4, t4);
    } else if (_end4.z > near) {
      const deltaDist = _end4.z - _start4.z;
      const t4 = (_end4.z - near) / deltaDist;
      _end4.lerp(_start4, t4);
    }
    _start4.applyMatrix4(projectionMatrix);
    _end4.applyMatrix4(projectionMatrix);
    _start4.multiplyScalar(1 / _start4.w);
    _end4.multiplyScalar(1 / _end4.w);
    _start4.x *= resolution3.x / 2;
    _start4.y *= resolution3.y / 2;
    _end4.x *= resolution3.x / 2;
    _end4.y *= resolution3.y / 2;
    _line.start.copy(_start4);
    _line.start.z = 0;
    _line.end.copy(_end4);
    _line.end.z = 0;
    const param = _line.closestPointToPointParameter(_ssOrigin3, true);
    _line.at(param, _closestPoint);
    const zPos = MathUtils.lerp(_start4.z, _end4.z, param);
    const isInClipSpace = zPos >= -1 && zPos <= 1;
    const isInside = _ssOrigin3.distanceTo(_closestPoint) < _lineWidth * 0.5;
    if (isInClipSpace && isInside) {
      _line.start.fromBufferAttribute(instanceStart, i2);
      _line.end.fromBufferAttribute(instanceEnd, i2);
      _line.start.applyMatrix4(matrixWorld);
      _line.end.applyMatrix4(matrixWorld);
      const pointOnLine = new Vector3();
      const point2 = new Vector3();
      _ray3.distanceSqToSegment(_line.start, _line.end, point2, pointOnLine);
      intersects4.push({
        point: point2,
        pointOnLine,
        distance: _ray3.origin.distanceTo(point2),
        object: lineSegments,
        face: null,
        faceIndex: i2,
        uv: null,
        uv1: null
      });
    }
  }
}
var LineSegments2 = class extends Mesh {
  constructor(geometry = new LineSegmentsGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLineSegments2 = true;
    this.type = "LineSegments2";
  }
  // for backwards-compatibility, but could be a method of LineSegmentsGeometry...
  computeLineDistances() {
    const geometry = this.geometry;
    const instanceStart = geometry.attributes.instanceStart;
    const instanceEnd = geometry.attributes.instanceEnd;
    const lineDistances = new Float32Array(2 * instanceStart.count);
    for (let i2 = 0, j2 = 0, l2 = instanceStart.count; i2 < l2; i2++, j2 += 2) {
      _start3.fromBufferAttribute(instanceStart, i2);
      _end3.fromBufferAttribute(instanceEnd, i2);
      lineDistances[j2] = j2 === 0 ? 0 : lineDistances[j2 - 1];
      lineDistances[j2 + 1] = lineDistances[j2] + _start3.distanceTo(_end3);
    }
    const instanceDistanceBuffer = new InstancedInterleavedBuffer(lineDistances, 2, 1);
    geometry.setAttribute("instanceDistanceStart", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 0));
    geometry.setAttribute("instanceDistanceEnd", new InterleavedBufferAttribute(instanceDistanceBuffer, 1, 1));
    return this;
  }
  raycast(raycaster, intersects4) {
    const worldUnits = this.material.worldUnits;
    const camera3 = raycaster.camera;
    if (camera3 === null && !worldUnits) {
      console.error('LineSegments2: "Raycaster.camera" needs to be set in order to raycast against LineSegments2 while worldUnits is set to false.');
    }
    const threshold2 = raycaster.params.Line2 !== void 0 ? raycaster.params.Line2.threshold || 0 : 0;
    _ray3 = raycaster.ray;
    const matrixWorld = this.matrixWorld;
    const geometry = this.geometry;
    const material = this.material;
    _lineWidth = material.linewidth + threshold2;
    if (geometry.boundingSphere === null) {
      geometry.computeBoundingSphere();
    }
    _sphere3.copy(geometry.boundingSphere).applyMatrix4(matrixWorld);
    let sphereMargin;
    if (worldUnits) {
      sphereMargin = _lineWidth * 0.5;
    } else {
      const distanceToSphere = Math.max(camera3.near, _sphere3.distanceToPoint(_ray3.origin));
      sphereMargin = getWorldSpaceHalfWidth(camera3, distanceToSphere, material.resolution);
    }
    _sphere3.radius += sphereMargin;
    if (_ray3.intersectsSphere(_sphere3) === false) {
      return;
    }
    if (geometry.boundingBox === null) {
      geometry.computeBoundingBox();
    }
    _box5.copy(geometry.boundingBox).applyMatrix4(matrixWorld);
    let boxMargin;
    if (worldUnits) {
      boxMargin = _lineWidth * 0.5;
    } else {
      const distanceToBox = Math.max(camera3.near, _box5.distanceToPoint(_ray3.origin));
      boxMargin = getWorldSpaceHalfWidth(camera3, distanceToBox, material.resolution);
    }
    _box5.expandByScalar(boxMargin);
    if (_ray3.intersectsBox(_box5) === false) {
      return;
    }
    if (worldUnits) {
      raycastWorldUnits(this, intersects4);
    } else {
      raycastScreenSpace(this, camera3, intersects4);
    }
  }
  onBeforeRender(renderer3) {
    const uniforms = this.material.uniforms;
    if (uniforms && uniforms.resolution) {
      renderer3.getViewport(_viewport);
      this.material.uniforms.resolution.value.set(_viewport.z, _viewport.w);
    }
  }
};

// node_modules/three/examples/jsm/lines/LineGeometry.js
var LineGeometry = class extends LineSegmentsGeometry {
  constructor() {
    super();
    this.isLineGeometry = true;
    this.type = "LineGeometry";
  }
  setPositions(array3) {
    const length2 = array3.length - 3;
    const points = new Float32Array(2 * length2);
    for (let i2 = 0; i2 < length2; i2 += 3) {
      points[2 * i2] = array3[i2];
      points[2 * i2 + 1] = array3[i2 + 1];
      points[2 * i2 + 2] = array3[i2 + 2];
      points[2 * i2 + 3] = array3[i2 + 3];
      points[2 * i2 + 4] = array3[i2 + 4];
      points[2 * i2 + 5] = array3[i2 + 5];
    }
    super.setPositions(points);
    return this;
  }
  setColors(array3) {
    const length2 = array3.length - 3;
    const colors = new Float32Array(2 * length2);
    for (let i2 = 0; i2 < length2; i2 += 3) {
      colors[2 * i2] = array3[i2];
      colors[2 * i2 + 1] = array3[i2 + 1];
      colors[2 * i2 + 2] = array3[i2 + 2];
      colors[2 * i2 + 3] = array3[i2 + 3];
      colors[2 * i2 + 4] = array3[i2 + 4];
      colors[2 * i2 + 5] = array3[i2 + 5];
    }
    super.setColors(colors);
    return this;
  }
  fromLine(line) {
    const geometry = line.geometry;
    this.setPositions(geometry.attributes.position.array);
    return this;
  }
};

// node_modules/three/examples/jsm/lines/Line2.js
var Line2 = class extends LineSegments2 {
  constructor(geometry = new LineGeometry(), material = new LineMaterial({ color: Math.random() * 16777215 })) {
    super(geometry, material);
    this.isLine2 = true;
    this.type = "Line2";
  }
};

// node_modules/three/examples/jsm/geometries/TextGeometry.js
var TextGeometry = class extends ExtrudeGeometry {
  constructor(text, parameters = {}) {
    const font = parameters.font;
    if (font === void 0) {
      super();
    } else {
      const shapes = font.generateShapes(text, parameters.size);
      if (parameters.depth === void 0 && parameters.height !== void 0) {
        console.warn("THREE.TextGeometry: .height is now depreciated. Please use .depth instead");
      }
      parameters.depth = parameters.depth !== void 0 ? parameters.depth : parameters.height !== void 0 ? parameters.height : 50;
      if (parameters.bevelThickness === void 0) parameters.bevelThickness = 10;
      if (parameters.bevelSize === void 0) parameters.bevelSize = 8;
      if (parameters.bevelEnabled === void 0) parameters.bevelEnabled = false;
      super(shapes, parameters);
    }
    this.type = "TextGeometry";
  }
};

// node_modules/three/examples/jsm/loaders/FontLoader.js
var Font = class {
  constructor(data) {
    this.isFont = true;
    this.type = "Font";
    this.data = data;
  }
  generateShapes(text, size = 100) {
    const shapes = [];
    const paths = createPaths(text, size, this.data);
    for (let p2 = 0, pl = paths.length; p2 < pl; p2++) {
      shapes.push(...paths[p2].toShapes());
    }
    return shapes;
  }
};
function createPaths(text, size, data) {
  const chars = Array.from(text);
  const scale2 = size / data.resolution;
  const line_height = (data.boundingBox.yMax - data.boundingBox.yMin + data.underlineThickness) * scale2;
  const paths = [];
  let offsetX = 0, offsetY = 0;
  for (let i2 = 0; i2 < chars.length; i2++) {
    const char = chars[i2];
    if (char === "\n") {
      offsetX = 0;
      offsetY -= line_height;
    } else {
      const ret = createPath(char, scale2, offsetX, offsetY, data);
      offsetX += ret.offsetX;
      paths.push(ret.path);
    }
  }
  return paths;
}
function createPath(char, scale2, offsetX, offsetY, data) {
  const glyph = data.glyphs[char] || data.glyphs["?"];
  if (!glyph) {
    console.error('THREE.Font: character "' + char + '" does not exists in font family ' + data.familyName + ".");
    return;
  }
  const path = new ShapePath();
  let x2, y2, cpx, cpy, cpx1, cpy1, cpx2, cpy2;
  if (glyph.o) {
    const outline = glyph._cachedOutline || (glyph._cachedOutline = glyph.o.split(" "));
    for (let i2 = 0, l2 = outline.length; i2 < l2; ) {
      const action = outline[i2++];
      switch (action) {
        case "m":
          x2 = outline[i2++] * scale2 + offsetX;
          y2 = outline[i2++] * scale2 + offsetY;
          path.moveTo(x2, y2);
          break;
        case "l":
          x2 = outline[i2++] * scale2 + offsetX;
          y2 = outline[i2++] * scale2 + offsetY;
          path.lineTo(x2, y2);
          break;
        case "q":
          cpx = outline[i2++] * scale2 + offsetX;
          cpy = outline[i2++] * scale2 + offsetY;
          cpx1 = outline[i2++] * scale2 + offsetX;
          cpy1 = outline[i2++] * scale2 + offsetY;
          path.quadraticCurveTo(cpx1, cpy1, cpx, cpy);
          break;
        case "b":
          cpx = outline[i2++] * scale2 + offsetX;
          cpy = outline[i2++] * scale2 + offsetY;
          cpx1 = outline[i2++] * scale2 + offsetX;
          cpy1 = outline[i2++] * scale2 + offsetY;
          cpx2 = outline[i2++] * scale2 + offsetX;
          cpy2 = outline[i2++] * scale2 + offsetY;
          path.bezierCurveTo(cpx1, cpy1, cpx2, cpy2, cpx, cpy);
          break;
      }
    }
  }
  return { offsetX: glyph.ha * scale2, path };
}

// node_modules/three-globe/dist/three-globe.mjs
function _arrayLikeToArray9(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles9(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles8(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray9(r2);
}
function _assertClassBrand3(e3, t4, n2) {
  if ("function" == typeof e3 ? e3 === t4 : e3.has(t4)) return arguments.length < 3 ? t4 : n2;
  throw new TypeError("Private element is not present on this object");
}
function _assertThisInitialized4(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}
function asyncGeneratorStep(n2, t4, e3, r2, o2, a2, c4) {
  try {
    var i2 = n2[a2](c4), u5 = i2.value;
  } catch (n3) {
    return void e3(n3);
  }
  i2.done ? t4(u5) : Promise.resolve(u5).then(r2, o2);
}
function _asyncToGenerator(n2) {
  return function() {
    var t4 = this, e3 = arguments;
    return new Promise(function(r2, o2) {
      var a2 = n2.apply(t4, e3);
      function _next(n3) {
        asyncGeneratorStep(a2, r2, o2, _next, _throw, "next", n3);
      }
      function _throw(n3) {
        asyncGeneratorStep(a2, r2, o2, _next, _throw, "throw", n3);
      }
      _next(void 0);
    });
  };
}
function _callSuper4(t4, o2, e3) {
  return o2 = _getPrototypeOf4(o2), _possibleConstructorReturn4(t4, _isNativeReflectConstruct4() ? Reflect.construct(o2, e3 || [], _getPrototypeOf4(t4).constructor) : o2.apply(t4, e3));
}
function _checkPrivateRedeclaration3(e3, t4) {
  if (t4.has(e3)) throw new TypeError("Cannot initialize the same private elements twice on an object");
}
function _classCallCheck6(a2, n2) {
  if (!(a2 instanceof n2)) throw new TypeError("Cannot call a class as a function");
}
function _classPrivateFieldGet23(s2, a2) {
  return s2.get(_assertClassBrand3(s2, a2));
}
function _classPrivateFieldInitSpec3(e3, t4, a2) {
  _checkPrivateRedeclaration3(e3, t4), t4.set(e3, a2);
}
function _classPrivateFieldSet23(s2, a2, r2) {
  return s2.set(_assertClassBrand3(s2, a2), r2), r2;
}
function _construct(t4, e3, r2) {
  if (_isNativeReflectConstruct4()) return Reflect.construct.apply(null, arguments);
  var o2 = [null];
  o2.push.apply(o2, e3);
  var p2 = new (t4.bind.apply(t4, o2))();
  return p2;
}
function _defineProperties3(e3, r2) {
  for (var t4 = 0; t4 < r2.length; t4++) {
    var o2 = r2[t4];
    o2.enumerable = o2.enumerable || false, o2.configurable = true, "value" in o2 && (o2.writable = true), Object.defineProperty(e3, _toPropertyKey5(o2.key), o2);
  }
}
function _createClass6(e3, r2, t4) {
  return r2 && _defineProperties3(e3.prototype, r2), Object.defineProperty(e3, "prototype", {
    writable: false
  }), e3;
}
function _defineProperty3(e3, r2, t4) {
  return (r2 = _toPropertyKey5(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t4,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t4, e3;
}
function _get() {
  return _get = "undefined" != typeof Reflect && Reflect.get ? Reflect.get.bind() : function(e3, t4, r2) {
    var p2 = _superPropBase(e3, t4);
    if (p2) {
      var n2 = Object.getOwnPropertyDescriptor(p2, t4);
      return n2.get ? n2.get.call(arguments.length < 3 ? e3 : r2) : n2.value;
    }
  }, _get.apply(null, arguments);
}
function _getPrototypeOf4(t4) {
  return _getPrototypeOf4 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t5) {
    return t5.__proto__ || Object.getPrototypeOf(t5);
  }, _getPrototypeOf4(t4);
}
function _inherits4(t4, e3) {
  if ("function" != typeof e3 && null !== e3) throw new TypeError("Super expression must either be null or a function");
  t4.prototype = Object.create(e3 && e3.prototype, {
    constructor: {
      value: t4,
      writable: true,
      configurable: true
    }
  }), Object.defineProperty(t4, "prototype", {
    writable: false
  }), e3 && _setPrototypeOf4(t4, e3);
}
function _isNativeReflectConstruct4() {
  try {
    var t4 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t5) {
  }
  return (_isNativeReflectConstruct4 = function() {
    return !!t4;
  })();
}
function _iterableToArray8(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit9(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) {
        if (Object(t4) !== t4) return;
        f2 = false;
      } else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest9() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread8() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys(e3, r2) {
  var t4 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e3);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t4.push.apply(t4, o2);
  }
  return t4;
}
function _objectSpread2(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t4 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t4), true).forEach(function(r3) {
      _defineProperty3(e3, r3, t4[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t4)) : ownKeys(Object(t4)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t4, r3));
    });
  }
  return e3;
}
function _objectWithoutProperties2(e3, t4) {
  if (null == e3) return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose2(e3, t4);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e3);
    for (r2 = 0; r2 < n2.length; r2++) o2 = n2[r2], -1 === t4.indexOf(o2) && {}.propertyIsEnumerable.call(e3, o2) && (i2[o2] = e3[o2]);
  }
  return i2;
}
function _objectWithoutPropertiesLoose2(r2, e3) {
  if (null == r2) return {};
  var t4 = {};
  for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
    if (-1 !== e3.indexOf(n2)) continue;
    t4[n2] = r2[n2];
  }
  return t4;
}
function _possibleConstructorReturn4(t4, e3) {
  if (e3 && ("object" == typeof e3 || "function" == typeof e3)) return e3;
  if (void 0 !== e3) throw new TypeError("Derived constructors may only return object or undefined");
  return _assertThisInitialized4(t4);
}
function _regenerator() {
  var e3, t4, r2 = "function" == typeof Symbol ? Symbol : {}, n2 = r2.iterator || "@@iterator", o2 = r2.toStringTag || "@@toStringTag";
  function i2(r3, n3, o3, i3) {
    var c5 = n3 && n3.prototype instanceof Generator ? n3 : Generator, u6 = Object.create(c5.prototype);
    return _regeneratorDefine(u6, "_invoke", function(r4, n4, o4) {
      var i4, c6, u7, f3 = 0, p2 = o4 || [], y2 = false, G2 = {
        p: 0,
        n: 0,
        v: e3,
        a: d2,
        f: d2.bind(e3, 4),
        d: function(t5, r5) {
          return i4 = t5, c6 = 0, u7 = e3, G2.n = r5, a2;
        }
      };
      function d2(r5, n5) {
        for (c6 = r5, u7 = n5, t4 = 0; !y2 && f3 && !o5 && t4 < p2.length; t4++) {
          var o5, i5 = p2[t4], d3 = G2.p, l2 = i5[2];
          r5 > 3 ? (o5 = l2 === n5) && (u7 = i5[(c6 = i5[4]) ? 5 : (c6 = 3, 3)], i5[4] = i5[5] = e3) : i5[0] <= d3 && ((o5 = r5 < 2 && d3 < i5[1]) ? (c6 = 0, G2.v = n5, G2.n = i5[1]) : d3 < l2 && (o5 = r5 < 3 || i5[0] > n5 || n5 > l2) && (i5[4] = r5, i5[5] = n5, G2.n = l2, c6 = 0));
        }
        if (o5 || r5 > 1) return a2;
        throw y2 = true, n5;
      }
      return function(o5, p3, l2) {
        if (f3 > 1) throw TypeError("Generator is already running");
        for (y2 && 1 === p3 && d2(p3, l2), c6 = p3, u7 = l2; (t4 = c6 < 2 ? e3 : u7) || !y2; ) {
          i4 || (c6 ? c6 < 3 ? (c6 > 1 && (G2.n = -1), d2(c6, u7)) : G2.n = u7 : G2.v = u7);
          try {
            if (f3 = 2, i4) {
              if (c6 || (o5 = "next"), t4 = i4[o5]) {
                if (!(t4 = t4.call(i4, u7))) throw TypeError("iterator result is not an object");
                if (!t4.done) return t4;
                u7 = t4.value, c6 < 2 && (c6 = 0);
              } else 1 === c6 && (t4 = i4.return) && t4.call(i4), c6 < 2 && (u7 = TypeError("The iterator does not provide a '" + o5 + "' method"), c6 = 1);
              i4 = e3;
            } else if ((t4 = (y2 = G2.n < 0) ? u7 : r4.call(n4, G2)) !== a2) break;
          } catch (t5) {
            i4 = e3, c6 = 1, u7 = t5;
          } finally {
            f3 = 1;
          }
        }
        return {
          value: t4,
          done: y2
        };
      };
    }(r3, o3, i3), true), u6;
  }
  var a2 = {};
  function Generator() {
  }
  function GeneratorFunction() {
  }
  function GeneratorFunctionPrototype() {
  }
  t4 = Object.getPrototypeOf;
  var c4 = [][n2] ? t4(t4([][n2]())) : (_regeneratorDefine(t4 = {}, n2, function() {
    return this;
  }), t4), u5 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(c4);
  function f2(e4) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(e4, GeneratorFunctionPrototype) : (e4.__proto__ = GeneratorFunctionPrototype, _regeneratorDefine(e4, o2, "GeneratorFunction")), e4.prototype = Object.create(u5), e4;
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, _regeneratorDefine(u5, "constructor", GeneratorFunctionPrototype), _regeneratorDefine(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = "GeneratorFunction", _regeneratorDefine(GeneratorFunctionPrototype, o2, "GeneratorFunction"), _regeneratorDefine(u5), _regeneratorDefine(u5, o2, "Generator"), _regeneratorDefine(u5, n2, function() {
    return this;
  }), _regeneratorDefine(u5, "toString", function() {
    return "[object Generator]";
  }), (_regenerator = function() {
    return {
      w: i2,
      m: f2
    };
  })();
}
function _regeneratorDefine(e3, r2, n2, t4) {
  var i2 = Object.defineProperty;
  try {
    i2({}, "", {});
  } catch (e4) {
    i2 = 0;
  }
  _regeneratorDefine = function(e4, r3, n3, t5) {
    function o2(r4, n4) {
      _regeneratorDefine(e4, r4, function(e6) {
        return this._invoke(r4, n4, e6);
      });
    }
    r3 ? i2 ? i2(e4, r3, {
      value: n3,
      enumerable: !t5,
      configurable: !t5,
      writable: !t5
    }) : e4[r3] = n3 : (o2("next", 0), o2("throw", 1), o2("return", 2));
  }, _regeneratorDefine(e3, r2, n2, t4);
}
function _setPrototypeOf4(t4, e3) {
  return _setPrototypeOf4 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t5, e4) {
    return t5.__proto__ = e4, t5;
  }, _setPrototypeOf4(t4, e3);
}
function _slicedToArray9(r2, e3) {
  return _arrayWithHoles9(r2) || _iterableToArrayLimit9(r2, e3) || _unsupportedIterableToArray9(r2, e3) || _nonIterableRest9();
}
function _superPropBase(t4, o2) {
  for (; !{}.hasOwnProperty.call(t4, o2) && null !== (t4 = _getPrototypeOf4(t4)); ) ;
  return t4;
}
function _superPropGet(t4, o2, e3, r2) {
  var p2 = _get(_getPrototypeOf4(t4.prototype), o2, e3);
  return "function" == typeof p2 ? function(t5) {
    return p2.apply(e3, t5);
  } : p2;
}
function _toConsumableArray8(r2) {
  return _arrayWithoutHoles8(r2) || _iterableToArray8(r2) || _unsupportedIterableToArray9(r2) || _nonIterableSpread8();
}
function _toPrimitive5(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t4);
}
function _toPropertyKey5(t4) {
  var i2 = _toPrimitive5(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray9(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray9(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray9(r2, a2) : void 0;
  }
}
var _materialDispose2 = function materialDispose2(material) {
  if (material instanceof Array) {
    material.forEach(_materialDispose2);
  } else {
    if (material.map) {
      material.map.dispose();
    }
    material.dispose();
  }
};
var _deallocate2 = function deallocate2(obj) {
  if (obj.geometry) {
    obj.geometry.dispose();
  }
  if (obj.material) {
    _materialDispose2(obj.material);
  }
  if (obj.texture) {
    obj.texture.dispose();
  }
  if (obj.children) {
    obj.children.forEach(_deallocate2);
  }
};
var emptyObject3 = function emptyObject4(obj) {
  if (obj && obj.children) while (obj.children.length) {
    var childObj = obj.children[0];
    obj.remove(childObj);
    _deallocate2(childObj);
  }
};
function linkKapsule(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange15(v3, state) {
          state[kapsulePropName][prop](v3);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var GLOBE_RADIUS = 100;
function getGlobeRadius() {
  return GLOBE_RADIUS;
}
function polar2Cartesian4(lat, lng) {
  var relAltitude = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
  var phi = (90 - lat) * Math.PI / 180;
  var theta = (90 - lng) * Math.PI / 180;
  var r2 = GLOBE_RADIUS * (1 + relAltitude);
  var phiSin = Math.sin(phi);
  return {
    x: r2 * phiSin * Math.cos(theta),
    y: r2 * Math.cos(phi),
    z: r2 * phiSin * Math.sin(theta)
  };
}
function cartesian2Polar2(_ref) {
  var x2 = _ref.x, y2 = _ref.y, z2 = _ref.z;
  var r2 = Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2);
  var phi = Math.acos(y2 / r2);
  var theta = Math.atan2(z2, x2);
  return {
    lat: 90 - phi * 180 / Math.PI,
    lng: 90 - theta * 180 / Math.PI - (theta < -Math.PI / 2 ? 360 : 0),
    // keep within [-180, 180] boundaries
    altitude: r2 / GLOBE_RADIUS - 1
  };
}
function deg2Rad$1(deg) {
  return deg * Math.PI / 180;
}
var THREE$i = window.THREE ? window.THREE : {
  BackSide,
  BufferAttribute,
  Color,
  Mesh,
  ShaderMaterial
};
var vertexShader = "\nuniform float hollowRadius;\n\nvarying vec3 vVertexWorldPosition;\nvarying vec3 vVertexNormal;\nvarying float vCameraDistanceToObjCenter;\nvarying float vVertexAngularDistanceToHollowRadius;\n\nvoid main() {    \n  vVertexNormal	= normalize(normalMatrix * normal);\n  vVertexWorldPosition = (modelMatrix * vec4(position, 1.0)).xyz;\n  \n  vec4 objCenterViewPosition = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n  vCameraDistanceToObjCenter = length(objCenterViewPosition);\n  \n  float edgeAngle = atan(hollowRadius / vCameraDistanceToObjCenter);\n  float vertexAngle = acos(dot(normalize(modelViewMatrix * vec4(position, 1.0)), normalize(objCenterViewPosition)));\n  vVertexAngularDistanceToHollowRadius = vertexAngle - edgeAngle;\n\n  gl_Position	= projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}";
var fragmentShader = "\nuniform vec3 color;\nuniform float coefficient;\nuniform float power;\nuniform float hollowRadius;\n\nvarying vec3 vVertexNormal;\nvarying vec3 vVertexWorldPosition;\nvarying float vCameraDistanceToObjCenter;\nvarying float vVertexAngularDistanceToHollowRadius;\n\nvoid main() {\n  if (vCameraDistanceToObjCenter < hollowRadius) discard; // inside the hollowRadius\n  if (vVertexAngularDistanceToHollowRadius < 0.0) discard; // frag position is within the hollow radius\n\n  vec3 worldCameraToVertex = vVertexWorldPosition - cameraPosition;\n  vec3 viewCameraToVertex	= (viewMatrix * vec4(worldCameraToVertex, 0.0)).xyz;\n  viewCameraToVertex = normalize(viewCameraToVertex);\n  float intensity	= pow(\n    coefficient + dot(vVertexNormal, viewCameraToVertex),\n    power\n  );\n  gl_FragColor = vec4(color, intensity);\n}";
function createGlowMaterial(coefficient, color3, power, hollowRadius) {
  return new THREE$i.ShaderMaterial({
    depthWrite: false,
    transparent: true,
    vertexShader,
    fragmentShader,
    uniforms: {
      coefficient: {
        value: coefficient
      },
      color: {
        value: new THREE$i.Color(color3)
      },
      power: {
        value: power
      },
      hollowRadius: {
        value: hollowRadius
      }
    }
  });
}
function createGlowGeometry(geometry, size) {
  var glowGeometry = geometry.clone();
  var position = new Float32Array(geometry.attributes.position.count * 3);
  for (var idx = 0, len = position.length; idx < len; idx++) {
    var normal2 = geometry.attributes.normal.array[idx];
    var curPos = geometry.attributes.position.array[idx];
    position[idx] = curPos + normal2 * size;
  }
  glowGeometry.setAttribute("position", new THREE$i.BufferAttribute(position, 3));
  return glowGeometry;
}
var GlowMesh = function(_THREE$Mesh) {
  function GlowMesh2(geometry) {
    var _this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$color = _ref.color, color3 = _ref$color === void 0 ? "gold" : _ref$color, _ref$size = _ref.size, size = _ref$size === void 0 ? 2 : _ref$size, _ref$coefficient = _ref.coefficient, coefficient = _ref$coefficient === void 0 ? 0.5 : _ref$coefficient, _ref$power = _ref.power, power = _ref$power === void 0 ? 1 : _ref$power, _ref$hollowRadius = _ref.hollowRadius, hollowRadius = _ref$hollowRadius === void 0 ? 0 : _ref$hollowRadius, _ref$backside = _ref.backside, backside = _ref$backside === void 0 ? true : _ref$backside;
    _classCallCheck6(this, GlowMesh2);
    _this = _callSuper4(this, GlowMesh2);
    var glowGeometry = createGlowGeometry(geometry, size);
    var glowMaterial = createGlowMaterial(coefficient, color3, power, hollowRadius);
    backside && (glowMaterial.side = THREE$i.BackSide);
    _this.geometry = glowGeometry;
    _this.material = glowMaterial;
    return _this;
  }
  _inherits4(GlowMesh2, _THREE$Mesh);
  return _createClass6(GlowMesh2);
}(THREE$i.Mesh);
var THREE$h = window.THREE ? window.THREE : {
  Color,
  Group,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshPhongMaterial,
  SphereGeometry,
  SRGBColorSpace,
  TextureLoader
};
var GlobeLayerKapsule = index2({
  props: {
    globeImageUrl: {},
    bumpImageUrl: {},
    showGlobe: {
      "default": true,
      onChange: function onChange(showGlobe, state) {
        state.globeGroup.visible = !!showGlobe;
      },
      triggerUpdate: false
    },
    showGraticules: {
      "default": false,
      onChange: function onChange2(showGraticules, state) {
        state.graticulesObj.visible = !!showGraticules;
      },
      triggerUpdate: false
    },
    showAtmosphere: {
      "default": true,
      onChange: function onChange3(showAtmosphere, state) {
        state.atmosphereObj && (state.atmosphereObj.visible = !!showAtmosphere);
      },
      triggerUpdate: false
    },
    atmosphereColor: {
      "default": "lightskyblue"
    },
    atmosphereAltitude: {
      "default": 0.15
    },
    globeCurvatureResolution: {
      "default": 4
    },
    globeTileEngineUrl: {
      onChange: function onChange4(v3, state) {
        state.tileEngine.tileUrl = v3;
      }
    },
    globeTileEngineMaxLevel: {
      "default": 17,
      onChange: function onChange5(v3, state) {
        state.tileEngine.maxLevel = v3;
      },
      triggerUpdate: false
    },
    updatePov: {
      onChange: function onChange6(v3, state) {
        state.tileEngine.updatePov(v3);
      },
      triggerUpdate: false
    },
    onReady: {
      "default": function _default() {
      },
      triggerUpdate: false
    }
  },
  methods: {
    globeMaterial: function globeMaterial(state, _globeMaterial) {
      if (_globeMaterial !== void 0) {
        state.globeObj.material = _globeMaterial || state.defaultGlobeMaterial;
        return this;
      }
      return state.globeObj.material;
    },
    _destructor: function _destructor(state) {
      emptyObject3(state.globeObj);
      emptyObject3(state.tileEngine);
      emptyObject3(state.graticulesObj);
    }
  },
  stateInit: function stateInit() {
    var defaultGlobeMaterial = new THREE$h.MeshPhongMaterial({
      color: 0
    });
    var globeObj = new THREE$h.Mesh(void 0, defaultGlobeMaterial);
    globeObj.rotation.y = -Math.PI / 2;
    var tileEngine = new ThreeSlippyMapGlobe(GLOBE_RADIUS);
    var globeGroup = new THREE$h.Group();
    globeGroup.__globeObjType = "globe";
    globeGroup.add(globeObj);
    globeGroup.add(tileEngine);
    var graticulesObj = new THREE$h.LineSegments(new GeoJsonGeometry(graticule10(), GLOBE_RADIUS, 2), new THREE$h.LineBasicMaterial({
      color: "lightgrey",
      transparent: true,
      opacity: 0.1
    }));
    return {
      globeGroup,
      globeObj,
      graticulesObj,
      defaultGlobeMaterial,
      tileEngine
    };
  },
  init: function init(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.scene.add(state.globeGroup);
    state.scene.add(state.graticulesObj);
    state.ready = false;
  },
  update: function update2(state, changedProps) {
    var globeMaterial2 = state.globeObj.material;
    state.tileEngine.visible = !(state.globeObj.visible = !state.globeTileEngineUrl);
    if (changedProps.hasOwnProperty("globeCurvatureResolution")) {
      var _state$globeObj$geome;
      (_state$globeObj$geome = state.globeObj.geometry) === null || _state$globeObj$geome === void 0 || _state$globeObj$geome.dispose();
      var widthSegments = Math.max(4, Math.round(360 / state.globeCurvatureResolution));
      state.globeObj.geometry = new THREE$h.SphereGeometry(GLOBE_RADIUS, widthSegments, widthSegments / 2);
      state.tileEngine.curvatureResolution = state.globeCurvatureResolution;
    }
    if (changedProps.hasOwnProperty("globeImageUrl")) {
      if (!state.globeImageUrl) {
        !globeMaterial2.color && (globeMaterial2.color = new THREE$h.Color(0));
      } else {
        new THREE$h.TextureLoader().load(state.globeImageUrl, function(texture2) {
          texture2.colorSpace = THREE$h.SRGBColorSpace;
          globeMaterial2.map = texture2;
          globeMaterial2.color = null;
          globeMaterial2.needsUpdate = true;
          !state.ready && (state.ready = true) && setTimeout(state.onReady);
        });
      }
    }
    if (changedProps.hasOwnProperty("bumpImageUrl")) {
      if (!state.bumpImageUrl) {
        globeMaterial2.bumpMap = null;
        globeMaterial2.needsUpdate = true;
      } else {
        state.bumpImageUrl && new THREE$h.TextureLoader().load(state.bumpImageUrl, function(texture2) {
          globeMaterial2.bumpMap = texture2;
          globeMaterial2.needsUpdate = true;
        });
      }
    }
    if (changedProps.hasOwnProperty("atmosphereColor") || changedProps.hasOwnProperty("atmosphereAltitude")) {
      if (state.atmosphereObj) {
        state.scene.remove(state.atmosphereObj);
        emptyObject3(state.atmosphereObj);
      }
      if (state.atmosphereColor && state.atmosphereAltitude) {
        var obj = state.atmosphereObj = new GlowMesh(state.globeObj.geometry, {
          color: state.atmosphereColor,
          size: GLOBE_RADIUS * state.atmosphereAltitude,
          hollowRadius: GLOBE_RADIUS,
          coefficient: 0.1,
          power: 3.5
          // dispersion
        });
        obj.visible = !!state.showAtmosphere;
        obj.__globeObjType = "atmosphere";
        state.scene.add(obj);
      }
    }
    if (!state.ready && (!state.globeImageUrl || state.globeTileEngineUrl)) {
      state.ready = true;
      state.onReady();
    }
  }
});
var colorStr2Hex = function colorStr2Hex2(str) {
  return isNaN(str) ? parseInt(tinycolor(str).toHex(), 16) : str;
};
var colorAlpha = function colorAlpha2(str) {
  return str && isNaN(str) ? color(str).opacity : 1;
};
var color2ShaderArr = function color2ShaderArr2(str) {
  var includeAlpha = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;
  var sRGBColorSpace = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var color3;
  var alpha = 1;
  var rgbaMatch = /^rgba\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*,\s*([\d.eE+-]+)\s*\)$/.exec(str.trim().toLowerCase());
  if (rgbaMatch) {
    var _rgbaMatch$slice = rgbaMatch.slice(1), _rgbaMatch$slice2 = _slicedToArray9(_rgbaMatch$slice, 4), r2 = _rgbaMatch$slice2[0], g2 = _rgbaMatch$slice2[1], b = _rgbaMatch$slice2[2], a2 = _rgbaMatch$slice2[3];
    color3 = new Color("rgb(".concat(+r2, ",").concat(+g2, ",").concat(+b, ")"));
    alpha = Math.min(+a2, 1);
  } else {
    color3 = new Color(str);
  }
  sRGBColorSpace && color3.convertLinearToSRGB();
  var rgbArr = color3.toArray();
  return includeAlpha ? [].concat(_toConsumableArray8(rgbArr), [alpha]) : rgbArr;
};
function setMaterialOpacity(material, opacity, depthWrite) {
  material.opacity = opacity;
  material.transparent = opacity < 1;
  material.depthWrite = opacity >= 1;
  return material;
}
var THREE$g = window.THREE ? window.THREE : {
  BufferAttribute
};
function array2BufferAttr(data) {
  var itemSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
  var ArrayClass = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : Float32Array;
  if (itemSize === 1) {
    return new THREE$g.BufferAttribute(new ArrayClass(data), itemSize);
  }
  var ba = new THREE$g.BufferAttribute(new ArrayClass(data.length * itemSize), itemSize);
  for (var idx = 0, l2 = data.length; idx < l2; idx++) {
    ba.set(data[idx], idx * itemSize);
  }
  return ba;
}
function bufferAttr2Array(ba) {
  var itemSize = ba.itemSize;
  var res = [];
  for (var i2 = 0; i2 < ba.count; i2++) {
    res.push(ba.array.slice(i2 * itemSize, (i2 + 1) * itemSize));
  }
  return res;
}
var _dataBindAttr = /* @__PURE__ */ new WeakMap();
var _objBindAttr = /* @__PURE__ */ new WeakMap();
var _removeDelay = /* @__PURE__ */ new WeakMap();
var ThreeDigest = function(_DataBindMapper) {
  function ThreeDigest2(scene3) {
    var _this;
    var _ref = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, _ref$dataBindAttr = _ref.dataBindAttr, dataBindAttr = _ref$dataBindAttr === void 0 ? "__data" : _ref$dataBindAttr, _ref$objBindAttr = _ref.objBindAttr, objBindAttr = _ref$objBindAttr === void 0 ? "__threeObj" : _ref$objBindAttr, _ref$removeDelay = _ref.removeDelay, removeDelay = _ref$removeDelay === void 0 ? 0 : _ref$removeDelay;
    _classCallCheck6(this, ThreeDigest2);
    _this = _callSuper4(this, ThreeDigest2);
    _defineProperty3(_this, "scene", void 0);
    _classPrivateFieldInitSpec3(_this, _dataBindAttr, void 0);
    _classPrivateFieldInitSpec3(_this, _objBindAttr, void 0);
    _classPrivateFieldInitSpec3(_this, _removeDelay, void 0);
    _this.scene = scene3;
    _classPrivateFieldSet23(_dataBindAttr, _this, dataBindAttr);
    _classPrivateFieldSet23(_objBindAttr, _this, objBindAttr);
    _classPrivateFieldSet23(_removeDelay, _this, removeDelay);
    _this.onRemoveObj(function() {
    });
    return _this;
  }
  _inherits4(ThreeDigest2, _DataBindMapper);
  return _createClass6(ThreeDigest2, [{
    key: "onCreateObj",
    value: function onCreateObj(fn) {
      var _this2 = this;
      _superPropGet(ThreeDigest2, "onCreateObj", this)([function(d2) {
        var obj = fn(d2);
        d2[_classPrivateFieldGet23(_objBindAttr, _this2)] = obj;
        obj[_classPrivateFieldGet23(_dataBindAttr, _this2)] = d2;
        _this2.scene.add(obj);
        return obj;
      }]);
      return this;
    }
  }, {
    key: "onRemoveObj",
    value: function onRemoveObj(fn) {
      var _this3 = this;
      _superPropGet(ThreeDigest2, "onRemoveObj", this)([function(obj, dId) {
        var d2 = _superPropGet(ThreeDigest2, "getData", _this3)([obj]);
        fn(obj, dId);
        var removeFn = function removeFn2() {
          _this3.scene.remove(obj);
          emptyObject3(obj);
          delete d2[_classPrivateFieldGet23(_objBindAttr, _this3)];
        };
        _classPrivateFieldGet23(_removeDelay, _this3) ? setTimeout(removeFn, _classPrivateFieldGet23(_removeDelay, _this3)) : removeFn();
      }]);
      return this;
    }
  }]);
}(DataBindMapper);
var THREE$f = window.THREE ? window.THREE : {
  BufferGeometry,
  CylinderGeometry,
  Matrix4,
  Mesh,
  MeshLambertMaterial,
  Object3D,
  Vector3
};
var bfg$2 = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils$2 = bfg$2.BufferGeometryUtils || bfg$2;
var PointsLayerKapsule = index2({
  props: {
    pointsData: {
      "default": []
    },
    pointLat: {
      "default": "lat"
    },
    pointLng: {
      "default": "lng"
    },
    pointColor: {
      "default": function _default2() {
        return "#ffffaa";
      }
    },
    pointAltitude: {
      "default": 0.1
    },
    // in units of globe radius
    pointRadius: {
      "default": 0.25
    },
    // in deg
    pointResolution: {
      "default": 12,
      triggerUpdate: false
    },
    // how many slice segments in the cylinder's circumference
    pointsMerge: {
      "default": false
    },
    // boolean. Whether to merge all points into a single mesh for rendering performance
    pointsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init2(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjPoint"
    });
  },
  update: function update3(state, changedProps) {
    var latAccessor = index4(state.pointLat);
    var lngAccessor = index4(state.pointLng);
    var altitudeAccessor = index4(state.pointAltitude);
    var radiusAccessor = index4(state.pointRadius);
    var colorAccessor = index4(state.pointColor);
    var pointGeometry = new THREE$f.CylinderGeometry(1, 1, 1, state.pointResolution);
    pointGeometry.applyMatrix4(new THREE$f.Matrix4().makeRotationX(Math.PI / 2));
    pointGeometry.applyMatrix4(new THREE$f.Matrix4().makeTranslation(0, 0, -0.5));
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    var pointMaterials = {};
    if (!state.pointsMerge && changedProps.hasOwnProperty("pointsMerge")) {
      emptyObject3(state.scene);
    }
    state.dataMapper.scene = state.pointsMerge ? new THREE$f.Object3D() : state.scene;
    state.dataMapper.onCreateObj(createObj).onUpdateObj(updateObj).digest(state.pointsData);
    if (state.pointsMerge) {
      var pointsGeometry = !state.pointsData.length ? new THREE$f.BufferGeometry() : (BufferGeometryUtils$2.mergeGeometries || BufferGeometryUtils$2.mergeBufferGeometries)(state.pointsData.map(function(d2) {
        var obj = state.dataMapper.getObj(d2);
        var geom = obj.geometry.clone();
        obj.updateMatrix();
        geom.applyMatrix4(obj.matrix);
        var color3 = color2ShaderArr(colorAccessor(d2));
        geom.setAttribute("color", array2BufferAttr(Array(geom.getAttribute("position").count).fill(color3), 4));
        return geom;
      }));
      var points = new THREE$f.Mesh(pointsGeometry, new THREE$f.MeshLambertMaterial({
        color: 16777215,
        transparent: true,
        vertexColors: true
      }));
      points.__globeObjType = "points";
      points.__data = state.pointsData;
      state.dataMapper.clear();
      emptyObject3(state.scene);
      state.scene.add(points);
    }
    function createObj() {
      var obj = new THREE$f.Mesh(pointGeometry);
      obj.__globeObjType = "point";
      return obj;
    }
    function updateObj(obj, d2) {
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, r2 = _obj$__currentTargetD.r, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
        Object.assign(obj.position, polar2Cartesian4(lat, lng));
        var globeCenter = state.pointsMerge ? new THREE$f.Vector3(0, 0, 0) : state.scene.localToWorld(new THREE$f.Vector3(0, 0, 0));
        obj.lookAt(globeCenter);
        obj.scale.x = obj.scale.y = Math.min(30, r2) * pxPerDeg;
        obj.scale.z = Math.max(alt * GLOBE_RADIUS, 0.1);
      };
      var targetD = {
        alt: +altitudeAccessor(d2),
        r: +radiusAccessor(d2),
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2)
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (state.pointsMerge || !state.pointsTransitionDuration || state.pointsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.pointsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
      if (!state.pointsMerge) {
        var color3 = colorAccessor(d2);
        var opacity = color3 ? colorAlpha(color3) : 0;
        var showCyl = !!opacity;
        obj.visible = showCyl;
        if (showCyl) {
          if (!pointMaterials.hasOwnProperty(color3)) {
            pointMaterials[color3] = new THREE$f.MeshLambertMaterial({
              color: colorStr2Hex(color3),
              transparent: opacity < 1,
              opacity
            });
          }
          obj.material = pointMaterials[color3];
        }
      }
    }
  }
});
var dashedLineShaders = function dashedLineShaders2() {
  return {
    uniforms: {
      // dash param defaults, all relative to full length
      dashOffset: {
        value: 0
      },
      dashSize: {
        value: 1
      },
      gapSize: {
        value: 0
      },
      dashTranslate: {
        value: 0
      }
      // used for animating the dash
    },
    vertexShader: "\n    ".concat(ShaderChunk.common, "\n    ").concat(ShaderChunk.logdepthbuf_pars_vertex, "\n  \n    uniform float dashTranslate; \n\n    attribute vec4 color;\n    varying vec4 vColor;\n    \n    attribute float relDistance;\n    varying float vRelDistance;\n\n    void main() {\n      // pass through colors and distances\n      vColor = color;\n      vRelDistance = relDistance + dashTranslate;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n  \n      ").concat(ShaderChunk.logdepthbuf_vertex, "\n    }\n  "),
    fragmentShader: "\n    ".concat(ShaderChunk.logdepthbuf_pars_fragment, "\n\n    uniform float dashOffset; \n    uniform float dashSize;\n    uniform float gapSize; \n    \n    varying vec4 vColor;\n    varying float vRelDistance;\n    \n    void main() {\n      // ignore pixels in the gap\n      if (vRelDistance < dashOffset) discard;\n      if (mod(vRelDistance - dashOffset, dashSize + gapSize) > dashSize) discard;\n    \n      // set px color: [r, g, b, a], interpolated between vertices \n      gl_FragColor = vColor; \n  \n      ").concat(ShaderChunk.logdepthbuf_fragment, "\n    }\n  ")
  };
};
var invisibleUndergroundShaderExtend = function invisibleUndergroundShaderExtend2(shader) {
  shader.uniforms.surfaceRadius = {
    type: "float",
    value: 0
  };
  shader.vertexShader = ("attribute float surfaceRadius;\nvarying float vSurfaceRadius;\nvarying vec3 vPos;\n" + shader.vertexShader).replace("void main() {", ["void main() {", "vSurfaceRadius = surfaceRadius;", "vPos = position;"].join("\n"));
  shader.fragmentShader = ("uniform float surfaceRadius;\nvarying float vSurfaceRadius;\nvarying vec3 vPos;\n" + shader.fragmentShader).replace("void main() {", ["void main() {", "if (length(vPos) < max(surfaceRadius, vSurfaceRadius)) discard;"].join("\n"));
  return shader;
};
var setRadiusShaderExtend = function setRadiusShaderExtend2(shader) {
  shader.vertexShader = "\n    attribute float r;\n    \n    const float PI = 3.1415926535897932384626433832795;\n    float toRad(in float a) {\n      return a * PI / 180.0;\n    }\n    \n    vec3 Polar2Cartesian(in vec3 c) { // [lat, lng, r]\n      float phi = toRad(90.0 - c.x);\n      float theta = toRad(90.0 - c.y);\n      float r = c.z;\n      return vec3( // x,y,z\n        r * sin(phi) * cos(theta),\n        r * cos(phi),\n        r * sin(phi) * sin(theta)\n      );\n    }\n    \n    vec2 Cartesian2Polar(in vec3 p) {\n      float r = sqrt(p.x * p.x + p.y * p.y + p.z * p.z);\n      float phi = acos(p.y / r);\n      float theta = atan(p.z, p.x);\n      return vec2( // lat,lng\n        90.0 - phi * 180.0 / PI,\n        90.0 - theta * 180.0 / PI - (theta < -PI / 2.0 ? 360.0 : 0.0)\n      );\n    }\n    ".concat(shader.vertexShader.replace("}", "                  \n        vec3 pos = Polar2Cartesian(vec3(Cartesian2Polar(position), r));\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);\n      }\n    "), "\n  ");
  return shader;
};
var applyShaderExtensionToMaterial = function applyShaderExtensionToMaterial2(material, extensionFn) {
  material.onBeforeCompile = function(shader) {
    material.userData.shader = extensionFn(shader);
  };
  return material;
};
var setExtendedMaterialUniforms = function setExtendedMaterialUniforms2(material) {
  var uniformsFn = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function(u5) {
    return u5;
  };
  if (material.userData.shader) {
    uniformsFn(material.userData.shader.uniforms);
  } else {
    var curFn = material.onBeforeCompile;
    material.onBeforeCompile = function(shader) {
      curFn(shader);
      uniformsFn(shader.uniforms);
    };
  }
};
var _excluded = ["stroke"];
var THREE$e = window.THREE ? window.THREE : {
  BufferGeometry,
  CubicBezierCurve3,
  Curve,
  Group,
  Line,
  Mesh,
  NormalBlending,
  ShaderMaterial,
  TubeGeometry,
  Vector3
};
var FrameTicker$2 = import_frame_ticker.default["default"] || import_frame_ticker.default;
var ArcsLayerKapsule = index2({
  props: {
    arcsData: {
      "default": []
    },
    arcStartLat: {
      "default": "startLat"
    },
    arcStartLng: {
      "default": "startLng"
    },
    arcStartAltitude: {
      "default": 0
    },
    arcEndLat: {
      "default": "endLat"
    },
    arcEndLng: {
      "default": "endLng"
    },
    arcEndAltitude: {
      "default": 0
    },
    arcColor: {
      "default": function _default3() {
        return "#ffffaa";
      }
    },
    // single color, array of colors or color interpolation fn
    arcAltitude: {},
    // in units of globe radius
    arcAltitudeAutoScale: {
      "default": 0.5
    },
    // scale altitude proportional to great-arc distance between the two points
    arcStroke: {},
    // in deg
    arcCurveResolution: {
      "default": 64,
      triggerUpdate: false
    },
    // how many straight segments in the curve
    arcCircularResolution: {
      "default": 6,
      triggerUpdate: false
    },
    // how many slice segments in the tube's circumference
    arcDashLength: {
      "default": 1
    },
    // in units of line length
    arcDashGap: {
      "default": 0
    },
    arcDashInitialGap: {
      "default": 0
    },
    arcDashAnimateTime: {
      "default": 0
    },
    // ms
    arcsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  methods: {
    pauseAnimation: function pauseAnimation(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor2(state) {
      var _state$ticker3;
      state.sharedMaterial.dispose();
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  stateInit: function stateInit2(_ref) {
    var tweenGroup = _ref.tweenGroup;
    return {
      tweenGroup,
      ticker: new FrameTicker$2(),
      sharedMaterial: new THREE$e.ShaderMaterial(_objectSpread2(_objectSpread2({}, dashedLineShaders()), {}, {
        transparent: true,
        blending: THREE$e.NormalBlending
      }))
    };
  },
  init: function init3(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjArc"
    }).onCreateObj(function() {
      var obj = new THREE$e.Group();
      obj.__globeObjType = "arc";
      return obj;
    });
    state.ticker.onTick.add(function(_2, timeDelta) {
      state.dataMapper.entries().map(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 2), obj = _ref3[1];
        return obj;
      }).filter(function(o2) {
        return o2.children.length && o2.children[0].material && o2.children[0].__dashAnimateStep;
      }).forEach(function(o2) {
        var obj = o2.children[0];
        var step2 = obj.__dashAnimateStep * timeDelta;
        var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
        obj.material.uniforms.dashTranslate.value = curTranslate + step2;
      });
    });
  },
  update: function update4(state) {
    var startLatAccessor = index4(state.arcStartLat);
    var startLngAccessor = index4(state.arcStartLng);
    var startAltAccessor = index4(state.arcStartAltitude);
    var endLatAccessor = index4(state.arcEndLat);
    var endLngAccessor = index4(state.arcEndLng);
    var endAltAccessor = index4(state.arcEndAltitude);
    var altitudeAccessor = index4(state.arcAltitude);
    var altitudeAutoScaleAccessor = index4(state.arcAltitudeAutoScale);
    var strokeAccessor = index4(state.arcStroke);
    var colorAccessor = index4(state.arcColor);
    var dashLengthAccessor = index4(state.arcDashLength);
    var dashGapAccessor = index4(state.arcDashGap);
    var dashInitialGapAccessor = index4(state.arcDashInitialGap);
    var dashAnimateTimeAccessor = index4(state.arcDashAnimateTime);
    state.dataMapper.onUpdateObj(function(group2, arc) {
      var stroke = strokeAccessor(arc);
      var useTube = stroke !== null && stroke !== void 0;
      if (!group2.children.length || useTube !== (group2.children[0].type === "Mesh")) {
        emptyObject3(group2);
        var _obj3 = useTube ? new THREE$e.Mesh() : new THREE$e.Line(new THREE$e.BufferGeometry());
        _obj3.material = state.sharedMaterial.clone();
        group2.add(_obj3);
      }
      var obj = group2.children[0];
      Object.assign(obj.material.uniforms, {
        dashSize: {
          value: dashLengthAccessor(arc)
        },
        gapSize: {
          value: dashGapAccessor(arc)
        },
        dashOffset: {
          value: dashInitialGapAccessor(arc)
        }
      });
      var dashAnimateTime = dashAnimateTimeAccessor(arc);
      obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
      var vertexColorArray = calcColorVertexArray(
        colorAccessor(arc),
        // single, array of colors or interpolator
        state.arcCurveResolution,
        // numSegments
        useTube ? state.arcCircularResolution + 1 : 1
        // num vertices per segment
      );
      var vertexRelDistanceArray = calcVertexRelDistances(
        state.arcCurveResolution,
        // numSegments
        useTube ? state.arcCircularResolution + 1 : 1,
        // num vertices per segment
        true
        // run from end to start, to animate in the correct direction
      );
      obj.geometry.setAttribute("color", vertexColorArray);
      obj.geometry.setAttribute("relDistance", vertexRelDistanceArray);
      var applyUpdate = function applyUpdate2(td) {
        var _group$__currentTarge = group2.__currentTargetD = td, stroke2 = _group$__currentTarge.stroke, curveD = _objectWithoutProperties2(_group$__currentTarge, _excluded);
        var curve = calcCurve(curveD);
        if (useTube) {
          obj.geometry && obj.geometry.dispose();
          obj.geometry = new THREE$e.TubeGeometry(curve, state.arcCurveResolution, stroke2 / 2, state.arcCircularResolution);
          obj.geometry.setAttribute("color", vertexColorArray);
          obj.geometry.setAttribute("relDistance", vertexRelDistanceArray);
        } else {
          obj.geometry.setFromPoints(curve.getPoints(state.arcCurveResolution));
        }
      };
      var targetD = {
        stroke,
        alt: altitudeAccessor(arc),
        altAutoScale: +altitudeAutoScaleAccessor(arc),
        startLat: +startLatAccessor(arc),
        startLng: +startLngAccessor(arc),
        startAlt: +startAltAccessor(arc),
        endLat: +endLatAccessor(arc),
        endLng: +endLngAccessor(arc),
        endAlt: +endAltAccessor(arc)
      };
      var currentTargetD = group2.__currentTargetD || Object.assign({}, targetD, {
        altAutoScale: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.arcsTransitionDuration || state.arcsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.arcsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(state.arcsData);
    function calcCurve(_ref4) {
      var alt = _ref4.alt, altAutoScale = _ref4.altAutoScale, startLat = _ref4.startLat, startLng = _ref4.startLng, startAlt = _ref4.startAlt, endLat = _ref4.endLat, endLng = _ref4.endLng, endAlt = _ref4.endAlt;
      var getVec = function getVec2(_ref5) {
        var _ref6 = _slicedToArray9(_ref5, 3), lng = _ref6[0], lat = _ref6[1], alt2 = _ref6[2];
        var _polar2Cartesian = polar2Cartesian4(lat, lng, alt2), x2 = _polar2Cartesian.x, y2 = _polar2Cartesian.y, z2 = _polar2Cartesian.z;
        return new THREE$e.Vector3(x2, y2, z2);
      };
      var startPnt = [startLng, startLat];
      var endPnt = [endLng, endLat];
      var altitude = alt;
      (altitude === null || altitude === void 0) && // by default set altitude proportional to the great-arc distance
      (altitude = distance_default(startPnt, endPnt) / 2 * altAutoScale + Math.max(startAlt, endAlt));
      if (altitude || startAlt || endAlt) {
        var interpolate = interpolate_default(startPnt, endPnt);
        var calcAltCp = function calcAltCp2(a0, a1) {
          return a1 + (a1 - a0) * (a0 < a1 ? 0.5 : 0.25);
        };
        var _map = [0.25, 0.75].map(function(t4) {
          return [].concat(_toConsumableArray8(interpolate(t4)), [calcAltCp(t4 < 0.5 ? startAlt : endAlt, altitude)]);
        }), _map2 = _slicedToArray9(_map, 2), m1Pnt = _map2[0], m2Pnt = _map2[1];
        var curve = _construct(THREE$e.CubicBezierCurve3, _toConsumableArray8([[].concat(startPnt, [startAlt]), m1Pnt, m2Pnt, [].concat(endPnt, [endAlt])].map(getVec)));
        return curve;
      } else {
        var _alt = 1e-3;
        return calcSphereArc.apply(void 0, _toConsumableArray8([[].concat(startPnt, [_alt]), [].concat(endPnt, [_alt])].map(getVec)));
      }
      function calcSphereArc(startVec, endVec) {
        var angle2 = startVec.angleTo(endVec);
        var getGreatCirclePoint = angle2 === 0 ? function() {
          return startVec.clone();
        } : function(t4) {
          return new THREE$e.Vector3().addVectors(startVec.clone().multiplyScalar(Math.sin((1 - t4) * angle2)), endVec.clone().multiplyScalar(Math.sin(t4 * angle2))).divideScalar(Math.sin(angle2));
        };
        var sphereArc = new THREE$e.Curve();
        sphereArc.getPoint = getGreatCirclePoint;
        return sphereArc;
      }
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array || colors instanceof Function) {
        var colorInterpolator = colors instanceof Array ? linear2().domain(colors.map(function(_2, idx) {
          return idx / (colors.length - 1);
        })).range(colors) : colors;
        getVertexColor = function getVertexColor2(t4) {
          return color2ShaderArr(colorInterpolator(t4), true, true);
        };
      } else {
        var vertexColor = color2ShaderArr(colors, true, true);
        getVertexColor = function getVertexColor2() {
          return vertexColor;
        };
      }
      var vertexColors = [];
      for (var v3 = 0, l2 = numVerticesGroup; v3 < l2; v3++) {
        var _vertexColor = getVertexColor(v3 / (l2 - 1));
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexColors.push(_vertexColor);
        }
      }
      return array2BufferAttr(vertexColors, 4);
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var vertexDistances = [];
      for (var v3 = 0, l2 = numVerticesGroup; v3 < l2; v3++) {
        var relDistance = v3 / (l2 - 1);
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexDistances.push(relDistance);
        }
      }
      invert && vertexDistances.reverse();
      return array2BufferAttr(vertexDistances, 1);
    }
  }
});
var THREE$d = window.THREE ? window.THREE : {
  BufferGeometry,
  DoubleSide,
  Mesh,
  MeshLambertMaterial,
  Object3D
};
var bfg$1 = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils$1 = bfg$1.BufferGeometryUtils || bfg$1;
var HexBinLayerKapsule = index2({
  props: {
    hexBinPointsData: {
      "default": []
    },
    hexBinPointLat: {
      "default": "lat"
    },
    hexBinPointLng: {
      "default": "lng"
    },
    hexBinPointWeight: {
      "default": 1
    },
    hexBinResolution: {
      "default": 4
    },
    // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.
    hexMargin: {
      "default": 0.2
    },
    // in fraction of diameter
    hexTopCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    hexTopColor: {
      "default": function _default4() {
        return "#ffffaa";
      }
    },
    hexSideColor: {
      "default": function _default5() {
        return "#ffffaa";
      }
    },
    hexAltitude: {
      "default": function _default6(_ref) {
        var sumWeight = _ref.sumWeight;
        return sumWeight * 0.01;
      }
    },
    // in units of globe radius
    hexBinMerge: {
      "default": false
    },
    // boolean. Whether to merge all hex geometries into a single mesh for rendering performance
    hexTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init4(threeObj, state, _ref2) {
    var tweenGroup = _ref2.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHexbin"
    });
  },
  update: function update5(state, changedProps) {
    var latAccessor = index4(state.hexBinPointLat);
    var lngAccessor = index4(state.hexBinPointLng);
    var weightAccessor = index4(state.hexBinPointWeight);
    var altitudeAccessor = index4(state.hexAltitude);
    var topColorAccessor = index4(state.hexTopColor);
    var sideColorAccessor = index4(state.hexSideColor);
    var marginAccessor = index4(state.hexMargin);
    var byH3Idx = index5(state.hexBinPointsData.map(function(d2) {
      return _objectSpread2(_objectSpread2({}, d2), {}, {
        h3Idx: latLngToCell(latAccessor(d2), lngAccessor(d2), state.hexBinResolution)
      });
    }), "h3Idx");
    var hexBins = Object.entries(byH3Idx).map(function(_ref3) {
      var _ref4 = _slicedToArray9(_ref3, 2), h3Idx = _ref4[0], points = _ref4[1];
      return {
        h3Idx,
        points,
        sumWeight: points.reduce(function(agg, d2) {
          return agg + +weightAccessor(d2);
        }, 0)
      };
    });
    var hexMaterials = {};
    if (!state.hexBinMerge && changedProps.hasOwnProperty("hexBinMerge")) {
      emptyObject3(state.scene);
    }
    state.dataMapper.scene = state.hexBinMerge ? new THREE$d.Object3D() : state.scene;
    state.dataMapper.id(function(d2) {
      return d2.h3Idx;
    }).onCreateObj(createObj).onUpdateObj(updateObj).digest(hexBins);
    if (state.hexBinMerge) {
      var hexPointsGeometry = !hexBins.length ? new THREE$d.BufferGeometry() : (BufferGeometryUtils$1.mergeGeometries || BufferGeometryUtils$1.mergeBufferGeometries)(hexBins.map(function(d2) {
        var obj = state.dataMapper.getObj(d2);
        var geom = obj.geometry.toNonIndexed();
        obj.updateMatrix();
        geom.applyMatrix4(obj.matrix);
        var topColor = color2ShaderArr(topColorAccessor(d2));
        var sideColor = color2ShaderArr(sideColorAccessor(d2));
        var nVertices = geom.getAttribute("position").count;
        var topFaceIdx = geom.groups[0].count;
        geom.setAttribute("color", array2BufferAttr(_toConsumableArray8(new Array(nVertices)).map(function(_2, idx) {
          return idx >= topFaceIdx ? topColor : sideColor;
        }), 4));
        return geom;
      }));
      var hexMaterial = new THREE$d.MeshLambertMaterial({
        color: 16777215,
        transparent: true,
        vertexColors: true,
        side: THREE$d.DoubleSide
      });
      hexMaterial.onBeforeCompile = function(shader) {
        hexMaterial.userData.shader = invisibleUndergroundShaderExtend(shader);
      };
      var hexPoints = new THREE$d.Mesh(hexPointsGeometry, hexMaterial);
      hexPoints.__globeObjType = "hexBinPoints";
      hexPoints.__data = hexBins;
      state.dataMapper.clear();
      emptyObject3(state.scene);
      state.scene.add(hexPoints);
    }
    function createObj(d2) {
      var obj = new THREE$d.Mesh();
      obj.__hexCenter = cellToLatLng(d2.h3Idx);
      obj.__hexGeoJson = cellToBoundary(d2.h3Idx, true).reverse();
      var centerLng = obj.__hexCenter[1];
      obj.__hexGeoJson.forEach(function(d3) {
        var edgeLng = d3[0];
        if (Math.abs(centerLng - edgeLng) > 170) {
          d3[0] += centerLng > edgeLng ? 360 : -360;
        }
      });
      obj.__globeObjType = "hexbin";
      return obj;
    }
    function updateObj(obj, d2) {
      var relNum = function relNum2(st, end, rat) {
        return st - (st - end) * rat;
      };
      var margin = Math.max(0, Math.min(1, +marginAccessor(d2)));
      var _obj$__hexCenter = _slicedToArray9(obj.__hexCenter, 2), clat = _obj$__hexCenter[0], clng = _obj$__hexCenter[1];
      var geoJson = margin === 0 ? obj.__hexGeoJson : obj.__hexGeoJson.map(function(_ref5) {
        var _ref6 = _slicedToArray9(_ref5, 2), elng = _ref6[0], elat = _ref6[1];
        return [[elng, clng], [elat, clat]].map(function(_ref7) {
          var _ref8 = _slicedToArray9(_ref7, 2), st = _ref8[0], end = _ref8[1];
          return relNum(st, end, margin);
        });
      });
      var topCurvatureResolution = state.hexTopCurvatureResolution;
      obj.geometry && obj.geometry.dispose();
      obj.geometry = new ConicPolygonGeometry([geoJson], 0, GLOBE_RADIUS, false, true, true, topCurvatureResolution);
      var targetD = {
        alt: +altitudeAccessor(d2)
      };
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
        obj.scale.x = obj.scale.y = obj.scale.z = 1 + alt;
        var vertexSurfaceRadius = GLOBE_RADIUS / (alt + 1);
        obj.geometry.setAttribute("surfaceRadius", array2BufferAttr(Array(obj.geometry.getAttribute("position").count).fill(vertexSurfaceRadius), 1));
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (state.hexBinMerge || !state.hexTransitionDuration || state.hexTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.hexTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
      if (!state.hexBinMerge) {
        var sideColor = sideColorAccessor(d2);
        var topColor = topColorAccessor(d2);
        [sideColor, topColor].forEach(function(color3) {
          if (!hexMaterials.hasOwnProperty(color3)) {
            var opacity = colorAlpha(color3);
            hexMaterials[color3] = applyShaderExtensionToMaterial(new THREE$d.MeshLambertMaterial({
              color: colorStr2Hex(color3),
              transparent: opacity < 1,
              opacity,
              side: THREE$d.DoubleSide
            }), invisibleUndergroundShaderExtend);
          }
        });
        obj.material = [sideColor, topColor].map(function(color3) {
          return hexMaterials[color3];
        });
      }
    }
  }
});
var sq = function sq2(x2) {
  return x2 * x2;
};
var toRad = function toRad2(x2) {
  return x2 * Math.PI / 180;
};
function geoDistance(a2, b) {
  var sqrt5 = Math.sqrt;
  var cos4 = Math.cos;
  var hav = function hav2(x2) {
    return sq(Math.sin(x2 / 2));
  };
  var latA = toRad(a2[1]);
  var latB = toRad(b[1]);
  var lngA = toRad(a2[0]);
  var lngB = toRad(b[0]);
  return 2 * Math.asin(sqrt5(hav(latB - latA) + cos4(latA) * cos4(latB) * hav(lngB - lngA)));
}
var sqrt2PI = Math.sqrt(2 * Math.PI);
function gaussianKernel(x2, bw) {
  return Math.exp(-sq(x2 / bw) / 2) / (bw * sqrt2PI);
}
var getGeoKDE = function getGeoKDE2(_ref) {
  var _ref2 = _slicedToArray9(_ref, 2), lng = _ref2[0], lat = _ref2[1];
  var data = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [];
  var _ref3 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref3$lngAccessor = _ref3.lngAccessor, lngAccessor = _ref3$lngAccessor === void 0 ? function(d2) {
    return d2[0];
  } : _ref3$lngAccessor, _ref3$latAccessor = _ref3.latAccessor, latAccessor = _ref3$latAccessor === void 0 ? function(d2) {
    return d2[1];
  } : _ref3$latAccessor, _ref3$weightAccessor = _ref3.weightAccessor, weightAccessor = _ref3$weightAccessor === void 0 ? function() {
    return 1;
  } : _ref3$weightAccessor, bandwidth = _ref3.bandwidth;
  var pnt = [lng, lat];
  var bwRad = bandwidth * Math.PI / 180;
  return sum(data.map(function(d2) {
    var weight = weightAccessor(d2);
    if (!weight) return 0;
    var dist2 = geoDistance(pnt, [lngAccessor(d2), latAccessor(d2)]);
    return gaussianKernel(dist2, bwRad) * weight;
  }));
};
var computeGeoKde = function() {
  var _ref4 = _asyncToGenerator(_regenerator().m(function _callee(vertexGeoCoords) {
    var _navigator;
    var data, _ref5, _ref5$lngAccessor, lngAccessor, _ref5$latAccessor, latAccessor, _ref5$weightAccessor, weightAccessor, bandwidth, BW_RADIUS_INFLUENCE, Fn2, If2, uniform2, storage2, _float, instanceIndex2, Loop2, sqrt5, sin4, cos4, asin4, exp3, negate3, sCoords, sData, res, sRes, PI3, sqrt2PI2, sq3, hav, geoDistance2, gaussianKernel2, bwRad, maxRRad, n2, computeShaderFn, computeNode, renderer3, _args = arguments, _t, _t2, _t3, _t4;
    return _regenerator().w(function(_context) {
      while (1) switch (_context.n) {
        case 0:
          data = _args.length > 1 && _args[1] !== void 0 ? _args[1] : [];
          _ref5 = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {}, _ref5$lngAccessor = _ref5.lngAccessor, lngAccessor = _ref5$lngAccessor === void 0 ? function(d2) {
            return d2[0];
          } : _ref5$lngAccessor, _ref5$latAccessor = _ref5.latAccessor, latAccessor = _ref5$latAccessor === void 0 ? function(d2) {
            return d2[1];
          } : _ref5$latAccessor, _ref5$weightAccessor = _ref5.weightAccessor, weightAccessor = _ref5$weightAccessor === void 0 ? function() {
            return 1;
          } : _ref5$weightAccessor, bandwidth = _ref5.bandwidth;
          if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.gpu) {
            _context.n = 1;
            break;
          }
          console.warn("WebGPU not enabled in browser. Please consider enabling it to improve performance.");
          return _context.a(2, vertexGeoCoords.map(function(coords) {
            return getGeoKDE(coords, data, {
              lngAccessor,
              latAccessor,
              weightAccessor,
              bandwidth
            });
          }));
        case 1:
          BW_RADIUS_INFLUENCE = 4;
          Fn2 = Fn, If2 = If, uniform2 = uniform, storage2 = storage, _float = float, instanceIndex2 = instanceIndex, Loop2 = Loop, sqrt5 = sqrt4, sin4 = sin3, cos4 = cos3, asin4 = asin3, exp3 = exp2, negate3 = negate2;
          sCoords = storage2(new StorageInstancedBufferAttribute(new Float32Array(vertexGeoCoords.flat().map(toRad)), 2), "vec2", vertexGeoCoords.length);
          sData = storage2(new StorageInstancedBufferAttribute(new Float32Array(data.map(function(d2) {
            return [toRad(lngAccessor(d2)), toRad(latAccessor(d2)), weightAccessor(d2)];
          }).flat()), 3), "vec3", data.length);
          res = new StorageInstancedBufferAttribute(vertexGeoCoords.length, 1);
          sRes = storage2(res, "float", vertexGeoCoords.length);
          PI3 = _float(Math.PI);
          sqrt2PI2 = sqrt5(PI3.mul(2));
          sq3 = function sq4(x2) {
            return x2.mul(x2);
          };
          hav = function hav2(x2) {
            return sq3(sin4(x2.div(2)));
          };
          geoDistance2 = function geoDistance3(a2, b) {
            var latA = _float(a2[1]);
            var latB = _float(b[1]);
            var lngA = _float(a2[0]);
            var lngB = _float(b[0]);
            return _float(2).mul(asin4(sqrt5(hav(latB.sub(latA)).add(cos4(latA).mul(cos4(latB)).mul(hav(lngB.sub(lngA)))))));
          };
          gaussianKernel2 = function gaussianKernel3(x2, bw) {
            return exp3(negate3(sq3(x2.div(bw)).div(2))).div(bw.mul(sqrt2PI2));
          };
          bwRad = uniform2(toRad(bandwidth));
          maxRRad = uniform2(toRad(bandwidth * BW_RADIUS_INFLUENCE));
          n2 = uniform2(data.length);
          computeShaderFn = Fn2(function() {
            var coords = sCoords.element(instanceIndex2);
            var res2 = sRes.element(instanceIndex2);
            res2.assign(0);
            Loop2(n2, function(_ref6) {
              var i2 = _ref6.i;
              var d2 = sData.element(i2);
              var weight = d2.z;
              If2(weight, function() {
                var dist2 = geoDistance2(d2.xy, coords.xy);
                If2(dist2 && dist2.lessThan(maxRRad), function() {
                  res2.addAssign(gaussianKernel2(dist2, bwRad).mul(weight));
                });
              });
            });
          });
          computeNode = computeShaderFn().compute(vertexGeoCoords.length);
          renderer3 = new WebGPURenderer();
          _context.n = 2;
          return renderer3.computeAsync(computeNode);
        case 2:
          _t = Array;
          _t2 = Float32Array;
          _context.n = 3;
          return renderer3.getArrayBufferAsync(res);
        case 3:
          _t3 = _context.v;
          _t4 = new _t2(_t3);
          return _context.a(2, _t.from.call(_t, _t4));
      }
    }, _callee);
  }));
  return function computeGeoKde2(_x3) {
    return _ref4.apply(this, arguments);
  };
}();
var THREE$c = window.THREE ? window.THREE : {
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var RES_BW_FACTOR = 3.5;
var MIN_RESOLUTION = 0.1;
var NUM_COLORS = 100;
var defaultColorInterpolator = function defaultColorInterpolator2(t4) {
  var c4 = color(turbo_default(t4));
  c4.opacity = Math.cbrt(t4);
  return c4.formatRgb();
};
var HeatmapsLayerKapsule = index2({
  props: {
    heatmapsData: {
      "default": []
    },
    heatmapPoints: {
      "default": function _default7(pnts) {
        return pnts;
      }
    },
    heatmapPointLat: {
      "default": function _default8(d2) {
        return d2[0];
      }
    },
    heatmapPointLng: {
      "default": function _default9(d2) {
        return d2[1];
      }
    },
    heatmapPointWeight: {
      "default": 1
    },
    heatmapBandwidth: {
      "default": 2.5
    },
    // Gaussian kernel bandwidth, in angular degrees
    heatmapColorFn: {
      "default": function _default10() {
        return defaultColorInterpolator;
      }
    },
    heatmapColorSaturation: {
      "default": 1.5
    },
    // multiplier for color scale max
    heatmapBaseAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    heatmapTopAltitude: {},
    // in units of globe radius
    heatmapsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
    // ms
  },
  init: function init5(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHeatmap"
    }).onCreateObj(function() {
      var obj = new THREE$c.Mesh(new THREE$c.SphereGeometry(GLOBE_RADIUS), applyShaderExtensionToMaterial(new THREE$c.MeshLambertMaterial({
        vertexColors: true,
        transparent: true
      }), setRadiusShaderExtend));
      obj.__globeObjType = "heatmap";
      return obj;
    });
  },
  update: function update6(state) {
    var pointsAccessor = index4(state.heatmapPoints);
    var latPntAccessor = index4(state.heatmapPointLat);
    var lngPntAccessor = index4(state.heatmapPointLng);
    var weightPntAccessor = index4(state.heatmapPointWeight);
    var bandwidthAccessor = index4(state.heatmapBandwidth);
    var colorFnAccessor = index4(state.heatmapColorFn);
    var saturationAccessor = index4(state.heatmapColorSaturation);
    var baseAltitudeAccessor = index4(state.heatmapBaseAltitude);
    var topAltitudeAccessor = index4(state.heatmapTopAltitude);
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var bandwidth = bandwidthAccessor(d2);
      var colorFn = colorFnAccessor(d2);
      var saturation2 = saturationAccessor(d2);
      var baseAlt = baseAltitudeAccessor(d2);
      var topAlt = topAltitudeAccessor(d2);
      var pnts = pointsAccessor(d2).map(function(pnt) {
        var lat = latPntAccessor(pnt);
        var lng = lngPntAccessor(pnt);
        var _polar2Cartesian = polar2Cartesian4(lat, lng), x2 = _polar2Cartesian.x, y2 = _polar2Cartesian.y, z2 = _polar2Cartesian.z;
        return {
          x: x2,
          y: y2,
          z: z2,
          lat,
          lng,
          weight: weightPntAccessor(pnt)
        };
      });
      var resolution3 = Math.max(MIN_RESOLUTION, bandwidth / RES_BW_FACTOR);
      var equatorNumSegments = Math.ceil(360 / (resolution3 || -1));
      if (obj.geometry.parameters.widthSegments !== equatorNumSegments) {
        obj.geometry.dispose();
        obj.geometry = new THREE$c.SphereGeometry(GLOBE_RADIUS, equatorNumSegments, equatorNumSegments / 2);
      }
      var vertexCoords = bufferAttr2Array(obj.geometry.getAttribute("position"));
      var vertexGeoCoords = vertexCoords.map(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 3), x2 = _ref3[0], y2 = _ref3[1], z2 = _ref3[2];
        var _cartesian2Polar = cartesian2Polar2({
          x: x2,
          y: y2,
          z: z2
        }), lng = _cartesian2Polar.lng, lat = _cartesian2Polar.lat;
        return [lng, lat];
      });
      computeGeoKde(vertexGeoCoords, pnts, {
        latAccessor: function latAccessor(d3) {
          return d3.lat;
        },
        lngAccessor: function lngAccessor(d3) {
          return d3.lng;
        },
        weightAccessor: function weightAccessor(d3) {
          return d3.weight;
        },
        bandwidth
      }).then(function(kdeVals) {
        var colors = _toConsumableArray8(new Array(NUM_COLORS)).map(function(_2, idx) {
          return color2ShaderArr(colorFn(idx / (NUM_COLORS - 1)));
        });
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, kdeVals2 = _obj$__currentTargetD.kdeVals, topAlt2 = _obj$__currentTargetD.topAlt, saturation3 = _obj$__currentTargetD.saturation;
          var maxVal = max(kdeVals2.map(Math.abs)) || 1e-15;
          var colorScale = quantize([0, maxVal / saturation3], colors);
          obj.geometry.setAttribute("color", array2BufferAttr(kdeVals2.map(function(v3) {
            return colorScale(Math.abs(v3));
          }), 4));
          var rScale = linear2([0, maxVal], [GLOBE_RADIUS * (1 + baseAlt), GLOBE_RADIUS * (1 + (topAlt2 || baseAlt))]);
          obj.geometry.setAttribute("r", array2BufferAttr(kdeVals2.map(rScale)));
        };
        var targetD = {
          kdeVals,
          topAlt,
          saturation: saturation2
        };
        var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
          kdeVals: kdeVals.map(function() {
            return 0;
          }),
          topAlt: !topAlt ? topAlt : baseAlt,
          saturation: 0.5
        });
        currentTargetD.kdeVals.length !== kdeVals.length && (currentTargetD.kdeVals = kdeVals.slice());
        if (Object.keys(targetD).some(function(k2) {
          return currentTargetD[k2] !== targetD[k2];
        })) {
          if (!state.heatmapsTransitionDuration || state.heatmapsTransitionDuration < 0) {
            applyUpdate(targetD);
          } else {
            state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.heatmapsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
          }
        }
      });
    }).digest(state.heatmapsData);
  }
});
var THREE$b = window.THREE ? window.THREE : {
  DoubleSide,
  Group,
  LineBasicMaterial,
  LineSegments,
  Mesh,
  MeshBasicMaterial
};
var PolygonsLayerKapsule = index2({
  props: {
    polygonsData: {
      "default": []
    },
    polygonGeoJsonGeometry: {
      "default": "geometry"
    },
    polygonSideColor: {
      "default": function _default11() {
        return "#ffffaa";
      }
    },
    polygonSideMaterial: {},
    polygonCapColor: {
      "default": function _default12() {
        return "#ffffaa";
      }
    },
    polygonCapMaterial: {},
    polygonStrokeColor: {},
    polygonAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    polygonCapCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    polygonsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init6(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjPolygon"
    }).id(function(d2) {
      return d2.id;
    }).onCreateObj(function() {
      var obj = new THREE$b.Group();
      obj.__defaultSideMaterial = applyShaderExtensionToMaterial(new THREE$b.MeshBasicMaterial({
        side: THREE$b.DoubleSide,
        depthWrite: true
      }), invisibleUndergroundShaderExtend);
      obj.__defaultCapMaterial = new THREE$b.MeshBasicMaterial({
        side: THREE$b.DoubleSide,
        depthWrite: true
      });
      obj.add(new THREE$b.Mesh(void 0, [
        obj.__defaultSideMaterial,
        // side material
        obj.__defaultCapMaterial
        // cap material
      ]));
      obj.add(new THREE$b.LineSegments(void 0, new THREE$b.LineBasicMaterial()));
      obj.__globeObjType = "polygon";
      return obj;
    });
  },
  update: function update7(state) {
    var geoJsonAccessor = index4(state.polygonGeoJsonGeometry);
    var altitudeAccessor = index4(state.polygonAltitude);
    var capCurvatureResolutionAccessor = index4(state.polygonCapCurvatureResolution);
    var capColorAccessor = index4(state.polygonCapColor);
    var capMaterialAccessor = index4(state.polygonCapMaterial);
    var sideColorAccessor = index4(state.polygonSideColor);
    var sideMaterialAccessor = index4(state.polygonSideMaterial);
    var strokeColorAccessor = index4(state.polygonStrokeColor);
    var singlePolygons = [];
    state.polygonsData.forEach(function(polygon) {
      var objAttrs = {
        data: polygon,
        capColor: capColorAccessor(polygon),
        capMaterial: capMaterialAccessor(polygon),
        sideColor: sideColorAccessor(polygon),
        sideMaterial: sideMaterialAccessor(polygon),
        strokeColor: strokeColorAccessor(polygon),
        altitude: +altitudeAccessor(polygon),
        capCurvatureResolution: +capCurvatureResolutionAccessor(polygon)
      };
      var geoJson = geoJsonAccessor(polygon);
      var geoId = polygon.__id || "".concat(Math.round(Math.random() * 1e9));
      polygon.__id = geoId;
      if (geoJson.type === "Polygon") {
        singlePolygons.push(_objectSpread2({
          id: "".concat(geoId, "_0"),
          coords: geoJson.coordinates
        }, objAttrs));
      } else if (geoJson.type === "MultiPolygon") {
        singlePolygons.push.apply(singlePolygons, _toConsumableArray8(geoJson.coordinates.map(function(coords, idx) {
          return _objectSpread2({
            id: "".concat(geoId, "_").concat(idx),
            coords
          }, objAttrs);
        })));
      } else {
        console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
      }
    });
    state.dataMapper.onUpdateObj(function(obj, _ref2) {
      var coords = _ref2.coords, capColor = _ref2.capColor, capMaterial = _ref2.capMaterial, sideColor = _ref2.sideColor, sideMaterial = _ref2.sideMaterial, strokeColor = _ref2.strokeColor, altitude = _ref2.altitude, capCurvatureResolution = _ref2.capCurvatureResolution;
      var _obj$children = _slicedToArray9(obj.children, 2), conicObj = _obj$children[0], strokeObj = _obj$children[1];
      var addStroke = !!strokeColor;
      strokeObj.visible = addStroke;
      var hasCap = !!(capColor || capMaterial);
      var hasSide = !!(sideColor || sideMaterial);
      if (!objMatch(conicObj.geometry.parameters || {}, {
        polygonGeoJson: coords,
        curvatureResolution: capCurvatureResolution,
        closedTop: hasCap,
        includeSides: hasSide
      })) {
        conicObj.geometry && conicObj.geometry.dispose();
        conicObj.geometry = new ConicPolygonGeometry(coords, 0, GLOBE_RADIUS, false, hasCap, hasSide, capCurvatureResolution);
      }
      if (addStroke && (!strokeObj.geometry.parameters || strokeObj.geometry.parameters.geoJson.coordinates !== coords || strokeObj.geometry.parameters.resolution !== capCurvatureResolution)) {
        strokeObj.geometry && strokeObj.geometry.dispose();
        strokeObj.geometry = new GeoJsonGeometry({
          type: "Polygon",
          coordinates: coords
        }, GLOBE_RADIUS, capCurvatureResolution);
      }
      var sideIdx = hasSide ? 0 : -1;
      var capIdx = !hasCap ? -1 : hasSide ? 1 : 0;
      sideIdx >= 0 && (conicObj.material[sideIdx] = sideMaterial || obj.__defaultSideMaterial);
      capIdx >= 0 && (conicObj.material[capIdx] = capMaterial || obj.__defaultCapMaterial);
      [[!sideMaterial && sideColor, sideIdx], [!capMaterial && capColor, capIdx]].forEach(function(_ref3) {
        var _ref4 = _slicedToArray9(_ref3, 2), color3 = _ref4[0], materialIdx = _ref4[1];
        if (!color3 || materialIdx < 0) return;
        var material2 = conicObj.material[materialIdx];
        var opacity2 = colorAlpha(color3);
        material2.color.set(colorStr2Hex(color3));
        material2.transparent = opacity2 < 1;
        material2.opacity = opacity2;
      });
      if (addStroke) {
        var material = strokeObj.material;
        var opacity = colorAlpha(strokeColor);
        material.color.set(colorStr2Hex(strokeColor));
        material.transparent = opacity < 1;
        material.opacity = opacity;
      }
      var targetD = {
        alt: altitude
      };
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt;
        conicObj.scale.x = conicObj.scale.y = conicObj.scale.z = 1 + alt;
        addStroke && (strokeObj.scale.x = strokeObj.scale.y = strokeObj.scale.z = 1 + alt + 1e-4);
        setExtendedMaterialUniforms(obj.__defaultSideMaterial, function(uniforms) {
          return uniforms.surfaceRadius.value = GLOBE_RADIUS / (alt + 1);
        });
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.polygonsTransitionDuration || state.polygonsTransitionDuration < 0 || currentTargetD.alt === targetD.alt) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.polygonsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(singlePolygons);
  }
});
function objMatch(obj, attrs) {
  var compFn = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : function() {
    return function(a2, b) {
      return a2 === b;
    };
  };
  return Object.entries(attrs).every(function(_ref5) {
    var _ref6 = _slicedToArray9(_ref5, 2), k2 = _ref6[0], v3 = _ref6[1];
    return obj.hasOwnProperty(k2) && compFn(k2)(obj[k2], v3);
  });
}
var THREE$a = window.THREE ? window.THREE : {
  BufferGeometry,
  DoubleSide,
  Mesh,
  MeshLambertMaterial,
  Vector3
};
var bfg = Object.assign({}, BufferGeometryUtils_exports);
var BufferGeometryUtils = bfg.BufferGeometryUtils || bfg;
var HexedPolygonsLayerKapsule = index2({
  props: {
    hexPolygonsData: {
      "default": []
    },
    hexPolygonGeoJsonGeometry: {
      "default": "geometry"
    },
    hexPolygonColor: {
      "default": function _default13() {
        return "#ffffaa";
      }
    },
    hexPolygonAltitude: {
      "default": 1e-3
    },
    // in units of globe radius
    hexPolygonResolution: {
      "default": 3
    },
    // 0-15. Level 0 partitions the earth in 122 (mostly) hexagonal cells. Each subsequent level sub-divides the previous in roughly 7 hexagons.
    hexPolygonMargin: {
      "default": 0.2
    },
    // in fraction of hex diameter
    hexPolygonUseDots: {
      "default": false
    },
    // if points should be circular instead of hexagonal
    hexPolygonCurvatureResolution: {
      "default": 5
    },
    // in angular degrees, only relevant for hex tops
    hexPolygonDotResolution: {
      "default": 12
    },
    // how many slice segments in the dot circle's circumference
    hexPolygonsTransitionDuration: {
      "default": 0,
      triggerUpdate: false
    }
    // ms
  },
  init: function init7(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHexPolygon"
    }).onCreateObj(function() {
      var obj = new THREE$a.Mesh(void 0, new THREE$a.MeshLambertMaterial({
        side: THREE$a.DoubleSide
      }));
      obj.__globeObjType = "hexPolygon";
      return obj;
    });
  },
  update: function update8(state) {
    var geoJsonAccessor = index4(state.hexPolygonGeoJsonGeometry);
    var colorAccessor = index4(state.hexPolygonColor);
    var altitudeAccessor = index4(state.hexPolygonAltitude);
    var resolutionAccessor = index4(state.hexPolygonResolution);
    var marginAccessor = index4(state.hexPolygonMargin);
    var useDotsAccessor = index4(state.hexPolygonUseDots);
    var curvatureResolutionAccessor = index4(state.hexPolygonCurvatureResolution);
    var dotResolutionAccessor = index4(state.hexPolygonDotResolution);
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var geoJson = geoJsonAccessor(d2);
      var h3Res = resolutionAccessor(d2);
      var alt = altitudeAccessor(d2);
      var margin = Math.max(0, Math.min(1, +marginAccessor(d2)));
      var useDots = useDotsAccessor(d2);
      var curvatureResolution = curvatureResolutionAccessor(d2);
      var dotResolution = dotResolutionAccessor(d2);
      var color3 = colorAccessor(d2);
      var opacity = colorAlpha(color3);
      obj.material.color.set(colorStr2Hex(color3));
      obj.material.transparent = opacity < 1;
      obj.material.opacity = opacity;
      var targetD = {
        alt,
        margin,
        curvatureResolution
      };
      var memD = {
        geoJson,
        h3Res
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        alt: -1e-3
      });
      var currentMemD = obj.__currentMemD || memD;
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      }) || Object.keys(memD).some(function(k2) {
        return currentMemD[k2] !== memD[k2];
      })) {
        obj.__currentMemD = memD;
        var h3Idxs = [];
        if (geoJson.type === "Polygon") {
          polygonToCells(geoJson.coordinates, h3Res, true).forEach(function(idx) {
            return h3Idxs.push(idx);
          });
        } else if (geoJson.type === "MultiPolygon") {
          geoJson.coordinates.forEach(function(coords) {
            return polygonToCells(coords, h3Res, true).forEach(function(idx) {
              return h3Idxs.push(idx);
            });
          });
        } else {
          console.warn("Unsupported GeoJson geometry type: ".concat(geoJson.type, ". Skipping geometry..."));
        }
        var hexBins = h3Idxs.map(function(h3Idx) {
          var hexCenter = cellToLatLng(h3Idx);
          var hexGeoJson = cellToBoundary(h3Idx, true).reverse();
          var centerLng = hexCenter[1];
          hexGeoJson.forEach(function(d3) {
            var edgeLng = d3[0];
            if (Math.abs(centerLng - edgeLng) > 170) {
              d3[0] += centerLng > edgeLng ? 360 : -360;
            }
          });
          return {
            h3Idx,
            hexCenter,
            hexGeoJson
          };
        });
        var applyUpdate = function applyUpdate2(td) {
          var _obj$__currentTargetD = obj.__currentTargetD = td, alt2 = _obj$__currentTargetD.alt, margin2 = _obj$__currentTargetD.margin, curvatureResolution2 = _obj$__currentTargetD.curvatureResolution;
          obj.geometry && obj.geometry.dispose();
          obj.geometry = !hexBins.length ? new THREE$a.BufferGeometry() : (BufferGeometryUtils.mergeGeometries || BufferGeometryUtils.mergeBufferGeometries)(hexBins.map(function(h2) {
            var _h$hexCenter = _slicedToArray9(h2.hexCenter, 2), clat = _h$hexCenter[0], clng = _h$hexCenter[1];
            if (useDots) {
              var centerPos = polar2Cartesian4(clat, clng, alt2);
              var edgePos = polar2Cartesian4(h2.hexGeoJson[0][1], h2.hexGeoJson[0][0], alt2);
              var r2 = 0.85 * (1 - margin2) * new THREE$a.Vector3(centerPos.x, centerPos.y, centerPos.z).distanceTo(new THREE$a.Vector3(edgePos.x, edgePos.y, edgePos.z));
              var geometry = new CircleGeometry(r2, dotResolution);
              geometry.rotateX(deg2Rad$1(-clat));
              geometry.rotateY(deg2Rad$1(clng));
              geometry.translate(centerPos.x, centerPos.y, centerPos.z);
              return geometry;
            } else {
              var relNum = function relNum2(st, end, rat) {
                return st - (st - end) * rat;
              };
              var _geoJson = margin2 === 0 ? h2.hexGeoJson : h2.hexGeoJson.map(function(_ref2) {
                var _ref3 = _slicedToArray9(_ref2, 2), elng = _ref3[0], elat = _ref3[1];
                return [[elng, clng], [elat, clat]].map(function(_ref4) {
                  var _ref5 = _slicedToArray9(_ref4, 2), st = _ref5[0], end = _ref5[1];
                  return relNum(st, end, margin2);
                });
              });
              return new ConicPolygonGeometry([_geoJson], GLOBE_RADIUS, GLOBE_RADIUS * (1 + alt2), false, true, false, curvatureResolution2);
            }
          }));
        };
        if (!state.hexPolygonsTransitionDuration || state.hexPolygonsTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.hexPolygonsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(state.hexPolygonsData);
  }
});
var THREE$9 = window.THREE ? window.THREE : {
  Vector3
};
function interpolateVectors(fromPnts, toPnts) {
  var extendArr = function extendArr2(arr, length2) {
    var repeatItem = arr[arr.length - 1];
    return [].concat(_toConsumableArray8(arr), _toConsumableArray8(Array(length2 - arr.length).fill(repeatItem)));
  };
  var arrLength = Math.max(fromPnts.length, toPnts.length);
  var interpolator = array_default.apply(void 0, _toConsumableArray8([fromPnts, toPnts].map(function(pnts) {
    return pnts.map(function(_ref) {
      var x2 = _ref.x, y2 = _ref.y, z2 = _ref.z;
      return [x2, y2, z2];
    });
  }).map(function(arr) {
    return extendArr(arr, arrLength);
  })));
  return function(k2) {
    return k2 === 0 ? fromPnts : k2 === 1 ? toPnts : interpolator(k2).map(function(_ref2) {
      var _ref3 = _slicedToArray9(_ref2, 3), x2 = _ref3[0], y2 = _ref3[1], z2 = _ref3[2];
      return new THREE$9.Vector3(x2, y2, z2);
    });
  };
}
var THREE$8 = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  Group,
  Line,
  NormalBlending,
  ShaderMaterial,
  Vector3
};
var FrameTicker$1 = import_frame_ticker.default["default"] || import_frame_ticker.default;
var PathsLayerKapsule = index2({
  props: {
    pathsData: {
      "default": []
    },
    pathPoints: {
      "default": function _default14(pnts) {
        return pnts;
      }
    },
    pathPointLat: {
      "default": function _default15(arr) {
        return arr[0];
      }
    },
    pathPointLng: {
      "default": function _default16(arr) {
        return arr[1];
      }
    },
    pathPointAlt: {
      "default": 1e-3
    },
    pathResolution: {
      "default": 2
    },
    // in deg
    pathColor: {
      "default": function _default17() {
        return "#ffffaa";
      }
    },
    // single color, array of colors or color interpolation fn
    pathStroke: {},
    // in deg
    pathDashLength: {
      "default": 1
    },
    // in units of line length
    pathDashGap: {
      "default": 0
    },
    pathDashInitialGap: {
      "default": 0
    },
    pathDashAnimateTime: {
      "default": 0
    },
    // ms
    pathTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    // ms
    rendererSize: {}
    // necessary to set correct fatline proportions
  },
  methods: {
    pauseAnimation: function pauseAnimation2(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation2(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor3(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  stateInit: function stateInit3(_ref) {
    var tweenGroup = _ref.tweenGroup;
    return {
      tweenGroup,
      ticker: new FrameTicker$1(),
      sharedMaterial: new THREE$8.ShaderMaterial(_objectSpread2(_objectSpread2({}, dashedLineShaders()), {}, {
        transparent: true,
        blending: THREE$8.NormalBlending
      }))
    };
  },
  init: function init8(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjPath"
    }).onCreateObj(function() {
      var obj = new THREE$8.Group();
      obj.__globeObjType = "path";
      return obj;
    });
    state.ticker.onTick.add(function(_2, timeDelta) {
      state.dataMapper.entries().map(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 2), obj = _ref3[1];
        return obj;
      }).filter(function(o2) {
        return o2.children.length && o2.children[0].material && o2.children[0].__dashAnimateStep;
      }).forEach(function(o2) {
        var obj = o2.children[0];
        var step2 = obj.__dashAnimateStep * timeDelta;
        if (obj.type === "Line") {
          var curTranslate = obj.material.uniforms.dashTranslate.value % 1e9;
          obj.material.uniforms.dashTranslate.value = curTranslate + step2;
        } else if (obj.type === "Line2") {
          var offset = obj.material.dashOffset - step2;
          var dashLength = obj.material.dashSize + obj.material.gapSize;
          while (offset <= -dashLength) offset += dashLength;
          obj.material.dashOffset = offset;
        }
      });
    });
  },
  update: function update9(state) {
    var pointsAccessor = index4(state.pathPoints);
    var pointLatAccessor = index4(state.pathPointLat);
    var pointLngAccessor = index4(state.pathPointLng);
    var pointAltAccessor = index4(state.pathPointAlt);
    var strokeAccessor = index4(state.pathStroke);
    var colorAccessor = index4(state.pathColor);
    var dashLengthAccessor = index4(state.pathDashLength);
    var dashGapAccessor = index4(state.pathDashGap);
    var dashInitialGapAccessor = index4(state.pathDashInitialGap);
    var dashAnimateTimeAccessor = index4(state.pathDashAnimateTime);
    state.dataMapper.onUpdateObj(function(group2, path) {
      var stroke = strokeAccessor(path);
      var useFatLine = stroke !== null && stroke !== void 0;
      if (!group2.children.length || useFatLine === (group2.children[0].type === "Line")) {
        emptyObject3(group2);
        var _obj3 = useFatLine ? new Line2(new LineGeometry(), new LineMaterial()) : new THREE$8.Line(
          new THREE$8.BufferGeometry(),
          state.sharedMaterial.clone()
          // Separate material instance per object to have dedicated uniforms (but shared shaders)
        );
        group2.add(_obj3);
      }
      var obj = group2.children[0];
      var points = calcPath(pointsAccessor(path), pointLatAccessor, pointLngAccessor, pointAltAccessor, state.pathResolution);
      var dashAnimateTime = dashAnimateTimeAccessor(path);
      obj.__dashAnimateStep = dashAnimateTime > 0 ? 1e3 / dashAnimateTime : 0;
      if (!useFatLine) {
        Object.assign(obj.material.uniforms, {
          dashSize: {
            value: dashLengthAccessor(path)
          },
          gapSize: {
            value: dashGapAccessor(path)
          },
          dashOffset: {
            value: dashInitialGapAccessor(path)
          }
        });
        var vertexColorArray = calcColorVertexArray(
          colorAccessor(path),
          // single, array of colors or interpolator
          points.length
          // numSegments
        );
        var vertexRelDistanceArray = calcVertexRelDistances(
          points.length,
          // numSegments
          1,
          // num vertices per segment
          true
          // run from end to start, to animate in the correct direction
        );
        obj.geometry.setAttribute("color", vertexColorArray);
        obj.geometry.setAttribute("relDistance", vertexRelDistanceArray);
      } else {
        obj.material.resolution = state.rendererSize;
        {
          var dashLength = dashLengthAccessor(path);
          var dashGap = dashGapAccessor(path);
          var dashInitialGap = dashInitialGapAccessor(path);
          obj.material.dashed = dashGap > 0;
          obj.material.dashed ? obj.material.defines.USE_DASH = "" : delete obj.material.defines.USE_DASH;
          if (obj.material.dashed) {
            obj.material.dashScale = 1 / calcLineDistance(points);
            obj.material.dashSize = dashLength;
            obj.material.gapSize = dashGap;
            obj.material.dashOffset = -dashInitialGap;
          }
        }
        {
          var colors = colorAccessor(path);
          if (colors instanceof Array) {
            var _vertexColorArray = calcColorVertexArray(
              colorAccessor(path),
              // single, array of colors or interpolator
              points.length - 1,
              // numSegments
              1,
              // num vertices per segment
              false
            );
            obj.geometry.setColors(_vertexColorArray.array);
            obj.material.vertexColors = true;
          } else {
            var color3 = colors;
            var opacity = colorAlpha(color3);
            obj.material.color = new THREE$8.Color(colorStr2Hex(color3));
            obj.material.transparent = opacity < 1;
            obj.material.opacity = opacity;
            obj.material.vertexColors = false;
          }
        }
        obj.material.needsUpdate = true;
      }
      var pointsInterpolator = interpolateVectors(group2.__currentTargetD && group2.__currentTargetD.points || [points[0]], points);
      var applyUpdate = function applyUpdate2(td) {
        var _group$__currentTarge = group2.__currentTargetD = td, stroke2 = _group$__currentTarge.stroke, interpolK = _group$__currentTarge.interpolK;
        var kPoints = group2.__currentTargetD.points = pointsInterpolator(interpolK);
        if (useFatLine) {
          var _ref4;
          obj.geometry.setPositions((_ref4 = []).concat.apply(_ref4, _toConsumableArray8(kPoints.map(function(_ref5) {
            var x2 = _ref5.x, y2 = _ref5.y, z2 = _ref5.z;
            return [x2, y2, z2];
          }))));
          obj.material.linewidth = stroke2;
          obj.material.dashed && obj.computeLineDistances();
        } else {
          obj.geometry.setFromPoints(kPoints);
          obj.geometry.computeBoundingSphere();
        }
      };
      var targetD = {
        stroke,
        interpolK: 1
      };
      var currentTargetD = Object.assign({}, group2.__currentTargetD || targetD, {
        interpolK: 0
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.pathTransitionDuration || state.pathTransitionDuration < 0) {
          applyUpdate(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.pathTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
        }
      }
    }).digest(state.pathsData);
    function calcLineDistance(pnts) {
      var totalDist = 0;
      var prevPnt;
      pnts.forEach(function(pnt) {
        prevPnt && (totalDist += prevPnt.distanceTo(pnt));
        prevPnt = pnt;
      });
      return totalDist;
    }
    function calcPath(points, latAccessor, lngAccessor, altAccessor, angularResolution) {
      var getInterpolatedVals = function getInterpolatedVals2(start, end, numPnts) {
        var result = [];
        for (var i2 = 1; i2 <= numPnts; i2++) {
          result.push(start + (end - start) * i2 / (numPnts + 1));
        }
        return result;
      };
      var interpolateLine3 = function interpolateLine4() {
        var lineCoords = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
        var maxDegDistance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
        var result = [];
        var prevPnt = null;
        lineCoords.forEach(function(pnt) {
          if (prevPnt) {
            while (Math.abs(prevPnt[1] - pnt[1]) > 180) prevPnt[1] += 360 * (prevPnt[1] < pnt[1] ? 1 : -1);
            var dist2 = Math.sqrt(Math.pow(pnt[0] - prevPnt[0], 2) + Math.pow(pnt[1] - prevPnt[1], 2));
            if (dist2 > maxDegDistance) {
              var numAdditionalPnts = Math.floor(dist2 / maxDegDistance);
              var lats = getInterpolatedVals(prevPnt[0], pnt[0], numAdditionalPnts);
              var lngs = getInterpolatedVals(prevPnt[1], pnt[1], numAdditionalPnts);
              var alts = getInterpolatedVals(prevPnt[2], pnt[2], numAdditionalPnts);
              for (var i2 = 0, len = lats.length; i2 < len; i2++) {
                result.push([lats[i2], lngs[i2], alts[i2]]);
              }
            }
          }
          result.push(prevPnt = pnt);
        });
        return result;
      };
      var getVec = function getVec2(_ref6) {
        var _ref7 = _slicedToArray9(_ref6, 3), lat = _ref7[0], lng = _ref7[1], alt = _ref7[2];
        var _polar2Cartesian = polar2Cartesian4(lat, lng, alt), x2 = _polar2Cartesian.x, y2 = _polar2Cartesian.y, z2 = _polar2Cartesian.z;
        return new THREE$8.Vector3(x2, y2, z2);
      };
      return interpolateLine3(points.map(function(pnt) {
        return [latAccessor(pnt), lngAccessor(pnt), altAccessor(pnt)];
      }), angularResolution).map(getVec);
    }
    function calcColorVertexArray(colors, numSegments) {
      var numVerticesPerSegment = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 1;
      var includeAlpha = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : true;
      var numVerticesGroup = numSegments + 1;
      var getVertexColor;
      if (colors instanceof Array || colors instanceof Function) {
        var colorInterpolator = colors instanceof Array ? linear2().domain(colors.map(function(_2, idx) {
          return idx / (colors.length - 1);
        })).range(colors) : colors;
        getVertexColor = function getVertexColor2(t4) {
          return color2ShaderArr(colorInterpolator(t4), includeAlpha, true);
        };
      } else {
        var vertexColor = color2ShaderArr(colors, includeAlpha, true);
        getVertexColor = function getVertexColor2() {
          return vertexColor;
        };
      }
      var vertexColors = [];
      for (var v3 = 0, l2 = numVerticesGroup; v3 < l2; v3++) {
        var _vertexColor = getVertexColor(v3 / (l2 - 1));
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexColors.push(_vertexColor);
        }
      }
      return array2BufferAttr(vertexColors, includeAlpha ? 4 : 3);
    }
    function calcVertexRelDistances(numSegments) {
      var numVerticesPerSegment = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 1;
      var invert = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
      var numVerticesGroup = numSegments + 1;
      var vertexDistances = [];
      for (var v3 = 0, l2 = numVerticesGroup; v3 < l2; v3++) {
        var relDistance = v3 / (l2 - 1);
        for (var s2 = 0; s2 < numVerticesPerSegment; s2++) {
          vertexDistances.push(relDistance);
        }
      }
      invert && vertexDistances.reverse();
      return array2BufferAttr(vertexDistances, 1);
    }
  }
});
var THREE$7 = window.THREE ? window.THREE : {
  Euler,
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var TilesLayerKapsule = index2({
  props: {
    tilesData: {
      "default": []
    },
    tileLat: {
      "default": "lat"
    },
    // tile centroid
    tileLng: {
      "default": "lng"
    },
    tileAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    tileWidth: {
      "default": 1
    },
    // in lng degrees
    tileHeight: {
      "default": 1
    },
    // in lat degrees
    tileUseGlobeProjection: {
      "default": true
    },
    // whether to size tiles relative to the globe coordinate system, or independently
    tileMaterial: {
      "default": function _default18() {
        return new THREE$7.MeshLambertMaterial({
          color: "#ffbb88",
          opacity: 0.4,
          transparent: true
        });
      }
    },
    tileCurvatureResolution: {
      "default": 5
    },
    // in angular degrees
    tilesTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init9(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjTile"
    }).onCreateObj(function() {
      var obj = new THREE$7.Mesh();
      obj.__globeObjType = "tile";
      return obj;
    });
  },
  update: function update10(state) {
    var latAccessor = index4(state.tileLat);
    var lngAccessor = index4(state.tileLng);
    var altitudeAccessor = index4(state.tileAltitude);
    var widthAccessor = index4(state.tileWidth);
    var heightAccessor = index4(state.tileHeight);
    var useGlobeProjectionAccessor = index4(state.tileUseGlobeProjection);
    var materialAccessor = index4(state.tileMaterial);
    var curvatureResolutionAccessor = index4(state.tileCurvatureResolution);
    state.dataMapper.onUpdateObj(function(obj, d2) {
      obj.material = materialAccessor(d2);
      var useGlobeProjection = useGlobeProjectionAccessor(d2);
      var curvatureResolution = curvatureResolutionAccessor(d2);
      var applyPosition = function applyPosition2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, width = _obj$__currentTargetD.width, height = _obj$__currentTargetD.height;
        var rotLng = deg2Rad2(lng);
        var rotLat = deg2Rad2(-lat);
        obj.geometry && obj.geometry.dispose();
        obj.geometry = new THREE$7.SphereGeometry(GLOBE_RADIUS * (1 + alt), Math.ceil(width / (curvatureResolution || -1)), Math.ceil(height / (curvatureResolution || -1)), deg2Rad2(90 - width / 2) + (useGlobeProjection ? rotLng : 0), deg2Rad2(width), deg2Rad2(90 - height / 2) + (useGlobeProjection ? rotLat : 0), deg2Rad2(height));
        if (!useGlobeProjection) {
          obj.setRotationFromEuler(new THREE$7.Euler(rotLat, rotLng, 0, "YXZ"));
        }
      };
      var targetD = {
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2),
        alt: +altitudeAccessor(d2),
        width: +widthAccessor(d2),
        height: +heightAccessor(d2)
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        width: 0,
        height: 0
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.tilesTransitionDuration || state.tilesTransitionDuration < 0) {
          applyPosition(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.tilesTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyPosition).start());
        }
      }
    }).digest(state.tilesData);
  }
});
var deg2Rad2 = function deg2Rad3(deg) {
  return deg * Math.PI / 180;
};
var THREE$6 = window.THREE ? window.THREE : {
  BufferGeometry,
  Color,
  Points,
  PointsMaterial
};
var ParticlesLayerKapsule = index2({
  props: {
    particlesData: {
      "default": []
    },
    particlesList: {
      "default": function _default19(d2) {
        return d2;
      }
    },
    // arrays of arrays
    particleLat: {
      "default": "lat"
    },
    particleLng: {
      "default": "lng"
    },
    particleAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    particlesSize: {
      "default": 0.5
    },
    particlesSizeAttenuation: {
      "default": true
    },
    particlesColor: {
      "default": function _default20() {
        return "white";
      }
    },
    particlesTexture: {}
  },
  init: function init10(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjParticles"
    }).onCreateObj(function() {
      var obj = new THREE$6.Points(new THREE$6.BufferGeometry(), new THREE$6.PointsMaterial());
      obj.__globeObjType = "particles";
      return obj;
    }).onUpdateObj(function(obj, d2) {
      var particlesListAccessor = index4(state.particlesList);
      var latAccessor = index4(state.particleLat);
      var lngAccessor = index4(state.particleLng);
      var altitudeAccessor = index4(state.particleAltitude);
      obj.geometry.setAttribute("position", array2BufferAttr(particlesListAccessor(d2).map(function(p2) {
        return Object.values(polar2Cartesian4(latAccessor(p2), lngAccessor(p2), altitudeAccessor(p2)));
      }), 3));
    });
  },
  update: function update11(state, changedProps) {
    if (["particlesData", "particlesList", "particleLat", "particleLng", "particleAltitude"].some(function(p2) {
      return changedProps.hasOwnProperty(p2);
    })) {
      state.dataMapper.digest(state.particlesData);
    }
    var colorAccessor = index4(state.particlesColor);
    var sizeAccessor = index4(state.particlesSize);
    var sizeAttenuationAccessor = index4(state.particlesSizeAttenuation);
    var textureAccessor = index4(state.particlesTexture);
    state.dataMapper.entries().forEach(function(_ref) {
      var _ref2 = _slicedToArray9(_ref, 2), d2 = _ref2[0], obj = _ref2[1];
      obj.material.size = sizeAccessor(d2);
      obj.material.sizeAttenuation = sizeAttenuationAccessor(d2);
      if (!state.particlesTexture) {
        var color3 = colorAccessor(d2);
        var opacity = colorAlpha(color3);
        obj.material.color = new THREE$6.Color(colorStr2Hex(color3));
        obj.material.transparent = opacity < 1;
        obj.material.opacity = opacity;
        obj.material.alphaTest = 0;
      } else {
        obj.material.color = new THREE$6.Color(16777215);
        obj.material.transparent = false;
        obj.material.alphaTest = 0.5;
        obj.material.map = textureAccessor(d2);
      }
    });
  }
});
var THREE$5 = window.THREE ? window.THREE : {
  BufferGeometry
};
var CircleLineGeometry = function(_THREE$BufferGeometry) {
  function CircleLineGeometry2() {
    var _this;
    var radius = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1;
    var segmentCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 32;
    _classCallCheck6(this, CircleLineGeometry2);
    _this = _callSuper4(this, CircleLineGeometry2);
    _this.type = "CircleLineGeometry";
    _this.parameters = {
      radius,
      segmentCount
    };
    var points = [];
    for (var i2 = 0; i2 <= segmentCount; i2++) {
      var theta = (i2 / segmentCount - 0.25) * Math.PI * 2;
      points.push({
        x: Math.cos(theta) * radius,
        y: Math.sin(theta) * radius,
        z: 0
      });
    }
    _this.setFromPoints(points);
    return _this;
  }
  _inherits4(CircleLineGeometry2, _THREE$BufferGeometry);
  return _createClass6(CircleLineGeometry2);
}(THREE$5.BufferGeometry);
var THREE$4 = window.THREE ? window.THREE : {
  Color,
  Group,
  Line,
  LineBasicMaterial,
  Vector3
};
var FrameTicker = import_frame_ticker.default["default"] || import_frame_ticker.default;
var RingsLayerKapsule = index2({
  props: {
    ringsData: {
      "default": []
    },
    ringLat: {
      "default": "lat"
    },
    ringLng: {
      "default": "lng"
    },
    ringAltitude: {
      "default": 15e-4
    },
    ringColor: {
      "default": function _default21() {
        return "#ffffaa";
      },
      triggerUpdate: false
    },
    // single color, array of colors or color interpolation fn
    ringResolution: {
      "default": 64,
      triggerUpdate: false
    },
    // how many slice segments in each circle's circumference
    ringMaxRadius: {
      "default": 2,
      triggerUpdate: false
    },
    // degrees
    ringPropagationSpeed: {
      "default": 1,
      triggerUpdate: false
    },
    // degrees/s
    ringRepeatPeriod: {
      "default": 700,
      triggerUpdate: false
    }
    // ms
  },
  methods: {
    pauseAnimation: function pauseAnimation3(state) {
      var _state$ticker;
      (_state$ticker = state.ticker) === null || _state$ticker === void 0 || _state$ticker.pause();
    },
    resumeAnimation: function resumeAnimation3(state) {
      var _state$ticker2;
      (_state$ticker2 = state.ticker) === null || _state$ticker2 === void 0 || _state$ticker2.resume();
    },
    _destructor: function _destructor4(state) {
      var _state$ticker3;
      (_state$ticker3 = state.ticker) === null || _state$ticker3 === void 0 || _state$ticker3.dispose();
    }
  },
  init: function init11(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjRing",
      removeDelay: 3e4
      // wait until all rings are gone
    }).onCreateObj(function() {
      var obj = new THREE$4.Group();
      obj.__globeObjType = "ring";
      return obj;
    });
    state.ticker = new FrameTicker();
    state.ticker.onTick.add(function(time2) {
      if (!state.ringsData.length) return;
      var colorAccessor = index4(state.ringColor);
      var altitudeAccessor = index4(state.ringAltitude);
      var maxRadiusAccessor = index4(state.ringMaxRadius);
      var propagationSpeedAccessor = index4(state.ringPropagationSpeed);
      var repeatPeriodAccessor = index4(state.ringRepeatPeriod);
      state.dataMapper.entries().filter(function(_ref2) {
        var _ref3 = _slicedToArray9(_ref2, 2), o2 = _ref3[1];
        return o2;
      }).forEach(function(_ref4) {
        var _ref5 = _slicedToArray9(_ref4, 2), d2 = _ref5[0], obj = _ref5[1];
        if ((obj.__nextRingTime || 0) <= time2) {
          var periodSecs = repeatPeriodAccessor(d2) / 1e3;
          obj.__nextRingTime = time2 + (periodSecs <= 0 ? Infinity : periodSecs);
          var circleObj = new THREE$4.Line(new CircleLineGeometry(1, state.ringResolution), new THREE$4.LineBasicMaterial());
          var colors = colorAccessor(d2);
          var isMultiColor = colors instanceof Array || colors instanceof Function;
          var colorInterpolator;
          if (!isMultiColor) {
            circleObj.material.color = new THREE$4.Color(colorStr2Hex(colors));
            setMaterialOpacity(circleObj.material, colorAlpha(colors));
          } else {
            if (colors instanceof Array) {
              colorInterpolator = linear2().domain(colors.map(function(_2, idx) {
                return idx / (colors.length - 1);
              })).range(colors);
              circleObj.material.transparent = colors.some(function(c4) {
                return colorAlpha(c4) < 1;
              });
            } else {
              colorInterpolator = colors;
              circleObj.material.transparent = true;
            }
          }
          var curveR = GLOBE_RADIUS * (1 + altitudeAccessor(d2));
          var maxRadius = maxRadiusAccessor(d2);
          var maxAngle = maxRadius * Math.PI / 180;
          var propagationSpeed = propagationSpeedAccessor(d2);
          var isReverse = propagationSpeed <= 0;
          var updateFn = function updateFn2(_ref6) {
            var t4 = _ref6.t;
            var ang = (isReverse ? 1 - t4 : t4) * maxAngle;
            circleObj.scale.x = circleObj.scale.y = curveR * Math.sin(ang);
            circleObj.position.z = curveR * (1 - Math.cos(ang));
            if (isMultiColor) {
              var color3 = colorInterpolator(t4);
              circleObj.material.color = new THREE$4.Color(colorStr2Hex(color3));
              circleObj.material.transparent && (circleObj.material.opacity = colorAlpha(color3));
            }
          };
          if (propagationSpeed === 0) {
            updateFn({
              t: 0
            });
            obj.add(circleObj);
          } else {
            var transitionTime = Math.abs(maxRadius / propagationSpeed) * 1e3;
            state.tweenGroup.add(new Tween({
              t: 0
            }).to({
              t: 1
            }, transitionTime).onUpdate(updateFn).onStart(function() {
              return obj.add(circleObj);
            }).onComplete(function() {
              obj.remove(circleObj);
              _deallocate2(circleObj);
            }).start());
          }
        }
      });
    });
  },
  update: function update12(state) {
    var latAccessor = index4(state.ringLat);
    var lngAccessor = index4(state.ringLng);
    var altitudeAccessor = index4(state.ringAltitude);
    var globeCenter = state.scene.localToWorld(new THREE$4.Vector3(0, 0, 0));
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var lat = latAccessor(d2);
      var lng = lngAccessor(d2);
      var alt = altitudeAccessor(d2);
      Object.assign(obj.position, polar2Cartesian4(lat, lng, alt));
      obj.lookAt(globeCenter);
    }).digest(state.ringsData);
  }
});
var glyphs = { "0": { x_min: 73, x_max: 715, ha: 792, o: "m 394 -29 q 153 129 242 -29 q 73 479 73 272 q 152 829 73 687 q 394 989 241 989 q 634 829 545 989 q 715 479 715 684 q 635 129 715 270 q 394 -29 546 -29 m 394 89 q 546 211 489 89 q 598 479 598 322 q 548 748 598 640 q 394 871 491 871 q 241 748 298 871 q 190 479 190 637 q 239 211 190 319 q 394 89 296 89 " }, "1": { x_min: 215.671875, x_max: 574, ha: 792, o: "m 574 0 l 442 0 l 442 697 l 215 697 l 215 796 q 386 833 330 796 q 475 986 447 875 l 574 986 l 574 0 " }, "2": { x_min: 59, x_max: 731, ha: 792, o: "m 731 0 l 59 0 q 197 314 59 188 q 457 487 199 315 q 598 691 598 580 q 543 819 598 772 q 411 867 488 867 q 272 811 328 867 q 209 630 209 747 l 81 630 q 182 901 81 805 q 408 986 271 986 q 629 909 536 986 q 731 694 731 826 q 613 449 731 541 q 378 316 495 383 q 201 122 235 234 l 731 122 l 731 0 " }, "3": { x_min: 54, x_max: 737, ha: 792, o: "m 737 284 q 635 55 737 141 q 399 -25 541 -25 q 156 52 248 -25 q 54 308 54 140 l 185 308 q 245 147 185 202 q 395 96 302 96 q 539 140 484 96 q 602 280 602 190 q 510 429 602 390 q 324 454 451 454 l 324 565 q 487 584 441 565 q 565 719 565 617 q 515 835 565 791 q 395 879 466 879 q 255 824 307 879 q 203 661 203 769 l 78 661 q 166 909 78 822 q 387 992 250 992 q 603 921 513 992 q 701 723 701 844 q 669 607 701 656 q 578 524 637 558 q 696 434 655 499 q 737 284 737 369 " }, "4": { x_min: 48, x_max: 742.453125, ha: 792, o: "m 742 243 l 602 243 l 602 0 l 476 0 l 476 243 l 48 243 l 48 368 l 476 958 l 602 958 l 602 354 l 742 354 l 742 243 m 476 354 l 476 792 l 162 354 l 476 354 " }, "5": { x_min: 54.171875, x_max: 738, ha: 792, o: "m 738 314 q 626 60 738 153 q 382 -23 526 -23 q 155 47 248 -23 q 54 256 54 125 l 183 256 q 259 132 204 174 q 382 91 314 91 q 533 149 471 91 q 602 314 602 213 q 538 469 602 411 q 386 528 475 528 q 284 506 332 528 q 197 439 237 484 l 81 439 l 159 958 l 684 958 l 684 840 l 254 840 l 214 579 q 306 627 258 612 q 407 643 354 643 q 636 552 540 643 q 738 314 738 457 " }, "6": { x_min: 53, x_max: 739, ha: 792, o: "m 739 312 q 633 62 739 162 q 400 -31 534 -31 q 162 78 257 -31 q 53 439 53 206 q 178 859 53 712 q 441 986 284 986 q 643 912 559 986 q 732 713 732 833 l 601 713 q 544 830 594 786 q 426 875 494 875 q 268 793 331 875 q 193 517 193 697 q 301 597 240 570 q 427 624 362 624 q 643 540 552 624 q 739 312 739 451 m 603 298 q 540 461 603 400 q 404 516 484 516 q 268 461 323 516 q 207 300 207 401 q 269 137 207 198 q 405 83 325 83 q 541 137 486 83 q 603 298 603 197 " }, "7": { x_min: 58.71875, x_max: 730.953125, ha: 792, o: "m 730 839 q 469 448 560 641 q 335 0 378 255 l 192 0 q 328 441 235 252 q 593 830 421 630 l 58 830 l 58 958 l 730 958 l 730 839 " }, "8": { x_min: 55, x_max: 736, ha: 792, o: "m 571 527 q 694 424 652 491 q 736 280 736 358 q 648 71 736 158 q 395 -26 551 -26 q 142 69 238 -26 q 55 279 55 157 q 96 425 55 359 q 220 527 138 491 q 120 615 153 562 q 88 726 88 668 q 171 904 88 827 q 395 986 261 986 q 618 905 529 986 q 702 727 702 830 q 670 616 702 667 q 571 527 638 565 m 394 565 q 519 610 475 565 q 563 717 563 655 q 521 823 563 781 q 392 872 474 872 q 265 824 312 872 q 224 720 224 783 q 265 613 224 656 q 394 565 312 565 m 395 91 q 545 150 488 91 q 597 280 597 204 q 546 408 597 355 q 395 465 492 465 q 244 408 299 465 q 194 280 194 356 q 244 150 194 203 q 395 91 299 91 " }, "9": { x_min: 53, x_max: 739, ha: 792, o: "m 739 524 q 619 94 739 241 q 362 -32 516 -32 q 150 47 242 -32 q 59 244 59 126 l 191 244 q 246 129 191 176 q 373 82 301 82 q 526 161 466 82 q 597 440 597 255 q 363 334 501 334 q 130 432 216 334 q 53 650 53 521 q 134 880 53 786 q 383 986 226 986 q 659 841 566 986 q 739 524 739 719 m 388 449 q 535 514 480 449 q 585 658 585 573 q 535 805 585 744 q 388 873 480 873 q 242 809 294 873 q 191 658 191 745 q 239 514 191 572 q 388 449 292 449 " }, "ο": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 96 88 192 -25 q 0 368 0 201 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 " }, S: { x_min: 0, x_max: 788, ha: 890, o: "m 788 291 q 662 54 788 144 q 397 -26 550 -26 q 116 68 226 -26 q 0 337 0 168 l 131 337 q 200 152 131 220 q 384 85 269 85 q 557 129 479 85 q 650 270 650 183 q 490 429 650 379 q 194 513 341 470 q 33 739 33 584 q 142 964 33 881 q 388 1041 242 1041 q 644 957 543 1041 q 756 716 756 867 l 625 716 q 561 874 625 816 q 395 933 497 933 q 243 891 309 933 q 164 759 164 841 q 325 609 164 656 q 625 526 475 568 q 788 291 788 454 " }, "¦": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "/": { x_min: 183.25, x_max: 608.328125, ha: 792, o: "m 608 1041 l 266 -129 l 183 -129 l 520 1041 l 608 1041 " }, "Τ": { x_min: -0.4375, x_max: 777.453125, ha: 839, o: "m 777 893 l 458 893 l 458 0 l 319 0 l 319 892 l 0 892 l 0 1013 l 777 1013 l 777 893 " }, y: { x_min: 0, x_max: 684.78125, ha: 771, o: "m 684 738 l 388 -83 q 311 -216 356 -167 q 173 -279 252 -279 q 97 -266 133 -279 l 97 -149 q 132 -155 109 -151 q 168 -160 155 -160 q 240 -114 213 -160 q 274 -26 248 -98 l 0 738 l 137 737 l 341 139 l 548 737 l 684 738 " }, "Π": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 803 1012 l 803 0 " }, "ΐ": { x_min: -111, x_max: 339, ha: 361, o: "m 339 800 l 229 800 l 229 925 l 339 925 l 339 800 m -1 800 l -111 800 l -111 925 l -1 925 l -1 800 m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 m 302 1040 l 113 819 l 30 819 l 165 1040 l 302 1040 " }, g: { x_min: 0, x_max: 686, ha: 838, o: "m 686 34 q 586 -213 686 -121 q 331 -306 487 -306 q 131 -252 216 -306 q 31 -84 31 -190 l 155 -84 q 228 -174 166 -138 q 345 -207 284 -207 q 514 -109 454 -207 q 564 89 564 -27 q 461 6 521 36 q 335 -23 401 -23 q 88 100 184 -23 q 0 370 0 215 q 87 634 0 522 q 330 758 183 758 q 457 728 398 758 q 564 644 515 699 l 564 737 l 686 737 l 686 34 m 582 367 q 529 560 582 481 q 358 652 468 652 q 189 561 250 652 q 135 369 135 482 q 189 176 135 255 q 361 85 251 85 q 529 176 468 85 q 582 367 582 255 " }, "²": { x_min: 0, x_max: 442, ha: 539, o: "m 442 383 l 0 383 q 91 566 0 492 q 260 668 176 617 q 354 798 354 727 q 315 875 354 845 q 227 905 277 905 q 136 869 173 905 q 99 761 99 833 l 14 761 q 82 922 14 864 q 232 974 141 974 q 379 926 316 974 q 442 797 442 878 q 351 635 442 704 q 183 539 321 611 q 92 455 92 491 l 442 455 l 442 383 " }, "–": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, "Κ": { x_min: 0, x_max: 819.5625, ha: 893, o: "m 819 0 l 650 0 l 294 509 l 139 356 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, "ƒ": { x_min: -46.265625, x_max: 392, ha: 513, o: "m 392 651 l 259 651 l 79 -279 l -46 -278 l 134 651 l 14 651 l 14 751 l 135 751 q 151 948 135 900 q 304 1041 185 1041 q 334 1040 319 1041 q 392 1034 348 1039 l 392 922 q 337 931 360 931 q 271 883 287 931 q 260 793 260 853 l 260 751 l 392 751 l 392 651 " }, e: { x_min: 0, x_max: 714, ha: 813, o: "m 714 326 l 140 326 q 200 157 140 227 q 359 87 260 87 q 488 130 431 87 q 561 245 545 174 l 697 245 q 577 48 670 123 q 358 -26 484 -26 q 97 85 195 -26 q 0 363 0 197 q 94 642 0 529 q 358 765 195 765 q 626 627 529 765 q 714 326 714 503 m 576 429 q 507 583 564 522 q 355 650 445 650 q 206 583 266 650 q 140 429 152 522 l 576 429 " }, "ό": { x_min: 0, x_max: 712, ha: 815, o: "m 356 -25 q 94 91 194 -25 q 0 368 0 202 q 92 642 0 533 q 356 761 192 761 q 617 644 517 761 q 712 368 712 533 q 619 91 712 201 q 356 -25 520 -25 m 356 85 q 527 175 465 85 q 583 369 583 255 q 528 562 583 484 q 356 651 466 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 356 85 250 85 m 576 1040 l 387 819 l 303 819 l 438 1040 l 576 1040 " }, J: { x_min: 0, x_max: 588, ha: 699, o: "m 588 279 q 287 -26 588 -26 q 58 73 126 -26 q 0 327 0 158 l 133 327 q 160 172 133 227 q 288 96 198 96 q 426 171 391 96 q 449 336 449 219 l 449 1013 l 588 1013 l 588 279 " }, "»": { x_min: -1, x_max: 503, ha: 601, o: "m 503 302 l 280 136 l 281 256 l 429 373 l 281 486 l 280 608 l 503 440 l 503 302 m 221 302 l 0 136 l 0 255 l 145 372 l 0 486 l -1 608 l 221 440 l 221 302 " }, "©": { x_min: -3, x_max: 1008, ha: 1106, o: "m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 741 394 q 661 246 731 302 q 496 190 591 190 q 294 285 369 190 q 228 497 228 370 q 295 714 228 625 q 499 813 370 813 q 656 762 588 813 q 733 625 724 711 l 634 625 q 589 704 629 673 q 498 735 550 735 q 377 666 421 735 q 334 504 334 597 q 374 340 334 408 q 490 272 415 272 q 589 304 549 272 q 638 394 628 337 l 741 394 " }, "ώ": { x_min: 0, x_max: 922, ha: 1030, o: "m 687 1040 l 498 819 l 415 819 l 549 1040 l 687 1040 m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 338 0 202 q 45 551 0 444 q 161 737 84 643 l 302 737 q 175 552 219 647 q 124 336 124 446 q 155 179 124 248 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 341 797 257 q 745 555 797 450 q 619 737 705 637 l 760 737 q 874 551 835 640 q 922 339 922 444 " }, "^": { x_min: 193.0625, x_max: 598.609375, ha: 792, o: "m 598 772 l 515 772 l 395 931 l 277 772 l 193 772 l 326 1013 l 462 1013 l 598 772 " }, "«": { x_min: 0, x_max: 507.203125, ha: 604, o: "m 506 136 l 284 302 l 284 440 l 506 608 l 507 485 l 360 371 l 506 255 l 506 136 m 222 136 l 0 302 l 0 440 l 222 608 l 221 486 l 73 373 l 222 256 l 222 136 " }, D: { x_min: 0, x_max: 828, ha: 935, o: "m 389 1013 q 714 867 593 1013 q 828 521 828 729 q 712 161 828 309 q 382 0 587 0 l 0 0 l 0 1013 l 389 1013 m 376 124 q 607 247 523 124 q 681 510 681 355 q 607 771 681 662 q 376 896 522 896 l 139 896 l 139 124 l 376 124 " }, "∙": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "ÿ": { x_min: 0, x_max: 47, ha: 125, o: "m 47 3 q 37 -7 47 -7 q 28 0 30 -7 q 39 -4 32 -4 q 45 3 45 -1 l 37 0 q 28 9 28 0 q 39 19 28 19 l 47 16 l 47 19 l 47 3 m 37 1 q 44 8 44 1 q 37 16 44 16 q 30 8 30 16 q 37 1 30 1 m 26 1 l 23 22 l 14 0 l 3 22 l 3 3 l 0 25 l 13 1 l 22 25 l 26 1 " }, w: { x_min: 0, x_max: 1009.71875, ha: 1100, o: "m 1009 738 l 783 0 l 658 0 l 501 567 l 345 0 l 222 0 l 0 738 l 130 738 l 284 174 l 432 737 l 576 738 l 721 173 l 881 737 l 1009 738 " }, $: { x_min: 0, x_max: 700, ha: 793, o: "m 664 717 l 542 717 q 490 825 531 785 q 381 872 450 865 l 381 551 q 620 446 540 522 q 700 241 700 370 q 618 45 700 116 q 381 -25 536 -25 l 381 -152 l 307 -152 l 307 -25 q 81 62 162 -25 q 0 297 0 149 l 124 297 q 169 146 124 204 q 307 81 215 89 l 307 441 q 80 536 148 469 q 13 725 13 603 q 96 910 13 839 q 307 982 180 982 l 307 1077 l 381 1077 l 381 982 q 574 917 494 982 q 664 717 664 845 m 307 565 l 307 872 q 187 831 233 872 q 142 724 142 791 q 180 618 142 656 q 307 565 218 580 m 381 76 q 562 237 562 96 q 517 361 562 313 q 381 423 472 409 l 381 76 " }, "\\": { x_min: -0.015625, x_max: 425.0625, ha: 522, o: "m 425 -129 l 337 -129 l 0 1041 l 83 1041 l 425 -129 " }, "µ": { x_min: 0, x_max: 697.21875, ha: 747, o: "m 697 -4 q 629 -14 658 -14 q 498 97 513 -14 q 422 9 470 41 q 313 -23 374 -23 q 207 4 258 -23 q 119 81 156 32 l 119 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 173 124 246 q 308 83 216 83 q 452 178 402 83 q 493 359 493 255 l 493 738 l 617 738 l 617 214 q 623 136 617 160 q 673 92 637 92 q 697 96 684 92 l 697 -4 " }, "Ι": { x_min: 42, x_max: 181, ha: 297, o: "m 181 0 l 42 0 l 42 1013 l 181 1013 l 181 0 " }, "Ύ": { x_min: 0, x_max: 1144.5, ha: 1214, o: "m 1144 1012 l 807 416 l 807 0 l 667 0 l 667 416 l 325 1012 l 465 1012 l 736 533 l 1004 1012 l 1144 1012 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "’": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "Ν": { x_min: 0, x_max: 801, ha: 915, o: "m 801 0 l 651 0 l 131 822 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 191 l 670 1013 l 801 1013 l 801 0 " }, "-": { x_min: 8.71875, x_max: 350.390625, ha: 478, o: "m 350 317 l 8 317 l 8 428 l 350 428 l 350 317 " }, Q: { x_min: 0, x_max: 968, ha: 1072, o: "m 954 5 l 887 -79 l 744 35 q 622 -11 687 2 q 483 -26 556 -26 q 127 130 262 -26 q 0 504 0 279 q 127 880 0 728 q 484 1041 262 1041 q 841 884 708 1041 q 968 507 968 735 q 933 293 968 398 q 832 104 899 188 l 954 5 m 723 191 q 802 330 777 248 q 828 499 828 412 q 744 790 828 673 q 483 922 650 922 q 228 791 322 922 q 142 505 142 673 q 227 221 142 337 q 487 91 323 91 q 632 123 566 91 l 520 215 l 587 301 l 723 191 " }, "ς": { x_min: 1, x_max: 676.28125, ha: 740, o: "m 676 460 l 551 460 q 498 595 542 546 q 365 651 448 651 q 199 578 263 651 q 136 401 136 505 q 266 178 136 241 q 508 106 387 142 q 640 -50 640 62 q 625 -158 640 -105 q 583 -278 611 -211 l 465 -278 q 498 -182 490 -211 q 515 -80 515 -126 q 381 12 515 -15 q 134 91 197 51 q 1 388 1 179 q 100 651 1 542 q 354 761 199 761 q 587 680 498 761 q 676 460 676 599 " }, M: { x_min: 0, x_max: 954, ha: 1067, o: "m 954 0 l 819 0 l 819 869 l 537 0 l 405 0 l 128 866 l 128 0 l 0 0 l 0 1013 l 200 1013 l 472 160 l 757 1013 l 954 1013 l 954 0 " }, "Ψ": { x_min: 0, x_max: 1006, ha: 1094, o: "m 1006 678 q 914 319 1006 429 q 571 200 814 200 l 571 0 l 433 0 l 433 200 q 92 319 194 200 q 0 678 0 429 l 0 1013 l 139 1013 l 139 679 q 191 417 139 492 q 433 326 255 326 l 433 1013 l 571 1013 l 571 326 l 580 326 q 813 423 747 326 q 868 679 868 502 l 868 1013 l 1006 1013 l 1006 678 " }, C: { x_min: 0, x_max: 886, ha: 944, o: "m 886 379 q 760 87 886 201 q 455 -26 634 -26 q 112 136 236 -26 q 0 509 0 283 q 118 882 0 737 q 469 1041 245 1041 q 748 955 630 1041 q 879 708 879 859 l 745 708 q 649 862 724 805 q 473 920 573 920 q 219 791 312 920 q 136 509 136 675 q 217 229 136 344 q 470 99 311 99 q 672 179 591 99 q 753 379 753 259 l 886 379 " }, "!": { x_min: 0, x_max: 138, ha: 236, o: "m 138 684 q 116 409 138 629 q 105 244 105 299 l 33 244 q 16 465 33 313 q 0 684 0 616 l 0 1013 l 138 1013 l 138 684 m 138 0 l 0 0 l 0 151 l 138 151 l 138 0 " }, "{": { x_min: 0, x_max: 480.5625, ha: 578, o: "m 480 -286 q 237 -213 303 -286 q 187 -45 187 -159 q 194 48 187 -15 q 201 141 201 112 q 164 264 201 225 q 0 314 118 314 l 0 417 q 164 471 119 417 q 201 605 201 514 q 199 665 201 644 q 193 772 193 769 q 241 941 193 887 q 480 1015 308 1015 l 480 915 q 336 866 375 915 q 306 742 306 828 q 310 662 306 717 q 314 577 314 606 q 288 452 314 500 q 176 365 256 391 q 289 275 257 337 q 314 143 314 226 q 313 84 314 107 q 310 -11 310 -5 q 339 -131 310 -94 q 480 -182 377 -182 l 480 -286 " }, X: { x_min: -0.015625, x_max: 854.15625, ha: 940, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 428 637 l 675 1013 l 836 1013 l 504 520 l 854 0 " }, "#": { x_min: 0, x_max: 963.890625, ha: 1061, o: "m 963 690 l 927 590 l 719 590 l 655 410 l 876 410 l 840 310 l 618 310 l 508 -3 l 393 -2 l 506 309 l 329 310 l 215 -2 l 102 -3 l 212 310 l 0 310 l 36 410 l 248 409 l 312 590 l 86 590 l 120 690 l 347 690 l 459 1006 l 573 1006 l 462 690 l 640 690 l 751 1006 l 865 1006 l 754 690 l 963 690 m 606 590 l 425 590 l 362 410 l 543 410 l 606 590 " }, "ι": { x_min: 42, x_max: 284, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 738 l 167 738 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 103 239 101 q 284 112 257 104 l 284 3 " }, "Ά": { x_min: 0, x_max: 906.953125, ha: 982, o: "m 283 1040 l 88 799 l 5 799 l 145 1040 l 283 1040 m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1012 l 529 1012 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, ")": { x_min: 0, x_max: 318, ha: 415, o: "m 318 365 q 257 25 318 191 q 87 -290 197 -141 l 0 -290 q 140 21 93 -128 q 193 360 193 189 q 141 704 193 537 q 0 1024 97 850 l 87 1024 q 257 706 197 871 q 318 365 318 542 " }, "ε": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 314 0 265 q 128 390 67 353 q 56 460 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 " }, "Δ": { x_min: 0, x_max: 952.78125, ha: 1028, o: "m 952 0 l 0 0 l 400 1013 l 551 1013 l 952 0 m 762 124 l 476 867 l 187 124 l 762 124 " }, "}": { x_min: 0, x_max: 481, ha: 578, o: "m 481 314 q 318 262 364 314 q 282 136 282 222 q 284 65 282 97 q 293 -58 293 -48 q 241 -217 293 -166 q 0 -286 174 -286 l 0 -182 q 143 -130 105 -182 q 171 -2 171 -93 q 168 81 171 22 q 165 144 165 140 q 188 275 165 229 q 306 365 220 339 q 191 455 224 391 q 165 588 165 505 q 168 681 165 624 q 171 742 171 737 q 141 865 171 827 q 0 915 102 915 l 0 1015 q 243 942 176 1015 q 293 773 293 888 q 287 675 293 741 q 282 590 282 608 q 318 466 282 505 q 481 417 364 417 l 481 314 " }, "‰": { x_min: -3, x_max: 1672, ha: 1821, o: "m 846 0 q 664 76 732 0 q 603 244 603 145 q 662 412 603 344 q 846 489 729 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 846 0 962 0 m 845 103 q 945 143 910 103 q 981 243 981 184 q 947 340 981 301 q 845 385 910 385 q 745 342 782 385 q 709 243 709 300 q 742 147 709 186 q 845 103 781 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 m 1428 0 q 1246 76 1314 0 q 1185 244 1185 145 q 1244 412 1185 344 q 1428 489 1311 489 q 1610 412 1542 489 q 1672 244 1672 343 q 1612 76 1672 144 q 1428 0 1545 0 m 1427 103 q 1528 143 1492 103 q 1564 243 1564 184 q 1530 340 1564 301 q 1427 385 1492 385 q 1327 342 1364 385 q 1291 243 1291 300 q 1324 147 1291 186 q 1427 103 1363 103 " }, a: { x_min: 0, x_max: 698.609375, ha: 794, o: "m 698 0 q 661 -12 679 -7 q 615 -17 643 -17 q 536 12 564 -17 q 500 96 508 41 q 384 6 456 37 q 236 -25 312 -25 q 65 31 130 -25 q 0 194 0 88 q 118 390 0 334 q 328 435 180 420 q 488 483 476 451 q 495 523 495 504 q 442 619 495 584 q 325 654 389 654 q 209 617 257 654 q 152 513 161 580 l 33 513 q 123 705 33 633 q 332 772 207 772 q 528 712 448 772 q 617 531 617 645 l 617 163 q 624 108 617 126 q 664 90 632 90 l 698 94 l 698 0 m 491 262 l 491 372 q 272 329 350 347 q 128 201 128 294 q 166 113 128 144 q 264 83 205 83 q 414 130 346 83 q 491 262 491 183 " }, "—": { x_min: 0, x_max: 941.671875, ha: 1039, o: "m 941 334 l 0 334 l 0 410 l 941 410 l 941 334 " }, "=": { x_min: 8.71875, x_max: 780.953125, ha: 792, o: "m 780 510 l 8 510 l 8 606 l 780 606 l 780 510 m 780 235 l 8 235 l 8 332 l 780 332 l 780 235 " }, N: { x_min: 0, x_max: 801, ha: 914, o: "m 801 0 l 651 0 l 131 823 l 131 0 l 0 0 l 0 1013 l 151 1013 l 670 193 l 670 1013 l 801 1013 l 801 0 " }, "ρ": { x_min: 0, x_max: 712, ha: 797, o: "m 712 369 q 620 94 712 207 q 362 -26 521 -26 q 230 2 292 -26 q 119 83 167 30 l 119 -278 l 0 -278 l 0 362 q 91 643 0 531 q 355 764 190 764 q 617 647 517 764 q 712 369 712 536 m 583 366 q 530 559 583 480 q 359 651 469 651 q 190 562 252 651 q 135 370 135 483 q 189 176 135 257 q 359 85 250 85 q 528 175 466 85 q 583 366 583 254 " }, "¯": { x_min: 0, x_max: 941.671875, ha: 938, o: "m 941 1033 l 0 1033 l 0 1109 l 941 1109 l 941 1033 " }, Z: { x_min: 0, x_max: 779, ha: 849, o: "m 779 0 l 0 0 l 0 113 l 621 896 l 40 896 l 40 1013 l 779 1013 l 778 887 l 171 124 l 779 124 l 779 0 " }, u: { x_min: 0, x_max: 617, ha: 729, o: "m 617 0 l 499 0 l 499 110 q 391 10 460 45 q 246 -25 322 -25 q 61 58 127 -25 q 0 258 0 136 l 0 738 l 125 738 l 125 284 q 156 148 125 202 q 273 82 197 82 q 433 165 369 82 q 493 340 493 243 l 493 738 l 617 738 l 617 0 " }, k: { x_min: 0, x_max: 612.484375, ha: 697, o: "m 612 738 l 338 465 l 608 0 l 469 0 l 251 382 l 121 251 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 402 l 456 738 l 612 738 " }, "Η": { x_min: 0, x_max: 803, ha: 917, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "Α": { x_min: 0, x_max: 906.953125, ha: 985, o: "m 906 0 l 756 0 l 650 303 l 251 303 l 143 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 609 421 l 452 866 l 293 421 l 609 421 " }, s: { x_min: 0, x_max: 604, ha: 697, o: "m 604 217 q 501 36 604 104 q 292 -23 411 -23 q 86 43 166 -23 q 0 238 0 114 l 121 237 q 175 122 121 164 q 300 85 223 85 q 415 112 363 85 q 479 207 479 147 q 361 309 479 276 q 140 372 141 370 q 21 544 21 426 q 111 708 21 647 q 298 761 190 761 q 492 705 413 761 q 583 531 583 643 l 462 531 q 412 625 462 594 q 298 657 363 657 q 199 636 242 657 q 143 558 143 608 q 262 454 143 486 q 484 394 479 397 q 604 217 604 341 " }, B: { x_min: 0, x_max: 778, ha: 876, o: "m 580 546 q 724 469 670 535 q 778 311 778 403 q 673 83 778 171 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 892 q 691 633 732 693 q 580 546 650 572 m 393 899 l 139 899 l 139 588 l 379 588 q 521 624 462 588 q 592 744 592 667 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 303 635 219 q 559 436 635 389 q 402 477 494 477 l 139 477 l 139 124 l 419 124 " }, "…": { x_min: 0, x_max: 614, ha: 708, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 m 378 0 l 236 0 l 236 151 l 378 151 l 378 0 m 614 0 l 472 0 l 472 151 l 614 151 l 614 0 " }, "?": { x_min: 0, x_max: 607, ha: 704, o: "m 607 777 q 543 599 607 674 q 422 474 482 537 q 357 272 357 391 l 236 272 q 297 487 236 395 q 411 619 298 490 q 474 762 474 691 q 422 885 474 838 q 301 933 371 933 q 179 880 228 933 q 124 706 124 819 l 0 706 q 94 963 0 872 q 302 1044 177 1044 q 511 973 423 1044 q 607 777 607 895 m 370 0 l 230 0 l 230 151 l 370 151 l 370 0 " }, H: { x_min: 0, x_max: 803, ha: 915, o: "m 803 0 l 667 0 l 667 475 l 140 475 l 140 0 l 0 0 l 0 1013 l 140 1013 l 140 599 l 667 599 l 667 1013 l 803 1013 l 803 0 " }, "ν": { x_min: 0, x_max: 675, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 738 l 340 147 l 541 738 l 675 738 " }, c: { x_min: 1, x_max: 701.390625, ha: 775, o: "m 701 264 q 584 53 681 133 q 353 -26 487 -26 q 91 91 188 -26 q 1 370 1 201 q 92 645 1 537 q 353 761 190 761 q 572 688 479 761 q 690 493 666 615 l 556 493 q 487 606 545 562 q 356 650 428 650 q 186 563 246 650 q 134 372 134 487 q 188 179 134 258 q 359 88 250 88 q 492 136 437 88 q 566 264 548 185 l 701 264 " }, "¶": { x_min: 0, x_max: 566.671875, ha: 678, o: "m 21 892 l 52 892 l 98 761 l 145 892 l 176 892 l 178 741 l 157 741 l 157 867 l 108 741 l 88 741 l 40 871 l 40 741 l 21 741 l 21 892 m 308 854 l 308 731 q 252 691 308 691 q 227 691 240 691 q 207 696 213 695 l 207 712 l 253 706 q 288 733 288 706 l 288 763 q 244 741 279 741 q 193 797 193 741 q 261 860 193 860 q 287 860 273 860 q 308 854 302 855 m 288 842 l 263 843 q 213 796 213 843 q 248 756 213 756 q 288 796 288 756 l 288 842 m 566 988 l 502 988 l 502 -1 l 439 -1 l 439 988 l 317 988 l 317 -1 l 252 -1 l 252 602 q 81 653 155 602 q 0 805 0 711 q 101 989 0 918 q 309 1053 194 1053 l 566 1053 l 566 988 " }, "β": { x_min: 0, x_max: 660, ha: 745, o: "m 471 550 q 610 450 561 522 q 660 280 660 378 q 578 64 660 151 q 367 -22 497 -22 q 239 5 299 -22 q 126 82 178 32 l 126 -278 l 0 -278 l 0 593 q 54 903 0 801 q 318 1042 127 1042 q 519 964 436 1042 q 603 771 603 887 q 567 644 603 701 q 471 550 532 586 m 337 79 q 476 138 418 79 q 535 279 535 198 q 427 437 535 386 q 226 477 344 477 l 226 583 q 398 620 329 583 q 486 762 486 668 q 435 884 486 833 q 312 935 384 935 q 169 861 219 935 q 126 698 126 797 l 126 362 q 170 169 126 242 q 337 79 224 79 " }, "Μ": { x_min: 0, x_max: 954, ha: 1068, o: "m 954 0 l 819 0 l 819 868 l 537 0 l 405 0 l 128 865 l 128 0 l 0 0 l 0 1013 l 199 1013 l 472 158 l 758 1013 l 954 1013 l 954 0 " }, "Ό": { x_min: 0.109375, x_max: 1120, ha: 1217, o: "m 1120 505 q 994 132 1120 282 q 642 -29 861 -29 q 290 130 422 -29 q 167 505 167 280 q 294 883 167 730 q 650 1046 430 1046 q 999 882 868 1046 q 1120 505 1120 730 m 977 504 q 896 784 977 669 q 644 915 804 915 q 391 785 484 915 q 307 504 307 669 q 391 224 307 339 q 644 95 486 95 q 894 224 803 95 q 977 504 977 339 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "Ή": { x_min: 0, x_max: 1158, ha: 1275, o: "m 1158 0 l 1022 0 l 1022 475 l 496 475 l 496 0 l 356 0 l 356 1012 l 496 1012 l 496 599 l 1022 599 l 1022 1012 l 1158 1012 l 1158 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "•": { x_min: 0, x_max: 663.890625, ha: 775, o: "m 663 529 q 566 293 663 391 q 331 196 469 196 q 97 294 194 196 q 0 529 0 393 q 96 763 0 665 q 331 861 193 861 q 566 763 469 861 q 663 529 663 665 " }, "¥": { x_min: 0.1875, x_max: 819.546875, ha: 886, o: "m 563 561 l 697 561 l 696 487 l 520 487 l 482 416 l 482 380 l 697 380 l 695 308 l 482 308 l 482 0 l 342 0 l 342 308 l 125 308 l 125 380 l 342 380 l 342 417 l 303 487 l 125 487 l 125 561 l 258 561 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 l 563 561 " }, "(": { x_min: 0, x_max: 318.0625, ha: 415, o: "m 318 -290 l 230 -290 q 61 23 122 -142 q 0 365 0 190 q 62 712 0 540 q 230 1024 119 869 l 318 1024 q 175 705 219 853 q 125 360 125 542 q 176 22 125 187 q 318 -290 223 -127 " }, U: { x_min: 0, x_max: 796, ha: 904, o: "m 796 393 q 681 93 796 212 q 386 -25 566 -25 q 101 95 208 -25 q 0 393 0 211 l 0 1013 l 138 1013 l 138 391 q 204 191 138 270 q 394 107 276 107 q 586 191 512 107 q 656 391 656 270 l 656 1013 l 796 1013 l 796 393 " }, "γ": { x_min: 0.5, x_max: 744.953125, ha: 822, o: "m 744 737 l 463 54 l 463 -278 l 338 -278 l 338 54 l 154 495 q 104 597 124 569 q 13 651 67 651 l 0 651 l 0 751 l 39 753 q 168 711 121 753 q 242 594 207 676 l 403 208 l 617 737 l 744 737 " }, "α": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 728 407 760 q 563 637 524 696 l 563 739 l 685 739 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 96 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 " }, F: { x_min: 0, x_max: 683.328125, ha: 717, o: "m 683 888 l 140 888 l 140 583 l 613 583 l 613 458 l 140 458 l 140 0 l 0 0 l 0 1013 l 683 1013 l 683 888 " }, "­": { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 334 l 0 334 l 0 410 l 705 410 l 705 334 " }, ":": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "Χ": { x_min: 0, x_max: 854.171875, ha: 935, o: "m 854 0 l 683 0 l 423 409 l 166 0 l 0 0 l 347 519 l 18 1013 l 186 1013 l 427 637 l 675 1013 l 836 1013 l 504 521 l 854 0 " }, "*": { x_min: 116, x_max: 674, ha: 792, o: "m 674 768 l 475 713 l 610 544 l 517 477 l 394 652 l 272 478 l 178 544 l 314 713 l 116 766 l 153 876 l 341 812 l 342 1013 l 446 1013 l 446 811 l 635 874 l 674 768 " }, "†": { x_min: 0, x_max: 777, ha: 835, o: "m 458 804 l 777 804 l 777 683 l 458 683 l 458 0 l 319 0 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 " }, "°": { x_min: 0, x_max: 347, ha: 444, o: "m 173 802 q 43 856 91 802 q 0 977 0 905 q 45 1101 0 1049 q 173 1153 90 1153 q 303 1098 255 1153 q 347 977 347 1049 q 303 856 347 905 q 173 802 256 802 m 173 884 q 238 910 214 884 q 262 973 262 937 q 239 1038 262 1012 q 173 1064 217 1064 q 108 1037 132 1064 q 85 973 85 1010 q 108 910 85 937 q 173 884 132 884 " }, V: { x_min: 0, x_max: 862.71875, ha: 940, o: "m 862 1013 l 505 0 l 361 0 l 0 1013 l 143 1013 l 434 165 l 718 1012 l 862 1013 " }, "Ξ": { x_min: 0, x_max: 734.71875, ha: 763, o: "m 723 889 l 9 889 l 9 1013 l 723 1013 l 723 889 m 673 463 l 61 463 l 61 589 l 673 589 l 673 463 m 734 0 l 0 0 l 0 124 l 734 124 l 734 0 " }, " ": { x_min: 0, x_max: 0, ha: 853 }, "Ϋ": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 588 1046 l 460 1046 l 460 1189 l 588 1189 l 588 1046 m 360 1046 l 232 1046 l 232 1189 l 360 1189 l 360 1046 m 819 1012 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1012 l 140 1012 l 411 533 l 679 1012 l 819 1012 " }, "”": { x_min: 0, x_max: 347, ha: 454, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 m 347 851 q 310 737 347 784 q 208 669 273 690 l 208 734 q 267 787 250 741 q 280 873 280 821 l 208 873 l 208 1013 l 347 1013 l 347 851 " }, "@": { x_min: 0, x_max: 1260, ha: 1357, o: "m 1098 -45 q 877 -160 1001 -117 q 633 -203 752 -203 q 155 -29 327 -203 q 0 360 0 127 q 176 802 0 616 q 687 1008 372 1008 q 1123 854 969 1008 q 1260 517 1260 718 q 1155 216 1260 341 q 868 82 1044 82 q 772 106 801 82 q 737 202 737 135 q 647 113 700 144 q 527 82 594 82 q 367 147 420 82 q 314 312 314 212 q 401 565 314 452 q 639 690 498 690 q 810 588 760 690 l 849 668 l 938 668 q 877 441 900 532 q 833 226 833 268 q 853 182 833 198 q 902 167 873 167 q 1088 272 1012 167 q 1159 512 1159 372 q 1051 793 1159 681 q 687 925 925 925 q 248 747 415 925 q 97 361 97 586 q 226 26 97 159 q 627 -122 370 -122 q 856 -87 737 -122 q 1061 8 976 -53 l 1098 -45 m 786 488 q 738 580 777 545 q 643 615 700 615 q 483 517 548 615 q 425 322 425 430 q 457 203 425 250 q 552 156 490 156 q 722 273 665 156 q 786 488 738 309 " }, "Ί": { x_min: 0, x_max: 499, ha: 613, o: "m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 m 499 0 l 360 0 l 360 1012 l 499 1012 l 499 0 " }, i: { x_min: 14, x_max: 136, ha: 275, o: "m 136 873 l 14 873 l 14 1013 l 136 1013 l 136 873 m 136 0 l 14 0 l 14 737 l 136 737 l 136 0 " }, "Β": { x_min: 0, x_max: 778, ha: 877, o: "m 580 545 q 724 468 671 534 q 778 310 778 402 q 673 83 778 170 q 432 0 575 0 l 0 0 l 0 1013 l 411 1013 q 629 957 541 1013 q 732 768 732 891 q 691 632 732 692 q 580 545 650 571 m 393 899 l 139 899 l 139 587 l 379 587 q 521 623 462 587 q 592 744 592 666 q 531 859 592 819 q 393 899 471 899 m 419 124 q 566 169 504 124 q 635 302 635 219 q 559 435 635 388 q 402 476 494 476 l 139 476 l 139 124 l 419 124 " }, "υ": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 94 617 199 q 308 -24 455 -24 q 76 94 161 -24 q 0 352 0 199 l 0 739 l 126 739 l 126 355 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 355 492 257 l 492 739 l 617 739 l 617 352 " }, "]": { x_min: 0, x_max: 275, ha: 372, o: "m 275 -281 l 0 -281 l 0 -187 l 151 -187 l 151 920 l 0 920 l 0 1013 l 275 1013 l 275 -281 " }, m: { x_min: 0, x_max: 1019, ha: 1128, o: "m 1019 0 l 897 0 l 897 454 q 860 591 897 536 q 739 660 816 660 q 613 586 659 660 q 573 436 573 522 l 573 0 l 447 0 l 447 455 q 412 591 447 535 q 294 657 372 657 q 165 586 213 657 q 122 437 122 521 l 122 0 l 0 0 l 0 738 l 117 738 l 117 640 q 202 730 150 697 q 316 763 254 763 q 437 730 381 763 q 525 642 494 697 q 621 731 559 700 q 753 763 682 763 q 943 694 867 763 q 1019 512 1019 625 l 1019 0 " }, "χ": { x_min: 8.328125, x_max: 780.5625, ha: 815, o: "m 780 -278 q 715 -294 747 -294 q 616 -257 663 -294 q 548 -175 576 -227 l 379 133 l 143 -277 l 9 -277 l 313 254 l 163 522 q 127 586 131 580 q 36 640 91 640 q 8 637 27 640 l 8 752 l 52 757 q 162 719 113 757 q 236 627 200 690 l 383 372 l 594 737 l 726 737 l 448 250 l 625 -69 q 670 -153 647 -110 q 743 -188 695 -188 q 780 -184 759 -188 l 780 -278 " }, "ί": { x_min: 42, x_max: 326.71875, ha: 361, o: "m 284 3 q 233 -10 258 -5 q 182 -15 207 -15 q 85 26 119 -15 q 42 200 42 79 l 42 737 l 167 737 l 168 215 q 172 141 168 157 q 226 101 183 101 q 248 102 239 101 q 284 112 257 104 l 284 3 m 326 1040 l 137 819 l 54 819 l 189 1040 l 326 1040 " }, "Ζ": { x_min: 0, x_max: 779.171875, ha: 850, o: "m 779 0 l 0 0 l 0 113 l 620 896 l 40 896 l 40 1013 l 779 1013 l 779 887 l 170 124 l 779 124 l 779 0 " }, R: { x_min: 0, x_max: 781.953125, ha: 907, o: "m 781 0 l 623 0 q 587 242 590 52 q 407 433 585 433 l 138 433 l 138 0 l 0 0 l 0 1013 l 396 1013 q 636 946 539 1013 q 749 731 749 868 q 711 597 749 659 q 608 502 674 534 q 718 370 696 474 q 729 207 722 352 q 781 26 736 62 l 781 0 m 373 551 q 533 594 465 551 q 614 731 614 645 q 532 859 614 815 q 373 896 465 896 l 138 896 l 138 551 l 373 551 " }, o: { x_min: 0, x_max: 713, ha: 821, o: "m 357 -25 q 94 91 194 -25 q 0 368 0 202 q 93 642 0 533 q 357 761 193 761 q 618 644 518 761 q 713 368 713 533 q 619 91 713 201 q 357 -25 521 -25 m 357 85 q 528 175 465 85 q 584 369 584 255 q 529 562 584 484 q 357 651 467 651 q 189 560 250 651 q 135 369 135 481 q 187 177 135 257 q 357 85 250 85 " }, K: { x_min: 0, x_max: 819.46875, ha: 906, o: "m 819 0 l 649 0 l 294 509 l 139 355 l 139 0 l 0 0 l 0 1013 l 139 1013 l 139 526 l 626 1013 l 809 1013 l 395 600 l 819 0 " }, ",": { x_min: 0, x_max: 142, ha: 239, o: "m 142 -12 q 105 -132 142 -82 q 0 -205 68 -182 l 0 -138 q 57 -82 40 -124 q 70 0 70 -51 l 0 0 l 0 151 l 142 151 l 142 -12 " }, d: { x_min: 0, x_max: 683, ha: 796, o: "m 683 0 l 564 0 l 564 93 q 456 6 516 38 q 327 -25 395 -25 q 87 100 181 -25 q 0 365 0 215 q 90 639 0 525 q 343 763 187 763 q 564 647 486 763 l 564 1013 l 683 1013 l 683 0 m 582 373 q 529 562 582 484 q 361 653 468 653 q 190 561 253 653 q 135 365 135 479 q 189 175 135 254 q 358 85 251 85 q 529 178 468 85 q 582 373 582 258 " }, "¨": { x_min: -109, x_max: 247, ha: 232, o: "m 247 1046 l 119 1046 l 119 1189 l 247 1189 l 247 1046 m 19 1046 l -109 1046 l -109 1189 l 19 1189 l 19 1046 " }, E: { x_min: 0, x_max: 736.109375, ha: 789, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, Y: { x_min: 0, x_max: 820, ha: 886, o: "m 820 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 534 l 679 1012 l 820 1013 " }, '"': { x_min: 0, x_max: 299, ha: 396, o: "m 299 606 l 203 606 l 203 988 l 299 988 l 299 606 m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "‹": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "„": { x_min: 0, x_max: 364, ha: 467, o: "m 141 -12 q 104 -132 141 -82 q 0 -205 67 -182 l 0 -138 q 56 -82 40 -124 q 69 0 69 -51 l 0 0 l 0 151 l 141 151 l 141 -12 m 364 -12 q 327 -132 364 -82 q 222 -205 290 -182 l 222 -138 q 279 -82 262 -124 q 292 0 292 -51 l 222 0 l 222 151 l 364 151 l 364 -12 " }, "δ": { x_min: 1, x_max: 710, ha: 810, o: "m 710 360 q 616 87 710 196 q 356 -28 518 -28 q 99 82 197 -28 q 1 356 1 192 q 100 606 1 509 q 355 703 199 703 q 180 829 288 754 q 70 903 124 866 l 70 1012 l 643 1012 l 643 901 l 258 901 q 462 763 422 794 q 636 592 577 677 q 710 360 710 485 m 584 365 q 552 501 584 447 q 451 602 521 555 q 372 611 411 611 q 197 541 258 611 q 136 355 136 472 q 190 171 136 245 q 358 85 252 85 q 528 173 465 85 q 584 365 584 252 " }, "έ": { x_min: 0, x_max: 634.71875, ha: 714, o: "m 634 234 q 527 38 634 110 q 300 -25 433 -25 q 98 29 183 -25 q 0 204 0 93 q 37 313 0 265 q 128 390 67 352 q 56 459 82 419 q 26 555 26 505 q 114 712 26 654 q 295 763 191 763 q 499 700 416 763 q 589 515 589 631 l 478 515 q 419 618 464 580 q 307 657 374 657 q 207 630 253 657 q 151 547 151 598 q 238 445 151 469 q 389 434 280 434 l 389 331 l 349 331 q 206 315 255 331 q 125 210 125 287 q 183 107 125 145 q 302 76 233 76 q 436 117 379 76 q 509 234 493 159 l 634 234 m 520 1040 l 331 819 l 248 819 l 383 1040 l 520 1040 " }, "ω": { x_min: 0, x_max: 922, ha: 1031, o: "m 922 339 q 856 97 922 203 q 650 -26 780 -26 q 538 9 587 -26 q 461 103 489 44 q 387 12 436 46 q 277 -22 339 -22 q 69 97 147 -22 q 0 339 0 203 q 45 551 0 444 q 161 738 84 643 l 302 738 q 175 553 219 647 q 124 336 124 446 q 155 179 124 249 q 275 88 197 88 q 375 163 341 88 q 400 294 400 219 l 400 572 l 524 572 l 524 294 q 561 135 524 192 q 643 88 591 88 q 762 182 719 88 q 797 342 797 257 q 745 556 797 450 q 619 738 705 638 l 760 738 q 874 551 835 640 q 922 339 922 444 " }, "´": { x_min: 0, x_max: 96, ha: 251, o: "m 96 606 l 0 606 l 0 988 l 96 988 l 96 606 " }, "±": { x_min: 11, x_max: 781, ha: 792, o: "m 781 490 l 446 490 l 446 255 l 349 255 l 349 490 l 11 490 l 11 586 l 349 586 l 349 819 l 446 819 l 446 586 l 781 586 l 781 490 m 781 21 l 11 21 l 11 115 l 781 115 l 781 21 " }, "|": { x_min: 343, x_max: 449, ha: 792, o: "m 449 462 l 343 462 l 343 986 l 449 986 l 449 462 m 449 -242 l 343 -242 l 343 280 l 449 280 l 449 -242 " }, "ϋ": { x_min: 0, x_max: 617, ha: 725, o: "m 482 800 l 372 800 l 372 925 l 482 925 l 482 800 m 239 800 l 129 800 l 129 925 l 239 925 l 239 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 " }, "§": { x_min: 0, x_max: 593, ha: 690, o: "m 593 425 q 554 312 593 369 q 467 233 516 254 q 537 83 537 172 q 459 -74 537 -12 q 288 -133 387 -133 q 115 -69 184 -133 q 47 96 47 -6 l 166 96 q 199 7 166 40 q 288 -26 232 -26 q 371 -5 332 -26 q 420 60 420 21 q 311 201 420 139 q 108 309 210 255 q 0 490 0 383 q 33 602 0 551 q 124 687 66 654 q 75 743 93 712 q 58 812 58 773 q 133 984 58 920 q 300 1043 201 1043 q 458 987 394 1043 q 529 814 529 925 l 411 814 q 370 908 404 877 q 289 939 336 939 q 213 911 246 939 q 180 841 180 883 q 286 720 180 779 q 484 612 480 615 q 593 425 593 534 m 467 409 q 355 544 467 473 q 196 630 228 612 q 146 587 162 609 q 124 525 124 558 q 239 387 124 462 q 398 298 369 315 q 448 345 429 316 q 467 409 467 375 " }, b: { x_min: 0, x_max: 685, ha: 783, o: "m 685 372 q 597 99 685 213 q 347 -25 501 -25 q 219 5 277 -25 q 121 93 161 36 l 121 0 l 0 0 l 0 1013 l 121 1013 l 121 634 q 214 723 157 692 q 341 754 272 754 q 591 637 493 754 q 685 372 685 526 m 554 356 q 499 550 554 470 q 328 644 437 644 q 162 556 223 644 q 108 369 108 478 q 160 176 108 256 q 330 83 221 83 q 498 169 435 83 q 554 356 554 245 " }, q: { x_min: 0, x_max: 683, ha: 876, o: "m 683 -278 l 564 -278 l 564 97 q 474 8 533 39 q 345 -23 415 -23 q 91 93 188 -23 q 0 364 0 203 q 87 635 0 522 q 337 760 184 760 q 466 727 408 760 q 564 637 523 695 l 564 737 l 683 737 l 683 -278 m 582 375 q 527 564 582 488 q 358 652 466 652 q 190 565 253 652 q 135 377 135 488 q 189 179 135 261 q 361 84 251 84 q 530 179 469 84 q 582 375 582 260 " }, "Ω": { x_min: -0.171875, x_max: 969.5625, ha: 1068, o: "m 969 0 l 555 0 l 555 123 q 744 308 675 194 q 814 558 814 423 q 726 812 814 709 q 484 922 633 922 q 244 820 334 922 q 154 567 154 719 q 223 316 154 433 q 412 123 292 199 l 412 0 l 0 0 l 0 124 l 217 124 q 68 327 122 210 q 15 572 15 444 q 144 911 15 781 q 484 1041 274 1041 q 822 909 691 1041 q 953 569 953 777 q 899 326 953 443 q 750 124 846 210 l 969 124 l 969 0 " }, "ύ": { x_min: 0, x_max: 617, ha: 725, o: "m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 535 1040 l 346 819 l 262 819 l 397 1040 l 535 1040 " }, z: { x_min: -0.015625, x_max: 613.890625, ha: 697, o: "m 613 0 l 0 0 l 0 100 l 433 630 l 20 630 l 20 738 l 594 738 l 593 636 l 163 110 l 613 110 l 613 0 " }, "™": { x_min: 0, x_max: 894, ha: 1e3, o: "m 389 951 l 229 951 l 229 503 l 160 503 l 160 951 l 0 951 l 0 1011 l 389 1011 l 389 951 m 894 503 l 827 503 l 827 939 l 685 503 l 620 503 l 481 937 l 481 503 l 417 503 l 417 1011 l 517 1011 l 653 580 l 796 1010 l 894 1011 l 894 503 " }, "ή": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 721 124 755 q 200 630 193 687 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 m 479 1040 l 290 819 l 207 819 l 341 1040 l 479 1040 " }, "Θ": { x_min: 0, x_max: 960, ha: 1056, o: "m 960 507 q 833 129 960 280 q 476 -32 698 -32 q 123 129 255 -32 q 0 507 0 280 q 123 883 0 732 q 476 1045 255 1045 q 832 883 696 1045 q 960 507 960 732 m 817 500 q 733 789 817 669 q 476 924 639 924 q 223 792 317 924 q 142 507 142 675 q 222 222 142 339 q 476 89 315 89 q 730 218 636 89 q 817 500 817 334 m 716 449 l 243 449 l 243 571 l 716 571 l 716 449 " }, "®": { x_min: -3, x_max: 1008, ha: 1106, o: "m 503 532 q 614 562 566 532 q 672 658 672 598 q 614 747 672 716 q 503 772 569 772 l 338 772 l 338 532 l 503 532 m 502 -7 q 123 151 263 -7 q -3 501 -3 294 q 123 851 -3 706 q 502 1011 263 1011 q 881 851 739 1011 q 1008 501 1008 708 q 883 151 1008 292 q 502 -7 744 -7 m 502 60 q 830 197 709 60 q 940 501 940 322 q 831 805 940 681 q 502 944 709 944 q 174 805 296 944 q 65 501 65 680 q 173 197 65 320 q 502 60 294 60 m 788 146 l 678 146 q 653 316 655 183 q 527 449 652 449 l 338 449 l 338 146 l 241 146 l 241 854 l 518 854 q 688 808 621 854 q 766 658 766 755 q 739 563 766 607 q 668 497 713 519 q 751 331 747 472 q 788 164 756 190 l 788 146 " }, "~": { x_min: 0, x_max: 833, ha: 931, o: "m 833 958 q 778 753 833 831 q 594 665 716 665 q 402 761 502 665 q 240 857 302 857 q 131 795 166 857 q 104 665 104 745 l 0 665 q 54 867 0 789 q 237 958 116 958 q 429 861 331 958 q 594 765 527 765 q 704 827 670 765 q 729 958 729 874 l 833 958 " }, "Ε": { x_min: 0, x_max: 736.21875, ha: 778, o: "m 736 0 l 0 0 l 0 1013 l 725 1013 l 725 889 l 139 889 l 139 585 l 677 585 l 677 467 l 139 467 l 139 125 l 736 125 l 736 0 " }, "³": { x_min: 0, x_max: 450, ha: 547, o: "m 450 552 q 379 413 450 464 q 220 366 313 366 q 69 414 130 366 q 0 567 0 470 l 85 567 q 126 470 85 504 q 225 437 168 437 q 320 467 280 437 q 360 552 360 498 q 318 632 360 608 q 213 657 276 657 q 195 657 203 657 q 176 657 181 657 l 176 722 q 279 733 249 722 q 334 815 334 752 q 300 881 334 856 q 220 907 267 907 q 133 875 169 907 q 97 781 97 844 l 15 781 q 78 926 15 875 q 220 972 135 972 q 364 930 303 972 q 426 817 426 888 q 344 697 426 733 q 421 642 392 681 q 450 552 450 603 " }, "[": { x_min: 0, x_max: 273.609375, ha: 371, o: "m 273 -281 l 0 -281 l 0 1013 l 273 1013 l 273 920 l 124 920 l 124 -187 l 273 -187 l 273 -281 " }, L: { x_min: 0, x_max: 645.828125, ha: 696, o: "m 645 0 l 0 0 l 0 1013 l 140 1013 l 140 126 l 645 126 l 645 0 " }, "σ": { x_min: 0, x_max: 803.390625, ha: 894, o: "m 803 628 l 633 628 q 713 368 713 512 q 618 93 713 204 q 357 -25 518 -25 q 94 91 194 -25 q 0 368 0 201 q 94 644 0 533 q 356 761 194 761 q 481 750 398 761 q 608 739 564 739 l 803 739 l 803 628 m 360 85 q 529 180 467 85 q 584 374 584 262 q 527 566 584 490 q 352 651 463 651 q 187 559 247 651 q 135 368 135 478 q 189 175 135 254 q 360 85 251 85 " }, "ζ": { x_min: 0, x_max: 573, ha: 642, o: "m 573 -40 q 553 -162 573 -97 q 510 -278 543 -193 l 400 -278 q 441 -187 428 -219 q 462 -90 462 -132 q 378 -14 462 -14 q 108 45 197 -14 q 0 290 0 117 q 108 631 0 462 q 353 901 194 767 l 55 901 l 55 1012 l 561 1012 l 561 924 q 261 669 382 831 q 128 301 128 489 q 243 117 128 149 q 458 98 350 108 q 573 -40 573 80 " }, "θ": { x_min: 0, x_max: 674, ha: 778, o: "m 674 496 q 601 160 674 304 q 336 -26 508 -26 q 73 153 165 -26 q 0 485 0 296 q 72 840 0 683 q 343 1045 166 1045 q 605 844 516 1045 q 674 496 674 692 m 546 579 q 498 798 546 691 q 336 935 437 935 q 178 798 237 935 q 126 579 137 701 l 546 579 m 546 475 l 126 475 q 170 233 126 348 q 338 80 230 80 q 504 233 447 80 q 546 475 546 346 " }, "Ο": { x_min: 0, x_max: 958, ha: 1054, o: "m 485 1042 q 834 883 703 1042 q 958 511 958 735 q 834 136 958 287 q 481 -26 701 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 729 q 485 1042 263 1042 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 670 q 480 913 640 913 q 226 785 321 913 q 142 504 142 671 q 226 224 142 339 q 480 98 319 98 " }, "Γ": { x_min: 0, x_max: 705.28125, ha: 749, o: "m 705 886 l 140 886 l 140 0 l 0 0 l 0 1012 l 705 1012 l 705 886 " }, " ": { x_min: 0, x_max: 0, ha: 375 }, "%": { x_min: -3, x_max: 1089, ha: 1186, o: "m 845 0 q 663 76 731 0 q 602 244 602 145 q 661 412 602 344 q 845 489 728 489 q 1027 412 959 489 q 1089 244 1089 343 q 1029 76 1089 144 q 845 0 962 0 m 844 103 q 945 143 909 103 q 981 243 981 184 q 947 340 981 301 q 844 385 909 385 q 744 342 781 385 q 708 243 708 300 q 741 147 708 186 q 844 103 780 103 m 888 986 l 284 -25 l 199 -25 l 803 986 l 888 986 m 241 468 q 58 545 126 468 q -3 715 -3 615 q 56 881 -3 813 q 238 958 124 958 q 421 881 353 958 q 483 712 483 813 q 423 544 483 612 q 241 468 356 468 m 241 855 q 137 811 175 855 q 100 710 100 768 q 136 612 100 653 q 240 572 172 572 q 344 614 306 572 q 382 713 382 656 q 347 810 382 771 q 241 855 308 855 " }, P: { x_min: 0, x_max: 726, ha: 806, o: "m 424 1013 q 640 931 555 1013 q 726 719 726 850 q 637 506 726 587 q 413 426 548 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 379 889 l 140 889 l 140 548 l 372 548 q 522 589 459 548 q 593 720 593 637 q 528 845 593 801 q 379 889 463 889 " }, "Έ": { x_min: 0, x_max: 1078.21875, ha: 1118, o: "m 1078 0 l 342 0 l 342 1013 l 1067 1013 l 1067 889 l 481 889 l 481 585 l 1019 585 l 1019 467 l 481 467 l 481 125 l 1078 125 l 1078 0 m 277 1040 l 83 799 l 0 799 l 140 1040 l 277 1040 " }, "Ώ": { x_min: 0.125, x_max: 1136.546875, ha: 1235, o: "m 1136 0 l 722 0 l 722 123 q 911 309 842 194 q 981 558 981 423 q 893 813 981 710 q 651 923 800 923 q 411 821 501 923 q 321 568 321 720 q 390 316 321 433 q 579 123 459 200 l 579 0 l 166 0 l 166 124 l 384 124 q 235 327 289 210 q 182 572 182 444 q 311 912 182 782 q 651 1042 441 1042 q 989 910 858 1042 q 1120 569 1120 778 q 1066 326 1120 443 q 917 124 1013 210 l 1136 124 l 1136 0 m 277 1040 l 83 800 l 0 800 l 140 1041 l 277 1040 " }, _: { x_min: 0, x_max: 705.5625, ha: 803, o: "m 705 -334 l 0 -334 l 0 -234 l 705 -234 l 705 -334 " }, "Ϊ": { x_min: -110, x_max: 246, ha: 275, o: "m 246 1046 l 118 1046 l 118 1189 l 246 1189 l 246 1046 m 18 1046 l -110 1046 l -110 1189 l 18 1189 l 18 1046 m 136 0 l 0 0 l 0 1012 l 136 1012 l 136 0 " }, "+": { x_min: 23, x_max: 768, ha: 792, o: "m 768 372 l 444 372 l 444 0 l 347 0 l 347 372 l 23 372 l 23 468 l 347 468 l 347 840 l 444 840 l 444 468 l 768 468 l 768 372 " }, "½": { x_min: 0, x_max: 1050, ha: 1149, o: "m 1050 0 l 625 0 q 712 178 625 108 q 878 277 722 187 q 967 385 967 328 q 932 456 967 429 q 850 484 897 484 q 759 450 798 484 q 721 352 721 416 l 640 352 q 706 502 640 448 q 851 551 766 551 q 987 509 931 551 q 1050 385 1050 462 q 976 251 1050 301 q 829 179 902 215 q 717 68 740 133 l 1050 68 l 1050 0 m 834 985 l 215 -28 l 130 -28 l 750 984 l 834 985 m 224 422 l 142 422 l 142 811 l 0 811 l 0 867 q 104 889 62 867 q 164 973 157 916 l 224 973 l 224 422 " }, "Ρ": { x_min: 0, x_max: 720, ha: 783, o: "m 424 1013 q 637 933 554 1013 q 720 723 720 853 q 633 508 720 591 q 413 426 546 426 l 140 426 l 140 0 l 0 0 l 0 1013 l 424 1013 m 378 889 l 140 889 l 140 548 l 371 548 q 521 589 458 548 q 592 720 592 637 q 527 845 592 801 q 378 889 463 889 " }, "'": { x_min: 0, x_max: 139, ha: 236, o: "m 139 851 q 102 737 139 784 q 0 669 65 690 l 0 734 q 59 787 42 741 q 72 873 72 821 l 0 873 l 0 1013 l 139 1013 l 139 851 " }, "ª": { x_min: 0, x_max: 350, ha: 397, o: "m 350 625 q 307 616 328 616 q 266 631 281 616 q 247 673 251 645 q 190 628 225 644 q 116 613 156 613 q 32 641 64 613 q 0 722 0 669 q 72 826 0 800 q 247 866 159 846 l 247 887 q 220 934 247 916 q 162 953 194 953 q 104 934 129 953 q 76 882 80 915 l 16 882 q 60 976 16 941 q 166 1011 104 1011 q 266 979 224 1011 q 308 891 308 948 l 308 706 q 311 679 308 688 q 331 670 315 670 l 350 672 l 350 625 m 247 757 l 247 811 q 136 790 175 798 q 64 726 64 773 q 83 682 64 697 q 132 667 103 667 q 207 690 174 667 q 247 757 247 718 " }, "΅": { x_min: 0, x_max: 450, ha: 553, o: "m 450 800 l 340 800 l 340 925 l 450 925 l 450 800 m 406 1040 l 212 800 l 129 800 l 269 1040 l 406 1040 m 110 800 l 0 800 l 0 925 l 110 925 l 110 800 " }, T: { x_min: 0, x_max: 777, ha: 835, o: "m 777 894 l 458 894 l 458 0 l 319 0 l 319 894 l 0 894 l 0 1013 l 777 1013 l 777 894 " }, "Φ": { x_min: 0, x_max: 915, ha: 997, o: "m 527 0 l 389 0 l 389 122 q 110 231 220 122 q 0 509 0 340 q 110 785 0 677 q 389 893 220 893 l 389 1013 l 527 1013 l 527 893 q 804 786 693 893 q 915 509 915 679 q 805 231 915 341 q 527 122 696 122 l 527 0 m 527 226 q 712 310 641 226 q 779 507 779 389 q 712 705 779 627 q 527 787 641 787 l 527 226 m 389 226 l 389 787 q 205 698 275 775 q 136 505 136 620 q 206 308 136 391 q 389 226 276 226 " }, "⁋": { x_min: 0, x_max: 0, ha: 694 }, j: { x_min: -77.78125, x_max: 167, ha: 349, o: "m 167 871 l 42 871 l 42 1013 l 167 1013 l 167 871 m 167 -80 q 121 -231 167 -184 q -26 -278 76 -278 l -77 -278 l -77 -164 l -41 -164 q 26 -143 11 -164 q 42 -65 42 -122 l 42 737 l 167 737 l 167 -80 " }, "Σ": { x_min: 0, x_max: 756.953125, ha: 819, o: "m 756 0 l 0 0 l 0 107 l 395 523 l 22 904 l 22 1013 l 745 1013 l 745 889 l 209 889 l 566 523 l 187 125 l 756 125 l 756 0 " }, "›": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, "<": { x_min: 17.984375, x_max: 773.609375, ha: 792, o: "m 773 40 l 18 376 l 17 465 l 773 799 l 773 692 l 159 420 l 773 149 l 773 40 " }, "£": { x_min: 0, x_max: 704.484375, ha: 801, o: "m 704 41 q 623 -10 664 5 q 543 -26 583 -26 q 359 15 501 -26 q 243 36 288 36 q 158 23 197 36 q 73 -21 119 10 l 6 76 q 125 195 90 150 q 175 331 175 262 q 147 443 175 383 l 0 443 l 0 512 l 108 512 q 43 734 43 623 q 120 929 43 854 q 358 1010 204 1010 q 579 936 487 1010 q 678 729 678 857 l 678 684 l 552 684 q 504 838 552 780 q 362 896 457 896 q 216 852 263 896 q 176 747 176 815 q 199 627 176 697 q 248 512 217 574 l 468 512 l 468 443 l 279 443 q 297 356 297 398 q 230 194 297 279 q 153 107 211 170 q 227 133 190 125 q 293 142 264 142 q 410 119 339 142 q 516 96 482 96 q 579 105 550 96 q 648 142 608 115 l 704 41 " }, t: { x_min: 0, x_max: 367, ha: 458, o: "m 367 0 q 312 -5 339 -2 q 262 -8 284 -8 q 145 28 183 -8 q 108 143 108 64 l 108 638 l 0 638 l 0 738 l 108 738 l 108 944 l 232 944 l 232 738 l 367 738 l 367 638 l 232 638 l 232 185 q 248 121 232 140 q 307 102 264 102 q 345 104 330 102 q 367 107 360 107 l 367 0 " }, "¬": { x_min: 0, x_max: 706, ha: 803, o: "m 706 411 l 706 158 l 630 158 l 630 335 l 0 335 l 0 411 l 706 411 " }, "λ": { x_min: 0, x_max: 750, ha: 803, o: "m 750 -7 q 679 -15 716 -15 q 538 59 591 -15 q 466 214 512 97 l 336 551 l 126 0 l 0 0 l 270 705 q 223 837 247 770 q 116 899 190 899 q 90 898 100 899 l 90 1004 q 152 1011 125 1011 q 298 938 244 1011 q 373 783 326 901 l 605 192 q 649 115 629 136 q 716 95 669 95 l 736 95 q 750 97 745 97 l 750 -7 " }, W: { x_min: 0, x_max: 1263.890625, ha: 1351, o: "m 1263 1013 l 995 0 l 859 0 l 627 837 l 405 0 l 265 0 l 0 1013 l 136 1013 l 342 202 l 556 1013 l 701 1013 l 921 207 l 1133 1012 l 1263 1013 " }, ">": { x_min: 18.0625, x_max: 774, ha: 792, o: "m 774 376 l 18 40 l 18 149 l 631 421 l 18 692 l 18 799 l 774 465 l 774 376 " }, v: { x_min: 0, x_max: 675.15625, ha: 761, o: "m 675 738 l 404 0 l 272 0 l 0 738 l 133 737 l 340 147 l 541 737 l 675 738 " }, "τ": { x_min: 0.28125, x_max: 644.5, ha: 703, o: "m 644 628 l 382 628 l 382 179 q 388 120 382 137 q 436 91 401 91 q 474 94 447 91 q 504 97 501 97 l 504 0 q 454 -9 482 -5 q 401 -14 426 -14 q 278 67 308 -14 q 260 233 260 118 l 260 628 l 0 628 l 0 739 l 644 739 l 644 628 " }, "ξ": { x_min: 0, x_max: 624.9375, ha: 699, o: "m 624 -37 q 608 -153 624 -96 q 563 -278 593 -211 l 454 -278 q 491 -183 486 -200 q 511 -83 511 -126 q 484 -23 511 -44 q 370 1 452 1 q 323 0 354 1 q 283 -1 293 -1 q 84 76 169 -1 q 0 266 0 154 q 56 431 0 358 q 197 538 108 498 q 94 613 134 562 q 54 730 54 665 q 77 823 54 780 q 143 901 101 867 l 27 901 l 27 1012 l 576 1012 l 576 901 l 380 901 q 244 863 303 901 q 178 745 178 820 q 312 600 178 636 q 532 582 380 582 l 532 479 q 276 455 361 479 q 118 281 118 410 q 165 173 118 217 q 274 120 208 133 q 494 101 384 110 q 624 -37 624 76 " }, "&": { x_min: -3, x_max: 894.25, ha: 992, o: "m 894 0 l 725 0 l 624 123 q 471 0 553 40 q 306 -41 390 -41 q 168 -7 231 -41 q 62 92 105 26 q 14 187 31 139 q -3 276 -3 235 q 55 433 -3 358 q 248 581 114 508 q 170 689 196 640 q 137 817 137 751 q 214 985 137 922 q 384 1041 284 1041 q 548 988 483 1041 q 622 824 622 928 q 563 666 622 739 q 431 556 516 608 l 621 326 q 649 407 639 361 q 663 493 653 426 l 781 493 q 703 229 781 352 l 894 0 m 504 818 q 468 908 504 877 q 384 940 433 940 q 293 907 331 940 q 255 818 255 875 q 289 714 255 767 q 363 628 313 678 q 477 729 446 682 q 504 818 504 771 m 556 209 l 314 499 q 179 395 223 449 q 135 283 135 341 q 146 222 135 253 q 183 158 158 192 q 333 80 241 80 q 556 209 448 80 " }, "Λ": { x_min: 0, x_max: 862.5, ha: 942, o: "m 862 0 l 719 0 l 426 847 l 143 0 l 0 0 l 356 1013 l 501 1013 l 862 0 " }, I: { x_min: 41, x_max: 180, ha: 293, o: "m 180 0 l 41 0 l 41 1013 l 180 1013 l 180 0 " }, G: { x_min: 0, x_max: 921, ha: 1011, o: "m 921 0 l 832 0 l 801 136 q 655 15 741 58 q 470 -28 568 -28 q 126 133 259 -28 q 0 499 0 284 q 125 881 0 731 q 486 1043 259 1043 q 763 957 647 1043 q 905 709 890 864 l 772 709 q 668 866 747 807 q 486 926 589 926 q 228 795 322 926 q 142 507 142 677 q 228 224 142 342 q 483 94 323 94 q 712 195 625 94 q 796 435 796 291 l 477 435 l 477 549 l 921 549 l 921 0 " }, "ΰ": { x_min: 0, x_max: 617, ha: 725, o: "m 524 800 l 414 800 l 414 925 l 524 925 l 524 800 m 183 800 l 73 800 l 73 925 l 183 925 l 183 800 m 617 352 q 540 93 617 199 q 308 -24 455 -24 q 76 93 161 -24 q 0 352 0 199 l 0 738 l 126 738 l 126 354 q 169 185 126 257 q 312 98 220 98 q 451 185 402 98 q 492 354 492 257 l 492 738 l 617 738 l 617 352 m 489 1040 l 300 819 l 216 819 l 351 1040 l 489 1040 " }, "`": { x_min: 0, x_max: 138.890625, ha: 236, o: "m 138 699 l 0 699 l 0 861 q 36 974 0 929 q 138 1041 72 1020 l 138 977 q 82 931 95 969 q 69 839 69 893 l 138 839 l 138 699 " }, "·": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 " }, "Υ": { x_min: 0.328125, x_max: 819.515625, ha: 889, o: "m 819 1013 l 482 416 l 482 0 l 342 0 l 342 416 l 0 1013 l 140 1013 l 411 533 l 679 1013 l 819 1013 " }, r: { x_min: 0, x_max: 355.5625, ha: 432, o: "m 355 621 l 343 621 q 179 569 236 621 q 122 411 122 518 l 122 0 l 0 0 l 0 737 l 117 737 l 117 604 q 204 719 146 686 q 355 753 262 753 l 355 621 " }, x: { x_min: 0, x_max: 675, ha: 764, o: "m 675 0 l 525 0 l 331 286 l 144 0 l 0 0 l 256 379 l 12 738 l 157 737 l 336 473 l 516 738 l 661 738 l 412 380 l 675 0 " }, "μ": { x_min: 0, x_max: 696.609375, ha: 747, o: "m 696 -4 q 628 -14 657 -14 q 498 97 513 -14 q 422 8 470 41 q 313 -24 374 -24 q 207 3 258 -24 q 120 80 157 31 l 120 -278 l 0 -278 l 0 738 l 124 738 l 124 343 q 165 172 124 246 q 308 82 216 82 q 451 177 402 82 q 492 358 492 254 l 492 738 l 616 738 l 616 214 q 623 136 616 160 q 673 92 636 92 q 696 95 684 92 l 696 -4 " }, h: { x_min: 0, x_max: 615, ha: 724, o: "m 615 472 l 615 0 l 490 0 l 490 454 q 456 590 490 535 q 338 654 416 654 q 186 588 251 654 q 122 436 122 522 l 122 0 l 0 0 l 0 1013 l 122 1013 l 122 633 q 218 727 149 694 q 362 760 287 760 q 552 676 484 760 q 615 472 615 600 " }, ".": { x_min: 0, x_max: 142, ha: 239, o: "m 142 0 l 0 0 l 0 151 l 142 151 l 142 0 " }, "φ": { x_min: -2, x_max: 878, ha: 974, o: "m 496 -279 l 378 -279 l 378 -17 q 101 88 204 -17 q -2 367 -2 194 q 68 626 -2 510 q 283 758 151 758 l 283 646 q 167 537 209 626 q 133 373 133 462 q 192 177 133 254 q 378 93 259 93 l 378 758 q 445 764 426 763 q 476 765 464 765 q 765 659 653 765 q 878 377 878 553 q 771 96 878 209 q 496 -17 665 -17 l 496 -279 m 496 93 l 514 93 q 687 183 623 93 q 746 380 746 265 q 691 569 746 491 q 522 658 629 658 l 496 656 l 496 93 " }, ";": { x_min: 0, x_max: 142, ha: 239, o: "m 142 585 l 0 585 l 0 738 l 142 738 l 142 585 m 142 -12 q 105 -132 142 -82 q 0 -206 68 -182 l 0 -138 q 58 -82 43 -123 q 68 0 68 -56 l 0 0 l 0 151 l 142 151 l 142 -12 " }, f: { x_min: 0, x_max: 378, ha: 472, o: "m 378 638 l 246 638 l 246 0 l 121 0 l 121 638 l 0 638 l 0 738 l 121 738 q 137 935 121 887 q 290 1028 171 1028 q 320 1027 305 1028 q 378 1021 334 1026 l 378 908 q 323 918 346 918 q 257 870 273 918 q 246 780 246 840 l 246 738 l 378 738 l 378 638 " }, "“": { x_min: 1, x_max: 348.21875, ha: 454, o: "m 140 670 l 1 670 l 1 830 q 37 943 1 897 q 140 1011 74 990 l 140 947 q 82 900 97 940 q 68 810 68 861 l 140 810 l 140 670 m 348 670 l 209 670 l 209 830 q 245 943 209 897 q 348 1011 282 990 l 348 947 q 290 900 305 940 q 276 810 276 861 l 348 810 l 348 670 " }, A: { x_min: 0.03125, x_max: 906.953125, ha: 1008, o: "m 906 0 l 756 0 l 648 303 l 251 303 l 142 0 l 0 0 l 376 1013 l 529 1013 l 906 0 m 610 421 l 452 867 l 293 421 l 610 421 " }, "‘": { x_min: 1, x_max: 139.890625, ha: 236, o: "m 139 670 l 1 670 l 1 830 q 37 943 1 897 q 139 1011 74 990 l 139 947 q 82 900 97 940 q 68 810 68 861 l 139 810 l 139 670 " }, "ϊ": { x_min: -70, x_max: 283, ha: 361, o: "m 283 800 l 173 800 l 173 925 l 283 925 l 283 800 m 40 800 l -70 800 l -70 925 l 40 925 l 40 800 m 283 3 q 232 -10 257 -5 q 181 -15 206 -15 q 84 26 118 -15 q 41 200 41 79 l 41 737 l 166 737 l 167 215 q 171 141 167 157 q 225 101 182 101 q 247 103 238 101 q 283 112 256 104 l 283 3 " }, "π": { x_min: -0.21875, x_max: 773.21875, ha: 857, o: "m 773 -7 l 707 -11 q 575 40 607 -11 q 552 174 552 77 l 552 226 l 552 626 l 222 626 l 222 0 l 97 0 l 97 626 l 0 626 l 0 737 l 773 737 l 773 626 l 676 626 l 676 171 q 695 103 676 117 q 773 90 714 90 l 773 -7 " }, "ά": { x_min: 0, x_max: 765.5625, ha: 809, o: "m 765 -4 q 698 -14 726 -14 q 564 97 586 -14 q 466 7 525 40 q 337 -26 407 -26 q 88 98 186 -26 q 0 369 0 212 q 88 637 0 525 q 337 760 184 760 q 465 727 407 760 q 563 637 524 695 l 563 738 l 685 738 l 685 222 q 693 141 685 168 q 748 94 708 94 q 765 95 760 94 l 765 -4 m 584 371 q 531 562 584 485 q 360 653 470 653 q 192 566 254 653 q 135 379 135 489 q 186 181 135 261 q 358 84 247 84 q 528 176 465 84 q 584 371 584 260 m 604 1040 l 415 819 l 332 819 l 466 1040 l 604 1040 " }, O: { x_min: 0, x_max: 958, ha: 1057, o: "m 485 1041 q 834 882 702 1041 q 958 512 958 734 q 834 136 958 287 q 481 -26 702 -26 q 126 130 261 -26 q 0 504 0 279 q 127 880 0 728 q 485 1041 263 1041 m 480 98 q 731 225 638 98 q 815 504 815 340 q 733 783 815 669 q 480 912 640 912 q 226 784 321 912 q 142 504 142 670 q 226 224 142 339 q 480 98 319 98 " }, n: { x_min: 0, x_max: 615, ha: 724, o: "m 615 463 l 615 0 l 490 0 l 490 454 q 453 592 490 537 q 331 656 410 656 q 178 585 240 656 q 117 421 117 514 l 117 0 l 0 0 l 0 738 l 117 738 l 117 630 q 218 728 150 693 q 359 764 286 764 q 552 675 484 764 q 615 463 615 593 " }, l: { x_min: 41, x_max: 166, ha: 279, o: "m 166 0 l 41 0 l 41 1013 l 166 1013 l 166 0 " }, "¤": { x_min: 40.09375, x_max: 728.796875, ha: 825, o: "m 728 304 l 649 224 l 512 363 q 383 331 458 331 q 256 363 310 331 l 119 224 l 40 304 l 177 441 q 150 553 150 493 q 184 673 150 621 l 40 818 l 119 898 l 267 749 q 321 766 291 759 q 384 773 351 773 q 447 766 417 773 q 501 749 477 759 l 649 898 l 728 818 l 585 675 q 612 618 604 648 q 621 553 621 587 q 591 441 621 491 l 728 304 m 384 682 q 280 643 318 682 q 243 551 243 604 q 279 461 243 499 q 383 423 316 423 q 487 461 449 423 q 525 553 525 500 q 490 641 525 605 q 384 682 451 682 " }, "κ": { x_min: 0, x_max: 632.328125, ha: 679, o: "m 632 0 l 482 0 l 225 384 l 124 288 l 124 0 l 0 0 l 0 738 l 124 738 l 124 446 l 433 738 l 596 738 l 312 466 l 632 0 " }, p: { x_min: 0, x_max: 685, ha: 786, o: "m 685 364 q 598 96 685 205 q 350 -23 504 -23 q 121 89 205 -23 l 121 -278 l 0 -278 l 0 738 l 121 738 l 121 633 q 220 726 159 691 q 351 761 280 761 q 598 636 504 761 q 685 364 685 522 m 557 371 q 501 560 557 481 q 330 651 437 651 q 162 559 223 651 q 108 366 108 479 q 162 177 108 254 q 333 87 224 87 q 502 178 441 87 q 557 371 557 258 " }, "‡": { x_min: 0, x_max: 777, ha: 835, o: "m 458 238 l 458 0 l 319 0 l 319 238 l 0 238 l 0 360 l 319 360 l 319 681 l 0 683 l 0 804 l 319 804 l 319 1015 l 458 1013 l 458 804 l 777 804 l 777 683 l 458 683 l 458 360 l 777 360 l 777 238 l 458 238 " }, "ψ": { x_min: 0, x_max: 808, ha: 907, o: "m 465 -278 l 341 -278 l 341 -15 q 87 102 180 -15 q 0 378 0 210 l 0 739 l 133 739 l 133 379 q 182 195 133 275 q 341 98 242 98 l 341 922 l 465 922 l 465 98 q 623 195 563 98 q 675 382 675 278 l 675 742 l 808 742 l 808 381 q 720 104 808 213 q 466 -13 627 -13 l 465 -278 " }, "η": { x_min: 0.78125, x_max: 697, ha: 810, o: "m 697 -278 l 572 -278 l 572 454 q 540 587 572 536 q 425 650 501 650 q 271 579 337 650 q 206 420 206 509 l 206 0 l 81 0 l 81 489 q 73 588 81 562 q 0 644 56 644 l 0 741 q 68 755 38 755 q 158 720 124 755 q 200 630 193 686 q 297 726 234 692 q 434 761 359 761 q 620 692 544 761 q 697 516 697 624 l 697 -278 " } };
var cssFontWeight = "normal";
var ascender = 1189;
var underlinePosition = -100;
var cssFontStyle = "normal";
var boundingBox = { yMin: -334, xMin: -111, yMax: 1189, xMax: 1672 };
var resolution2 = 1e3;
var original_font_information = { postscript_name: "Helvetiker-Regular", version_string: "Version 1.00 2004 initial release", vendor_url: "http://www.magenta.gr/", full_font_name: "Helvetiker", font_family_name: "Helvetiker", copyright: "Copyright (c) Μagenta ltd, 2004", description: "", trademark: "", designer: "", designer_url: "", unique_font_identifier: "Μagenta ltd:Helvetiker:22-10-104", license_url: "http://www.ellak.gr/fonts/MgOpen/license.html", license_description: 'Copyright (c) 2004 by MAGENTA Ltd. All Rights Reserved.\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of the fonts accompanying this license ("Fonts") and associated documentation files (the "Font Software"), to reproduce and distribute the Font Software, including without limitation the rights to use, copy, merge, publish, distribute, and/or sell copies of the Font Software, and to permit persons to whom the Font Software is furnished to do so, subject to the following conditions: \r\n\r\nThe above copyright and this permission notice shall be included in all copies of one or more of the Font Software typefaces.\r\n\r\nThe Font Software may be modified, altered, or added to, and in particular the designs of glyphs or characters in the Fonts may be modified and additional glyphs or characters may be added to the Fonts, only if the fonts are renamed to names not containing the word "MgOpen", or if the modifications are accepted for inclusion in the Font Software itself by the each appointed Administrator.\r\n\r\nThis License becomes null and void to the extent applicable to Fonts or Font Software that has been modified and is distributed under the "MgOpen" name.\r\n\r\nThe Font Software may be sold as part of a larger software package but no copy of one or more of the Font Software typefaces may be sold by itself. \r\n\r\nTHE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL MAGENTA OR PERSONS OR BODIES IN CHARGE OF ADMINISTRATION AND MAINTENANCE OF THE FONT SOFTWARE BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM OTHER DEALINGS IN THE FONT SOFTWARE.', manufacturer_name: "Μagenta ltd", font_sub_family_name: "Regular" };
var descender = -334;
var familyName = "Helvetiker";
var lineHeight = 1522;
var underlineThickness = 50;
var defaultTypeFace = { glyphs, cssFontWeight, ascender, underlinePosition, cssFontStyle, boundingBox, resolution: resolution2, original_font_information, descender, familyName, lineHeight, underlineThickness };
var THREE$3 = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE : {
  BoxGeometry,
  CircleGeometry,
  DoubleSide,
  Group,
  Mesh,
  MeshLambertMaterial,
  TextGeometry,
  Vector3
}), {}, {
  Font,
  TextGeometry
});
var LabelsLayerKapsule = index2({
  props: {
    labelsData: {
      "default": []
    },
    labelLat: {
      "default": "lat"
    },
    labelLng: {
      "default": "lng"
    },
    labelAltitude: {
      "default": 2e-3
    },
    // in units of globe radius
    labelText: {
      "default": "text"
    },
    labelSize: {
      "default": 0.5
    },
    // text height in deg
    labelTypeFace: {
      "default": defaultTypeFace,
      onChange: function onChange7(tf, state) {
        state.font = new THREE$3.Font(tf);
      }
    },
    labelColor: {
      "default": function _default22() {
        return "lightgrey";
      }
    },
    labelRotation: {
      "default": 0
    },
    // clockwise degrees, relative to the latitute parallel plane
    labelResolution: {
      "default": 3
    },
    // how many segments in the text's curves
    labelIncludeDot: {
      "default": true
    },
    labelDotRadius: {
      "default": 0.1
    },
    // in deg
    labelDotOrientation: {
      "default": function _default23() {
        return "bottom";
      }
    },
    // right, top, bottom
    labelsTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    }
    // ms
  },
  init: function init12(threeObj, state, _ref) {
    var tweenGroup = _ref.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    var circleGeometry = new THREE$3.CircleGeometry(1, 32);
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjLabel"
    }).onCreateObj(function() {
      var material = new THREE$3.MeshLambertMaterial();
      material.side = DoubleSide;
      var obj = new THREE$3.Group();
      obj.add(new THREE$3.Mesh(circleGeometry, material));
      var textObj = new THREE$3.Mesh(void 0, material);
      obj.add(textObj);
      var bbObj = new THREE$3.Mesh();
      bbObj.visible = false;
      textObj.add(bbObj);
      obj.__globeObjType = "label";
      return obj;
    });
  },
  update: function update13(state) {
    var latAccessor = index4(state.labelLat);
    var lngAccessor = index4(state.labelLng);
    var altitudeAccessor = index4(state.labelAltitude);
    var textAccessor = index4(state.labelText);
    var sizeAccessor = index4(state.labelSize);
    var rotationAccessor = index4(state.labelRotation);
    var colorAccessor = index4(state.labelColor);
    var includeDotAccessor = index4(state.labelIncludeDot);
    var dotRadiusAccessor = index4(state.labelDotRadius);
    var dotOrientationAccessor = index4(state.labelDotOrientation);
    var orientations = /* @__PURE__ */ new Set(["right", "top", "bottom"]);
    var pxPerDeg = 2 * Math.PI * GLOBE_RADIUS / 360;
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var _obj$children = _slicedToArray9(obj.children, 2), dotObj = _obj$children[0], textObj = _obj$children[1];
      var _textObj$children = _slicedToArray9(textObj.children, 1), bbObj = _textObj$children[0];
      var color3 = colorAccessor(d2);
      var opacity = colorAlpha(color3);
      textObj.material.color.set(colorStr2Hex(color3));
      textObj.material.transparent = opacity < 1;
      textObj.material.opacity = opacity;
      var includeDot = includeDotAccessor(d2);
      var dotOrient = dotOrientationAccessor(d2);
      !includeDot || !orientations.has(dotOrient) && (dotOrient = "bottom");
      var dotR = includeDot ? +dotRadiusAccessor(d2) * pxPerDeg : 1e-12;
      dotObj.scale.x = dotObj.scale.y = dotR;
      var textHeight = +sizeAccessor(d2) * pxPerDeg;
      textObj.geometry && textObj.geometry.dispose();
      textObj.geometry = new THREE$3.TextGeometry(textAccessor(d2), {
        font: state.font,
        size: textHeight,
        depth: 0,
        bevelEnabled: true,
        bevelThickness: 0,
        bevelSize: 0,
        curveSegments: state.labelResolution
      });
      bbObj.geometry && bbObj.geometry.dispose();
      textObj.geometry.computeBoundingBox();
      bbObj.geometry = _construct(THREE$3.BoxGeometry, _toConsumableArray8(new THREE$3.Vector3().subVectors(textObj.geometry.boundingBox.max, textObj.geometry.boundingBox.min).clampScalar(0, Infinity).toArray()));
      dotOrient !== "right" && textObj.geometry.center();
      if (includeDot) {
        var padding = dotR + textHeight / 2;
        dotOrient === "right" && (textObj.position.x = padding);
        textObj.position.y = {
          right: -textHeight / 2,
          // center vertically
          top: padding + textHeight / 2,
          bottom: -padding - textHeight / 2
        }[dotOrient];
      }
      var applyPosition = function applyPosition2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng, alt = _obj$__currentTargetD.alt, rot = _obj$__currentTargetD.rot, scale2 = _obj$__currentTargetD.scale;
        Object.assign(obj.position, polar2Cartesian4(lat, lng, alt));
        obj.lookAt(state.scene.localToWorld(new THREE$3.Vector3(0, 0, 0)));
        obj.rotateY(Math.PI);
        obj.rotateZ(-rot * Math.PI / 180);
        obj.scale.x = obj.scale.y = obj.scale.z = scale2;
      };
      var targetD = {
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2),
        alt: +altitudeAccessor(d2),
        rot: +rotationAccessor(d2),
        scale: 1
      };
      var currentTargetD = obj.__currentTargetD || Object.assign({}, targetD, {
        scale: 1e-12
      });
      if (Object.keys(targetD).some(function(k2) {
        return currentTargetD[k2] !== targetD[k2];
      })) {
        if (!state.labelsTransitionDuration || state.labelsTransitionDuration < 0) {
          applyPosition(targetD);
        } else {
          state.tweenGroup.add(new Tween(currentTargetD).to(targetD, state.labelsTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyPosition).start());
        }
      }
    }).digest(state.labelsData);
  }
});
var THREE$2 = _objectSpread2(_objectSpread2({}, window.THREE ? window.THREE : {}), {}, {
  CSS2DObject
});
var HtmlElementsLayerKapsule = index2({
  props: {
    htmlElementsData: {
      "default": []
    },
    htmlLat: {
      "default": "lat"
    },
    htmlLng: {
      "default": "lng"
    },
    htmlAltitude: {
      "default": 0
    },
    // in units of globe radius
    htmlElement: {},
    htmlElementVisibilityModifier: {
      triggerUpdate: false
    },
    htmlTransitionDuration: {
      "default": 1e3,
      triggerUpdate: false
    },
    // ms
    isBehindGlobe: {
      onChange: function onChange8() {
        this.updateObjVisibility();
      },
      triggerUpdate: false
    }
  },
  methods: {
    updateObjVisibility: function updateObjVisibility(state, obj) {
      if (!state.dataMapper) return;
      var objs = obj ? [obj] : state.dataMapper.entries().map(function(_ref) {
        var _ref2 = _slicedToArray9(_ref, 2), o2 = _ref2[1];
        return o2;
      }).filter(function(d2) {
        return d2;
      });
      objs.forEach(function(obj2) {
        var isVisible = !state.isBehindGlobe || !state.isBehindGlobe(obj2.position);
        if (state.htmlElementVisibilityModifier) {
          obj2.visible = true;
          state.htmlElementVisibilityModifier(obj2.element, isVisible);
        } else {
          obj2.visible = isVisible;
        }
      });
    }
  },
  init: function init13(threeObj, state, _ref3) {
    var tweenGroup = _ref3.tweenGroup;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.tweenGroup = tweenGroup;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjHtml"
    }).onCreateObj(function(d2) {
      var elem = index4(state.htmlElement)(d2);
      var obj = new THREE$2.CSS2DObject(elem);
      obj.__globeObjType = "html";
      return obj;
    });
  },
  update: function update14(state, changedProps) {
    var _this = this;
    var latAccessor = index4(state.htmlLat);
    var lngAccessor = index4(state.htmlLng);
    var altitudeAccessor = index4(state.htmlAltitude);
    changedProps.hasOwnProperty("htmlElement") && state.dataMapper.clear();
    state.dataMapper.onUpdateObj(function(obj, d2) {
      var applyUpdate = function applyUpdate2(td) {
        var _obj$__currentTargetD = obj.__currentTargetD = td, alt = _obj$__currentTargetD.alt, lat = _obj$__currentTargetD.lat, lng = _obj$__currentTargetD.lng;
        Object.assign(obj.position, polar2Cartesian4(lat, lng, alt));
        _this.updateObjVisibility(obj);
      };
      var targetD = {
        lat: +latAccessor(d2),
        lng: +lngAccessor(d2),
        alt: +altitudeAccessor(d2)
      };
      if (!state.htmlTransitionDuration || state.htmlTransitionDuration < 0 || !obj.__currentTargetD) {
        applyUpdate(targetD);
      } else {
        state.tweenGroup.add(new Tween(obj.__currentTargetD).to(targetD, state.htmlTransitionDuration).easing(Easing.Quadratic.InOut).onUpdate(applyUpdate).start());
      }
    }).digest(state.htmlElementsData);
  }
});
var THREE$1 = window.THREE ? window.THREE : {
  Group,
  Mesh,
  MeshLambertMaterial,
  SphereGeometry
};
var ObjectsLayerKapsule = index2({
  props: {
    objectsData: {
      "default": []
    },
    objectLat: {
      "default": "lat"
    },
    objectLng: {
      "default": "lng"
    },
    objectAltitude: {
      "default": 0.01
    },
    // in units of globe radius
    objectFacesSurface: {
      "default": true
    },
    objectRotation: {},
    objectThreeObject: {
      "default": new THREE$1.Mesh(
        // default object: yellow sphere
        new THREE$1.SphereGeometry(1, 16, 8),
        new THREE$1.MeshLambertMaterial({
          color: "#ffffaa",
          transparent: true,
          opacity: 0.7
        })
      )
    }
  },
  init: function init14(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjObject"
    }).onCreateObj(function(d2) {
      var obj = index4(state.objectThreeObject)(d2);
      if (state.objectThreeObject === obj) {
        obj = obj.clone();
      }
      var g2 = new THREE$1.Group();
      g2.add(obj);
      g2.__globeObjType = "object";
      return g2;
    });
  },
  update: function update15(state, changedProps) {
    var latAccessor = index4(state.objectLat);
    var lngAccessor = index4(state.objectLng);
    var altitudeAccessor = index4(state.objectAltitude);
    var parallelAccessor = index4(state.objectFacesSurface);
    var rotationAccessor = index4(state.objectRotation);
    changedProps.hasOwnProperty("objectThreeObject") && state.dataMapper.clear();
    state.dataMapper.onUpdateObj(function(objG, d2) {
      var lat = +latAccessor(d2);
      var lng = +lngAccessor(d2);
      var alt = +altitudeAccessor(d2);
      Object.assign(objG.position, polar2Cartesian4(lat, lng, alt));
      parallelAccessor(d2) ? objG.setRotationFromEuler(new Euler(deg2Rad$1(-lat), deg2Rad$1(lng), 0, "YXZ")) : objG.rotation.set(0, 0, 0);
      var obj = objG.children[0];
      var rot = rotationAccessor(d2);
      rot && obj.setRotationFromEuler(new Euler(deg2Rad$1(rot.x || 0), deg2Rad$1(rot.y || 0), deg2Rad$1(rot.z || 0)));
    }).digest(state.objectsData);
  }
});
var CustomLayerKapsule = index2({
  props: {
    customLayerData: {
      "default": []
    },
    customThreeObject: {},
    customThreeObjectUpdate: {
      triggerUpdate: false
    }
  },
  init: function init15(threeObj, state) {
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.dataMapper = new ThreeDigest(threeObj, {
      objBindAttr: "__threeObjCustom"
    }).onCreateObj(function(d2) {
      var obj = index4(state.customThreeObject)(d2, GLOBE_RADIUS);
      if (obj) {
        if (state.customThreeObject === obj) {
          obj = obj.clone();
        }
        obj.__globeObjType = "custom";
      }
      return obj;
    });
  },
  update: function update16(state, changedProps) {
    if (!state.customThreeObjectUpdate) {
      emptyObject3(state.scene);
    }
    var customObjectUpdateAccessor = index4(state.customThreeObjectUpdate);
    changedProps.hasOwnProperty("customThreeObject") && state.dataMapper.clear();
    state.dataMapper.onUpdateObj(function(obj, d2) {
      return customObjectUpdateAccessor(obj, d2, GLOBE_RADIUS);
    }).digest(state.customLayerData);
  }
});
var THREE3 = window.THREE ? window.THREE : {
  Camera,
  Group,
  Vector2,
  Vector3
};
var layers = ["globeLayer", "pointsLayer", "arcsLayer", "hexBinLayer", "heatmapsLayer", "polygonsLayer", "hexedPolygonsLayer", "pathsLayer", "tilesLayer", "particlesLayer", "ringsLayer", "labelsLayer", "htmlElementsLayer", "objectsLayer", "customLayer"];
var bindGlobeLayer = linkKapsule("globeLayer", GlobeLayerKapsule);
var linkedGlobeLayerProps = Object.assign.apply(Object, _toConsumableArray8(["globeImageUrl", "bumpImageUrl", "globeCurvatureResolution", "globeTileEngineUrl", "globeTileEngineMaxLevel", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude"].map(function(p2) {
  return _defineProperty3({}, p2, bindGlobeLayer.linkProp(p2));
})));
var linkedGlobeLayerMethods = Object.assign.apply(Object, _toConsumableArray8(["globeMaterial"].map(function(p2) {
  return _defineProperty3({}, p2, bindGlobeLayer.linkMethod(p2));
})));
var bindPointsLayer = linkKapsule("pointsLayer", PointsLayerKapsule);
var linkedPointsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindPointsLayer.linkProp(p2));
})));
var bindArcsLayer = linkKapsule("arcsLayer", ArcsLayerKapsule);
var linkedArcsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["arcsData", "arcStartLat", "arcStartLng", "arcStartAltitude", "arcEndLat", "arcEndLng", "arcEndAltitude", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindArcsLayer.linkProp(p2));
})));
var bindHexBinLayer = linkKapsule("hexBinLayer", HexBinLayerKapsule);
var linkedHexBinLayerProps = Object.assign.apply(Object, _toConsumableArray8(["hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHexBinLayer.linkProp(p2));
})));
var bindHeatmapsLayer = linkKapsule("heatmapsLayer", HeatmapsLayerKapsule);
var linkedHeatmapsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["heatmapsData", "heatmapPoints", "heatmapPointLat", "heatmapPointLng", "heatmapPointWeight", "heatmapBandwidth", "heatmapColorFn", "heatmapColorSaturation", "heatmapBaseAltitude", "heatmapTopAltitude", "heatmapsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHeatmapsLayer.linkProp(p2));
})));
var bindHexedPolygonsLayer = linkKapsule("hexedPolygonsLayer", HexedPolygonsLayerKapsule);
var linkedHexedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonUseDots", "hexPolygonCurvatureResolution", "hexPolygonDotResolution", "hexPolygonsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHexedPolygonsLayer.linkProp(p2));
})));
var bindPolygonsLayer = linkKapsule("polygonsLayer", PolygonsLayerKapsule);
var linkedPolygonsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindPolygonsLayer.linkProp(p2));
})));
var bindPathsLayer = linkKapsule("pathsLayer", PathsLayerKapsule);
var linkedPathsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindPathsLayer.linkProp(p2));
})));
var bindTilesLayer = linkKapsule("tilesLayer", TilesLayerKapsule);
var linkedTilesLayerProps = Object.assign.apply(Object, _toConsumableArray8(["tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindTilesLayer.linkProp(p2));
})));
var bindParticlesLayer = linkKapsule("particlesLayer", ParticlesLayerKapsule);
var linkedParticlesLayerProps = Object.assign.apply(Object, _toConsumableArray8(["particlesData", "particlesList", "particleLat", "particleLng", "particleAltitude", "particlesSize", "particlesSizeAttenuation", "particlesColor", "particlesTexture"].map(function(p2) {
  return _defineProperty3({}, p2, bindParticlesLayer.linkProp(p2));
})));
var bindRingsLayer = linkKapsule("ringsLayer", RingsLayerKapsule);
var linkedRingsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["ringsData", "ringLat", "ringLng", "ringAltitude", "ringColor", "ringResolution", "ringMaxRadius", "ringPropagationSpeed", "ringRepeatPeriod"].map(function(p2) {
  return _defineProperty3({}, p2, bindRingsLayer.linkProp(p2));
})));
var bindLabelsLayer = linkKapsule("labelsLayer", LabelsLayerKapsule);
var linkedLabelsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindLabelsLayer.linkProp(p2));
})));
var bindHtmlElementsLayer = linkKapsule("htmlElementsLayer", HtmlElementsLayerKapsule);
var linkedHtmlElementsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["htmlElementsData", "htmlLat", "htmlLng", "htmlAltitude", "htmlElement", "htmlElementVisibilityModifier", "htmlTransitionDuration"].map(function(p2) {
  return _defineProperty3({}, p2, bindHtmlElementsLayer.linkProp(p2));
})));
var bindObjectsLayer = linkKapsule("objectsLayer", ObjectsLayerKapsule);
var linkedObjectsLayerProps = Object.assign.apply(Object, _toConsumableArray8(["objectsData", "objectLat", "objectLng", "objectAltitude", "objectRotation", "objectFacesSurface", "objectThreeObject"].map(function(p2) {
  return _defineProperty3({}, p2, bindObjectsLayer.linkProp(p2));
})));
var bindCustomLayer = linkKapsule("customLayer", CustomLayerKapsule);
var linkedCustomLayerProps = Object.assign.apply(Object, _toConsumableArray8(["customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p2) {
  return _defineProperty3({}, p2, bindCustomLayer.linkProp(p2));
})));
var Globe = index2({
  props: _objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2(_objectSpread2({
    onGlobeReady: {
      triggerUpdate: false
    },
    rendererSize: {
      "default": new THREE3.Vector2(window.innerWidth, window.innerHeight),
      onChange: function onChange9(rendererSize, state) {
        state.pathsLayer.rendererSize(rendererSize);
      },
      triggerUpdate: false
    }
  }, linkedGlobeLayerProps), linkedPointsLayerProps), linkedArcsLayerProps), linkedHexBinLayerProps), linkedHeatmapsLayerProps), linkedPolygonsLayerProps), linkedHexedPolygonsLayerProps), linkedPathsLayerProps), linkedTilesLayerProps), linkedParticlesLayerProps), linkedRingsLayerProps), linkedLabelsLayerProps), linkedHtmlElementsLayerProps), linkedObjectsLayerProps), linkedCustomLayerProps),
  methods: _objectSpread2({
    getGlobeRadius,
    getCoords: function getCoords(state) {
      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      return polar2Cartesian4.apply(void 0, args);
    },
    toGeoCoords: function toGeoCoords(state) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return cartesian2Polar2.apply(void 0, args);
    },
    setPointOfView: function setPointOfView(state, camera3) {
      var globalPov = camera3 instanceof THREE3.Camera ? camera3.position : camera3;
      var globeRadius = getGlobeRadius();
      var isBehindGlobe = void 0;
      if (state.scene && globalPov) {
        var pov, povDist, povEdgeDist, povEdgeAngle;
        isBehindGlobe = function isBehindGlobe2(pos) {
          pov === void 0 && (pov = globalPov.clone().applyMatrix4(state.scene.matrixWorld.clone().invert()));
          povDist === void 0 && (povDist = pov.length());
          povEdgeDist === void 0 && (povEdgeDist = Math.sqrt(Math.pow(povDist, 2) - Math.pow(globeRadius, 2)));
          povEdgeAngle === void 0 && (povEdgeAngle = Math.acos(povEdgeDist / povDist));
          var povPosDist = pov.distanceTo(pos);
          if (povPosDist < povEdgeDist) return false;
          var posDist = pos.length();
          var povPosAngle = Math.acos((Math.pow(povDist, 2) + Math.pow(povPosDist, 2) - Math.pow(posDist, 2)) / (2 * povDist * povPosDist));
          return povPosAngle < povEdgeAngle;
        };
      }
      state.layersThatNeedUpdatePov.forEach(function(l2) {
        return l2.updatePov(camera3);
      });
      state.layersThatNeedBehindGlobeChecker.forEach(function(l2) {
        return l2.isBehindGlobe(isBehindGlobe);
      });
    },
    pauseAnimation: function pauseAnimation4(state) {
      if (state.animationFrameRequestId !== null) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      state.pausableLayers.forEach(function(l2) {
        var _l$pauseAnimation;
        return (_l$pauseAnimation = l2.pauseAnimation) === null || _l$pauseAnimation === void 0 ? void 0 : _l$pauseAnimation.call(l2);
      });
      return this;
    },
    resumeAnimation: function resumeAnimation4(state) {
      if (state.animationFrameRequestId === null) {
        this._animationCycle();
      }
      state.pausableLayers.forEach(function(l2) {
        var _l$resumeAnimation;
        return (_l$resumeAnimation = l2.resumeAnimation) === null || _l$resumeAnimation === void 0 ? void 0 : _l$resumeAnimation.call(l2);
      });
      return this;
    },
    _animationCycle: function _animationCycle(state) {
      state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
      state.tweenGroup.update();
    },
    _destructor: function _destructor5(state) {
      this.pauseAnimation();
      state.destructableLayers.forEach(function(l2) {
        return l2._destructor();
      });
    }
  }, linkedGlobeLayerMethods),
  stateInit: function stateInit4() {
    var tweenGroup = new Group2();
    var initProps = {
      tweenGroup
    };
    var layers2 = {
      globeLayer: GlobeLayerKapsule(initProps),
      pointsLayer: PointsLayerKapsule(initProps),
      arcsLayer: ArcsLayerKapsule(initProps),
      hexBinLayer: HexBinLayerKapsule(initProps),
      heatmapsLayer: HeatmapsLayerKapsule(initProps),
      polygonsLayer: PolygonsLayerKapsule(initProps),
      hexedPolygonsLayer: HexedPolygonsLayerKapsule(initProps),
      pathsLayer: PathsLayerKapsule(initProps),
      tilesLayer: TilesLayerKapsule(initProps),
      particlesLayer: ParticlesLayerKapsule(initProps),
      ringsLayer: RingsLayerKapsule(initProps),
      labelsLayer: LabelsLayerKapsule(initProps),
      htmlElementsLayer: HtmlElementsLayerKapsule(initProps),
      objectsLayer: ObjectsLayerKapsule(initProps),
      customLayer: CustomLayerKapsule(initProps)
    };
    return _objectSpread2(_objectSpread2({
      tweenGroup
    }, layers2), {}, {
      layersThatNeedUpdatePov: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("updatePov");
      }),
      layersThatNeedBehindGlobeChecker: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("isBehindGlobe");
      }),
      destructableLayers: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("_destructor");
      }),
      pausableLayers: Object.values(layers2).filter(function(l2) {
        return l2.hasOwnProperty("pauseAnimation");
      })
    });
  },
  init: function init16(threeObj, state, _ref15) {
    var _ref15$animateIn = _ref15.animateIn, animateIn = _ref15$animateIn === void 0 ? true : _ref15$animateIn, _ref15$waitForGlobeRe = _ref15.waitForGlobeReady, waitForGlobeReady = _ref15$waitForGlobeRe === void 0 ? true : _ref15$waitForGlobeRe;
    emptyObject3(threeObj);
    state.scene = threeObj;
    state.scene.visible = false;
    layers.forEach(function(layer) {
      var g2 = new THREE3.Group();
      state.scene.add(g2);
      state[layer](g2);
    });
    var initGlobe = function initGlobe2() {
      if (animateIn) {
        state.scene.scale.set(1e-6, 1e-6, 1e-6);
        state.tweenGroup.add(new Tween({
          k: 1e-6
        }).to({
          k: 1
        }, 600).easing(Easing.Quadratic.Out).onUpdate(function(_ref16) {
          var k2 = _ref16.k;
          return state.scene.scale.set(k2, k2, k2);
        }).start());
        var rotAxis = new THREE3.Vector3(0, 1, 0);
        state.tweenGroup.add(new Tween({
          rot: Math.PI * 2
        }).to({
          rot: 0
        }, 1200).easing(Easing.Quintic.Out).onUpdate(function(_ref17) {
          var rot = _ref17.rot;
          return state.scene.setRotationFromAxisAngle(rotAxis, rot);
        }).start());
      }
      state.scene.visible = true;
      state.onGlobeReady && state.onGlobeReady();
    };
    waitForGlobeReady ? state.globeLayer.onReady(initGlobe) : initGlobe();
    this._animationCycle();
  },
  update: function update17(state) {
  }
});
function fromKapsule(kapsule) {
  var baseClass = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : Object;
  var initKapsuleWithSelf = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
  var Globe3 = function(_baseClass) {
    function Globe4() {
      var _this;
      _classCallCheck6(this, Globe4);
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      _this = _callSuper4(this, Globe4, [].concat(args));
      _this.__kapsuleInstance = _construct(kapsule, [].concat(_toConsumableArray8(initKapsuleWithSelf ? [_this] : []), args));
      return _this;
    }
    _inherits4(Globe4, _baseClass);
    return _createClass6(Globe4);
  }(baseClass);
  Object.keys(kapsule()).forEach(function(m2) {
    return Globe3.prototype[m2] = function() {
      var _this$__kapsuleInstan;
      var returnVal = (_this$__kapsuleInstan = this.__kapsuleInstance)[m2].apply(_this$__kapsuleInstan, arguments);
      return returnVal === this.__kapsuleInstance ? this : returnVal;
    };
  });
  return Globe3;
}
var three = window.THREE ? window.THREE : {
  Group
};
var threeGlobe = fromKapsule(Globe, three.Group, true);

// node_modules/three/examples/jsm/controls/TrackballControls.js
var _changeEvent = { type: "change" };
var _startEvent = { type: "start" };
var _endEvent = { type: "end" };
var _EPS = 1e-6;
var _STATE = { NONE: -1, ROTATE: 0, ZOOM: 1, PAN: 2, TOUCH_ROTATE: 3, TOUCH_ZOOM_PAN: 4 };
var _v23 = new Vector2();
var _mouseChange = new Vector2();
var _objectUp = new Vector3();
var _pan = new Vector3();
var _axis3 = new Vector3();
var _quaternion3 = new Quaternion();
var _eyeDirection = new Vector3();
var _objectUpDirection = new Vector3();
var _objectSidewaysDirection = new Vector3();
var _moveDirection = new Vector3();
var TrackballControls = class extends Controls {
  constructor(object2, domElement = null) {
    super(object2, domElement);
    this.enabled = true;
    this.screen = { left: 0, top: 0, width: 0, height: 0 };
    this.rotateSpeed = 1;
    this.zoomSpeed = 1.2;
    this.panSpeed = 0.3;
    this.noRotate = false;
    this.noZoom = false;
    this.noPan = false;
    this.staticMoving = false;
    this.dynamicDampingFactor = 0.2;
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.keys = [
      "KeyA",
      "KeyS",
      "KeyD"
      /*D*/
    ];
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
    this.state = _STATE.NONE;
    this.keyState = _STATE.NONE;
    this.target = new Vector3();
    this._lastPosition = new Vector3();
    this._lastZoom = 1;
    this._touchZoomDistanceStart = 0;
    this._touchZoomDistanceEnd = 0;
    this._lastAngle = 0;
    this._eye = new Vector3();
    this._movePrev = new Vector2();
    this._moveCurr = new Vector2();
    this._lastAxis = new Vector3();
    this._zoomStart = new Vector2();
    this._zoomEnd = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._pointers = [];
    this._pointerPositions = {};
    this._onPointerMove = onPointerMove.bind(this);
    this._onPointerDown = onPointerDown.bind(this);
    this._onPointerUp = onPointerUp.bind(this);
    this._onPointerCancel = onPointerCancel.bind(this);
    this._onContextMenu = onContextMenu.bind(this);
    this._onMouseWheel = onMouseWheel.bind(this);
    this._onKeyDown = onKeyDown.bind(this);
    this._onKeyUp = onKeyUp.bind(this);
    this._onTouchStart = onTouchStart.bind(this);
    this._onTouchMove = onTouchMove.bind(this);
    this._onTouchEnd = onTouchEnd.bind(this);
    this._onMouseDown = onMouseDown.bind(this);
    this._onMouseMove = onMouseMove.bind(this);
    this._onMouseUp = onMouseUp.bind(this);
    this._target0 = this.target.clone();
    this._position0 = this.object.position.clone();
    this._up0 = this.object.up.clone();
    this._zoom0 = this.object.zoom;
    if (domElement !== null) {
      this.connect();
      this.handleResize();
    }
    this.update();
  }
  connect() {
    window.addEventListener("keydown", this._onKeyDown);
    window.addEventListener("keyup", this._onKeyUp);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointercancel", this._onPointerCancel);
    this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    window.removeEventListener("keydown", this._onKeyDown);
    window.removeEventListener("keyup", this._onKeyUp);
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerCancel);
    this.domElement.removeEventListener("wheel", this._onMouseWheel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
    this.domElement.style.touchAction = "auto";
  }
  dispose() {
    this.disconnect();
  }
  handleResize() {
    const box = this.domElement.getBoundingClientRect();
    const d2 = this.domElement.ownerDocument.documentElement;
    this.screen.left = box.left + window.pageXOffset - d2.clientLeft;
    this.screen.top = box.top + window.pageYOffset - d2.clientTop;
    this.screen.width = box.width;
    this.screen.height = box.height;
  }
  update() {
    this._eye.subVectors(this.object.position, this.target);
    if (!this.noRotate) {
      this._rotateCamera();
    }
    if (!this.noZoom) {
      this._zoomCamera();
    }
    if (!this.noPan) {
      this._panCamera();
    }
    this.object.position.addVectors(this.target, this._eye);
    if (this.object.isPerspectiveCamera) {
      this._checkDistances();
      this.object.lookAt(this.target);
      if (this._lastPosition.distanceToSquared(this.object.position) > _EPS) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
      }
    } else if (this.object.isOrthographicCamera) {
      this.object.lookAt(this.target);
      if (this._lastPosition.distanceToSquared(this.object.position) > _EPS || this._lastZoom !== this.object.zoom) {
        this.dispatchEvent(_changeEvent);
        this._lastPosition.copy(this.object.position);
        this._lastZoom = this.object.zoom;
      }
    } else {
      console.warn("THREE.TrackballControls: Unsupported camera type.");
    }
  }
  reset() {
    this.state = _STATE.NONE;
    this.keyState = _STATE.NONE;
    this.target.copy(this._target0);
    this.object.position.copy(this._position0);
    this.object.up.copy(this._up0);
    this.object.zoom = this._zoom0;
    this.object.updateProjectionMatrix();
    this._eye.subVectors(this.object.position, this.target);
    this.object.lookAt(this.target);
    this.dispatchEvent(_changeEvent);
    this._lastPosition.copy(this.object.position);
    this._lastZoom = this.object.zoom;
  }
  _panCamera() {
    _mouseChange.copy(this._panEnd).sub(this._panStart);
    if (_mouseChange.lengthSq()) {
      if (this.object.isOrthographicCamera) {
        const scale_x = (this.object.right - this.object.left) / this.object.zoom / this.domElement.clientWidth;
        const scale_y = (this.object.top - this.object.bottom) / this.object.zoom / this.domElement.clientWidth;
        _mouseChange.x *= scale_x;
        _mouseChange.y *= scale_y;
      }
      _mouseChange.multiplyScalar(this._eye.length() * this.panSpeed);
      _pan.copy(this._eye).cross(this.object.up).setLength(_mouseChange.x);
      _pan.add(_objectUp.copy(this.object.up).setLength(_mouseChange.y));
      this.object.position.add(_pan);
      this.target.add(_pan);
      if (this.staticMoving) {
        this._panStart.copy(this._panEnd);
      } else {
        this._panStart.add(_mouseChange.subVectors(this._panEnd, this._panStart).multiplyScalar(this.dynamicDampingFactor));
      }
    }
  }
  _rotateCamera() {
    _moveDirection.set(this._moveCurr.x - this._movePrev.x, this._moveCurr.y - this._movePrev.y, 0);
    let angle2 = _moveDirection.length();
    if (angle2) {
      this._eye.copy(this.object.position).sub(this.target);
      _eyeDirection.copy(this._eye).normalize();
      _objectUpDirection.copy(this.object.up).normalize();
      _objectSidewaysDirection.crossVectors(_objectUpDirection, _eyeDirection).normalize();
      _objectUpDirection.setLength(this._moveCurr.y - this._movePrev.y);
      _objectSidewaysDirection.setLength(this._moveCurr.x - this._movePrev.x);
      _moveDirection.copy(_objectUpDirection.add(_objectSidewaysDirection));
      _axis3.crossVectors(_moveDirection, this._eye).normalize();
      angle2 *= this.rotateSpeed;
      _quaternion3.setFromAxisAngle(_axis3, angle2);
      this._eye.applyQuaternion(_quaternion3);
      this.object.up.applyQuaternion(_quaternion3);
      this._lastAxis.copy(_axis3);
      this._lastAngle = angle2;
    } else if (!this.staticMoving && this._lastAngle) {
      this._lastAngle *= Math.sqrt(1 - this.dynamicDampingFactor);
      this._eye.copy(this.object.position).sub(this.target);
      _quaternion3.setFromAxisAngle(this._lastAxis, this._lastAngle);
      this._eye.applyQuaternion(_quaternion3);
      this.object.up.applyQuaternion(_quaternion3);
    }
    this._movePrev.copy(this._moveCurr);
  }
  _zoomCamera() {
    let factor;
    if (this.state === _STATE.TOUCH_ZOOM_PAN) {
      factor = this._touchZoomDistanceStart / this._touchZoomDistanceEnd;
      this._touchZoomDistanceStart = this._touchZoomDistanceEnd;
      if (this.object.isPerspectiveCamera) {
        this._eye.multiplyScalar(factor);
      } else if (this.object.isOrthographicCamera) {
        this.object.zoom = MathUtils.clamp(this.object.zoom / factor, this.minZoom, this.maxZoom);
        if (this._lastZoom !== this.object.zoom) {
          this.object.updateProjectionMatrix();
        }
      } else {
        console.warn("THREE.TrackballControls: Unsupported camera type");
      }
    } else {
      factor = 1 + (this._zoomEnd.y - this._zoomStart.y) * this.zoomSpeed;
      if (factor !== 1 && factor > 0) {
        if (this.object.isPerspectiveCamera) {
          this._eye.multiplyScalar(factor);
        } else if (this.object.isOrthographicCamera) {
          this.object.zoom = MathUtils.clamp(this.object.zoom / factor, this.minZoom, this.maxZoom);
          if (this._lastZoom !== this.object.zoom) {
            this.object.updateProjectionMatrix();
          }
        } else {
          console.warn("THREE.TrackballControls: Unsupported camera type");
        }
      }
      if (this.staticMoving) {
        this._zoomStart.copy(this._zoomEnd);
      } else {
        this._zoomStart.y += (this._zoomEnd.y - this._zoomStart.y) * this.dynamicDampingFactor;
      }
    }
  }
  _getMouseOnScreen(pageX, pageY) {
    _v23.set(
      (pageX - this.screen.left) / this.screen.width,
      (pageY - this.screen.top) / this.screen.height
    );
    return _v23;
  }
  _getMouseOnCircle(pageX, pageY) {
    _v23.set(
      (pageX - this.screen.width * 0.5 - this.screen.left) / (this.screen.width * 0.5),
      (this.screen.height + 2 * (this.screen.top - pageY)) / this.screen.width
      // screen.width intentional
    );
    return _v23;
  }
  _addPointer(event) {
    this._pointers.push(event);
  }
  _removePointer(event) {
    delete this._pointerPositions[event.pointerId];
    for (let i2 = 0; i2 < this._pointers.length; i2++) {
      if (this._pointers[i2].pointerId == event.pointerId) {
        this._pointers.splice(i2, 1);
        return;
      }
    }
  }
  _trackPointer(event) {
    let position = this._pointerPositions[event.pointerId];
    if (position === void 0) {
      position = new Vector2();
      this._pointerPositions[event.pointerId] = position;
    }
    position.set(event.pageX, event.pageY);
  }
  _getSecondPointerPosition(event) {
    const pointer = event.pointerId === this._pointers[0].pointerId ? this._pointers[1] : this._pointers[0];
    return this._pointerPositions[pointer.pointerId];
  }
  _checkDistances() {
    if (!this.noZoom || !this.noPan) {
      if (this._eye.lengthSq() > this.maxDistance * this.maxDistance) {
        this.object.position.addVectors(this.target, this._eye.setLength(this.maxDistance));
        this._zoomStart.copy(this._zoomEnd);
      }
      if (this._eye.lengthSq() < this.minDistance * this.minDistance) {
        this.object.position.addVectors(this.target, this._eye.setLength(this.minDistance));
        this._zoomStart.copy(this._zoomEnd);
      }
    }
  }
};
function onPointerDown(event) {
  if (this.enabled === false) return;
  if (this._pointers.length === 0) {
    this.domElement.setPointerCapture(event.pointerId);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
  }
  this._addPointer(event);
  if (event.pointerType === "touch") {
    this._onTouchStart(event);
  } else {
    this._onMouseDown(event);
  }
}
function onPointerMove(event) {
  if (this.enabled === false) return;
  if (event.pointerType === "touch") {
    this._onTouchMove(event);
  } else {
    this._onMouseMove(event);
  }
}
function onPointerUp(event) {
  if (this.enabled === false) return;
  if (event.pointerType === "touch") {
    this._onTouchEnd(event);
  } else {
    this._onMouseUp();
  }
  this._removePointer(event);
  if (this._pointers.length === 0) {
    this.domElement.releasePointerCapture(event.pointerId);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
  }
}
function onPointerCancel(event) {
  this._removePointer(event);
}
function onKeyUp() {
  if (this.enabled === false) return;
  this.keyState = _STATE.NONE;
  window.addEventListener("keydown", this._onKeyDown);
}
function onKeyDown(event) {
  if (this.enabled === false) return;
  window.removeEventListener("keydown", this._onKeyDown);
  if (this.keyState !== _STATE.NONE) {
    return;
  } else if (event.code === this.keys[_STATE.ROTATE] && !this.noRotate) {
    this.keyState = _STATE.ROTATE;
  } else if (event.code === this.keys[_STATE.ZOOM] && !this.noZoom) {
    this.keyState = _STATE.ZOOM;
  } else if (event.code === this.keys[_STATE.PAN] && !this.noPan) {
    this.keyState = _STATE.PAN;
  }
}
function onMouseDown(event) {
  if (this.state === _STATE.NONE) {
    switch (event.button) {
      case this.mouseButtons.LEFT:
        this.state = _STATE.ROTATE;
        break;
      case this.mouseButtons.MIDDLE:
        this.state = _STATE.ZOOM;
        break;
      case this.mouseButtons.RIGHT:
        this.state = _STATE.PAN;
        break;
    }
  }
  const state = this.keyState !== _STATE.NONE ? this.keyState : this.state;
  if (state === _STATE.ROTATE && !this.noRotate) {
    this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
    this._movePrev.copy(this._moveCurr);
  } else if (state === _STATE.ZOOM && !this.noZoom) {
    this._zoomStart.copy(this._getMouseOnScreen(event.pageX, event.pageY));
    this._zoomEnd.copy(this._zoomStart);
  } else if (state === _STATE.PAN && !this.noPan) {
    this._panStart.copy(this._getMouseOnScreen(event.pageX, event.pageY));
    this._panEnd.copy(this._panStart);
  }
  this.dispatchEvent(_startEvent);
}
function onMouseMove(event) {
  const state = this.keyState !== _STATE.NONE ? this.keyState : this.state;
  if (state === _STATE.ROTATE && !this.noRotate) {
    this._movePrev.copy(this._moveCurr);
    this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
  } else if (state === _STATE.ZOOM && !this.noZoom) {
    this._zoomEnd.copy(this._getMouseOnScreen(event.pageX, event.pageY));
  } else if (state === _STATE.PAN && !this.noPan) {
    this._panEnd.copy(this._getMouseOnScreen(event.pageX, event.pageY));
  }
}
function onMouseUp() {
  this.state = _STATE.NONE;
  this.dispatchEvent(_endEvent);
}
function onMouseWheel(event) {
  if (this.enabled === false) return;
  if (this.noZoom === true) return;
  event.preventDefault();
  switch (event.deltaMode) {
    case 2:
      this._zoomStart.y -= event.deltaY * 0.025;
      break;
    case 1:
      this._zoomStart.y -= event.deltaY * 0.01;
      break;
    default:
      this._zoomStart.y -= event.deltaY * 25e-5;
      break;
  }
  this.dispatchEvent(_startEvent);
  this.dispatchEvent(_endEvent);
}
function onContextMenu(event) {
  if (this.enabled === false) return;
  event.preventDefault();
}
function onTouchStart(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      this.state = _STATE.TOUCH_ROTATE;
      this._moveCurr.copy(this._getMouseOnCircle(this._pointers[0].pageX, this._pointers[0].pageY));
      this._movePrev.copy(this._moveCurr);
      break;
    default:
      this.state = _STATE.TOUCH_ZOOM_PAN;
      const dx = this._pointers[0].pageX - this._pointers[1].pageX;
      const dy = this._pointers[0].pageY - this._pointers[1].pageY;
      this._touchZoomDistanceEnd = this._touchZoomDistanceStart = Math.sqrt(dx * dx + dy * dy);
      const x2 = (this._pointers[0].pageX + this._pointers[1].pageX) / 2;
      const y2 = (this._pointers[0].pageY + this._pointers[1].pageY) / 2;
      this._panStart.copy(this._getMouseOnScreen(x2, y2));
      this._panEnd.copy(this._panStart);
      break;
  }
  this.dispatchEvent(_startEvent);
}
function onTouchMove(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      this._movePrev.copy(this._moveCurr);
      this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
      break;
    default:
      const position = this._getSecondPointerPosition(event);
      const dx = event.pageX - position.x;
      const dy = event.pageY - position.y;
      this._touchZoomDistanceEnd = Math.sqrt(dx * dx + dy * dy);
      const x2 = (event.pageX + position.x) / 2;
      const y2 = (event.pageY + position.y) / 2;
      this._panEnd.copy(this._getMouseOnScreen(x2, y2));
      break;
  }
}
function onTouchEnd(event) {
  switch (this._pointers.length) {
    case 0:
      this.state = _STATE.NONE;
      break;
    case 1:
      this.state = _STATE.TOUCH_ROTATE;
      this._moveCurr.copy(this._getMouseOnCircle(event.pageX, event.pageY));
      this._movePrev.copy(this._moveCurr);
      break;
    case 2:
      this.state = _STATE.TOUCH_ZOOM_PAN;
      for (let i2 = 0; i2 < this._pointers.length; i2++) {
        if (this._pointers[i2].pointerId !== event.pointerId) {
          const position = this._pointerPositions[this._pointers[i2].pointerId];
          this._moveCurr.copy(this._getMouseOnCircle(position.x, position.y));
          this._movePrev.copy(this._moveCurr);
          break;
        }
      }
      break;
  }
  this.dispatchEvent(_endEvent);
}

// node_modules/three/examples/jsm/controls/OrbitControls.js
var _changeEvent2 = { type: "change" };
var _startEvent2 = { type: "start" };
var _endEvent2 = { type: "end" };
var _ray4 = new Ray();
var _plane2 = new Plane();
var _TILT_LIMIT = Math.cos(70 * MathUtils.DEG2RAD);
var _v = new Vector3();
var _twoPI = 2 * Math.PI;
var _STATE2 = {
  NONE: -1,
  ROTATE: 0,
  DOLLY: 1,
  PAN: 2,
  TOUCH_ROTATE: 3,
  TOUCH_PAN: 4,
  TOUCH_DOLLY_PAN: 5,
  TOUCH_DOLLY_ROTATE: 6
};
var _EPS2 = 1e-6;
var OrbitControls = class extends Controls {
  constructor(object2, domElement = null) {
    super(object2, domElement);
    this.state = _STATE2.NONE;
    this.enabled = true;
    this.target = new Vector3();
    this.cursor = new Vector3();
    this.minDistance = 0;
    this.maxDistance = Infinity;
    this.minZoom = 0;
    this.maxZoom = Infinity;
    this.minTargetRadius = 0;
    this.maxTargetRadius = Infinity;
    this.minPolarAngle = 0;
    this.maxPolarAngle = Math.PI;
    this.minAzimuthAngle = -Infinity;
    this.maxAzimuthAngle = Infinity;
    this.enableDamping = false;
    this.dampingFactor = 0.05;
    this.enableZoom = true;
    this.zoomSpeed = 1;
    this.enableRotate = true;
    this.rotateSpeed = 1;
    this.enablePan = true;
    this.panSpeed = 1;
    this.screenSpacePanning = true;
    this.keyPanSpeed = 7;
    this.zoomToCursor = false;
    this.autoRotate = false;
    this.autoRotateSpeed = 2;
    this.keys = { LEFT: "ArrowLeft", UP: "ArrowUp", RIGHT: "ArrowRight", BOTTOM: "ArrowDown" };
    this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };
    this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };
    this.target0 = this.target.clone();
    this.position0 = this.object.position.clone();
    this.zoom0 = this.object.zoom;
    this._domElementKeyEvents = null;
    this._lastPosition = new Vector3();
    this._lastQuaternion = new Quaternion();
    this._lastTargetPosition = new Vector3();
    this._quat = new Quaternion().setFromUnitVectors(object2.up, new Vector3(0, 1, 0));
    this._quatInverse = this._quat.clone().invert();
    this._spherical = new Spherical();
    this._sphericalDelta = new Spherical();
    this._scale = 1;
    this._panOffset = new Vector3();
    this._rotateStart = new Vector2();
    this._rotateEnd = new Vector2();
    this._rotateDelta = new Vector2();
    this._panStart = new Vector2();
    this._panEnd = new Vector2();
    this._panDelta = new Vector2();
    this._dollyStart = new Vector2();
    this._dollyEnd = new Vector2();
    this._dollyDelta = new Vector2();
    this._dollyDirection = new Vector3();
    this._mouse = new Vector2();
    this._performCursorZoom = false;
    this._pointers = [];
    this._pointerPositions = {};
    this._controlActive = false;
    this._onPointerMove = onPointerMove2.bind(this);
    this._onPointerDown = onPointerDown2.bind(this);
    this._onPointerUp = onPointerUp2.bind(this);
    this._onContextMenu = onContextMenu2.bind(this);
    this._onMouseWheel = onMouseWheel2.bind(this);
    this._onKeyDown = onKeyDown2.bind(this);
    this._onTouchStart = onTouchStart2.bind(this);
    this._onTouchMove = onTouchMove2.bind(this);
    this._onMouseDown = onMouseDown2.bind(this);
    this._onMouseMove = onMouseMove2.bind(this);
    this._interceptControlDown = interceptControlDown.bind(this);
    this._interceptControlUp = interceptControlUp.bind(this);
    if (this.domElement !== null) {
      this.connect();
    }
    this.update();
  }
  connect() {
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointercancel", this._onPointerUp);
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
    this.domElement.addEventListener("wheel", this._onMouseWheel, { passive: false });
    const document2 = this.domElement.getRootNode();
    document2.addEventListener("keydown", this._interceptControlDown, { passive: true, capture: true });
    this.domElement.style.touchAction = "none";
  }
  disconnect() {
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerUp);
    this.domElement.removeEventListener("wheel", this._onMouseWheel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
    this.stopListenToKeyEvents();
    const document2 = this.domElement.getRootNode();
    document2.removeEventListener("keydown", this._interceptControlDown, { capture: true });
    this.domElement.style.touchAction = "auto";
  }
  dispose() {
    this.disconnect();
  }
  getPolarAngle() {
    return this._spherical.phi;
  }
  getAzimuthalAngle() {
    return this._spherical.theta;
  }
  getDistance() {
    return this.object.position.distanceTo(this.target);
  }
  listenToKeyEvents(domElement) {
    domElement.addEventListener("keydown", this._onKeyDown);
    this._domElementKeyEvents = domElement;
  }
  stopListenToKeyEvents() {
    if (this._domElementKeyEvents !== null) {
      this._domElementKeyEvents.removeEventListener("keydown", this._onKeyDown);
      this._domElementKeyEvents = null;
    }
  }
  saveState() {
    this.target0.copy(this.target);
    this.position0.copy(this.object.position);
    this.zoom0 = this.object.zoom;
  }
  reset() {
    this.target.copy(this.target0);
    this.object.position.copy(this.position0);
    this.object.zoom = this.zoom0;
    this.object.updateProjectionMatrix();
    this.dispatchEvent(_changeEvent2);
    this.update();
    this.state = _STATE2.NONE;
  }
  update(deltaTime = null) {
    const position = this.object.position;
    _v.copy(position).sub(this.target);
    _v.applyQuaternion(this._quat);
    this._spherical.setFromVector3(_v);
    if (this.autoRotate && this.state === _STATE2.NONE) {
      this._rotateLeft(this._getAutoRotationAngle(deltaTime));
    }
    if (this.enableDamping) {
      this._spherical.theta += this._sphericalDelta.theta * this.dampingFactor;
      this._spherical.phi += this._sphericalDelta.phi * this.dampingFactor;
    } else {
      this._spherical.theta += this._sphericalDelta.theta;
      this._spherical.phi += this._sphericalDelta.phi;
    }
    let min4 = this.minAzimuthAngle;
    let max4 = this.maxAzimuthAngle;
    if (isFinite(min4) && isFinite(max4)) {
      if (min4 < -Math.PI) min4 += _twoPI;
      else if (min4 > Math.PI) min4 -= _twoPI;
      if (max4 < -Math.PI) max4 += _twoPI;
      else if (max4 > Math.PI) max4 -= _twoPI;
      if (min4 <= max4) {
        this._spherical.theta = Math.max(min4, Math.min(max4, this._spherical.theta));
      } else {
        this._spherical.theta = this._spherical.theta > (min4 + max4) / 2 ? Math.max(min4, this._spherical.theta) : Math.min(max4, this._spherical.theta);
      }
    }
    this._spherical.phi = Math.max(this.minPolarAngle, Math.min(this.maxPolarAngle, this._spherical.phi));
    this._spherical.makeSafe();
    if (this.enableDamping === true) {
      this.target.addScaledVector(this._panOffset, this.dampingFactor);
    } else {
      this.target.add(this._panOffset);
    }
    this.target.sub(this.cursor);
    this.target.clampLength(this.minTargetRadius, this.maxTargetRadius);
    this.target.add(this.cursor);
    let zoomChanged = false;
    if (this.zoomToCursor && this._performCursorZoom || this.object.isOrthographicCamera) {
      this._spherical.radius = this._clampDistance(this._spherical.radius);
    } else {
      const prevRadius = this._spherical.radius;
      this._spherical.radius = this._clampDistance(this._spherical.radius * this._scale);
      zoomChanged = prevRadius != this._spherical.radius;
    }
    _v.setFromSpherical(this._spherical);
    _v.applyQuaternion(this._quatInverse);
    position.copy(this.target).add(_v);
    this.object.lookAt(this.target);
    if (this.enableDamping === true) {
      this._sphericalDelta.theta *= 1 - this.dampingFactor;
      this._sphericalDelta.phi *= 1 - this.dampingFactor;
      this._panOffset.multiplyScalar(1 - this.dampingFactor);
    } else {
      this._sphericalDelta.set(0, 0, 0);
      this._panOffset.set(0, 0, 0);
    }
    if (this.zoomToCursor && this._performCursorZoom) {
      let newRadius = null;
      if (this.object.isPerspectiveCamera) {
        const prevRadius = _v.length();
        newRadius = this._clampDistance(prevRadius * this._scale);
        const radiusDelta = prevRadius - newRadius;
        this.object.position.addScaledVector(this._dollyDirection, radiusDelta);
        this.object.updateMatrixWorld();
        zoomChanged = !!radiusDelta;
      } else if (this.object.isOrthographicCamera) {
        const mouseBefore = new Vector3(this._mouse.x, this._mouse.y, 0);
        mouseBefore.unproject(this.object);
        const prevZoom = this.object.zoom;
        this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
        this.object.updateProjectionMatrix();
        zoomChanged = prevZoom !== this.object.zoom;
        const mouseAfter = new Vector3(this._mouse.x, this._mouse.y, 0);
        mouseAfter.unproject(this.object);
        this.object.position.sub(mouseAfter).add(mouseBefore);
        this.object.updateMatrixWorld();
        newRadius = _v.length();
      } else {
        console.warn("WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.");
        this.zoomToCursor = false;
      }
      if (newRadius !== null) {
        if (this.screenSpacePanning) {
          this.target.set(0, 0, -1).transformDirection(this.object.matrix).multiplyScalar(newRadius).add(this.object.position);
        } else {
          _ray4.origin.copy(this.object.position);
          _ray4.direction.set(0, 0, -1).transformDirection(this.object.matrix);
          if (Math.abs(this.object.up.dot(_ray4.direction)) < _TILT_LIMIT) {
            this.object.lookAt(this.target);
          } else {
            _plane2.setFromNormalAndCoplanarPoint(this.object.up, this.target);
            _ray4.intersectPlane(_plane2, this.target);
          }
        }
      }
    } else if (this.object.isOrthographicCamera) {
      const prevZoom = this.object.zoom;
      this.object.zoom = Math.max(this.minZoom, Math.min(this.maxZoom, this.object.zoom / this._scale));
      if (prevZoom !== this.object.zoom) {
        this.object.updateProjectionMatrix();
        zoomChanged = true;
      }
    }
    this._scale = 1;
    this._performCursorZoom = false;
    if (zoomChanged || this._lastPosition.distanceToSquared(this.object.position) > _EPS2 || 8 * (1 - this._lastQuaternion.dot(this.object.quaternion)) > _EPS2 || this._lastTargetPosition.distanceToSquared(this.target) > _EPS2) {
      this.dispatchEvent(_changeEvent2);
      this._lastPosition.copy(this.object.position);
      this._lastQuaternion.copy(this.object.quaternion);
      this._lastTargetPosition.copy(this.target);
      return true;
    }
    return false;
  }
  _getAutoRotationAngle(deltaTime) {
    if (deltaTime !== null) {
      return _twoPI / 60 * this.autoRotateSpeed * deltaTime;
    } else {
      return _twoPI / 60 / 60 * this.autoRotateSpeed;
    }
  }
  _getZoomScale(delta) {
    const normalizedDelta = Math.abs(delta * 0.01);
    return Math.pow(0.95, this.zoomSpeed * normalizedDelta);
  }
  _rotateLeft(angle2) {
    this._sphericalDelta.theta -= angle2;
  }
  _rotateUp(angle2) {
    this._sphericalDelta.phi -= angle2;
  }
  _panLeft(distance3, objectMatrix) {
    _v.setFromMatrixColumn(objectMatrix, 0);
    _v.multiplyScalar(-distance3);
    this._panOffset.add(_v);
  }
  _panUp(distance3, objectMatrix) {
    if (this.screenSpacePanning === true) {
      _v.setFromMatrixColumn(objectMatrix, 1);
    } else {
      _v.setFromMatrixColumn(objectMatrix, 0);
      _v.crossVectors(this.object.up, _v);
    }
    _v.multiplyScalar(distance3);
    this._panOffset.add(_v);
  }
  // deltaX and deltaY are in pixels; right and down are positive
  _pan(deltaX, deltaY) {
    const element2 = this.domElement;
    if (this.object.isPerspectiveCamera) {
      const position = this.object.position;
      _v.copy(position).sub(this.target);
      let targetDistance = _v.length();
      targetDistance *= Math.tan(this.object.fov / 2 * Math.PI / 180);
      this._panLeft(2 * deltaX * targetDistance / element2.clientHeight, this.object.matrix);
      this._panUp(2 * deltaY * targetDistance / element2.clientHeight, this.object.matrix);
    } else if (this.object.isOrthographicCamera) {
      this._panLeft(deltaX * (this.object.right - this.object.left) / this.object.zoom / element2.clientWidth, this.object.matrix);
      this._panUp(deltaY * (this.object.top - this.object.bottom) / this.object.zoom / element2.clientHeight, this.object.matrix);
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.");
      this.enablePan = false;
    }
  }
  _dollyOut(dollyScale) {
    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
      this._scale /= dollyScale;
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
      this.enableZoom = false;
    }
  }
  _dollyIn(dollyScale) {
    if (this.object.isPerspectiveCamera || this.object.isOrthographicCamera) {
      this._scale *= dollyScale;
    } else {
      console.warn("WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.");
      this.enableZoom = false;
    }
  }
  _updateZoomParameters(x2, y2) {
    if (!this.zoomToCursor) {
      return;
    }
    this._performCursorZoom = true;
    const rect = this.domElement.getBoundingClientRect();
    const dx = x2 - rect.left;
    const dy = y2 - rect.top;
    const w4 = rect.width;
    const h2 = rect.height;
    this._mouse.x = dx / w4 * 2 - 1;
    this._mouse.y = -(dy / h2) * 2 + 1;
    this._dollyDirection.set(this._mouse.x, this._mouse.y, 1).unproject(this.object).sub(this.object.position).normalize();
  }
  _clampDistance(dist2) {
    return Math.max(this.minDistance, Math.min(this.maxDistance, dist2));
  }
  //
  // event callbacks - update the object state
  //
  _handleMouseDownRotate(event) {
    this._rotateStart.set(event.clientX, event.clientY);
  }
  _handleMouseDownDolly(event) {
    this._updateZoomParameters(event.clientX, event.clientX);
    this._dollyStart.set(event.clientX, event.clientY);
  }
  _handleMouseDownPan(event) {
    this._panStart.set(event.clientX, event.clientY);
  }
  _handleMouseMoveRotate(event) {
    this._rotateEnd.set(event.clientX, event.clientY);
    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
    const element2 = this.domElement;
    this._rotateLeft(_twoPI * this._rotateDelta.x / element2.clientHeight);
    this._rotateUp(_twoPI * this._rotateDelta.y / element2.clientHeight);
    this._rotateStart.copy(this._rotateEnd);
    this.update();
  }
  _handleMouseMoveDolly(event) {
    this._dollyEnd.set(event.clientX, event.clientY);
    this._dollyDelta.subVectors(this._dollyEnd, this._dollyStart);
    if (this._dollyDelta.y > 0) {
      this._dollyOut(this._getZoomScale(this._dollyDelta.y));
    } else if (this._dollyDelta.y < 0) {
      this._dollyIn(this._getZoomScale(this._dollyDelta.y));
    }
    this._dollyStart.copy(this._dollyEnd);
    this.update();
  }
  _handleMouseMovePan(event) {
    this._panEnd.set(event.clientX, event.clientY);
    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
    this._pan(this._panDelta.x, this._panDelta.y);
    this._panStart.copy(this._panEnd);
    this.update();
  }
  _handleMouseWheel(event) {
    this._updateZoomParameters(event.clientX, event.clientY);
    if (event.deltaY < 0) {
      this._dollyIn(this._getZoomScale(event.deltaY));
    } else if (event.deltaY > 0) {
      this._dollyOut(this._getZoomScale(event.deltaY));
    }
    this.update();
  }
  _handleKeyDown(event) {
    let needsUpdate = false;
    switch (event.code) {
      case this.keys.UP:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateUp(_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(0, this.keyPanSpeed);
        }
        needsUpdate = true;
        break;
      case this.keys.BOTTOM:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateUp(-_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(0, -this.keyPanSpeed);
        }
        needsUpdate = true;
        break;
      case this.keys.LEFT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateLeft(_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(this.keyPanSpeed, 0);
        }
        needsUpdate = true;
        break;
      case this.keys.RIGHT:
        if (event.ctrlKey || event.metaKey || event.shiftKey) {
          this._rotateLeft(-_twoPI * this.rotateSpeed / this.domElement.clientHeight);
        } else {
          this._pan(-this.keyPanSpeed, 0);
        }
        needsUpdate = true;
        break;
    }
    if (needsUpdate) {
      event.preventDefault();
      this.update();
    }
  }
  _handleTouchStartRotate(event) {
    if (this._pointers.length === 1) {
      this._rotateStart.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._rotateStart.set(x2, y2);
    }
  }
  _handleTouchStartPan(event) {
    if (this._pointers.length === 1) {
      this._panStart.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._panStart.set(x2, y2);
    }
  }
  _handleTouchStartDolly(event) {
    const position = this._getSecondPointerPosition(event);
    const dx = event.pageX - position.x;
    const dy = event.pageY - position.y;
    const distance3 = Math.sqrt(dx * dx + dy * dy);
    this._dollyStart.set(0, distance3);
  }
  _handleTouchStartDollyPan(event) {
    if (this.enableZoom) this._handleTouchStartDolly(event);
    if (this.enablePan) this._handleTouchStartPan(event);
  }
  _handleTouchStartDollyRotate(event) {
    if (this.enableZoom) this._handleTouchStartDolly(event);
    if (this.enableRotate) this._handleTouchStartRotate(event);
  }
  _handleTouchMoveRotate(event) {
    if (this._pointers.length == 1) {
      this._rotateEnd.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._rotateEnd.set(x2, y2);
    }
    this._rotateDelta.subVectors(this._rotateEnd, this._rotateStart).multiplyScalar(this.rotateSpeed);
    const element2 = this.domElement;
    this._rotateLeft(_twoPI * this._rotateDelta.x / element2.clientHeight);
    this._rotateUp(_twoPI * this._rotateDelta.y / element2.clientHeight);
    this._rotateStart.copy(this._rotateEnd);
  }
  _handleTouchMovePan(event) {
    if (this._pointers.length === 1) {
      this._panEnd.set(event.pageX, event.pageY);
    } else {
      const position = this._getSecondPointerPosition(event);
      const x2 = 0.5 * (event.pageX + position.x);
      const y2 = 0.5 * (event.pageY + position.y);
      this._panEnd.set(x2, y2);
    }
    this._panDelta.subVectors(this._panEnd, this._panStart).multiplyScalar(this.panSpeed);
    this._pan(this._panDelta.x, this._panDelta.y);
    this._panStart.copy(this._panEnd);
  }
  _handleTouchMoveDolly(event) {
    const position = this._getSecondPointerPosition(event);
    const dx = event.pageX - position.x;
    const dy = event.pageY - position.y;
    const distance3 = Math.sqrt(dx * dx + dy * dy);
    this._dollyEnd.set(0, distance3);
    this._dollyDelta.set(0, Math.pow(this._dollyEnd.y / this._dollyStart.y, this.zoomSpeed));
    this._dollyOut(this._dollyDelta.y);
    this._dollyStart.copy(this._dollyEnd);
    const centerX = (event.pageX + position.x) * 0.5;
    const centerY = (event.pageY + position.y) * 0.5;
    this._updateZoomParameters(centerX, centerY);
  }
  _handleTouchMoveDollyPan(event) {
    if (this.enableZoom) this._handleTouchMoveDolly(event);
    if (this.enablePan) this._handleTouchMovePan(event);
  }
  _handleTouchMoveDollyRotate(event) {
    if (this.enableZoom) this._handleTouchMoveDolly(event);
    if (this.enableRotate) this._handleTouchMoveRotate(event);
  }
  // pointers
  _addPointer(event) {
    this._pointers.push(event.pointerId);
  }
  _removePointer(event) {
    delete this._pointerPositions[event.pointerId];
    for (let i2 = 0; i2 < this._pointers.length; i2++) {
      if (this._pointers[i2] == event.pointerId) {
        this._pointers.splice(i2, 1);
        return;
      }
    }
  }
  _isTrackingPointer(event) {
    for (let i2 = 0; i2 < this._pointers.length; i2++) {
      if (this._pointers[i2] == event.pointerId) return true;
    }
    return false;
  }
  _trackPointer(event) {
    let position = this._pointerPositions[event.pointerId];
    if (position === void 0) {
      position = new Vector2();
      this._pointerPositions[event.pointerId] = position;
    }
    position.set(event.pageX, event.pageY);
  }
  _getSecondPointerPosition(event) {
    const pointerId = event.pointerId === this._pointers[0] ? this._pointers[1] : this._pointers[0];
    return this._pointerPositions[pointerId];
  }
  //
  _customWheelEvent(event) {
    const mode2 = event.deltaMode;
    const newEvent = {
      clientX: event.clientX,
      clientY: event.clientY,
      deltaY: event.deltaY
    };
    switch (mode2) {
      case 1:
        newEvent.deltaY *= 16;
        break;
      case 2:
        newEvent.deltaY *= 100;
        break;
    }
    if (event.ctrlKey && !this._controlActive) {
      newEvent.deltaY *= 10;
    }
    return newEvent;
  }
};
function onPointerDown2(event) {
  if (this.enabled === false) return;
  if (this._pointers.length === 0) {
    this.domElement.setPointerCapture(event.pointerId);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
  }
  if (this._isTrackingPointer(event)) return;
  this._addPointer(event);
  if (event.pointerType === "touch") {
    this._onTouchStart(event);
  } else {
    this._onMouseDown(event);
  }
}
function onPointerMove2(event) {
  if (this.enabled === false) return;
  if (event.pointerType === "touch") {
    this._onTouchMove(event);
  } else {
    this._onMouseMove(event);
  }
}
function onPointerUp2(event) {
  this._removePointer(event);
  switch (this._pointers.length) {
    case 0:
      this.domElement.releasePointerCapture(event.pointerId);
      this.domElement.removeEventListener("pointermove", this._onPointerMove);
      this.domElement.removeEventListener("pointerup", this._onPointerUp);
      this.dispatchEvent(_endEvent2);
      this.state = _STATE2.NONE;
      break;
    case 1:
      const pointerId = this._pointers[0];
      const position = this._pointerPositions[pointerId];
      this._onTouchStart({ pointerId, pageX: position.x, pageY: position.y });
      break;
  }
}
function onMouseDown2(event) {
  let mouseAction;
  switch (event.button) {
    case 0:
      mouseAction = this.mouseButtons.LEFT;
      break;
    case 1:
      mouseAction = this.mouseButtons.MIDDLE;
      break;
    case 2:
      mouseAction = this.mouseButtons.RIGHT;
      break;
    default:
      mouseAction = -1;
  }
  switch (mouseAction) {
    case MOUSE.DOLLY:
      if (this.enableZoom === false) return;
      this._handleMouseDownDolly(event);
      this.state = _STATE2.DOLLY;
      break;
    case MOUSE.ROTATE:
      if (event.ctrlKey || event.metaKey || event.shiftKey) {
        if (this.enablePan === false) return;
        this._handleMouseDownPan(event);
        this.state = _STATE2.PAN;
      } else {
        if (this.enableRotate === false) return;
        this._handleMouseDownRotate(event);
        this.state = _STATE2.ROTATE;
      }
      break;
    case MOUSE.PAN:
      if (event.ctrlKey || event.metaKey || event.shiftKey) {
        if (this.enableRotate === false) return;
        this._handleMouseDownRotate(event);
        this.state = _STATE2.ROTATE;
      } else {
        if (this.enablePan === false) return;
        this._handleMouseDownPan(event);
        this.state = _STATE2.PAN;
      }
      break;
    default:
      this.state = _STATE2.NONE;
  }
  if (this.state !== _STATE2.NONE) {
    this.dispatchEvent(_startEvent2);
  }
}
function onMouseMove2(event) {
  switch (this.state) {
    case _STATE2.ROTATE:
      if (this.enableRotate === false) return;
      this._handleMouseMoveRotate(event);
      break;
    case _STATE2.DOLLY:
      if (this.enableZoom === false) return;
      this._handleMouseMoveDolly(event);
      break;
    case _STATE2.PAN:
      if (this.enablePan === false) return;
      this._handleMouseMovePan(event);
      break;
  }
}
function onMouseWheel2(event) {
  if (this.enabled === false || this.enableZoom === false || this.state !== _STATE2.NONE) return;
  event.preventDefault();
  this.dispatchEvent(_startEvent2);
  this._handleMouseWheel(this._customWheelEvent(event));
  this.dispatchEvent(_endEvent2);
}
function onKeyDown2(event) {
  if (this.enabled === false || this.enablePan === false) return;
  this._handleKeyDown(event);
}
function onTouchStart2(event) {
  this._trackPointer(event);
  switch (this._pointers.length) {
    case 1:
      switch (this.touches.ONE) {
        case TOUCH.ROTATE:
          if (this.enableRotate === false) return;
          this._handleTouchStartRotate(event);
          this.state = _STATE2.TOUCH_ROTATE;
          break;
        case TOUCH.PAN:
          if (this.enablePan === false) return;
          this._handleTouchStartPan(event);
          this.state = _STATE2.TOUCH_PAN;
          break;
        default:
          this.state = _STATE2.NONE;
      }
      break;
    case 2:
      switch (this.touches.TWO) {
        case TOUCH.DOLLY_PAN:
          if (this.enableZoom === false && this.enablePan === false) return;
          this._handleTouchStartDollyPan(event);
          this.state = _STATE2.TOUCH_DOLLY_PAN;
          break;
        case TOUCH.DOLLY_ROTATE:
          if (this.enableZoom === false && this.enableRotate === false) return;
          this._handleTouchStartDollyRotate(event);
          this.state = _STATE2.TOUCH_DOLLY_ROTATE;
          break;
        default:
          this.state = _STATE2.NONE;
      }
      break;
    default:
      this.state = _STATE2.NONE;
  }
  if (this.state !== _STATE2.NONE) {
    this.dispatchEvent(_startEvent2);
  }
}
function onTouchMove2(event) {
  this._trackPointer(event);
  switch (this.state) {
    case _STATE2.TOUCH_ROTATE:
      if (this.enableRotate === false) return;
      this._handleTouchMoveRotate(event);
      this.update();
      break;
    case _STATE2.TOUCH_PAN:
      if (this.enablePan === false) return;
      this._handleTouchMovePan(event);
      this.update();
      break;
    case _STATE2.TOUCH_DOLLY_PAN:
      if (this.enableZoom === false && this.enablePan === false) return;
      this._handleTouchMoveDollyPan(event);
      this.update();
      break;
    case _STATE2.TOUCH_DOLLY_ROTATE:
      if (this.enableZoom === false && this.enableRotate === false) return;
      this._handleTouchMoveDollyRotate(event);
      this.update();
      break;
    default:
      this.state = _STATE2.NONE;
  }
}
function onContextMenu2(event) {
  if (this.enabled === false) return;
  event.preventDefault();
}
function interceptControlDown(event) {
  if (event.key === "Control") {
    this._controlActive = true;
    const document2 = this.domElement.getRootNode();
    document2.addEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
  }
}
function interceptControlUp(event) {
  if (event.key === "Control") {
    this._controlActive = false;
    const document2 = this.domElement.getRootNode();
    document2.removeEventListener("keyup", this._interceptControlUp, { passive: true, capture: true });
  }
}

// node_modules/three/examples/jsm/controls/FlyControls.js
var _changeEvent3 = { type: "change" };
var _EPS3 = 1e-6;
var _tmpQuaternion = new Quaternion();
var FlyControls = class extends Controls {
  constructor(object2, domElement = null) {
    super(object2, domElement);
    this.movementSpeed = 1;
    this.rollSpeed = 5e-3;
    this.dragToLook = false;
    this.autoForward = false;
    this._moveState = { up: 0, down: 0, left: 0, right: 0, forward: 0, back: 0, pitchUp: 0, pitchDown: 0, yawLeft: 0, yawRight: 0, rollLeft: 0, rollRight: 0 };
    this._moveVector = new Vector3(0, 0, 0);
    this._rotationVector = new Vector3(0, 0, 0);
    this._lastQuaternion = new Quaternion();
    this._lastPosition = new Vector3();
    this._status = 0;
    this._onKeyDown = onKeyDown3.bind(this);
    this._onKeyUp = onKeyUp2.bind(this);
    this._onPointerMove = onPointerMove3.bind(this);
    this._onPointerDown = onPointerDown3.bind(this);
    this._onPointerUp = onPointerUp3.bind(this);
    this._onPointerCancel = onPointerCancel2.bind(this);
    this._onContextMenu = onContextMenu3.bind(this);
    if (domElement !== null) {
      this.connect();
    }
  }
  connect() {
    window.addEventListener("keydown", this._onKeyDown);
    window.addEventListener("keyup", this._onKeyUp);
    this.domElement.addEventListener("pointermove", this._onPointerMove);
    this.domElement.addEventListener("pointerdown", this._onPointerDown);
    this.domElement.addEventListener("pointerup", this._onPointerUp);
    this.domElement.addEventListener("pointercancel", this._onPointerCancel);
    this.domElement.addEventListener("contextmenu", this._onContextMenu);
  }
  disconnect() {
    window.removeEventListener("keydown", this._onKeyDown);
    window.removeEventListener("keyup", this._onKeyUp);
    this.domElement.removeEventListener("pointermove", this._onPointerMove);
    this.domElement.removeEventListener("pointerdown", this._onPointerDown);
    this.domElement.removeEventListener("pointerup", this._onPointerUp);
    this.domElement.removeEventListener("pointercancel", this._onPointerCancel);
    this.domElement.removeEventListener("contextmenu", this._onContextMenu);
  }
  dispose() {
    this.disconnect();
  }
  update(delta) {
    if (this.enabled === false) return;
    const object2 = this.object;
    const moveMult = delta * this.movementSpeed;
    const rotMult = delta * this.rollSpeed;
    object2.translateX(this._moveVector.x * moveMult);
    object2.translateY(this._moveVector.y * moveMult);
    object2.translateZ(this._moveVector.z * moveMult);
    _tmpQuaternion.set(this._rotationVector.x * rotMult, this._rotationVector.y * rotMult, this._rotationVector.z * rotMult, 1).normalize();
    object2.quaternion.multiply(_tmpQuaternion);
    if (this._lastPosition.distanceToSquared(object2.position) > _EPS3 || 8 * (1 - this._lastQuaternion.dot(object2.quaternion)) > _EPS3) {
      this.dispatchEvent(_changeEvent3);
      this._lastQuaternion.copy(object2.quaternion);
      this._lastPosition.copy(object2.position);
    }
  }
  // private
  _updateMovementVector() {
    const forward = this._moveState.forward || this.autoForward && !this._moveState.back ? 1 : 0;
    this._moveVector.x = -this._moveState.left + this._moveState.right;
    this._moveVector.y = -this._moveState.down + this._moveState.up;
    this._moveVector.z = -forward + this._moveState.back;
  }
  _updateRotationVector() {
    this._rotationVector.x = -this._moveState.pitchDown + this._moveState.pitchUp;
    this._rotationVector.y = -this._moveState.yawRight + this._moveState.yawLeft;
    this._rotationVector.z = -this._moveState.rollRight + this._moveState.rollLeft;
  }
  _getContainerDimensions() {
    if (this.domElement != document) {
      return {
        size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
        offset: [this.domElement.offsetLeft, this.domElement.offsetTop]
      };
    } else {
      return {
        size: [window.innerWidth, window.innerHeight],
        offset: [0, 0]
      };
    }
  }
};
function onKeyDown3(event) {
  if (event.altKey || this.enabled === false) {
    return;
  }
  switch (event.code) {
    case "ShiftLeft":
    case "ShiftRight":
      this.movementSpeedMultiplier = 0.1;
      break;
    case "KeyW":
      this._moveState.forward = 1;
      break;
    case "KeyS":
      this._moveState.back = 1;
      break;
    case "KeyA":
      this._moveState.left = 1;
      break;
    case "KeyD":
      this._moveState.right = 1;
      break;
    case "KeyR":
      this._moveState.up = 1;
      break;
    case "KeyF":
      this._moveState.down = 1;
      break;
    case "ArrowUp":
      this._moveState.pitchUp = 1;
      break;
    case "ArrowDown":
      this._moveState.pitchDown = 1;
      break;
    case "ArrowLeft":
      this._moveState.yawLeft = 1;
      break;
    case "ArrowRight":
      this._moveState.yawRight = 1;
      break;
    case "KeyQ":
      this._moveState.rollLeft = 1;
      break;
    case "KeyE":
      this._moveState.rollRight = 1;
      break;
  }
  this._updateMovementVector();
  this._updateRotationVector();
}
function onKeyUp2(event) {
  if (this.enabled === false) return;
  switch (event.code) {
    case "ShiftLeft":
    case "ShiftRight":
      this.movementSpeedMultiplier = 1;
      break;
    case "KeyW":
      this._moveState.forward = 0;
      break;
    case "KeyS":
      this._moveState.back = 0;
      break;
    case "KeyA":
      this._moveState.left = 0;
      break;
    case "KeyD":
      this._moveState.right = 0;
      break;
    case "KeyR":
      this._moveState.up = 0;
      break;
    case "KeyF":
      this._moveState.down = 0;
      break;
    case "ArrowUp":
      this._moveState.pitchUp = 0;
      break;
    case "ArrowDown":
      this._moveState.pitchDown = 0;
      break;
    case "ArrowLeft":
      this._moveState.yawLeft = 0;
      break;
    case "ArrowRight":
      this._moveState.yawRight = 0;
      break;
    case "KeyQ":
      this._moveState.rollLeft = 0;
      break;
    case "KeyE":
      this._moveState.rollRight = 0;
      break;
  }
  this._updateMovementVector();
  this._updateRotationVector();
}
function onPointerDown3(event) {
  if (this.enabled === false) return;
  if (this.dragToLook) {
    this._status++;
  } else {
    switch (event.button) {
      case 0:
        this._moveState.forward = 1;
        break;
      case 2:
        this._moveState.back = 1;
        break;
    }
    this._updateMovementVector();
  }
}
function onPointerMove3(event) {
  if (this.enabled === false) return;
  if (!this.dragToLook || this._status > 0) {
    const container = this._getContainerDimensions();
    const halfWidth = container.size[0] / 2;
    const halfHeight = container.size[1] / 2;
    this._moveState.yawLeft = -(event.pageX - container.offset[0] - halfWidth) / halfWidth;
    this._moveState.pitchDown = (event.pageY - container.offset[1] - halfHeight) / halfHeight;
    this._updateRotationVector();
  }
}
function onPointerUp3(event) {
  if (this.enabled === false) return;
  if (this.dragToLook) {
    this._status--;
    this._moveState.yawLeft = this._moveState.pitchDown = 0;
  } else {
    switch (event.button) {
      case 0:
        this._moveState.forward = 0;
        break;
      case 2:
        this._moveState.back = 0;
        break;
    }
    this._updateMovementVector();
  }
  this._updateRotationVector();
}
function onPointerCancel2() {
  if (this.enabled === false) return;
  if (this.dragToLook) {
    this._status = 0;
    this._moveState.yawLeft = this._moveState.pitchDown = 0;
  } else {
    this._moveState.forward = 0;
    this._moveState.back = 0;
    this._updateMovementVector();
  }
  this._updateRotationVector();
}
function onContextMenu3(event) {
  if (this.enabled === false) return;
  event.preventDefault();
}

// node_modules/three/examples/jsm/shaders/CopyShader.js
var CopyShader = {
  name: "CopyShader",
  uniforms: {
    "tDiffuse": { value: null },
    "opacity": { value: 1 }
  },
  vertexShader: (
    /* glsl */
    `

		varying vec2 vUv;

		void main() {

			vUv = uv;
			gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );

		}`
  ),
  fragmentShader: (
    /* glsl */
    `

		uniform float opacity;

		uniform sampler2D tDiffuse;

		varying vec2 vUv;

		void main() {

			vec4 texel = texture2D( tDiffuse, vUv );
			gl_FragColor = opacity * texel;


		}`
  )
};

// node_modules/three/examples/jsm/postprocessing/Pass.js
var Pass = class {
  constructor() {
    this.isPass = true;
    this.enabled = true;
    this.needsSwap = true;
    this.clear = false;
    this.renderToScreen = false;
  }
  setSize() {
  }
  render() {
    console.error("THREE.Pass: .render() must be implemented in derived pass.");
  }
  dispose() {
  }
};
var _camera4 = new OrthographicCamera(-1, 1, 1, -1, 0, 1);
var FullscreenTriangleGeometry = class extends BufferGeometry {
  constructor() {
    super();
    this.setAttribute("position", new Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
    this.setAttribute("uv", new Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));
  }
};
var _geometry2 = new FullscreenTriangleGeometry();
var FullScreenQuad = class {
  constructor(material) {
    this._mesh = new Mesh(_geometry2, material);
  }
  dispose() {
    this._mesh.geometry.dispose();
  }
  render(renderer3) {
    renderer3.render(this._mesh, _camera4);
  }
  get material() {
    return this._mesh.material;
  }
  set material(value) {
    this._mesh.material = value;
  }
};

// node_modules/three/examples/jsm/postprocessing/ShaderPass.js
var ShaderPass = class extends Pass {
  constructor(shader, textureID) {
    super();
    this.textureID = textureID !== void 0 ? textureID : "tDiffuse";
    if (shader instanceof ShaderMaterial) {
      this.uniforms = shader.uniforms;
      this.material = shader;
    } else if (shader) {
      this.uniforms = UniformsUtils.clone(shader.uniforms);
      this.material = new ShaderMaterial({
        name: shader.name !== void 0 ? shader.name : "unspecified",
        defines: Object.assign({}, shader.defines),
        uniforms: this.uniforms,
        vertexShader: shader.vertexShader,
        fragmentShader: shader.fragmentShader
      });
    }
    this.fsQuad = new FullScreenQuad(this.material);
  }
  render(renderer3, writeBuffer, readBuffer) {
    if (this.uniforms[this.textureID]) {
      this.uniforms[this.textureID].value = readBuffer.texture;
    }
    this.fsQuad.material = this.material;
    if (this.renderToScreen) {
      renderer3.setRenderTarget(null);
      this.fsQuad.render(renderer3);
    } else {
      renderer3.setRenderTarget(writeBuffer);
      if (this.clear) renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
      this.fsQuad.render(renderer3);
    }
  }
  dispose() {
    this.material.dispose();
    this.fsQuad.dispose();
  }
};

// node_modules/three/examples/jsm/postprocessing/MaskPass.js
var MaskPass = class extends Pass {
  constructor(scene3, camera3) {
    super();
    this.scene = scene3;
    this.camera = camera3;
    this.clear = true;
    this.needsSwap = false;
    this.inverse = false;
  }
  render(renderer3, writeBuffer, readBuffer) {
    const context2 = renderer3.getContext();
    const state = renderer3.state;
    state.buffers.color.setMask(false);
    state.buffers.depth.setMask(false);
    state.buffers.color.setLocked(true);
    state.buffers.depth.setLocked(true);
    let writeValue, clearValue;
    if (this.inverse) {
      writeValue = 0;
      clearValue = 1;
    } else {
      writeValue = 1;
      clearValue = 0;
    }
    state.buffers.stencil.setTest(true);
    state.buffers.stencil.setOp(context2.REPLACE, context2.REPLACE, context2.REPLACE);
    state.buffers.stencil.setFunc(context2.ALWAYS, writeValue, 4294967295);
    state.buffers.stencil.setClear(clearValue);
    state.buffers.stencil.setLocked(true);
    renderer3.setRenderTarget(readBuffer);
    if (this.clear) renderer3.clear();
    renderer3.render(this.scene, this.camera);
    renderer3.setRenderTarget(writeBuffer);
    if (this.clear) renderer3.clear();
    renderer3.render(this.scene, this.camera);
    state.buffers.color.setLocked(false);
    state.buffers.depth.setLocked(false);
    state.buffers.color.setMask(true);
    state.buffers.depth.setMask(true);
    state.buffers.stencil.setLocked(false);
    state.buffers.stencil.setFunc(context2.EQUAL, 1, 4294967295);
    state.buffers.stencil.setOp(context2.KEEP, context2.KEEP, context2.KEEP);
    state.buffers.stencil.setLocked(true);
  }
};
var ClearMaskPass = class extends Pass {
  constructor() {
    super();
    this.needsSwap = false;
  }
  render(renderer3) {
    renderer3.state.buffers.stencil.setLocked(false);
    renderer3.state.buffers.stencil.setTest(false);
  }
};

// node_modules/three/examples/jsm/postprocessing/EffectComposer.js
var EffectComposer = class {
  constructor(renderer3, renderTarget) {
    this.renderer = renderer3;
    this._pixelRatio = renderer3.getPixelRatio();
    if (renderTarget === void 0) {
      const size = renderer3.getSize(new Vector2());
      this._width = size.width;
      this._height = size.height;
      renderTarget = new WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType });
      renderTarget.texture.name = "EffectComposer.rt1";
    } else {
      this._width = renderTarget.width;
      this._height = renderTarget.height;
    }
    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();
    this.renderTarget2.texture.name = "EffectComposer.rt2";
    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;
    this.renderToScreen = true;
    this.passes = [];
    this.copyPass = new ShaderPass(CopyShader);
    this.copyPass.material.blending = NoBlending;
    this.clock = new Clock();
  }
  swapBuffers() {
    const tmp3 = this.readBuffer;
    this.readBuffer = this.writeBuffer;
    this.writeBuffer = tmp3;
  }
  addPass(pass) {
    this.passes.push(pass);
    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
  }
  insertPass(pass, index7) {
    this.passes.splice(index7, 0, pass);
    pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
  }
  removePass(pass) {
    const index7 = this.passes.indexOf(pass);
    if (index7 !== -1) {
      this.passes.splice(index7, 1);
    }
  }
  isLastEnabledPass(passIndex) {
    for (let i2 = passIndex + 1; i2 < this.passes.length; i2++) {
      if (this.passes[i2].enabled) {
        return false;
      }
    }
    return true;
  }
  render(deltaTime) {
    if (deltaTime === void 0) {
      deltaTime = this.clock.getDelta();
    }
    const currentRenderTarget = this.renderer.getRenderTarget();
    let maskActive = false;
    for (let i2 = 0, il = this.passes.length; i2 < il; i2++) {
      const pass = this.passes[i2];
      if (pass.enabled === false) continue;
      pass.renderToScreen = this.renderToScreen && this.isLastEnabledPass(i2);
      pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);
      if (pass.needsSwap) {
        if (maskActive) {
          const context2 = this.renderer.getContext();
          const stencil = this.renderer.state.buffers.stencil;
          stencil.setFunc(context2.NOTEQUAL, 1, 4294967295);
          this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);
          stencil.setFunc(context2.EQUAL, 1, 4294967295);
        }
        this.swapBuffers();
      }
      if (MaskPass !== void 0) {
        if (pass instanceof MaskPass) {
          maskActive = true;
        } else if (pass instanceof ClearMaskPass) {
          maskActive = false;
        }
      }
    }
    this.renderer.setRenderTarget(currentRenderTarget);
  }
  reset(renderTarget) {
    if (renderTarget === void 0) {
      const size = this.renderer.getSize(new Vector2());
      this._pixelRatio = this.renderer.getPixelRatio();
      this._width = size.width;
      this._height = size.height;
      renderTarget = this.renderTarget1.clone();
      renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    this.renderTarget1.dispose();
    this.renderTarget2.dispose();
    this.renderTarget1 = renderTarget;
    this.renderTarget2 = renderTarget.clone();
    this.writeBuffer = this.renderTarget1;
    this.readBuffer = this.renderTarget2;
  }
  setSize(width, height) {
    this._width = width;
    this._height = height;
    const effectiveWidth = this._width * this._pixelRatio;
    const effectiveHeight = this._height * this._pixelRatio;
    this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
    this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
    for (let i2 = 0; i2 < this.passes.length; i2++) {
      this.passes[i2].setSize(effectiveWidth, effectiveHeight);
    }
  }
  setPixelRatio(pixelRatio) {
    this._pixelRatio = pixelRatio;
    this.setSize(this._width, this._height);
  }
  dispose() {
    this.renderTarget1.dispose();
    this.renderTarget2.dispose();
    this.copyPass.dispose();
  }
};

// node_modules/three/examples/jsm/postprocessing/RenderPass.js
var RenderPass = class extends Pass {
  constructor(scene3, camera3, overrideMaterial2 = null, clearColor = null, clearAlpha = null) {
    super();
    this.scene = scene3;
    this.camera = camera3;
    this.overrideMaterial = overrideMaterial2;
    this.clearColor = clearColor;
    this.clearAlpha = clearAlpha;
    this.clear = true;
    this.clearDepth = false;
    this.needsSwap = false;
    this._oldClearColor = new Color();
  }
  render(renderer3, writeBuffer, readBuffer) {
    const oldAutoClear = renderer3.autoClear;
    renderer3.autoClear = false;
    let oldClearAlpha, oldOverrideMaterial;
    if (this.overrideMaterial !== null) {
      oldOverrideMaterial = this.scene.overrideMaterial;
      this.scene.overrideMaterial = this.overrideMaterial;
    }
    if (this.clearColor !== null) {
      renderer3.getClearColor(this._oldClearColor);
      renderer3.setClearColor(this.clearColor, renderer3.getClearAlpha());
    }
    if (this.clearAlpha !== null) {
      oldClearAlpha = renderer3.getClearAlpha();
      renderer3.setClearAlpha(this.clearAlpha);
    }
    if (this.clearDepth == true) {
      renderer3.clearDepth();
    }
    renderer3.setRenderTarget(this.renderToScreen ? null : readBuffer);
    if (this.clear === true) {
      renderer3.clear(renderer3.autoClearColor, renderer3.autoClearDepth, renderer3.autoClearStencil);
    }
    renderer3.render(this.scene, this.camera);
    if (this.clearColor !== null) {
      renderer3.setClearColor(this._oldClearColor);
    }
    if (this.clearAlpha !== null) {
      renderer3.setClearAlpha(oldClearAlpha);
    }
    if (this.overrideMaterial !== null) {
      this.scene.overrideMaterial = oldOverrideMaterial;
    }
    renderer3.autoClear = oldAutoClear;
  }
};

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function(n2) {
    for (var e3 = 1; e3 < arguments.length; e3++) {
      var t4 = arguments[e3];
      for (var r2 in t4) ({}).hasOwnProperty.call(t4, r2) && (n2[r2] = t4[r2]);
    }
    return n2;
  }, _extends.apply(null, arguments);
}

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized5(e3) {
  if (void 0 === e3) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e3;
}

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf5(t4, e3) {
  return _setPrototypeOf5 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t5, e4) {
    return t5.__proto__ = e4, t5;
  }, _setPrototypeOf5(t4, e3);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t4, o2) {
  t4.prototype = Object.create(o2.prototype), t4.prototype.constructor = t4, _setPrototypeOf5(t4, o2);
}

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf5(t4) {
  return _getPrototypeOf5 = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t5) {
    return t5.__proto__ || Object.getPrototypeOf(t5);
  }, _getPrototypeOf5(t4);
}

// node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(t4) {
  try {
    return -1 !== Function.toString.call(t4).indexOf("[native code]");
  } catch (n2) {
    return "function" == typeof t4;
  }
}

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct5() {
  try {
    var t4 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t5) {
  }
  return (_isNativeReflectConstruct5 = function _isNativeReflectConstruct6() {
    return !!t4;
  })();
}

// node_modules/@babel/runtime/helpers/esm/construct.js
function _construct2(t4, e3, r2) {
  if (_isNativeReflectConstruct5()) return Reflect.construct.apply(null, arguments);
  var o2 = [null];
  o2.push.apply(o2, e3);
  var p2 = new (t4.bind.apply(t4, o2))();
  return r2 && _setPrototypeOf5(p2, r2.prototype), p2;
}

// node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js
function _wrapNativeSuper(t4) {
  var r2 = "function" == typeof Map ? /* @__PURE__ */ new Map() : void 0;
  return _wrapNativeSuper = function _wrapNativeSuper2(t5) {
    if (null === t5 || !_isNativeFunction(t5)) return t5;
    if ("function" != typeof t5) throw new TypeError("Super expression must either be null or a function");
    if (void 0 !== r2) {
      if (r2.has(t5)) return r2.get(t5);
      r2.set(t5, Wrapper);
    }
    function Wrapper() {
      return _construct2(t5, arguments, _getPrototypeOf5(this).constructor);
    }
    return Wrapper.prototype = Object.create(t5.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), _setPrototypeOf5(Wrapper, t5);
  }, _wrapNativeSuper(t4);
}

// node_modules/polished/dist/polished.esm.js
var ERRORS = {
  "1": "Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).\n\n",
  "2": "Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).\n\n",
  "3": "Passed an incorrect argument to a color function, please pass a string representation of a color.\n\n",
  "4": "Couldn't generate valid rgb string from %s, it returned %s.\n\n",
  "5": "Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.\n\n",
  "6": "Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).\n\n",
  "7": "Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).\n\n",
  "8": "Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.\n\n",
  "9": "Please provide a number of steps to the modularScale helper.\n\n",
  "10": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "11": 'Invalid value passed as base to modularScale, expected number or em string but got "%s"\n\n',
  "12": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.\n\n',
  "13": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.\n\n',
  "14": 'Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "15": 'Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.\n\n',
  "16": "You must provide a template to this method.\n\n",
  "17": "You passed an unsupported selector state to this method.\n\n",
  "18": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "19": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "20": "expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "21": "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "22": "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  "23": "fontFace expects a name of a font-family.\n\n",
  "24": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "25": "fontFace expects localFonts to be an array.\n\n",
  "26": "fontFace expects fileFormats to be an array.\n\n",
  "27": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "28": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "29": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "30": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "31": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation\n\n",
  "32": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')\n\n",
  "33": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation\n\n",
  "34": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "35": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "36": "Property must be a string value.\n\n",
  "37": "Syntax Error at %s.\n\n",
  "38": "Formula contains a function that needs parentheses at %s.\n\n",
  "39": "Formula is missing closing parenthesis at %s.\n\n",
  "40": "Formula has too many closing parentheses at %s.\n\n",
  "41": "All values in a formula must have the same unit or be unitless.\n\n",
  "42": "Please provide a number of steps to the modularScale helper.\n\n",
  "43": "Please pass a number or one of the predefined scales to the modularScale helper as the ratio.\n\n",
  "44": "Invalid value passed as base to modularScale, expected number or em/rem string but got %s.\n\n",
  "45": "Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.\n\n",
  "46": "Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.\n\n",
  "47": "minScreen and maxScreen must be provided as stringified numbers with the same units.\n\n",
  "48": "fromSize and toSize must be provided as stringified numbers with the same units.\n\n",
  "49": "Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.\n\n",
  "50": "Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.\n\n",
  "51": "Expects the first argument object to have the properties prop, fromSize, and toSize.\n\n",
  "52": "fontFace expects either the path to the font file(s) or a name of a local copy.\n\n",
  "53": "fontFace expects localFonts to be an array.\n\n",
  "54": "fontFace expects fileFormats to be an array.\n\n",
  "55": "fontFace expects a name of a font-family.\n\n",
  "56": "linearGradient requries at least 2 color-stops to properly render.\n\n",
  "57": "radialGradient requries at least 2 color-stops to properly render.\n\n",
  "58": "Please supply a filename to retinaImage() as the first argument.\n\n",
  "59": "Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.\n\n",
  "60": "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  "61": "Property must be a string value.\n\n",
  "62": "borderRadius expects a radius value as a string or number as the second argument.\n\n",
  "63": 'borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.\n\n',
  "64": "The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.\n\n",
  "65": "To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').\n\n",
  "66": "The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.\n\n",
  "67": "You must provide a template to this method.\n\n",
  "68": "You passed an unsupported selector state to this method.\n\n",
  "69": 'Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.\n\n',
  "70": 'Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.\n\n',
  "71": 'Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "72": 'Passed invalid base value %s to %s(), please pass a value like "12px" or 12.\n\n',
  "73": "Please provide a valid CSS variable.\n\n",
  "74": "CSS variable not found and no default was provided.\n\n",
  "75": "important requires a valid style object, got a %s instead.\n\n",
  "76": "fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.\n\n",
  "77": 'remToPx expects a value in "rem" but you provided it in "%s".\n\n',
  "78": 'base must be set in "px" or "%" but you set it in "%s".\n'
};
function format2() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  var a2 = args[0];
  var b = [];
  var c4;
  for (c4 = 1; c4 < args.length; c4 += 1) {
    b.push(args[c4]);
  }
  b.forEach(function(d2) {
    a2 = a2.replace(/%[a-z]/, d2);
  });
  return a2;
}
var PolishedError = function(_Error) {
  _inheritsLoose(PolishedError2, _Error);
  function PolishedError2(code2) {
    var _this;
    if (false) {
      _this = _Error.call(this, "An error occurred. See https://github.com/styled-components/polished/blob/main/src/internalHelpers/errors.md#" + code2 + " for more information.") || this;
    } else {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      _this = _Error.call(this, format2.apply(void 0, [ERRORS[code2]].concat(args))) || this;
    }
    return _assertThisInitialized5(_this);
  }
  return PolishedError2;
}(_wrapNativeSuper(Error));
function endsWith(string, suffix) {
  return string.substr(-suffix.length) === suffix;
}
var cssRegex$1 = /^([+-]?(?:\d+|\d*\.\d+))([a-z]*|%)$/;
function stripUnit(value) {
  if (typeof value !== "string") return value;
  var matchedValue = value.match(cssRegex$1);
  return matchedValue ? parseFloat(value) : value;
}
var pxtoFactory = function pxtoFactory2(to) {
  return function(pxval, base) {
    if (base === void 0) {
      base = "16px";
    }
    var newPxval = pxval;
    var newBase = base;
    if (typeof pxval === "string") {
      if (!endsWith(pxval, "px")) {
        throw new PolishedError(69, to, pxval);
      }
      newPxval = stripUnit(pxval);
    }
    if (typeof base === "string") {
      if (!endsWith(base, "px")) {
        throw new PolishedError(70, to, base);
      }
      newBase = stripUnit(base);
    }
    if (typeof newPxval === "string") {
      throw new PolishedError(71, pxval, to);
    }
    if (typeof newBase === "string") {
      throw new PolishedError(72, base, to);
    }
    return "" + newPxval / newBase + to;
  };
};
var pixelsto = pxtoFactory;
var em = pixelsto("em");
var rem = pixelsto("rem");
function colorToInt(color3) {
  return Math.round(color3 * 255);
}
function convertToInt(red, green, blue) {
  return colorToInt(red) + "," + colorToInt(green) + "," + colorToInt(blue);
}
function hslToRgb2(hue3, saturation2, lightness, convert2) {
  if (convert2 === void 0) {
    convert2 = convertToInt;
  }
  if (saturation2 === 0) {
    return convert2(lightness, lightness, lightness);
  }
  var huePrime = (hue3 % 360 + 360) % 360 / 60;
  var chroma = (1 - Math.abs(2 * lightness - 1)) * saturation2;
  var secondComponent = chroma * (1 - Math.abs(huePrime % 2 - 1));
  var red = 0;
  var green = 0;
  var blue = 0;
  if (huePrime >= 0 && huePrime < 1) {
    red = chroma;
    green = secondComponent;
  } else if (huePrime >= 1 && huePrime < 2) {
    red = secondComponent;
    green = chroma;
  } else if (huePrime >= 2 && huePrime < 3) {
    green = chroma;
    blue = secondComponent;
  } else if (huePrime >= 3 && huePrime < 4) {
    green = secondComponent;
    blue = chroma;
  } else if (huePrime >= 4 && huePrime < 5) {
    red = secondComponent;
    blue = chroma;
  } else if (huePrime >= 5 && huePrime < 6) {
    red = chroma;
    blue = secondComponent;
  }
  var lightnessModification = lightness - chroma / 2;
  var finalRed = red + lightnessModification;
  var finalGreen = green + lightnessModification;
  var finalBlue = blue + lightnessModification;
  return convert2(finalRed, finalGreen, finalBlue);
}
var namedColorMap = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "00ffff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "0000ff",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "00ffff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "ff00ff",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "639",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
function nameToHex(color3) {
  if (typeof color3 !== "string") return color3;
  var normalizedColorName = color3.toLowerCase();
  return namedColorMap[normalizedColorName] ? "#" + namedColorMap[normalizedColorName] : color3;
}
var hexRegex = /^#[a-fA-F0-9]{6}$/;
var hexRgbaRegex = /^#[a-fA-F0-9]{8}$/;
var reducedHexRegex = /^#[a-fA-F0-9]{3}$/;
var reducedRgbaHexRegex = /^#[a-fA-F0-9]{4}$/;
var rgbRegex = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
var rgbaRegex = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
var hslRegex = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var hslaRegex = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
function parseToRgb(color3) {
  if (typeof color3 !== "string") {
    throw new PolishedError(3);
  }
  var normalizedColor = nameToHex(color3);
  if (normalizedColor.match(hexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16)
    };
  }
  if (normalizedColor.match(hexRgbaRegex)) {
    var alpha = parseFloat((parseInt("" + normalizedColor[7] + normalizedColor[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[2], 16),
      green: parseInt("" + normalizedColor[3] + normalizedColor[4], 16),
      blue: parseInt("" + normalizedColor[5] + normalizedColor[6], 16),
      alpha
    };
  }
  if (normalizedColor.match(reducedHexRegex)) {
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16)
    };
  }
  if (normalizedColor.match(reducedRgbaHexRegex)) {
    var _alpha = parseFloat((parseInt("" + normalizedColor[4] + normalizedColor[4], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + normalizedColor[1] + normalizedColor[1], 16),
      green: parseInt("" + normalizedColor[2] + normalizedColor[2], 16),
      blue: parseInt("" + normalizedColor[3] + normalizedColor[3], 16),
      alpha: _alpha
    };
  }
  var rgbMatched = rgbRegex.exec(normalizedColor);
  if (rgbMatched) {
    return {
      red: parseInt("" + rgbMatched[1], 10),
      green: parseInt("" + rgbMatched[2], 10),
      blue: parseInt("" + rgbMatched[3], 10)
    };
  }
  var rgbaMatched = rgbaRegex.exec(normalizedColor.substring(0, 50));
  if (rgbaMatched) {
    return {
      red: parseInt("" + rgbaMatched[1], 10),
      green: parseInt("" + rgbaMatched[2], 10),
      blue: parseInt("" + rgbaMatched[3], 10),
      alpha: parseFloat("" + rgbaMatched[4]) > 1 ? parseFloat("" + rgbaMatched[4]) / 100 : parseFloat("" + rgbaMatched[4])
    };
  }
  var hslMatched = hslRegex.exec(normalizedColor);
  if (hslMatched) {
    var hue3 = parseInt("" + hslMatched[1], 10);
    var saturation2 = parseInt("" + hslMatched[2], 10) / 100;
    var lightness = parseInt("" + hslMatched[3], 10) / 100;
    var rgbColorString = "rgb(" + hslToRgb2(hue3, saturation2, lightness) + ")";
    var hslRgbMatched = rgbRegex.exec(rgbColorString);
    if (!hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, rgbColorString);
    }
    return {
      red: parseInt("" + hslRgbMatched[1], 10),
      green: parseInt("" + hslRgbMatched[2], 10),
      blue: parseInt("" + hslRgbMatched[3], 10)
    };
  }
  var hslaMatched = hslaRegex.exec(normalizedColor.substring(0, 50));
  if (hslaMatched) {
    var _hue = parseInt("" + hslaMatched[1], 10);
    var _saturation = parseInt("" + hslaMatched[2], 10) / 100;
    var _lightness = parseInt("" + hslaMatched[3], 10) / 100;
    var _rgbColorString = "rgb(" + hslToRgb2(_hue, _saturation, _lightness) + ")";
    var _hslRgbMatched = rgbRegex.exec(_rgbColorString);
    if (!_hslRgbMatched) {
      throw new PolishedError(4, normalizedColor, _rgbColorString);
    }
    return {
      red: parseInt("" + _hslRgbMatched[1], 10),
      green: parseInt("" + _hslRgbMatched[2], 10),
      blue: parseInt("" + _hslRgbMatched[3], 10),
      alpha: parseFloat("" + hslaMatched[4]) > 1 ? parseFloat("" + hslaMatched[4]) / 100 : parseFloat("" + hslaMatched[4])
    };
  }
  throw new PolishedError(5);
}
function rgbToHsl2(color3) {
  var red = color3.red / 255;
  var green = color3.green / 255;
  var blue = color3.blue / 255;
  var max4 = Math.max(red, green, blue);
  var min4 = Math.min(red, green, blue);
  var lightness = (max4 + min4) / 2;
  if (max4 === min4) {
    if (color3.alpha !== void 0) {
      return {
        hue: 0,
        saturation: 0,
        lightness,
        alpha: color3.alpha
      };
    } else {
      return {
        hue: 0,
        saturation: 0,
        lightness
      };
    }
  }
  var hue3;
  var delta = max4 - min4;
  var saturation2 = lightness > 0.5 ? delta / (2 - max4 - min4) : delta / (max4 + min4);
  switch (max4) {
    case red:
      hue3 = (green - blue) / delta + (green < blue ? 6 : 0);
      break;
    case green:
      hue3 = (blue - red) / delta + 2;
      break;
    default:
      hue3 = (red - green) / delta + 4;
      break;
  }
  hue3 *= 60;
  if (color3.alpha !== void 0) {
    return {
      hue: hue3,
      saturation: saturation2,
      lightness,
      alpha: color3.alpha
    };
  }
  return {
    hue: hue3,
    saturation: saturation2,
    lightness
  };
}
function parseToHsl(color3) {
  return rgbToHsl2(parseToRgb(color3));
}
var reduceHexValue = function reduceHexValue2(value) {
  if (value.length === 7 && value[1] === value[2] && value[3] === value[4] && value[5] === value[6]) {
    return "#" + value[1] + value[3] + value[5];
  }
  return value;
};
var reduceHexValue$1 = reduceHexValue;
function numberToHex(value) {
  var hex2 = value.toString(16);
  return hex2.length === 1 ? "0" + hex2 : hex2;
}
function colorToHex(color3) {
  return numberToHex(Math.round(color3 * 255));
}
function convertToHex(red, green, blue) {
  return reduceHexValue$1("#" + colorToHex(red) + colorToHex(green) + colorToHex(blue));
}
function hslToHex(hue3, saturation2, lightness) {
  return hslToRgb2(hue3, saturation2, lightness, convertToHex);
}
function hsl3(value, saturation2, lightness) {
  if (typeof value === "number" && typeof saturation2 === "number" && typeof lightness === "number") {
    return hslToHex(value, saturation2, lightness);
  } else if (typeof value === "object" && saturation2 === void 0 && lightness === void 0) {
    return hslToHex(value.hue, value.saturation, value.lightness);
  }
  throw new PolishedError(1);
}
function hsla2(value, saturation2, lightness, alpha) {
  if (typeof value === "number" && typeof saturation2 === "number" && typeof lightness === "number" && typeof alpha === "number") {
    return alpha >= 1 ? hslToHex(value, saturation2, lightness) : "rgba(" + hslToRgb2(value, saturation2, lightness) + "," + alpha + ")";
  } else if (typeof value === "object" && saturation2 === void 0 && lightness === void 0 && alpha === void 0) {
    return value.alpha >= 1 ? hslToHex(value.hue, value.saturation, value.lightness) : "rgba(" + hslToRgb2(value.hue, value.saturation, value.lightness) + "," + value.alpha + ")";
  }
  throw new PolishedError(2);
}
function rgb2(value, green, blue) {
  if (typeof value === "number" && typeof green === "number" && typeof blue === "number") {
    return reduceHexValue$1("#" + numberToHex(value) + numberToHex(green) + numberToHex(blue));
  } else if (typeof value === "object" && green === void 0 && blue === void 0) {
    return reduceHexValue$1("#" + numberToHex(value.red) + numberToHex(value.green) + numberToHex(value.blue));
  }
  throw new PolishedError(6);
}
function rgba2(firstValue, secondValue, thirdValue, fourthValue) {
  if (typeof firstValue === "string" && typeof secondValue === "number") {
    var rgbValue = parseToRgb(firstValue);
    return "rgba(" + rgbValue.red + "," + rgbValue.green + "," + rgbValue.blue + "," + secondValue + ")";
  } else if (typeof firstValue === "number" && typeof secondValue === "number" && typeof thirdValue === "number" && typeof fourthValue === "number") {
    return fourthValue >= 1 ? rgb2(firstValue, secondValue, thirdValue) : "rgba(" + firstValue + "," + secondValue + "," + thirdValue + "," + fourthValue + ")";
  } else if (typeof firstValue === "object" && secondValue === void 0 && thirdValue === void 0 && fourthValue === void 0) {
    return firstValue.alpha >= 1 ? rgb2(firstValue.red, firstValue.green, firstValue.blue) : "rgba(" + firstValue.red + "," + firstValue.green + "," + firstValue.blue + "," + firstValue.alpha + ")";
  }
  throw new PolishedError(7);
}
var isRgb = function isRgb2(color3) {
  return typeof color3.red === "number" && typeof color3.green === "number" && typeof color3.blue === "number" && (typeof color3.alpha !== "number" || typeof color3.alpha === "undefined");
};
var isRgba = function isRgba2(color3) {
  return typeof color3.red === "number" && typeof color3.green === "number" && typeof color3.blue === "number" && typeof color3.alpha === "number";
};
var isHsl = function isHsl2(color3) {
  return typeof color3.hue === "number" && typeof color3.saturation === "number" && typeof color3.lightness === "number" && (typeof color3.alpha !== "number" || typeof color3.alpha === "undefined");
};
var isHsla = function isHsla2(color3) {
  return typeof color3.hue === "number" && typeof color3.saturation === "number" && typeof color3.lightness === "number" && typeof color3.alpha === "number";
};
function toColorString(color3) {
  if (typeof color3 !== "object") throw new PolishedError(8);
  if (isRgba(color3)) return rgba2(color3);
  if (isRgb(color3)) return rgb2(color3);
  if (isHsla(color3)) return hsla2(color3);
  if (isHsl(color3)) return hsl3(color3);
  throw new PolishedError(8);
}
function curried(f2, length2, acc) {
  return function fn() {
    var combined = acc.concat(Array.prototype.slice.call(arguments));
    return combined.length >= length2 ? f2.apply(this, combined) : curried(f2, length2, combined);
  };
}
function curry(f2) {
  return curried(f2, f2.length, []);
}
function adjustHue(degree, color3) {
  if (color3 === "transparent") return color3;
  var hslColor = parseToHsl(color3);
  return toColorString(_extends({}, hslColor, {
    hue: hslColor.hue + parseFloat(degree)
  }));
}
var curriedAdjustHue = curry(adjustHue);
function guard(lowerBoundary, upperBoundary, value) {
  return Math.max(lowerBoundary, Math.min(upperBoundary, value));
}
function darken2(amount, color3) {
  if (color3 === "transparent") return color3;
  var hslColor = parseToHsl(color3);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness - parseFloat(amount))
  }));
}
var curriedDarken = curry(darken2);
function desaturate2(amount, color3) {
  if (color3 === "transparent") return color3;
  var hslColor = parseToHsl(color3);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation - parseFloat(amount))
  }));
}
var curriedDesaturate = curry(desaturate2);
function lighten2(amount, color3) {
  if (color3 === "transparent") return color3;
  var hslColor = parseToHsl(color3);
  return toColorString(_extends({}, hslColor, {
    lightness: guard(0, 1, hslColor.lightness + parseFloat(amount))
  }));
}
var curriedLighten = curry(lighten2);
function mix2(weight, color3, otherColor) {
  if (color3 === "transparent") return otherColor;
  if (otherColor === "transparent") return color3;
  if (weight === 0) return otherColor;
  var parsedColor1 = parseToRgb(color3);
  var color1 = _extends({}, parsedColor1, {
    alpha: typeof parsedColor1.alpha === "number" ? parsedColor1.alpha : 1
  });
  var parsedColor2 = parseToRgb(otherColor);
  var color22 = _extends({}, parsedColor2, {
    alpha: typeof parsedColor2.alpha === "number" ? parsedColor2.alpha : 1
  });
  var alphaDelta = color1.alpha - color22.alpha;
  var x2 = parseFloat(weight) * 2 - 1;
  var y2 = x2 * alphaDelta === -1 ? x2 : x2 + alphaDelta;
  var z2 = 1 + x2 * alphaDelta;
  var weight1 = (y2 / z2 + 1) / 2;
  var weight2 = 1 - weight1;
  var mixedColor = {
    red: Math.floor(color1.red * weight1 + color22.red * weight2),
    green: Math.floor(color1.green * weight1 + color22.green * weight2),
    blue: Math.floor(color1.blue * weight1 + color22.blue * weight2),
    alpha: color1.alpha * parseFloat(weight) + color22.alpha * (1 - parseFloat(weight))
  };
  return rgba2(mixedColor);
}
var curriedMix = curry(mix2);
var mix$1 = curriedMix;
function opacify(amount, color3) {
  if (color3 === "transparent") return color3;
  var parsedColor = parseToRgb(color3);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, (alpha * 100 + parseFloat(amount) * 100) / 100)
  });
  return rgba2(colorWithAlpha);
}
var curriedOpacify = curry(opacify);
var curriedOpacify$1 = curriedOpacify;
function saturate3(amount, color3) {
  if (color3 === "transparent") return color3;
  var hslColor = parseToHsl(color3);
  return toColorString(_extends({}, hslColor, {
    saturation: guard(0, 1, hslColor.saturation + parseFloat(amount))
  }));
}
var curriedSaturate = curry(saturate3);
function setHue(hue3, color3) {
  if (color3 === "transparent") return color3;
  return toColorString(_extends({}, parseToHsl(color3), {
    hue: parseFloat(hue3)
  }));
}
var curriedSetHue = curry(setHue);
function setLightness(lightness, color3) {
  if (color3 === "transparent") return color3;
  return toColorString(_extends({}, parseToHsl(color3), {
    lightness: parseFloat(lightness)
  }));
}
var curriedSetLightness = curry(setLightness);
function setSaturation(saturation2, color3) {
  if (color3 === "transparent") return color3;
  return toColorString(_extends({}, parseToHsl(color3), {
    saturation: parseFloat(saturation2)
  }));
}
var curriedSetSaturation = curry(setSaturation);
function shade(percentage, color3) {
  if (color3 === "transparent") return color3;
  return mix$1(parseFloat(percentage), "rgb(0, 0, 0)", color3);
}
var curriedShade = curry(shade);
function tint(percentage, color3) {
  if (color3 === "transparent") return color3;
  return mix$1(parseFloat(percentage), "rgb(255, 255, 255)", color3);
}
var curriedTint = curry(tint);
function transparentize(amount, color3) {
  if (color3 === "transparent") return color3;
  var parsedColor = parseToRgb(color3);
  var alpha = typeof parsedColor.alpha === "number" ? parsedColor.alpha : 1;
  var colorWithAlpha = _extends({}, parsedColor, {
    alpha: guard(0, 1, +(alpha * 100 - parseFloat(amount) * 100).toFixed(2) / 100)
  });
  return rgba2(colorWithAlpha);
}
var curriedTransparentize = curry(transparentize);

// node_modules/d3-selection/src/namespaces.js
var xhtml = "http://www.w3.org/1999/xhtml";
var namespaces_default = {
  svg: "http://www.w3.org/2000/svg",
  xhtml,
  xlink: "http://www.w3.org/1999/xlink",
  xml: "http://www.w3.org/XML/1998/namespace",
  xmlns: "http://www.w3.org/2000/xmlns/"
};

// node_modules/d3-selection/src/namespace.js
function namespace_default(name) {
  var prefix = name += "", i2 = prefix.indexOf(":");
  if (i2 >= 0 && (prefix = name.slice(0, i2)) !== "xmlns") name = name.slice(i2 + 1);
  return namespaces_default.hasOwnProperty(prefix) ? { space: namespaces_default[prefix], local: name } : name;
}

// node_modules/d3-selection/src/creator.js
function creatorInherit(name) {
  return function() {
    var document2 = this.ownerDocument, uri = this.namespaceURI;
    return uri === xhtml && document2.documentElement.namespaceURI === xhtml ? document2.createElement(name) : document2.createElementNS(uri, name);
  };
}
function creatorFixed(fullname) {
  return function() {
    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
  };
}
function creator_default(name) {
  var fullname = namespace_default(name);
  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
}

// node_modules/d3-selection/src/selector.js
function none() {
}
function selector_default(selector) {
  return selector == null ? none : function() {
    return this.querySelector(selector);
  };
}

// node_modules/d3-selection/src/selection/select.js
function select_default(select2) {
  if (typeof select2 !== "function") select2 = selector_default(select2);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], n2 = group2.length, subgroup = subgroups[j2] = new Array(n2), node, subnode, i2 = 0; i2 < n2; ++i2) {
      if ((node = group2[i2]) && (subnode = select2.call(node, node.__data__, i2, group2))) {
        if ("__data__" in node) subnode.__data__ = node.__data__;
        subgroup[i2] = subnode;
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/array.js
function array2(x2) {
  return x2 == null ? [] : Array.isArray(x2) ? x2 : Array.from(x2);
}

// node_modules/d3-selection/src/selectorAll.js
function empty() {
  return [];
}
function selectorAll_default(selector) {
  return selector == null ? empty : function() {
    return this.querySelectorAll(selector);
  };
}

// node_modules/d3-selection/src/selection/selectAll.js
function arrayAll(select2) {
  return function() {
    return array2(select2.apply(this, arguments));
  };
}
function selectAll_default(select2) {
  if (typeof select2 === "function") select2 = arrayAll(select2);
  else select2 = selectorAll_default(select2);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = [], parents = [], j2 = 0; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], n2 = group2.length, node, i2 = 0; i2 < n2; ++i2) {
      if (node = group2[i2]) {
        subgroups.push(select2.call(node, node.__data__, i2, group2));
        parents.push(node);
      }
    }
  }
  return new Selection(subgroups, parents);
}

// node_modules/d3-selection/src/matcher.js
function matcher_default(selector) {
  return function() {
    return this.matches(selector);
  };
}
function childMatcher(selector) {
  return function(node) {
    return node.matches(selector);
  };
}

// node_modules/d3-selection/src/selection/selectChild.js
var find = Array.prototype.find;
function childFind(match) {
  return function() {
    return find.call(this.children, match);
  };
}
function childFirst() {
  return this.firstElementChild;
}
function selectChild_default(match) {
  return this.select(match == null ? childFirst : childFind(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/selectChildren.js
var filter2 = Array.prototype.filter;
function children() {
  return Array.from(this.children);
}
function childrenFilter(match) {
  return function() {
    return filter2.call(this.children, match);
  };
}
function selectChildren_default(match) {
  return this.selectAll(match == null ? children : childrenFilter(typeof match === "function" ? match : childMatcher(match)));
}

// node_modules/d3-selection/src/selection/filter.js
function filter_default(match) {
  if (typeof match !== "function") match = matcher_default(match);
  for (var groups2 = this._groups, m2 = groups2.length, subgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], n2 = group2.length, subgroup = subgroups[j2] = [], node, i2 = 0; i2 < n2; ++i2) {
      if ((node = group2[i2]) && match.call(node, node.__data__, i2, group2)) {
        subgroup.push(node);
      }
    }
  }
  return new Selection(subgroups, this._parents);
}

// node_modules/d3-selection/src/selection/sparse.js
function sparse_default(update20) {
  return new Array(update20.length);
}

// node_modules/d3-selection/src/selection/enter.js
function enter_default() {
  return new Selection(this._enter || this._groups.map(sparse_default), this._parents);
}
function EnterNode(parent2, datum2) {
  this.ownerDocument = parent2.ownerDocument;
  this.namespaceURI = parent2.namespaceURI;
  this._next = null;
  this._parent = parent2;
  this.__data__ = datum2;
}
EnterNode.prototype = {
  constructor: EnterNode,
  appendChild: function(child) {
    return this._parent.insertBefore(child, this._next);
  },
  insertBefore: function(child, next) {
    return this._parent.insertBefore(child, next);
  },
  querySelector: function(selector) {
    return this._parent.querySelector(selector);
  },
  querySelectorAll: function(selector) {
    return this._parent.querySelectorAll(selector);
  }
};

// node_modules/d3-selection/src/constant.js
function constant_default3(x2) {
  return function() {
    return x2;
  };
}

// node_modules/d3-selection/src/selection/data.js
function bindIndex(parent2, group2, enter, update20, exit, data) {
  var i2 = 0, node, groupLength = group2.length, dataLength = data.length;
  for (; i2 < dataLength; ++i2) {
    if (node = group2[i2]) {
      node.__data__ = data[i2];
      update20[i2] = node;
    } else {
      enter[i2] = new EnterNode(parent2, data[i2]);
    }
  }
  for (; i2 < groupLength; ++i2) {
    if (node = group2[i2]) {
      exit[i2] = node;
    }
  }
}
function bindKey(parent2, group2, enter, update20, exit, data, key) {
  var i2, node, nodeByKeyValue = /* @__PURE__ */ new Map(), groupLength = group2.length, dataLength = data.length, keyValues = new Array(groupLength), keyValue;
  for (i2 = 0; i2 < groupLength; ++i2) {
    if (node = group2[i2]) {
      keyValues[i2] = keyValue = key.call(node, node.__data__, i2, group2) + "";
      if (nodeByKeyValue.has(keyValue)) {
        exit[i2] = node;
      } else {
        nodeByKeyValue.set(keyValue, node);
      }
    }
  }
  for (i2 = 0; i2 < dataLength; ++i2) {
    keyValue = key.call(parent2, data[i2], i2, data) + "";
    if (node = nodeByKeyValue.get(keyValue)) {
      update20[i2] = node;
      node.__data__ = data[i2];
      nodeByKeyValue.delete(keyValue);
    } else {
      enter[i2] = new EnterNode(parent2, data[i2]);
    }
  }
  for (i2 = 0; i2 < groupLength; ++i2) {
    if ((node = group2[i2]) && nodeByKeyValue.get(keyValues[i2]) === node) {
      exit[i2] = node;
    }
  }
}
function datum(node) {
  return node.__data__;
}
function data_default2(value, key) {
  if (!arguments.length) return Array.from(this, datum);
  var bind2 = key ? bindKey : bindIndex, parents = this._parents, groups2 = this._groups;
  if (typeof value !== "function") value = constant_default3(value);
  for (var m2 = groups2.length, update20 = new Array(m2), enter = new Array(m2), exit = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    var parent2 = parents[j2], group2 = groups2[j2], groupLength = group2.length, data = arraylike(value.call(parent2, parent2 && parent2.__data__, j2, parents)), dataLength = data.length, enterGroup = enter[j2] = new Array(dataLength), updateGroup = update20[j2] = new Array(dataLength), exitGroup = exit[j2] = new Array(groupLength);
    bind2(parent2, group2, enterGroup, updateGroup, exitGroup, data, key);
    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
      if (previous = enterGroup[i0]) {
        if (i0 >= i1) i1 = i0 + 1;
        while (!(next = updateGroup[i1]) && ++i1 < dataLength) ;
        previous._next = next || null;
      }
    }
  }
  update20 = new Selection(update20, parents);
  update20._enter = enter;
  update20._exit = exit;
  return update20;
}
function arraylike(data) {
  return typeof data === "object" && "length" in data ? data : Array.from(data);
}

// node_modules/d3-selection/src/selection/exit.js
function exit_default() {
  return new Selection(this._exit || this._groups.map(sparse_default), this._parents);
}

// node_modules/d3-selection/src/selection/join.js
function join_default(onenter, onupdate, onexit) {
  var enter = this.enter(), update20 = this, exit = this.exit();
  if (typeof onenter === "function") {
    enter = onenter(enter);
    if (enter) enter = enter.selection();
  } else {
    enter = enter.append(onenter + "");
  }
  if (onupdate != null) {
    update20 = onupdate(update20);
    if (update20) update20 = update20.selection();
  }
  if (onexit == null) exit.remove();
  else onexit(exit);
  return enter && update20 ? enter.merge(update20).order() : update20;
}

// node_modules/d3-selection/src/selection/merge.js
function merge_default2(context2) {
  var selection2 = context2.selection ? context2.selection() : context2;
  for (var groups0 = this._groups, groups1 = selection2._groups, m0 = groups0.length, m1 = groups1.length, m2 = Math.min(m0, m1), merges = new Array(m0), j2 = 0; j2 < m2; ++j2) {
    for (var group0 = groups0[j2], group1 = groups1[j2], n2 = group0.length, merge2 = merges[j2] = new Array(n2), node, i2 = 0; i2 < n2; ++i2) {
      if (node = group0[i2] || group1[i2]) {
        merge2[i2] = node;
      }
    }
  }
  for (; j2 < m0; ++j2) {
    merges[j2] = groups0[j2];
  }
  return new Selection(merges, this._parents);
}

// node_modules/d3-selection/src/selection/order.js
function order_default() {
  for (var groups2 = this._groups, j2 = -1, m2 = groups2.length; ++j2 < m2; ) {
    for (var group2 = groups2[j2], i2 = group2.length - 1, next = group2[i2], node; --i2 >= 0; ) {
      if (node = group2[i2]) {
        if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
        next = node;
      }
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/sort.js
function sort_default(compare) {
  if (!compare) compare = ascending2;
  function compareNode(a2, b) {
    return a2 && b ? compare(a2.__data__, b.__data__) : !a2 - !b;
  }
  for (var groups2 = this._groups, m2 = groups2.length, sortgroups = new Array(m2), j2 = 0; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], n2 = group2.length, sortgroup = sortgroups[j2] = new Array(n2), node, i2 = 0; i2 < n2; ++i2) {
      if (node = group2[i2]) {
        sortgroup[i2] = node;
      }
    }
    sortgroup.sort(compareNode);
  }
  return new Selection(sortgroups, this._parents).order();
}
function ascending2(a2, b) {
  return a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
}

// node_modules/d3-selection/src/selection/call.js
function call_default() {
  var callback = arguments[0];
  arguments[0] = this;
  callback.apply(null, arguments);
  return this;
}

// node_modules/d3-selection/src/selection/nodes.js
function nodes_default() {
  return Array.from(this);
}

// node_modules/d3-selection/src/selection/node.js
function node_default() {
  for (var groups2 = this._groups, j2 = 0, m2 = groups2.length; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], i2 = 0, n2 = group2.length; i2 < n2; ++i2) {
      var node = group2[i2];
      if (node) return node;
    }
  }
  return null;
}

// node_modules/d3-selection/src/selection/size.js
function size_default2() {
  let size = 0;
  for (const node of this) ++size;
  return size;
}

// node_modules/d3-selection/src/selection/empty.js
function empty_default() {
  return !this.node();
}

// node_modules/d3-selection/src/selection/each.js
function each_default(callback) {
  for (var groups2 = this._groups, j2 = 0, m2 = groups2.length; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], i2 = 0, n2 = group2.length, node; i2 < n2; ++i2) {
      if (node = group2[i2]) callback.call(node, node.__data__, i2, group2);
    }
  }
  return this;
}

// node_modules/d3-selection/src/selection/attr.js
function attrRemove(name) {
  return function() {
    this.removeAttribute(name);
  };
}
function attrRemoveNS(fullname) {
  return function() {
    this.removeAttributeNS(fullname.space, fullname.local);
  };
}
function attrConstant(name, value) {
  return function() {
    this.setAttribute(name, value);
  };
}
function attrConstantNS(fullname, value) {
  return function() {
    this.setAttributeNS(fullname.space, fullname.local, value);
  };
}
function attrFunction(name, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null) this.removeAttribute(name);
    else this.setAttribute(name, v3);
  };
}
function attrFunctionNS(fullname, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null) this.removeAttributeNS(fullname.space, fullname.local);
    else this.setAttributeNS(fullname.space, fullname.local, v3);
  };
}
function attr_default(name, value) {
  var fullname = namespace_default(name);
  if (arguments.length < 2) {
    var node = this.node();
    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
  }
  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
}

// node_modules/d3-selection/src/window.js
function window_default(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || node.document && node || node.defaultView;
}

// node_modules/d3-selection/src/selection/style.js
function styleRemove(name) {
  return function() {
    this.style.removeProperty(name);
  };
}
function styleConstant(name, value, priority) {
  return function() {
    this.style.setProperty(name, value, priority);
  };
}
function styleFunction(name, value, priority) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null) this.style.removeProperty(name);
    else this.style.setProperty(name, v3, priority);
  };
}
function style_default(name, value, priority) {
  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
}
function styleValue(node, name) {
  return node.style.getPropertyValue(name) || window_default(node).getComputedStyle(node, null).getPropertyValue(name);
}

// node_modules/d3-selection/src/selection/property.js
function propertyRemove(name) {
  return function() {
    delete this[name];
  };
}
function propertyConstant(name, value) {
  return function() {
    this[name] = value;
  };
}
function propertyFunction(name, value) {
  return function() {
    var v3 = value.apply(this, arguments);
    if (v3 == null) delete this[name];
    else this[name] = v3;
  };
}
function property_default(name, value) {
  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
}

// node_modules/d3-selection/src/selection/classed.js
function classArray(string) {
  return string.trim().split(/^|\s+/);
}
function classList(node) {
  return node.classList || new ClassList(node);
}
function ClassList(node) {
  this._node = node;
  this._names = classArray(node.getAttribute("class") || "");
}
ClassList.prototype = {
  add: function(name) {
    var i2 = this._names.indexOf(name);
    if (i2 < 0) {
      this._names.push(name);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  remove: function(name) {
    var i2 = this._names.indexOf(name);
    if (i2 >= 0) {
      this._names.splice(i2, 1);
      this._node.setAttribute("class", this._names.join(" "));
    }
  },
  contains: function(name) {
    return this._names.indexOf(name) >= 0;
  }
};
function classedAdd(node, names2) {
  var list = classList(node), i2 = -1, n2 = names2.length;
  while (++i2 < n2) list.add(names2[i2]);
}
function classedRemove(node, names2) {
  var list = classList(node), i2 = -1, n2 = names2.length;
  while (++i2 < n2) list.remove(names2[i2]);
}
function classedTrue(names2) {
  return function() {
    classedAdd(this, names2);
  };
}
function classedFalse(names2) {
  return function() {
    classedRemove(this, names2);
  };
}
function classedFunction(names2, value) {
  return function() {
    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names2);
  };
}
function classed_default(name, value) {
  var names2 = classArray(name + "");
  if (arguments.length < 2) {
    var list = classList(this.node()), i2 = -1, n2 = names2.length;
    while (++i2 < n2) if (!list.contains(names2[i2])) return false;
    return true;
  }
  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names2, value));
}

// node_modules/d3-selection/src/selection/text.js
function textRemove() {
  this.textContent = "";
}
function textConstant(value) {
  return function() {
    this.textContent = value;
  };
}
function textFunction(value) {
  return function() {
    var v3 = value.apply(this, arguments);
    this.textContent = v3 == null ? "" : v3;
  };
}
function text_default(value) {
  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
}

// node_modules/d3-selection/src/selection/html.js
function htmlRemove() {
  this.innerHTML = "";
}
function htmlConstant(value) {
  return function() {
    this.innerHTML = value;
  };
}
function htmlFunction(value) {
  return function() {
    var v3 = value.apply(this, arguments);
    this.innerHTML = v3 == null ? "" : v3;
  };
}
function html_default(value) {
  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
}

// node_modules/d3-selection/src/selection/raise.js
function raise() {
  if (this.nextSibling) this.parentNode.appendChild(this);
}
function raise_default() {
  return this.each(raise);
}

// node_modules/d3-selection/src/selection/lower.js
function lower() {
  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
}
function lower_default() {
  return this.each(lower);
}

// node_modules/d3-selection/src/selection/append.js
function append_default(name) {
  var create = typeof name === "function" ? name : creator_default(name);
  return this.select(function() {
    return this.appendChild(create.apply(this, arguments));
  });
}

// node_modules/d3-selection/src/selection/insert.js
function constantNull() {
  return null;
}
function insert_default(name, before) {
  var create = typeof name === "function" ? name : creator_default(name), select2 = before == null ? constantNull : typeof before === "function" ? before : selector_default(before);
  return this.select(function() {
    return this.insertBefore(create.apply(this, arguments), select2.apply(this, arguments) || null);
  });
}

// node_modules/d3-selection/src/selection/remove.js
function remove2() {
  var parent2 = this.parentNode;
  if (parent2) parent2.removeChild(this);
}
function remove_default2() {
  return this.each(remove2);
}

// node_modules/d3-selection/src/selection/clone.js
function selection_cloneShallow() {
  var clone2 = this.cloneNode(false), parent2 = this.parentNode;
  return parent2 ? parent2.insertBefore(clone2, this.nextSibling) : clone2;
}
function selection_cloneDeep() {
  var clone2 = this.cloneNode(true), parent2 = this.parentNode;
  return parent2 ? parent2.insertBefore(clone2, this.nextSibling) : clone2;
}
function clone_default(deep) {
  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
}

// node_modules/d3-selection/src/selection/datum.js
function datum_default(value) {
  return arguments.length ? this.property("__data__", value) : this.node().__data__;
}

// node_modules/d3-selection/src/selection/on.js
function contextListener(listener) {
  return function(event) {
    listener.call(this, event, this.__data__);
  };
}
function parseTypenames(typenames) {
  return typenames.trim().split(/^|\s+/).map(function(t4) {
    var name = "", i2 = t4.indexOf(".");
    if (i2 >= 0) name = t4.slice(i2 + 1), t4 = t4.slice(0, i2);
    return { type: t4, name };
  });
}
function onRemove(typename) {
  return function() {
    var on = this.__on;
    if (!on) return;
    for (var j2 = 0, i2 = -1, m2 = on.length, o2; j2 < m2; ++j2) {
      if (o2 = on[j2], (!typename.type || o2.type === typename.type) && o2.name === typename.name) {
        this.removeEventListener(o2.type, o2.listener, o2.options);
      } else {
        on[++i2] = o2;
      }
    }
    if (++i2) on.length = i2;
    else delete this.__on;
  };
}
function onAdd(typename, value, options) {
  return function() {
    var on = this.__on, o2, listener = contextListener(value);
    if (on) for (var j2 = 0, m2 = on.length; j2 < m2; ++j2) {
      if ((o2 = on[j2]).type === typename.type && o2.name === typename.name) {
        this.removeEventListener(o2.type, o2.listener, o2.options);
        this.addEventListener(o2.type, o2.listener = listener, o2.options = options);
        o2.value = value;
        return;
      }
    }
    this.addEventListener(typename.type, listener, options);
    o2 = { type: typename.type, name: typename.name, value, listener, options };
    if (!on) this.__on = [o2];
    else on.push(o2);
  };
}
function on_default(typename, value, options) {
  var typenames = parseTypenames(typename + ""), i2, n2 = typenames.length, t4;
  if (arguments.length < 2) {
    var on = this.node().__on;
    if (on) for (var j2 = 0, m2 = on.length, o2; j2 < m2; ++j2) {
      for (i2 = 0, o2 = on[j2]; i2 < n2; ++i2) {
        if ((t4 = typenames[i2]).type === o2.type && t4.name === o2.name) {
          return o2.value;
        }
      }
    }
    return;
  }
  on = value ? onAdd : onRemove;
  for (i2 = 0; i2 < n2; ++i2) this.each(on(typenames[i2], value, options));
  return this;
}

// node_modules/d3-selection/src/selection/dispatch.js
function dispatchEvent(node, type, params) {
  var window2 = window_default(node), event = window2.CustomEvent;
  if (typeof event === "function") {
    event = new event(type, params);
  } else {
    event = window2.document.createEvent("Event");
    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
    else event.initEvent(type, false, false);
  }
  node.dispatchEvent(event);
}
function dispatchConstant(type, params) {
  return function() {
    return dispatchEvent(this, type, params);
  };
}
function dispatchFunction(type, params) {
  return function() {
    return dispatchEvent(this, type, params.apply(this, arguments));
  };
}
function dispatch_default(type, params) {
  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
}

// node_modules/d3-selection/src/selection/iterator.js
function* iterator_default() {
  for (var groups2 = this._groups, j2 = 0, m2 = groups2.length; j2 < m2; ++j2) {
    for (var group2 = groups2[j2], i2 = 0, n2 = group2.length, node; i2 < n2; ++i2) {
      if (node = group2[i2]) yield node;
    }
  }
}

// node_modules/d3-selection/src/selection/index.js
var root2 = [null];
function Selection(groups2, parents) {
  this._groups = groups2;
  this._parents = parents;
}
function selection() {
  return new Selection([[document.documentElement]], root2);
}
function selection_selection() {
  return this;
}
Selection.prototype = selection.prototype = {
  constructor: Selection,
  select: select_default,
  selectAll: selectAll_default,
  selectChild: selectChild_default,
  selectChildren: selectChildren_default,
  filter: filter_default,
  data: data_default2,
  enter: enter_default,
  exit: exit_default,
  join: join_default,
  merge: merge_default2,
  selection: selection_selection,
  order: order_default,
  sort: sort_default,
  call: call_default,
  nodes: nodes_default,
  node: node_default,
  size: size_default2,
  empty: empty_default,
  each: each_default,
  attr: attr_default,
  style: style_default,
  property: property_default,
  classed: classed_default,
  text: text_default,
  html: html_default,
  raise: raise_default,
  lower: lower_default,
  append: append_default,
  insert: insert_default,
  remove: remove_default2,
  clone: clone_default,
  datum: datum_default,
  on: on_default,
  dispatch: dispatch_default,
  [Symbol.iterator]: iterator_default
};

// node_modules/d3-selection/src/select.js
function select_default2(selector) {
  return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root2);
}

// node_modules/d3-selection/src/local.js
var nextId2 = 0;
function local() {
  return new Local();
}
function Local() {
  this._ = "@" + (++nextId2).toString(36);
}
Local.prototype = local.prototype = {
  constructor: Local,
  get: function(node) {
    var id2 = this._;
    while (!(id2 in node)) if (!(node = node.parentNode)) return;
    return node[id2];
  },
  set: function(node, value) {
    return node[this._] = value;
  },
  remove: function(node) {
    return this._ in node && delete node[this._];
  },
  toString: function() {
    return this._;
  }
};

// node_modules/d3-selection/src/sourceEvent.js
function sourceEvent_default(event) {
  let sourceEvent;
  while (sourceEvent = event.sourceEvent) event = sourceEvent;
  return event;
}

// node_modules/d3-selection/src/pointer.js
function pointer_default(event, node) {
  event = sourceEvent_default(event);
  if (node === void 0) node = event.currentTarget;
  if (node) {
    var svg = node.ownerSVGElement || node;
    if (svg.createSVGPoint) {
      var point2 = svg.createSVGPoint();
      point2.x = event.clientX, point2.y = event.clientY;
      point2 = point2.matrixTransform(node.getScreenCTM().inverse());
      return [point2.x, point2.y];
    }
    if (node.getBoundingClientRect) {
      var rect = node.getBoundingClientRect();
      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }
  }
  return [event.pageX, event.pageY];
}

// node_modules/preact/dist/preact.module.js
var n;
var l;
var u4;
var t;
var i;
var r;
var o;
var e;
var f;
var c3;
var s;
var a;
var h;
var p = {};
var v2 = [];
var y = /acit|ex(?:s|g|n|p|$)|rph|grid|ows|mnc|ntw|ine[ch]|zoo|^ord|itera/i;
var w = Array.isArray;
function d(n2, l2) {
  for (var u5 in l2) n2[u5] = l2[u5];
  return n2;
}
function g(n2) {
  n2 && n2.parentNode && n2.parentNode.removeChild(n2);
}
function _(l2, u5, t4) {
  var i2, r2, o2, e3 = {};
  for (o2 in u5) "key" == o2 ? i2 = u5[o2] : "ref" == o2 ? r2 = u5[o2] : e3[o2] = u5[o2];
  if (arguments.length > 2 && (e3.children = arguments.length > 3 ? n.call(arguments, 2) : t4), "function" == typeof l2 && null != l2.defaultProps) for (o2 in l2.defaultProps) void 0 === e3[o2] && (e3[o2] = l2.defaultProps[o2]);
  return m(l2, e3, i2, r2, null);
}
function m(n2, t4, i2, r2, o2) {
  var e3 = { type: n2, props: t4, key: i2, ref: r2, __k: null, __: null, __b: 0, __e: null, __c: null, constructor: void 0, __v: null == o2 ? ++u4 : o2, __i: -1, __u: 0 };
  return null == o2 && null != l.vnode && l.vnode(e3), e3;
}
function k(n2) {
  return n2.children;
}
function x(n2, l2) {
  this.props = n2, this.context = l2;
}
function S(n2, l2) {
  if (null == l2) return n2.__ ? S(n2.__, n2.__i + 1) : null;
  for (var u5; l2 < n2.__k.length; l2++) if (null != (u5 = n2.__k[l2]) && null != u5.__e) return u5.__e;
  return "function" == typeof n2.type ? S(n2) : null;
}
function C3(n2) {
  var l2, u5;
  if (null != (n2 = n2.__) && null != n2.__c) {
    for (n2.__e = n2.__c.base = null, l2 = 0; l2 < n2.__k.length; l2++) if (null != (u5 = n2.__k[l2]) && null != u5.__e) {
      n2.__e = n2.__c.base = u5.__e;
      break;
    }
    return C3(n2);
  }
}
function M2(n2) {
  (!n2.__d && (n2.__d = true) && i.push(n2) && !$.__r++ || r != l.debounceRendering) && ((r = l.debounceRendering) || o)($);
}
function $() {
  for (var n2, u5, t4, r2, o2, f2, c4, s2 = 1; i.length; ) i.length > s2 && i.sort(e), n2 = i.shift(), s2 = i.length, n2.__d && (t4 = void 0, o2 = (r2 = (u5 = n2).__v).__e, f2 = [], c4 = [], u5.__P && ((t4 = d({}, r2)).__v = r2.__v + 1, l.vnode && l.vnode(t4), O(u5.__P, t4, r2, u5.__n, u5.__P.namespaceURI, 32 & r2.__u ? [o2] : null, f2, null == o2 ? S(r2) : o2, !!(32 & r2.__u), c4), t4.__v = r2.__v, t4.__.__k[t4.__i] = t4, N(f2, t4, c4), t4.__e != o2 && C3(t4)));
  $.__r = 0;
}
function I(n2, l2, u5, t4, i2, r2, o2, e3, f2, c4, s2) {
  var a2, h2, y2, w4, d2, g2, _2 = t4 && t4.__k || v2, m2 = l2.length;
  for (f2 = P(u5, l2, _2, f2, m2), a2 = 0; a2 < m2; a2++) null != (y2 = u5.__k[a2]) && (h2 = -1 == y2.__i ? p : _2[y2.__i] || p, y2.__i = a2, g2 = O(n2, y2, h2, i2, r2, o2, e3, f2, c4, s2), w4 = y2.__e, y2.ref && h2.ref != y2.ref && (h2.ref && B3(h2.ref, null, y2), s2.push(y2.ref, y2.__c || w4, y2)), null == d2 && null != w4 && (d2 = w4), 4 & y2.__u || h2.__k === y2.__k ? f2 = A5(y2, f2, n2) : "function" == typeof y2.type && void 0 !== g2 ? f2 = g2 : w4 && (f2 = w4.nextSibling), y2.__u &= -7);
  return u5.__e = d2, f2;
}
function P(n2, l2, u5, t4, i2) {
  var r2, o2, e3, f2, c4, s2 = u5.length, a2 = s2, h2 = 0;
  for (n2.__k = new Array(i2), r2 = 0; r2 < i2; r2++) null != (o2 = l2[r2]) && "boolean" != typeof o2 && "function" != typeof o2 ? (f2 = r2 + h2, (o2 = n2.__k[r2] = "string" == typeof o2 || "number" == typeof o2 || "bigint" == typeof o2 || o2.constructor == String ? m(null, o2, null, null, null) : w(o2) ? m(k, { children: o2 }, null, null, null) : null == o2.constructor && o2.__b > 0 ? m(o2.type, o2.props, o2.key, o2.ref ? o2.ref : null, o2.__v) : o2).__ = n2, o2.__b = n2.__b + 1, e3 = null, -1 != (c4 = o2.__i = L(o2, u5, f2, a2)) && (a2--, (e3 = u5[c4]) && (e3.__u |= 2)), null == e3 || null == e3.__v ? (-1 == c4 && (i2 > s2 ? h2-- : i2 < s2 && h2++), "function" != typeof o2.type && (o2.__u |= 4)) : c4 != f2 && (c4 == f2 - 1 ? h2-- : c4 == f2 + 1 ? h2++ : (c4 > f2 ? h2-- : h2++, o2.__u |= 4))) : n2.__k[r2] = null;
  if (a2) for (r2 = 0; r2 < s2; r2++) null != (e3 = u5[r2]) && 0 == (2 & e3.__u) && (e3.__e == t4 && (t4 = S(e3)), D3(e3, e3));
  return t4;
}
function A5(n2, l2, u5) {
  var t4, i2;
  if ("function" == typeof n2.type) {
    for (t4 = n2.__k, i2 = 0; t4 && i2 < t4.length; i2++) t4[i2] && (t4[i2].__ = n2, l2 = A5(t4[i2], l2, u5));
    return l2;
  }
  n2.__e != l2 && (l2 && n2.type && !u5.contains(l2) && (l2 = S(n2)), u5.insertBefore(n2.__e, l2 || null), l2 = n2.__e);
  do {
    l2 = l2 && l2.nextSibling;
  } while (null != l2 && 8 == l2.nodeType);
  return l2;
}
function L(n2, l2, u5, t4) {
  var i2, r2, o2, e3 = n2.key, f2 = n2.type, c4 = l2[u5], s2 = null != c4 && 0 == (2 & c4.__u);
  if (null === c4 && null == n2.key || s2 && e3 == c4.key && f2 == c4.type) return u5;
  if (t4 > (s2 ? 1 : 0)) {
    for (i2 = u5 - 1, r2 = u5 + 1; i2 >= 0 || r2 < l2.length; ) if (null != (c4 = l2[o2 = i2 >= 0 ? i2-- : r2++]) && 0 == (2 & c4.__u) && e3 == c4.key && f2 == c4.type) return o2;
  }
  return -1;
}
function T(n2, l2, u5) {
  "-" == l2[0] ? n2.setProperty(l2, null == u5 ? "" : u5) : n2[l2] = null == u5 ? "" : "number" != typeof u5 || y.test(l2) ? u5 : u5 + "px";
}
function j(n2, l2, u5, t4, i2) {
  var r2, o2;
  n: if ("style" == l2) if ("string" == typeof u5) n2.style.cssText = u5;
  else {
    if ("string" == typeof t4 && (n2.style.cssText = t4 = ""), t4) for (l2 in t4) u5 && l2 in u5 || T(n2.style, l2, "");
    if (u5) for (l2 in u5) t4 && u5[l2] == t4[l2] || T(n2.style, l2, u5[l2]);
  }
  else if ("o" == l2[0] && "n" == l2[1]) r2 = l2 != (l2 = l2.replace(f, "$1")), o2 = l2.toLowerCase(), l2 = o2 in n2 || "onFocusOut" == l2 || "onFocusIn" == l2 ? o2.slice(2) : l2.slice(2), n2.l || (n2.l = {}), n2.l[l2 + r2] = u5, u5 ? t4 ? u5.u = t4.u : (u5.u = c3, n2.addEventListener(l2, r2 ? a : s, r2)) : n2.removeEventListener(l2, r2 ? a : s, r2);
  else {
    if ("http://www.w3.org/2000/svg" == i2) l2 = l2.replace(/xlink(H|:h)/, "h").replace(/sName$/, "s");
    else if ("width" != l2 && "height" != l2 && "href" != l2 && "list" != l2 && "form" != l2 && "tabIndex" != l2 && "download" != l2 && "rowSpan" != l2 && "colSpan" != l2 && "role" != l2 && "popover" != l2 && l2 in n2) try {
      n2[l2] = null == u5 ? "" : u5;
      break n;
    } catch (n3) {
    }
    "function" == typeof u5 || (null == u5 || false === u5 && "-" != l2[4] ? n2.removeAttribute(l2) : n2.setAttribute(l2, "popover" == l2 && 1 == u5 ? "" : u5));
  }
}
function F(n2) {
  return function(u5) {
    if (this.l) {
      var t4 = this.l[u5.type + n2];
      if (null == u5.t) u5.t = c3++;
      else if (u5.t < t4.u) return;
      return t4(l.event ? l.event(u5) : u5);
    }
  };
}
function O(n2, u5, t4, i2, r2, o2, e3, f2, c4, s2) {
  var a2, h2, p2, v3, y2, _2, m2, b, S2, C4, M3, $2, P2, A6, H, L2, T2, j2 = u5.type;
  if (null != u5.constructor) return null;
  128 & t4.__u && (c4 = !!(32 & t4.__u), o2 = [f2 = u5.__e = t4.__e]), (a2 = l.__b) && a2(u5);
  n: if ("function" == typeof j2) try {
    if (b = u5.props, S2 = "prototype" in j2 && j2.prototype.render, C4 = (a2 = j2.contextType) && i2[a2.__c], M3 = a2 ? C4 ? C4.props.value : a2.__ : i2, t4.__c ? m2 = (h2 = u5.__c = t4.__c).__ = h2.__E : (S2 ? u5.__c = h2 = new j2(b, M3) : (u5.__c = h2 = new x(b, M3), h2.constructor = j2, h2.render = E2), C4 && C4.sub(h2), h2.props = b, h2.state || (h2.state = {}), h2.context = M3, h2.__n = i2, p2 = h2.__d = true, h2.__h = [], h2._sb = []), S2 && null == h2.__s && (h2.__s = h2.state), S2 && null != j2.getDerivedStateFromProps && (h2.__s == h2.state && (h2.__s = d({}, h2.__s)), d(h2.__s, j2.getDerivedStateFromProps(b, h2.__s))), v3 = h2.props, y2 = h2.state, h2.__v = u5, p2) S2 && null == j2.getDerivedStateFromProps && null != h2.componentWillMount && h2.componentWillMount(), S2 && null != h2.componentDidMount && h2.__h.push(h2.componentDidMount);
    else {
      if (S2 && null == j2.getDerivedStateFromProps && b !== v3 && null != h2.componentWillReceiveProps && h2.componentWillReceiveProps(b, M3), !h2.__e && null != h2.shouldComponentUpdate && false === h2.shouldComponentUpdate(b, h2.__s, M3) || u5.__v == t4.__v) {
        for (u5.__v != t4.__v && (h2.props = b, h2.state = h2.__s, h2.__d = false), u5.__e = t4.__e, u5.__k = t4.__k, u5.__k.some(function(n3) {
          n3 && (n3.__ = u5);
        }), $2 = 0; $2 < h2._sb.length; $2++) h2.__h.push(h2._sb[$2]);
        h2._sb = [], h2.__h.length && e3.push(h2);
        break n;
      }
      null != h2.componentWillUpdate && h2.componentWillUpdate(b, h2.__s, M3), S2 && null != h2.componentDidUpdate && h2.__h.push(function() {
        h2.componentDidUpdate(v3, y2, _2);
      });
    }
    if (h2.context = M3, h2.props = b, h2.__P = n2, h2.__e = false, P2 = l.__r, A6 = 0, S2) {
      for (h2.state = h2.__s, h2.__d = false, P2 && P2(u5), a2 = h2.render(h2.props, h2.state, h2.context), H = 0; H < h2._sb.length; H++) h2.__h.push(h2._sb[H]);
      h2._sb = [];
    } else do {
      h2.__d = false, P2 && P2(u5), a2 = h2.render(h2.props, h2.state, h2.context), h2.state = h2.__s;
    } while (h2.__d && ++A6 < 25);
    h2.state = h2.__s, null != h2.getChildContext && (i2 = d(d({}, i2), h2.getChildContext())), S2 && !p2 && null != h2.getSnapshotBeforeUpdate && (_2 = h2.getSnapshotBeforeUpdate(v3, y2)), L2 = a2, null != a2 && a2.type === k && null == a2.key && (L2 = V(a2.props.children)), f2 = I(n2, w(L2) ? L2 : [L2], u5, t4, i2, r2, o2, e3, f2, c4, s2), h2.base = u5.__e, u5.__u &= -161, h2.__h.length && e3.push(h2), m2 && (h2.__E = h2.__ = null);
  } catch (n3) {
    if (u5.__v = null, c4 || null != o2) if (n3.then) {
      for (u5.__u |= c4 ? 160 : 128; f2 && 8 == f2.nodeType && f2.nextSibling; ) f2 = f2.nextSibling;
      o2[o2.indexOf(f2)] = null, u5.__e = f2;
    } else {
      for (T2 = o2.length; T2--; ) g(o2[T2]);
      z(u5);
    }
    else u5.__e = t4.__e, u5.__k = t4.__k, n3.then || z(u5);
    l.__e(n3, u5, t4);
  }
  else null == o2 && u5.__v == t4.__v ? (u5.__k = t4.__k, u5.__e = t4.__e) : f2 = u5.__e = q(t4.__e, u5, t4, i2, r2, o2, e3, c4, s2);
  return (a2 = l.diffed) && a2(u5), 128 & u5.__u ? void 0 : f2;
}
function z(n2) {
  n2 && n2.__c && (n2.__c.__e = true), n2 && n2.__k && n2.__k.forEach(z);
}
function N(n2, u5, t4) {
  for (var i2 = 0; i2 < t4.length; i2++) B3(t4[i2], t4[++i2], t4[++i2]);
  l.__c && l.__c(u5, n2), n2.some(function(u6) {
    try {
      n2 = u6.__h, u6.__h = [], n2.some(function(n3) {
        n3.call(u6);
      });
    } catch (n3) {
      l.__e(n3, u6.__v);
    }
  });
}
function V(n2) {
  return "object" != typeof n2 || null == n2 || n2.__b && n2.__b > 0 ? n2 : w(n2) ? n2.map(V) : d({}, n2);
}
function q(u5, t4, i2, r2, o2, e3, f2, c4, s2) {
  var a2, h2, v3, y2, d2, _2, m2, b = i2.props, k2 = t4.props, x2 = t4.type;
  if ("svg" == x2 ? o2 = "http://www.w3.org/2000/svg" : "math" == x2 ? o2 = "http://www.w3.org/1998/Math/MathML" : o2 || (o2 = "http://www.w3.org/1999/xhtml"), null != e3) {
    for (a2 = 0; a2 < e3.length; a2++) if ((d2 = e3[a2]) && "setAttribute" in d2 == !!x2 && (x2 ? d2.localName == x2 : 3 == d2.nodeType)) {
      u5 = d2, e3[a2] = null;
      break;
    }
  }
  if (null == u5) {
    if (null == x2) return document.createTextNode(k2);
    u5 = document.createElementNS(o2, x2, k2.is && k2), c4 && (l.__m && l.__m(t4, e3), c4 = false), e3 = null;
  }
  if (null == x2) b === k2 || c4 && u5.data == k2 || (u5.data = k2);
  else {
    if (e3 = e3 && n.call(u5.childNodes), b = i2.props || p, !c4 && null != e3) for (b = {}, a2 = 0; a2 < u5.attributes.length; a2++) b[(d2 = u5.attributes[a2]).name] = d2.value;
    for (a2 in b) if (d2 = b[a2], "children" == a2) ;
    else if ("dangerouslySetInnerHTML" == a2) v3 = d2;
    else if (!(a2 in k2)) {
      if ("value" == a2 && "defaultValue" in k2 || "checked" == a2 && "defaultChecked" in k2) continue;
      j(u5, a2, null, d2, o2);
    }
    for (a2 in k2) d2 = k2[a2], "children" == a2 ? y2 = d2 : "dangerouslySetInnerHTML" == a2 ? h2 = d2 : "value" == a2 ? _2 = d2 : "checked" == a2 ? m2 = d2 : c4 && "function" != typeof d2 || b[a2] === d2 || j(u5, a2, d2, b[a2], o2);
    if (h2) c4 || v3 && (h2.__html == v3.__html || h2.__html == u5.innerHTML) || (u5.innerHTML = h2.__html), t4.__k = [];
    else if (v3 && (u5.innerHTML = ""), I("template" == t4.type ? u5.content : u5, w(y2) ? y2 : [y2], t4, i2, r2, "foreignObject" == x2 ? "http://www.w3.org/1999/xhtml" : o2, e3, f2, e3 ? e3[0] : i2.__k && S(i2, 0), c4, s2), null != e3) for (a2 = e3.length; a2--; ) g(e3[a2]);
    c4 || (a2 = "value", "progress" == x2 && null == _2 ? u5.removeAttribute("value") : null != _2 && (_2 !== u5[a2] || "progress" == x2 && !_2 || "option" == x2 && _2 != b[a2]) && j(u5, a2, _2, b[a2], o2), a2 = "checked", null != m2 && m2 != u5[a2] && j(u5, a2, m2, b[a2], o2));
  }
  return u5;
}
function B3(n2, u5, t4) {
  try {
    if ("function" == typeof n2) {
      var i2 = "function" == typeof n2.__u;
      i2 && n2.__u(), i2 && null == u5 || (n2.__u = n2(u5));
    } else n2.current = u5;
  } catch (n3) {
    l.__e(n3, t4);
  }
}
function D3(n2, u5, t4) {
  var i2, r2;
  if (l.unmount && l.unmount(n2), (i2 = n2.ref) && (i2.current && i2.current != n2.__e || B3(i2, null, u5)), null != (i2 = n2.__c)) {
    if (i2.componentWillUnmount) try {
      i2.componentWillUnmount();
    } catch (n3) {
      l.__e(n3, u5);
    }
    i2.base = i2.__P = null;
  }
  if (i2 = n2.__k) for (r2 = 0; r2 < i2.length; r2++) i2[r2] && D3(i2[r2], u5, t4 || "function" != typeof n2.type);
  t4 || g(n2.__e), n2.__c = n2.__ = n2.__e = void 0;
}
function E2(n2, l2, u5) {
  return this.constructor(n2, u5);
}
function G(u5, t4, i2) {
  var r2, o2, e3, f2;
  t4 == document && (t4 = document.documentElement), l.__ && l.__(u5, t4), o2 = (r2 = "function" == typeof i2) ? null : i2 && i2.__k || t4.__k, e3 = [], f2 = [], O(t4, u5 = (!r2 && i2 || t4).__k = _(k, null, [u5]), o2 || p, p, t4.namespaceURI, !r2 && i2 ? [i2] : o2 ? null : t4.firstChild ? n.call(t4.childNodes) : null, e3, !r2 && i2 ? i2 : o2 ? o2.__e : t4.firstChild, r2, f2), N(e3, u5, f2);
}
function K2(l2, u5, t4) {
  var i2, r2, o2, e3, f2 = d({}, l2.props);
  for (o2 in l2.type && l2.type.defaultProps && (e3 = l2.type.defaultProps), u5) "key" == o2 ? i2 = u5[o2] : "ref" == o2 ? r2 = u5[o2] : f2[o2] = void 0 === u5[o2] && null != e3 ? e3[o2] : u5[o2];
  return arguments.length > 2 && (f2.children = arguments.length > 3 ? n.call(arguments, 2) : t4), m(l2.type, f2, i2 || l2.key, r2 || l2.ref, null);
}
n = v2.slice, l = { __e: function(n2, l2, u5, t4) {
  for (var i2, r2, o2; l2 = l2.__; ) if ((i2 = l2.__c) && !i2.__) try {
    if ((r2 = i2.constructor) && null != r2.getDerivedStateFromError && (i2.setState(r2.getDerivedStateFromError(n2)), o2 = i2.__d), null != i2.componentDidCatch && (i2.componentDidCatch(n2, t4 || {}), o2 = i2.__d), o2) return i2.__E = i2;
  } catch (l3) {
    n2 = l3;
  }
  throw n2;
} }, u4 = 0, t = function(n2) {
  return null != n2 && null == n2.constructor;
}, x.prototype.setState = function(n2, l2) {
  var u5;
  u5 = null != this.__s && this.__s != this.state ? this.__s : this.__s = d({}, this.state), "function" == typeof n2 && (n2 = n2(d({}, u5), this.props)), n2 && d(u5, n2), null != n2 && this.__v && (l2 && this._sb.push(l2), M2(this));
}, x.prototype.forceUpdate = function(n2) {
  this.__v && (this.__e = true, n2 && this.__h.push(n2), M2(this));
}, x.prototype.render = k, i = [], o = "function" == typeof Promise ? Promise.prototype.then.bind(Promise.resolve()) : setTimeout, e = function(n2, l2) {
  return n2.__v.__b - l2.__v.__b;
}, $.__r = 0, f = /(PointerCapture)$|Capture$/i, c3 = 0, s = F(false), a = F(true), h = 0;

// node_modules/float-tooltip/dist/float-tooltip.mjs
function _arrayLikeToArray10(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles10(r2) {
  if (Array.isArray(r2)) return r2;
}
function _defineProperty4(e3, r2, t4) {
  return (r2 = _toPropertyKey6(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t4,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t4, e3;
}
function _iterableToArrayLimit10(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest10() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys2(e3, r2) {
  var t4 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e3);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t4.push.apply(t4, o2);
  }
  return t4;
}
function _objectSpread22(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t4 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys2(Object(t4), true).forEach(function(r3) {
      _defineProperty4(e3, r3, t4[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t4)) : ownKeys2(Object(t4)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t4, r3));
    });
  }
  return e3;
}
function _slicedToArray10(r2, e3) {
  return _arrayWithHoles10(r2) || _iterableToArrayLimit10(r2, e3) || _unsupportedIterableToArray10(r2, e3) || _nonIterableRest10();
}
function _toPrimitive6(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t4);
}
function _toPropertyKey6(t4) {
  var i2 = _toPrimitive6(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _typeof2(o2) {
  "@babel/helpers - typeof";
  return _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof2(o2);
}
function _unsupportedIterableToArray10(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray10(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray10(r2, a2) : void 0;
  }
}
var _reactElement2VNode = function reactElement2VNode(el) {
  if (!(_typeof2(el) === "object")) return el;
  var res = K2(el);
  if (res.props) {
    var _res$props;
    res.props = _objectSpread22({}, res.props);
    if (res !== null && res !== void 0 && (_res$props = res.props) !== null && _res$props !== void 0 && _res$props.children) {
      res.props.children = Array.isArray(res.props.children) ? res.props.children.map(_reactElement2VNode) : _reactElement2VNode(res.props.children);
    }
  }
  return res;
};
var isReactRenderable = function isReactRenderable2(o2) {
  return t(K2(o2));
};
var render = function render2(jsx, domEl) {
  delete domEl.__k;
  G(_reactElement2VNode(jsx), domEl);
};
function styleInject(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z = ".float-tooltip-kap {\n  position: absolute;\n  width: max-content; /* prevent shrinking near right edge */\n  max-width: max(50%, 150px);\n  padding: 3px 5px;\n  border-radius: 3px;\n  font: 12px sans-serif;\n  color: #eee;\n  background: rgba(0,0,0,0.6);\n  pointer-events: none;\n}\n";
styleInject(css_248z);
var index6 = index2({
  props: {
    content: {
      "default": false
    },
    offsetX: {
      triggerUpdate: false
    },
    // null or number
    offsetY: {
      triggerUpdate: false
    }
    // null or number
  },
  init: function init17(domNode, state) {
    var _ref = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref$style = _ref.style, style = _ref$style === void 0 ? {} : _ref$style;
    var isD3Selection = !!domNode && _typeof2(domNode) === "object" && !!domNode.node && typeof domNode.node === "function";
    var el = select_default2(isD3Selection ? domNode.node() : domNode);
    el.style("position") === "static" && el.style("position", "relative");
    state.tooltipEl = el.append("div").attr("class", "float-tooltip-kap");
    Object.entries(style).forEach(function(_ref2) {
      var _ref3 = _slicedToArray10(_ref2, 2), k2 = _ref3[0], v3 = _ref3[1];
      return state.tooltipEl.style(k2, v3);
    });
    state.tooltipEl.style("left", "-10000px").style("display", "none");
    var evSuffix = "tooltip-".concat(Math.round(Math.random() * 1e12));
    state.mouseInside = false;
    el.on("mousemove.".concat(evSuffix), function(ev) {
      state.mouseInside = true;
      var mousePos = pointer_default(ev);
      var domNode2 = el.node();
      var canvasWidth = domNode2.offsetWidth;
      var canvasHeight = domNode2.offsetHeight;
      var translate = [state.offsetX === null || state.offsetX === void 0 ? "-".concat(mousePos[0] / canvasWidth * 100, "%") : typeof state.offsetX === "number" ? "calc(-50% + ".concat(state.offsetX, "px)") : state.offsetX, state.offsetY === null || state.offsetY === void 0 ? canvasHeight > 130 && canvasHeight - mousePos[1] < 100 ? "calc(-100% - 6px)" : "21px" : typeof state.offsetY === "number" ? state.offsetY < 0 ? "calc(-100% - ".concat(Math.abs(state.offsetY), "px)") : "".concat(state.offsetY, "px") : state.offsetY];
      state.tooltipEl.style("left", mousePos[0] + "px").style("top", mousePos[1] + "px").style("transform", "translate(".concat(translate.join(","), ")"));
      state.content && state.tooltipEl.style("display", "inline");
    });
    el.on("mouseover.".concat(evSuffix), function() {
      state.mouseInside = true;
      state.content && state.tooltipEl.style("display", "inline");
    });
    el.on("mouseout.".concat(evSuffix), function() {
      state.mouseInside = false;
      state.tooltipEl.style("display", "none");
    });
  },
  update: function update18(state) {
    state.tooltipEl.style("display", !!state.content && state.mouseInside ? "inline" : "none");
    if (!state.content) {
      state.tooltipEl.text("");
    } else if (state.content instanceof HTMLElement) {
      state.tooltipEl.text("");
      state.tooltipEl.append(function() {
        return state.content;
      });
    } else if (typeof state.content === "string") {
      state.tooltipEl.html(state.content);
    } else if (isReactRenderable(state.content)) {
      state.tooltipEl.text("");
      render(state.content, state.tooltipEl.node());
    } else {
      state.tooltipEl.style("display", "none");
      console.warn("Tooltip content is invalid, skipping.", state.content, state.content.toString());
    }
  }
});

// node_modules/three-render-objects/dist/three-render-objects.mjs
function styleInject2(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z2 = ".scene-nav-info {\n  position: absolute;\n  bottom: 5px;\n  width: 100%;\n  text-align: center;\n  color: slategrey;\n  opacity: 0.7;\n  font-size: 10px;\n  font-family: sans-serif;\n  pointer-events: none;\n  user-select: none;\n}\n\n.scene-container canvas:focus {\n  outline: none;\n}";
styleInject2(css_248z2);
function _arrayLikeToArray11(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithHoles11(r2) {
  if (Array.isArray(r2)) return r2;
}
function _arrayWithoutHoles9(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray11(r2);
}
function _defineProperty5(e3, r2, t4) {
  return (r2 = _toPropertyKey7(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t4,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t4, e3;
}
function _iterableToArray9(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _iterableToArrayLimit11(r2, l2) {
  var t4 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t4) {
    var e3, n2, i2, u5, a2 = [], f2 = true, o2 = false;
    try {
      if (i2 = (t4 = t4.call(r2)).next, 0 === l2) ;
      else for (; !(f2 = (e3 = i2.call(t4)).done) && (a2.push(e3.value), a2.length !== l2); f2 = true) ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f2 && null != t4.return && (u5 = t4.return(), Object(u5) !== u5)) return;
      } finally {
        if (o2) throw n2;
      }
    }
    return a2;
  }
}
function _nonIterableRest11() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _nonIterableSpread9() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray11(r2, e3) {
  return _arrayWithHoles11(r2) || _iterableToArrayLimit11(r2, e3) || _unsupportedIterableToArray11(r2, e3) || _nonIterableRest11();
}
function _toConsumableArray9(r2) {
  return _arrayWithoutHoles9(r2) || _iterableToArray9(r2) || _unsupportedIterableToArray11(r2) || _nonIterableSpread9();
}
function _toPrimitive7(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t4);
}
function _toPropertyKey7(t4) {
  var i2 = _toPrimitive7(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray11(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray11(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray11(r2, a2) : void 0;
  }
}
var three2 = window.THREE ? window.THREE : {
  WebGLRenderer,
  Scene,
  PerspectiveCamera,
  Raycaster,
  SRGBColorSpace,
  TextureLoader,
  Vector2,
  Vector3,
  Box3,
  Color,
  Mesh,
  SphereGeometry,
  MeshBasicMaterial,
  BackSide,
  Clock
};
var threeRenderObjects = index2({
  props: {
    width: {
      "default": window.innerWidth,
      onChange: function onChange10(width, state, prevWidth) {
        isNaN(width) && (state.width = prevWidth);
      }
    },
    height: {
      "default": window.innerHeight,
      onChange: function onChange11(height, state, prevHeight) {
        isNaN(height) && (state.height = prevHeight);
      }
    },
    viewOffset: {
      "default": [0, 0]
    },
    backgroundColor: {
      "default": "#000011"
    },
    backgroundImageUrl: {},
    onBackgroundImageLoaded: {},
    showNavInfo: {
      "default": true
    },
    skyRadius: {
      "default": 5e4
    },
    objects: {
      "default": []
    },
    lights: {
      "default": []
    },
    enablePointerInteraction: {
      "default": true,
      onChange: function onChange12(_2, state) {
        state.hoverObj = null;
        state.tooltip && state.tooltip.content(null);
      },
      triggerUpdate: false
    },
    pointerRaycasterThrottleMs: {
      "default": 50,
      triggerUpdate: false
    },
    lineHoverPrecision: {
      "default": 1,
      triggerUpdate: false
    },
    pointsHoverPrecision: {
      "default": 1,
      triggerUpdate: false
    },
    hoverOrderComparator: {
      triggerUpdate: false
    },
    // keep existing order by default
    hoverFilter: {
      "default": function _default24() {
        return true;
      },
      triggerUpdate: false
    },
    // exclude objects from interaction
    tooltipContent: {
      triggerUpdate: false
    },
    hoverDuringDrag: {
      "default": false,
      triggerUpdate: false
    },
    clickAfterDrag: {
      "default": false,
      triggerUpdate: false
    },
    onHover: {
      "default": function _default25() {
      },
      triggerUpdate: false
    },
    onClick: {
      "default": function _default26() {
      },
      triggerUpdate: false
    },
    onRightClick: {
      triggerUpdate: false
    }
  },
  methods: {
    tick: function tick(state) {
      if (state.initialised) {
        state.controls.enabled && state.controls.update && state.controls.update(Math.min(1, state.clock.getDelta()));
        state.postProcessingComposer ? state.postProcessingComposer.render() : state.renderer.render(state.scene, state.camera);
        state.extraRenderers.forEach(function(r2) {
          return r2.render(state.scene, state.camera);
        });
        var now4 = +/* @__PURE__ */ new Date();
        if (state.enablePointerInteraction && now4 - state.lastRaycasterCheck >= state.pointerRaycasterThrottleMs) {
          state.lastRaycasterCheck = now4;
          var topObject = null;
          if (state.hoverDuringDrag || !state.isPointerDragging) {
            var intersects4 = this.intersectingObjects(state.pointerPos.x, state.pointerPos.y);
            state.hoverOrderComparator && intersects4.sort(function(a2, b) {
              return state.hoverOrderComparator(a2.object, b.object);
            });
            var topIntersect = intersects4.find(function(d2) {
              return state.hoverFilter(d2.object);
            }) || null;
            topObject = topIntersect ? topIntersect.object : null;
            state.intersection = topIntersect || null;
          }
          if (topObject !== state.hoverObj) {
            state.onHover(topObject, state.hoverObj, state.intersection);
            state.tooltip.content(topObject ? index4(state.tooltipContent)(topObject, state.intersection) || null : null);
            state.hoverObj = topObject;
          }
        }
        state.tweenGroup.update();
      }
      return this;
    },
    getPointerPos: function getPointerPos(state) {
      var _state$pointerPos = state.pointerPos, x2 = _state$pointerPos.x, y2 = _state$pointerPos.y;
      return {
        x: x2,
        y: y2
      };
    },
    cameraPosition: function cameraPosition2(state, position, lookAt, transitionDuration) {
      var camera3 = state.camera;
      if (position && state.initialised) {
        var finalPos = position;
        var finalLookAt = lookAt || {
          x: 0,
          y: 0,
          z: 0
        };
        if (!transitionDuration) {
          setCameraPos(finalPos);
          setLookAt(finalLookAt);
        } else {
          var camPos = Object.assign({}, camera3.position);
          var camLookAt = getLookAt();
          state.tweenGroup.add(new Tween(camPos).to(finalPos, transitionDuration).easing(Easing.Quadratic.Out).onUpdate(setCameraPos).start());
          state.tweenGroup.add(new Tween(camLookAt).to(finalLookAt, transitionDuration / 3).easing(Easing.Quadratic.Out).onUpdate(setLookAt).start());
        }
        return this;
      }
      return Object.assign({}, camera3.position, {
        lookAt: getLookAt()
      });
      function setCameraPos(pos) {
        var x2 = pos.x, y2 = pos.y, z2 = pos.z;
        if (x2 !== void 0) camera3.position.x = x2;
        if (y2 !== void 0) camera3.position.y = y2;
        if (z2 !== void 0) camera3.position.z = z2;
      }
      function setLookAt(lookAt2) {
        var lookAtVect = new three2.Vector3(lookAt2.x, lookAt2.y, lookAt2.z);
        if (state.controls.enabled && state.controls.target) {
          state.controls.target = lookAtVect;
        } else {
          camera3.lookAt(lookAtVect);
        }
      }
      function getLookAt() {
        return Object.assign(new three2.Vector3(0, 0, -1e3).applyQuaternion(camera3.quaternion).add(camera3.position));
      }
    },
    zoomToFit: function zoomToFit(state) {
      var transitionDuration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var padding = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;
      for (var _len = arguments.length, bboxArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
        bboxArgs[_key - 3] = arguments[_key];
      }
      return this.fitToBbox(this.getBbox.apply(this, bboxArgs), transitionDuration, padding);
    },
    fitToBbox: function fitToBbox(state, bbox) {
      var transitionDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var padding = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 10;
      var camera3 = state.camera;
      if (bbox) {
        var center = new three2.Vector3(0, 0, 0);
        var maxBoxSide = Math.max.apply(Math, _toConsumableArray9(Object.entries(bbox).map(function(_ref) {
          var _ref2 = _slicedToArray11(_ref, 2), coordType = _ref2[0], coords = _ref2[1];
          return Math.max.apply(Math, _toConsumableArray9(coords.map(function(c4) {
            return Math.abs(center[coordType] - c4);
          })));
        }))) * 2;
        var paddedFov = (1 - padding * 2 / state.height) * camera3.fov;
        var fitHeightDistance = maxBoxSide / Math.atan(paddedFov * Math.PI / 180);
        var fitWidthDistance = fitHeightDistance / camera3.aspect;
        var distance3 = Math.max(fitHeightDistance, fitWidthDistance);
        if (distance3 > 0) {
          var newCameraPosition = center.clone().sub(camera3.position).normalize().multiplyScalar(-distance3);
          this.cameraPosition(newCameraPosition, center, transitionDuration);
        }
      }
      return this;
    },
    getBbox: function getBbox(state) {
      var objFilter = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : function() {
        return true;
      };
      var box = new three2.Box3(new three2.Vector3(0, 0, 0), new three2.Vector3(0, 0, 0));
      var objs = state.objects.filter(objFilter);
      if (!objs.length) return null;
      objs.forEach(function(obj) {
        return box.expandByObject(obj);
      });
      return Object.assign.apply(Object, _toConsumableArray9(["x", "y", "z"].map(function(c4) {
        return _defineProperty5({}, c4, [box.min[c4], box.max[c4]]);
      })));
    },
    getScreenCoords: function getScreenCoords(state, x2, y2, z2) {
      var vec5 = new three2.Vector3(x2, y2, z2);
      vec5.project(this.camera());
      return {
        // align relative pos to canvas dimensions
        x: (vec5.x + 1) * state.width / 2,
        y: -(vec5.y - 1) * state.height / 2
      };
    },
    getSceneCoords: function getSceneCoords(state, screenX, screenY) {
      var distance3 = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : 0;
      var relCoords = new three2.Vector2(screenX / state.width * 2 - 1, -(screenY / state.height) * 2 + 1);
      var raycaster = new three2.Raycaster();
      raycaster.setFromCamera(relCoords, state.camera);
      return Object.assign({}, raycaster.ray.at(distance3, new three2.Vector3()));
    },
    intersectingObjects: function intersectingObjects(state, x2, y2) {
      var relCoords = new three2.Vector2(x2 / state.width * 2 - 1, -(y2 / state.height) * 2 + 1);
      var raycaster = new three2.Raycaster();
      raycaster.params.Line.threshold = state.lineHoverPrecision;
      raycaster.params.Points.threshold = state.pointsHoverPrecision;
      raycaster.setFromCamera(relCoords, state.camera);
      return raycaster.intersectObjects(state.objects, true);
    },
    renderer: function renderer(state) {
      return state.renderer;
    },
    scene: function scene(state) {
      return state.scene;
    },
    camera: function camera(state) {
      return state.camera;
    },
    postProcessingComposer: function postProcessingComposer(state) {
      return state.postProcessingComposer;
    },
    controls: function controls(state) {
      return state.controls;
    },
    tbControls: function tbControls(state) {
      return state.controls;
    }
    // to be deprecated
  },
  stateInit: function stateInit5() {
    return {
      scene: new three2.Scene(),
      camera: new three2.PerspectiveCamera(),
      clock: new three2.Clock(),
      tweenGroup: new Group2(),
      lastRaycasterCheck: 0
    };
  },
  init: function init18(domNode, state) {
    var _ref4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, _ref4$controlType = _ref4.controlType, controlType = _ref4$controlType === void 0 ? "trackball" : _ref4$controlType, _ref4$useWebGPU = _ref4.useWebGPU, useWebGPU = _ref4$useWebGPU === void 0 ? false : _ref4$useWebGPU, _ref4$rendererConfig = _ref4.rendererConfig, rendererConfig = _ref4$rendererConfig === void 0 ? {} : _ref4$rendererConfig, _ref4$extraRenderers = _ref4.extraRenderers, extraRenderers = _ref4$extraRenderers === void 0 ? [] : _ref4$extraRenderers, _ref4$waitForLoadComp = _ref4.waitForLoadComplete, waitForLoadComplete = _ref4$waitForLoadComp === void 0 ? true : _ref4$waitForLoadComp;
    domNode.innerHTML = "";
    domNode.appendChild(state.container = document.createElement("div"));
    state.container.className = "scene-container";
    state.container.style.position = "relative";
    state.container.appendChild(state.navInfo = document.createElement("div"));
    state.navInfo.className = "scene-nav-info";
    state.navInfo.textContent = {
      orbit: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan",
      trackball: "Left-click: rotate, Mouse-wheel/middle-click: zoom, Right-click: pan",
      fly: "WASD: move, R|F: up | down, Q|E: roll, up|down: pitch, left|right: yaw"
    }[controlType] || "";
    state.navInfo.style.display = state.showNavInfo ? null : "none";
    state.tooltip = new index6(state.container);
    state.pointerPos = new three2.Vector2();
    state.pointerPos.x = -2;
    state.pointerPos.y = -2;
    ["pointermove", "pointerdown"].forEach(function(evType) {
      return state.container.addEventListener(evType, function(ev) {
        evType === "pointerdown" && (state.isPointerPressed = true);
        !state.isPointerDragging && ev.type === "pointermove" && (ev.pressure > 0 || state.isPointerPressed) && (ev.pointerType === "mouse" || ev.movementX === void 0 || [ev.movementX, ev.movementY].some(function(m2) {
          return Math.abs(m2) > 1;
        })) && (state.isPointerDragging = true);
        if (state.enablePointerInteraction) {
          var offset = getOffset(state.container);
          state.pointerPos.x = ev.pageX - offset.left;
          state.pointerPos.y = ev.pageY - offset.top;
        }
        function getOffset(el) {
          var rect = el.getBoundingClientRect(), scrollLeft = window.pageXOffset || document.documentElement.scrollLeft, scrollTop = window.pageYOffset || document.documentElement.scrollTop;
          return {
            top: rect.top + scrollTop,
            left: rect.left + scrollLeft
          };
        }
      }, {
        passive: true
      });
    });
    state.container.addEventListener("pointerup", function(ev) {
      if (!state.isPointerPressed) return;
      state.isPointerPressed = false;
      if (state.isPointerDragging) {
        state.isPointerDragging = false;
        if (!state.clickAfterDrag) return;
      }
      requestAnimationFrame(function() {
        if (ev.button === 0) {
          state.onClick(state.hoverObj || null, ev, state.intersection);
        }
        if (ev.button === 2 && state.onRightClick) {
          state.onRightClick(state.hoverObj || null, ev, state.intersection);
        }
      });
    }, {
      passive: true,
      capture: true
    });
    state.container.addEventListener("contextmenu", function(ev) {
      if (state.onRightClick) ev.preventDefault();
    });
    state.renderer = new (useWebGPU ? WebGPURenderer : three2.WebGLRenderer)(Object.assign({
      antialias: true,
      alpha: true
    }, rendererConfig));
    state.renderer.setPixelRatio(Math.min(2, window.devicePixelRatio));
    state.container.appendChild(state.renderer.domElement);
    state.extraRenderers = extraRenderers;
    state.extraRenderers.forEach(function(r2) {
      r2.domElement.style.position = "absolute";
      r2.domElement.style.top = "0px";
      r2.domElement.style.pointerEvents = "none";
      state.container.appendChild(r2.domElement);
    });
    state.postProcessingComposer = new EffectComposer(state.renderer);
    state.postProcessingComposer.addPass(new RenderPass(state.scene, state.camera));
    state.controls = new {
      trackball: TrackballControls,
      orbit: OrbitControls,
      fly: FlyControls
    }[controlType](state.camera, state.renderer.domElement);
    if (controlType === "fly") {
      state.controls.movementSpeed = 300;
      state.controls.rollSpeed = Math.PI / 6;
      state.controls.dragToLook = true;
    }
    if (controlType === "trackball" || controlType === "orbit") {
      state.controls.minDistance = 0.1;
      state.controls.maxDistance = state.skyRadius;
      state.controls.addEventListener("start", function() {
        state.controlsEngaged = true;
      });
      state.controls.addEventListener("change", function() {
        if (state.controlsEngaged) {
          state.controlsDragging = true;
        }
      });
      state.controls.addEventListener("end", function() {
        state.controlsEngaged = false;
        state.controlsDragging = false;
      });
    }
    [state.renderer, state.postProcessingComposer].concat(_toConsumableArray9(state.extraRenderers)).forEach(function(r2) {
      return r2.setSize(state.width, state.height);
    });
    state.camera.aspect = state.width / state.height;
    state.camera.updateProjectionMatrix();
    state.camera.position.z = 1e3;
    state.scene.add(state.skysphere = new three2.Mesh());
    state.skysphere.visible = false;
    state.loadComplete = state.scene.visible = !waitForLoadComplete;
    window.scene = state.scene;
  },
  update: function update19(state, changedProps) {
    if (state.width && state.height && (changedProps.hasOwnProperty("width") || changedProps.hasOwnProperty("height"))) {
      var _state$camera;
      var w4 = state.width;
      var h2 = state.height;
      state.container.style.width = "".concat(w4, "px");
      state.container.style.height = "".concat(h2, "px");
      [state.renderer, state.postProcessingComposer].concat(_toConsumableArray9(state.extraRenderers)).forEach(function(r2) {
        return r2.setSize(w4, h2);
      });
      state.camera.aspect = w4 / h2;
      var o2 = state.viewOffset.slice(0, 2);
      o2.some(function(n2) {
        return n2;
      }) && (_state$camera = state.camera).setViewOffset.apply(_state$camera, [w4, h2].concat(_toConsumableArray9(o2), [w4, h2]));
      state.camera.updateProjectionMatrix();
    }
    if (changedProps.hasOwnProperty("viewOffset")) {
      var _state$camera2;
      var _w = state.width;
      var _h = state.height;
      var _o = state.viewOffset.slice(0, 2);
      _o.some(function(n2) {
        return n2;
      }) ? (_state$camera2 = state.camera).setViewOffset.apply(_state$camera2, [_w, _h].concat(_toConsumableArray9(_o), [_w, _h])) : state.camera.clearViewOffset();
    }
    if (changedProps.hasOwnProperty("skyRadius") && state.skyRadius) {
      state.controls.hasOwnProperty("maxDistance") && changedProps.skyRadius && (state.controls.maxDistance = Math.min(state.controls.maxDistance, state.skyRadius));
      state.camera.far = state.skyRadius * 2.5;
      state.camera.updateProjectionMatrix();
      state.skysphere.geometry = new three2.SphereGeometry(state.skyRadius);
    }
    if (changedProps.hasOwnProperty("backgroundColor")) {
      var alpha = parseToRgb(state.backgroundColor).alpha;
      if (alpha === void 0) alpha = 1;
      state.renderer.setClearColor(new three2.Color(curriedOpacify$1(1, state.backgroundColor)), alpha);
    }
    if (changedProps.hasOwnProperty("backgroundImageUrl")) {
      if (!state.backgroundImageUrl) {
        state.skysphere.visible = false;
        state.skysphere.material.map = null;
        !state.loadComplete && finishLoad();
      } else {
        new three2.TextureLoader().load(state.backgroundImageUrl, function(texture2) {
          texture2.colorSpace = three2.SRGBColorSpace;
          state.skysphere.material = new three2.MeshBasicMaterial({
            map: texture2,
            side: three2.BackSide
          });
          state.skysphere.visible = true;
          state.onBackgroundImageLoaded && setTimeout(state.onBackgroundImageLoaded);
          !state.loadComplete && finishLoad();
        });
      }
    }
    changedProps.hasOwnProperty("showNavInfo") && (state.navInfo.style.display = state.showNavInfo ? null : "none");
    if (changedProps.hasOwnProperty("lights")) {
      (changedProps.lights || []).forEach(function(light) {
        return state.scene.remove(light);
      });
      state.lights.forEach(function(light) {
        return state.scene.add(light);
      });
    }
    if (changedProps.hasOwnProperty("objects")) {
      (changedProps.objects || []).forEach(function(obj) {
        return state.scene.remove(obj);
      });
      state.objects.forEach(function(obj) {
        return state.scene.add(obj);
      });
    }
    function finishLoad() {
      state.loadComplete = state.scene.visible = true;
    }
  }
});

// node_modules/globe.gl/dist/globe.gl.mjs
function styleInject3(css, ref) {
  if (ref === void 0) ref = {};
  var insertAt = ref.insertAt;
  if (typeof document === "undefined") {
    return;
  }
  var head = document.head || document.getElementsByTagName("head")[0];
  var style = document.createElement("style");
  style.type = "text/css";
  if (insertAt === "top") {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }
  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}
var css_248z3 = ".scene-container .clickable {\n  cursor: pointer;\n}";
styleInject3(css_248z3);
function _arrayLikeToArray12(r2, a2) {
  (null == a2 || a2 > r2.length) && (a2 = r2.length);
  for (var e3 = 0, n2 = Array(a2); e3 < a2; e3++) n2[e3] = r2[e3];
  return n2;
}
function _arrayWithoutHoles10(r2) {
  if (Array.isArray(r2)) return _arrayLikeToArray12(r2);
}
function _defineProperty6(e3, r2, t4) {
  return (r2 = _toPropertyKey8(r2)) in e3 ? Object.defineProperty(e3, r2, {
    value: t4,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e3[r2] = t4, e3;
}
function _iterableToArray10(r2) {
  if ("undefined" != typeof Symbol && null != r2[Symbol.iterator] || null != r2["@@iterator"]) return Array.from(r2);
}
function _nonIterableSpread10() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function ownKeys3(e3, r2) {
  var t4 = Object.keys(e3);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e3);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e3, r3).enumerable;
    })), t4.push.apply(t4, o2);
  }
  return t4;
}
function _objectSpread23(e3) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t4 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys3(Object(t4), true).forEach(function(r3) {
      _defineProperty6(e3, r3, t4[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(t4)) : ownKeys3(Object(t4)).forEach(function(r3) {
      Object.defineProperty(e3, r3, Object.getOwnPropertyDescriptor(t4, r3));
    });
  }
  return e3;
}
function _objectWithoutProperties3(e3, t4) {
  if (null == e3) return {};
  var o2, r2, i2 = _objectWithoutPropertiesLoose3(e3, t4);
  if (Object.getOwnPropertySymbols) {
    var n2 = Object.getOwnPropertySymbols(e3);
    for (r2 = 0; r2 < n2.length; r2++) o2 = n2[r2], -1 === t4.indexOf(o2) && {}.propertyIsEnumerable.call(e3, o2) && (i2[o2] = e3[o2]);
  }
  return i2;
}
function _objectWithoutPropertiesLoose3(r2, e3) {
  if (null == r2) return {};
  var t4 = {};
  for (var n2 in r2) if ({}.hasOwnProperty.call(r2, n2)) {
    if (-1 !== e3.indexOf(n2)) continue;
    t4[n2] = r2[n2];
  }
  return t4;
}
function _toConsumableArray10(r2) {
  return _arrayWithoutHoles10(r2) || _iterableToArray10(r2) || _unsupportedIterableToArray12(r2) || _nonIterableSpread10();
}
function _toPrimitive8(t4, r2) {
  if ("object" != typeof t4 || !t4) return t4;
  var e3 = t4[Symbol.toPrimitive];
  if (void 0 !== e3) {
    var i2 = e3.call(t4, r2);
    if ("object" != typeof i2) return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t4);
}
function _toPropertyKey8(t4) {
  var i2 = _toPrimitive8(t4, "string");
  return "symbol" == typeof i2 ? i2 : i2 + "";
}
function _unsupportedIterableToArray12(r2, a2) {
  if (r2) {
    if ("string" == typeof r2) return _arrayLikeToArray12(r2, a2);
    var t4 = {}.toString.call(r2).slice(8, -1);
    return "Object" === t4 && r2.constructor && (t4 = r2.constructor.name), "Map" === t4 || "Set" === t4 ? Array.from(r2) : "Arguments" === t4 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t4) ? _arrayLikeToArray12(r2, a2) : void 0;
  }
}
function linkKapsule2(kapsulePropName, kapsuleType) {
  var dummyK = new kapsuleType();
  dummyK._destructor && dummyK._destructor();
  return {
    linkProp: function linkProp(prop) {
      return {
        "default": dummyK[prop](),
        onChange: function onChange15(v3, state) {
          state[kapsulePropName][prop](v3);
        },
        triggerUpdate: false
      };
    },
    linkMethod: function linkMethod(method) {
      return function(state) {
        var kapsuleInstance = state[kapsulePropName];
        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
          args[_key - 1] = arguments[_key];
        }
        var returnVal = kapsuleInstance[method].apply(kapsuleInstance, args);
        return returnVal === kapsuleInstance ? this : returnVal;
      };
    }
  };
}
var _excluded2 = ["rendererConfig", "waitForGlobeReady"];
var THREE4 = _objectSpread23(_objectSpread23({}, window.THREE ? window.THREE : {
  AmbientLight,
  DirectionalLight,
  Vector2,
  REVISION
}), {}, {
  CSS2DRenderer
});
var bindGlobe = linkKapsule2("globe", threeGlobe);
var linkedGlobeProps = Object.assign.apply(Object, _toConsumableArray10(["globeImageUrl", "bumpImageUrl", "globeTileEngineUrl", "globeTileEngineMaxLevel", "globeCurvatureResolution", "showGlobe", "showGraticules", "showAtmosphere", "atmosphereColor", "atmosphereAltitude", "onGlobeReady", "pointsData", "pointLat", "pointLng", "pointColor", "pointAltitude", "pointRadius", "pointResolution", "pointsMerge", "pointsTransitionDuration", "arcsData", "arcStartLat", "arcStartLng", "arcStartAltitude", "arcEndLat", "arcEndLng", "arcEndAltitude", "arcColor", "arcAltitude", "arcAltitudeAutoScale", "arcStroke", "arcCurveResolution", "arcCircularResolution", "arcDashLength", "arcDashGap", "arcDashInitialGap", "arcDashAnimateTime", "arcsTransitionDuration", "polygonsData", "polygonGeoJsonGeometry", "polygonCapColor", "polygonCapMaterial", "polygonSideColor", "polygonSideMaterial", "polygonStrokeColor", "polygonAltitude", "polygonCapCurvatureResolution", "polygonsTransitionDuration", "pathsData", "pathPoints", "pathPointLat", "pathPointLng", "pathPointAlt", "pathResolution", "pathColor", "pathStroke", "pathDashLength", "pathDashGap", "pathDashInitialGap", "pathDashAnimateTime", "pathTransitionDuration", "heatmapsData", "heatmapPoints", "heatmapPointLat", "heatmapPointLng", "heatmapPointWeight", "heatmapBandwidth", "heatmapColorFn", "heatmapColorSaturation", "heatmapBaseAltitude", "heatmapTopAltitude", "heatmapsTransitionDuration", "hexBinPointsData", "hexBinPointLat", "hexBinPointLng", "hexBinPointWeight", "hexBinResolution", "hexMargin", "hexTopCurvatureResolution", "hexTopColor", "hexSideColor", "hexAltitude", "hexBinMerge", "hexTransitionDuration", "hexPolygonsData", "hexPolygonGeoJsonGeometry", "hexPolygonColor", "hexPolygonAltitude", "hexPolygonResolution", "hexPolygonMargin", "hexPolygonUseDots", "hexPolygonCurvatureResolution", "hexPolygonDotResolution", "hexPolygonsTransitionDuration", "tilesData", "tileLat", "tileLng", "tileAltitude", "tileWidth", "tileHeight", "tileUseGlobeProjection", "tileMaterial", "tileCurvatureResolution", "tilesTransitionDuration", "particlesData", "particlesList", "particleLat", "particleLng", "particleAltitude", "particlesSize", "particlesSizeAttenuation", "particlesColor", "particlesTexture", "ringsData", "ringLat", "ringLng", "ringAltitude", "ringColor", "ringResolution", "ringMaxRadius", "ringPropagationSpeed", "ringRepeatPeriod", "labelsData", "labelLat", "labelLng", "labelAltitude", "labelRotation", "labelText", "labelSize", "labelTypeFace", "labelColor", "labelResolution", "labelIncludeDot", "labelDotRadius", "labelDotOrientation", "labelsTransitionDuration", "htmlElementsData", "htmlLat", "htmlLng", "htmlAltitude", "htmlElement", "htmlElementVisibilityModifier", "htmlTransitionDuration", "objectsData", "objectLat", "objectLng", "objectAltitude", "objectRotation", "objectFacesSurface", "objectThreeObject", "customLayerData", "customThreeObject", "customThreeObjectUpdate"].map(function(p2) {
  return _defineProperty6({}, p2, bindGlobe.linkProp(p2));
})));
var linkedGlobeMethods = Object.assign.apply(Object, _toConsumableArray10(["globeMaterial", "getGlobeRadius", "getCoords", "toGeoCoords"].map(function(p2) {
  return _defineProperty6({}, p2, bindGlobe.linkMethod(p2));
})));
var bindRenderObjs = linkKapsule2("renderObjs", threeRenderObjects);
var linkedRenderObjsProps = Object.assign.apply(Object, _toConsumableArray10(["width", "height", "backgroundColor", "backgroundImageUrl", "enablePointerInteraction"].map(function(p2) {
  return _defineProperty6({}, p2, bindRenderObjs.linkProp(p2));
})));
var linkedRenderObjsMethods = Object.assign.apply(Object, _toConsumableArray10(["lights", "postProcessingComposer"].map(function(p2) {
  return _defineProperty6({}, p2, bindRenderObjs.linkMethod(p2));
})));
var globe = index2({
  props: _objectSpread23(_objectSpread23({
    onZoom: {
      triggerUpdate: false
    },
    onGlobeClick: {
      triggerUpdate: false
    },
    onGlobeRightClick: {
      triggerUpdate: false
    },
    pointLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPointClick: {
      triggerUpdate: false
    },
    onPointRightClick: {
      triggerUpdate: false
    },
    onPointHover: {
      triggerUpdate: false
    },
    arcLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onArcClick: {
      triggerUpdate: false
    },
    onArcRightClick: {
      triggerUpdate: false
    },
    onArcHover: {
      triggerUpdate: false
    },
    polygonLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPolygonClick: {
      triggerUpdate: false
    },
    onPolygonRightClick: {
      triggerUpdate: false
    },
    onPolygonHover: {
      triggerUpdate: false
    },
    pathLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onPathClick: {
      triggerUpdate: false
    },
    onPathRightClick: {
      triggerUpdate: false
    },
    onPathHover: {
      triggerUpdate: false
    },
    onHeatmapClick: {
      triggerUpdate: false
    },
    onHeatmapRightClick: {
      triggerUpdate: false
    },
    onHeatmapHover: {
      triggerUpdate: false
    },
    hexLabel: {
      triggerUpdate: false
    },
    onHexClick: {
      triggerUpdate: false
    },
    onHexRightClick: {
      triggerUpdate: false
    },
    onHexHover: {
      triggerUpdate: false
    },
    hexPolygonLabel: {
      triggerUpdate: false
    },
    onHexPolygonClick: {
      triggerUpdate: false
    },
    onHexPolygonRightClick: {
      triggerUpdate: false
    },
    onHexPolygonHover: {
      triggerUpdate: false
    },
    tileLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onTileClick: {
      triggerUpdate: false
    },
    onTileRightClick: {
      triggerUpdate: false
    },
    onTileHover: {
      triggerUpdate: false
    },
    particleLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onParticleClick: {
      triggerUpdate: false
    },
    onParticleRightClick: {
      triggerUpdate: false
    },
    onParticleHover: {
      triggerUpdate: false
    },
    labelLabel: {
      triggerUpdate: false
    },
    onLabelClick: {
      triggerUpdate: false
    },
    onLabelRightClick: {
      triggerUpdate: false
    },
    onLabelHover: {
      triggerUpdate: false
    },
    objectLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onObjectClick: {
      triggerUpdate: false
    },
    onObjectRightClick: {
      triggerUpdate: false
    },
    onObjectHover: {
      triggerUpdate: false
    },
    customLayerLabel: {
      "default": "name",
      triggerUpdate: false
    },
    onCustomLayerClick: {
      triggerUpdate: false
    },
    onCustomLayerRightClick: {
      triggerUpdate: false
    },
    onCustomLayerHover: {
      triggerUpdate: false
    },
    pointerEventsFilter: {
      "default": function _default27() {
        return true;
      },
      triggerUpdate: false
    },
    lineHoverPrecision: {
      "default": 0.2,
      triggerUpdate: false,
      onChange: function onChange13(val, state) {
        state.renderObjs.lineHoverPrecision(val);
        state.renderObjs.pointsHoverPrecision(val);
      }
    },
    globeOffset: {
      "default": [0, 0],
      triggerUpdate: false,
      onChange: function onChange14(o2, state) {
        return Array.isArray(o2) && o2.length === 2 && state.renderObjs.viewOffset(o2.map(function(v3) {
          return -v3;
        }));
      }
    }
  }, linkedGlobeProps), linkedRenderObjsProps),
  methods: _objectSpread23(_objectSpread23({
    pauseAnimation: function pauseAnimation5(state) {
      var _state$globe;
      if (state.animationFrameRequestId !== null) {
        cancelAnimationFrame(state.animationFrameRequestId);
        state.animationFrameRequestId = null;
      }
      (_state$globe = state.globe) === null || _state$globe === void 0 || _state$globe.pauseAnimation();
      return this;
    },
    resumeAnimation: function resumeAnimation5(state) {
      var _state$globe2;
      if (state.animationFrameRequestId === null) {
        this._animationCycle();
      }
      (_state$globe2 = state.globe) === null || _state$globe2 === void 0 || _state$globe2.resumeAnimation();
      return this;
    },
    _animationCycle: function _animationCycle2(state) {
      state.renderObjs.tick();
      state.tweenGroup.update();
      state.animationFrameRequestId = requestAnimationFrame(this._animationCycle);
    },
    pointOfView: function pointOfView(state) {
      var geoCoords = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      var transitionDuration = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
      var curGeoCoords = getGeoCoords();
      if (geoCoords.lat === void 0 && geoCoords.lng === void 0 && geoCoords.altitude === void 0) {
        return curGeoCoords;
      } else {
        var finalGeoCoords = Object.assign({}, curGeoCoords, geoCoords);
        ["lat", "lng", "altitude"].forEach(function(p2) {
          return finalGeoCoords[p2] = +finalGeoCoords[p2];
        });
        if (!transitionDuration) {
          setCameraPos(finalGeoCoords);
        } else {
          while (curGeoCoords.lng - finalGeoCoords.lng > 180) curGeoCoords.lng -= 360;
          while (curGeoCoords.lng - finalGeoCoords.lng < -180) curGeoCoords.lng += 360;
          state.tweenGroup.add(new Tween(curGeoCoords).to(finalGeoCoords, transitionDuration).easing(Easing.Cubic.InOut).onUpdate(setCameraPos).start());
        }
        return this;
      }
      function getGeoCoords() {
        return state.globe.toGeoCoords(state.renderObjs.cameraPosition());
      }
      function setCameraPos(_ref5) {
        var lat = _ref5.lat, lng = _ref5.lng, altitude = _ref5.altitude;
        state.renderObjs.cameraPosition(state.globe.getCoords(lat, lng, altitude));
        state.globe.setPointOfView(state.renderObjs.camera());
      }
    },
    getScreenCoords: function getScreenCoords2(state) {
      var _state$globe3;
      for (var _len = arguments.length, geoCoords = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        geoCoords[_key - 1] = arguments[_key];
      }
      var cartesianCoords = (_state$globe3 = state.globe).getCoords.apply(_state$globe3, geoCoords);
      return state.renderObjs.getScreenCoords(cartesianCoords.x, cartesianCoords.y, cartesianCoords.z);
    },
    toGlobeCoords: function toGlobeCoords(state, x2, y2) {
      var globeIntersects = state.renderObjs.intersectingObjects(x2, y2).find(function(d2) {
        return (d2.object.__globeObjType || d2.object.parent.__globeObjType) === "globe";
      });
      if (!globeIntersects) return null;
      var _state$globe$toGeoCoo = state.globe.toGeoCoords(globeIntersects.point), lat = _state$globe$toGeoCoo.lat, lng = _state$globe$toGeoCoo.lng;
      return {
        lat,
        lng
      };
    },
    scene: function scene2(state) {
      return state.renderObjs.scene();
    },
    // Expose scene
    camera: function camera2(state) {
      return state.renderObjs.camera();
    },
    // Expose camera
    renderer: function renderer2(state) {
      return state.renderObjs.renderer();
    },
    // Expose renderer
    controls: function controls2(state) {
      return state.renderObjs.controls();
    },
    // Expose controls
    _destructor: function _destructor6(state) {
      state.globe._destructor();
      this.pauseAnimation();
      this.pointsData([]);
      this.arcsData([]);
      this.polygonsData([]);
      this.pathsData([]);
      this.heatmapsData([]);
      this.hexBinPointsData([]);
      this.hexPolygonsData([]);
      this.tilesData([]);
      this.particlesData([]);
      this.labelsData([]);
      this.htmlElementsData([]);
      this.objectsData([]);
      this.customLayerData([]);
    }
  }, linkedGlobeMethods), linkedRenderObjsMethods),
  stateInit: function stateInit6(_ref6) {
    var rendererConfig = _ref6.rendererConfig, _ref6$waitForGlobeRea = _ref6.waitForGlobeReady, waitForGlobeReady = _ref6$waitForGlobeRea === void 0 ? true : _ref6$waitForGlobeRea, globeInitConfig = _objectWithoutProperties3(_ref6, _excluded2);
    var globe2 = new threeGlobe(_objectSpread23({
      waitForGlobeReady
    }, globeInitConfig));
    return {
      globe: globe2,
      renderObjs: threeRenderObjects({
        controlType: "orbit",
        rendererConfig,
        waitForLoadComplete: waitForGlobeReady,
        extraRenderers: [new THREE4.CSS2DRenderer()]
        // Used in HTML elements layer
      }).skyRadius(globe2.getGlobeRadius() * 500).showNavInfo(false).objects([globe2]).lights([new THREE4.AmbientLight(13421772, Math.PI), new THREE4.DirectionalLight(16777215, 0.6 * Math.PI)]),
      tweenGroup: new Group2()
    };
  },
  init: function init19(domNode, state) {
    var _this = this;
    domNode.innerHTML = "";
    domNode.appendChild(state.container = document.createElement("div"));
    state.container.style.position = "relative";
    var roDomNode = document.createElement("div");
    state.container.appendChild(roDomNode);
    state.renderObjs(roDomNode);
    state.globe.rendererSize(state.renderObjs.renderer().getSize(new THREE4.Vector2()));
    this.pointOfView({
      altitude: 2.5
    });
    var globeR = state.globe.getGlobeRadius();
    var controls3 = state.renderObjs.controls();
    state.renderObjs.camera().near = 0.05;
    controls3.minDistance = globeR + Math.max(1e-3, state.renderObjs.camera().near * 1.1);
    controls3.maxDistance = globeR * 100;
    controls3.enablePan = false;
    controls3.enableDamping = true;
    controls3.dampingFactor = 0.1;
    controls3.rotateSpeed = 0.3;
    controls3.zoomSpeed = 0.3;
    controls3.zoomToCursor = true;
    controls3.addEventListener("change", function() {
      controls3.target.setScalar(0);
      var pov = _this.pointOfView();
      controls3.rotateSpeed = pov.altitude * 0.3;
      controls3.zoomSpeed = Math.sqrt(pov.altitude) * 0.5;
      state.globe.setPointOfView(state.renderObjs.camera());
      state.onZoom && state.onZoom(pov);
    });
    var getGlobeObj = function getGlobeObj2(object2) {
      var obj = object2;
      while (obj && !obj.hasOwnProperty("__globeObjType")) {
        obj = obj.parent;
      }
      return obj;
    };
    var dataAccessors = {
      point: function point2(d2) {
        return d2;
      },
      arc: function arc(d2) {
        return d2;
      },
      polygon: function polygon(d2) {
        return d2.data;
      },
      path: function path(d2) {
        return d2;
      },
      heatmap: function heatmap(d2) {
        return d2;
      },
      hexbin: function hexbin(d2) {
        return d2;
      },
      hexPolygon: function hexPolygon(d2) {
        return d2;
      },
      tile: function tile(d2) {
        return d2;
      },
      particles: function particles(d2, intersection2) {
        return !intersection2 || !intersection2.hasOwnProperty("index") || d2.length <= intersection2.index ? d2 : d2[intersection2.index];
      },
      label: function label2(d2) {
        return d2;
      },
      object: function object2(d2) {
        return d2;
      },
      custom: function custom(d2) {
        return d2;
      }
    };
    THREE4.REVISION < 155 && (state.renderObjs.renderer().useLegacyLights = false);
    state.renderObjs.hoverFilter(function(obj) {
      var o2 = getGlobeObj(obj);
      if (!o2) return false;
      var type = o2.__globeObjType;
      if (type !== "globe" && !dataAccessors.hasOwnProperty(type)) return false;
      var d2 = dataAccessors.hasOwnProperty(type) && o2.__data ? dataAccessors[type](o2.__data) : null;
      if (["points", "hexBinPoints"].some(function(t4) {
        return t4 === type;
      }) && Array.isArray(d2)) return false;
      return state.pointerEventsFilter(o2, d2);
    }).tooltipContent(function(obj, intersection2) {
      var objAccessors = {
        point: state.pointLabel,
        arc: state.arcLabel,
        polygon: state.polygonLabel,
        path: state.pathLabel,
        hexbin: state.hexLabel,
        hexPolygon: state.hexPolygonLabel,
        tile: state.tileLabel,
        particles: state.particleLabel,
        label: state.labelLabel,
        object: state.objectLabel,
        custom: state.customLayerLabel
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj && globeObj.__globeObjType;
      return globeObj && objType && objAccessors.hasOwnProperty(objType) && dataAccessors.hasOwnProperty(objType) ? index4(objAccessors[objType])(dataAccessors[objType](globeObj.__data, intersection2)) || "" : "";
    }).onHover(function(obj, _2, intersection2) {
      var hoverObjFns = {
        point: state.onPointHover,
        arc: state.onArcHover,
        polygon: state.onPolygonHover,
        path: state.onPathHover,
        heatmap: state.onHeatmapHover,
        hexbin: state.onHexHover,
        hexPolygon: state.onHexPolygonHover,
        tile: state.onTileHover,
        particles: state.onParticleHover,
        label: state.onLabelHover,
        object: state.onObjectHover,
        custom: state.onCustomLayerHover
      };
      var clickObjFns = {
        globe: state.onGlobeClick,
        point: state.onPointClick,
        arc: state.onArcClick,
        polygon: state.onPolygonClick,
        path: state.onPathClick,
        heatmap: state.onHeatmapClick,
        hexbin: state.onHexClick,
        hexPolygon: state.onHexPolygonClick,
        tile: state.onTileClick,
        particles: state.onParticleClick,
        label: state.onLabelClick,
        object: state.onObjectClick,
        custom: state.onCustomLayerClick
      };
      var hoverObj = getGlobeObj(obj);
      hoverObj && !hoverObjFns.hasOwnProperty(hoverObj.__globeObjType) && (hoverObj = null);
      if (hoverObj !== state.hoverObj) {
        var prevObjType = state.hoverObj ? state.hoverObj.__globeObjType : null;
        var prevObjData = state.hoverData;
        var objType = hoverObj ? hoverObj.__globeObjType : null;
        var objData = hoverObj ? dataAccessors[objType](hoverObj.__data, intersection2) : null;
        if (prevObjType && prevObjType !== objType) {
          hoverObjFns[prevObjType] && hoverObjFns[prevObjType](null, prevObjData || null);
        }
        if (objType) {
          hoverObjFns[objType] && hoverObjFns[objType](objData, prevObjType === objType ? prevObjData : null);
        }
        state.renderObjs.renderer().domElement.classList[objType && clickObjFns[objType] ? "add" : "remove"]("clickable");
        state.hoverObj = hoverObj;
        state.hoverData = objData;
      }
    }).onClick(function(obj, ev, intersection2) {
      if (!obj) return;
      var objFns = {
        globe: state.onGlobeClick,
        point: state.onPointClick,
        arc: state.onArcClick,
        polygon: state.onPolygonClick,
        path: state.onPathClick,
        heatmap: state.onHeatmapClick,
        hexbin: state.onHexClick,
        hexPolygon: state.onHexPolygonClick,
        tile: state.onTileClick,
        particles: state.onParticleClick,
        label: state.onLabelClick,
        object: state.onObjectClick,
        custom: state.onCustomLayerClick
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj.__globeObjType;
      if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {
        var args = [ev];
        var point2 = intersection2 !== null && intersection2 !== void 0 && intersection2.isVector3 ? intersection2 : intersection2 === null || intersection2 === void 0 ? void 0 : intersection2.point;
        if (objType === "globe") {
          var _this$toGeoCoords = _this.toGeoCoords(point2), lat = _this$toGeoCoords.lat, lng = _this$toGeoCoords.lng;
          args.unshift({
            lat,
            lng
          });
        } else {
          args.push(_this.toGeoCoords(point2));
        }
        dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data, intersection2));
        objFns[objType].apply(objFns, args);
      }
    }).onRightClick(function(obj, ev, intersection2) {
      if (!obj) return;
      var objFns = {
        globe: state.onGlobeRightClick,
        point: state.onPointRightClick,
        arc: state.onArcRightClick,
        polygon: state.onPolygonRightClick,
        path: state.onPathRightClick,
        heatmap: state.onHeatmapRightClick,
        hexbin: state.onHexRightClick,
        hexPolygon: state.onHexPolygonRightClick,
        tile: state.onTileRightClick,
        particles: state.onParticleRightClick,
        label: state.onLabelRightClick,
        object: state.onObjectRightClick,
        custom: state.onCustomLayerRightClick
      };
      var globeObj = getGlobeObj(obj);
      var objType = globeObj.__globeObjType;
      if (globeObj && objFns.hasOwnProperty(objType) && objFns[objType]) {
        var args = [ev];
        var point2 = intersection2 !== null && intersection2 !== void 0 && intersection2.isVector3 ? intersection2 : intersection2 === null || intersection2 === void 0 ? void 0 : intersection2.point;
        if (objType === "globe") {
          var _this$toGeoCoords2 = _this.toGeoCoords(point2), lat = _this$toGeoCoords2.lat, lng = _this$toGeoCoords2.lng;
          args.unshift({
            lat,
            lng
          });
        } else {
          args.push(_this.toGeoCoords(point2));
        }
        dataAccessors.hasOwnProperty(objType) && args.unshift(dataAccessors[objType](globeObj.__data, intersection2));
        objFns[objType].apply(objFns, args);
      }
    });
    this._animationCycle();
  }
});

// node_modules/react-globe.gl/dist/react-globe.gl.mjs
var import_prop_types = __toESM(require_prop_types(), 1);
var GlobePropTypes = {
  width: import_prop_types.default.number,
  height: import_prop_types.default.number,
  globeOffset: import_prop_types.default.arrayOf(import_prop_types.default.number),
  backgroundColor: import_prop_types.default.string,
  backgroundImageUrl: import_prop_types.default.string,
  globeImageUrl: import_prop_types.default.string,
  bumpImageUrl: import_prop_types.default.string,
  globeTileEngineUrl: import_prop_types.default.func,
  showGlobe: import_prop_types.default.bool,
  showGraticules: import_prop_types.default.bool,
  showAtmosphere: import_prop_types.default.bool,
  atmosphereColor: import_prop_types.default.string,
  atmosphereAltitude: import_prop_types.default.number,
  globeMaterial: import_prop_types.default.object,
  onGlobeReady: import_prop_types.default.func,
  onGlobeClick: import_prop_types.default.func,
  onGlobeRightClick: import_prop_types.default.func,
  pointsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  pointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  pointAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointRadius: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pointResolution: import_prop_types.default.number,
  pointsMerge: import_prop_types.default.bool,
  pointsTransitionDuration: import_prop_types.default.number,
  pointLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onPointClick: import_prop_types.default.func,
  onPointRightClick: import_prop_types.default.func,
  onPointHover: import_prop_types.default.func,
  arcsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  arcStartLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcStartLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcEndLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcEndLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.func]),
  arcAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcAltitudeAutoScale: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcStroke: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcCurveResolution: import_prop_types.default.number,
  arcCircularResolution: import_prop_types.default.number,
  arcDashLength: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcDashGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcDashInitialGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcDashAnimateTime: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  arcsTransitionDuration: import_prop_types.default.number,
  arcLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onArcClick: import_prop_types.default.func,
  onArcRightClick: import_prop_types.default.func,
  onArcHover: import_prop_types.default.func,
  polygonsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  polygonGeoJsonGeometry: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonCapColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonCapMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  polygonSideColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonSideMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  polygonStrokeColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  polygonAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  polygonCapCurvatureResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  polygonsTransitionDuration: import_prop_types.default.number,
  polygonLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onPolygonClick: import_prop_types.default.func,
  onPolygonRightClick: import_prop_types.default.func,
  onPolygonHover: import_prop_types.default.func,
  pathsData: import_prop_types.default.array,
  pathPoints: import_prop_types.default.oneOfType([import_prop_types.default.array, import_prop_types.default.string, import_prop_types.default.func]),
  pathPointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathPointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathPointAlt: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathResolution: import_prop_types.default.number,
  pathColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.func]),
  pathStroke: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashLength: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashInitialGap: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathDashAnimateTime: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  pathTransitionDuration: import_prop_types.default.number,
  pathLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onPathClick: import_prop_types.default.func,
  onPathRightClick: import_prop_types.default.func,
  onPathHover: import_prop_types.default.func,
  heatmapsData: import_prop_types.default.array,
  heatmapPoints: import_prop_types.default.oneOfType([import_prop_types.default.array, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapPointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapPointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapPointWeight: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapBandwidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapColorFn: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  heatmapColorSaturation: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapBaseAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapTopAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  heatmapsTransitionDuration: import_prop_types.default.number,
  onHeatmapClick: import_prop_types.default.func,
  onHeatmapRightClick: import_prop_types.default.func,
  onHeatmapHover: import_prop_types.default.func,
  hexBinPointsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  hexBinPointLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexBinPointLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexBinPointWeight: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexBinResolution: import_prop_types.default.number,
  hexMargin: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.func]),
  hexTopColor: import_prop_types.default.func,
  hexSideColor: import_prop_types.default.func,
  hexAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.func]),
  hexTopCurvatureResolution: import_prop_types.default.number,
  hexBinMerge: import_prop_types.default.bool,
  hexTransitionDuration: import_prop_types.default.number,
  hexLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onHexClick: import_prop_types.default.func,
  onHexRightClick: import_prop_types.default.func,
  onHexHover: import_prop_types.default.func,
  hexPolygonsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  hexPolygonGeoJsonGeometry: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonMargin: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonUseDots: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonCurvatureResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonDotResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  hexPolygonsTransitionDuration: import_prop_types.default.number,
  hexPolygonLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onHexPolygonClick: import_prop_types.default.func,
  onHexPolygonRightClick: import_prop_types.default.func,
  onHexPolygonHover: import_prop_types.default.func,
  tilesData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  tileLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileWidth: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileHeight: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tileUseGlobeProjection: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  tileMaterial: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  tileCurvatureResolution: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  tilesTransitionDuration: import_prop_types.default.number,
  tileLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onTileClick: import_prop_types.default.func,
  onTileRightClick: import_prop_types.default.func,
  onTileHover: import_prop_types.default.func,
  particlesData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  particlesList: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  particleLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particleLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particleAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particlesSize: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  particlesSizeAttenuation: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  particlesColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  particlesTexture: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  particleLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onParticleClick: import_prop_types.default.func,
  onParticleRightClick: import_prop_types.default.func,
  onParticleHover: import_prop_types.default.func,
  ringsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  ringLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.arrayOf(import_prop_types.default.string), import_prop_types.default.func]),
  ringResolution: import_prop_types.default.number,
  ringMaxRadius: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringPropagationSpeed: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  ringRepeatPeriod: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  labelLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelRotation: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelText: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  labelSize: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelTypeFace: import_prop_types.default.object,
  labelColor: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  labelResolution: import_prop_types.default.number,
  labelIncludeDot: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  labelDotRadius: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  labelDotOrientation: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  labelsTransitionDuration: import_prop_types.default.number,
  labelLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onLabelClick: import_prop_types.default.func,
  onLabelRightClick: import_prop_types.default.func,
  onLabelHover: import_prop_types.default.func,
  htmlElementsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  htmlLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  htmlLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  htmlAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  htmlElement: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  htmlElementVisibilityModifier: import_prop_types.default.func,
  htmlTransitionDuration: import_prop_types.default.number,
  objectsData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  objectLat: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  objectLng: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  objectAltitude: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.func]),
  objectRotation: import_prop_types.default.oneOfType([import_prop_types.default.shape({
    x: import_prop_types.default.number,
    y: import_prop_types.default.number,
    z: import_prop_types.default.number
  }), import_prop_types.default.string, import_prop_types.default.func]),
  objectFacesSurface: import_prop_types.default.oneOfType([import_prop_types.default.bool, import_prop_types.default.string, import_prop_types.default.func]),
  objectThreeObject: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  objectLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onObjectClick: import_prop_types.default.func,
  onObjectRightClick: import_prop_types.default.func,
  onObjectHover: import_prop_types.default.func,
  customLayerData: import_prop_types.default.arrayOf(import_prop_types.default.object),
  customThreeObject: import_prop_types.default.oneOfType([import_prop_types.default.object, import_prop_types.default.string, import_prop_types.default.func]),
  customThreeObjectUpdate: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  customLayerLabel: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.func]),
  onCustomLayerClick: import_prop_types.default.func,
  onCustomLayerRightClick: import_prop_types.default.func,
  onCustomLayerHover: import_prop_types.default.func,
  enablePointerInteraction: import_prop_types.default.bool,
  pointerEventsFilter: import_prop_types.default.func,
  lineHoverPrecision: import_prop_types.default.number,
  onZoom: import_prop_types.default.func
};
var Globe2 = index(globe, {
  methodNames: [
    // bind methods
    "pauseAnimation",
    "resumeAnimation",
    "pointOfView",
    "lights",
    "scene",
    "camera",
    "renderer",
    "postProcessingComposer",
    "controls",
    "getGlobeRadius",
    "getCoords",
    "getScreenCoords",
    "toGeoCoords",
    "toGlobeCoords"
  ],
  initPropNames: ["animateIn", "waitForGlobeReady", "rendererConfig"]
});
Globe2.displayName = "Globe";
Globe2.propTypes = GlobePropTypes;
export {
  Globe2 as default
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

three/build/three.module.js:
three/build/three.webgpu.js:
  (**
   * @license
   * Copyright 2010-2024 Three.js Authors
   * SPDX-License-Identifier: MIT
   *)

three-globe/dist/three-globe.mjs:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE *)
*/
//# sourceMappingURL=react-globe__gl.js.map
